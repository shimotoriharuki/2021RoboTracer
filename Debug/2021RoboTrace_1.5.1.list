
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000193b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019578  08019578  00029578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f74  08019f74  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019f74  08019f74  00029f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f7c  08019f7c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019f7c  08019f7c  00029f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f84  08019f84  00029f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019f88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046aa8  200001e0  0801a164  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046c88  0801a164  00036c88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b123  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c10  00000000  00000000  0006b32f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002338  00000000  00000000  00072f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  00075278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  000772e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026553  00000000  00000000  000ac788  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111072  00000000  00000000  000d2cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a738  00000000  00000000  001e3dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801955c 	.word	0x0801955c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801955c 	.word	0x0801955c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 ff66 	bl	800aea8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044780 	.word	0x20044780

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 ff4e 	bl	800aea8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044780 	.word	0x20044780

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fdef 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fb56 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fb50 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fb4a 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fb44 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fb3e 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fb38 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fb32 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fb2c 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fb26 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fb20 	bl	80096d8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fb14 	bl	80096d8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fb0e 	bl	80096d8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fde1 	bl	8016cf0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fc1e 	bl	800ea38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fc1a 	bl	800ea38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fc16 	bl	800ea38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fc12 	bl	800ea38 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004486c 	.word	0x2004486c
 8001248:	200447d4 	.word	0x200447d4
 800124c:	200448f4 	.word	0x200448f4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004486c 	.word	0x2004486c
 800137c:	200448f4 	.word	0x200448f4
 8001380:	200447d4 	.word	0x200447d4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004486c 	.word	0x2004486c
 80013c4:	200447d4 	.word	0x200447d4
 80013c8:	200448f4 	.word	0x200448f4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fbd2 	bl	800ebd8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fbce 	bl	800ebd8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449d4 	.word	0x200449d4
 8001458:	200446b8 	.word	0x200446b8
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder16getTotalDistanceEv>:
{
	return distance_10mm_;
}

float Encoder::getTotalDistance()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	ee07 3a90 	vmov	s15, r3
}
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f9d8 	bl	8001b1c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800176c:	f000 f9ec 	bl	8001b48 <fopen_folder_and_file>

	return ret;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <user_fclose+0x1c>)
 8001788:	f011 ff80 	bl	801368c <f_close>

	return ret;
 800178c:	79fb      	ldrb	r3, [r7, #7]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200435c4 	.word	0x200435c4

0800179c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	4613      	mov	r3, r2
 80017aa:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017b0:	2300      	movs	r3, #0
 80017b2:	81fb      	strh	r3, [r7, #14]
 80017b4:	e030      	b.n	8001818 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fed8 	bl	8000578 <__aeabi_f2d>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	e9cd 3400 	strd	r3, r4, [sp]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <sd_write_float+0x94>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	4817      	ldr	r0, [pc, #92]	; (8001834 <sd_write_float+0x98>)
 80017d6:	f014 fb3f 	bl	8015e58 <sniprintf>

		if(state == ADD_WRITE){
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <sd_write_float+0x9c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	; (8001838 <sd_write_float+0x9c>)
 80017e8:	f011 ffc4 	bl	8013774 <f_lseek>
 80017ec:	e003      	b.n	80017f6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80017ee:	2100      	movs	r1, #0
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <sd_write_float+0x9c>)
 80017f2:	f011 ffbf 	bl	8013774 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017f6:	480f      	ldr	r0, [pc, #60]	; (8001834 <sd_write_float+0x98>)
 80017f8:	f7fe fd02 	bl	8000200 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <sd_write_float+0xa0>)
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <sd_write_float+0x98>)
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <sd_write_float+0x9c>)
 8001804:	f011 fd2d 	bl	8013262 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001808:	f000 f9b8 	bl	8001b7c <bufclear>
	for(short i = 0 ; i < size; i++){
 800180c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001810:	b29b      	uxth	r3, r3
 8001812:	3301      	adds	r3, #1
 8001814:	b29b      	uxth	r3, r3
 8001816:	81fb      	strh	r3, [r7, #14]
 8001818:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbc8      	blt.n	80017b6 <sd_write_float+0x1a>
	}
	return ret;
 8001824:	7b7b      	ldrb	r3, [r7, #13]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	bf00      	nop
 8001830:	08019578 	.word	0x08019578
 8001834:	20043534 	.word	0x20043534
 8001838:	200435c4 	.word	0x200435c4
 800183c:	200435b4 	.word	0x200435b4

08001840 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f960 	bl	8001b1c <create_path>

	if(state == OVER_WRITE){
 800185c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d108      	bne.n	8001876 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001864:	4822      	ldr	r0, [pc, #136]	; (80018f0 <sd_write_array_float+0xb0>)
 8001866:	f011 ff3b 	bl	80136e0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800186a:	4822      	ldr	r0, [pc, #136]	; (80018f4 <sd_write_array_float+0xb4>)
 800186c:	f012 f9a6 	bl	8013bbc <f_unlink>
		f_chdir("..");
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <sd_write_array_float+0xb8>)
 8001872:	f011 ff35 	bl	80136e0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001876:	f000 f967 	bl	8001b48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800187a:	2300      	movs	r3, #0
 800187c:	82fb      	strh	r3, [r7, #22]
 800187e:	e028      	b.n	80018d2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001880:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe73 	bl	8000578 <__aeabi_f2d>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	e9cd 3400 	strd	r3, r4, [sp]
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <sd_write_array_float+0xbc>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <sd_write_array_float+0xc0>)
 80018a0:	f014 fada 	bl	8015e58 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <sd_write_array_float+0xc4>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4816      	ldr	r0, [pc, #88]	; (8001904 <sd_write_array_float+0xc4>)
 80018ac:	f011 ff62 	bl	8013774 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018b0:	4813      	ldr	r0, [pc, #76]	; (8001900 <sd_write_array_float+0xc0>)
 80018b2:	f7fe fca5 	bl	8000200 <strlen>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <sd_write_array_float+0xc8>)
 80018ba:	4911      	ldr	r1, [pc, #68]	; (8001900 <sd_write_array_float+0xc0>)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <sd_write_array_float+0xc4>)
 80018be:	f011 fcd0 	bl	8013262 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018c2:	f000 f95b 	bl	8001b7c <bufclear>
	for(short i = 0 ; i < size; i++){
 80018c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82fb      	strh	r3, [r7, #22]
 80018d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbd0      	blt.n	8001880 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <sd_write_array_float+0xc4>)
 80018e0:	f011 fed4 	bl	801368c <f_close>

	return ret;
 80018e4:	7d7b      	ldrb	r3, [r7, #21]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20043434 	.word	0x20043434
 80018f4:	200422f4 	.word	0x200422f4
 80018f8:	08019594 	.word	0x08019594
 80018fc:	08019578 	.word	0x08019578
 8001900:	20043534 	.word	0x20043534
 8001904:	200435c4 	.word	0x200435c4
 8001908:	200435b4 	.word	0x200435b4

0800190c <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f8f8 	bl	8001b1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800192c:	f000 f90c 	bl	8001b48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001930:	e019      	b.n	8001966 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001932:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4913      	ldr	r1, [pc, #76]	; (800198c <sd_read_array_float+0x80>)
 8001940:	4813      	ldr	r0, [pc, #76]	; (8001990 <sd_read_array_float+0x84>)
 8001942:	f014 fadd 	bl	8015f00 <siscanf>
		i++;
 8001946:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800194a:	b29b      	uxth	r3, r3
 800194c:	3301      	adds	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001952:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195a:	429a      	cmp	r2, r3
 800195c:	db03      	blt.n	8001966 <sd_read_array_float+0x5a>
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	3b01      	subs	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <sd_read_array_float+0x88>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <sd_read_array_float+0x84>)
 800196c:	f012 fb04 	bl	8013f78 <f_gets>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1dd      	bne.n	8001932 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001976:	f000 f901 	bl	8001b7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <sd_read_array_float+0x88>)
 800197c:	f011 fe86 	bl	801368c <f_close>

	return ret;
 8001980:	7d7b      	ldrb	r3, [r7, #21]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	08019584 	.word	0x08019584
 8001990:	20043534 	.word	0x20043534
 8001994:	200435c4 	.word	0x200435c4

08001998 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f8b2 	bl	8001b1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019b8:	f000 f8c6 	bl	8001b48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019bc:	e019      	b.n	80019f2 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <sd_read_array_double+0x80>)
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <sd_read_array_double+0x84>)
 80019ce:	f014 fa97 	bl	8015f00 <siscanf>
		i++;
 80019d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	db03      	blt.n	80019f2 <sd_read_array_double+0x5a>
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <sd_read_array_double+0x88>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <sd_read_array_double+0x84>)
 80019f8:	f012 fabe 	bl	8013f78 <f_gets>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1dd      	bne.n	80019be <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a02:	f000 f8bb 	bl	8001b7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <sd_read_array_double+0x88>)
 8001a08:	f011 fe40 	bl	801368c <f_close>

	return ret;
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	08019590 	.word	0x08019590
 8001a1c:	20043534 	.word	0x20043534
 8001a20:	200435c4 	.word	0x200435c4

08001a24 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f86e 	bl	8001b1c <create_path>

	if(state == OVER_WRITE){
 8001a40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d108      	bne.n	8001a5a <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a48:	481f      	ldr	r0, [pc, #124]	; (8001ac8 <sd_write_array_int+0xa4>)
 8001a4a:	f011 fe49 	bl	80136e0 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a4e:	481f      	ldr	r0, [pc, #124]	; (8001acc <sd_write_array_int+0xa8>)
 8001a50:	f012 f8b4 	bl	8013bbc <f_unlink>
		f_chdir("..");
 8001a54:	481e      	ldr	r0, [pc, #120]	; (8001ad0 <sd_write_array_int+0xac>)
 8001a56:	f011 fe43 	bl	80136e0 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a5a:	f000 f875 	bl	8001b48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a5e:	2300      	movs	r3, #0
 8001a60:	82fb      	strh	r3, [r7, #22]
 8001a62:	e022      	b.n	8001aaa <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <sd_write_array_int+0xb0>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <sd_write_array_int+0xb4>)
 8001a78:	f014 f9ee 	bl	8015e58 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <sd_write_array_int+0xb8>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4816      	ldr	r0, [pc, #88]	; (8001adc <sd_write_array_int+0xb8>)
 8001a84:	f011 fe76 	bl	8013774 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <sd_write_array_int+0xb4>)
 8001a8a:	f7fe fbb9 	bl	8000200 <strlen>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <sd_write_array_int+0xbc>)
 8001a92:	4911      	ldr	r1, [pc, #68]	; (8001ad8 <sd_write_array_int+0xb4>)
 8001a94:	4811      	ldr	r0, [pc, #68]	; (8001adc <sd_write_array_int+0xb8>)
 8001a96:	f011 fbe4 	bl	8013262 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001a9a:	f000 f86f 	bl	8001b7c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	82fb      	strh	r3, [r7, #22]
 8001aaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbd6      	blt.n	8001a64 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <sd_write_array_int+0xb8>)
 8001ab8:	f011 fde8 	bl	801368c <f_close>

	return ret;
 8001abc:	7d7b      	ldrb	r3, [r7, #21]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20043434 	.word	0x20043434
 8001acc:	200422f4 	.word	0x200422f4
 8001ad0:	08019594 	.word	0x08019594
 8001ad4:	08019598 	.word	0x08019598
 8001ad8:	20043534 	.word	0x20043534
 8001adc:	200435c4 	.word	0x200435c4
 8001ae0:	200435b4 	.word	0x200435b4

08001ae4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001aee:	2201      	movs	r2, #1
 8001af0:	4908      	ldr	r1, [pc, #32]	; (8001b14 <sd_mount+0x30>)
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_mount+0x34>)
 8001af4:	f011 f842 	bl	8012b7c <f_mount>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <sd_mount+0x20>
 8001afe:	2301      	movs	r3, #1
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	e001      	b.n	8001b08 <sd_mount+0x24>
	else ret = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	080195a0 	.word	0x080195a0
 8001b18:	200423f4 	.word	0x200423f4

08001b1c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <create_path+0x24>)
 8001b2a:	f014 fa15 	bl	8015f58 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <create_path+0x28>)
 8001b32:	f014 fa11 	bl	8015f58 <strcpy>

}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20043434 	.word	0x20043434
 8001b44:	200422f4 	.word	0x200422f4

08001b48 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b4c:	4807      	ldr	r0, [pc, #28]	; (8001b6c <fopen_folder_and_file+0x24>)
 8001b4e:	f012 f8f7 	bl	8013d40 <f_mkdir>

	f_chdir(dirpath);
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <fopen_folder_and_file+0x24>)
 8001b54:	f011 fdc4 	bl	80136e0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b58:	2213      	movs	r2, #19
 8001b5a:	4905      	ldr	r1, [pc, #20]	; (8001b70 <fopen_folder_and_file+0x28>)
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <fopen_folder_and_file+0x2c>)
 8001b5e:	f011 f853 	bl	8012c08 <f_open>

	f_chdir("..");
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <fopen_folder_and_file+0x30>)
 8001b64:	f011 fdbc 	bl	80136e0 <f_chdir>


}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20043434 	.word	0x20043434
 8001b70:	200422f4 	.word	0x200422f4
 8001b74:	200435c4 	.word	0x200435c4
 8001b78:	08019594 	.word	0x08019594

08001b7c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	e007      	b.n	8001b98 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b88:	4a08      	ldr	r2, [pc, #32]	; (8001bac <bufclear+0x30>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3301      	adds	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9c:	ddf4      	ble.n	8001b88 <bufclear+0xc>
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20043534 	.word	0x20043534

08001bb0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bca:	480e      	ldr	r0, [pc, #56]	; (8001c04 <read_byte+0x54>)
 8001bcc:	f009 f81a 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bd0:	f107 010f 	add.w	r1, r7, #15
 8001bd4:	2364      	movs	r3, #100	; 0x64
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <read_byte+0x58>)
 8001bda:	f00c f9c3 	bl	800df64 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	2201      	movs	r2, #1
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <read_byte+0x58>)
 8001be8:	f00c faf0 	bl	800e1cc <HAL_SPI_Receive>
	CS_SET;
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <read_byte+0x54>)
 8001bf4:	f009 f806 	bl	800ac04 <HAL_GPIO_WritePin>

	return val;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020400 	.word	0x40020400
 8001c08:	20044660 	.word	0x20044660

08001c0c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <write_byte+0x54>)
 8001c2e:	f008 ffe9 	bl	800ac04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c32:	f107 010f 	add.w	r1, r7, #15
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2201      	movs	r2, #1
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <write_byte+0x58>)
 8001c3c:	f00c f992 	bl	800df64 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c40:	1db9      	adds	r1, r7, #6
 8001c42:	2364      	movs	r3, #100	; 0x64
 8001c44:	2201      	movs	r2, #1
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <write_byte+0x58>)
 8001c48:	f00c f98c 	bl	800df64 <HAL_SPI_Transmit>
	CS_SET;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <write_byte+0x54>)
 8001c54:	f008 ffd6 	bl	800ac04 <HAL_GPIO_WritePin>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020400 	.word	0x40020400
 8001c64:	20044660 	.word	0x20044660

08001c68 <IMU_init>:

uint16_t IMU_init() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff ff9c 	bl	8001bb0 <read_byte>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	2be0      	cmp	r3, #224	; 0xe0
 8001c80:	d119      	bne.n	8001cb6 <IMU_init+0x4e>
		ret = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c86:	2101      	movs	r1, #1
 8001c88:	2006      	movs	r0, #6
 8001c8a:	f7ff ffbf 	bl	8001c0c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c8e:	2110      	movs	r1, #16
 8001c90:	2003      	movs	r0, #3
 8001c92:	f7ff ffbb 	bl	8001c0c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c96:	2120      	movs	r1, #32
 8001c98:	207f      	movs	r0, #127	; 0x7f
 8001c9a:	f7ff ffb7 	bl	8001c0c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff ffb3 	bl	8001c0c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ca6:	2106      	movs	r1, #6
 8001ca8:	2014      	movs	r0, #20
 8001caa:	f7ff ffaf 	bl	8001c0c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	207f      	movs	r0, #127	; 0x7f
 8001cb2:	f7ff ffab 	bl	8001c0c <write_byte>
	}
	return ret;
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <read_gyro_data>:

void read_gyro_data() {
 8001cc0:	b598      	push	{r3, r4, r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001cc4:	2033      	movs	r0, #51	; 0x33
 8001cc6:	f7ff ff73 	bl	8001bb0 <read_byte>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21c      	sxth	r4, r3
 8001cd0:	2034      	movs	r0, #52	; 0x34
 8001cd2:	f7ff ff6d 	bl	8001bb0 <read_byte>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <read_gyro_data+0x64>)
 8001ce0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001ce2:	2035      	movs	r0, #53	; 0x35
 8001ce4:	f7ff ff64 	bl	8001bb0 <read_byte>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21c      	sxth	r4, r3
 8001cee:	2036      	movs	r0, #54	; 0x36
 8001cf0:	f7ff ff5e 	bl	8001bb0 <read_byte>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4323      	orrs	r3, r4
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <read_gyro_data+0x68>)
 8001cfe:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d00:	2037      	movs	r0, #55	; 0x37
 8001d02:	f7ff ff55 	bl	8001bb0 <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2038      	movs	r0, #56	; 0x38
 8001d0e:	f7ff ff4f 	bl	8001bb0 <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <read_gyro_data+0x6c>)
 8001d1c:	801a      	strh	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	bd98      	pop	{r3, r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200445fc 	.word	0x200445fc
 8001d28:	200445fa 	.word	0x200445fa
 8001d2c:	200445f4 	.word	0x200445f4

08001d30 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	805a      	strh	r2, [r3, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	809a      	strh	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	80da      	strh	r2, [r3, #6]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	811a      	strh	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	815a      	strh	r2, [r3, #10]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
{

}
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001d7c:	f7ff ff74 	bl	8001c68 <IMU_init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d84:	f7ff f98c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff f998 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <_ZN3IMU4initEv+0x44>)
 8001d92:	f7ff f9bf 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff f991 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <_ZN3IMU4initEv+0x48>)
 8001da4:	f7ff f9b6 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dac:	f007 fc94 	bl	80096d8 <HAL_Delay>

}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	080195a4 	.word	0x080195a4
 8001dbc:	080195b0 	.word	0x080195b0

08001dc0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001dc8:	f7ff ff7a 	bl	8001cc0 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <_ZN3IMU12updateValuesEv+0xb8>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <_ZN3IMU12updateValuesEv+0xbc>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <_ZN3IMU12updateValuesEv+0xc0>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbaf 	bl	8000554 <__aeabi_i2d>
 8001df6:	a31c      	add	r3, pc, #112	; (adr r3, 8001e68 <_ZN3IMU12updateValuesEv+0xa8>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc14 	bl	8000628 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4625      	mov	r5, r4
 8001e06:	461c      	mov	r4, r3
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fba0 	bl	8000554 <__aeabi_i2d>
 8001e14:	a316      	add	r3, pc, #88	; (adr r3, 8001e70 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fc05 	bl	8000628 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fa49 	bl	80002bc <__adddf3>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	4621      	mov	r1, r4
 8001e32:	f7fe fea9 	bl	8000b88 <__aeabi_d2iz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e46:	801a      	strh	r2, [r3, #0]

	mon_zg= zg_;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	f3af 8000 	nop.w
 8001e68:	9999999a 	.word	0x9999999a
 8001e6c:	3fb99999 	.word	0x3fb99999
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	3feccccc 	.word	0x3feccccc
 8001e78:	200445fc 	.word	0x200445fc
 8001e7c:	200445fa 	.word	0x200445fa
 8001e80:	200445f4 	.word	0x200445f4
 8001e84:	20000214 	.word	0x20000214
 8001e88:	20000210 	.word	0x20000210
 8001e8c:	00000000 	.word	0x00000000

08001e90 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7fe fb5f 	bl	8000578 <__aeabi_f2d>
 8001eba:	a316      	add	r3, pc, #88	; (adr r3, 8001f14 <_ZN3IMU8getOmegaEv+0x84>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ece:	a313      	add	r3, pc, #76	; (adr r3, 8001f1c <_ZN3IMU8getOmegaEv+0x8c>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fba6 	bl	8000628 <__aeabi_dmul>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <_ZN3IMU8getOmegaEv+0x80>)
 8001eea:	f7fe fcc7 	bl	800087c <__aeabi_ddiv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	f7fe fe8f 	bl	8000c18 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	ee07 3a90 	vmov	s15, r3
}
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40668000 	.word	0x40668000
 8001f14:	66666666 	.word	0x66666666
 8001f18:	40306666 	.word	0x40306666
 8001f1c:	54411744 	.word	0x54411744
 8001f20:	400921fb 	.word	0x400921fb

08001f24 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f2c:	466b      	mov	r3, sp
 8001f2e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f34:	f007 fbd0 	bl	80096d8 <HAL_Delay>
	lcd_clear();
 8001f38:	f7ff f8b2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff f8be 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f44:	4840      	ldr	r0, [pc, #256]	; (8002048 <_ZN3IMU11calibrationEv+0x124>)
 8001f46:	f7ff f8e5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f8b7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f52:	483e      	ldr	r0, [pc, #248]	; (800204c <_ZN3IMU11calibrationEv+0x128>)
 8001f54:	f7ff f8de 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f5c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f62:	1e5d      	subs	r5, r3, #1
 8001f64:	61bd      	str	r5, [r7, #24]
 8001f66:	462b      	mov	r3, r5
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	f04f 0400 	mov.w	r4, #0
 8001f78:	0154      	lsls	r4, r2, #5
 8001f7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f7e:	014b      	lsls	r3, r1, #5
 8001f80:	462b      	mov	r3, r5
 8001f82:	3301      	adds	r3, #1
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	f04f 0400 	mov.w	r4, #0
 8001f92:	0154      	lsls	r4, r2, #5
 8001f94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f98:	014b      	lsls	r3, r1, #5
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	3307      	adds	r3, #7
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fac:	466b      	mov	r3, sp
 8001fae:	3303      	adds	r3, #3
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	83fb      	strh	r3, [r7, #30]
 8001fba:	8bfa      	ldrh	r2, [r7, #30]
 8001fbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	da13      	bge.n	8001fec <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	ee07 2a90 	vmov	s15, r2
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f007 fb7a 	bl	80096d8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001fe4:	8bfb      	ldrh	r3, [r7, #30]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	83fb      	strh	r3, [r7, #30]
 8001fea:	e7e6      	b.n	8001fba <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	429a      	cmp	r2, r3
 8002002:	d00e      	beq.n	8002022 <_ZN3IMU11calibrationEv+0xfe>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3304      	adds	r3, #4
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
 8002020:	e7ec      	b.n	8001ffc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002022:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	edc3 7a03 	vstr	s15, [r3, #12]
 800203c:	46b5      	mov	sp, r6
}
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002046:	bf00      	nop
 8002048:	080195b4 	.word	0x080195b4
 800204c:	080195c0 	.word	0x080195c0

08002050 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	4603      	mov	r3, r0
 8002058:	460a      	mov	r2, r1
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	4613      	mov	r3, r2
 800205e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002060:	79bb      	ldrb	r3, [r7, #6]
 8002062:	b299      	uxth	r1, r3
 8002064:	1dfa      	adds	r2, r7, #7
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <INA260_read+0x50>)
 800206e:	f008 ff1b 	bl	800aea8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	b299      	uxth	r1, r3
 8002076:	f107 020c 	add.w	r2, r7, #12
 800207a:	2364      	movs	r3, #100	; 0x64
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2302      	movs	r3, #2
 8002080:	4807      	ldr	r0, [pc, #28]	; (80020a0 <INA260_read+0x50>)
 8002082:	f009 f80f 	bl	800b0a4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8002086:	7b3b      	ldrb	r3, [r7, #12]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b21a      	sxth	r2, r3
 800208c:	7b7b      	ldrb	r3, [r7, #13]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	81fb      	strh	r3, [r7, #14]
	return val;
 8002096:	89fb      	ldrh	r3, [r7, #14]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20044814 	.word	0x20044814

080020a4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	4603      	mov	r3, r0
 80020b8:	71bb      	strb	r3, [r7, #6]
 80020ba:	460b      	mov	r3, r1
 80020bc:	717b      	strb	r3, [r7, #5]
 80020be:	4613      	mov	r3, r2
 80020c0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	733b      	strb	r3, [r7, #12]
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	737b      	strb	r3, [r7, #13]
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 80020ce:	793b      	ldrb	r3, [r7, #4]
 80020d0:	b299      	uxth	r1, r3
 80020d2:	f107 020c 	add.w	r2, r7, #12
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2303      	movs	r3, #3
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <INA260_write+0x48>)
 80020de:	f008 fee3 	bl	800aea8 <HAL_I2C_Master_Transmit>
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20044814 	.word	0x20044814

080020f0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	460b      	mov	r3, r1
 80020fc:	71bb      	strb	r3, [r7, #6]
 80020fe:	4613      	mov	r3, r2
 8002100:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002102:	797b      	ldrb	r3, [r7, #5]
 8002104:	79ba      	ldrb	r2, [r7, #6]
 8002106:	79f9      	ldrb	r1, [r7, #7]
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff ffcb 	bl	80020a4 <INA260_write>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	461a      	mov	r2, r3
 8002124:	21df      	movs	r1, #223	; 0xdf
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff ffe2 	bl	80020f0 <setConfig>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
{

}
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800215c:	482a      	ldr	r0, [pc, #168]	; (8002208 <_ZN8JoyStick8getValueEv+0xbc>)
 800215e:	f008 fd39 	bl	800abd4 <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <_ZN8JoyStick8getValueEv+0x2e>
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800217a:	2101      	movs	r1, #1
 800217c:	4823      	ldr	r0, [pc, #140]	; (800220c <_ZN8JoyStick8getValueEv+0xc0>)
 800217e:	f008 fd29 	bl	800abd4 <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <_ZN8JoyStick8getValueEv+0x4e>
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800219a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219e:	481a      	ldr	r0, [pc, #104]	; (8002208 <_ZN8JoyStick8getValueEv+0xbc>)
 80021a0:	f008 fd18 	bl	800abd4 <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <_ZN8JoyStick8getValueEv+0x70>
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021bc:	2104      	movs	r1, #4
 80021be:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN8JoyStick8getValueEv+0xc4>)
 80021c0:	f008 fd08 	bl	800abd4 <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <_ZN8JoyStick8getValueEv+0x90>
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	480a      	ldr	r0, [pc, #40]	; (8002208 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f008 fcf8 	bl	800abd4 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0xb0>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80021fc:	89fb      	ldrh	r3, [r7, #14]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40020400 	.word	0x40020400

08002214 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b52      	cmp	r3, #82	; 0x52
 8002224:	d112      	bne.n	800224c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222c:	4856      	ldr	r0, [pc, #344]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f008 fce9 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002238:	4853      	ldr	r0, [pc, #332]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800223a:	f008 fce3 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800223e:	2201      	movs	r2, #1
 8002240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002244:	4850      	ldr	r0, [pc, #320]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002246:	f008 fcdd 	bl	800ac04 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800224a:	e098      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b47      	cmp	r3, #71	; 0x47
 8002250:	d112      	bne.n	8002278 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002258:	484b      	ldr	r0, [pc, #300]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 fcd3 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4848      	ldr	r0, [pc, #288]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f008 fccd 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002270:	4845      	ldr	r0, [pc, #276]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002272:	f008 fcc7 	bl	800ac04 <HAL_GPIO_WritePin>
}
 8002276:	e082      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	2b42      	cmp	r3, #66	; 0x42
 800227c:	d112      	bne.n	80022a4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002284:	4840      	ldr	r0, [pc, #256]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 fcbd 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002290:	483d      	ldr	r0, [pc, #244]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f008 fcb7 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229c:	483a      	ldr	r0, [pc, #232]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800229e:	f008 fcb1 	bl	800ac04 <HAL_GPIO_WritePin>
}
 80022a2:	e06c      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b43      	cmp	r3, #67	; 0x43
 80022a8:	d112      	bne.n	80022d0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b0:	4835      	ldr	r0, [pc, #212]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 fca7 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022bc:	4832      	ldr	r0, [pc, #200]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f008 fca1 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c8:	482f      	ldr	r0, [pc, #188]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022ca:	f008 fc9b 	bl	800ac04 <HAL_GPIO_WritePin>
}
 80022ce:	e056      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b4d      	cmp	r3, #77	; 0x4d
 80022d4:	d112      	bne.n	80022fc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022dc:	482a      	ldr	r0, [pc, #168]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 fc91 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e8:	4827      	ldr	r0, [pc, #156]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f008 fc8b 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f4:	4824      	ldr	r0, [pc, #144]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 80022f6:	f008 fc85 	bl	800ac04 <HAL_GPIO_WritePin>
}
 80022fa:	e040      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b59      	cmp	r3, #89	; 0x59
 8002300:	d112      	bne.n	8002328 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	481f      	ldr	r0, [pc, #124]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 fc7b 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f008 fc75 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002320:	4819      	ldr	r0, [pc, #100]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002322:	f008 fc6f 	bl	800ac04 <HAL_GPIO_WritePin>
}
 8002326:	e02a      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	2b57      	cmp	r3, #87	; 0x57
 800232c:	d112      	bne.n	8002354 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002334:	4814      	ldr	r0, [pc, #80]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 fc65 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002340:	4811      	ldr	r0, [pc, #68]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002342:	f008 fc5f 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800234c:	480e      	ldr	r0, [pc, #56]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800234e:	f008 fc59 	bl	800ac04 <HAL_GPIO_WritePin>
}
 8002352:	e014      	b.n	800237e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	2b7e      	cmp	r3, #126	; 0x7e
 8002358:	d111      	bne.n	800237e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002360:	4809      	ldr	r0, [pc, #36]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 fc4f 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800236e:	f008 fc49 	bl	800ac04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <_ZN3LED9fullColorEc+0x174>)
 800237a:	f008 fc43 	bl	800ac04 <HAL_GPIO_WritePin>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40020000 	.word	0x40020000

0800238c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	4613      	mov	r3, r2
 800239a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023aa:	4813      	ldr	r0, [pc, #76]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023ac:	f008 fc2a 	bl	800ac04 <HAL_GPIO_WritePin>
 80023b0:	e009      	b.n	80023c6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023c2:	f008 fc1f 	bl	800ac04 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80023c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023d6:	f008 fc15 	bl	800ac04 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80023da:	e009      	b.n	80023f0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80023dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f008 fc0a 	bl	800ac04 <HAL_GPIO_WritePin>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020000 	.word	0x40020000

080023fc <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b092      	sub	sp, #72	; 0x48
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fe92 	bl	8002134 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	331c      	adds	r3, #28
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
 800241e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	429a      	cmp	r2, r3
 8002424:	d008      	beq.n	8002438 <_ZN10LineSensorC1Ev+0x3c>
 8002426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	2200      	movs	r2, #0
 800242e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	3302      	adds	r3, #2
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
 8002436:	e7f2      	b.n	800241e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	643b      	str	r3, [r7, #64]	; 0x40
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	3338      	adds	r3, #56	; 0x38
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	429a      	cmp	r2, r3
 8002450:	d009      	beq.n	8002466 <_ZN10LineSensorC1Ev+0x6a>
 8002452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002454:	623b      	str	r3, [r7, #32]
		s = 0;
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	3304      	adds	r3, #4
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
 8002464:	e7f1      	b.n	800244a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3338      	adds	r3, #56	; 0x38
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d009      	beq.n	8002494 <_ZN10LineSensorC1Ev+0x98>
 8002480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002482:	617b      	str	r3, [r7, #20]
		m = 0;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	3304      	adds	r3, #4
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	e7f1      	b.n	8002478 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	3338      	adds	r3, #56	; 0x38
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d009      	beq.n	80024c2 <_ZN10LineSensorC1Ev+0xc6>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024b8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	3304      	adds	r3, #4
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c0:	e7f1      	b.n	80024a6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	3748      	adds	r7, #72	; 0x48
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	220e      	movs	r2, #14
 80024d8:	4619      	mov	r1, r3
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80024dc:	f007 f962 	bl	80097a4 <HAL_ADC_Start_DMA>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20044738 	.word	0x20044738

080024ec <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	dc2f      	bgt.n	800255e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3392      	adds	r3, #146	; 0x92
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	ed93 7a00 	vldr	s14, [r3]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	33a0      	adds	r3, #160	; 0xa0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	1a5b      	subs	r3, r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	440b      	add	r3, r1
 800254a:	3306      	adds	r3, #6
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e7cc      	b.n	80024f8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002568:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b09      	cmp	r3, #9
 8002570:	d902      	bls.n	8002578 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]


}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	20000254 	.word	0x20000254

08002588 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002588:	b490      	push	{r4, r7}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800259a:	2b0d      	cmp	r3, #13
 800259c:	f200 8087 	bhi.w	80026ae <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d81c      	bhi.n	80025e8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025b2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025b6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4423      	add	r3, r4
 80025c6:	3306      	adds	r3, #6
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4403      	add	r3, r0
 80025cc:	3304      	adds	r3, #4
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	008b      	lsls	r3, r1, #2
 80025d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025d6:	440b      	add	r3, r1
 80025d8:	3b30      	subs	r3, #48	; 0x30
 80025da:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025e0:	3301      	adds	r3, #1
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	e7de      	b.n	80025a6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025f2:	2b09      	cmp	r3, #9
 80025f4:	d84d      	bhi.n	8002692 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80025f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025fa:	3301      	adds	r3, #1
 80025fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002600:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002604:	2b09      	cmp	r3, #9
 8002606:	d83e      	bhi.n	8002686 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002608:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002612:	4413      	add	r3, r2
 8002614:	3b30      	subs	r3, #48	; 0x30
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002624:	4413      	add	r3, r2
 8002626:	3b30      	subs	r3, #48	; 0x30
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	d521      	bpl.n	800267a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002636:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002640:	4413      	add	r3, r2
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002648:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800264c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002656:	440a      	add	r2, r1
 8002658:	3a30      	subs	r2, #48	; 0x30
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002662:	440b      	add	r3, r1
 8002664:	3b30      	subs	r3, #48	; 0x30
 8002666:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002668:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002672:	4413      	add	r3, r2
 8002674:	3b30      	subs	r3, #48	; 0x30
 8002676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002678:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800267a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267e:	3301      	adds	r3, #1
 8002680:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002684:	e7bc      	b.n	8002600 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002686:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800268a:	3301      	adds	r3, #1
 800268c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002690:	e7ad      	b.n	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 8002692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	33b0      	adds	r3, #176	; 0xb0
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026a6:	3301      	adds	r3, #1
 80026a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ac:	e773      	b.n	8002596 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026b6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 80026c0:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 80026ca:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 80026d4:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 80026de:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 80026e8:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 80026f2:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 80026fc:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002704:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002706:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002710:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800271a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002722:	4a16      	ldr	r2, [pc, #88]	; (800277c <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002724:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800272e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002738:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002740:	4a11      	ldr	r2, [pc, #68]	; (8002788 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bc90      	pop	{r4, r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000218 	.word	0x20000218
 8002754:	2000021c 	.word	0x2000021c
 8002758:	20000220 	.word	0x20000220
 800275c:	20000224 	.word	0x20000224
 8002760:	20000228 	.word	0x20000228
 8002764:	2000022c 	.word	0x2000022c
 8002768:	20000230 	.word	0x20000230
 800276c:	20000234 	.word	0x20000234
 8002770:	20000238 	.word	0x20000238
 8002774:	2000023c 	.word	0x2000023c
 8002778:	20000240 	.word	0x20000240
 800277c:	20000244 	.word	0x20000244
 8002780:	20000248 	.word	0x20000248
 8002784:	2000024c 	.word	0x2000024c
 8002788:	20000250 	.word	0x20000250

0800278c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0a0      	sub	sp, #128	; 0x80
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002794:	2064      	movs	r0, #100	; 0x64
 8002796:	f006 ff9f 	bl	80096d8 <HAL_Delay>

	lcd_clear();
 800279a:	f7fe fc81 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800279e:	2100      	movs	r1, #0
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fc8d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027a6:	4886      	ldr	r0, [pc, #536]	; (80029c0 <_ZN10LineSensor11calibrationEv+0x234>)
 80027a8:	f7fe fcb4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ac:	2101      	movs	r1, #1
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe fc86 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027b4:	4883      	ldr	r0, [pc, #524]	; (80029c4 <_ZN10LineSensor11calibrationEv+0x238>)
 80027b6:	f7fe fcad 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027c0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027c4:	2b0d      	cmp	r3, #13
 80027c6:	d823      	bhi.n	8002810 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80027c8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	32b0      	adds	r2, #176	; 0xb0
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	440a      	add	r2, r1
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027e0:	440b      	add	r3, r1
 80027e2:	3b40      	subs	r3, #64	; 0x40
 80027e4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80027e6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027ea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	32b0      	adds	r2, #176	; 0xb0
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	440a      	add	r2, r1
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027fe:	440b      	add	r3, r1
 8002800:	3b78      	subs	r3, #120	; 0x78
 8002802:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002804:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002808:	3301      	adds	r3, #1
 800280a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800280e:	e7d7      	b.n	80027c0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fc98 	bl	800214c <_ZN8JoyStick8getValueEv>
 800281c:	4603      	mov	r3, r0
 800281e:	2b02      	cmp	r3, #2
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d079      	beq.n	8002920 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800282c:	2300      	movs	r3, #0
 800282e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002832:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002836:	2b0d      	cmp	r3, #13
 8002838:	d850      	bhi.n	80028dc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800283a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002844:	4413      	add	r3, r2
 8002846:	3b40      	subs	r3, #64	; 0x40
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	d50f      	bpl.n	8002886 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002866:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800286a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	32b0      	adds	r2, #176	; 0xb0
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	440a      	add	r2, r1
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800287e:	440b      	add	r3, r1
 8002880:	3b40      	subs	r3, #64	; 0x40
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e024      	b.n	80028d0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002886:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002890:	4413      	add	r3, r2
 8002892:	3b78      	subs	r3, #120	; 0x78
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	33b0      	adds	r3, #176	; 0xb0
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	dd0e      	ble.n	80028d0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028b2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	32b0      	adds	r2, #176	; 0xb0
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	440a      	add	r2, r1
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028ca:	440b      	add	r3, r1
 80028cc:	3b78      	subs	r3, #120	; 0x78
 80028ce:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028d4:	3301      	adds	r3, #1
 80028d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028da:	e7aa      	b.n	8002832 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 fa1a 	bl	8004d1c <_ZN12RotarySwitch8getValueEv>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028fe:	2201      	movs	r2, #1
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fd41 	bl	800238c <_ZN3LED2LREaa>
 800290a:	e781      	b.n	8002810 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002912:	2200      	movs	r2, #0
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fd37 	bl	800238c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800291e:	e777      	b.n	8002810 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002920:	2300      	movs	r3, #0
 8002922:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002926:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800292a:	2b0d      	cmp	r3, #13
 800292c:	d826      	bhi.n	800297c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800292e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002938:	4413      	add	r3, r2
 800293a:	3b40      	subs	r3, #64	; 0x40
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800294a:	4413      	add	r3, r2
 800294c:	3b78      	subs	r3, #120	; 0x78
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80029c8 <_ZN10LineSensor11calibrationEv+0x23c>
 800295e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	3392      	adds	r3, #146	; 0x92
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002970:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002974:	3301      	adds	r3, #1
 8002976:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800297a:	e7d4      	b.n	8002926 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800297c:	2300      	movs	r3, #0
 800297e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002982:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002986:	2b0d      	cmp	r3, #13
 8002988:	d815      	bhi.n	80029b6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800298a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800298e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002998:	440a      	add	r2, r1
 800299a:	3a78      	subs	r2, #120	; 0x78
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	33a0      	adds	r3, #160	; 0xa0
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3304      	adds	r3, #4
 80029a8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029aa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ae:	3301      	adds	r3, #1
 80029b0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b4:	e7e5      	b.n	8002982 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029b6:	bf00      	nop
 80029b8:	3780      	adds	r7, #128	; 0x80
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	080195cc 	.word	0x080195cc
 80029c4:	080195d8 	.word	0x080195d8
 80029c8:	447a0000 	.word	0x447a0000

080029cc <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80029d8:	2303      	movs	r3, #3
 80029da:	81bb      	strh	r3, [r7, #12]
 80029dc:	89bb      	ldrh	r3, [r7, #12]
 80029de:	2b0a      	cmp	r3, #10
 80029e0:	d814      	bhi.n	8002a0c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80029e2:	89bb      	ldrh	r3, [r7, #12]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	33b0      	adds	r3, #176	; 0xb0
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a60 <_ZN10LineSensor13emergencyStopEv+0x94>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	db02      	blt.n	8002a04 <_ZN10LineSensor13emergencyStopEv+0x38>
 80029fe:	89fb      	ldrh	r3, [r7, #14]
 8002a00:	3301      	adds	r3, #1
 8002a02:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a04:	89bb      	ldrh	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	81bb      	strh	r3, [r7, #12]
 8002a0a:	e7e7      	b.n	80029dc <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d906      	bls.n	8002a20 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	e002      	b.n	8002a26 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	2b63      	cmp	r3, #99	; 0x63
 8002a2c:	d903      	bls.n	8002a36 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e002      	b.n	8002a3c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d903      	bls.n	8002a50 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a4e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]

}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	44098000 	.word	0x44098000
 8002a64:	20000256 	.word	0x20000256
 8002a68:	20000258 	.word	0x20000258

08002a6c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a7a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b18:	3350      	adds	r3, #80	; 0x50
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b24:	3352      	adds	r3, #82	; 0x52
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b30:	3354      	adds	r3, #84	; 0x54
 8002b32:	2200      	movs	r2, #0
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b3c:	3388      	adds	r3, #136	; 0x88
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b48:	338a      	adds	r3, #138	; 0x8a
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b54:	338c      	adds	r3, #140	; 0x8c
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b60:	338e      	adds	r3, #142	; 0x8e
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b6c:	338f      	adds	r3, #143	; 0x8f
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b78:	3390      	adds	r3, #144	; 0x90
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b84:	3394      	adds	r3, #148	; 0x94
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b92:	3398      	adds	r3, #152	; 0x98
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba0:	339c      	adds	r3, #156	; 0x9c
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bae:	33a0      	adds	r3, #160	; 0xa0
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bbc:	33a4      	adds	r3, #164	; 0xa4
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc8:	33a6      	adds	r3, #166	; 0xa6
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a3a      	ldr	r2, [r7, #32]
 8002be4:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf0:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf6:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfc:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c04:	2300      	movs	r3, #0
 8002c06:	82fb      	strh	r3, [r7, #22]
 8002c08:	8afb      	ldrh	r3, [r7, #22]
 8002c0a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d80d      	bhi.n	8002c2e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002c12:	8afb      	ldrh	r3, [r7, #22]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c26:	8afb      	ldrh	r3, [r7, #22]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	82fb      	strh	r3, [r7, #22]
 8002c2c:	e7ec      	b.n	8002c08 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c2e:	2300      	movs	r3, #0
 8002c30:	82bb      	strh	r3, [r7, #20]
 8002c32:	8abb      	ldrh	r3, [r7, #20]
 8002c34:	2b63      	cmp	r3, #99	; 0x63
 8002c36:	d80d      	bhi.n	8002c54 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c38:	8abb      	ldrh	r3, [r7, #20]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c40:	3316      	adds	r3, #22
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c4c:	8abb      	ldrh	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	82bb      	strh	r3, [r7, #20]
 8002c52:	e7ee      	b.n	8002c32 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c54:	2300      	movs	r3, #0
 8002c56:	827b      	strh	r3, [r7, #18]
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
 8002c5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c5e:	d20d      	bcs.n	8002c7c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002c60:	8a7b      	ldrh	r3, [r7, #18]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c68:	333a      	adds	r3, #58	; 0x3a
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c74:	8a7b      	ldrh	r3, [r7, #18]
 8002c76:	3301      	adds	r3, #1
 8002c78:	827b      	strh	r3, [r7, #18]
 8002c7a:	e7ed      	b.n	8002c58 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	823b      	strh	r3, [r7, #16]
 8002c80:	8a3b      	ldrh	r3, [r7, #16]
 8002c82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c86:	d20d      	bcs.n	8002ca4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002c88:	8a3b      	ldrh	r3, [r7, #16]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002c90:	332e      	adds	r3, #46	; 0x2e
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c9c:	8a3b      	ldrh	r3, [r7, #16]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	823b      	strh	r3, [r7, #16]
 8002ca2:	e7ed      	b.n	8002c80 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002cec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d00:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	ee07 3a90 	vmov	s15, r3

}
 8002d10:	eeb0 0a67 	vmov.f32	s0, s15
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000025c 	.word	0x2000025c
 8002d24:	00000000 	.word	0x00000000

08002d28 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ffbf 	bl	8002cb4 <_ZN9LineTrace9calcErrorEv>
 8002d36:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d5a:	3354      	adds	r3, #84	; 0x54
 8002d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d14c      	bne.n	8002dfe <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002d7c:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	ee17 0a90 	vmov	r0, s15
 8002d92:	f7fd fbf1 	bl	8000578 <__aeabi_f2d>
 8002d96:	a350      	add	r3, pc, #320	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fd6e 	bl	800087c <__aeabi_ddiv>
 8002da0:	4603      	mov	r3, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	4618      	mov	r0, r3
 8002da6:	4621      	mov	r1, r4
 8002da8:	f7fd ff36 	bl	8000c18 <__aeabi_d2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbdf 	bl	8000578 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002dc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dcc:	ee17 0a90 	vmov	r0, s15
 8002dd0:	f7fd fbd2 	bl	8000578 <__aeabi_f2d>
 8002dd4:	a340      	add	r3, pc, #256	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc25 	bl	8000628 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa69 	bl	80002bc <__adddf3>
 8002dea:	4603      	mov	r3, r0
 8002dec:	460c      	mov	r4, r1
 8002dee:	4618      	mov	r0, r3
 8002df0:	4621      	mov	r1, r4
 8002df2:	f7fd ff11 	bl	8000c18 <__aeabi_d2f>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e04b      	b.n	8002e96 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e04:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e28:	ee17 0a90 	vmov	r0, s15
 8002e2c:	f7fd fba4 	bl	8000578 <__aeabi_f2d>
 8002e30:	a329      	add	r3, pc, #164	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fd21 	bl	800087c <__aeabi_ddiv>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4621      	mov	r1, r4
 8002e42:	f7fd fee9 	bl	8000c18 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb92 	bl	8000578 <__aeabi_f2d>
 8002e54:	4604      	mov	r4, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e66:	ee17 0a90 	vmov	r0, s15
 8002e6a:	f7fd fb85 	bl	8000578 <__aeabi_f2d>
 8002e6e:	a31a      	add	r3, pc, #104	; (adr r3, 8002ed8 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbd8 	bl	8000628 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd fa1c 	bl	80002bc <__adddf3>
 8002e84:	4603      	mov	r3, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	f7fd fec4 	bl	8000c18 <__aeabi_d2f>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e94:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002e96:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002eba:	edd7 0a02 	vldr	s1, [r7, #8]
 8002ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f002 fc3c 	bl	8005740 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6013      	str	r3, [r2, #0]

}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002edc:	3f50624d 	.word	0x3f50624d
 8002ee0:	2000026c 	.word	0x2000026c
 8002ee4:	20000268 	.word	0x20000268

08002ee8 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fbf5 	bl	80016e4 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 fdcd 	bl	8004a9e <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 faf4 	bl	80044f6 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fb55 	bl	80045da <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f52:	3388      	adds	r3, #136	; 0x88
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	461c      	mov	r4, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fe fbb4 	bl	80016c6 <_ZN7Encoder16getTotalDistanceEv>
 8002f5e:	eef0 7a40 	vmov.f32	s15, s0
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f68:	3316      	adds	r3, #22
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f78:	3388      	adds	r3, #136	; 0x88
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f86:	3388      	adds	r3, #136	; 0x88
 8002f88:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f90:	3388      	adds	r3, #136	; 0x88
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	2b63      	cmp	r3, #99	; 0x63
 8002f96:	d905      	bls.n	8002fa4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f9e:	3388      	adds	r3, #136	; 0x88
 8002fa0:	2263      	movs	r2, #99	; 0x63
 8002fa2:	801a      	strh	r2, [r3, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}

08002fac <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fbe:	3354      	adds	r3, #84	; 0x54
 8002fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d143      	bne.n	8003050 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002fc8:	edd7 7a00 	vldr	s15, [r7]
 8002fcc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80030e8 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd8:	d504      	bpl.n	8002fe4 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e076      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002fe4:	edd7 7a00 	vldr	s15, [r7]
 8002fe8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80030ec <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	d502      	bpl.n	8002ffc <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e06a      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002ffc:	edd7 7a00 	vldr	s15, [r7]
 8003000:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80030f4 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8003004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	d503      	bpl.n	8003016 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 800300e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e05d      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8003016:	edd7 7a00 	vldr	s15, [r7]
 800301a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80030f8 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d502      	bpl.n	800302e <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <_ZN9LineTrace15radius2VelocityEf+0x150>)
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e051      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 800302e:	edd7 7a00 	vldr	s15, [r7]
 8003032:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003100 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	d502      	bpl.n	8003046 <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e045      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e040      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003056:	3354      	adds	r3, #84	; 0x54
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d136      	bne.n	80030ce <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003060:	edd7 7a00 	vldr	s15, [r7]
 8003064:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030e8 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	d504      	bpl.n	800307c <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e02a      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 800307c:	edd7 7a00 	vldr	s15, [r7]
 8003080:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80030f8 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	d502      	bpl.n	8003094 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e01e      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003094:	edd7 7a00 	vldr	s15, [r7]
 8003098:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003100 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d502      	bpl.n	80030ac <_ZN9LineTrace15radius2VelocityEf+0x100>
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e012      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 80030ac:	edd7 7a00 	vldr	s15, [r7]
 80030b0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800310c <_ZN9LineTrace15radius2VelocityEf+0x160>
 80030b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	d502      	bpl.n	80030c4 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e006      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e001      	b.n	80030d2 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80030d0:	60fb      	str	r3, [r7, #12]

	return velocity;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ee07 3a90 	vmov	s15, r3
}
 80030d8:	eeb0 0a67 	vmov.f32	s0, s15
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	43960000 	.word	0x43960000
 80030ec:	44480000 	.word	0x44480000
 80030f0:	3fd9999a 	.word	0x3fd9999a
 80030f4:	447a0000 	.word	0x447a0000
 80030f8:	44bb8000 	.word	0x44bb8000
 80030fc:	40133333 	.word	0x40133333
 8003100:	44fa0000 	.word	0x44fa0000
 8003104:	40200000 	.word	0x40200000
 8003108:	40066666 	.word	0x40066666
 800310c:	451c4000 	.word	0x451c4000
 8003110:	40400000 	.word	0x40400000
 8003114:	3fa66666 	.word	0x3fa66666

08003118 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	ed87 0a02 	vstr	s0, [r7, #8]
 8003124:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003126:	f241 736f 	movw	r3, #5999	; 0x176f
 800312a:	83fb      	strh	r3, [r7, #30]
 800312c:	8bfb      	ldrh	r3, [r7, #30]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 808d 	beq.w	800324e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003134:	8bfb      	ldrh	r3, [r7, #30]
 8003136:	3b01      	subs	r3, #1
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800313e:	3304      	adds	r3, #4
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	8bfb      	ldrh	r3, [r7, #30]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003150:	3304      	adds	r3, #4
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003162:	edd7 7a06 	vldr	s15, [r7, #24]
 8003166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	dd6a      	ble.n	8003246 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003170:	8bfb      	ldrh	r3, [r7, #30]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f9fc 	bl	8000578 <__aeabi_f2d>
 8003180:	a335      	add	r3, pc, #212	; (adr r3, 8003258 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd fa4f 	bl	8000628 <__aeabi_dmul>
 800318a:	4603      	mov	r3, r0
 800318c:	460c      	mov	r4, r1
 800318e:	4625      	mov	r5, r4
 8003190:	461c      	mov	r4, r3
 8003192:	69b8      	ldr	r0, [r7, #24]
 8003194:	f7fd f9f0 	bl	8000578 <__aeabi_f2d>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd fb6c 	bl	800087c <__aeabi_ddiv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	4618      	mov	r0, r3
 80031aa:	4621      	mov	r1, r4
 80031ac:	f7fd fd34 	bl	8000c18 <__aeabi_d2f>
 80031b0:	4603      	mov	r3, r0
 80031b2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80031b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80031b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80031c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80031c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	dd37      	ble.n	8003246 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80031d6:	8bfb      	ldrh	r3, [r7, #30]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80031de:	3304      	adds	r3, #4
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f9c6 	bl	8000578 <__aeabi_f2d>
 80031ec:	4604      	mov	r4, r0
 80031ee:	460d      	mov	r5, r1
 80031f0:	8bfb      	ldrh	r3, [r7, #30]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	ed93 7a00 	vldr	s14, [r3]
 80031fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	ee17 0a90 	vmov	r0, s15
 8003208:	f7fd f9b6 	bl	8000578 <__aeabi_f2d>
 800320c:	a312      	add	r3, pc, #72	; (adr r3, 8003258 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd fa09 	bl	8000628 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd f84d 	bl	80002bc <__adddf3>
 8003222:	4603      	mov	r3, r0
 8003224:	460c      	mov	r4, r1
 8003226:	4619      	mov	r1, r3
 8003228:	4622      	mov	r2, r4
 800322a:	8bfb      	ldrh	r3, [r7, #30]
 800322c:	1e5c      	subs	r4, r3, #1
 800322e:	4608      	mov	r0, r1
 8003230:	4611      	mov	r1, r2
 8003232:	f7fd fcf1 	bl	8000c18 <__aeabi_d2f>
 8003236:	4601      	mov	r1, r0
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800323e:	3304      	adds	r3, #4
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003246:	8bfb      	ldrh	r3, [r7, #30]
 8003248:	3b01      	subs	r3, #1
 800324a:	83fb      	strh	r3, [r7, #30]
 800324c:	e76e      	b.n	800312c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800324e:	bf00      	nop
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bdb0      	pop	{r4, r5, r7, pc}
 8003256:	bf00      	nop
 8003258:	d2f1a9fc 	.word	0xd2f1a9fc
 800325c:	3f50624d 	.word	0x3f50624d

08003260 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	ed87 0a02 	vstr	s0, [r7, #8]
 800326c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800326e:	2300      	movs	r3, #0
 8003270:	83fb      	strh	r3, [r7, #30]
 8003272:	8bfb      	ldrh	r3, [r7, #30]
 8003274:	f241 726f 	movw	r2, #5999	; 0x176f
 8003278:	4293      	cmp	r3, r2
 800327a:	f200 808d 	bhi.w	8003398 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800327e:	8bfb      	ldrh	r3, [r7, #30]
 8003280:	3301      	adds	r3, #1
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003288:	3304      	adds	r3, #4
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	8bfb      	ldrh	r3, [r7, #30]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800329a:	3304      	adds	r3, #4
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	dd6a      	ble.n	8003390 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80032ba:	8bfb      	ldrh	r3, [r7, #30]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f957 	bl	8000578 <__aeabi_f2d>
 80032ca:	a335      	add	r3, pc, #212	; (adr r3, 80033a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	f7fd f9aa 	bl	8000628 <__aeabi_dmul>
 80032d4:	4603      	mov	r3, r0
 80032d6:	460c      	mov	r4, r1
 80032d8:	4625      	mov	r5, r4
 80032da:	461c      	mov	r4, r3
 80032dc:	69b8      	ldr	r0, [r7, #24]
 80032de:	f7fd f94b 	bl	8000578 <__aeabi_f2d>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4620      	mov	r0, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	f7fd fac7 	bl	800087c <__aeabi_ddiv>
 80032ee:	4603      	mov	r3, r0
 80032f0:	460c      	mov	r4, r1
 80032f2:	4618      	mov	r0, r3
 80032f4:	4621      	mov	r1, r4
 80032f6:	f7fd fc8f 	bl	8000c18 <__aeabi_d2f>
 80032fa:	4603      	mov	r3, r0
 80032fc:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80032fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8003302:	ed97 7a05 	vldr	s14, [r7, #20]
 8003306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800330a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800330e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003312:	edd7 7a02 	vldr	s15, [r7, #8]
 8003316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	dd37      	ble.n	8003390 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003320:	8bfb      	ldrh	r3, [r7, #30]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003328:	3304      	adds	r3, #4
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd f921 	bl	8000578 <__aeabi_f2d>
 8003336:	4604      	mov	r4, r0
 8003338:	460d      	mov	r5, r1
 800333a:	8bfb      	ldrh	r3, [r7, #30]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	ed93 7a00 	vldr	s14, [r3]
 8003346:	edd7 7a02 	vldr	s15, [r7, #8]
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	ee17 0a90 	vmov	r0, s15
 8003352:	f7fd f911 	bl	8000578 <__aeabi_f2d>
 8003356:	a312      	add	r3, pc, #72	; (adr r3, 80033a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f7fd f964 	bl	8000628 <__aeabi_dmul>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4620      	mov	r0, r4
 8003366:	4629      	mov	r1, r5
 8003368:	f7fc ffa8 	bl	80002bc <__adddf3>
 800336c:	4603      	mov	r3, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4619      	mov	r1, r3
 8003372:	4622      	mov	r2, r4
 8003374:	8bfb      	ldrh	r3, [r7, #30]
 8003376:	1c5c      	adds	r4, r3, #1
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	f7fd fc4c 	bl	8000c18 <__aeabi_d2f>
 8003380:	4601      	mov	r1, r0
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003388:	3304      	adds	r3, #4
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	3301      	adds	r3, #1
 8003394:	83fb      	strh	r3, [r7, #30]
 8003396:	e76c      	b.n	8003272 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003398:	bf00      	nop
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}
 80033a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033a4:	3f50624d 	.word	0x3f50624d

080033a8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe f9a3 	bl	8001700 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033c0:	3350      	adds	r3, #80	; 0x50
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033dc:	3350      	adds	r3, #80	; 0x50
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033e8:	3352      	adds	r3, #82	; 0x52
 80033ea:	2200      	movs	r2, #0
 80033ec:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80033f4:	330c      	adds	r3, #12
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <_ZN9LineTrace11isCrossLineEv>:

	return ret;
}

bool LineTrace::isCrossLine()
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003424:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342c:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8003440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003444:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800344c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003450:	4a3e      	ldr	r2, [pc, #248]	; (800354c <_ZN9LineTrace11isCrossLineEv+0x144>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003456:	4a3e      	ldr	r2, [pc, #248]	; (8003550 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f083 0301 	eor.w	r3, r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d041      	beq.n	80034ee <_ZN9LineTrace11isCrossLineEv+0xe6>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800346a:	edd7 7a03 	vldr	s15, [r7, #12]
 800346e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003558 <_ZN9LineTrace11isCrossLineEv+0x150>
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d50f      	bpl.n	800349c <_ZN9LineTrace11isCrossLineEv+0x94>
 800347c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003480:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003558 <_ZN9LineTrace11isCrossLineEv+0x150>
 8003484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d506      	bpl.n	800349c <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003498:	801a      	strh	r2, [r3, #0]
 800349a:	e002      	b.n	80034a2 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 800349e:	2200      	movs	r2, #0
 80034a0:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d94a      	bls.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = true;
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <_ZN9LineTrace11isCrossLineEv+0x158>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034c2:	3390      	adds	r3, #144	; 0x90
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ce:	3354      	adds	r3, #84	; 0x54
 80034d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fd31 	bl	8002f40 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80034de:	e02f      	b.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			}
			else{
				//errectionTotalDistanceFromCrossLine();
				correction_check_cnt_ = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80034e6:	33a4      	adds	r3, #164	; 0xa4
 80034e8:	2200      	movs	r2, #0
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e028      	b.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 80034ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003564 <_ZN9LineTrace11isCrossLineEv+0x15c>
 80034f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	dd0f      	ble.n	8003520 <_ZN9LineTrace11isCrossLineEv+0x118>
 8003500:	edd7 7a02 	vldr	s15, [r7, #8]
 8003504:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003564 <_ZN9LineTrace11isCrossLineEv+0x15c>
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	dd06      	ble.n	8003520 <_ZN9LineTrace11isCrossLineEv+0x118>
			cnt++;
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	e002      	b.n	8003526 <_ZN9LineTrace11isCrossLineEv+0x11e>
		}
		else{
			cnt = 0;
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003522:	2200      	movs	r2, #0
 8003524:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2b09      	cmp	r3, #9
 800352c:	d908      	bls.n	8003540 <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = false;
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <_ZN9LineTrace11isCrossLineEv+0x154>)
 800353c:	2200      	movs	r2, #0
 800353e:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003542:	781b      	ldrb	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000260 	.word	0x20000260
 8003550:	20000264 	.word	0x20000264
 8003554:	20000273 	.word	0x20000273
 8003558:	44160000 	.word	0x44160000
 800355c:	20000270 	.word	0x20000270
 8003560:	20000272 	.word	0x20000272
 8003564:	43fa0000 	.word	0x43fa0000

08003568 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	; 0x48
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003570:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003574:	2201      	movs	r2, #1
 8003576:	4963      	ldr	r1, [pc, #396]	; (8003704 <_ZN9LineTrace4initEv+0x19c>)
 8003578:	4863      	ldr	r0, [pc, #396]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 800357a:	f7fe f9c7 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800357e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003582:	2201      	movs	r2, #1
 8003584:	4961      	ldr	r1, [pc, #388]	; (800370c <_ZN9LineTrace4initEv+0x1a4>)
 8003586:	4860      	ldr	r0, [pc, #384]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003588:	f7fe f9c0 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800358c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003590:	2201      	movs	r2, #1
 8003592:	495f      	ldr	r1, [pc, #380]	; (8003710 <_ZN9LineTrace4initEv+0x1a8>)
 8003594:	485c      	ldr	r0, [pc, #368]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003596:	f7fe f9b9 	bl	800190c <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800359a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800359e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80035a2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80035a6:	eeb0 1a66 	vmov.f32	s2, s13
 80035aa:	eef0 0a47 	vmov.f32	s1, s14
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8c6 	bl	8003744 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 80035b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035bc:	2201      	movs	r2, #1
 80035be:	4955      	ldr	r1, [pc, #340]	; (8003714 <_ZN9LineTrace4initEv+0x1ac>)
 80035c0:	4851      	ldr	r0, [pc, #324]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80035c2:	f7fe f9a3 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 80035c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035ca:	2201      	movs	r2, #1
 80035cc:	4952      	ldr	r1, [pc, #328]	; (8003718 <_ZN9LineTrace4initEv+0x1b0>)
 80035ce:	484e      	ldr	r0, [pc, #312]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80035d0:	f7fe f99c 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 80035d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035d8:	2201      	movs	r2, #1
 80035da:	4950      	ldr	r1, [pc, #320]	; (800371c <_ZN9LineTrace4initEv+0x1b4>)
 80035dc:	484a      	ldr	r0, [pc, #296]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80035de:	f7fe f995 	bl	800190c <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 80035e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80035ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80035ee:	eeb0 1a66 	vmov.f32	s2, s13
 80035f2:	eef0 0a47 	vmov.f32	s1, s14
 80035f6:	eeb0 0a67 	vmov.f32	s0, s15
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8e8 	bl	80037d0 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	2201      	movs	r2, #1
 8003606:	4946      	ldr	r1, [pc, #280]	; (8003720 <_ZN9LineTrace4initEv+0x1b8>)
 8003608:	483f      	ldr	r0, [pc, #252]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 800360a:	f7fe f97f 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800360e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003612:	2201      	movs	r2, #1
 8003614:	4943      	ldr	r1, [pc, #268]	; (8003724 <_ZN9LineTrace4initEv+0x1bc>)
 8003616:	483c      	ldr	r0, [pc, #240]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003618:	f7fe f978 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 800361c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003620:	2201      	movs	r2, #1
 8003622:	4941      	ldr	r1, [pc, #260]	; (8003728 <_ZN9LineTrace4initEv+0x1c0>)
 8003624:	4838      	ldr	r0, [pc, #224]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003626:	f7fe f971 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800362a:	f107 0320 	add.w	r3, r7, #32
 800362e:	2201      	movs	r2, #1
 8003630:	493e      	ldr	r1, [pc, #248]	; (800372c <_ZN9LineTrace4initEv+0x1c4>)
 8003632:	4835      	ldr	r0, [pc, #212]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003634:	f7fe f96a 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	2201      	movs	r2, #1
 800363e:	493c      	ldr	r1, [pc, #240]	; (8003730 <_ZN9LineTrace4initEv+0x1c8>)
 8003640:	4831      	ldr	r0, [pc, #196]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003642:	f7fe f963 	bl	800190c <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003646:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800364a:	eeb0 0a67 	vmov.f32	s0, s15
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f913 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003654:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003658:	eeb0 0a67 	vmov.f32	s0, s15
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f91c 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003662:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003666:	eeb0 0a67 	vmov.f32	s0, s15
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f925 	bl	80038ba <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003670:	edd7 7a08 	vldr	s15, [r7, #32]
 8003674:	eeb0 0a67 	vmov.f32	s0, s15
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f92e 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 800367e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003682:	eeb0 0a67 	vmov.f32	s0, s15
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f937 	bl	80038fa <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	2201      	movs	r2, #1
 8003692:	4928      	ldr	r1, [pc, #160]	; (8003734 <_ZN9LineTrace4initEv+0x1cc>)
 8003694:	481c      	ldr	r0, [pc, #112]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 8003696:	f7fe f939 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	2201      	movs	r2, #1
 80036a0:	4925      	ldr	r1, [pc, #148]	; (8003738 <_ZN9LineTrace4initEv+0x1d0>)
 80036a2:	4819      	ldr	r0, [pc, #100]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80036a4:	f7fe f932 	bl	800190c <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80036a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80036b0:	eef0 0a47 	vmov.f32	s1, s14
 80036b4:	eeb0 0a67 	vmov.f32	s0, s15
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f97e 	bl	80039ba <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 80036ca:	f107 0310 	add.w	r3, r7, #16
 80036ce:	2201      	movs	r2, #1
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <_ZN9LineTrace4initEv+0x1d4>)
 80036d2:	480d      	ldr	r0, [pc, #52]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80036d4:	f7fe f91a 	bl	800190c <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	2201      	movs	r2, #1
 80036de:	4918      	ldr	r1, [pc, #96]	; (8003740 <_ZN9LineTrace4initEv+0x1d8>)
 80036e0:	4809      	ldr	r0, [pc, #36]	; (8003708 <_ZN9LineTrace4initEv+0x1a0>)
 80036e2:	f7fe f913 	bl	800190c <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80036e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80036ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80036ee:	eef0 0a47 	vmov.f32	s1, s14
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f979 	bl	80039ee <_ZN9LineTrace13setMaxAccDec2Eff>
}
 80036fc:	bf00      	nop
 80036fe:	3748      	adds	r7, #72	; 0x48
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	08019618 	.word	0x08019618
 8003708:	08019620 	.word	0x08019620
 800370c:	08019628 	.word	0x08019628
 8003710:	08019630 	.word	0x08019630
 8003714:	08019638 	.word	0x08019638
 8003718:	08019644 	.word	0x08019644
 800371c:	08019650 	.word	0x08019650
 8003720:	0801965c 	.word	0x0801965c
 8003724:	08019668 	.word	0x08019668
 8003728:	08019674 	.word	0x08019674
 800372c:	08019680 	.word	0x08019680
 8003730:	0801968c 	.word	0x0801968c
 8003734:	08019698 	.word	0x08019698
 8003738:	080196a0 	.word	0x080196a0
 800373c:	080196a8 	.word	0x080196a8
 8003740:	080196b4 	.word	0x080196b4

08003744 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003750:	edc7 0a01 	vstr	s1, [r7, #4]
 8003754:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	return kp_;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	ee07 3a90 	vmov	s15, r3
}
 8003786:	eeb0 0a67 	vmov.f32	s0, s15
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	return ki_;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	ee07 3a90 	vmov	s15, r3
}
 80037a4:	eeb0 0a67 	vmov.f32	s0, s15
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	return kd_;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	ee07 3a90 	vmov	s15, r3
}
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80037dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80037e0:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	ee07 3a90 	vmov	s15, r3
}
 8003812:	eeb0 0a67 	vmov.f32	s0, s15
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	ee07 3a90 	vmov	s15, r3
}
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	ee07 3a90 	vmov	s15, r3
}
 800384e:	eeb0 0a67 	vmov.f32	s0, s15
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003928:	ee07 3a90 	vmov	s15, r3
}
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003948:	ee07 3a90 	vmov	s15, r3
}
 800394c:	eeb0 0a67 	vmov.f32	s0, s15
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003968:	ee07 3a90 	vmov	s15, r3
}
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003988:	ee07 3a90 	vmov	s15, r3
}
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039a8:	ee07 3a90 	vmov	s15, r3
}
 80039ac:	eeb0 0a67 	vmov.f32	s0, s15
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80039c6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039d0:	3394      	adds	r3, #148	; 0x94
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039dc:	3398      	adds	r3, #152	; 0x98
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80039fa:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a04:	339c      	adds	r3, #156	; 0x9c
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a10:	33a0      	adds	r3, #160	; 0xa0
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a30:	3394      	adds	r3, #148	; 0x94
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	ee07 3a90 	vmov	s15, r3
}
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a54:	33a0      	adds	r3, #160	; 0xa0
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	ee07 3a90 	vmov	s15, r3
}
 8003a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a78:	339c      	adds	r3, #156	; 0x9c
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	ee07 3a90 	vmov	s15, r3
}
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a9c:	3398      	adds	r3, #152	; 0x98
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	ee07 3a90 	vmov	s15, r3
}
 8003aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d07c      	beq.n	8003bc0 <_ZN9LineTrace4flipEv+0x10c>
		// ---- line following processing -----//
		pidTrace();
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff f92e 	bl	8002d28 <_ZN9LineTrace8pidTraceEv>
			stable_cnt_reset_flag_ = true;
		}
		*/

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fc9b 	bl	8003408 <_ZN9LineTrace11isCrossLineEv>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <_ZN9LineTrace4flipEv+0x38>
			side_sensor_->enableIgnore();
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 faa7 	bl	8005030 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd fe27 	bl	800173a <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fab7 	bl	8005064 <_ZN10SideSensor13getIgnoreFlagEv>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <_ZN9LineTrace4flipEv+0x68>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fe0b 	bl	800171c <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003b06:	eeb0 7a40 	vmov.f32	s14, s0
 8003b0a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003bc8 <_ZN9LineTrace4flipEv+0x114>
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	db01      	blt.n	8003b1c <_ZN9LineTrace4flipEv+0x68>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <_ZN9LineTrace4flipEv+0x6a>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <_ZN9LineTrace4flipEv+0x78>
			side_sensor_->disableIgnore();
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 fa8f 	bl	800504a <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe ff4b 	bl	80029cc <_ZN10LineSensor13emergencyStopEv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <_ZN9LineTrace4flipEv+0xa4>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003bcc <_ZN9LineTrace4flipEv+0x118>
 8003b44:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003bcc <_ZN9LineTrace4flipEv+0x118>
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fdf9 	bl	8005740 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fd fc16 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b5e:	33a4      	adds	r3, #164	; 0xa4
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b6c:	33a4      	adds	r3, #164	; 0xa4
 8003b6e:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b76:	33a4      	adds	r3, #164	; 0xa4
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d906      	bls.n	8003b90 <_ZN9LineTrace4flipEv+0xdc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b88:	33a4      	adds	r3, #164	; 0xa4
 8003b8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b8e:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b96:	33a4      	adds	r3, #164	; 0xa4
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b50      	cmp	r3, #80	; 0x50
 8003b9c:	d808      	bhi.n	8003bb0 <_ZN9LineTrace4flipEv+0xfc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fbef 	bl	800238c <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003bae:	e007      	b.n	8003bc0 <_ZN9LineTrace4flipEv+0x10c>
		else led_.LR(-1, 0);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fbe6 	bl	800238c <_ZN3LED2LREaa>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	428c0000 	.word	0x428c0000
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003be2:	3354      	adds	r3, #84	; 0x54
 8003be4:	887a      	ldrh	r2, [r7, #2]
 8003be6:	801a      	strh	r2, [r3, #0]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fdee 	bl	80057f2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 f9f8 	bl	8005010 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c26:	3388      	adds	r3, #136	; 0x88
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c32:	338a      	adds	r3, #138	; 0x8a
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c3e:	338c      	adds	r3, #140	; 0x8c
 8003c40:	2200      	movs	r2, #0
 8003c42:	801a      	strh	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	737b      	strb	r3, [r7, #13]
	start();
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ffc9 	bl	8003bf4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003c62:	7b7b      	ldrb	r3, [r7, #13]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d15b      	bne.n	8003d20 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003c68:	89fb      	ldrh	r3, [r7, #14]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <_ZN9LineTrace7runningEv+0x28>
 8003c6e:	2b0a      	cmp	r3, #10
 8003c70:	d030      	beq.n	8003cd4 <_ZN9LineTrace7runningEv+0x88>
 8003c72:	e054      	b.n	8003d1e <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 f9bd 	bl	8004ff8 <_ZN10SideSensor16getWhiteLineCntREv>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d044      	beq.n	8003d18 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff f92a 	bl	8002ee8 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003c9a:	3354      	adds	r3, #84	; 0x54
 8003c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fb7f 	bl	80033a8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd fd43 	bl	800173a <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd fd21 	bl	8001700 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fb5f 	bl	800238c <_ZN3LED2LREaa>
				stage = 10;
 8003cce:	230a      	movs	r3, #10
 8003cd0:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003cd2:	e021      	b.n	8003d18 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f98d 	bl	8004ff8 <_ZN10SideSensor16getWhiteLineCntREv>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff f915 	bl	8002f1e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fb6a 	bl	80033ce <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003cfa:	2064      	movs	r0, #100	; 0x64
 8003cfc:	f005 fcec 	bl	80096d8 <HAL_Delay>

				setTargetVelocity(0);
 8003d00:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003d30 <_ZN9LineTrace7runningEv+0xe4>
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fdb8 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003d0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d0e:	f005 fce3 	bl	80096d8 <HAL_Delay>

				goal_flag = true;
 8003d12:	2301      	movs	r3, #1
 8003d14:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003d16:	e001      	b.n	8003d1c <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003d18:	bf00      	nop
 8003d1a:	e7a2      	b.n	8003c62 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003d1c:	bf00      	nop
	while(goal_flag == false){
 8003d1e:	e7a0      	b.n	8003c62 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f807 	bl	8003d34 <_ZN9LineTrace4stopEv>
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	00000000 	.word	0x00000000

08003d34 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fd65 	bl	8005818 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	330c      	adds	r3, #12
 8003d52:	2201      	movs	r2, #1
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fb17 	bl	800238c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d64:	3354      	adds	r3, #84	; 0x54
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69d8      	ldr	r0, [r3, #28]
 8003d72:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <_ZN9LineTrace4stopEv+0xcc>)
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <_ZN9LineTrace4stopEv+0xd0>)
 8003d76:	4924      	ldr	r1, [pc, #144]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003d78:	f000 fb56 	bl	8004428 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003d7c:	e006      	b.n	8003d8c <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69d8      	ldr	r0, [r3, #28]
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <_ZN9LineTrace4stopEv+0xd8>)
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <_ZN9LineTrace4stopEv+0xdc>)
 8003d86:	4920      	ldr	r1, [pc, #128]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003d88:	f000 fb71 	bl	800446e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d92:	3358      	adds	r3, #88	; 0x58
 8003d94:	2200      	movs	r2, #0
 8003d96:	9200      	str	r2, [sp, #0]
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	491e      	ldr	r1, [pc, #120]	; (8003e14 <_ZN9LineTrace4stopEv+0xe0>)
 8003d9c:	481a      	ldr	r0, [pc, #104]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003d9e:	f7fd fd4f 	bl	8001840 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003da8:	33e8      	adds	r3, #232	; 0xe8
 8003daa:	2200      	movs	r2, #0
 8003dac:	9200      	str	r2, [sp, #0]
 8003dae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003db2:	4919      	ldr	r1, [pc, #100]	; (8003e18 <_ZN9LineTrace4stopEv+0xe4>)
 8003db4:	4814      	ldr	r0, [pc, #80]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003db6:	f7fd fd43 	bl	8001840 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8003dc0:	33b8      	adds	r3, #184	; 0xb8
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	9200      	str	r2, [sp, #0]
 8003dc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <_ZN9LineTrace4stopEv+0xe8>)
 8003dcc:	480e      	ldr	r0, [pc, #56]	; (8003e08 <_ZN9LineTrace4stopEv+0xd4>)
 8003dce:	f7fd fd37 	bl	8001840 <sd_write_array_float>

	led_.LR(-1, 0);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fad5 	bl	800238c <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fbd1 	bl	800458e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fb80 	bl	80044f6 <_ZN6Logger10resetLogs2Ev>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	080196c0 	.word	0x080196c0
 8003e04:	080196cc 	.word	0x080196cc
 8003e08:	080196dc 	.word	0x080196dc
 8003e0c:	080196e8 	.word	0x080196e8
 8003e10:	080196f4 	.word	0x080196f4
 8003e14:	08019704 	.word	0x08019704
 8003e18:	08019714 	.word	0x08019714
 8003e1c:	08019720 	.word	0x08019720

08003e20 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b08b      	sub	sp, #44	; 0x2c
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fa9f 	bl	8004370 <_ZN6Logger23getDistanceArrayPointerEv>
 8003e32:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 faa7 	bl	800438c <_ZN6Logger20getThetaArrayPointerEv>
 8003e3e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003e40:	2300      	movs	r3, #0
 8003e42:	837b      	strh	r3, [r7, #26]
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	f241 726f 	movw	r2, #5999	; 0x176f
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d84b      	bhi.n	8003ee6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8003e4e:	8b7b      	ldrh	r3, [r7, #26]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003e5a:	8b7b      	ldrh	r3, [r7, #26]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003e66:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	d101      	bne.n	8003e78 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8003e74:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8003e76:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8003e78:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e84:	eeb0 0a66 	vmov.f32	s0, s13
 8003e88:	f7fe fdf0 	bl	8002a6c <_ZSt3absf>
 8003e8c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8003e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e94:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003fac <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8003e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	db01      	blt.n	8003ea6 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8003ea2:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8003ea4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8003ea6:	8b7c      	ldrh	r4, [r7, #26]
 8003ea8:	ed97 0a05 	vldr	s0, [r7, #20]
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff f87d 	bl	8002fac <_ZN9LineTrace15radius2VelocityEf>
 8003eb2:	eef0 7a40 	vmov.f32	s15, s0
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003ec6:	8b7b      	ldrh	r3, [r7, #26]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	441a      	add	r2, r3
 8003ece:	8b7b      	ldrh	r3, [r7, #26]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	3332      	adds	r3, #50	; 0x32
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3304      	adds	r3, #4
 8003edc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003ede:	8b7b      	ldrh	r3, [r7, #26]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	837b      	strh	r3, [r7, #26]
 8003ee4:	e7ae      	b.n	8003e44 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003eec:	3354      	adds	r3, #84	; 0x54
 8003eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d120      	bne.n	8003f38 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003f02:	3310      	adds	r3, #16
 8003f04:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f0c:	3398      	adds	r3, #152	; 0x98
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	eeb0 0a67 	vmov.f32	s0, s15
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff f8fd 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f24:	3394      	adds	r3, #148	; 0x94
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff f995 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003f36:	e027      	b.n	8003f88 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f3e:	3354      	adds	r3, #84	; 0x54
 8003f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11f      	bne.n	8003f88 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003f54:	3310      	adds	r3, #16
 8003f56:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f5e:	33a0      	adds	r3, #160	; 0xa0
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff f8d4 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f76:	339c      	adds	r3, #156	; 0x9c
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	6939      	ldr	r1, [r7, #16]
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff f96c 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003f8e:	3310      	adds	r3, #16
 8003f90:	2200      	movs	r2, #0
 8003f92:	9200      	str	r2, [sp, #0]
 8003f94:	f241 7270 	movw	r2, #6000	; 0x1770
 8003f98:	4906      	ldr	r1, [pc, #24]	; (8003fb4 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8003f9a:	4807      	ldr	r0, [pc, #28]	; (8003fb8 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8003f9c:	f7fd fc50 	bl	8001840 <sd_write_array_float>

}
 8003fa0:	bf00      	nop
 8003fa2:	3724      	adds	r7, #36	; 0x24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	3727c5ac 	.word	0x3727c5ac
 8003fac:	459c4000 	.word	0x459c4000
 8003fb0:	459c4000 	.word	0x459c4000
 8003fb4:	08019730 	.word	0x08019730
 8003fb8:	080196dc 	.word	0x080196dc

08003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b08b      	sub	sp, #44	; 0x2c
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69d8      	ldr	r0, [r3, #28]
 8003fc8:	4b6b      	ldr	r3, [pc, #428]	; (8004178 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8003fca:	4a6c      	ldr	r2, [pc, #432]	; (800417c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003fcc:	496c      	ldr	r1, [pc, #432]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003fce:	f000 fa73 	bl	80044b8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fd8:	3358      	adds	r3, #88	; 0x58
 8003fda:	2264      	movs	r2, #100	; 0x64
 8003fdc:	4969      	ldr	r1, [pc, #420]	; (8004184 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8003fde:	4868      	ldr	r0, [pc, #416]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003fe0:	f7fd fc94 	bl	800190c <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003fea:	33e8      	adds	r3, #232	; 0xe8
 8003fec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ff0:	4965      	ldr	r1, [pc, #404]	; (8004188 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8003ff2:	4863      	ldr	r0, [pc, #396]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003ff4:	f7fd fc8a 	bl	800190c <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f9b7 	bl	8004370 <_ZN6Logger23getDistanceArrayPointerEv>
 8004002:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9bf 	bl	800438c <_ZN6Logger20getThetaArrayPointerEv>
 800400e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004010:	2300      	movs	r3, #0
 8004012:	837b      	strh	r3, [r7, #26]
 8004014:	8b7b      	ldrh	r3, [r7, #26]
 8004016:	f241 726f 	movw	r2, #5999	; 0x176f
 800401a:	4293      	cmp	r3, r2
 800401c:	d84b      	bhi.n	80040b6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800401e:	8b7b      	ldrh	r3, [r7, #26]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800402a:	8b7b      	ldrh	r3, [r7, #26]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004036:	edd7 7a07 	vldr	s15, [r7, #28]
 800403a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	d101      	bne.n	8004048 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004044:	4b51      	ldr	r3, [pc, #324]	; (800418c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004046:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004048:	ed97 7a02 	vldr	s14, [r7, #8]
 800404c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004054:	eeb0 0a66 	vmov.f32	s0, s13
 8004058:	f7fe fd08 	bl	8002a6c <_ZSt3absf>
 800405c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004060:	edd7 7a05 	vldr	s15, [r7, #20]
 8004064:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004190 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004070:	db01      	blt.n	8004076 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004072:	4b48      	ldr	r3, [pc, #288]	; (8004194 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004074:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004076:	8b7c      	ldrh	r4, [r7, #26]
 8004078:	ed97 0a05 	vldr	s0, [r7, #20]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fe ff95 	bl	8002fac <_ZN9LineTrace15radius2VelocityEf>
 8004082:	eef0 7a40 	vmov.f32	s15, s0
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800408c:	3304      	adds	r3, #4
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004096:	8b7b      	ldrh	r3, [r7, #26]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	441a      	add	r2, r3
 800409e:	8b7b      	ldrh	r3, [r7, #26]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3304      	adds	r3, #4
 80040ac:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80040ae:	8b7b      	ldrh	r3, [r7, #26]
 80040b0:	3301      	adds	r3, #1
 80040b2:	837b      	strh	r3, [r7, #26]
 80040b4:	e7ae      	b.n	8004014 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040bc:	3354      	adds	r3, #84	; 0x54
 80040be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d120      	bne.n	8004108 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80040d2:	3310      	adds	r3, #16
 80040d4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040dc:	3398      	adds	r3, #152	; 0x98
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	eeb0 0a67 	vmov.f32	s0, s15
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff f815 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040f4:	3394      	adds	r3, #148	; 0x94
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff f8ad 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004106:	e027      	b.n	8004158 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800410e:	3354      	adds	r3, #84	; 0x54
 8004110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11f      	bne.n	8004158 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004124:	3310      	adds	r3, #16
 8004126:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800412e:	33a0      	adds	r3, #160	; 0xa0
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe ffec 	bl	8003118 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004146:	339c      	adds	r3, #156	; 0x9c
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	6939      	ldr	r1, [r7, #16]
 800414e:	eeb0 0a67 	vmov.f32	s0, s15
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff f884 	bl	8003260 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800415e:	3310      	adds	r3, #16
 8004160:	2200      	movs	r2, #0
 8004162:	9200      	str	r2, [sp, #0]
 8004164:	f241 7270 	movw	r2, #6000	; 0x1770
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800416a:	4805      	ldr	r0, [pc, #20]	; (8004180 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800416c:	f7fd fb68 	bl	8001840 <sd_write_array_float>

}
 8004170:	bf00      	nop
 8004172:	3724      	adds	r7, #36	; 0x24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}
 8004178:	080196c0 	.word	0x080196c0
 800417c:	080196cc 	.word	0x080196cc
 8004180:	080196dc 	.word	0x080196dc
 8004184:	08019704 	.word	0x08019704
 8004188:	08019714 	.word	0x08019714
 800418c:	3727c5ac 	.word	0x3727c5ac
 8004190:	459c4000 	.word	0x459c4000
 8004194:	459c4000 	.word	0x459c4000
 8004198:	08019730 	.word	0x08019730

0800419c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041aa:	33c0      	adds	r3, #192	; 0xc0
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041b6:	33c2      	adds	r3, #194	; 0xc2
 80041b8:	2200      	movs	r2, #0
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041c2:	33c4      	adds	r3, #196	; 0xc4
 80041c4:	2200      	movs	r2, #0
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041ce:	33c6      	adds	r3, #198	; 0xc6
 80041d0:	2200      	movs	r2, #0
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041da:	33c8      	adds	r3, #200	; 0xc8
 80041dc:	2200      	movs	r2, #0
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041e6:	33ca      	adds	r3, #202	; 0xca
 80041e8:	2200      	movs	r2, #0
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004208:	f7fd fc6c 	bl	8001ae4 <sd_mount>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d016      	beq.n	800424a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800421c:	f7fc ff40 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004220:	2100      	movs	r1, #0
 8004222:	2000      	movs	r0, #0
 8004224:	f7fc ff4c 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004228:	4815      	ldr	r0, [pc, #84]	; (8004280 <_ZN6Logger10sdCardInitEv+0x84>)
 800422a:	f7fc ff73 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800422e:	2101      	movs	r1, #1
 8004230:	2000      	movs	r0, #0
 8004232:	f7fc ff45 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004236:	4813      	ldr	r0, [pc, #76]	; (8004284 <_ZN6Logger10sdCardInitEv+0x88>)
 8004238:	f7fc ff6c 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800423c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004240:	f005 fa4a 	bl	80096d8 <HAL_Delay>

	  ret = true;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e015      	b.n	8004276 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800424a:	f7fc ff29 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800424e:	2100      	movs	r1, #0
 8004250:	2000      	movs	r0, #0
 8004252:	f7fc ff35 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004256:	480a      	ldr	r0, [pc, #40]	; (8004280 <_ZN6Logger10sdCardInitEv+0x84>)
 8004258:	f7fc ff5c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800425c:	2101      	movs	r1, #1
 800425e:	2000      	movs	r0, #0
 8004260:	f7fc ff2e 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004264:	4808      	ldr	r0, [pc, #32]	; (8004288 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004266:	f7fc ff55 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800426a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800426e:	f005 fa33 	bl	80096d8 <HAL_Delay>

	  ret = false;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	08019740 	.word	0x08019740
 8004284:	0801974c 	.word	0x0801974c
 8004288:	08019754 	.word	0x08019754

0800428c <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800429e:	33c0      	adds	r3, #192	; 0xc0
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d025      	beq.n	80042f2 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042ac:	33c6      	adds	r3, #198	; 0xc6
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80042b8:	8879      	ldrh	r1, [r7, #2]
 80042ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042c4:	33c6      	adds	r3, #198	; 0xc6
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042d2:	33c6      	adds	r3, #198	; 0xc6
 80042d4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042dc:	33c6      	adds	r3, #198	; 0xc6
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042e4:	d305      	bcc.n	80042f2 <_ZN6Logger11storeLogIntEs+0x66>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80042ec:	33c6      	adds	r3, #198	; 0xc6
 80042ee:	2200      	movs	r2, #0
 80042f0:	801a      	strh	r2, [r3, #0]
	}

}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004310:	33c0      	adds	r3, #192	; 0xc0
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d025      	beq.n	8004364 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800431e:	33c8      	adds	r3, #200	; 0xc8
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004328:	3310      	adds	r3, #16
 800432a:	8879      	ldrh	r1, [r7, #2]
 800432c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004336:	33c8      	adds	r3, #200	; 0xc8
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004344:	33c8      	adds	r3, #200	; 0xc8
 8004346:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800434e:	33c8      	adds	r3, #200	; 0xc8
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004356:	d305      	bcc.n	8004364 <_ZN6Logger12storeLog2IntEs+0x66>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800435e:	33c8      	adds	r3, #200	; 0xc8
 8004360:	2200      	movs	r2, #0
 8004362:	801a      	strh	r2, [r3, #0]
	}

}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800437e:	3340      	adds	r3, #64	; 0x40
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800439a:	3380      	adds	r3, #128	; 0x80
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f7fd fa3c 	bl	8001840 <sd_write_array_float>
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80043e2:	2300      	movs	r3, #0
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68b8      	ldr	r0, [r7, #8]
 80043f0:	f7fd fb18 	bl	8001a24 <sd_write_array_int>
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800440e:	3320      	adds	r3, #32
 8004410:	2200      	movs	r2, #0
 8004412:	9200      	str	r2, [sp, #0]
 8004414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	68b8      	ldr	r0, [r7, #8]
 800441c:	f7fd fb02 	bl	8001a24 <sd_write_array_int>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800443c:	3340      	adds	r3, #64	; 0x40
 800443e:	2200      	movs	r2, #0
 8004440:	9200      	str	r2, [sp, #0]
 8004442:	f241 7270 	movw	r2, #6000	; 0x1770
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	68b8      	ldr	r0, [r7, #8]
 800444a:	f7fd f9f9 	bl	8001840 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004454:	3380      	adds	r3, #128	; 0x80
 8004456:	2200      	movs	r2, #0
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	f241 7270 	movw	r2, #6000	; 0x1770
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	68b8      	ldr	r0, [r7, #8]
 8004462:	f7fd f9ed 	bl	8001840 <sd_write_array_float>
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af02      	add	r7, sp, #8
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004482:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004486:	2200      	movs	r2, #0
 8004488:	9200      	str	r2, [sp, #0]
 800448a:	f241 7270 	movw	r2, #6000	; 0x1770
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	68b8      	ldr	r0, [r7, #8]
 8004492:	f7fd f9d5 	bl	8001840 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800449c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80044a0:	2200      	movs	r2, #0
 80044a2:	9200      	str	r2, [sp, #0]
 80044a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	68b8      	ldr	r0, [r7, #8]
 80044ac:	f7fd f9c8 	bl	8001840 <sd_write_array_float>
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80044cc:	3340      	adds	r3, #64	; 0x40
 80044ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68b8      	ldr	r0, [r7, #8]
 80044d6:	f7fd fa19 	bl	800190c <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80044e0:	3380      	adds	r3, #128	; 0x80
 80044e2:	f241 7270 	movw	r2, #6000	; 0x1770
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f7fd fa0f 	bl	800190c <sd_read_array_float>
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80044f6:	b480      	push	{r7}
 80044f8:	b08b      	sub	sp, #44	; 0x2c
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004504:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004514:	3340      	adds	r3, #64	; 0x40
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d009      	beq.n	8004534 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	617b      	str	r3, [r7, #20]
		log = 0;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	3304      	adds	r3, #4
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e7f1      	b.n	8004518 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800453a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	623b      	str	r3, [r7, #32]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800454a:	3340      	adds	r3, #64	; 0x40
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	429a      	cmp	r2, r3
 8004554:	d009      	beq.n	800456a <_ZN6Logger10resetLogs2Ev+0x74>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	60bb      	str	r3, [r7, #8]
		log = 0;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	3304      	adds	r3, #4
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	e7f1      	b.n	800454e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004570:	33c2      	adds	r3, #194	; 0xc2
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800457c:	33ca      	adds	r3, #202	; 0xca
 800457e:	2200      	movs	r2, #0
 8004580:	801a      	strh	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	372c      	adds	r7, #44	; 0x2c
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800459c:	33c2      	adds	r3, #194	; 0xc2
 800459e:	2200      	movs	r2, #0
 80045a0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80045a8:	33ca      	adds	r3, #202	; 0xca
 80045aa:	2200      	movs	r2, #0
 80045ac:	801a      	strh	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <_ZN6Logger5startEv>:

void Logger::start()
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80045c8:	33c0      	adds	r3, #192	; 0xc0
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80045e8:	33c0      	adds	r3, #192	; 0xc0
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	805a      	strh	r2, [r3, #2]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_ZN5Motor4initEv>:

void Motor::init()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004624:	2108      	movs	r1, #8
 8004626:	4805      	ldr	r0, [pc, #20]	; (800463c <_ZN5Motor4initEv+0x20>)
 8004628:	f00a fa06 	bl	800ea38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800462c:	210c      	movs	r1, #12
 800462e:	4803      	ldr	r0, [pc, #12]	; (800463c <_ZN5Motor4initEv+0x20>)
 8004630:	f00a fa02 	bl	800ea38 <HAL_TIM_PWM_Start>

}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	200446f8 	.word	0x200446f8

08004640 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da0d      	bge.n	800466e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004652:	2200      	movs	r2, #0
 8004654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004658:	481f      	ldr	r0, [pc, #124]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 800465a:	f006 fad3 	bl	800ac04 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004664:	b29b      	uxth	r3, r3
 8004666:	425b      	negs	r3, r3
 8004668:	b29b      	uxth	r3, r3
 800466a:	81fb      	strh	r3, [r7, #14]
 800466c:	e00a      	b.n	8004684 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800466e:	2201      	movs	r2, #1
 8004670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004674:	4818      	ldr	r0, [pc, #96]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004676:	f006 fac5 	bl	800ac04 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004680:	b29b      	uxth	r3, r3
 8004682:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da0d      	bge.n	80046aa <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800468e:	2201      	movs	r2, #1
 8004690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004694:	4810      	ldr	r0, [pc, #64]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004696:	f006 fab5 	bl	800ac04 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	425b      	negs	r3, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	81bb      	strh	r3, [r7, #12]
 80046a8:	e00a      	b.n	80046c0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80046aa:	2200      	movs	r2, #0
 80046ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046b0:	4809      	ldr	r0, [pc, #36]	; (80046d8 <_ZN5Motor9motorCtrlEv+0x98>)
 80046b2:	f006 faa7 	bl	800ac04 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80046c0:	89fa      	ldrh	r2, [r7, #14]
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80046c8:	89ba      	ldrh	r2, [r7, #12]
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <_ZN5Motor9motorCtrlEv+0x9c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40020c00 	.word	0x40020c00
 80046dc:	200446f8 	.word	0x200446f8

080046e0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6178      	str	r0, [r7, #20]
 80046e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80046ec:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 80046f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046fa:	f7fc fa25 	bl	8000b48 <__aeabi_dcmpgt>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <_ZN5Motor8setRatioEdd+0x30>
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	4c2b      	ldr	r4, [pc, #172]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 800470a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800470e:	e00e      	b.n	800472e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	4b29      	ldr	r3, [pc, #164]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 8004716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800471a:	f7fc f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <_ZN5Motor8setRatioEdd+0x4e>
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	4c24      	ldr	r4, [pc, #144]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 800472a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004734:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004738:	f7fc fa06 	bl	8000b48 <__aeabi_dcmpgt>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <_ZN5Motor8setRatioEdd+0x6e>
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	4c1c      	ldr	r4, [pc, #112]	; (80047b8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004748:	e9c7 3400 	strd	r3, r4, [r7]
 800474c:	e00e      	b.n	800476c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 8004754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004758:	f7fc f9d8 	bl	8000b0c <__aeabi_dcmplt>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <_ZN5Motor8setRatioEdd+0x8c>
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	4c15      	ldr	r4, [pc, #84]	; (80047bc <_ZN5Motor8setRatioEdd+0xdc>)
 8004768:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004776:	f7fb ff57 	bl	8000628 <__aeabi_dmul>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	4618      	mov	r0, r3
 8004780:	4621      	mov	r1, r4
 8004782:	f7fc fa01 	bl	8000b88 <__aeabi_d2iz>
 8004786:	4603      	mov	r3, r0
 8004788:	b21a      	sxth	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004798:	f7fb ff46 	bl	8000628 <__aeabi_dmul>
 800479c:	4603      	mov	r3, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	4618      	mov	r0, r3
 80047a2:	4621      	mov	r1, r4
 80047a4:	f7fc f9f0 	bl	8000b88 <__aeabi_d2iz>
 80047a8:	4603      	mov	r3, r0
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	805a      	strh	r2, [r3, #2]

}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	3ff00000 	.word	0x3ff00000
 80047bc:	bff00000 	.word	0xbff00000
 80047c0:	409c2000 	.word	0x409c2000

080047c4 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80047f8:	b490      	push	{r4, r7}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	f04f 0400 	mov.w	r4, #0
 8004810:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	f04f 0400 	mov.w	r4, #0
 800483a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bc90      	pop	{r4, r7}
 8004868:	4770      	bx	lr
 800486a:	0000      	movs	r0, r0
 800486c:	0000      	movs	r0, r0
	...

08004870 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fb06 	bl	8001e90 <_ZN3IMU8getOmegaEv>
 8004884:	ee10 3a10 	vmov	r3, s0
 8004888:	4618      	mov	r0, r3
 800488a:	f7fb fe75 	bl	8000578 <__aeabi_f2d>
 800488e:	4603      	mov	r3, r0
 8004890:	460c      	mov	r4, r1
 8004892:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc ff04 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80048a0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80048a4:	a376      	add	r3, pc, #472	; (adr r3, 8004a80 <_ZN8Odometry12calcPotitionEv+0x210>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ae:	f7fb febb 	bl	8000628 <__aeabi_dmul>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7fb fe58 	bl	8000578 <__aeabi_f2d>
 80048c8:	4682      	mov	sl, r0
 80048ca:	468b      	mov	fp, r1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e0:	f7fb ffcc 	bl	800087c <__aeabi_ddiv>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fb fce6 	bl	80002bc <__adddf3>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	ec43 2b17 	vmov	d7, r2, r3
 80048f8:	eeb0 0a47 	vmov.f32	s0, s14
 80048fc:	eef0 0a67 	vmov.f32	s1, s15
 8004900:	f00f fbde 	bl	80140c0 <cos>
 8004904:	ec53 2b10 	vmov	r2, r3, d0
 8004908:	4650      	mov	r0, sl
 800490a:	4659      	mov	r1, fp
 800490c:	f7fb fe8c 	bl	8000628 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4620      	mov	r0, r4
 8004916:	4629      	mov	r1, r5
 8004918:	f7fb fcd0 	bl	80002bc <__adddf3>
 800491c:	4603      	mov	r3, r0
 800491e:	460c      	mov	r4, r1
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7fb fe23 	bl	8000578 <__aeabi_f2d>
 8004932:	4682      	mov	sl, r0
 8004934:	468b      	mov	fp, r1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800494a:	f7fb ff97 	bl	800087c <__aeabi_ddiv>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4640      	mov	r0, r8
 8004954:	4649      	mov	r1, r9
 8004956:	f7fb fcb1 	bl	80002bc <__adddf3>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	ec43 2b17 	vmov	d7, r2, r3
 8004962:	eeb0 0a47 	vmov.f32	s0, s14
 8004966:	eef0 0a67 	vmov.f32	s1, s15
 800496a:	f00f fbed 	bl	8014148 <sin>
 800496e:	ec53 2b10 	vmov	r2, r3, d0
 8004972:	4650      	mov	r0, sl
 8004974:	4659      	mov	r1, fp
 8004976:	f7fb fe57 	bl	8000628 <__aeabi_dmul>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fb fc9b 	bl	80002bc <__adddf3>
 8004986:	4603      	mov	r3, r0
 8004988:	460c      	mov	r4, r1
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800499c:	461a      	mov	r2, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	f7fb fc8c 	bl	80002bc <__adddf3>
 80049a4:	4603      	mov	r3, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	ed93 7b08 	vldr	d7, [r3, #32]
 80049ba:	eeb0 0a47 	vmov.f32	s0, s14
 80049be:	eef0 0a67 	vmov.f32	s1, s15
 80049c2:	f00f fb7d 	bl	80140c0 <cos>
 80049c6:	ec51 0b10 	vmov	r0, r1, d0
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <_ZN8Odometry12calcPotitionEv+0x200>)
 80049d0:	f7fb fe2a 	bl	8000628 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4620      	mov	r0, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	f7fb fc6e 	bl	80002bc <__adddf3>
 80049e0:	4603      	mov	r3, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	ed93 7b08 	vldr	d7, [r3, #32]
 80049f6:	eeb0 0a47 	vmov.f32	s0, s14
 80049fa:	eef0 0a67 	vmov.f32	s1, s15
 80049fe:	f00f fba3 	bl	8014148 <sin>
 8004a02:	ec51 0b10 	vmov	r0, r1, d0
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004a0c:	f7fb fe0c 	bl	8000628 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fc50 	bl	80002bc <__adddf3>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	460c      	mov	r4, r1
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	4621      	mov	r1, r4
 8004a30:	f7fc f8f2 	bl	8000c18 <__aeabi_d2f>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004a38:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004a40:	4618      	mov	r0, r3
 8004a42:	4621      	mov	r1, r4
 8004a44:	f7fc f8e8 	bl	8000c18 <__aeabi_d2f>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004a4c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a54:	4618      	mov	r0, r3
 8004a56:	4621      	mov	r1, r4
 8004a58:	f7fc f8de 	bl	8000c18 <__aeabi_d2f>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6c:	f3af 8000 	nop.w
 8004a70:	405b8000 	.word	0x405b8000
 8004a74:	20000274 	.word	0x20000274
 8004a78:	20000278 	.word	0x20000278
 8004a7c:	2000027c 	.word	0x2000027c
 8004a80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a84:	3f50624d 	.word	0x3f50624d

08004a88 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff feed 	bl	8004870 <_ZN8Odometry12calcPotitionEv>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004a9e:	b490      	push	{r4, r7}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	f04f 0400 	mov.w	r4, #0
 8004acc:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc90      	pop	{r4, r7}
 8004ad8:	4770      	bx	lr
	...

08004adc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004adc:	b490      	push	{r4, r7}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	f04f 0400 	mov.w	r4, #0
 8004b02:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b1a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004b1e:	2200      	movs	r2, #0
 8004b20:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004b22:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	f04f 0400 	mov.w	r4, #0
 8004b72:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	f04f 0400 	mov.w	r4, #0
 8004b8e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004bae:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f04f 0400 	mov.w	r4, #0
 8004bb8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc90      	pop	{r4, r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	20044bf8 	.word	0x20044bf8
 8004bcc:	20044b88 	.word	0x20044b88
 8004bd0:	20044be8 	.word	0x20044be8

08004bd4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004bdc:	f001 fdb2 	bl	8006744 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004be0:	f107 0318 	add.w	r3, r7, #24
 8004be4:	2201      	movs	r2, #1
 8004be6:	4915      	ldr	r1, [pc, #84]	; (8004c3c <_ZN13PathFollowing4initEv+0x68>)
 8004be8:	4815      	ldr	r0, [pc, #84]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004bea:	f7fc fed5 	bl	8001998 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4913      	ldr	r1, [pc, #76]	; (8004c44 <_ZN13PathFollowing4initEv+0x70>)
 8004bf6:	4812      	ldr	r0, [pc, #72]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004bf8:	f7fc fece 	bl	8001998 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	2201      	movs	r2, #1
 8004c02:	4911      	ldr	r1, [pc, #68]	; (8004c48 <_ZN13PathFollowing4initEv+0x74>)
 8004c04:	480e      	ldr	r0, [pc, #56]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004c06:	f7fc fec7 	bl	8001998 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004c0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c0e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004c12:	ed97 5b02 	vldr	d5, [r7, #8]
 8004c16:	eeb0 2a45 	vmov.f32	s4, s10
 8004c1a:	eef0 2a65 	vmov.f32	s5, s11
 8004c1e:	eeb0 1a46 	vmov.f32	s2, s12
 8004c22:	eef0 1a66 	vmov.f32	s3, s13
 8004c26:	eeb0 0a47 	vmov.f32	s0, s14
 8004c2a:	eef0 0a67 	vmov.f32	s1, s15
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f80c 	bl	8004c4c <_ZN13PathFollowing7setGainEddd>
}
 8004c34:	bf00      	nop
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0801975c 	.word	0x0801975c
 8004c40:	08019764 	.word	0x08019764
 8004c44:	0801976c 	.word	0x0801976c
 8004c48:	08019774 	.word	0x08019774

08004c4c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004c4c:	b490      	push	{r4, r7}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	61f8      	str	r0, [r7, #28]
 8004c54:	ed87 0b04 	vstr	d0, [r7, #16]
 8004c58:	ed87 1b02 	vstr	d1, [r7, #8]
 8004c5c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004c60:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c66:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c70:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004c7e:	bf00      	nop
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc90      	pop	{r4, r7}
 8004c86:	4770      	bx	lr
 8004c88:	20044bf8 	.word	0x20044bf8

08004c8c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004c94:	2088      	movs	r0, #136	; 0x88
 8004c96:	f7fd fa3e 	bl	8002116 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004c9a:	2080      	movs	r0, #128	; 0x80
 8004c9c:	f7fd fa3b 	bl	8002116 <INA260_init>
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004cb0:	2188      	movs	r1, #136	; 0x88
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fd f9cc 	bl	8002050 <INA260_read>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fc4a 	bl	8000554 <__aeabi_i2d>
 8004cc0:	a30c      	add	r3, pc, #48	; (adr r3, 8004cf4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fcaf 	bl	8000628 <__aeabi_dmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f7fb ffa1 	bl	8000c18 <__aeabi_d2f>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	f3af 8000 	nop.w
 8004cf0:	20000280 	.word	0x20000280
 8004cf4:	47ae147b 	.word	0x47ae147b
 8004cf8:	3f547ae1 	.word	0x3f547ae1

08004cfc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	ee07 3a90 	vmov	s15, r3

}
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4822      	ldr	r0, [pc, #136]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d2c:	f005 ff52 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004d48:	2108      	movs	r1, #8
 8004d4a:	481a      	ldr	r0, [pc, #104]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d4c:	f005 ff42 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004d68:	2110      	movs	r1, #16
 8004d6a:	4812      	ldr	r0, [pc, #72]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d6c:	f005 ff32 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	480a      	ldr	r0, [pc, #40]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d8c:	f005 ff22 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004da0:	89fb      	ldrh	r3, [r7, #14]
 8004da2:	f043 0308 	orr.w	r3, r3, #8
 8004da6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004da8:	89fb      	ldrh	r3, [r7, #14]

}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40020c00 	.word	0x40020c00

08004db8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	709a      	strb	r2, [r3, #2]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	70da      	strb	r2, [r3, #3]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	809a      	strh	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	80da      	strh	r2, [r3, #6]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	721a      	strb	r2, [r3, #8]
{

}
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7a1b      	ldrb	r3, [r3, #8]
 8004e00:	f083 0301 	eor.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80db 	beq.w	8004fc2 <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02a      	beq.n	8004e70 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	486c      	ldr	r0, [pc, #432]	; (8004fd0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8004e1e:	f005 fed9 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004e32:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	4b66      	ldr	r3, [pc, #408]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004e40:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004e46:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d945      	bls.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8004e62:	4b5a      	ldr	r3, [pc, #360]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004e68:	4b5a      	ldr	r3, [pc, #360]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	e034      	b.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 8004e70:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d030      	beq.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004e78:	2104      	movs	r1, #4
 8004e7a:	4855      	ldr	r0, [pc, #340]	; (8004fd0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8004e7c:	f005 feaa 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d006      	beq.n	8004e9e <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e002      	b.n	8004ea4 <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 8004e9e:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	; (8004fd4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d916      	bls.n	8004eda <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	f083 0301 	eor.w	r3, r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8004ec0:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	88db      	ldrh	r3, [r3, #6]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	88da      	ldrh	r2, [r3, #6]
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8004ed8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	f083 0301 	eor.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02a      	beq.n	8004f3e <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eec:	483c      	ldr	r0, [pc, #240]	; (8004fe0 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8004eee:	f005 fe71 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 8004f02:	4b38      	ldr	r3, [pc, #224]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	e002      	b.n	8004f16 <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 8004f10:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004f16:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d90f      	bls.n	8004f3e <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f043 0302 	orr.w	r3, r3, #2
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004f38:	4b2a      	ldr	r3, [pc, #168]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004f3e:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d031      	beq.n	8004faa <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f4a:	4825      	ldr	r0, [pc, #148]	; (8004fe0 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8004f4c:	f005 fe42 	bl	800abd4 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf14      	ite	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	2300      	moveq	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	e002      	b.n	8004f74 <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d916      	bls.n	8004faa <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	f083 0302 	eor.w	r3, r3, #2
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	889b      	ldrh	r3, [r3, #4]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	889a      	ldrh	r2, [r3, #4]
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8004fa8:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8004fb0:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	789a      	ldrb	r2, [r3, #2]
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8004fb8:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	78da      	ldrb	r2, [r3, #3]
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <_ZN10SideSensor12updateStatusEv+0x200>)
 8004fc0:	701a      	strb	r2, [r3, #0]
	}

}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000028c 	.word	0x2000028c
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	20000290 	.word	0x20000290
 8004fd8:	2000028a 	.word	0x2000028a
 8004fdc:	2000028d 	.word	0x2000028d
 8004fe0:	40020c00 	.word	0x40020c00
 8004fe4:	2000028e 	.word	0x2000028e
 8004fe8:	20000288 	.word	0x20000288
 8004fec:	20000284 	.word	0x20000284
 8004ff0:	20000286 	.word	0x20000286
 8004ff4:	20000287 	.word	0x20000287

08004ff8 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	88db      	ldrh	r3, [r3, #6]
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	80da      	strh	r2, [r3, #6]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	721a      	strb	r2, [r3, #8]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	721a      	strb	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7a1b      	ldrb	r3, [r3, #8]
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3308      	adds	r3, #8
 800508c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f010 f894 	bl	80151c0 <memset>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509e:	811a      	strh	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050a6:	815a      	strh	r2, [r3, #10]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ae:	819a      	strh	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b6:	81da      	strh	r2, [r3, #14]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050be:	821a      	strh	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c6:	825a      	strh	r2, [r3, #18]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	829a      	strh	r2, [r3, #20]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	82da      	strh	r2, [r3, #22]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	831a      	strh	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	835a      	strh	r2, [r3, #26]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	839a      	strh	r2, [r3, #28]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	83da      	strh	r2, [r3, #30]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	841a      	strh	r2, [r3, #32]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050f8:	845a      	strh	r2, [r3, #34]	; 0x22
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	849a      	strh	r2, [r3, #36]	; 0x24
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005106:	84da      	strh	r2, [r3, #38]	; 0x26
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005122:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800512a:	861a      	strh	r2, [r3, #48]	; 0x30
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	865a      	strh	r2, [r3, #50]	; 0x32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	869a      	strh	r2, [r3, #52]	; 0x34
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800513e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005146:	871a      	strh	r2, [r3, #56]	; 0x38
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005194:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800519e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005222:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005268:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005282:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800528c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800529e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ba:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052c4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ce:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052fa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005304:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800530e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005320:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005352:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800535c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800536e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005380:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ac:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053c6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d8:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 800540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800541a:	2b00      	cmp	r3, #0
 800541c:	d042      	beq.n	80054a4 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3204      	adds	r2, #4
 8005430:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800543c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800544c:	3301      	adds	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 800545e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005466:	2bf9      	cmp	r3, #249	; 0xf9
 8005468:	d903      	bls.n	8005472 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	22fa      	movs	r2, #250	; 0xfa
 800546e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685c      	ldr	r4, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800547c:	4618      	mov	r0, r3
 800547e:	f7fb f87b 	bl	8000578 <__aeabi_f2d>
 8005482:	4605      	mov	r5, r0
 8005484:	460e      	mov	r6, r1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f873 	bl	8000578 <__aeabi_f2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	ec43 2b11 	vmov	d1, r2, r3
 800549a:	ec46 5b10 	vmov	d0, r5, r6
 800549e:	4620      	mov	r0, r4
 80054a0:	f7ff f91e 	bl	80046e0 <_ZN5Motor8setRatioEdd>

	}

}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ac:	20000294 	.word	0x20000294

080054b0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	615a      	str	r2, [r3, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	619a      	str	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	621a      	str	r2, [r3, #32]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	625a      	str	r2, [r3, #36]	; 0x24
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	f107 020c 	add.w	r2, r7, #12
 8005558:	f107 0110 	add.w	r1, r7, #16
 800555c:	4618      	mov	r0, r3
 800555e:	f7fc f88f 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005562:	ed97 7a04 	vldr	s14, [r7, #16]
 8005566:	edd7 7a03 	vldr	s15, [r7, #12]
 800556a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800556e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005576:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7fa fffc 	bl	8000578 <__aeabi_f2d>
 8005580:	a30e      	add	r3, pc, #56	; (adr r3, 80055bc <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fb f84f 	bl	8000628 <__aeabi_dmul>
 800558a:	4603      	mov	r3, r0
 800558c:	460c      	mov	r4, r1
 800558e:	4618      	mov	r0, r3
 8005590:	4621      	mov	r1, r4
 8005592:	f7fb fb41 	bl	8000c18 <__aeabi_d2f>
 8005596:	4602      	mov	r2, r0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 80055a2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	ee07 3a90 	vmov	s15, r3
}
 80055ac:	eeb0 0a67 	vmov.f32	s0, s15
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000298 	.word	0x20000298
 80055bc:	1ab1d998 	.word	0x1ab1d998
 80055c0:	3f7830b5 	.word	0x3f7830b5
 80055c4:	00000000 	.word	0x00000000

080055c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80055c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	ed93 7a00 	vldr	s14, [r3]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80055dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80055ee:	4b48      	ldr	r3, [pc, #288]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	edd3 7a04 	vldr	s15, [r3, #16]
 8005604:	ed97 7a05 	vldr	s14, [r7, #20]
 8005608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005610:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fa ffaf 	bl	8000578 <__aeabi_f2d>
 800561a:	4604      	mov	r4, r0
 800561c:	460d      	mov	r5, r1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ed93 7a06 	vldr	s14, [r3, #24]
 8005624:	edd7 7a05 	vldr	s15, [r7, #20]
 8005628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562c:	ee17 0a90 	vmov	r0, s15
 8005630:	f7fa ffa2 	bl	8000578 <__aeabi_f2d>
 8005634:	a334      	add	r3, pc, #208	; (adr r3, 8005708 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f7fa fff5 	bl	8000628 <__aeabi_dmul>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4620      	mov	r0, r4
 8005644:	4629      	mov	r1, r5
 8005646:	f7fa fe39 	bl	80002bc <__adddf3>
 800564a:	4603      	mov	r3, r0
 800564c:	460c      	mov	r4, r1
 800564e:	4618      	mov	r0, r3
 8005650:	4621      	mov	r1, r4
 8005652:	f7fb fae1 	bl	8000c18 <__aeabi_d2f>
 8005656:	4602      	mov	r2, r0
 8005658:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800565a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005662:	4b2c      	ldr	r3, [pc, #176]	; (8005714 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	edd7 6a05 	vldr	s13, [r7, #20]
 800566c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	ee17 0a90 	vmov	r0, s15
 8005678:	f7fa ff7e 	bl	8000578 <__aeabi_f2d>
 800567c:	a322      	add	r3, pc, #136	; (adr r3, 8005708 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fb f8fb 	bl	800087c <__aeabi_ddiv>
 8005686:	4603      	mov	r3, r0
 8005688:	460c      	mov	r4, r1
 800568a:	4618      	mov	r0, r3
 800568c:	4621      	mov	r1, r4
 800568e:	f7fb fac3 	bl	8000c18 <__aeabi_d2f>
 8005692:	4603      	mov	r3, r0
 8005694:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005696:	ed97 7a04 	vldr	s14, [r7, #16]
 800569a:	edd7 7a03 	vldr	s15, [r7, #12]
 800569e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80056a4:	edd3 7a00 	vldr	s15, [r3]
 80056a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ac:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80056ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80056be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c2:	ee17 0a90 	vmov	r0, s15
 80056c6:	f7fa ff57 	bl	8000578 <__aeabi_f2d>
 80056ca:	4605      	mov	r5, r0
 80056cc:	460e      	mov	r6, r1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80056d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80056d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056dc:	ee17 0a90 	vmov	r0, s15
 80056e0:	f7fa ff4a 	bl	8000578 <__aeabi_f2d>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	ec43 2b11 	vmov	d1, r2, r3
 80056ec:	ec46 5b10 	vmov	d0, r5, r6
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7fe fff5 	bl	80046e0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80056f6:	4a07      	ldr	r2, [pc, #28]	; (8005714 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6013      	str	r3, [r2, #0]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005704:	f3af 8000 	nop.w
 8005708:	d2f1a9fc 	.word	0xd2f1a9fc
 800570c:	3f50624d 	.word	0x3f50624d
 8005710:	200002a0 	.word	0x200002a0
 8005714:	2000029c 	.word	0x2000029c

08005718 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	ed87 0a02 	vstr	s0, [r7, #8]
 8005724:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	ed87 0a02 	vstr	s0, [r7, #8]
 800574c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	ed87 0a02 	vstr	s0, [r7, #8]
 8005774:	edc7 0a01 	vstr	s1, [r7, #4]
 8005778:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80057a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80057aa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff feb7 	bl	8005548 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff feef 	bl	80055c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005848 <_ZN12VelocityCtrl4stopEv+0x30>
 8005830:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005848 <_ZN12VelocityCtrl4stopEv+0x30>
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe ff53 	bl	80046e0 <_ZN5Motor8setRatioEdd>

}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	f3af 8000 	nop.w
	...

08005850 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005862:	f001 fe11 	bl	8007488 <cppFlip100ns>

		tim7_timer++;
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800586e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005870:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d902      	bls.n	8005880 <HAL_TIM_PeriodElapsedCallback+0x30>
 800587a:	4b18      	ldr	r3, [pc, #96]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800588a:	f001 fdcd 	bl	8007428 <cppFlip1ms>

		tim6_timer++;
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005896:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005898:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d902      	bls.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a0f      	ldr	r2, [pc, #60]	; (80058ec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80058b2:	f001 fdf3 	bl	800749c <cppFlip10ms>

		tim13_timer++;
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058be:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a06      	ldr	r2, [pc, #24]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d902      	bls.n	80058d0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
	}

}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40001400 	.word	0x40001400
 80058dc:	200448ac 	.word	0x200448ac
 80058e0:	0001869f 	.word	0x0001869f
 80058e4:	40001000 	.word	0x40001000
 80058e8:	20044868 	.word	0x20044868
 80058ec:	40001c00 	.word	0x40001c00
 80058f0:	200448b0 	.word	0x200448b0

080058f4 <init>:

void init()
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80058f8:	2201      	movs	r2, #1
 80058fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058fe:	4808      	ldr	r0, [pc, #32]	; (8005920 <init+0x2c>)
 8005900:	f005 f980 	bl	800ac04 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005904:	4807      	ldr	r0, [pc, #28]	; (8005924 <init+0x30>)
 8005906:	f009 f848 	bl	800e99a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800590a:	4807      	ldr	r0, [pc, #28]	; (8005928 <init+0x34>)
 800590c:	f009 f845 	bl	800e99a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005910:	4806      	ldr	r0, [pc, #24]	; (800592c <init+0x38>)
 8005912:	f009 f842 	bl	800e99a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005916:	f001 fce3 	bl	80072e0 <cppInit>

	//path_following_initialize();

}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	20044994 	.word	0x20044994
 8005928:	20044b38 	.word	0x20044b38
 800592c:	200448b4 	.word	0x200448b4

08005930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005934:	f003 fe5e 	bl	80095f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005938:	f000 f82a 	bl	8005990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800593c:	f000 fdbc 	bl	80064b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005940:	f000 fd8a 	bl	8006458 <MX_DMA_Init>
  MX_I2C2_Init();
 8005944:	f000 f9e8 	bl	8005d18 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005948:	f000 fa14 	bl	8005d74 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800594c:	f000 fa32 	bl	8005db4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005950:	f000 fa66 	bl	8005e20 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005954:	f000 fb70 	bl	8006038 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005958:	f000 fc3c 	bl	80061d4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800595c:	f000 fd52 	bl	8006404 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005960:	f00a ffee 	bl	8010940 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005964:	f000 fbcc 	bl	8006100 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005968:	f000 f9a8 	bl	8005cbc <MX_I2C1_Init>
  MX_TIM3_Init();
 800596c:	f000 fb00 	bl	8005f70 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005970:	f000 fc88 	bl	8006284 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005974:	f000 fcd4 	bl	8006320 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005978:	f000 f898 	bl	8005aac <MX_ADC2_Init>
  MX_TIM7_Init();
 800597c:	f000 fbf6 	bl	800616c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005980:	f000 fd1c 	bl	80063bc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005984:	f7ff ffb6 	bl	80058f4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005988:	f001 fdb6 	bl	80074f8 <cppLoop>
 800598c:	e7fc      	b.n	8005988 <main+0x58>
	...

08005990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b0a4      	sub	sp, #144	; 0x90
 8005994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005996:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800599a:	2234      	movs	r2, #52	; 0x34
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f00f fc0e 	bl	80151c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059b4:	f107 030c 	add.w	r3, r7, #12
 80059b8:	223c      	movs	r2, #60	; 0x3c
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f00f fbff 	bl	80151c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	4b37      	ldr	r3, [pc, #220]	; (8005aa4 <SystemClock_Config+0x114>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a36      	ldr	r2, [pc, #216]	; (8005aa4 <SystemClock_Config+0x114>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b34      	ldr	r3, [pc, #208]	; (8005aa4 <SystemClock_Config+0x114>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	4b31      	ldr	r3, [pc, #196]	; (8005aa8 <SystemClock_Config+0x118>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <SystemClock_Config+0x118>)
 80059e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <SystemClock_Config+0x118>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a04:	2302      	movs	r3, #2
 8005a06:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a0c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a0e:	2308      	movs	r3, #8
 8005a10:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005a12:	23b4      	movs	r3, #180	; 0xb4
 8005a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005a1e:	2308      	movs	r3, #8
 8005a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005a24:	2302      	movs	r3, #2
 8005a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f006 fd0a 	bl	800c448 <HAL_RCC_OscConfig>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005a3a:	f000 fe7f 	bl	800673c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a3e:	f006 f885 	bl	800bb4c <HAL_PWREx_EnableOverDrive>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005a48:	f000 fe78 	bl	800673c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a4c:	230f      	movs	r3, #15
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a50:	2302      	movs	r3, #2
 8005a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a54:	2300      	movs	r3, #0
 8005a56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a62:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a68:	2105      	movs	r1, #5
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f006 f8be 	bl	800bbec <HAL_RCC_ClockConfig>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005a76:	f000 fe61 	bl	800673c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005a7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005a7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005a80:	2300      	movs	r3, #0
 8005a82:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005a84:	2300      	movs	r3, #0
 8005a86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f006 fa9d 	bl	800bfcc <HAL_RCCEx_PeriphCLKConfig>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005a98:	f000 fe50 	bl	800673c <Error_Handler>
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3790      	adds	r7, #144	; 0x90
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	40007000 	.word	0x40007000

08005aac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005abe:	4b7c      	ldr	r3, [pc, #496]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ac0:	4a7c      	ldr	r2, [pc, #496]	; (8005cb4 <MX_ADC2_Init+0x208>)
 8005ac2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005ac4:	4b7a      	ldr	r3, [pc, #488]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005aca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005acc:	4b78      	ldr	r3, [pc, #480]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005ad2:	4b77      	ldr	r3, [pc, #476]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005ad8:	4b75      	ldr	r3, [pc, #468]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005ade:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ae6:	4b72      	ldr	r3, [pc, #456]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005aec:	4b70      	ldr	r3, [pc, #448]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005aee:	4a72      	ldr	r2, [pc, #456]	; (8005cb8 <MX_ADC2_Init+0x20c>)
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005af2:	4b6f      	ldr	r3, [pc, #444]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005af8:	4b6d      	ldr	r3, [pc, #436]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005afa:	220e      	movs	r2, #14
 8005afc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005afe:	4b6c      	ldr	r3, [pc, #432]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005b0c:	4868      	ldr	r0, [pc, #416]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b0e:	f003 fe05 	bl	800971c <HAL_ADC_Init>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005b18:	f000 fe10 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005b1c:	230a      	movs	r3, #10
 8005b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b20:	2301      	movs	r3, #1
 8005b22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005b24:	2306      	movs	r3, #6
 8005b26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b28:	463b      	mov	r3, r7
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4860      	ldr	r0, [pc, #384]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b2e:	f003 ff49 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005b38:	f000 fe00 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005b3c:	230b      	movs	r3, #11
 8005b3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005b40:	2302      	movs	r3, #2
 8005b42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b44:	463b      	mov	r3, r7
 8005b46:	4619      	mov	r1, r3
 8005b48:	4859      	ldr	r0, [pc, #356]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b4a:	f003 ff3b 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005b54:	f000 fdf2 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005b58:	230c      	movs	r3, #12
 8005b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b60:	463b      	mov	r3, r7
 8005b62:	4619      	mov	r1, r3
 8005b64:	4852      	ldr	r0, [pc, #328]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b66:	f003 ff2d 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005b70:	f000 fde4 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005b74:	230d      	movs	r3, #13
 8005b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	4619      	mov	r1, r3
 8005b80:	484b      	ldr	r0, [pc, #300]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b82:	f003 ff1f 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005b8c:	f000 fdd6 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005b94:	2305      	movs	r3, #5
 8005b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b98:	463b      	mov	r3, r7
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4844      	ldr	r0, [pc, #272]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005b9e:	f003 ff11 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005ba8:	f000 fdc8 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005bac:	2301      	movs	r3, #1
 8005bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005bb0:	2306      	movs	r3, #6
 8005bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	483d      	ldr	r0, [pc, #244]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005bba:	f003 ff03 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005bc4:	f000 fdba 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005bcc:	2307      	movs	r3, #7
 8005bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4836      	ldr	r0, [pc, #216]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005bd6:	f003 fef5 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005be0:	f000 fdac 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005be4:	2303      	movs	r3, #3
 8005be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005be8:	2308      	movs	r3, #8
 8005bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005bec:	463b      	mov	r3, r7
 8005bee:	4619      	mov	r1, r3
 8005bf0:	482f      	ldr	r0, [pc, #188]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005bf2:	f003 fee7 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005bfc:	f000 fd9e 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005c00:	2304      	movs	r3, #4
 8005c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005c04:	2309      	movs	r3, #9
 8005c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c08:	463b      	mov	r3, r7
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4828      	ldr	r0, [pc, #160]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c0e:	f003 fed9 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005c18:	f000 fd90 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005c1c:	2305      	movs	r3, #5
 8005c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005c20:	230a      	movs	r3, #10
 8005c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c24:	463b      	mov	r3, r7
 8005c26:	4619      	mov	r1, r3
 8005c28:	4821      	ldr	r0, [pc, #132]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c2a:	f003 fecb 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005c34:	f000 fd82 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005c38:	2306      	movs	r3, #6
 8005c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005c3c:	230b      	movs	r3, #11
 8005c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c40:	463b      	mov	r3, r7
 8005c42:	4619      	mov	r1, r3
 8005c44:	481a      	ldr	r0, [pc, #104]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c46:	f003 febd 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005c50:	f000 fd74 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005c54:	2307      	movs	r3, #7
 8005c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005c58:	230c      	movs	r3, #12
 8005c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c62:	f003 feaf 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005c6c:	f000 fd66 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005c70:	2308      	movs	r3, #8
 8005c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005c74:	230d      	movs	r3, #13
 8005c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c78:	463b      	mov	r3, r7
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c7e:	f003 fea1 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005c88:	f000 fd58 	bl	800673c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005c8c:	2309      	movs	r3, #9
 8005c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005c90:	230e      	movs	r3, #14
 8005c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c94:	463b      	mov	r3, r7
 8005c96:	4619      	mov	r1, r3
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <MX_ADC2_Init+0x204>)
 8005c9a:	f003 fe93 	bl	80099c4 <HAL_ADC_ConfigChannel>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005ca4:	f000 fd4a 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20044738 	.word	0x20044738
 8005cb4:	40012100 	.word	0x40012100
 8005cb8:	0f000001 	.word	0x0f000001

08005cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <MX_I2C1_Init+0x54>)
 8005cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <MX_I2C1_Init+0x58>)
 8005cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005cde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005cf8:	4804      	ldr	r0, [pc, #16]	; (8005d0c <MX_I2C1_Init+0x50>)
 8005cfa:	f004 ff9d 	bl	800ac38 <HAL_I2C_Init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d04:	f000 fd1a 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d08:	bf00      	nop
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20044780 	.word	0x20044780
 8005d10:	40005400 	.word	0x40005400
 8005d14:	000186a0 	.word	0x000186a0

08005d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005d1c:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d1e:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <MX_I2C2_Init+0x54>)
 8005d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d24:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <MX_I2C2_Init+0x58>)
 8005d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d54:	4804      	ldr	r0, [pc, #16]	; (8005d68 <MX_I2C2_Init+0x50>)
 8005d56:	f004 ff6f 	bl	800ac38 <HAL_I2C_Init>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005d60:	f000 fcec 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005d64:	bf00      	nop
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20044814 	.word	0x20044814
 8005d6c:	40005800 	.word	0x40005800
 8005d70:	000186a0 	.word	0x000186a0

08005d74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	; (8005db0 <MX_SDIO_SD_Init+0x3c>)
 8005d7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005d84:	4b09      	ldr	r3, [pc, #36]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <MX_SDIO_SD_Init+0x38>)
 8005d9e:	2202      	movs	r2, #2
 8005da0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005da2:	bf00      	nop
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20044a14 	.word	0x20044a14
 8005db0:	40012c00 	.word	0x40012c00

08005db4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005db8:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dba:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <MX_SPI2_Init+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005dc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005dc6:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005dd2:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005dde:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005de8:	2228      	movs	r2, #40	; 0x28
 8005dea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005e00:	220a      	movs	r2, #10
 8005e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005e04:	4804      	ldr	r0, [pc, #16]	; (8005e18 <MX_SPI2_Init+0x64>)
 8005e06:	f008 f849 	bl	800de9c <HAL_SPI_Init>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005e10:	f000 fc94 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20044660 	.word	0x20044660
 8005e1c:	40003800 	.word	0x40003800

08005e20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b09a      	sub	sp, #104	; 0x68
 8005e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f00f f9c6 	bl	80151c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e3e:	f107 0320 	add.w	r3, r7, #32
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	611a      	str	r2, [r3, #16]
 8005e4e:	615a      	str	r2, [r3, #20]
 8005e50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e52:	463b      	mov	r3, r7
 8005e54:	2220      	movs	r2, #32
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f00f f9b1 	bl	80151c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005e5e:	4b42      	ldr	r3, [pc, #264]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <MX_TIM1_Init+0x14c>)
 8005e62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005e64:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005e70:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e78:	4b3b      	ldr	r3, [pc, #236]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e84:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005e8a:	4837      	ldr	r0, [pc, #220]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005e8c:	f008 fda9 	bl	800e9e2 <HAL_TIM_PWM_Init>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005e96:	f000 fc51 	bl	800673c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005ebe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4828      	ldr	r0, [pc, #160]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005ec6:	f008 fdf5 	bl	800eab4 <HAL_TIM_Encoder_Init>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005ed0:	f000 fc34 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005edc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4821      	ldr	r0, [pc, #132]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005ee4:	f009 fb1c 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005eee:	f000 fc25 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ef2:	2360      	movs	r3, #96	; 0x60
 8005ef4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005efa:	2300      	movs	r3, #0
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f06:	2300      	movs	r3, #0
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f0e:	f107 0320 	add.w	r3, r7, #32
 8005f12:	2208      	movs	r2, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	4814      	ldr	r0, [pc, #80]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005f18:	f008 ff9e 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005f22:	f000 fc0b 	bl	800673c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005f44:	463b      	mov	r3, r7
 8005f46:	4619      	mov	r1, r3
 8005f48:	4807      	ldr	r0, [pc, #28]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005f4a:	f009 fb65 	bl	800f618 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005f54:	f000 fbf2 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005f58:	4803      	ldr	r0, [pc, #12]	; (8005f68 <MX_TIM1_Init+0x148>)
 8005f5a:	f000 ffdf 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 8005f5e:	bf00      	nop
 8005f60:	3768      	adds	r7, #104	; 0x68
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200449d4 	.word	0x200449d4
 8005f6c:	40010000 	.word	0x40010000

08005f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f76:	f107 0320 	add.w	r3, r7, #32
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	60da      	str	r2, [r3, #12]
 8005f8c:	611a      	str	r2, [r3, #16]
 8005f8e:	615a      	str	r2, [r3, #20]
 8005f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f92:	4b27      	ldr	r3, [pc, #156]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005f94:	4a27      	ldr	r2, [pc, #156]	; (8006034 <MX_TIM3_Init+0xc4>)
 8005f96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8005fa4:	4b22      	ldr	r3, [pc, #136]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fa6:	f241 1293 	movw	r2, #4499	; 0x1193
 8005faa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005fb8:	481d      	ldr	r0, [pc, #116]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fba:	f008 fd12 	bl	800e9e2 <HAL_TIM_PWM_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005fc4:	f000 fbba 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005fd0:	f107 0320 	add.w	r3, r7, #32
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4816      	ldr	r0, [pc, #88]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005fd8:	f009 faa2 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005fe2:	f000 fbab 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fe6:	2360      	movs	r3, #96	; 0x60
 8005fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	480c      	ldr	r0, [pc, #48]	; (8006030 <MX_TIM3_Init+0xc0>)
 8005ffe:	f008 ff2b 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006008:	f000 fb98 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	2204      	movs	r2, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4807      	ldr	r0, [pc, #28]	; (8006030 <MX_TIM3_Init+0xc0>)
 8006014:	f008 ff20 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800601e:	f000 fb8d 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006022:	4803      	ldr	r0, [pc, #12]	; (8006030 <MX_TIM3_Init+0xc0>)
 8006024:	f000 ff7a 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 8006028:	bf00      	nop
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	2004486c 	.word	0x2004486c
 8006034:	40000400 	.word	0x40000400

08006038 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800603e:	f107 0320 	add.w	r3, r7, #32
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	611a      	str	r2, [r3, #16]
 8006056:	615a      	str	r2, [r3, #20]
 8006058:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800605a:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <MX_TIM4_Init+0xc0>)
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <MX_TIM4_Init+0xc4>)
 800605e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006062:	2200      	movs	r2, #0
 8006064:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006068:	2200      	movs	r2, #0
 800606a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800606c:	4b22      	ldr	r3, [pc, #136]	; (80060f8 <MX_TIM4_Init+0xc0>)
 800606e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006072:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006074:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <MX_TIM4_Init+0xc0>)
 800607c:	2200      	movs	r2, #0
 800607e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006080:	481d      	ldr	r0, [pc, #116]	; (80060f8 <MX_TIM4_Init+0xc0>)
 8006082:	f008 fcae 	bl	800e9e2 <HAL_TIM_PWM_Init>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800608c:	f000 fb56 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006094:	2300      	movs	r3, #0
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006098:	f107 0320 	add.w	r3, r7, #32
 800609c:	4619      	mov	r1, r3
 800609e:	4816      	ldr	r0, [pc, #88]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060a0:	f009 fa3e 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80060aa:	f000 fb47 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060ae:	2360      	movs	r3, #96	; 0x60
 80060b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	2208      	movs	r2, #8
 80060c2:	4619      	mov	r1, r3
 80060c4:	480c      	ldr	r0, [pc, #48]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060c6:	f008 fec7 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80060d0:	f000 fb34 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	220c      	movs	r2, #12
 80060d8:	4619      	mov	r1, r3
 80060da:	4807      	ldr	r0, [pc, #28]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060dc:	f008 febc 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80060e6:	f000 fb29 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80060ea:	4803      	ldr	r0, [pc, #12]	; (80060f8 <MX_TIM4_Init+0xc0>)
 80060ec:	f000 ff16 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 80060f0:	bf00      	nop
 80060f2:	3728      	adds	r7, #40	; 0x28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200446f8 	.word	0x200446f8
 80060fc:	40000800 	.word	0x40000800

08006100 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006106:	463b      	mov	r3, r7
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <MX_TIM6_Init+0x64>)
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <MX_TIM6_Init+0x68>)
 8006112:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <MX_TIM6_Init+0x64>)
 8006116:	2259      	movs	r2, #89	; 0x59
 8006118:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <MX_TIM6_Init+0x64>)
 800611c:	2200      	movs	r2, #0
 800611e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <MX_TIM6_Init+0x64>)
 8006122:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006126:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <MX_TIM6_Init+0x64>)
 800612a:	2280      	movs	r2, #128	; 0x80
 800612c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800612e:	480d      	ldr	r0, [pc, #52]	; (8006164 <MX_TIM6_Init+0x64>)
 8006130:	f008 fc08 	bl	800e944 <HAL_TIM_Base_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800613a:	f000 faff 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800613e:	2300      	movs	r3, #0
 8006140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006146:	463b      	mov	r3, r7
 8006148:	4619      	mov	r1, r3
 800614a:	4806      	ldr	r0, [pc, #24]	; (8006164 <MX_TIM6_Init+0x64>)
 800614c:	f009 f9e8 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006156:	f000 faf1 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20044994 	.word	0x20044994
 8006168:	40001000 	.word	0x40001000

0800616c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006172:	463b      	mov	r3, r7
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <MX_TIM7_Init+0x60>)
 800617c:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <MX_TIM7_Init+0x64>)
 800617e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <MX_TIM7_Init+0x60>)
 8006182:	22b3      	movs	r2, #179	; 0xb3
 8006184:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <MX_TIM7_Init+0x60>)
 8006188:	2200      	movs	r2, #0
 800618a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <MX_TIM7_Init+0x60>)
 800618e:	2231      	movs	r2, #49	; 0x31
 8006190:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006192:	4b0e      	ldr	r3, [pc, #56]	; (80061cc <MX_TIM7_Init+0x60>)
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006198:	480c      	ldr	r0, [pc, #48]	; (80061cc <MX_TIM7_Init+0x60>)
 800619a:	f008 fbd3 	bl	800e944 <HAL_TIM_Base_Init>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80061a4:	f000 faca 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061a8:	2300      	movs	r3, #0
 80061aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80061b0:	463b      	mov	r3, r7
 80061b2:	4619      	mov	r1, r3
 80061b4:	4805      	ldr	r0, [pc, #20]	; (80061cc <MX_TIM7_Init+0x60>)
 80061b6:	f009 f9b3 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80061c0:	f000 fabc 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20044b38 	.word	0x20044b38
 80061d0:	40001400 	.word	0x40001400

080061d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80061da:	f107 030c 	add.w	r3, r7, #12
 80061de:	2224      	movs	r2, #36	; 0x24
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f00e ffec 	bl	80151c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80061f0:	4b22      	ldr	r3, [pc, #136]	; (800627c <MX_TIM8_Init+0xa8>)
 80061f2:	4a23      	ldr	r2, [pc, #140]	; (8006280 <MX_TIM8_Init+0xac>)
 80061f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80061f6:	4b21      	ldr	r3, [pc, #132]	; (800627c <MX_TIM8_Init+0xa8>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80061fc:	4b1f      	ldr	r3, [pc, #124]	; (800627c <MX_TIM8_Init+0xa8>)
 80061fe:	2210      	movs	r2, #16
 8006200:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006202:	4b1e      	ldr	r3, [pc, #120]	; (800627c <MX_TIM8_Init+0xa8>)
 8006204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006208:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <MX_TIM8_Init+0xa8>)
 800620c:	2200      	movs	r2, #0
 800620e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <MX_TIM8_Init+0xa8>)
 8006212:	2200      	movs	r2, #0
 8006214:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006216:	4b19      	ldr	r3, [pc, #100]	; (800627c <MX_TIM8_Init+0xa8>)
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800621c:	2303      	movs	r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006224:	2301      	movs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006230:	2300      	movs	r3, #0
 8006232:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006234:	2301      	movs	r3, #1
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006238:	2300      	movs	r3, #0
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	4619      	mov	r1, r3
 8006246:	480d      	ldr	r0, [pc, #52]	; (800627c <MX_TIM8_Init+0xa8>)
 8006248:	f008 fc34 	bl	800eab4 <HAL_TIM_Encoder_Init>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006252:	f000 fa73 	bl	800673c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4806      	ldr	r0, [pc, #24]	; (800627c <MX_TIM8_Init+0xa8>)
 8006264:	f009 f95c 	bl	800f520 <HAL_TIMEx_MasterConfigSynchronization>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800626e:	f000 fa65 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006272:	bf00      	nop
 8006274:	3730      	adds	r7, #48	; 0x30
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200446b8 	.word	0x200446b8
 8006280:	40010400 	.word	0x40010400

08006284 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	611a      	str	r2, [r3, #16]
 8006298:	615a      	str	r2, [r3, #20]
 800629a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <MX_TIM10_Init+0x94>)
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <MX_TIM10_Init+0x98>)
 80062a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <MX_TIM10_Init+0x94>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <MX_TIM10_Init+0x94>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80062ae:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <MX_TIM10_Init+0x94>)
 80062b0:	f242 3227 	movw	r2, #8999	; 0x2327
 80062b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <MX_TIM10_Init+0x94>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <MX_TIM10_Init+0x94>)
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80062c2:	4815      	ldr	r0, [pc, #84]	; (8006318 <MX_TIM10_Init+0x94>)
 80062c4:	f008 fb3e 	bl	800e944 <HAL_TIM_Base_Init>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80062ce:	f000 fa35 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80062d2:	4811      	ldr	r0, [pc, #68]	; (8006318 <MX_TIM10_Init+0x94>)
 80062d4:	f008 fb85 	bl	800e9e2 <HAL_TIM_PWM_Init>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80062de:	f000 fa2d 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062e2:	2360      	movs	r3, #96	; 0x60
 80062e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062f2:	1d3b      	adds	r3, r7, #4
 80062f4:	2200      	movs	r2, #0
 80062f6:	4619      	mov	r1, r3
 80062f8:	4807      	ldr	r0, [pc, #28]	; (8006318 <MX_TIM10_Init+0x94>)
 80062fa:	f008 fdad 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006304:	f000 fa1a 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006308:	4803      	ldr	r0, [pc, #12]	; (8006318 <MX_TIM10_Init+0x94>)
 800630a:	f000 fe07 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 800630e:	bf00      	nop
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200447d4 	.word	0x200447d4
 800631c:	40014400 	.word	0x40014400

08006320 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	611a      	str	r2, [r3, #16]
 8006334:	615a      	str	r2, [r3, #20]
 8006336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006338:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <MX_TIM11_Init+0x94>)
 800633a:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <MX_TIM11_Init+0x98>)
 800633c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800633e:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006340:	2201      	movs	r2, #1
 8006342:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800634a:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <MX_TIM11_Init+0x94>)
 800634c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006350:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006354:	2200      	movs	r2, #0
 8006356:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <MX_TIM11_Init+0x94>)
 800635a:	2200      	movs	r2, #0
 800635c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800635e:	4815      	ldr	r0, [pc, #84]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006360:	f008 faf0 	bl	800e944 <HAL_TIM_Base_Init>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800636a:	f000 f9e7 	bl	800673c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800636e:	4811      	ldr	r0, [pc, #68]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006370:	f008 fb37 	bl	800e9e2 <HAL_TIM_PWM_Init>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800637a:	f000 f9df 	bl	800673c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800637e:	2360      	movs	r3, #96	; 0x60
 8006380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	2200      	movs	r2, #0
 8006392:	4619      	mov	r1, r3
 8006394:	4807      	ldr	r0, [pc, #28]	; (80063b4 <MX_TIM11_Init+0x94>)
 8006396:	f008 fd5f 	bl	800ee58 <HAL_TIM_PWM_ConfigChannel>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80063a0:	f000 f9cc 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80063a4:	4803      	ldr	r0, [pc, #12]	; (80063b4 <MX_TIM11_Init+0x94>)
 80063a6:	f000 fdb9 	bl	8006f1c <HAL_TIM_MspPostInit>

}
 80063aa:	bf00      	nop
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200448f4 	.word	0x200448f4
 80063b8:	40014800 	.word	0x40014800

080063bc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80063c0:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <MX_TIM13_Init+0x40>)
 80063c2:	4a0f      	ldr	r2, [pc, #60]	; (8006400 <MX_TIM13_Init+0x44>)
 80063c4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <MX_TIM13_Init+0x40>)
 80063c8:	2259      	movs	r2, #89	; 0x59
 80063ca:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <MX_TIM13_Init+0x40>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80063d2:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <MX_TIM13_Init+0x40>)
 80063d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80063d8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <MX_TIM13_Init+0x40>)
 80063dc:	2200      	movs	r2, #0
 80063de:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <MX_TIM13_Init+0x40>)
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80063e6:	4805      	ldr	r0, [pc, #20]	; (80063fc <MX_TIM13_Init+0x40>)
 80063e8:	f008 faac 	bl	800e944 <HAL_TIM_Base_Init>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80063f2:	f000 f9a3 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80063f6:	bf00      	nop
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200448b4 	.word	0x200448b4
 8006400:	40001c00 	.word	0x40001c00

08006404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800640a:	4a12      	ldr	r2, [pc, #72]	; (8006454 <MX_USART2_UART_Init+0x50>)
 800640c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800641e:	2200      	movs	r2, #0
 8006420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006424:	2200      	movs	r2, #0
 8006426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800642a:	220c      	movs	r2, #12
 800642c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006430:	2200      	movs	r2, #0
 8006432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 8006436:	2200      	movs	r2, #0
 8006438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800643a:	4805      	ldr	r0, [pc, #20]	; (8006450 <MX_USART2_UART_Init+0x4c>)
 800643c:	f009 f952 	bl	800f6e4 <HAL_UART_Init>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006446:	f000 f979 	bl	800673c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20044a98 	.word	0x20044a98
 8006454:	40004400 	.word	0x40004400

08006458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <MX_DMA_Init+0x5c>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <MX_DMA_Init+0x5c>)
 8006468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800646c:	6313      	str	r3, [r2, #48]	; 0x30
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <MX_DMA_Init+0x5c>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	203a      	movs	r0, #58	; 0x3a
 8006480:	f003 fe2b 	bl	800a0da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006484:	203a      	movs	r0, #58	; 0x3a
 8006486:	f003 fe44 	bl	800a112 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	203b      	movs	r0, #59	; 0x3b
 8006490:	f003 fe23 	bl	800a0da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006494:	203b      	movs	r0, #59	; 0x3b
 8006496:	f003 fe3c 	bl	800a112 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800649a:	2200      	movs	r2, #0
 800649c:	2100      	movs	r1, #0
 800649e:	2045      	movs	r0, #69	; 0x45
 80064a0:	f003 fe1b 	bl	800a0da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80064a4:	2045      	movs	r0, #69	; 0x45
 80064a6:	f003 fe34 	bl	800a112 <HAL_NVIC_EnableIRQ>

}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800

080064b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	; 0x30
 80064bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064be:	f107 031c 	add.w	r3, r7, #28
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	609a      	str	r2, [r3, #8]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
 80064d2:	4b94      	ldr	r3, [pc, #592]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	4a93      	ldr	r2, [pc, #588]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064d8:	f043 0310 	orr.w	r3, r3, #16
 80064dc:	6313      	str	r3, [r2, #48]	; 0x30
 80064de:	4b91      	ldr	r3, [pc, #580]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	4b8d      	ldr	r3, [pc, #564]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a8c      	ldr	r2, [pc, #560]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b8a      	ldr	r3, [pc, #552]	; (8006724 <MX_GPIO_Init+0x26c>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	4b86      	ldr	r3, [pc, #536]	; (8006724 <MX_GPIO_Init+0x26c>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	4a85      	ldr	r2, [pc, #532]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006510:	f043 0304 	orr.w	r3, r3, #4
 8006514:	6313      	str	r3, [r2, #48]	; 0x30
 8006516:	4b83      	ldr	r3, [pc, #524]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	613b      	str	r3, [r7, #16]
 8006520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	4b7f      	ldr	r3, [pc, #508]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a7e      	ldr	r2, [pc, #504]	; (8006724 <MX_GPIO_Init+0x26c>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	4b7c      	ldr	r3, [pc, #496]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	4b78      	ldr	r3, [pc, #480]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	4a77      	ldr	r2, [pc, #476]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	6313      	str	r3, [r2, #48]	; 0x30
 800654e:	4b75      	ldr	r3, [pc, #468]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	60bb      	str	r3, [r7, #8]
 8006558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	4b71      	ldr	r3, [pc, #452]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	4a70      	ldr	r2, [pc, #448]	; (8006724 <MX_GPIO_Init+0x26c>)
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	6313      	str	r3, [r2, #48]	; 0x30
 800656a:	4b6e      	ldr	r3, [pc, #440]	; (8006724 <MX_GPIO_Init+0x26c>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006576:	2200      	movs	r2, #0
 8006578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800657c:	486a      	ldr	r0, [pc, #424]	; (8006728 <MX_GPIO_Init+0x270>)
 800657e:	f004 fb41 	bl	800ac04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006582:	2200      	movs	r2, #0
 8006584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006588:	4868      	ldr	r0, [pc, #416]	; (800672c <MX_GPIO_Init+0x274>)
 800658a:	f004 fb3b 	bl	800ac04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800658e:	2200      	movs	r2, #0
 8006590:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006594:	4866      	ldr	r0, [pc, #408]	; (8006730 <MX_GPIO_Init+0x278>)
 8006596:	f004 fb35 	bl	800ac04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800659a:	2200      	movs	r2, #0
 800659c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80065a0:	4864      	ldr	r0, [pc, #400]	; (8006734 <MX_GPIO_Init+0x27c>)
 80065a2:	f004 fb2f 	bl	800ac04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065a6:	2304      	movs	r3, #4
 80065a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065aa:	2300      	movs	r3, #0
 80065ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065b2:	f107 031c 	add.w	r3, r7, #28
 80065b6:	4619      	mov	r1, r3
 80065b8:	485b      	ldr	r0, [pc, #364]	; (8006728 <MX_GPIO_Init+0x270>)
 80065ba:	f004 f961 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80065be:	230f      	movs	r3, #15
 80065c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065c2:	2303      	movs	r3, #3
 80065c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065ca:	f107 031c 	add.w	r3, r7, #28
 80065ce:	4619      	mov	r1, r3
 80065d0:	4859      	ldr	r0, [pc, #356]	; (8006738 <MX_GPIO_Init+0x280>)
 80065d2:	f004 f955 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80065d6:	23e1      	movs	r3, #225	; 0xe1
 80065d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065da:	2303      	movs	r3, #3
 80065dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e2:	f107 031c 	add.w	r3, r7, #28
 80065e6:	4619      	mov	r1, r3
 80065e8:	4852      	ldr	r0, [pc, #328]	; (8006734 <MX_GPIO_Init+0x27c>)
 80065ea:	f004 f949 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065ee:	2303      	movs	r3, #3
 80065f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065f2:	2303      	movs	r3, #3
 80065f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065fa:	f107 031c 	add.w	r3, r7, #28
 80065fe:	4619      	mov	r1, r3
 8006600:	484a      	ldr	r0, [pc, #296]	; (800672c <MX_GPIO_Init+0x274>)
 8006602:	f004 f93d 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006606:	2304      	movs	r3, #4
 8006608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800660a:	2300      	movs	r3, #0
 800660c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800660e:	2301      	movs	r3, #1
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006612:	f107 031c 	add.w	r3, r7, #28
 8006616:	4619      	mov	r1, r3
 8006618:	4844      	ldr	r0, [pc, #272]	; (800672c <MX_GPIO_Init+0x274>)
 800661a:	f004 f931 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800661e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006624:	2300      	movs	r3, #0
 8006626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006628:	2301      	movs	r3, #1
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800662c:	f107 031c 	add.w	r3, r7, #28
 8006630:	4619      	mov	r1, r3
 8006632:	483d      	ldr	r0, [pc, #244]	; (8006728 <MX_GPIO_Init+0x270>)
 8006634:	f004 f924 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800663c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800663e:	2301      	movs	r3, #1
 8006640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006646:	2300      	movs	r3, #0
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800664a:	f107 031c 	add.w	r3, r7, #28
 800664e:	4619      	mov	r1, r3
 8006650:	4835      	ldr	r0, [pc, #212]	; (8006728 <MX_GPIO_Init+0x270>)
 8006652:	f004 f915 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800665a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665c:	2301      	movs	r3, #1
 800665e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006664:	2300      	movs	r3, #0
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006668:	f107 031c 	add.w	r3, r7, #28
 800666c:	4619      	mov	r1, r3
 800666e:	482f      	ldr	r0, [pc, #188]	; (800672c <MX_GPIO_Init+0x274>)
 8006670:	f004 f906 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667e:	2300      	movs	r3, #0
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006682:	f107 031c 	add.w	r3, r7, #28
 8006686:	4619      	mov	r1, r3
 8006688:	4829      	ldr	r0, [pc, #164]	; (8006730 <MX_GPIO_Init+0x278>)
 800668a:	f004 f8f9 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800668e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006694:	2301      	movs	r3, #1
 8006696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669c:	2300      	movs	r3, #0
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	4619      	mov	r1, r3
 80066a6:	4822      	ldr	r0, [pc, #136]	; (8006730 <MX_GPIO_Init+0x278>)
 80066a8:	f004 f8ea 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80066ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066b2:	2301      	movs	r3, #1
 80066b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066b6:	2301      	movs	r3, #1
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066be:	f107 031c 	add.w	r3, r7, #28
 80066c2:	4619      	mov	r1, r3
 80066c4:	481a      	ldr	r0, [pc, #104]	; (8006730 <MX_GPIO_Init+0x278>)
 80066c6:	f004 f8db 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80066ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80066ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066d0:	2301      	movs	r3, #1
 80066d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066d8:	2300      	movs	r3, #0
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066dc:	f107 031c 	add.w	r3, r7, #28
 80066e0:	4619      	mov	r1, r3
 80066e2:	4814      	ldr	r0, [pc, #80]	; (8006734 <MX_GPIO_Init+0x27c>)
 80066e4:	f004 f8cc 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80066e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066ee:	2300      	movs	r3, #0
 80066f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066f6:	f107 031c 	add.w	r3, r7, #28
 80066fa:	4619      	mov	r1, r3
 80066fc:	480d      	ldr	r0, [pc, #52]	; (8006734 <MX_GPIO_Init+0x27c>)
 80066fe:	f004 f8bf 	bl	800a880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006702:	239b      	movs	r3, #155	; 0x9b
 8006704:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006706:	2300      	movs	r3, #0
 8006708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800670a:	2301      	movs	r3, #1
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800670e:	f107 031c 	add.w	r3, r7, #28
 8006712:	4619      	mov	r1, r3
 8006714:	4806      	ldr	r0, [pc, #24]	; (8006730 <MX_GPIO_Init+0x278>)
 8006716:	f004 f8b3 	bl	800a880 <HAL_GPIO_Init>

}
 800671a:	bf00      	nop
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
 8006728:	40021000 	.word	0x40021000
 800672c:	40020400 	.word	0x40020400
 8006730:	40020c00 	.word	0x40020c00
 8006734:	40020000 	.word	0x40020000
 8006738:	40020800 	.word	0x40020800

0800673c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006740:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006742:	e7fe      	b.n	8006742 <Error_Handler+0x6>

08006744 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006748:	bf00      	nop
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <HAL_MspInit+0x4c>)
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	4a0f      	ldr	r2, [pc, #60]	; (80067a0 <HAL_MspInit+0x4c>)
 8006764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006768:	6453      	str	r3, [r2, #68]	; 0x44
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <HAL_MspInit+0x4c>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <HAL_MspInit+0x4c>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <HAL_MspInit+0x4c>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6413      	str	r3, [r2, #64]	; 0x40
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_MspInit+0x4c>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800

080067a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08c      	sub	sp, #48	; 0x30
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ac:	f107 031c 	add.w	r3, r7, #28
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a4a      	ldr	r2, [pc, #296]	; (80068ec <HAL_ADC_MspInit+0x148>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f040 808e 	bne.w	80068e4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	4b48      	ldr	r3, [pc, #288]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	4a47      	ldr	r2, [pc, #284]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067d6:	6453      	str	r3, [r2, #68]	; 0x44
 80067d8:	4b45      	ldr	r3, [pc, #276]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	4b41      	ldr	r3, [pc, #260]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	4a40      	ldr	r2, [pc, #256]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	6313      	str	r3, [r2, #48]	; 0x30
 80067f4:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	4a39      	ldr	r2, [pc, #228]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6313      	str	r3, [r2, #48]	; 0x30
 8006810:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	4b33      	ldr	r3, [pc, #204]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	4a32      	ldr	r2, [pc, #200]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	6313      	str	r3, [r2, #48]	; 0x30
 800682c:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <HAL_ADC_MspInit+0x14c>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006838:	230f      	movs	r3, #15
 800683a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800683c:	2303      	movs	r3, #3
 800683e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006844:	f107 031c 	add.w	r3, r7, #28
 8006848:	4619      	mov	r1, r3
 800684a:	482a      	ldr	r0, [pc, #168]	; (80068f4 <HAL_ADC_MspInit+0x150>)
 800684c:	f004 f818 	bl	800a880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006854:	2303      	movs	r3, #3
 8006856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800685c:	f107 031c 	add.w	r3, r7, #28
 8006860:	4619      	mov	r1, r3
 8006862:	4825      	ldr	r0, [pc, #148]	; (80068f8 <HAL_ADC_MspInit+0x154>)
 8006864:	f004 f80c 	bl	800a880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006868:	2303      	movs	r3, #3
 800686a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800686c:	2303      	movs	r3, #3
 800686e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006870:	2300      	movs	r3, #0
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006874:	f107 031c 	add.w	r3, r7, #28
 8006878:	4619      	mov	r1, r3
 800687a:	4820      	ldr	r0, [pc, #128]	; (80068fc <HAL_ADC_MspInit+0x158>)
 800687c:	f004 f800 	bl	800a880 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006880:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006882:	4a20      	ldr	r2, [pc, #128]	; (8006904 <HAL_ADC_MspInit+0x160>)
 8006884:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006886:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800688c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800688e:	4b1c      	ldr	r3, [pc, #112]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006894:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800689a:	4b19      	ldr	r3, [pc, #100]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 800689c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068b0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80068b2:	4b13      	ldr	r3, [pc, #76]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068c0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80068c8:	480d      	ldr	r0, [pc, #52]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068ca:	f003 fc3d 	bl	800a148 <HAL_DMA_Init>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80068d4:	f7ff ff32 	bl	800673c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a09      	ldr	r2, [pc, #36]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <HAL_ADC_MspInit+0x15c>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80068e4:	bf00      	nop
 80068e6:	3730      	adds	r7, #48	; 0x30
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40012100 	.word	0x40012100
 80068f0:	40023800 	.word	0x40023800
 80068f4:	40020800 	.word	0x40020800
 80068f8:	40020000 	.word	0x40020000
 80068fc:	40020400 	.word	0x40020400
 8006900:	20044ad8 	.word	0x20044ad8
 8006904:	40026440 	.word	0x40026440

08006908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006910:	f107 031c 	add.w	r3, r7, #28
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	609a      	str	r2, [r3, #8]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a32      	ldr	r2, [pc, #200]	; (80069f0 <HAL_I2C_MspInit+0xe8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d12c      	bne.n	8006984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	4b31      	ldr	r3, [pc, #196]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	4a30      	ldr	r2, [pc, #192]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	6313      	str	r3, [r2, #48]	; 0x30
 800693a:	4b2e      	ldr	r3, [pc, #184]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006946:	23c0      	movs	r3, #192	; 0xc0
 8006948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800694a:	2312      	movs	r3, #18
 800694c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800694e:	2301      	movs	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006952:	2303      	movs	r3, #3
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006956:	2304      	movs	r3, #4
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800695a:	f107 031c 	add.w	r3, r7, #28
 800695e:	4619      	mov	r1, r3
 8006960:	4825      	ldr	r0, [pc, #148]	; (80069f8 <HAL_I2C_MspInit+0xf0>)
 8006962:	f003 ff8d 	bl	800a880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	4b22      	ldr	r3, [pc, #136]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006974:	6413      	str	r3, [r2, #64]	; 0x40
 8006976:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006982:	e031      	b.n	80069e8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_I2C_MspInit+0xf4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d12c      	bne.n	80069e8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6313      	str	r3, [r2, #48]	; 0x30
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80069aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069b0:	2312      	movs	r3, #18
 80069b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069b4:	2301      	movs	r3, #1
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b8:	2303      	movs	r3, #3
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80069bc:	2304      	movs	r3, #4
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c0:	f107 031c 	add.w	r3, r7, #28
 80069c4:	4619      	mov	r1, r3
 80069c6:	480c      	ldr	r0, [pc, #48]	; (80069f8 <HAL_I2C_MspInit+0xf0>)
 80069c8:	f003 ff5a 	bl	800a880 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069da:	6413      	str	r3, [r2, #64]	; 0x40
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <HAL_I2C_MspInit+0xec>)
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
}
 80069e8:	bf00      	nop
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40005400 	.word	0x40005400
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40020400 	.word	0x40020400
 80069fc:	40005800 	.word	0x40005800

08006a00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a69      	ldr	r2, [pc, #420]	; (8006bc4 <HAL_SD_MspInit+0x1c4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f040 80cb 	bne.w	8006bba <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	4b67      	ldr	r3, [pc, #412]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2c:	4a66      	ldr	r2, [pc, #408]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a32:	6453      	str	r3, [r2, #68]	; 0x44
 8006a34:	4b64      	ldr	r3, [pc, #400]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	4b60      	ldr	r3, [pc, #384]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4a5f      	ldr	r2, [pc, #380]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a50:	4b5d      	ldr	r3, [pc, #372]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	4b59      	ldr	r3, [pc, #356]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	4a58      	ldr	r2, [pc, #352]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a66:	f043 0308 	orr.w	r3, r3, #8
 8006a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6c:	4b56      	ldr	r3, [pc, #344]	; (8006bc8 <HAL_SD_MspInit+0x1c8>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a78:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006a7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a86:	2303      	movs	r3, #3
 8006a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4619      	mov	r1, r3
 8006a94:	484d      	ldr	r0, [pc, #308]	; (8006bcc <HAL_SD_MspInit+0x1cc>)
 8006a96:	f003 fef3 	bl	800a880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006aaa:	230c      	movs	r3, #12
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006aae:	f107 0314 	add.w	r3, r7, #20
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4846      	ldr	r0, [pc, #280]	; (8006bd0 <HAL_SD_MspInit+0x1d0>)
 8006ab6:	f003 fee3 	bl	800a880 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006aba:	4b46      	ldr	r3, [pc, #280]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006abc:	4a46      	ldr	r2, [pc, #280]	; (8006bd8 <HAL_SD_MspInit+0x1d8>)
 8006abe:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006ac0:	4b44      	ldr	r3, [pc, #272]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ac6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ac8:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ace:	4b41      	ldr	r3, [pc, #260]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ada:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006adc:	4b3d      	ldr	r3, [pc, #244]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ae4:	4b3b      	ldr	r3, [pc, #236]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006aea:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006aec:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006aee:	2220      	movs	r2, #32
 8006af0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006af2:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006af4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006af8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006afa:	4b36      	ldr	r3, [pc, #216]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006afc:	2204      	movs	r2, #4
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b00:	4b34      	ldr	r3, [pc, #208]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b02:	2203      	movs	r2, #3
 8006b04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006b06:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006b0e:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006b16:	482f      	ldr	r0, [pc, #188]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b18:	f003 fb16 	bl	800a148 <HAL_DMA_Init>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006b22:	f7ff fe0b 	bl	800673c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8006b2c:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <HAL_SD_MspInit+0x1d4>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006b32:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b34:	4a2a      	ldr	r2, [pc, #168]	; (8006be0 <HAL_SD_MspInit+0x1e0>)
 8006b36:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006b38:	4b28      	ldr	r3, [pc, #160]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b40:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b42:	2240      	movs	r2, #64	; 0x40
 8006b44:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b46:	4b25      	ldr	r3, [pc, #148]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b4c:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b52:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b54:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b62:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b66:	2220      	movs	r2, #32
 8006b68:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006b70:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b74:	2204      	movs	r2, #4
 8006b76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b78:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006b7e:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006b8e:	4813      	ldr	r0, [pc, #76]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006b90:	f003 fada 	bl	800a148 <HAL_DMA_Init>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006b9a:	f7ff fdcf 	bl	800673c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a0e      	ldr	r2, [pc, #56]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006ba2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <HAL_SD_MspInit+0x1dc>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	2031      	movs	r0, #49	; 0x31
 8006bb0:	f003 fa93 	bl	800a0da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006bb4:	2031      	movs	r0, #49	; 0x31
 8006bb6:	f003 faac 	bl	800a112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006bba:	bf00      	nop
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40020800 	.word	0x40020800
 8006bd0:	40020c00 	.word	0x40020c00
 8006bd4:	20044600 	.word	0x20044600
 8006bd8:	40026458 	.word	0x40026458
 8006bdc:	20044934 	.word	0x20044934
 8006be0:	400264a0 	.word	0x400264a0

08006be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_SPI_MspInit+0x84>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d12c      	bne.n	8006c60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c14:	6413      	str	r3, [r2, #64]	; 0x40
 8006c16:	4b15      	ldr	r3, [pc, #84]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	6313      	str	r3, [r2, #48]	; 0x30
 8006c32:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <HAL_SPI_MspInit+0x88>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006c3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c44:	2302      	movs	r3, #2
 8006c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c50:	2305      	movs	r3, #5
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4805      	ldr	r0, [pc, #20]	; (8006c70 <HAL_SPI_MspInit+0x8c>)
 8006c5c:	f003 fe10 	bl	800a880 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006c60:	bf00      	nop
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40003800 	.word	0x40003800
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40020400 	.word	0x40020400

08006c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08c      	sub	sp, #48	; 0x30
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c7c:	f107 031c 	add.w	r3, r7, #28
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	609a      	str	r2, [r3, #8]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <HAL_TIM_PWM_MspInit+0xd4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d12d      	bne.n	8006cf2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ca6:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006cbc:	f043 0310 	orr.w	r3, r3, #16
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f003 0310 	and.w	r3, r3, #16
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006cce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ce4:	f107 031c 	add.w	r3, r7, #28
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4819      	ldr	r0, [pc, #100]	; (8006d50 <HAL_TIM_PWM_MspInit+0xdc>)
 8006cec:	f003 fdc8 	bl	800a880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006cf0:	e026      	b.n	8006d40 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <HAL_TIM_PWM_MspInit+0xe0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10e      	bne.n	8006d1a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	4b12      	ldr	r3, [pc, #72]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d06:	f043 0302 	orr.w	r3, r3, #2
 8006d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]
}
 8006d18:	e012      	b.n	8006d40 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <HAL_TIM_PWM_MspInit+0xe4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10d      	bne.n	8006d40 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	6413      	str	r3, [r2, #64]	; 0x40
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
}
 8006d40:	bf00      	nop
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800

08006d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a3e      	ldr	r2, [pc, #248]	; (8006e64 <HAL_TIM_Base_MspInit+0x108>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d116      	bne.n	8006d9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006d78:	f043 0310 	orr.w	r3, r3, #16
 8006d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7e:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	2036      	movs	r0, #54	; 0x36
 8006d90:	f003 f9a3 	bl	800a0da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006d94:	2036      	movs	r0, #54	; 0x36
 8006d96:	f003 f9bc 	bl	800a112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006d9a:	e05e      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a32      	ldr	r2, [pc, #200]	; (8006e6c <HAL_TIM_Base_MspInit+0x110>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d116      	bne.n	8006dd4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	4b2f      	ldr	r3, [pc, #188]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	4a2e      	ldr	r2, [pc, #184]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	6413      	str	r3, [r2, #64]	; 0x40
 8006db6:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2037      	movs	r0, #55	; 0x37
 8006dc8:	f003 f987 	bl	800a0da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006dcc:	2037      	movs	r0, #55	; 0x37
 8006dce:	f003 f9a0 	bl	800a112 <HAL_NVIC_EnableIRQ>
}
 8006dd2:	e042      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a25      	ldr	r2, [pc, #148]	; (8006e70 <HAL_TIM_Base_MspInit+0x114>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	4a20      	ldr	r2, [pc, #128]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dec:	6453      	str	r3, [r2, #68]	; 0x44
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	697b      	ldr	r3, [r7, #20]
}
 8006dfa:	e02e      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <HAL_TIM_Base_MspInit+0x118>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	4a16      	ldr	r2, [pc, #88]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e14:	6453      	str	r3, [r2, #68]	; 0x44
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
}
 8006e22:	e01a      	b.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a13      	ldr	r2, [pc, #76]	; (8006e78 <HAL_TIM_Base_MspInit+0x11c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d115      	bne.n	8006e5a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	4a0c      	ldr	r2, [pc, #48]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <HAL_TIM_Base_MspInit+0x10c>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	202c      	movs	r0, #44	; 0x2c
 8006e50:	f003 f943 	bl	800a0da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006e54:	202c      	movs	r0, #44	; 0x2c
 8006e56:	f003 f95c 	bl	800a112 <HAL_NVIC_EnableIRQ>
}
 8006e5a:	bf00      	nop
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40001000 	.word	0x40001000
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40001400 	.word	0x40001400
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800
 8006e78:	40001c00 	.word	0x40001c00

08006e7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e84:	f107 0314 	add.w	r3, r7, #20
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	605a      	str	r2, [r3, #4]
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	60da      	str	r2, [r3, #12]
 8006e92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <HAL_TIM_Encoder_MspInit+0x94>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d133      	bne.n	8006f06 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea6:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ea8:	f043 0302 	orr.w	r3, r3, #2
 8006eac:	6453      	str	r3, [r2, #68]	; 0x44
 8006eae:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <HAL_TIM_Encoder_MspInit+0x98>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ed6:	23c0      	movs	r3, #192	; 0xc0
 8006ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eda:	2302      	movs	r3, #2
 8006edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4809      	ldr	r0, [pc, #36]	; (8006f18 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006ef2:	f003 fcc5 	bl	800a880 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2100      	movs	r1, #0
 8006efa:	202c      	movs	r0, #44	; 0x2c
 8006efc:	f003 f8ed 	bl	800a0da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006f00:	202c      	movs	r0, #44	; 0x2c
 8006f02:	f003 f906 	bl	800a112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006f06:	bf00      	nop
 8006f08:	3728      	adds	r7, #40	; 0x28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40010400 	.word	0x40010400
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40020800 	.word	0x40020800

08006f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08c      	sub	sp, #48	; 0x30
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f24:	f107 031c 	add.w	r3, r7, #28
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	605a      	str	r2, [r3, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a5c      	ldr	r2, [pc, #368]	; (80070ac <HAL_TIM_MspPostInit+0x190>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d11f      	bne.n	8006f7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	4b5b      	ldr	r3, [pc, #364]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	4a5a      	ldr	r2, [pc, #360]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f48:	f043 0310 	orr.w	r3, r3, #16
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4e:	4b58      	ldr	r3, [pc, #352]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f60:	2302      	movs	r3, #2
 8006f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f70:	f107 031c 	add.w	r3, r7, #28
 8006f74:	4619      	mov	r1, r3
 8006f76:	484f      	ldr	r0, [pc, #316]	; (80070b4 <HAL_TIM_MspPostInit+0x198>)
 8006f78:	f003 fc82 	bl	800a880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006f7c:	e091      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a4d      	ldr	r2, [pc, #308]	; (80070b8 <HAL_TIM_MspPostInit+0x19c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d11e      	bne.n	8006fc6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f88:	2300      	movs	r3, #0
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	4b48      	ldr	r3, [pc, #288]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	4a47      	ldr	r2, [pc, #284]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	6313      	str	r3, [r2, #48]	; 0x30
 8006f98:	4b45      	ldr	r3, [pc, #276]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fa4:	2330      	movs	r3, #48	; 0x30
 8006fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb8:	f107 031c 	add.w	r3, r7, #28
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	483f      	ldr	r0, [pc, #252]	; (80070bc <HAL_TIM_MspPostInit+0x1a0>)
 8006fc0:	f003 fc5e 	bl	800a880 <HAL_GPIO_Init>
}
 8006fc4:	e06d      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3d      	ldr	r2, [pc, #244]	; (80070c0 <HAL_TIM_MspPostInit+0x1a4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d11f      	bne.n	8007010 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006fda:	f043 0308 	orr.w	r3, r3, #8
 8006fde:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe0:	4b33      	ldr	r3, [pc, #204]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006fec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006ffe:	2302      	movs	r3, #2
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007002:	f107 031c 	add.w	r3, r7, #28
 8007006:	4619      	mov	r1, r3
 8007008:	482e      	ldr	r0, [pc, #184]	; (80070c4 <HAL_TIM_MspPostInit+0x1a8>)
 800700a:	f003 fc39 	bl	800a880 <HAL_GPIO_Init>
}
 800700e:	e048      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <HAL_TIM_MspPostInit+0x1ac>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d11f      	bne.n	800705a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	4a23      	ldr	r2, [pc, #140]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	6313      	str	r3, [r2, #48]	; 0x30
 800702a:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800703a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800703c:	2302      	movs	r3, #2
 800703e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007044:	2300      	movs	r3, #0
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007048:	2303      	movs	r3, #3
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800704c:	f107 031c 	add.w	r3, r7, #28
 8007050:	4619      	mov	r1, r3
 8007052:	481a      	ldr	r0, [pc, #104]	; (80070bc <HAL_TIM_MspPostInit+0x1a0>)
 8007054:	f003 fc14 	bl	800a880 <HAL_GPIO_Init>
}
 8007058:	e023      	b.n	80070a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <HAL_TIM_MspPostInit+0x1b0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d11e      	bne.n	80070a2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	4a10      	ldr	r2, [pc, #64]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 800706e:	f043 0302 	orr.w	r3, r3, #2
 8007072:	6313      	str	r3, [r2, #48]	; 0x30
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <HAL_TIM_MspPostInit+0x194>)
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007086:	2302      	movs	r3, #2
 8007088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800708e:	2300      	movs	r3, #0
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007092:	2303      	movs	r3, #3
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007096:	f107 031c 	add.w	r3, r7, #28
 800709a:	4619      	mov	r1, r3
 800709c:	4807      	ldr	r0, [pc, #28]	; (80070bc <HAL_TIM_MspPostInit+0x1a0>)
 800709e:	f003 fbef 	bl	800a880 <HAL_GPIO_Init>
}
 80070a2:	bf00      	nop
 80070a4:	3730      	adds	r7, #48	; 0x30
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40023800 	.word	0x40023800
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40000400 	.word	0x40000400
 80070bc:	40020400 	.word	0x40020400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40020c00 	.word	0x40020c00
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d8:	f107 0314 	add.w	r3, r7, #20
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a19      	ldr	r2, [pc, #100]	; (8007154 <HAL_UART_MspInit+0x84>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d12b      	bne.n	800714a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	4b18      	ldr	r3, [pc, #96]	; (8007158 <HAL_UART_MspInit+0x88>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_UART_MspInit+0x88>)
 80070fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007100:	6413      	str	r3, [r2, #64]	; 0x40
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	4b11      	ldr	r3, [pc, #68]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007118:	f043 0308 	orr.w	r3, r3, #8
 800711c:	6313      	str	r3, [r2, #48]	; 0x30
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_UART_MspInit+0x88>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800712a:	2360      	movs	r3, #96	; 0x60
 800712c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712e:	2302      	movs	r3, #2
 8007130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007136:	2303      	movs	r3, #3
 8007138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800713a:	2307      	movs	r3, #7
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	4619      	mov	r1, r3
 8007144:	4805      	ldr	r0, [pc, #20]	; (800715c <HAL_UART_MspInit+0x8c>)
 8007146:	f003 fb9b 	bl	800a880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800714a:	bf00      	nop
 800714c:	3728      	adds	r7, #40	; 0x28
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40004400 	.word	0x40004400
 8007158:	40023800 	.word	0x40023800
 800715c:	40020c00 	.word	0x40020c00

08007160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007164:	e7fe      	b.n	8007164 <NMI_Handler+0x4>

08007166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007166:	b480      	push	{r7}
 8007168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800716a:	e7fe      	b.n	800716a <HardFault_Handler+0x4>

0800716c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007170:	e7fe      	b.n	8007170 <MemManage_Handler+0x4>

08007172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007172:	b480      	push	{r7}
 8007174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007176:	e7fe      	b.n	8007176 <BusFault_Handler+0x4>

08007178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800717c:	e7fe      	b.n	800717c <UsageFault_Handler+0x4>

0800717e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800717e:	b480      	push	{r7}
 8007180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007182:	bf00      	nop
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800719a:	b480      	push	{r7}
 800719c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071ac:	f002 fa74 	bl	8009698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80071b8:	4803      	ldr	r0, [pc, #12]	; (80071c8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80071ba:	f007 fd44 	bl	800ec46 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80071be:	4803      	ldr	r0, [pc, #12]	; (80071cc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80071c0:	f007 fd41 	bl	800ec46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80071c4:	bf00      	nop
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200446b8 	.word	0x200446b8
 80071cc:	200448b4 	.word	0x200448b4

080071d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80071d4:	4802      	ldr	r0, [pc, #8]	; (80071e0 <SDIO_IRQHandler+0x10>)
 80071d6:	f005 fddd 	bl	800cd94 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20044a14 	.word	0x20044a14

080071e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80071e8:	4802      	ldr	r0, [pc, #8]	; (80071f4 <TIM6_DAC_IRQHandler+0x10>)
 80071ea:	f007 fd2c 	bl	800ec46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20044994 	.word	0x20044994

080071f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <TIM7_IRQHandler+0x10>)
 80071fe:	f007 fd22 	bl	800ec46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20044b38 	.word	0x20044b38

0800720c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007210:	4802      	ldr	r0, [pc, #8]	; (800721c <DMA2_Stream2_IRQHandler+0x10>)
 8007212:	f003 f8c1 	bl	800a398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007216:	bf00      	nop
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20044ad8 	.word	0x20044ad8

08007220 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007224:	4802      	ldr	r0, [pc, #8]	; (8007230 <DMA2_Stream3_IRQHandler+0x10>)
 8007226:	f003 f8b7 	bl	800a398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20044600 	.word	0x20044600

08007234 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007238:	4802      	ldr	r0, [pc, #8]	; (8007244 <DMA2_Stream6_IRQHandler+0x10>)
 800723a:	f003 f8ad 	bl	800a398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20044934 	.word	0x20044934

08007248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007250:	4a14      	ldr	r2, [pc, #80]	; (80072a4 <_sbrk+0x5c>)
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <_sbrk+0x60>)
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <_sbrk+0x64>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007264:	4b11      	ldr	r3, [pc, #68]	; (80072ac <_sbrk+0x64>)
 8007266:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <_sbrk+0x68>)
 8007268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800726a:	4b10      	ldr	r3, [pc, #64]	; (80072ac <_sbrk+0x64>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d207      	bcs.n	8007288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007278:	f00d ff78 	bl	801516c <__errno>
 800727c:	4602      	mov	r2, r0
 800727e:	230c      	movs	r3, #12
 8007280:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	e009      	b.n	800729c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <_sbrk+0x64>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <_sbrk+0x64>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	4a05      	ldr	r2, [pc, #20]	; (80072ac <_sbrk+0x64>)
 8007298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20050000 	.word	0x20050000
 80072a8:	00000800 	.word	0x00000800
 80072ac:	200002a4 	.word	0x200002a4
 80072b0:	20046c88 	.word	0x20046c88

080072b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <SystemInit+0x28>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <SystemInit+0x28>)
 80072c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <SystemInit+0x28>)
 80072ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072ce:	609a      	str	r2, [r3, #8]
#endif
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000ed00 	.word	0xe000ed00

080072e0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80072e0:	b598      	push	{r3, r4, r7, lr}
 80072e2:	af00      	add	r7, sp, #0
	lcd_init();
 80072e4:	f7f9 fe98 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80072e8:	483b      	ldr	r0, [pc, #236]	; (80073d8 <cppInit+0xf8>)
 80072ea:	f7fd fccf 	bl	8004c8c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80072ee:	2064      	movs	r0, #100	; 0x64
 80072f0:	f002 f9f2 	bl	80096d8 <HAL_Delay>
	power_sensor.updateValues();
 80072f4:	4838      	ldr	r0, [pc, #224]	; (80073d8 <cppInit+0xf8>)
 80072f6:	f7fd fcd7 	bl	8004ca8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80072fa:	f7f9 fed1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80072fe:	2100      	movs	r1, #0
 8007300:	2000      	movs	r0, #0
 8007302:	f7f9 fedd 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007306:	4835      	ldr	r0, [pc, #212]	; (80073dc <cppInit+0xfc>)
 8007308:	f7f9 ff04 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800730c:	2101      	movs	r1, #1
 800730e:	2000      	movs	r0, #0
 8007310:	f7f9 fed6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007314:	4830      	ldr	r0, [pc, #192]	; (80073d8 <cppInit+0xf8>)
 8007316:	f7fd fcf1 	bl	8004cfc <_ZN11PowerSensor17getButteryVoltageEv>
 800731a:	ee10 3a10 	vmov	r3, s0
 800731e:	4618      	mov	r0, r3
 8007320:	f7f9 f92a 	bl	8000578 <__aeabi_f2d>
 8007324:	4603      	mov	r3, r0
 8007326:	460c      	mov	r4, r1
 8007328:	461a      	mov	r2, r3
 800732a:	4623      	mov	r3, r4
 800732c:	482c      	ldr	r0, [pc, #176]	; (80073e0 <cppInit+0x100>)
 800732e:	f7f9 fef1 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007336:	f002 f9cf 	bl	80096d8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800733a:	482a      	ldr	r0, [pc, #168]	; (80073e4 <cppInit+0x104>)
 800733c:	f7fc ff5e 	bl	80041fc <_ZN6Logger10sdCardInitEv>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <cppInit+0x76>
		led.fullColor('G');
 8007346:	2147      	movs	r1, #71	; 0x47
 8007348:	4827      	ldr	r0, [pc, #156]	; (80073e8 <cppInit+0x108>)
 800734a:	f7fa ff63 	bl	8002214 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800734e:	2064      	movs	r0, #100	; 0x64
 8007350:	f002 f9c2 	bl	80096d8 <HAL_Delay>
 8007354:	e006      	b.n	8007364 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007356:	2152      	movs	r1, #82	; 0x52
 8007358:	4823      	ldr	r0, [pc, #140]	; (80073e8 <cppInit+0x108>)
 800735a:	f7fa ff5b 	bl	8002214 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800735e:	2064      	movs	r0, #100	; 0x64
 8007360:	f002 f9ba 	bl	80096d8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007364:	4821      	ldr	r0, [pc, #132]	; (80073ec <cppInit+0x10c>)
 8007366:	f7fb f8b1 	bl	80024cc <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800736a:	4821      	ldr	r0, [pc, #132]	; (80073f0 <cppInit+0x110>)
 800736c:	f7fd f956 	bl	800461c <_ZN5Motor4initEv>
	encoder.init();
 8007370:	4820      	ldr	r0, [pc, #128]	; (80073f4 <cppInit+0x114>)
 8007372:	f7fa f857 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007376:	4820      	ldr	r0, [pc, #128]	; (80073f8 <cppInit+0x118>)
 8007378:	f7fa fcfc 	bl	8001d74 <_ZN3IMU4initEv>
	line_trace.init();
 800737c:	481f      	ldr	r0, [pc, #124]	; (80073fc <cppInit+0x11c>)
 800737e:	f7fc f8f3 	bl	8003568 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007382:	481a      	ldr	r0, [pc, #104]	; (80073ec <cppInit+0x10c>)
 8007384:	f7fb fa02 	bl	800278c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800738c:	f002 f9a4 	bl	80096d8 <HAL_Delay>

	led.fullColor('M');
 8007390:	214d      	movs	r1, #77	; 0x4d
 8007392:	4815      	ldr	r0, [pc, #84]	; (80073e8 <cppInit+0x108>)
 8007394:	f7fa ff3e 	bl	8002214 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007398:	4817      	ldr	r0, [pc, #92]	; (80073f8 <cppInit+0x118>)
 800739a:	f7fa fdc3 	bl	8001f24 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 800739e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007400 <cppInit+0x120>
 80073a2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007404 <cppInit+0x124>
 80073a6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007408 <cppInit+0x128>
 80073aa:	4818      	ldr	r0, [pc, #96]	; (800740c <cppInit+0x12c>)
 80073ac:	f7fe f9dc 	bl	8005768 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80073b0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007410 <cppInit+0x130>
 80073b4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007414 <cppInit+0x134>
 80073b8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007418 <cppInit+0x138>
 80073bc:	4813      	ldr	r0, [pc, #76]	; (800740c <cppInit+0x12c>)
 80073be:	f7fe f9ec 	bl	800579a <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 80073c2:	4816      	ldr	r0, [pc, #88]	; (800741c <cppInit+0x13c>)
 80073c4:	f7fd fb6b 	bl	8004a9e <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80073c8:	4815      	ldr	r0, [pc, #84]	; (8007420 <cppInit+0x140>)
 80073ca:	f7fd fc03 	bl	8004bd4 <_ZN13PathFollowing4initEv>

	esc.init();
 80073ce:	4815      	ldr	r0, [pc, #84]	; (8007424 <cppInit+0x144>)
 80073d0:	f7f9 ff0c 	bl	80011ec <_ZN3ESC4initEv>

}
 80073d4:	bf00      	nop
 80073d6:	bd98      	pop	{r3, r4, r7, pc}
 80073d8:	200005bc 	.word	0x200005bc
 80073dc:	080197a4 	.word	0x080197a4
 80073e0:	080197ac 	.word	0x080197ac
 80073e4:	200005dc 	.word	0x200005dc
 80073e8:	200005b8 	.word	0x200005b8
 80073ec:	200002a8 	.word	0x200002a8
 80073f0:	200005b4 	.word	0x200005b4
 80073f4:	2001daa8 	.word	0x2001daa8
 80073f8:	200005c8 	.word	0x200005c8
 80073fc:	2001db4c 	.word	0x2001db4c
 8007400:	3a8439b6 	.word	0x3a8439b6
 8007404:	40d1a29c 	.word	0x40d1a29c
 8007408:	3f81f8a1 	.word	0x3f81f8a1
 800740c:	2001dac8 	.word	0x2001dac8
 8007410:	00000000 	.word	0x00000000
 8007414:	3f5e3fbc 	.word	0x3f5e3fbc
 8007418:	3d75c28f 	.word	0x3d75c28f
 800741c:	2001db08 	.word	0x2001db08
 8007420:	2002ab00 	.word	0x2002ab00
 8007424:	2001db48 	.word	0x2001db48

08007428 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800742c:	480e      	ldr	r0, [pc, #56]	; (8007468 <cppFlip1ms+0x40>)
 800742e:	f7fb f8ab 	bl	8002588 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007432:	480e      	ldr	r0, [pc, #56]	; (800746c <cppFlip1ms+0x44>)
 8007434:	f7fa fcc4 	bl	8001dc0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007438:	480d      	ldr	r0, [pc, #52]	; (8007470 <cppFlip1ms+0x48>)
 800743a:	f7fa f815 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800743e:	480d      	ldr	r0, [pc, #52]	; (8007474 <cppFlip1ms+0x4c>)
 8007440:	f7fc fb38 	bl	8003ab4 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007444:	480c      	ldr	r0, [pc, #48]	; (8007478 <cppFlip1ms+0x50>)
 8007446:	f7fe f9c1 	bl	80057cc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800744a:	480c      	ldr	r0, [pc, #48]	; (800747c <cppFlip1ms+0x54>)
 800744c:	f7fd fb1c 	bl	8004a88 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007450:	480b      	ldr	r0, [pc, #44]	; (8007480 <cppFlip1ms+0x58>)
 8007452:	f7fd fccf 	bl	8004df4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007456:	480b      	ldr	r0, [pc, #44]	; (8007484 <cppFlip1ms+0x5c>)
 8007458:	f7fd f8f2 	bl	8004640 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 800745c:	4804      	ldr	r0, [pc, #16]	; (8007470 <cppFlip1ms+0x48>)
 800745e:	f7fa f8ed 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007462:	bf00      	nop
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	200002a8 	.word	0x200002a8
 800746c:	200005c8 	.word	0x200005c8
 8007470:	2001daa8 	.word	0x2001daa8
 8007474:	2001db4c 	.word	0x2001db4c
 8007478:	2001dac8 	.word	0x2001dac8
 800747c:	2001db08 	.word	0x2001db08
 8007480:	200005a0 	.word	0x200005a0
 8007484:	200005b4 	.word	0x200005b4

08007488 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800748c:	4802      	ldr	r0, [pc, #8]	; (8007498 <cppFlip100ns+0x10>)
 800748e:	f7fb f82d 	bl	80024ec <_ZN10LineSensor17storeSensorValuesEv>
}
 8007492:	bf00      	nop
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200002a8 	.word	0x200002a8

0800749c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <cppFlip10ms+0x48>)
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <cppFlip10ms+0x48>)
 80074aa:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 80074ac:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <cppFlip10ms+0x48>)
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d905      	bls.n	80074c0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80074b4:	480c      	ldr	r0, [pc, #48]	; (80074e8 <cppFlip10ms+0x4c>)
 80074b6:	f7fd ffa9 	bl	800540c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <cppFlip10ms+0x48>)
 80074bc:	2200      	movs	r2, #0
 80074be:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 80074c0:	480a      	ldr	r0, [pc, #40]	; (80074ec <cppFlip10ms+0x50>)
 80074c2:	f7fd f97f 	bl	80047c4 <_ZN5Motor20getLeftCounterPeriodEv>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4619      	mov	r1, r3
 80074ca:	4809      	ldr	r0, [pc, #36]	; (80074f0 <cppFlip10ms+0x54>)
 80074cc:	f7fc fede 	bl	800428c <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 80074d0:	4806      	ldr	r0, [pc, #24]	; (80074ec <cppFlip10ms+0x50>)
 80074d2:	f7fd f984 	bl	80047de <_ZN5Motor21getRightCounterPeriodEv>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4619      	mov	r1, r3
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <cppFlip10ms+0x54>)
 80074dc:	f7fc ff0f 	bl	80042fe <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20042228 	.word	0x20042228
 80074e8:	2002a8f4 	.word	0x2002a8f4
 80074ec:	200005b4 	.word	0x200005b4
 80074f0:	200005dc 	.word	0x200005dc
 80074f4:	00000000 	.word	0x00000000

080074f8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80074fe:	4baf      	ldr	r3, [pc, #700]	; (80077bc <cppLoop+0x2c4>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	f3bf 8f5b 	dmb	ish
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d015      	beq.n	8007546 <cppLoop+0x4e>
 800751a:	48a8      	ldr	r0, [pc, #672]	; (80077bc <cppLoop+0x2c4>)
 800751c:	f00c fdc1 	bl	80140a2 <__cxa_guard_acquire>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <cppLoop+0x4e>
 8007530:	48a3      	ldr	r0, [pc, #652]	; (80077c0 <cppLoop+0x2c8>)
 8007532:	f7fc f920 	bl	8003776 <_ZN9LineTrace5getKpEv>
 8007536:	eef0 7a40 	vmov.f32	s15, s0
 800753a:	4ba2      	ldr	r3, [pc, #648]	; (80077c4 <cppLoop+0x2cc>)
 800753c:	edc3 7a00 	vstr	s15, [r3]
 8007540:	489e      	ldr	r0, [pc, #632]	; (80077bc <cppLoop+0x2c4>)
 8007542:	f00c fdba 	bl	80140ba <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007546:	4ba0      	ldr	r3, [pc, #640]	; (80077c8 <cppLoop+0x2d0>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f3bf 8f5b 	dmb	ish
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d015      	beq.n	800758e <cppLoop+0x96>
 8007562:	4899      	ldr	r0, [pc, #612]	; (80077c8 <cppLoop+0x2d0>)
 8007564:	f00c fd9d 	bl	80140a2 <__cxa_guard_acquire>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <cppLoop+0x96>
 8007578:	4891      	ldr	r0, [pc, #580]	; (80077c0 <cppLoop+0x2c8>)
 800757a:	f7fc f90b 	bl	8003794 <_ZN9LineTrace5getKiEv>
 800757e:	eef0 7a40 	vmov.f32	s15, s0
 8007582:	4b92      	ldr	r3, [pc, #584]	; (80077cc <cppLoop+0x2d4>)
 8007584:	edc3 7a00 	vstr	s15, [r3]
 8007588:	488f      	ldr	r0, [pc, #572]	; (80077c8 <cppLoop+0x2d0>)
 800758a:	f00c fd96 	bl	80140ba <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800758e:	4b90      	ldr	r3, [pc, #576]	; (80077d0 <cppLoop+0x2d8>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f3bf 8f5b 	dmb	ish
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	bf0c      	ite	eq
 80075a0:	2301      	moveq	r3, #1
 80075a2:	2300      	movne	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d015      	beq.n	80075d6 <cppLoop+0xde>
 80075aa:	4889      	ldr	r0, [pc, #548]	; (80077d0 <cppLoop+0x2d8>)
 80075ac:	f00c fd79 	bl	80140a2 <__cxa_guard_acquire>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <cppLoop+0xde>
 80075c0:	487f      	ldr	r0, [pc, #508]	; (80077c0 <cppLoop+0x2c8>)
 80075c2:	f7fc f8f6 	bl	80037b2 <_ZN9LineTrace5getKdEv>
 80075c6:	eef0 7a40 	vmov.f32	s15, s0
 80075ca:	4b82      	ldr	r3, [pc, #520]	; (80077d4 <cppLoop+0x2dc>)
 80075cc:	edc3 7a00 	vstr	s15, [r3]
 80075d0:	487f      	ldr	r0, [pc, #508]	; (80077d0 <cppLoop+0x2d8>)
 80075d2:	f00c fd72 	bl	80140ba <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 80075d6:	4b80      	ldr	r3, [pc, #512]	; (80077d8 <cppLoop+0x2e0>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f3bf 8f5b 	dmb	ish
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d015      	beq.n	800761e <cppLoop+0x126>
 80075f2:	4879      	ldr	r0, [pc, #484]	; (80077d8 <cppLoop+0x2e0>)
 80075f4:	f00c fd55 	bl	80140a2 <__cxa_guard_acquire>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <cppLoop+0x126>
 8007608:	486d      	ldr	r0, [pc, #436]	; (80077c0 <cppLoop+0x2c8>)
 800760a:	f7fc f8fa 	bl	8003802 <_ZN9LineTrace9getKpSlowEv>
 800760e:	eef0 7a40 	vmov.f32	s15, s0
 8007612:	4b72      	ldr	r3, [pc, #456]	; (80077dc <cppLoop+0x2e4>)
 8007614:	edc3 7a00 	vstr	s15, [r3]
 8007618:	486f      	ldr	r0, [pc, #444]	; (80077d8 <cppLoop+0x2e0>)
 800761a:	f00c fd4e 	bl	80140ba <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 800761e:	4b70      	ldr	r3, [pc, #448]	; (80077e0 <cppLoop+0x2e8>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	f3bf 8f5b 	dmb	ish
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	bf0c      	ite	eq
 8007630:	2301      	moveq	r3, #1
 8007632:	2300      	movne	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d015      	beq.n	8007666 <cppLoop+0x16e>
 800763a:	4869      	ldr	r0, [pc, #420]	; (80077e0 <cppLoop+0x2e8>)
 800763c:	f00c fd31 	bl	80140a2 <__cxa_guard_acquire>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <cppLoop+0x16e>
 8007650:	485b      	ldr	r0, [pc, #364]	; (80077c0 <cppLoop+0x2c8>)
 8007652:	f7fc f8e5 	bl	8003820 <_ZN9LineTrace9getKiSlowEv>
 8007656:	eef0 7a40 	vmov.f32	s15, s0
 800765a:	4b62      	ldr	r3, [pc, #392]	; (80077e4 <cppLoop+0x2ec>)
 800765c:	edc3 7a00 	vstr	s15, [r3]
 8007660:	485f      	ldr	r0, [pc, #380]	; (80077e0 <cppLoop+0x2e8>)
 8007662:	f00c fd2a 	bl	80140ba <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007666:	4b60      	ldr	r3, [pc, #384]	; (80077e8 <cppLoop+0x2f0>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f3bf 8f5b 	dmb	ish
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d015      	beq.n	80076ae <cppLoop+0x1b6>
 8007682:	4859      	ldr	r0, [pc, #356]	; (80077e8 <cppLoop+0x2f0>)
 8007684:	f00c fd0d 	bl	80140a2 <__cxa_guard_acquire>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <cppLoop+0x1b6>
 8007698:	4849      	ldr	r0, [pc, #292]	; (80077c0 <cppLoop+0x2c8>)
 800769a:	f7fc f8d0 	bl	800383e <_ZN9LineTrace9getKdSlowEv>
 800769e:	eef0 7a40 	vmov.f32	s15, s0
 80076a2:	4b52      	ldr	r3, [pc, #328]	; (80077ec <cppLoop+0x2f4>)
 80076a4:	edc3 7a00 	vstr	s15, [r3]
 80076a8:	484f      	ldr	r0, [pc, #316]	; (80077e8 <cppLoop+0x2f0>)
 80076aa:	f00c fd06 	bl	80140ba <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80076ae:	4b50      	ldr	r3, [pc, #320]	; (80077f0 <cppLoop+0x2f8>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f3bf 8f5b 	dmb	ish
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d015      	beq.n	80076f6 <cppLoop+0x1fe>
 80076ca:	4849      	ldr	r0, [pc, #292]	; (80077f0 <cppLoop+0x2f8>)
 80076cc:	f00c fce9 	bl	80140a2 <__cxa_guard_acquire>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bf14      	ite	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	2300      	moveq	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <cppLoop+0x1fe>
 80076e0:	4837      	ldr	r0, [pc, #220]	; (80077c0 <cppLoop+0x2c8>)
 80076e2:	f7fc f91a 	bl	800391a <_ZN9LineTrace17getTargetVelocityEv>
 80076e6:	eef0 7a40 	vmov.f32	s15, s0
 80076ea:	4b42      	ldr	r3, [pc, #264]	; (80077f4 <cppLoop+0x2fc>)
 80076ec:	edc3 7a00 	vstr	s15, [r3]
 80076f0:	483f      	ldr	r0, [pc, #252]	; (80077f0 <cppLoop+0x2f8>)
 80076f2:	f00c fce2 	bl	80140ba <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80076f6:	4b40      	ldr	r3, [pc, #256]	; (80077f8 <cppLoop+0x300>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f3bf 8f5b 	dmb	ish
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d015      	beq.n	800773e <cppLoop+0x246>
 8007712:	4839      	ldr	r0, [pc, #228]	; (80077f8 <cppLoop+0x300>)
 8007714:	f00c fcc5 	bl	80140a2 <__cxa_guard_acquire>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <cppLoop+0x246>
 8007728:	4825      	ldr	r0, [pc, #148]	; (80077c0 <cppLoop+0x2c8>)
 800772a:	f7fc f906 	bl	800393a <_ZN9LineTrace14getMaxVelocityEv>
 800772e:	eef0 7a40 	vmov.f32	s15, s0
 8007732:	4b32      	ldr	r3, [pc, #200]	; (80077fc <cppLoop+0x304>)
 8007734:	edc3 7a00 	vstr	s15, [r3]
 8007738:	482f      	ldr	r0, [pc, #188]	; (80077f8 <cppLoop+0x300>)
 800773a:	f00c fcbe 	bl	80140ba <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800773e:	4b30      	ldr	r3, [pc, #192]	; (8007800 <cppLoop+0x308>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	f3bf 8f5b 	dmb	ish
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d015      	beq.n	8007786 <cppLoop+0x28e>
 800775a:	4829      	ldr	r0, [pc, #164]	; (8007800 <cppLoop+0x308>)
 800775c:	f00c fca1 	bl	80140a2 <__cxa_guard_acquire>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <cppLoop+0x28e>
 8007770:	4813      	ldr	r0, [pc, #76]	; (80077c0 <cppLoop+0x2c8>)
 8007772:	f7fc f8f2 	bl	800395a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007776:	eef0 7a40 	vmov.f32	s15, s0
 800777a:	4b22      	ldr	r3, [pc, #136]	; (8007804 <cppLoop+0x30c>)
 800777c:	edc3 7a00 	vstr	s15, [r3]
 8007780:	481f      	ldr	r0, [pc, #124]	; (8007800 <cppLoop+0x308>)
 8007782:	f00c fc9a 	bl	80140ba <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007786:	4b20      	ldr	r3, [pc, #128]	; (8007808 <cppLoop+0x310>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f3bf 8f5b 	dmb	ish
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d03f      	beq.n	8007822 <cppLoop+0x32a>
 80077a2:	4819      	ldr	r0, [pc, #100]	; (8007808 <cppLoop+0x310>)
 80077a4:	f00c fc7d 	bl	80140a2 <__cxa_guard_acquire>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d034      	beq.n	8007822 <cppLoop+0x32a>
 80077b8:	e028      	b.n	800780c <cppLoop+0x314>
 80077ba:	bf00      	nop
 80077bc:	20042238 	.word	0x20042238
 80077c0:	2001db4c 	.word	0x2001db4c
 80077c4:	20042234 	.word	0x20042234
 80077c8:	20042240 	.word	0x20042240
 80077cc:	2004223c 	.word	0x2004223c
 80077d0:	20042248 	.word	0x20042248
 80077d4:	20042244 	.word	0x20042244
 80077d8:	20042250 	.word	0x20042250
 80077dc:	2004224c 	.word	0x2004224c
 80077e0:	20042258 	.word	0x20042258
 80077e4:	20042254 	.word	0x20042254
 80077e8:	20042260 	.word	0x20042260
 80077ec:	2004225c 	.word	0x2004225c
 80077f0:	20042268 	.word	0x20042268
 80077f4:	20042264 	.word	0x20042264
 80077f8:	20042270 	.word	0x20042270
 80077fc:	2004226c 	.word	0x2004226c
 8007800:	20042278 	.word	0x20042278
 8007804:	20042274 	.word	0x20042274
 8007808:	20042280 	.word	0x20042280
 800780c:	48af      	ldr	r0, [pc, #700]	; (8007acc <cppLoop+0x5d4>)
 800780e:	f7fc f8b4 	bl	800397a <_ZN9LineTrace14getMinVelocityEv>
 8007812:	eef0 7a40 	vmov.f32	s15, s0
 8007816:	4bae      	ldr	r3, [pc, #696]	; (8007ad0 <cppLoop+0x5d8>)
 8007818:	edc3 7a00 	vstr	s15, [r3]
 800781c:	48ad      	ldr	r0, [pc, #692]	; (8007ad4 <cppLoop+0x5dc>)
 800781e:	f00c fc4c 	bl	80140ba <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007822:	4bad      	ldr	r3, [pc, #692]	; (8007ad8 <cppLoop+0x5e0>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f3bf 8f5b 	dmb	ish
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d015      	beq.n	800786a <cppLoop+0x372>
 800783e:	48a6      	ldr	r0, [pc, #664]	; (8007ad8 <cppLoop+0x5e0>)
 8007840:	f00c fc2f 	bl	80140a2 <__cxa_guard_acquire>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <cppLoop+0x372>
 8007854:	489d      	ldr	r0, [pc, #628]	; (8007acc <cppLoop+0x5d4>)
 8007856:	f7fc f8a0 	bl	800399a <_ZN9LineTrace15getMinVelocity2Ev>
 800785a:	eef0 7a40 	vmov.f32	s15, s0
 800785e:	4b9f      	ldr	r3, [pc, #636]	; (8007adc <cppLoop+0x5e4>)
 8007860:	edc3 7a00 	vstr	s15, [r3]
 8007864:	489c      	ldr	r0, [pc, #624]	; (8007ad8 <cppLoop+0x5e0>)
 8007866:	f00c fc28 	bl	80140ba <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800786a:	4b9d      	ldr	r3, [pc, #628]	; (8007ae0 <cppLoop+0x5e8>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f3bf 8f5b 	dmb	ish
 8007872:	b2db      	uxtb	r3, r3
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	bf0c      	ite	eq
 800787c:	2301      	moveq	r3, #1
 800787e:	2300      	movne	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d015      	beq.n	80078b2 <cppLoop+0x3ba>
 8007886:	4896      	ldr	r0, [pc, #600]	; (8007ae0 <cppLoop+0x5e8>)
 8007888:	f00c fc0b 	bl	80140a2 <__cxa_guard_acquire>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <cppLoop+0x3ba>
 800789c:	488b      	ldr	r0, [pc, #556]	; (8007acc <cppLoop+0x5d4>)
 800789e:	f7fc f8c0 	bl	8003a22 <_ZN9LineTrace9getMaxAccEv>
 80078a2:	eef0 7a40 	vmov.f32	s15, s0
 80078a6:	4b8f      	ldr	r3, [pc, #572]	; (8007ae4 <cppLoop+0x5ec>)
 80078a8:	edc3 7a00 	vstr	s15, [r3]
 80078ac:	488c      	ldr	r0, [pc, #560]	; (8007ae0 <cppLoop+0x5e8>)
 80078ae:	f00c fc04 	bl	80140ba <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80078b2:	4b8d      	ldr	r3, [pc, #564]	; (8007ae8 <cppLoop+0x5f0>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f3bf 8f5b 	dmb	ish
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d015      	beq.n	80078fa <cppLoop+0x402>
 80078ce:	4886      	ldr	r0, [pc, #536]	; (8007ae8 <cppLoop+0x5f0>)
 80078d0:	f00c fbe7 	bl	80140a2 <__cxa_guard_acquire>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bf14      	ite	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	2300      	moveq	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <cppLoop+0x402>
 80078e4:	4879      	ldr	r0, [pc, #484]	; (8007acc <cppLoop+0x5d4>)
 80078e6:	f7fc f8d2 	bl	8003a8e <_ZN9LineTrace9getMaxDecEv>
 80078ea:	eef0 7a40 	vmov.f32	s15, s0
 80078ee:	4b7f      	ldr	r3, [pc, #508]	; (8007aec <cppLoop+0x5f4>)
 80078f0:	edc3 7a00 	vstr	s15, [r3]
 80078f4:	487c      	ldr	r0, [pc, #496]	; (8007ae8 <cppLoop+0x5f0>)
 80078f6:	f00c fbe0 	bl	80140ba <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 80078fa:	4b7d      	ldr	r3, [pc, #500]	; (8007af0 <cppLoop+0x5f8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f3bf 8f5b 	dmb	ish
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	bf0c      	ite	eq
 800790c:	2301      	moveq	r3, #1
 800790e:	2300      	movne	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d015      	beq.n	8007942 <cppLoop+0x44a>
 8007916:	4876      	ldr	r0, [pc, #472]	; (8007af0 <cppLoop+0x5f8>)
 8007918:	f00c fbc3 	bl	80140a2 <__cxa_guard_acquire>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	bf14      	ite	ne
 8007922:	2301      	movne	r3, #1
 8007924:	2300      	moveq	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <cppLoop+0x44a>
 800792c:	4867      	ldr	r0, [pc, #412]	; (8007acc <cppLoop+0x5d4>)
 800792e:	f7fc f89c 	bl	8003a6a <_ZN9LineTrace10getMaxAcc2Ev>
 8007932:	eef0 7a40 	vmov.f32	s15, s0
 8007936:	4b6f      	ldr	r3, [pc, #444]	; (8007af4 <cppLoop+0x5fc>)
 8007938:	edc3 7a00 	vstr	s15, [r3]
 800793c:	486c      	ldr	r0, [pc, #432]	; (8007af0 <cppLoop+0x5f8>)
 800793e:	f00c fbbc 	bl	80140ba <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007942:	4b6d      	ldr	r3, [pc, #436]	; (8007af8 <cppLoop+0x600>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	f3bf 8f5b 	dmb	ish
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	bf0c      	ite	eq
 8007954:	2301      	moveq	r3, #1
 8007956:	2300      	movne	r3, #0
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d015      	beq.n	800798a <cppLoop+0x492>
 800795e:	4866      	ldr	r0, [pc, #408]	; (8007af8 <cppLoop+0x600>)
 8007960:	f00c fb9f 	bl	80140a2 <__cxa_guard_acquire>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	bf14      	ite	ne
 800796a:	2301      	movne	r3, #1
 800796c:	2300      	moveq	r3, #0
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <cppLoop+0x492>
 8007974:	4855      	ldr	r0, [pc, #340]	; (8007acc <cppLoop+0x5d4>)
 8007976:	f7fc f866 	bl	8003a46 <_ZN9LineTrace10getMaxDec2Ev>
 800797a:	eef0 7a40 	vmov.f32	s15, s0
 800797e:	4b5f      	ldr	r3, [pc, #380]	; (8007afc <cppLoop+0x604>)
 8007980:	edc3 7a00 	vstr	s15, [r3]
 8007984:	485c      	ldr	r0, [pc, #368]	; (8007af8 <cppLoop+0x600>)
 8007986:	f00c fb98 	bl	80140ba <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800798a:	485d      	ldr	r0, [pc, #372]	; (8007b00 <cppLoop+0x608>)
 800798c:	f7fd f9c6 	bl	8004d1c <_ZN12RotarySwitch8getValueEv>
 8007990:	4603      	mov	r3, r0
 8007992:	2b0f      	cmp	r3, #15
 8007994:	f201 8556 	bhi.w	8009444 <cppLoop+0x1f4c>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <cppLoop+0x4a8>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079e1 	.word	0x080079e1
 80079a4:	08007d49 	.word	0x08007d49
 80079a8:	08007e69 	.word	0x08007e69
 80079ac:	08007fbb 	.word	0x08007fbb
 80079b0:	080080b3 	.word	0x080080b3
 80079b4:	08008349 	.word	0x08008349
 80079b8:	08008481 	.word	0x08008481
 80079bc:	08008705 	.word	0x08008705
 80079c0:	0800894f 	.word	0x0800894f
 80079c4:	08008bdf 	.word	0x08008bdf
 80079c8:	08008c9b 	.word	0x08008c9b
 80079cc:	08008d91 	.word	0x08008d91
 80079d0:	08008e17 	.word	0x08008e17
 80079d4:	08008edd 	.word	0x08008edd
 80079d8:	08008fc1 	.word	0x08008fc1
 80079dc:	080090f9 	.word	0x080090f9
	case 0:
		led.fullColor('W');
 80079e0:	2157      	movs	r1, #87	; 0x57
 80079e2:	4848      	ldr	r0, [pc, #288]	; (8007b04 <cppLoop+0x60c>)
 80079e4:	f7fa fc16 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 80079e8:	f7f9 fb5a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80079ec:	2100      	movs	r1, #0
 80079ee:	2000      	movs	r0, #0
 80079f0:	f7f9 fb66 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", line_trace.getKpSlow()*1000);
 80079f4:	4835      	ldr	r0, [pc, #212]	; (8007acc <cppLoop+0x5d4>)
 80079f6:	f7fb ff04 	bl	8003802 <_ZN9LineTrace9getKpSlowEv>
 80079fa:	eeb0 7a40 	vmov.f32	s14, s0
 80079fe:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007b08 <cppLoop+0x610>
 8007a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a06:	ee17 0a90 	vmov	r0, s15
 8007a0a:	f7f8 fdb5 	bl	8000578 <__aeabi_f2d>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	460c      	mov	r4, r1
 8007a12:	461a      	mov	r2, r3
 8007a14:	4623      	mov	r3, r4
 8007a16:	483d      	ldr	r0, [pc, #244]	; (8007b0c <cppLoop+0x614>)
 8007a18:	f7f9 fb7c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	2000      	movs	r0, #0
 8007a20:	f7f9 fb4e 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiSlow()*100, line_trace.getKdSlow()*10000);
 8007a24:	4829      	ldr	r0, [pc, #164]	; (8007acc <cppLoop+0x5d4>)
 8007a26:	f7fb fefb 	bl	8003820 <_ZN9LineTrace9getKiSlowEv>
 8007a2a:	eeb0 7a40 	vmov.f32	s14, s0
 8007a2e:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007b10 <cppLoop+0x618>
 8007a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a36:	ee17 0a90 	vmov	r0, s15
 8007a3a:	f7f8 fd9d 	bl	8000578 <__aeabi_f2d>
 8007a3e:	4605      	mov	r5, r0
 8007a40:	460e      	mov	r6, r1
 8007a42:	4822      	ldr	r0, [pc, #136]	; (8007acc <cppLoop+0x5d4>)
 8007a44:	f7fb fefb 	bl	800383e <_ZN9LineTrace9getKdSlowEv>
 8007a48:	eeb0 7a40 	vmov.f32	s14, s0
 8007a4c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007b14 <cppLoop+0x61c>
 8007a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a54:	ee17 0a90 	vmov	r0, s15
 8007a58:	f7f8 fd8e 	bl	8000578 <__aeabi_f2d>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	e9cd 3400 	strd	r3, r4, [sp]
 8007a64:	462a      	mov	r2, r5
 8007a66:	4633      	mov	r3, r6
 8007a68:	482b      	ldr	r0, [pc, #172]	; (8007b18 <cppLoop+0x620>)
 8007a6a:	f7f9 fb53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007a6e:	482b      	ldr	r0, [pc, #172]	; (8007b1c <cppLoop+0x624>)
 8007a70:	f7fa fb6c 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d04f      	beq.n	8007b24 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007a84:	2201      	movs	r2, #1
 8007a86:	f04f 31ff 	mov.w	r1, #4294967295
 8007a8a:	481e      	ldr	r0, [pc, #120]	; (8007b04 <cppLoop+0x60c>)
 8007a8c:	f7fa fc7e 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007a90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a94:	f001 fe20 	bl	80096d8 <HAL_Delay>

			selector++;
 8007a98:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <cppLoop+0x628>)
 8007a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	b21a      	sxth	r2, r3
 8007aa6:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <cppLoop+0x628>)
 8007aa8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007aaa:	4b1d      	ldr	r3, [pc, #116]	; (8007b20 <cppLoop+0x628>)
 8007aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	dd02      	ble.n	8007aba <cppLoop+0x5c2>
 8007ab4:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <cppLoop+0x628>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007aba:	2200      	movs	r2, #0
 8007abc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac0:	4810      	ldr	r0, [pc, #64]	; (8007b04 <cppLoop+0x60c>)
 8007ac2:	f7fa fc63 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8007ac6:	f001 bcbf 	b.w	8009448 <cppLoop+0x1f50>
 8007aca:	bf00      	nop
 8007acc:	2001db4c 	.word	0x2001db4c
 8007ad0:	2004227c 	.word	0x2004227c
 8007ad4:	20042280 	.word	0x20042280
 8007ad8:	20042288 	.word	0x20042288
 8007adc:	20042284 	.word	0x20042284
 8007ae0:	20042290 	.word	0x20042290
 8007ae4:	2004228c 	.word	0x2004228c
 8007ae8:	20042298 	.word	0x20042298
 8007aec:	20042294 	.word	0x20042294
 8007af0:	200422a0 	.word	0x200422a0
 8007af4:	2004229c 	.word	0x2004229c
 8007af8:	200422a8 	.word	0x200422a8
 8007afc:	200422a4 	.word	0x200422a4
 8007b00:	200005b0 	.word	0x200005b0
 8007b04:	200005b8 	.word	0x200005b8
 8007b08:	447a0000 	.word	0x447a0000
 8007b0c:	080197b0 	.word	0x080197b0
 8007b10:	42c80000 	.word	0x42c80000
 8007b14:	461c4000 	.word	0x461c4000
 8007b18:	080197bc 	.word	0x080197bc
 8007b1c:	200005ac 	.word	0x200005ac
 8007b20:	2004222a 	.word	0x2004222a
		else if(joy_stick.getValue() == JOY_R){
 8007b24:	48be      	ldr	r0, [pc, #760]	; (8007e20 <cppLoop+0x928>)
 8007b26:	f7fa fb11 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	bf0c      	ite	eq
 8007b30:	2301      	moveq	r3, #1
 8007b32:	2300      	movne	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d059      	beq.n	8007bee <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b40:	48b8      	ldr	r0, [pc, #736]	; (8007e24 <cppLoop+0x92c>)
 8007b42:	f7fa fc23 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b46:	2064      	movs	r0, #100	; 0x64
 8007b48:	f001 fdc6 	bl	80096d8 <HAL_Delay>
			if(selector == 0){
 8007b4c:	4bb6      	ldr	r3, [pc, #728]	; (8007e28 <cppLoop+0x930>)
 8007b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d113      	bne.n	8007b7e <cppLoop+0x686>
				adj_kp_slow = adj_kp_slow + 0.00001;
 8007b56:	4bb5      	ldr	r3, [pc, #724]	; (8007e2c <cppLoop+0x934>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f8 fd0c 	bl	8000578 <__aeabi_f2d>
 8007b60:	a3a9      	add	r3, pc, #676	; (adr r3, 8007e08 <cppLoop+0x910>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fba9 	bl	80002bc <__adddf3>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	4621      	mov	r1, r4
 8007b72:	f7f9 f851 	bl	8000c18 <__aeabi_d2f>
 8007b76:	4602      	mov	r2, r0
 8007b78:	4bac      	ldr	r3, [pc, #688]	; (8007e2c <cppLoop+0x934>)
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e02b      	b.n	8007bd6 <cppLoop+0x6de>
			else if(selector == 1){
 8007b7e:	4baa      	ldr	r3, [pc, #680]	; (8007e28 <cppLoop+0x930>)
 8007b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d113      	bne.n	8007bb0 <cppLoop+0x6b8>
				adj_ki_slow = adj_ki_slow + 0.0001;
 8007b88:	4ba9      	ldr	r3, [pc, #676]	; (8007e30 <cppLoop+0x938>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fcf3 	bl	8000578 <__aeabi_f2d>
 8007b92:	a39f      	add	r3, pc, #636	; (adr r3, 8007e10 <cppLoop+0x918>)
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f7f8 fb90 	bl	80002bc <__adddf3>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	f7f9 f838 	bl	8000c18 <__aeabi_d2f>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4ba1      	ldr	r3, [pc, #644]	; (8007e30 <cppLoop+0x938>)
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e012      	b.n	8007bd6 <cppLoop+0x6de>
				adj_kd_slow = adj_kd_slow + 0.000001;
 8007bb0:	4ba0      	ldr	r3, [pc, #640]	; (8007e34 <cppLoop+0x93c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7f8 fcdf 	bl	8000578 <__aeabi_f2d>
 8007bba:	a397      	add	r3, pc, #604	; (adr r3, 8007e18 <cppLoop+0x920>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb7c 	bl	80002bc <__adddf3>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	4618      	mov	r0, r3
 8007bca:	4621      	mov	r1, r4
 8007bcc:	f7f9 f824 	bl	8000c18 <__aeabi_d2f>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	4b98      	ldr	r3, [pc, #608]	; (8007e34 <cppLoop+0x93c>)
 8007bd4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007bd6:	2152      	movs	r1, #82	; 0x52
 8007bd8:	4892      	ldr	r0, [pc, #584]	; (8007e24 <cppLoop+0x92c>)
 8007bda:	f7fa fb1b 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007bde:	2200      	movs	r2, #0
 8007be0:	f04f 31ff 	mov.w	r1, #4294967295
 8007be4:	488f      	ldr	r0, [pc, #572]	; (8007e24 <cppLoop+0x92c>)
 8007be6:	f7fa fbd1 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007bea:	f001 bc2d 	b.w	8009448 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8007bee:	488c      	ldr	r0, [pc, #560]	; (8007e20 <cppLoop+0x928>)
 8007bf0:	f7fa faac 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d059      	beq.n	8007cb8 <cppLoop+0x7c0>
			led.LR(-1, 1);
 8007c04:	2201      	movs	r2, #1
 8007c06:	f04f 31ff 	mov.w	r1, #4294967295
 8007c0a:	4886      	ldr	r0, [pc, #536]	; (8007e24 <cppLoop+0x92c>)
 8007c0c:	f7fa fbbe 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c10:	2064      	movs	r0, #100	; 0x64
 8007c12:	f001 fd61 	bl	80096d8 <HAL_Delay>
			if(selector == 0){
 8007c16:	4b84      	ldr	r3, [pc, #528]	; (8007e28 <cppLoop+0x930>)
 8007c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d113      	bne.n	8007c48 <cppLoop+0x750>
				adj_kp_slow = adj_kp_slow - 0.00001;
 8007c20:	4b82      	ldr	r3, [pc, #520]	; (8007e2c <cppLoop+0x934>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f8 fca7 	bl	8000578 <__aeabi_f2d>
 8007c2a:	a377      	add	r3, pc, #476	; (adr r3, 8007e08 <cppLoop+0x910>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb42 	bl	80002b8 <__aeabi_dsub>
 8007c34:	4603      	mov	r3, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	f7f8 ffec 	bl	8000c18 <__aeabi_d2f>
 8007c40:	4602      	mov	r2, r0
 8007c42:	4b7a      	ldr	r3, [pc, #488]	; (8007e2c <cppLoop+0x934>)
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e02b      	b.n	8007ca0 <cppLoop+0x7a8>
			else if(selector == 1){
 8007c48:	4b77      	ldr	r3, [pc, #476]	; (8007e28 <cppLoop+0x930>)
 8007c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d113      	bne.n	8007c7a <cppLoop+0x782>
				adj_ki_slow = adj_ki_slow - 0.0001;
 8007c52:	4b77      	ldr	r3, [pc, #476]	; (8007e30 <cppLoop+0x938>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7f8 fc8e 	bl	8000578 <__aeabi_f2d>
 8007c5c:	a36c      	add	r3, pc, #432	; (adr r3, 8007e10 <cppLoop+0x918>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fb29 	bl	80002b8 <__aeabi_dsub>
 8007c66:	4603      	mov	r3, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f7f8 ffd3 	bl	8000c18 <__aeabi_d2f>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4b6e      	ldr	r3, [pc, #440]	; (8007e30 <cppLoop+0x938>)
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e012      	b.n	8007ca0 <cppLoop+0x7a8>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8007c7a:	4b6e      	ldr	r3, [pc, #440]	; (8007e34 <cppLoop+0x93c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7f8 fc7a 	bl	8000578 <__aeabi_f2d>
 8007c84:	a364      	add	r3, pc, #400	; (adr r3, 8007e18 <cppLoop+0x920>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fb15 	bl	80002b8 <__aeabi_dsub>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	460c      	mov	r4, r1
 8007c92:	4618      	mov	r0, r3
 8007c94:	4621      	mov	r1, r4
 8007c96:	f7f8 ffbf 	bl	8000c18 <__aeabi_d2f>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b65      	ldr	r3, [pc, #404]	; (8007e34 <cppLoop+0x93c>)
 8007c9e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007ca0:	2152      	movs	r1, #82	; 0x52
 8007ca2:	4860      	ldr	r0, [pc, #384]	; (8007e24 <cppLoop+0x92c>)
 8007ca4:	f7fa fab6 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f04f 31ff 	mov.w	r1, #4294967295
 8007cae:	485d      	ldr	r0, [pc, #372]	; (8007e24 <cppLoop+0x92c>)
 8007cb0:	f7fa fb6c 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007cb4:	f001 bbc8 	b.w	8009448 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 8007cb8:	4859      	ldr	r0, [pc, #356]	; (8007e20 <cppLoop+0x928>)
 8007cba:	f7fa fa47 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f001 83bc 	beq.w	8009448 <cppLoop+0x1f50>
			led.LR(-1, 1);
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd6:	4853      	ldr	r0, [pc, #332]	; (8007e24 <cppLoop+0x92c>)
 8007cd8:	f7fa fb58 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ce0:	f001 fcfa 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4b50      	ldr	r3, [pc, #320]	; (8007e2c <cppLoop+0x934>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	4952      	ldr	r1, [pc, #328]	; (8007e38 <cppLoop+0x940>)
 8007cee:	4853      	ldr	r0, [pc, #332]	; (8007e3c <cppLoop+0x944>)
 8007cf0:	f7f9 fda6 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4b4d      	ldr	r3, [pc, #308]	; (8007e30 <cppLoop+0x938>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4950      	ldr	r1, [pc, #320]	; (8007e40 <cppLoop+0x948>)
 8007cfe:	484f      	ldr	r0, [pc, #316]	; (8007e3c <cppLoop+0x944>)
 8007d00:	f7f9 fd9e 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8007d04:	2300      	movs	r3, #0
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4b4a      	ldr	r3, [pc, #296]	; (8007e34 <cppLoop+0x93c>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	494d      	ldr	r1, [pc, #308]	; (8007e44 <cppLoop+0x94c>)
 8007d0e:	484b      	ldr	r0, [pc, #300]	; (8007e3c <cppLoop+0x944>)
 8007d10:	f7f9 fd96 	bl	8001840 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8007d14:	4b45      	ldr	r3, [pc, #276]	; (8007e2c <cppLoop+0x934>)
 8007d16:	edd3 7a00 	vldr	s15, [r3]
 8007d1a:	4b45      	ldr	r3, [pc, #276]	; (8007e30 <cppLoop+0x938>)
 8007d1c:	ed93 7a00 	vldr	s14, [r3]
 8007d20:	4b44      	ldr	r3, [pc, #272]	; (8007e34 <cppLoop+0x93c>)
 8007d22:	edd3 6a00 	vldr	s13, [r3]
 8007d26:	eeb0 1a66 	vmov.f32	s2, s13
 8007d2a:	eef0 0a47 	vmov.f32	s1, s14
 8007d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d32:	4845      	ldr	r0, [pc, #276]	; (8007e48 <cppLoop+0x950>)
 8007d34:	f7fb fd4c 	bl	80037d0 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8007d3e:	4839      	ldr	r0, [pc, #228]	; (8007e24 <cppLoop+0x92c>)
 8007d40:	f7fa fb24 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007d44:	f001 bb80 	b.w	8009448 <cppLoop+0x1f50>

	case 1:
		led.fullColor('C');
 8007d48:	2143      	movs	r1, #67	; 0x43
 8007d4a:	4836      	ldr	r0, [pc, #216]	; (8007e24 <cppLoop+0x92c>)
 8007d4c:	f7fa fa62 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d50:	f7f9 f9a6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d54:	2100      	movs	r1, #0
 8007d56:	2000      	movs	r0, #0
 8007d58:	f7f9 f9b2 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007d5c:	483b      	ldr	r0, [pc, #236]	; (8007e4c <cppLoop+0x954>)
 8007d5e:	f7f9 f9d9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d62:	2101      	movs	r1, #1
 8007d64:	2000      	movs	r0, #0
 8007d66:	f7f9 f9ab 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007d6a:	4b39      	ldr	r3, [pc, #228]	; (8007e50 <cppLoop+0x958>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f8 fc02 	bl	8000578 <__aeabi_f2d>
 8007d74:	4603      	mov	r3, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	4835      	ldr	r0, [pc, #212]	; (8007e54 <cppLoop+0x95c>)
 8007d7e:	f7f9 f9c9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007d82:	4827      	ldr	r0, [pc, #156]	; (8007e20 <cppLoop+0x928>)
 8007d84:	f7fa f9e2 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f001 8359 	beq.w	800944c <cppLoop+0x1f54>
			HAL_Delay(500);
 8007d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d9e:	f001 fc9b 	bl	80096d8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007da2:	4b2b      	ldr	r3, [pc, #172]	; (8007e50 <cppLoop+0x958>)
 8007da4:	edd3 7a00 	vldr	s15, [r3]
 8007da8:	eeb0 0a67 	vmov.f32	s0, s15
 8007dac:	4826      	ldr	r0, [pc, #152]	; (8007e48 <cppLoop+0x950>)
 8007dae:	f7fb fd64 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007db2:	f04f 32ff 	mov.w	r2, #4294967295
 8007db6:	2101      	movs	r1, #1
 8007db8:	481a      	ldr	r0, [pc, #104]	; (8007e24 <cppLoop+0x92c>)
 8007dba:	f7fa fae7 	bl	800238c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(0.35, 0.35, 0.35, 0.35);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 8007dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dc2:	f001 fc89 	bl	80096d8 <HAL_Delay>
			logger.start();
 8007dc6:	4824      	ldr	r0, [pc, #144]	; (8007e58 <cppLoop+0x960>)
 8007dc8:	f7fc fbf7 	bl	80045ba <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8007dcc:	2100      	movs	r1, #0
 8007dce:	481e      	ldr	r0, [pc, #120]	; (8007e48 <cppLoop+0x950>)
 8007dd0:	f7fb fefe 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007dd4:	481c      	ldr	r0, [pc, #112]	; (8007e48 <cppLoop+0x950>)
 8007dd6:	f7fb ff39 	bl	8003c4c <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 8007dda:	481f      	ldr	r0, [pc, #124]	; (8007e58 <cppLoop+0x960>)
 8007ddc:	f7fc fbfd 	bl	80045da <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 8007de0:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <cppLoop+0x964>)
 8007de2:	491f      	ldr	r1, [pc, #124]	; (8007e60 <cppLoop+0x968>)
 8007de4:	481c      	ldr	r0, [pc, #112]	; (8007e58 <cppLoop+0x960>)
 8007de6:	f7fc faf3 	bl	80043d0 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 8007dea:	4a1e      	ldr	r2, [pc, #120]	; (8007e64 <cppLoop+0x96c>)
 8007dec:	491c      	ldr	r1, [pc, #112]	; (8007e60 <cppLoop+0x968>)
 8007dee:	481a      	ldr	r0, [pc, #104]	; (8007e58 <cppLoop+0x960>)
 8007df0:	f7fc fb04 	bl	80043fc <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	2100      	movs	r1, #0
 8007dfa:	480a      	ldr	r0, [pc, #40]	; (8007e24 <cppLoop+0x92c>)
 8007dfc:	f7fa fac6 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 8007e00:	f001 bb24 	b.w	800944c <cppLoop+0x1f54>
 8007e04:	f3af 8000 	nop.w
 8007e08:	88e368f1 	.word	0x88e368f1
 8007e0c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007e10:	eb1c432d 	.word	0xeb1c432d
 8007e14:	3f1a36e2 	.word	0x3f1a36e2
 8007e18:	a0b5ed8d 	.word	0xa0b5ed8d
 8007e1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007e20:	200005ac 	.word	0x200005ac
 8007e24:	200005b8 	.word	0x200005b8
 8007e28:	2004222a 	.word	0x2004222a
 8007e2c:	2004224c 	.word	0x2004224c
 8007e30:	20042254 	.word	0x20042254
 8007e34:	2004225c 	.word	0x2004225c
 8007e38:	080197cc 	.word	0x080197cc
 8007e3c:	080197d8 	.word	0x080197d8
 8007e40:	080197e0 	.word	0x080197e0
 8007e44:	080197ec 	.word	0x080197ec
 8007e48:	2001db4c 	.word	0x2001db4c
 8007e4c:	080197f8 	.word	0x080197f8
 8007e50:	20042264 	.word	0x20042264
 8007e54:	08019804 	.word	0x08019804
 8007e58:	200005dc 	.word	0x200005dc
 8007e5c:	08019810 	.word	0x08019810
 8007e60:	0801981c 	.word	0x0801981c
 8007e64:	08019828 	.word	0x08019828

	case 2:
		led.fullColor('B');
 8007e68:	2142      	movs	r1, #66	; 0x42
 8007e6a:	48c1      	ldr	r0, [pc, #772]	; (8008170 <cppLoop+0xc78>)
 8007e6c:	f7fa f9d2 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e70:	f7f9 f916 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e74:	2100      	movs	r1, #0
 8007e76:	2000      	movs	r0, #0
 8007e78:	f7f9 f922 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007e7c:	48bd      	ldr	r0, [pc, #756]	; (8008174 <cppLoop+0xc7c>)
 8007e7e:	f7f9 f949 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e82:	2101      	movs	r1, #1
 8007e84:	2000      	movs	r0, #0
 8007e86:	f7f9 f91b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007e8a:	4bbb      	ldr	r3, [pc, #748]	; (8008178 <cppLoop+0xc80>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7f8 fb72 	bl	8000578 <__aeabi_f2d>
 8007e94:	4603      	mov	r3, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	48b7      	ldr	r0, [pc, #732]	; (800817c <cppLoop+0xc84>)
 8007e9e:	f7f9 f939 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007ea2:	48b7      	ldr	r0, [pc, #732]	; (8008180 <cppLoop+0xc88>)
 8007ea4:	f7fa f952 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	bf0c      	ite	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d023      	beq.n	8007f00 <cppLoop+0xa08>
			led.LR(-1, 1);
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f04f 31ff 	mov.w	r1, #4294967295
 8007ebe:	48ac      	ldr	r0, [pc, #688]	; (8008170 <cppLoop+0xc78>)
 8007ec0:	f7fa fa64 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007ec4:	2064      	movs	r0, #100	; 0x64
 8007ec6:	f001 fc07 	bl	80096d8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007eca:	4bab      	ldr	r3, [pc, #684]	; (8008178 <cppLoop+0xc80>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7f8 fb52 	bl	8000578 <__aeabi_f2d>
 8007ed4:	a3a4      	add	r3, pc, #656	; (adr r3, 8008168 <cppLoop+0xc70>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 f9ef 	bl	80002bc <__adddf3>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	f7f8 fe97 	bl	8000c18 <__aeabi_d2f>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4ba2      	ldr	r3, [pc, #648]	; (8008178 <cppLoop+0xc80>)
 8007eee:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef6:	489e      	ldr	r0, [pc, #632]	; (8008170 <cppLoop+0xc78>)
 8007ef8:	f7fa fa48 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007efc:	f001 baa8 	b.w	8009450 <cppLoop+0x1f58>
		else if(joy_stick.getValue() == JOY_L){
 8007f00:	489f      	ldr	r0, [pc, #636]	; (8008180 <cppLoop+0xc88>)
 8007f02:	f7fa f923 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2301      	moveq	r3, #1
 8007f0e:	2300      	movne	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d023      	beq.n	8007f5e <cppLoop+0xa66>
			led.LR(-1, 1);
 8007f16:	2201      	movs	r2, #1
 8007f18:	f04f 31ff 	mov.w	r1, #4294967295
 8007f1c:	4894      	ldr	r0, [pc, #592]	; (8008170 <cppLoop+0xc78>)
 8007f1e:	f7fa fa35 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f22:	2064      	movs	r0, #100	; 0x64
 8007f24:	f001 fbd8 	bl	80096d8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007f28:	4b93      	ldr	r3, [pc, #588]	; (8008178 <cppLoop+0xc80>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7f8 fb23 	bl	8000578 <__aeabi_f2d>
 8007f32:	a38d      	add	r3, pc, #564	; (adr r3, 8008168 <cppLoop+0xc70>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 f9be 	bl	80002b8 <__aeabi_dsub>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	4618      	mov	r0, r3
 8007f42:	4621      	mov	r1, r4
 8007f44:	f7f8 fe68 	bl	8000c18 <__aeabi_d2f>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4b8b      	ldr	r3, [pc, #556]	; (8008178 <cppLoop+0xc80>)
 8007f4c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f04f 31ff 	mov.w	r1, #4294967295
 8007f54:	4886      	ldr	r0, [pc, #536]	; (8008170 <cppLoop+0xc78>)
 8007f56:	f7fa fa19 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007f5a:	f001 ba79 	b.w	8009450 <cppLoop+0x1f58>
		else if(joy_stick.getValue() == JOY_C){
 8007f5e:	4888      	ldr	r0, [pc, #544]	; (8008180 <cppLoop+0xc88>)
 8007f60:	f7fa f8f4 	bl	800214c <_ZN8JoyStick8getValueEv>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	bf0c      	ite	eq
 8007f6a:	2301      	moveq	r3, #1
 8007f6c:	2300      	movne	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f001 826d 	beq.w	8009450 <cppLoop+0x1f58>
			led.LR(-1, 1);
 8007f76:	2201      	movs	r2, #1
 8007f78:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7c:	487c      	ldr	r0, [pc, #496]	; (8008170 <cppLoop+0xc78>)
 8007f7e:	f7fa fa05 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f86:	f001 fba7 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	4b7a      	ldr	r3, [pc, #488]	; (8008178 <cppLoop+0xc80>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	497c      	ldr	r1, [pc, #496]	; (8008184 <cppLoop+0xc8c>)
 8007f94:	487c      	ldr	r0, [pc, #496]	; (8008188 <cppLoop+0xc90>)
 8007f96:	f7f9 fc53 	bl	8001840 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007f9a:	4b77      	ldr	r3, [pc, #476]	; (8008178 <cppLoop+0xc80>)
 8007f9c:	edd3 7a00 	vldr	s15, [r3]
 8007fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fa4:	4879      	ldr	r0, [pc, #484]	; (800818c <cppLoop+0xc94>)
 8007fa6:	f7fb fc68 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007faa:	2200      	movs	r2, #0
 8007fac:	f04f 31ff 	mov.w	r1, #4294967295
 8007fb0:	486f      	ldr	r0, [pc, #444]	; (8008170 <cppLoop+0xc78>)
 8007fb2:	f7fa f9eb 	bl	800238c <_ZN3LED2LREaa>
		break;
 8007fb6:	f001 ba4b 	b.w	8009450 <cppLoop+0x1f58>

	case 3:
		led.fullColor('Y');
 8007fba:	2159      	movs	r1, #89	; 0x59
 8007fbc:	486c      	ldr	r0, [pc, #432]	; (8008170 <cppLoop+0xc78>)
 8007fbe:	f7fa f929 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fc2:	f7f9 f86d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7f9 f879 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007fce:	4b70      	ldr	r3, [pc, #448]	; (8008190 <cppLoop+0xc98>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7f8 fad0 	bl	8000578 <__aeabi_f2d>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4623      	mov	r3, r4
 8007fe0:	486c      	ldr	r0, [pc, #432]	; (8008194 <cppLoop+0xc9c>)
 8007fe2:	f7f9 f897 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f7f9 f869 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007fee:	4b6a      	ldr	r3, [pc, #424]	; (8008198 <cppLoop+0xca0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 fac0 	bl	8000578 <__aeabi_f2d>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4623      	mov	r3, r4
 8008000:	4866      	ldr	r0, [pc, #408]	; (800819c <cppLoop+0xca4>)
 8008002:	f7f9 f887 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008006:	485e      	ldr	r0, [pc, #376]	; (8008180 <cppLoop+0xc88>)
 8008008:	f7fa f8a0 	bl	800214c <_ZN8JoyStick8getValueEv>
 800800c:	4603      	mov	r3, r0
 800800e:	2b02      	cmp	r3, #2
 8008010:	bf0c      	ite	eq
 8008012:	2301      	moveq	r3, #1
 8008014:	2300      	movne	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	f001 821b 	beq.w	8009454 <cppLoop+0x1f5c>
			HAL_Delay(500);
 800801e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008022:	f001 fb59 	bl	80096d8 <HAL_Delay>

			led.LR(1, -1);
 8008026:	f04f 32ff 	mov.w	r2, #4294967295
 800802a:	2101      	movs	r1, #1
 800802c:	4850      	ldr	r0, [pc, #320]	; (8008170 <cppLoop+0xc78>)
 800802e:	f7fa f9ad 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008032:	2101      	movs	r1, #1
 8008034:	4855      	ldr	r0, [pc, #340]	; (800818c <cppLoop+0xc94>)
 8008036:	f7fb fdcb 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800803a:	4b57      	ldr	r3, [pc, #348]	; (8008198 <cppLoop+0xca0>)
 800803c:	edd3 7a00 	vldr	s15, [r3]
 8008040:	eeb0 0a67 	vmov.f32	s0, s15
 8008044:	4851      	ldr	r0, [pc, #324]	; (800818c <cppLoop+0xc94>)
 8008046:	f7fb fc18 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800804a:	4b51      	ldr	r3, [pc, #324]	; (8008190 <cppLoop+0xc98>)
 800804c:	edd3 7a00 	vldr	s15, [r3]
 8008050:	eeb0 0a67 	vmov.f32	s0, s15
 8008054:	484d      	ldr	r0, [pc, #308]	; (800818c <cppLoop+0xc94>)
 8008056:	f7fb fc20 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800805a:	4b4f      	ldr	r3, [pc, #316]	; (8008198 <cppLoop+0xca0>)
 800805c:	edd3 7a00 	vldr	s15, [r3]
 8008060:	eeb0 0a67 	vmov.f32	s0, s15
 8008064:	4849      	ldr	r0, [pc, #292]	; (800818c <cppLoop+0xc94>)
 8008066:	f7fb fc38 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 800806a:	4848      	ldr	r0, [pc, #288]	; (800818c <cppLoop+0xc94>)
 800806c:	f7fb fed8 	bl	8003e20 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(3000);
 8008070:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008074:	f001 fb30 	bl	80096d8 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008078:	eddf 1a49 	vldr	s3, [pc, #292]	; 80081a0 <cppLoop+0xca8>
 800807c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80081a0 <cppLoop+0xca8>
 8008080:	eddf 0a47 	vldr	s1, [pc, #284]	; 80081a0 <cppLoop+0xca8>
 8008084:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80081a0 <cppLoop+0xca8>
 8008088:	4846      	ldr	r0, [pc, #280]	; (80081a4 <cppLoop+0xcac>)
 800808a:	f7f9 f8e1 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800808e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008092:	f001 fb21 	bl	80096d8 <HAL_Delay>

			line_trace.running();
 8008096:	483d      	ldr	r0, [pc, #244]	; (800818c <cppLoop+0xc94>)
 8008098:	f7fb fdd8 	bl	8003c4c <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 800809c:	4841      	ldr	r0, [pc, #260]	; (80081a4 <cppLoop+0xcac>)
 800809e:	f7f9 f971 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	2100      	movs	r1, #0
 80080a8:	4831      	ldr	r0, [pc, #196]	; (8008170 <cppLoop+0xc78>)
 80080aa:	f7fa f96f 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 80080ae:	f001 b9d1 	b.w	8009454 <cppLoop+0x1f5c>

	case 4:
		led.fullColor('G');
 80080b2:	2147      	movs	r1, #71	; 0x47
 80080b4:	482e      	ldr	r0, [pc, #184]	; (8008170 <cppLoop+0xc78>)
 80080b6:	f7fa f8ad 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 80080ba:	f7f8 fff1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080be:	2100      	movs	r1, #0
 80080c0:	2000      	movs	r0, #0
 80080c2:	f7f8 fffd 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80080c6:	4831      	ldr	r0, [pc, #196]	; (800818c <cppLoop+0xc94>)
 80080c8:	f7fb fc37 	bl	800393a <_ZN9LineTrace14getMaxVelocityEv>
 80080cc:	ee10 3a10 	vmov	r3, s0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 fa51 	bl	8000578 <__aeabi_f2d>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4623      	mov	r3, r4
 80080de:	482d      	ldr	r0, [pc, #180]	; (8008194 <cppLoop+0xc9c>)
 80080e0:	f7f9 f818 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080e4:	2101      	movs	r1, #1
 80080e6:	2000      	movs	r0, #0
 80080e8:	f7f8 ffea 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80080ec:	4827      	ldr	r0, [pc, #156]	; (800818c <cppLoop+0xc94>)
 80080ee:	f7fb fc44 	bl	800397a <_ZN9LineTrace14getMinVelocityEv>
 80080f2:	ee10 3a10 	vmov	r3, s0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7f8 fa3e 	bl	8000578 <__aeabi_f2d>
 80080fc:	4603      	mov	r3, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	461a      	mov	r2, r3
 8008102:	4623      	mov	r3, r4
 8008104:	481d      	ldr	r0, [pc, #116]	; (800817c <cppLoop+0xc84>)
 8008106:	f7f9 f805 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800810a:	481d      	ldr	r0, [pc, #116]	; (8008180 <cppLoop+0xc88>)
 800810c:	f7fa f81e 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008110:	4603      	mov	r3, r0
 8008112:	2b08      	cmp	r3, #8
 8008114:	bf0c      	ite	eq
 8008116:	2301      	moveq	r3, #1
 8008118:	2300      	movne	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d045      	beq.n	80081ac <cppLoop+0xcb4>
			led.LR(-1, 1);
 8008120:	2201      	movs	r2, #1
 8008122:	f04f 31ff 	mov.w	r1, #4294967295
 8008126:	4812      	ldr	r0, [pc, #72]	; (8008170 <cppLoop+0xc78>)
 8008128:	f7fa f930 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800812c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008130:	f001 fad2 	bl	80096d8 <HAL_Delay>

			selector_vel++;
 8008134:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <cppLoop+0xcb0>)
 8008136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800813a:	b29b      	uxth	r3, r3
 800813c:	3301      	adds	r3, #1
 800813e:	b29b      	uxth	r3, r3
 8008140:	b21a      	sxth	r2, r3
 8008142:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <cppLoop+0xcb0>)
 8008144:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008146:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <cppLoop+0xcb0>)
 8008148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800814c:	2b01      	cmp	r3, #1
 800814e:	dd02      	ble.n	8008156 <cppLoop+0xc5e>
 8008150:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <cppLoop+0xcb0>)
 8008152:	2200      	movs	r2, #0
 8008154:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008156:	2200      	movs	r2, #0
 8008158:	f04f 31ff 	mov.w	r1, #4294967295
 800815c:	4804      	ldr	r0, [pc, #16]	; (8008170 <cppLoop+0xc78>)
 800815e:	f7fa f915 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008162:	f001 b979 	b.w	8009458 <cppLoop+0x1f60>
 8008166:	bf00      	nop
 8008168:	9999999a 	.word	0x9999999a
 800816c:	3fb99999 	.word	0x3fb99999
 8008170:	200005b8 	.word	0x200005b8
 8008174:	080197f8 	.word	0x080197f8
 8008178:	20042264 	.word	0x20042264
 800817c:	08019834 	.word	0x08019834
 8008180:	200005ac 	.word	0x200005ac
 8008184:	08019840 	.word	0x08019840
 8008188:	080197d8 	.word	0x080197d8
 800818c:	2001db4c 	.word	0x2001db4c
 8008190:	2004226c 	.word	0x2004226c
 8008194:	0801984c 	.word	0x0801984c
 8008198:	2004227c 	.word	0x2004227c
 800819c:	08019804 	.word	0x08019804
 80081a0:	3eb33333 	.word	0x3eb33333
 80081a4:	2001db48 	.word	0x2001db48
 80081a8:	20042230 	.word	0x20042230
		else if(joy_stick.getValue() == JOY_R){
 80081ac:	48a4      	ldr	r0, [pc, #656]	; (8008440 <cppLoop+0xf48>)
 80081ae:	f7f9 ffcd 	bl	800214c <_ZN8JoyStick8getValueEv>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b10      	cmp	r3, #16
 80081b6:	bf0c      	ite	eq
 80081b8:	2301      	moveq	r3, #1
 80081ba:	2300      	movne	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d03c      	beq.n	800823c <cppLoop+0xd44>
			led.LR(-1, 1);
 80081c2:	2201      	movs	r2, #1
 80081c4:	f04f 31ff 	mov.w	r1, #4294967295
 80081c8:	489e      	ldr	r0, [pc, #632]	; (8008444 <cppLoop+0xf4c>)
 80081ca:	f7fa f8df 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081ce:	2064      	movs	r0, #100	; 0x64
 80081d0:	f001 fa82 	bl	80096d8 <HAL_Delay>
			if(selector_vel == 0)
 80081d4:	4b9c      	ldr	r3, [pc, #624]	; (8008448 <cppLoop+0xf50>)
 80081d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d113      	bne.n	8008206 <cppLoop+0xd0e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80081de:	4b9b      	ldr	r3, [pc, #620]	; (800844c <cppLoop+0xf54>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f8 f9c8 	bl	8000578 <__aeabi_f2d>
 80081e8:	a393      	add	r3, pc, #588	; (adr r3, 8008438 <cppLoop+0xf40>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f7f8 f865 	bl	80002bc <__adddf3>
 80081f2:	4603      	mov	r3, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	4618      	mov	r0, r3
 80081f8:	4621      	mov	r1, r4
 80081fa:	f7f8 fd0d 	bl	8000c18 <__aeabi_d2f>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b92      	ldr	r3, [pc, #584]	; (800844c <cppLoop+0xf54>)
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e012      	b.n	800822c <cppLoop+0xd34>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008206:	4b92      	ldr	r3, [pc, #584]	; (8008450 <cppLoop+0xf58>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7f8 f9b4 	bl	8000578 <__aeabi_f2d>
 8008210:	a389      	add	r3, pc, #548	; (adr r3, 8008438 <cppLoop+0xf40>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f851 	bl	80002bc <__adddf3>
 800821a:	4603      	mov	r3, r0
 800821c:	460c      	mov	r4, r1
 800821e:	4618      	mov	r0, r3
 8008220:	4621      	mov	r1, r4
 8008222:	f7f8 fcf9 	bl	8000c18 <__aeabi_d2f>
 8008226:	4602      	mov	r2, r0
 8008228:	4b89      	ldr	r3, [pc, #548]	; (8008450 <cppLoop+0xf58>)
 800822a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800822c:	2200      	movs	r2, #0
 800822e:	f04f 31ff 	mov.w	r1, #4294967295
 8008232:	4884      	ldr	r0, [pc, #528]	; (8008444 <cppLoop+0xf4c>)
 8008234:	f7fa f8aa 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008238:	f001 b90e 	b.w	8009458 <cppLoop+0x1f60>
		else if(joy_stick.getValue() == JOY_L){
 800823c:	4880      	ldr	r0, [pc, #512]	; (8008440 <cppLoop+0xf48>)
 800823e:	f7f9 ff85 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	bf0c      	ite	eq
 8008248:	2301      	moveq	r3, #1
 800824a:	2300      	movne	r3, #0
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d03c      	beq.n	80082cc <cppLoop+0xdd4>
			led.LR(-1, 1);
 8008252:	2201      	movs	r2, #1
 8008254:	f04f 31ff 	mov.w	r1, #4294967295
 8008258:	487a      	ldr	r0, [pc, #488]	; (8008444 <cppLoop+0xf4c>)
 800825a:	f7fa f897 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800825e:	2064      	movs	r0, #100	; 0x64
 8008260:	f001 fa3a 	bl	80096d8 <HAL_Delay>
			if(selector_vel == 0)
 8008264:	4b78      	ldr	r3, [pc, #480]	; (8008448 <cppLoop+0xf50>)
 8008266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d113      	bne.n	8008296 <cppLoop+0xd9e>
				adj_max_velocity = adj_max_velocity - 0.1;
 800826e:	4b77      	ldr	r3, [pc, #476]	; (800844c <cppLoop+0xf54>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f7f8 f980 	bl	8000578 <__aeabi_f2d>
 8008278:	a36f      	add	r3, pc, #444	; (adr r3, 8008438 <cppLoop+0xf40>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f7f8 f81b 	bl	80002b8 <__aeabi_dsub>
 8008282:	4603      	mov	r3, r0
 8008284:	460c      	mov	r4, r1
 8008286:	4618      	mov	r0, r3
 8008288:	4621      	mov	r1, r4
 800828a:	f7f8 fcc5 	bl	8000c18 <__aeabi_d2f>
 800828e:	4602      	mov	r2, r0
 8008290:	4b6e      	ldr	r3, [pc, #440]	; (800844c <cppLoop+0xf54>)
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e012      	b.n	80082bc <cppLoop+0xdc4>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008296:	4b6e      	ldr	r3, [pc, #440]	; (8008450 <cppLoop+0xf58>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f7f8 f96c 	bl	8000578 <__aeabi_f2d>
 80082a0:	a365      	add	r3, pc, #404	; (adr r3, 8008438 <cppLoop+0xf40>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f8 f807 	bl	80002b8 <__aeabi_dsub>
 80082aa:	4603      	mov	r3, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	4618      	mov	r0, r3
 80082b0:	4621      	mov	r1, r4
 80082b2:	f7f8 fcb1 	bl	8000c18 <__aeabi_d2f>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b65      	ldr	r3, [pc, #404]	; (8008450 <cppLoop+0xf58>)
 80082ba:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80082bc:	2200      	movs	r2, #0
 80082be:	f04f 31ff 	mov.w	r1, #4294967295
 80082c2:	4860      	ldr	r0, [pc, #384]	; (8008444 <cppLoop+0xf4c>)
 80082c4:	f7fa f862 	bl	800238c <_ZN3LED2LREaa>
		break;
 80082c8:	f001 b8c6 	b.w	8009458 <cppLoop+0x1f60>
		else if(joy_stick.getValue() == JOY_C){
 80082cc:	485c      	ldr	r0, [pc, #368]	; (8008440 <cppLoop+0xf48>)
 80082ce:	f7f9 ff3d 	bl	800214c <_ZN8JoyStick8getValueEv>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	bf0c      	ite	eq
 80082d8:	2301      	moveq	r3, #1
 80082da:	2300      	movne	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f001 80ba 	beq.w	8009458 <cppLoop+0x1f60>
			led.LR(-1, 1);
 80082e4:	2201      	movs	r2, #1
 80082e6:	f04f 31ff 	mov.w	r1, #4294967295
 80082ea:	4856      	ldr	r0, [pc, #344]	; (8008444 <cppLoop+0xf4c>)
 80082ec:	f7fa f84e 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082f4:	f001 f9f0 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80082f8:	2300      	movs	r3, #0
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	4b53      	ldr	r3, [pc, #332]	; (800844c <cppLoop+0xf54>)
 80082fe:	2201      	movs	r2, #1
 8008300:	4954      	ldr	r1, [pc, #336]	; (8008454 <cppLoop+0xf5c>)
 8008302:	4855      	ldr	r0, [pc, #340]	; (8008458 <cppLoop+0xf60>)
 8008304:	f7f9 fa9c 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4b50      	ldr	r3, [pc, #320]	; (8008450 <cppLoop+0xf58>)
 800830e:	2201      	movs	r2, #1
 8008310:	4952      	ldr	r1, [pc, #328]	; (800845c <cppLoop+0xf64>)
 8008312:	4851      	ldr	r0, [pc, #324]	; (8008458 <cppLoop+0xf60>)
 8008314:	f7f9 fa94 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008318:	4b4c      	ldr	r3, [pc, #304]	; (800844c <cppLoop+0xf54>)
 800831a:	edd3 7a00 	vldr	s15, [r3]
 800831e:	eeb0 0a67 	vmov.f32	s0, s15
 8008322:	484f      	ldr	r0, [pc, #316]	; (8008460 <cppLoop+0xf68>)
 8008324:	f7fb fab9 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008328:	4b49      	ldr	r3, [pc, #292]	; (8008450 <cppLoop+0xf58>)
 800832a:	edd3 7a00 	vldr	s15, [r3]
 800832e:	eeb0 0a67 	vmov.f32	s0, s15
 8008332:	484b      	ldr	r0, [pc, #300]	; (8008460 <cppLoop+0xf68>)
 8008334:	f7fb fad1 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008338:	2200      	movs	r2, #0
 800833a:	f04f 31ff 	mov.w	r1, #4294967295
 800833e:	4841      	ldr	r0, [pc, #260]	; (8008444 <cppLoop+0xf4c>)
 8008340:	f7fa f824 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008344:	f001 b888 	b.w	8009458 <cppLoop+0x1f60>

	case 5:
		led.fullColor('M');
 8008348:	214d      	movs	r1, #77	; 0x4d
 800834a:	483e      	ldr	r0, [pc, #248]	; (8008444 <cppLoop+0xf4c>)
 800834c:	f7f9 ff62 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008350:	f7f8 fea6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008354:	2100      	movs	r1, #0
 8008356:	2000      	movs	r0, #0
 8008358:	f7f8 feb2 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 800835c:	4b41      	ldr	r3, [pc, #260]	; (8008464 <cppLoop+0xf6c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f7f8 f909 	bl	8000578 <__aeabi_f2d>
 8008366:	4603      	mov	r3, r0
 8008368:	460c      	mov	r4, r1
 800836a:	461a      	mov	r2, r3
 800836c:	4623      	mov	r3, r4
 800836e:	483e      	ldr	r0, [pc, #248]	; (8008468 <cppLoop+0xf70>)
 8008370:	f7f8 fed0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008374:	2101      	movs	r1, #1
 8008376:	2000      	movs	r0, #0
 8008378:	f7f8 fea2 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 800837c:	4b3b      	ldr	r3, [pc, #236]	; (800846c <cppLoop+0xf74>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4618      	mov	r0, r3
 8008382:	f7f8 f8f9 	bl	8000578 <__aeabi_f2d>
 8008386:	4603      	mov	r3, r0
 8008388:	460c      	mov	r4, r1
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	4838      	ldr	r0, [pc, #224]	; (8008470 <cppLoop+0xf78>)
 8008390:	f7f8 fec0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008394:	482a      	ldr	r0, [pc, #168]	; (8008440 <cppLoop+0xf48>)
 8008396:	f7f9 fed9 	bl	800214c <_ZN8JoyStick8getValueEv>
 800839a:	4603      	mov	r3, r0
 800839c:	2b02      	cmp	r3, #2
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f001 8058 	beq.w	800945c <cppLoop+0x1f64>
			HAL_Delay(500);
 80083ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083b0:	f001 f992 	bl	80096d8 <HAL_Delay>

			led.LR(1, -1);
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295
 80083b8:	2101      	movs	r1, #1
 80083ba:	4822      	ldr	r0, [pc, #136]	; (8008444 <cppLoop+0xf4c>)
 80083bc:	f7f9 ffe6 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80083c0:	4b2c      	ldr	r3, [pc, #176]	; (8008474 <cppLoop+0xf7c>)
 80083c2:	edd3 7a00 	vldr	s15, [r3]
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <cppLoop+0xf80>)
 80083c8:	ed93 7a00 	vldr	s14, [r3]
 80083cc:	4b2b      	ldr	r3, [pc, #172]	; (800847c <cppLoop+0xf84>)
 80083ce:	edd3 6a00 	vldr	s13, [r3]
 80083d2:	eeb0 1a66 	vmov.f32	s2, s13
 80083d6:	eef0 0a47 	vmov.f32	s1, s14
 80083da:	eeb0 0a67 	vmov.f32	s0, s15
 80083de:	4820      	ldr	r0, [pc, #128]	; (8008460 <cppLoop+0xf68>)
 80083e0:	f7fb f9b0 	bl	8003744 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 80083e4:	2102      	movs	r1, #2
 80083e6:	481e      	ldr	r0, [pc, #120]	; (8008460 <cppLoop+0xf68>)
 80083e8:	f7fb fbf2 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80083ec:	4b1f      	ldr	r3, [pc, #124]	; (800846c <cppLoop+0xf74>)
 80083ee:	edd3 7a00 	vldr	s15, [r3]
 80083f2:	eeb0 0a67 	vmov.f32	s0, s15
 80083f6:	481a      	ldr	r0, [pc, #104]	; (8008460 <cppLoop+0xf68>)
 80083f8:	f7fb fa3f 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <cppLoop+0xf6c>)
 80083fe:	edd3 7a00 	vldr	s15, [r3]
 8008402:	eeb0 0a67 	vmov.f32	s0, s15
 8008406:	4816      	ldr	r0, [pc, #88]	; (8008460 <cppLoop+0xf68>)
 8008408:	f7fb fa57 	bl	80038ba <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <cppLoop+0xf74>)
 800840e:	edd3 7a00 	vldr	s15, [r3]
 8008412:	eeb0 0a67 	vmov.f32	s0, s15
 8008416:	4812      	ldr	r0, [pc, #72]	; (8008460 <cppLoop+0xf68>)
 8008418:	f7fb fa6f 	bl	80038fa <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800841c:	4810      	ldr	r0, [pc, #64]	; (8008460 <cppLoop+0xf68>)
 800841e:	f7fb fcff 	bl	8003e20 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008422:	480f      	ldr	r0, [pc, #60]	; (8008460 <cppLoop+0xf68>)
 8008424:	f7fb fc12 	bl	8003c4c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008428:	f04f 32ff 	mov.w	r2, #4294967295
 800842c:	2100      	movs	r1, #0
 800842e:	4805      	ldr	r0, [pc, #20]	; (8008444 <cppLoop+0xf4c>)
 8008430:	f7f9 ffac 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 8008434:	f001 b812 	b.w	800945c <cppLoop+0x1f64>
 8008438:	9999999a 	.word	0x9999999a
 800843c:	3fb99999 	.word	0x3fb99999
 8008440:	200005ac 	.word	0x200005ac
 8008444:	200005b8 	.word	0x200005b8
 8008448:	20042230 	.word	0x20042230
 800844c:	2004226c 	.word	0x2004226c
 8008450:	2004227c 	.word	0x2004227c
 8008454:	08019858 	.word	0x08019858
 8008458:	080197d8 	.word	0x080197d8
 800845c:	08019864 	.word	0x08019864
 8008460:	2001db4c 	.word	0x2001db4c
 8008464:	20042274 	.word	0x20042274
 8008468:	08019870 	.word	0x08019870
 800846c:	20042284 	.word	0x20042284
 8008470:	08019804 	.word	0x08019804
 8008474:	20042234 	.word	0x20042234
 8008478:	2004223c 	.word	0x2004223c
 800847c:	20042244 	.word	0x20042244

	case 6:
		led.fullColor('R');
 8008480:	2152      	movs	r1, #82	; 0x52
 8008482:	4895      	ldr	r0, [pc, #596]	; (80086d8 <cppLoop+0x11e0>)
 8008484:	f7f9 fec6 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008488:	f7f8 fe0a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800848c:	2100      	movs	r1, #0
 800848e:	2000      	movs	r0, #0
 8008490:	f7f8 fe16 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008494:	4891      	ldr	r0, [pc, #580]	; (80086dc <cppLoop+0x11e4>)
 8008496:	f7fb fa60 	bl	800395a <_ZN9LineTrace15getMaxVelocity2Ev>
 800849a:	ee10 3a10 	vmov	r3, s0
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f8 f86a 	bl	8000578 <__aeabi_f2d>
 80084a4:	4603      	mov	r3, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	461a      	mov	r2, r3
 80084aa:	4623      	mov	r3, r4
 80084ac:	488c      	ldr	r0, [pc, #560]	; (80086e0 <cppLoop+0x11e8>)
 80084ae:	f7f8 fe31 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084b2:	2101      	movs	r1, #1
 80084b4:	2000      	movs	r0, #0
 80084b6:	f7f8 fe03 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80084ba:	4888      	ldr	r0, [pc, #544]	; (80086dc <cppLoop+0x11e4>)
 80084bc:	f7fb fa6d 	bl	800399a <_ZN9LineTrace15getMinVelocity2Ev>
 80084c0:	ee10 3a10 	vmov	r3, s0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7f8 f857 	bl	8000578 <__aeabi_f2d>
 80084ca:	4603      	mov	r3, r0
 80084cc:	460c      	mov	r4, r1
 80084ce:	461a      	mov	r2, r3
 80084d0:	4623      	mov	r3, r4
 80084d2:	4884      	ldr	r0, [pc, #528]	; (80086e4 <cppLoop+0x11ec>)
 80084d4:	f7f8 fe1e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084d8:	4883      	ldr	r0, [pc, #524]	; (80086e8 <cppLoop+0x11f0>)
 80084da:	f7f9 fe37 	bl	800214c <_ZN8JoyStick8getValueEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b08      	cmp	r3, #8
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d022      	beq.n	8008534 <cppLoop+0x103c>
			led.LR(-1, 1);
 80084ee:	2201      	movs	r2, #1
 80084f0:	f04f 31ff 	mov.w	r1, #4294967295
 80084f4:	4878      	ldr	r0, [pc, #480]	; (80086d8 <cppLoop+0x11e0>)
 80084f6:	f7f9 ff49 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084fe:	f001 f8eb 	bl	80096d8 <HAL_Delay>

			selector_vel2++;
 8008502:	4b7a      	ldr	r3, [pc, #488]	; (80086ec <cppLoop+0x11f4>)
 8008504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008508:	b29b      	uxth	r3, r3
 800850a:	3301      	adds	r3, #1
 800850c:	b29b      	uxth	r3, r3
 800850e:	b21a      	sxth	r2, r3
 8008510:	4b76      	ldr	r3, [pc, #472]	; (80086ec <cppLoop+0x11f4>)
 8008512:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008514:	4b75      	ldr	r3, [pc, #468]	; (80086ec <cppLoop+0x11f4>)
 8008516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800851a:	2b01      	cmp	r3, #1
 800851c:	dd02      	ble.n	8008524 <cppLoop+0x102c>
 800851e:	4b73      	ldr	r3, [pc, #460]	; (80086ec <cppLoop+0x11f4>)
 8008520:	2200      	movs	r2, #0
 8008522:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008524:	2200      	movs	r2, #0
 8008526:	f04f 31ff 	mov.w	r1, #4294967295
 800852a:	486b      	ldr	r0, [pc, #428]	; (80086d8 <cppLoop+0x11e0>)
 800852c:	f7f9 ff2e 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008530:	f000 bf96 	b.w	8009460 <cppLoop+0x1f68>
		else if(joy_stick.getValue() == JOY_R){
 8008534:	486c      	ldr	r0, [pc, #432]	; (80086e8 <cppLoop+0x11f0>)
 8008536:	f7f9 fe09 	bl	800214c <_ZN8JoyStick8getValueEv>
 800853a:	4603      	mov	r3, r0
 800853c:	2b10      	cmp	r3, #16
 800853e:	bf0c      	ite	eq
 8008540:	2301      	moveq	r3, #1
 8008542:	2300      	movne	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d03c      	beq.n	80085c4 <cppLoop+0x10cc>
			led.LR(-1, 1);
 800854a:	2201      	movs	r2, #1
 800854c:	f04f 31ff 	mov.w	r1, #4294967295
 8008550:	4861      	ldr	r0, [pc, #388]	; (80086d8 <cppLoop+0x11e0>)
 8008552:	f7f9 ff1b 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008556:	2064      	movs	r0, #100	; 0x64
 8008558:	f001 f8be 	bl	80096d8 <HAL_Delay>
			if(selector_vel2 == 0)
 800855c:	4b63      	ldr	r3, [pc, #396]	; (80086ec <cppLoop+0x11f4>)
 800855e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d113      	bne.n	800858e <cppLoop+0x1096>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008566:	4b62      	ldr	r3, [pc, #392]	; (80086f0 <cppLoop+0x11f8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7f8 f804 	bl	8000578 <__aeabi_f2d>
 8008570:	a357      	add	r3, pc, #348	; (adr r3, 80086d0 <cppLoop+0x11d8>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 fea1 	bl	80002bc <__adddf3>
 800857a:	4603      	mov	r3, r0
 800857c:	460c      	mov	r4, r1
 800857e:	4618      	mov	r0, r3
 8008580:	4621      	mov	r1, r4
 8008582:	f7f8 fb49 	bl	8000c18 <__aeabi_d2f>
 8008586:	4602      	mov	r2, r0
 8008588:	4b59      	ldr	r3, [pc, #356]	; (80086f0 <cppLoop+0x11f8>)
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	e012      	b.n	80085b4 <cppLoop+0x10bc>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800858e:	4b59      	ldr	r3, [pc, #356]	; (80086f4 <cppLoop+0x11fc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f7f7 fff0 	bl	8000578 <__aeabi_f2d>
 8008598:	a34d      	add	r3, pc, #308	; (adr r3, 80086d0 <cppLoop+0x11d8>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe8d 	bl	80002bc <__adddf3>
 80085a2:	4603      	mov	r3, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	4618      	mov	r0, r3
 80085a8:	4621      	mov	r1, r4
 80085aa:	f7f8 fb35 	bl	8000c18 <__aeabi_d2f>
 80085ae:	4602      	mov	r2, r0
 80085b0:	4b50      	ldr	r3, [pc, #320]	; (80086f4 <cppLoop+0x11fc>)
 80085b2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085b4:	2200      	movs	r2, #0
 80085b6:	f04f 31ff 	mov.w	r1, #4294967295
 80085ba:	4847      	ldr	r0, [pc, #284]	; (80086d8 <cppLoop+0x11e0>)
 80085bc:	f7f9 fee6 	bl	800238c <_ZN3LED2LREaa>
		break;
 80085c0:	f000 bf4e 	b.w	8009460 <cppLoop+0x1f68>
		else if(joy_stick.getValue() == JOY_L){
 80085c4:	4848      	ldr	r0, [pc, #288]	; (80086e8 <cppLoop+0x11f0>)
 80085c6:	f7f9 fdc1 	bl	800214c <_ZN8JoyStick8getValueEv>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	bf0c      	ite	eq
 80085d0:	2301      	moveq	r3, #1
 80085d2:	2300      	movne	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d03c      	beq.n	8008654 <cppLoop+0x115c>
			led.LR(-1, 1);
 80085da:	2201      	movs	r2, #1
 80085dc:	f04f 31ff 	mov.w	r1, #4294967295
 80085e0:	483d      	ldr	r0, [pc, #244]	; (80086d8 <cppLoop+0x11e0>)
 80085e2:	f7f9 fed3 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085e6:	2064      	movs	r0, #100	; 0x64
 80085e8:	f001 f876 	bl	80096d8 <HAL_Delay>
			if(selector_vel2 == 0)
 80085ec:	4b3f      	ldr	r3, [pc, #252]	; (80086ec <cppLoop+0x11f4>)
 80085ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d113      	bne.n	800861e <cppLoop+0x1126>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80085f6:	4b3e      	ldr	r3, [pc, #248]	; (80086f0 <cppLoop+0x11f8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f7 ffbc 	bl	8000578 <__aeabi_f2d>
 8008600:	a333      	add	r3, pc, #204	; (adr r3, 80086d0 <cppLoop+0x11d8>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 fe57 	bl	80002b8 <__aeabi_dsub>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	4618      	mov	r0, r3
 8008610:	4621      	mov	r1, r4
 8008612:	f7f8 fb01 	bl	8000c18 <__aeabi_d2f>
 8008616:	4602      	mov	r2, r0
 8008618:	4b35      	ldr	r3, [pc, #212]	; (80086f0 <cppLoop+0x11f8>)
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	e012      	b.n	8008644 <cppLoop+0x114c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 800861e:	4b35      	ldr	r3, [pc, #212]	; (80086f4 <cppLoop+0x11fc>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f7f7 ffa8 	bl	8000578 <__aeabi_f2d>
 8008628:	a329      	add	r3, pc, #164	; (adr r3, 80086d0 <cppLoop+0x11d8>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	f7f7 fe43 	bl	80002b8 <__aeabi_dsub>
 8008632:	4603      	mov	r3, r0
 8008634:	460c      	mov	r4, r1
 8008636:	4618      	mov	r0, r3
 8008638:	4621      	mov	r1, r4
 800863a:	f7f8 faed 	bl	8000c18 <__aeabi_d2f>
 800863e:	4602      	mov	r2, r0
 8008640:	4b2c      	ldr	r3, [pc, #176]	; (80086f4 <cppLoop+0x11fc>)
 8008642:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008644:	2200      	movs	r2, #0
 8008646:	f04f 31ff 	mov.w	r1, #4294967295
 800864a:	4823      	ldr	r0, [pc, #140]	; (80086d8 <cppLoop+0x11e0>)
 800864c:	f7f9 fe9e 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008650:	f000 bf06 	b.w	8009460 <cppLoop+0x1f68>
		else if(joy_stick.getValue() == JOY_C){
 8008654:	4824      	ldr	r0, [pc, #144]	; (80086e8 <cppLoop+0x11f0>)
 8008656:	f7f9 fd79 	bl	800214c <_ZN8JoyStick8getValueEv>
 800865a:	4603      	mov	r3, r0
 800865c:	2b02      	cmp	r3, #2
 800865e:	bf0c      	ite	eq
 8008660:	2301      	moveq	r3, #1
 8008662:	2300      	movne	r3, #0
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 86fa 	beq.w	8009460 <cppLoop+0x1f68>
			led.LR(-1, 1);
 800866c:	2201      	movs	r2, #1
 800866e:	f04f 31ff 	mov.w	r1, #4294967295
 8008672:	4819      	ldr	r0, [pc, #100]	; (80086d8 <cppLoop+0x11e0>)
 8008674:	f7f9 fe8a 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008678:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800867c:	f001 f82c 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008680:	2300      	movs	r3, #0
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <cppLoop+0x11f8>)
 8008686:	2201      	movs	r2, #1
 8008688:	491b      	ldr	r1, [pc, #108]	; (80086f8 <cppLoop+0x1200>)
 800868a:	481c      	ldr	r0, [pc, #112]	; (80086fc <cppLoop+0x1204>)
 800868c:	f7f9 f8d8 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008690:	2300      	movs	r3, #0
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <cppLoop+0x11fc>)
 8008696:	2201      	movs	r2, #1
 8008698:	4919      	ldr	r1, [pc, #100]	; (8008700 <cppLoop+0x1208>)
 800869a:	4818      	ldr	r0, [pc, #96]	; (80086fc <cppLoop+0x1204>)
 800869c:	f7f9 f8d0 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80086a0:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <cppLoop+0x11f8>)
 80086a2:	edd3 7a00 	vldr	s15, [r3]
 80086a6:	eeb0 0a67 	vmov.f32	s0, s15
 80086aa:	480c      	ldr	r0, [pc, #48]	; (80086dc <cppLoop+0x11e4>)
 80086ac:	f7fb f905 	bl	80038ba <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80086b0:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <cppLoop+0x11fc>)
 80086b2:	edd3 7a00 	vldr	s15, [r3]
 80086b6:	eeb0 0a67 	vmov.f32	s0, s15
 80086ba:	4808      	ldr	r0, [pc, #32]	; (80086dc <cppLoop+0x11e4>)
 80086bc:	f7fb f91d 	bl	80038fa <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80086c0:	2200      	movs	r2, #0
 80086c2:	f04f 31ff 	mov.w	r1, #4294967295
 80086c6:	4804      	ldr	r0, [pc, #16]	; (80086d8 <cppLoop+0x11e0>)
 80086c8:	f7f9 fe60 	bl	800238c <_ZN3LED2LREaa>
		break;
 80086cc:	f000 bec8 	b.w	8009460 <cppLoop+0x1f68>
 80086d0:	9999999a 	.word	0x9999999a
 80086d4:	3fb99999 	.word	0x3fb99999
 80086d8:	200005b8 	.word	0x200005b8
 80086dc:	2001db4c 	.word	0x2001db4c
 80086e0:	08019870 	.word	0x08019870
 80086e4:	08019834 	.word	0x08019834
 80086e8:	200005ac 	.word	0x200005ac
 80086ec:	20042232 	.word	0x20042232
 80086f0:	20042274 	.word	0x20042274
 80086f4:	20042284 	.word	0x20042284
 80086f8:	0801987c 	.word	0x0801987c
 80086fc:	080197d8 	.word	0x080197d8
 8008700:	08019888 	.word	0x08019888

	case 7:
		led.fullColor('W');
 8008704:	2157      	movs	r1, #87	; 0x57
 8008706:	48c2      	ldr	r0, [pc, #776]	; (8008a10 <cppLoop+0x1518>)
 8008708:	f7f9 fd84 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 800870c:	f7f8 fcc8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008710:	2100      	movs	r1, #0
 8008712:	2000      	movs	r0, #0
 8008714:	f7f8 fcd4 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008718:	48be      	ldr	r0, [pc, #760]	; (8008a14 <cppLoop+0x151c>)
 800871a:	f7fb f982 	bl	8003a22 <_ZN9LineTrace9getMaxAccEv>
 800871e:	ee10 3a10 	vmov	r3, s0
 8008722:	4618      	mov	r0, r3
 8008724:	f7f7 ff28 	bl	8000578 <__aeabi_f2d>
 8008728:	4603      	mov	r3, r0
 800872a:	460c      	mov	r4, r1
 800872c:	461a      	mov	r2, r3
 800872e:	4623      	mov	r3, r4
 8008730:	48b9      	ldr	r0, [pc, #740]	; (8008a18 <cppLoop+0x1520>)
 8008732:	f7f8 fcef 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008736:	2101      	movs	r1, #1
 8008738:	2000      	movs	r0, #0
 800873a:	f7f8 fcc1 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 800873e:	48b5      	ldr	r0, [pc, #724]	; (8008a14 <cppLoop+0x151c>)
 8008740:	f7fb f9a5 	bl	8003a8e <_ZN9LineTrace9getMaxDecEv>
 8008744:	ee10 3a10 	vmov	r3, s0
 8008748:	4618      	mov	r0, r3
 800874a:	f7f7 ff15 	bl	8000578 <__aeabi_f2d>
 800874e:	4603      	mov	r3, r0
 8008750:	460c      	mov	r4, r1
 8008752:	461a      	mov	r2, r3
 8008754:	4623      	mov	r3, r4
 8008756:	48b1      	ldr	r0, [pc, #708]	; (8008a1c <cppLoop+0x1524>)
 8008758:	f7f8 fcdc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800875c:	48b0      	ldr	r0, [pc, #704]	; (8008a20 <cppLoop+0x1528>)
 800875e:	f7f9 fcf5 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008762:	4603      	mov	r3, r0
 8008764:	2b08      	cmp	r3, #8
 8008766:	bf0c      	ite	eq
 8008768:	2301      	moveq	r3, #1
 800876a:	2300      	movne	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d022      	beq.n	80087b8 <cppLoop+0x12c0>
			led.LR(-1, 1);
 8008772:	2201      	movs	r2, #1
 8008774:	f04f 31ff 	mov.w	r1, #4294967295
 8008778:	48a5      	ldr	r0, [pc, #660]	; (8008a10 <cppLoop+0x1518>)
 800877a:	f7f9 fe07 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800877e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008782:	f000 ffa9 	bl	80096d8 <HAL_Delay>

			selector_acc++;
 8008786:	4ba7      	ldr	r3, [pc, #668]	; (8008a24 <cppLoop+0x152c>)
 8008788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800878c:	b29b      	uxth	r3, r3
 800878e:	3301      	adds	r3, #1
 8008790:	b29b      	uxth	r3, r3
 8008792:	b21a      	sxth	r2, r3
 8008794:	4ba3      	ldr	r3, [pc, #652]	; (8008a24 <cppLoop+0x152c>)
 8008796:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008798:	4ba2      	ldr	r3, [pc, #648]	; (8008a24 <cppLoop+0x152c>)
 800879a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	dd02      	ble.n	80087a8 <cppLoop+0x12b0>
 80087a2:	4ba0      	ldr	r3, [pc, #640]	; (8008a24 <cppLoop+0x152c>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80087a8:	2200      	movs	r2, #0
 80087aa:	f04f 31ff 	mov.w	r1, #4294967295
 80087ae:	4898      	ldr	r0, [pc, #608]	; (8008a10 <cppLoop+0x1518>)
 80087b0:	f7f9 fdec 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80087b4:	f000 be56 	b.w	8009464 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 80087b8:	4899      	ldr	r0, [pc, #612]	; (8008a20 <cppLoop+0x1528>)
 80087ba:	f7f9 fcc7 	bl	800214c <_ZN8JoyStick8getValueEv>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	bf0c      	ite	eq
 80087c4:	2301      	moveq	r3, #1
 80087c6:	2300      	movne	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d03c      	beq.n	8008848 <cppLoop+0x1350>
			led.LR(-1, 1);
 80087ce:	2201      	movs	r2, #1
 80087d0:	f04f 31ff 	mov.w	r1, #4294967295
 80087d4:	488e      	ldr	r0, [pc, #568]	; (8008a10 <cppLoop+0x1518>)
 80087d6:	f7f9 fdd9 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087da:	2064      	movs	r0, #100	; 0x64
 80087dc:	f000 ff7c 	bl	80096d8 <HAL_Delay>
			if(selector_acc == 0){
 80087e0:	4b90      	ldr	r3, [pc, #576]	; (8008a24 <cppLoop+0x152c>)
 80087e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d113      	bne.n	8008812 <cppLoop+0x131a>
				adj_acc = adj_acc + 0.1;
 80087ea:	4b8f      	ldr	r3, [pc, #572]	; (8008a28 <cppLoop+0x1530>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 fec2 	bl	8000578 <__aeabi_f2d>
 80087f4:	a384      	add	r3, pc, #528	; (adr r3, 8008a08 <cppLoop+0x1510>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd5f 	bl	80002bc <__adddf3>
 80087fe:	4603      	mov	r3, r0
 8008800:	460c      	mov	r4, r1
 8008802:	4618      	mov	r0, r3
 8008804:	4621      	mov	r1, r4
 8008806:	f7f8 fa07 	bl	8000c18 <__aeabi_d2f>
 800880a:	4602      	mov	r2, r0
 800880c:	4b86      	ldr	r3, [pc, #536]	; (8008a28 <cppLoop+0x1530>)
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	e012      	b.n	8008838 <cppLoop+0x1340>
				adj_dec = adj_dec + 0.1;
 8008812:	4b86      	ldr	r3, [pc, #536]	; (8008a2c <cppLoop+0x1534>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7f7 feae 	bl	8000578 <__aeabi_f2d>
 800881c:	a37a      	add	r3, pc, #488	; (adr r3, 8008a08 <cppLoop+0x1510>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f7f7 fd4b 	bl	80002bc <__adddf3>
 8008826:	4603      	mov	r3, r0
 8008828:	460c      	mov	r4, r1
 800882a:	4618      	mov	r0, r3
 800882c:	4621      	mov	r1, r4
 800882e:	f7f8 f9f3 	bl	8000c18 <__aeabi_d2f>
 8008832:	4602      	mov	r2, r0
 8008834:	4b7d      	ldr	r3, [pc, #500]	; (8008a2c <cppLoop+0x1534>)
 8008836:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008838:	2200      	movs	r2, #0
 800883a:	f04f 31ff 	mov.w	r1, #4294967295
 800883e:	4874      	ldr	r0, [pc, #464]	; (8008a10 <cppLoop+0x1518>)
 8008840:	f7f9 fda4 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008844:	f000 be0e 	b.w	8009464 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8008848:	4875      	ldr	r0, [pc, #468]	; (8008a20 <cppLoop+0x1528>)
 800884a:	f7f9 fc7f 	bl	800214c <_ZN8JoyStick8getValueEv>
 800884e:	4603      	mov	r3, r0
 8008850:	2b01      	cmp	r3, #1
 8008852:	bf0c      	ite	eq
 8008854:	2301      	moveq	r3, #1
 8008856:	2300      	movne	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d03c      	beq.n	80088d8 <cppLoop+0x13e0>
			led.LR(-1, 1);
 800885e:	2201      	movs	r2, #1
 8008860:	f04f 31ff 	mov.w	r1, #4294967295
 8008864:	486a      	ldr	r0, [pc, #424]	; (8008a10 <cppLoop+0x1518>)
 8008866:	f7f9 fd91 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800886a:	2064      	movs	r0, #100	; 0x64
 800886c:	f000 ff34 	bl	80096d8 <HAL_Delay>
			if(selector_acc == 0){
 8008870:	4b6c      	ldr	r3, [pc, #432]	; (8008a24 <cppLoop+0x152c>)
 8008872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d113      	bne.n	80088a2 <cppLoop+0x13aa>
				adj_acc = adj_acc - 0.1;
 800887a:	4b6b      	ldr	r3, [pc, #428]	; (8008a28 <cppLoop+0x1530>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f7f7 fe7a 	bl	8000578 <__aeabi_f2d>
 8008884:	a360      	add	r3, pc, #384	; (adr r3, 8008a08 <cppLoop+0x1510>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f7f7 fd15 	bl	80002b8 <__aeabi_dsub>
 800888e:	4603      	mov	r3, r0
 8008890:	460c      	mov	r4, r1
 8008892:	4618      	mov	r0, r3
 8008894:	4621      	mov	r1, r4
 8008896:	f7f8 f9bf 	bl	8000c18 <__aeabi_d2f>
 800889a:	4602      	mov	r2, r0
 800889c:	4b62      	ldr	r3, [pc, #392]	; (8008a28 <cppLoop+0x1530>)
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e012      	b.n	80088c8 <cppLoop+0x13d0>
				adj_dec = adj_dec - 0.1;
 80088a2:	4b62      	ldr	r3, [pc, #392]	; (8008a2c <cppLoop+0x1534>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f7 fe66 	bl	8000578 <__aeabi_f2d>
 80088ac:	a356      	add	r3, pc, #344	; (adr r3, 8008a08 <cppLoop+0x1510>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fd01 	bl	80002b8 <__aeabi_dsub>
 80088b6:	4603      	mov	r3, r0
 80088b8:	460c      	mov	r4, r1
 80088ba:	4618      	mov	r0, r3
 80088bc:	4621      	mov	r1, r4
 80088be:	f7f8 f9ab 	bl	8000c18 <__aeabi_d2f>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b59      	ldr	r3, [pc, #356]	; (8008a2c <cppLoop+0x1534>)
 80088c6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088c8:	2200      	movs	r2, #0
 80088ca:	f04f 31ff 	mov.w	r1, #4294967295
 80088ce:	4850      	ldr	r0, [pc, #320]	; (8008a10 <cppLoop+0x1518>)
 80088d0:	f7f9 fd5c 	bl	800238c <_ZN3LED2LREaa>
		break;
 80088d4:	f000 bdc6 	b.w	8009464 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_C){
 80088d8:	4851      	ldr	r0, [pc, #324]	; (8008a20 <cppLoop+0x1528>)
 80088da:	f7f9 fc37 	bl	800214c <_ZN8JoyStick8getValueEv>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 85ba 	beq.w	8009464 <cppLoop+0x1f6c>
			led.LR(-1, 1);
 80088f0:	2201      	movs	r2, #1
 80088f2:	f04f 31ff 	mov.w	r1, #4294967295
 80088f6:	4846      	ldr	r0, [pc, #280]	; (8008a10 <cppLoop+0x1518>)
 80088f8:	f7f9 fd48 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008900:	f000 feea 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008904:	2300      	movs	r3, #0
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4b47      	ldr	r3, [pc, #284]	; (8008a28 <cppLoop+0x1530>)
 800890a:	2201      	movs	r2, #1
 800890c:	4948      	ldr	r1, [pc, #288]	; (8008a30 <cppLoop+0x1538>)
 800890e:	4849      	ldr	r0, [pc, #292]	; (8008a34 <cppLoop+0x153c>)
 8008910:	f7f8 ff96 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008914:	2300      	movs	r3, #0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	4b44      	ldr	r3, [pc, #272]	; (8008a2c <cppLoop+0x1534>)
 800891a:	2201      	movs	r2, #1
 800891c:	4946      	ldr	r1, [pc, #280]	; (8008a38 <cppLoop+0x1540>)
 800891e:	4845      	ldr	r0, [pc, #276]	; (8008a34 <cppLoop+0x153c>)
 8008920:	f7f8 ff8e 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008924:	4b40      	ldr	r3, [pc, #256]	; (8008a28 <cppLoop+0x1530>)
 8008926:	edd3 7a00 	vldr	s15, [r3]
 800892a:	4b40      	ldr	r3, [pc, #256]	; (8008a2c <cppLoop+0x1534>)
 800892c:	ed93 7a00 	vldr	s14, [r3]
 8008930:	eef0 0a47 	vmov.f32	s1, s14
 8008934:	eeb0 0a67 	vmov.f32	s0, s15
 8008938:	4836      	ldr	r0, [pc, #216]	; (8008a14 <cppLoop+0x151c>)
 800893a:	f7fb f83e 	bl	80039ba <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800893e:	2200      	movs	r2, #0
 8008940:	f04f 31ff 	mov.w	r1, #4294967295
 8008944:	4832      	ldr	r0, [pc, #200]	; (8008a10 <cppLoop+0x1518>)
 8008946:	f7f9 fd21 	bl	800238c <_ZN3LED2LREaa>
		break;
 800894a:	f000 bd8b 	b.w	8009464 <cppLoop+0x1f6c>

	case 8:
		led.fullColor('W');
 800894e:	2157      	movs	r1, #87	; 0x57
 8008950:	482f      	ldr	r0, [pc, #188]	; (8008a10 <cppLoop+0x1518>)
 8008952:	f7f9 fc5f 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008956:	f7f8 fba3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800895a:	2100      	movs	r1, #0
 800895c:	2000      	movs	r0, #0
 800895e:	f7f8 fbaf 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008962:	482c      	ldr	r0, [pc, #176]	; (8008a14 <cppLoop+0x151c>)
 8008964:	f7fb f881 	bl	8003a6a <_ZN9LineTrace10getMaxAcc2Ev>
 8008968:	ee10 3a10 	vmov	r3, s0
 800896c:	4618      	mov	r0, r3
 800896e:	f7f7 fe03 	bl	8000578 <__aeabi_f2d>
 8008972:	4603      	mov	r3, r0
 8008974:	460c      	mov	r4, r1
 8008976:	461a      	mov	r2, r3
 8008978:	4623      	mov	r3, r4
 800897a:	4830      	ldr	r0, [pc, #192]	; (8008a3c <cppLoop+0x1544>)
 800897c:	f7f8 fbca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008980:	2101      	movs	r1, #1
 8008982:	2000      	movs	r0, #0
 8008984:	f7f8 fb9c 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008988:	4822      	ldr	r0, [pc, #136]	; (8008a14 <cppLoop+0x151c>)
 800898a:	f7fb f85c 	bl	8003a46 <_ZN9LineTrace10getMaxDec2Ev>
 800898e:	ee10 3a10 	vmov	r3, s0
 8008992:	4618      	mov	r0, r3
 8008994:	f7f7 fdf0 	bl	8000578 <__aeabi_f2d>
 8008998:	4603      	mov	r3, r0
 800899a:	460c      	mov	r4, r1
 800899c:	461a      	mov	r2, r3
 800899e:	4623      	mov	r3, r4
 80089a0:	4827      	ldr	r0, [pc, #156]	; (8008a40 <cppLoop+0x1548>)
 80089a2:	f7f8 fbb7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80089a6:	481e      	ldr	r0, [pc, #120]	; (8008a20 <cppLoop+0x1528>)
 80089a8:	f7f9 fbd0 	bl	800214c <_ZN8JoyStick8getValueEv>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d045      	beq.n	8008a48 <cppLoop+0x1550>
			led.LR(-1, 1);
 80089bc:	2201      	movs	r2, #1
 80089be:	f04f 31ff 	mov.w	r1, #4294967295
 80089c2:	4813      	ldr	r0, [pc, #76]	; (8008a10 <cppLoop+0x1518>)
 80089c4:	f7f9 fce2 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089cc:	f000 fe84 	bl	80096d8 <HAL_Delay>

			selector_acc2++;
 80089d0:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <cppLoop+0x154c>)
 80089d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3301      	adds	r3, #1
 80089da:	b29b      	uxth	r3, r3
 80089dc:	b21a      	sxth	r2, r3
 80089de:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <cppLoop+0x154c>)
 80089e0:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 80089e2:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <cppLoop+0x154c>)
 80089e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	dd02      	ble.n	80089f2 <cppLoop+0x14fa>
 80089ec:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <cppLoop+0x154c>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	f04f 31ff 	mov.w	r1, #4294967295
 80089f8:	4805      	ldr	r0, [pc, #20]	; (8008a10 <cppLoop+0x1518>)
 80089fa:	f7f9 fcc7 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 80089fe:	f000 bd33 	b.w	8009468 <cppLoop+0x1f70>
 8008a02:	bf00      	nop
 8008a04:	f3af 8000 	nop.w
 8008a08:	9999999a 	.word	0x9999999a
 8008a0c:	3fb99999 	.word	0x3fb99999
 8008a10:	200005b8 	.word	0x200005b8
 8008a14:	2001db4c 	.word	0x2001db4c
 8008a18:	08019894 	.word	0x08019894
 8008a1c:	080198a0 	.word	0x080198a0
 8008a20:	200005ac 	.word	0x200005ac
 8008a24:	2004222c 	.word	0x2004222c
 8008a28:	2004228c 	.word	0x2004228c
 8008a2c:	20042294 	.word	0x20042294
 8008a30:	080198ac 	.word	0x080198ac
 8008a34:	080197d8 	.word	0x080197d8
 8008a38:	080198b4 	.word	0x080198b4
 8008a3c:	080198bc 	.word	0x080198bc
 8008a40:	080198c8 	.word	0x080198c8
 8008a44:	2004222e 	.word	0x2004222e
		else if(joy_stick.getValue() == JOY_R){
 8008a48:	48bf      	ldr	r0, [pc, #764]	; (8008d48 <cppLoop+0x1850>)
 8008a4a:	f7f9 fb7f 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b10      	cmp	r3, #16
 8008a52:	bf0c      	ite	eq
 8008a54:	2301      	moveq	r3, #1
 8008a56:	2300      	movne	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03c      	beq.n	8008ad8 <cppLoop+0x15e0>
			led.LR(-1, 1);
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f04f 31ff 	mov.w	r1, #4294967295
 8008a64:	48b9      	ldr	r0, [pc, #740]	; (8008d4c <cppLoop+0x1854>)
 8008a66:	f7f9 fc91 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a6a:	2064      	movs	r0, #100	; 0x64
 8008a6c:	f000 fe34 	bl	80096d8 <HAL_Delay>
			if(selector_acc2 == 0){
 8008a70:	4bb7      	ldr	r3, [pc, #732]	; (8008d50 <cppLoop+0x1858>)
 8008a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d113      	bne.n	8008aa2 <cppLoop+0x15aa>
				adj_acc2 = adj_acc2 + 0.1;
 8008a7a:	4bb6      	ldr	r3, [pc, #728]	; (8008d54 <cppLoop+0x185c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f7 fd7a 	bl	8000578 <__aeabi_f2d>
 8008a84:	a3ae      	add	r3, pc, #696	; (adr r3, 8008d40 <cppLoop+0x1848>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	f7f7 fc17 	bl	80002bc <__adddf3>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	460c      	mov	r4, r1
 8008a92:	4618      	mov	r0, r3
 8008a94:	4621      	mov	r1, r4
 8008a96:	f7f8 f8bf 	bl	8000c18 <__aeabi_d2f>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	4bad      	ldr	r3, [pc, #692]	; (8008d54 <cppLoop+0x185c>)
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	e012      	b.n	8008ac8 <cppLoop+0x15d0>
				adj_dec2 = adj_dec2 + 0.1;
 8008aa2:	4bad      	ldr	r3, [pc, #692]	; (8008d58 <cppLoop+0x1860>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f7 fd66 	bl	8000578 <__aeabi_f2d>
 8008aac:	a3a4      	add	r3, pc, #656	; (adr r3, 8008d40 <cppLoop+0x1848>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f7f7 fc03 	bl	80002bc <__adddf3>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	4618      	mov	r0, r3
 8008abc:	4621      	mov	r1, r4
 8008abe:	f7f8 f8ab 	bl	8000c18 <__aeabi_d2f>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4ba4      	ldr	r3, [pc, #656]	; (8008d58 <cppLoop+0x1860>)
 8008ac6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f04f 31ff 	mov.w	r1, #4294967295
 8008ace:	489f      	ldr	r0, [pc, #636]	; (8008d4c <cppLoop+0x1854>)
 8008ad0:	f7f9 fc5c 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008ad4:	f000 bcc8 	b.w	8009468 <cppLoop+0x1f70>
		else if(joy_stick.getValue() == JOY_L){
 8008ad8:	489b      	ldr	r0, [pc, #620]	; (8008d48 <cppLoop+0x1850>)
 8008ada:	f7f9 fb37 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d03c      	beq.n	8008b68 <cppLoop+0x1670>
			led.LR(-1, 1);
 8008aee:	2201      	movs	r2, #1
 8008af0:	f04f 31ff 	mov.w	r1, #4294967295
 8008af4:	4895      	ldr	r0, [pc, #596]	; (8008d4c <cppLoop+0x1854>)
 8008af6:	f7f9 fc49 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008afa:	2064      	movs	r0, #100	; 0x64
 8008afc:	f000 fdec 	bl	80096d8 <HAL_Delay>
			if(selector_acc2 == 0){
 8008b00:	4b93      	ldr	r3, [pc, #588]	; (8008d50 <cppLoop+0x1858>)
 8008b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d113      	bne.n	8008b32 <cppLoop+0x163a>
				adj_acc2 = adj_acc2 - 0.1;
 8008b0a:	4b92      	ldr	r3, [pc, #584]	; (8008d54 <cppLoop+0x185c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f7 fd32 	bl	8000578 <__aeabi_f2d>
 8008b14:	a38a      	add	r3, pc, #552	; (adr r3, 8008d40 <cppLoop+0x1848>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fbcd 	bl	80002b8 <__aeabi_dsub>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	460c      	mov	r4, r1
 8008b22:	4618      	mov	r0, r3
 8008b24:	4621      	mov	r1, r4
 8008b26:	f7f8 f877 	bl	8000c18 <__aeabi_d2f>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b89      	ldr	r3, [pc, #548]	; (8008d54 <cppLoop+0x185c>)
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	e012      	b.n	8008b58 <cppLoop+0x1660>
				adj_dec2 = adj_dec2 - 0.1;
 8008b32:	4b89      	ldr	r3, [pc, #548]	; (8008d58 <cppLoop+0x1860>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f7 fd1e 	bl	8000578 <__aeabi_f2d>
 8008b3c:	a380      	add	r3, pc, #512	; (adr r3, 8008d40 <cppLoop+0x1848>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fbb9 	bl	80002b8 <__aeabi_dsub>
 8008b46:	4603      	mov	r3, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	f7f8 f863 	bl	8000c18 <__aeabi_d2f>
 8008b52:	4602      	mov	r2, r0
 8008b54:	4b80      	ldr	r3, [pc, #512]	; (8008d58 <cppLoop+0x1860>)
 8008b56:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b5e:	487b      	ldr	r0, [pc, #492]	; (8008d4c <cppLoop+0x1854>)
 8008b60:	f7f9 fc14 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008b64:	f000 bc80 	b.w	8009468 <cppLoop+0x1f70>
		else if(joy_stick.getValue() == JOY_C){
 8008b68:	4877      	ldr	r0, [pc, #476]	; (8008d48 <cppLoop+0x1850>)
 8008b6a:	f7f9 faef 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 8474 	beq.w	8009468 <cppLoop+0x1f70>
			led.LR(-1, 1);
 8008b80:	2201      	movs	r2, #1
 8008b82:	f04f 31ff 	mov.w	r1, #4294967295
 8008b86:	4871      	ldr	r0, [pc, #452]	; (8008d4c <cppLoop+0x1854>)
 8008b88:	f7f9 fc00 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b90:	f000 fda2 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008b94:	2300      	movs	r3, #0
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4b6e      	ldr	r3, [pc, #440]	; (8008d54 <cppLoop+0x185c>)
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	496f      	ldr	r1, [pc, #444]	; (8008d5c <cppLoop+0x1864>)
 8008b9e:	4870      	ldr	r0, [pc, #448]	; (8008d60 <cppLoop+0x1868>)
 8008ba0:	f7f8 fe4e 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	4b6b      	ldr	r3, [pc, #428]	; (8008d58 <cppLoop+0x1860>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	496d      	ldr	r1, [pc, #436]	; (8008d64 <cppLoop+0x186c>)
 8008bae:	486c      	ldr	r0, [pc, #432]	; (8008d60 <cppLoop+0x1868>)
 8008bb0:	f7f8 fe46 	bl	8001840 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008bb4:	4b67      	ldr	r3, [pc, #412]	; (8008d54 <cppLoop+0x185c>)
 8008bb6:	edd3 7a00 	vldr	s15, [r3]
 8008bba:	4b67      	ldr	r3, [pc, #412]	; (8008d58 <cppLoop+0x1860>)
 8008bbc:	ed93 7a00 	vldr	s14, [r3]
 8008bc0:	eef0 0a47 	vmov.f32	s1, s14
 8008bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc8:	4867      	ldr	r0, [pc, #412]	; (8008d68 <cppLoop+0x1870>)
 8008bca:	f7fa ff10 	bl	80039ee <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8008bd4:	485d      	ldr	r0, [pc, #372]	; (8008d4c <cppLoop+0x1854>)
 8008bd6:	f7f9 fbd9 	bl	800238c <_ZN3LED2LREaa>
		break;
 8008bda:	f000 bc45 	b.w	8009468 <cppLoop+0x1f70>

	case 9:
		led.fullColor('~');
 8008bde:	217e      	movs	r1, #126	; 0x7e
 8008be0:	485a      	ldr	r0, [pc, #360]	; (8008d4c <cppLoop+0x1854>)
 8008be2:	f7f9 fb17 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008be6:	f7f8 fa5b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bea:	2100      	movs	r1, #0
 8008bec:	2000      	movs	r0, #0
 8008bee:	f7f8 fa67 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008bf2:	485e      	ldr	r0, [pc, #376]	; (8008d6c <cppLoop+0x1874>)
 8008bf4:	f7f8 fa8e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7f8 fa60 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008c00:	485b      	ldr	r0, [pc, #364]	; (8008d70 <cppLoop+0x1878>)
 8008c02:	f7f8 fa87 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008c06:	4850      	ldr	r0, [pc, #320]	; (8008d48 <cppLoop+0x1850>)
 8008c08:	f7f9 faa0 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	bf0c      	ite	eq
 8008c12:	2301      	moveq	r3, #1
 8008c14:	2300      	movne	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 8427 	beq.w	800946c <cppLoop+0x1f74>
			led.LR(-1, 1);
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f04f 31ff 	mov.w	r1, #4294967295
 8008c24:	4849      	ldr	r0, [pc, #292]	; (8008d4c <cppLoop+0x1854>)
 8008c26:	f7f9 fbb1 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c2e:	f000 fd53 	bl	80096d8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008c32:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8008d74 <cppLoop+0x187c>
 8008c36:	484c      	ldr	r0, [pc, #304]	; (8008d68 <cppLoop+0x1870>)
 8008c38:	f7fa fe10 	bl	800385c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008c3c:	484a      	ldr	r0, [pc, #296]	; (8008d68 <cppLoop+0x1870>)
 8008c3e:	f7fa ffd9 	bl	8003bf4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c46:	f000 fd47 	bl	80096d8 <HAL_Delay>

			led.fullColor('R');
 8008c4a:	2152      	movs	r1, #82	; 0x52
 8008c4c:	483f      	ldr	r0, [pc, #252]	; (8008d4c <cppLoop+0x1854>)
 8008c4e:	f7f9 fae1 	bl	8002214 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008c52:	4849      	ldr	r0, [pc, #292]	; (8008d78 <cppLoop+0x1880>)
 8008c54:	f7f8 fd46 	bl	80016e4 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008c58:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c5c:	f000 fd3c 	bl	80096d8 <HAL_Delay>

			line_trace.stop();
 8008c60:	4841      	ldr	r0, [pc, #260]	; (8008d68 <cppLoop+0x1870>)
 8008c62:	f7fb f867 	bl	8003d34 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8008c66:	4945      	ldr	r1, [pc, #276]	; (8008d7c <cppLoop+0x1884>)
 8008c68:	4845      	ldr	r0, [pc, #276]	; (8008d80 <cppLoop+0x1888>)
 8008c6a:	f7f8 fd74 	bl	8001756 <user_fopen>
			float d = encoder.getDistance();
 8008c6e:	4842      	ldr	r0, [pc, #264]	; (8008d78 <cppLoop+0x1880>)
 8008c70:	f7f8 fd1a 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8008c74:	eef0 7a40 	vmov.f32	s15, s0
 8008c78:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008c7c:	1d3b      	adds	r3, r7, #4
 8008c7e:	2201      	movs	r2, #1
 8008c80:	4619      	mov	r1, r3
 8008c82:	2001      	movs	r0, #1
 8008c84:	f7f8 fd8a 	bl	800179c <sd_write_float>
			user_fclose();
 8008c88:	f7f8 fd78 	bl	800177c <user_fclose>

			led.LR(-1, 0);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c92:	482e      	ldr	r0, [pc, #184]	; (8008d4c <cppLoop+0x1854>)
 8008c94:	f7f9 fb7a 	bl	800238c <_ZN3LED2LREaa>
		}
		break;
 8008c98:	e3e8      	b.n	800946c <cppLoop+0x1f74>

	case 10:
		led.fullColor('~');
 8008c9a:	217e      	movs	r1, #126	; 0x7e
 8008c9c:	482b      	ldr	r0, [pc, #172]	; (8008d4c <cppLoop+0x1854>)
 8008c9e:	f7f9 fab9 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ca2:	f7f8 f9fd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7f8 fa09 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008cae:	4835      	ldr	r0, [pc, #212]	; (8008d84 <cppLoop+0x188c>)
 8008cb0:	f7f8 fa30 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f7f8 fa02 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008cbc:	4832      	ldr	r0, [pc, #200]	; (8008d88 <cppLoop+0x1890>)
 8008cbe:	f7f8 fa29 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008cc2:	4821      	ldr	r0, [pc, #132]	; (8008d48 <cppLoop+0x1850>)
 8008cc4:	f7f9 fa42 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 83cb 	beq.w	8009470 <cppLoop+0x1f78>
			HAL_Delay(500);
 8008cda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cde:	f000 fcfb 	bl	80096d8 <HAL_Delay>
			led.LR(-1, 1);
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce8:	4818      	ldr	r0, [pc, #96]	; (8008d4c <cppLoop+0x1854>)
 8008cea:	f7f9 fb4f 	bl	800238c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8008cee:	2102      	movs	r1, #2
 8008cf0:	481d      	ldr	r0, [pc, #116]	; (8008d68 <cppLoop+0x1870>)
 8008cf2:	f7fa ff6d 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008cf6:	4b25      	ldr	r3, [pc, #148]	; (8008d8c <cppLoop+0x1894>)
 8008cf8:	edd3 7a00 	vldr	s15, [r3]
 8008cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8008d00:	4819      	ldr	r0, [pc, #100]	; (8008d68 <cppLoop+0x1870>)
 8008d02:	f7fa fdba 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008d06:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <cppLoop+0x1894>)
 8008d08:	edd3 7a00 	vldr	s15, [r3]
 8008d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d10:	4815      	ldr	r0, [pc, #84]	; (8008d68 <cppLoop+0x1870>)
 8008d12:	f7fa fdc2 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008d16:	4b1d      	ldr	r3, [pc, #116]	; (8008d8c <cppLoop+0x1894>)
 8008d18:	edd3 7a00 	vldr	s15, [r3]
 8008d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d20:	4811      	ldr	r0, [pc, #68]	; (8008d68 <cppLoop+0x1870>)
 8008d22:	f7fa fdda 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008d26:	4810      	ldr	r0, [pc, #64]	; (8008d68 <cppLoop+0x1870>)
 8008d28:	f7fb f948 	bl	8003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d32:	4806      	ldr	r0, [pc, #24]	; (8008d4c <cppLoop+0x1854>)
 8008d34:	f7f9 fb2a 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 8008d38:	e39a      	b.n	8009470 <cppLoop+0x1f78>
 8008d3a:	bf00      	nop
 8008d3c:	f3af 8000 	nop.w
 8008d40:	9999999a 	.word	0x9999999a
 8008d44:	3fb99999 	.word	0x3fb99999
 8008d48:	200005ac 	.word	0x200005ac
 8008d4c:	200005b8 	.word	0x200005b8
 8008d50:	2004222e 	.word	0x2004222e
 8008d54:	2004229c 	.word	0x2004229c
 8008d58:	200422a4 	.word	0x200422a4
 8008d5c:	080198d4 	.word	0x080198d4
 8008d60:	080197d8 	.word	0x080197d8
 8008d64:	080198e0 	.word	0x080198e0
 8008d68:	2001db4c 	.word	0x2001db4c
 8008d6c:	080198ec 	.word	0x080198ec
 8008d70:	080198f4 	.word	0x080198f4
 8008d74:	00000000 	.word	0x00000000
 8008d78:	2001daa8 	.word	0x2001daa8
 8008d7c:	08019900 	.word	0x08019900
 8008d80:	08019908 	.word	0x08019908
 8008d84:	08019914 	.word	0x08019914
 8008d88:	08019920 	.word	0x08019920
 8008d8c:	20042274 	.word	0x20042274

	case 11:
		led.fullColor('~');
 8008d90:	217e      	movs	r1, #126	; 0x7e
 8008d92:	48c4      	ldr	r0, [pc, #784]	; (80090a4 <cppLoop+0x1bac>)
 8008d94:	f7f9 fa3e 	bl	8002214 <_ZN3LED9fullColorEc>

lcd_clear();
 8008d98:	f7f8 f982 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f7f8 f98e 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8008da4:	48c0      	ldr	r0, [pc, #768]	; (80090a8 <cppLoop+0x1bb0>)
 8008da6:	f7f8 f9b5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008daa:	2101      	movs	r1, #1
 8008dac:	2000      	movs	r0, #0
 8008dae:	f7f8 f987 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8008db2:	48be      	ldr	r0, [pc, #760]	; (80090ac <cppLoop+0x1bb4>)
 8008db4:	f7f8 f9ae 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008db8:	48bd      	ldr	r0, [pc, #756]	; (80090b0 <cppLoop+0x1bb8>)
 8008dba:	f7f9 f9c7 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	bf0c      	ite	eq
 8008dc4:	2301      	moveq	r3, #1
 8008dc6:	2300      	movne	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 8352 	beq.w	8009474 <cppLoop+0x1f7c>
			HAL_Delay(1000);
 8008dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008dd4:	f000 fc80 	bl	80096d8 <HAL_Delay>
			led.LR(-1, 1);
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f04f 31ff 	mov.w	r1, #4294967295
 8008dde:	48b1      	ldr	r0, [pc, #708]	; (80090a4 <cppLoop+0x1bac>)
 8008de0:	f7f9 fad4 	bl	800238c <_ZN3LED2LREaa>

			esc.on(0.35, 0.35, 0.35, 0.35);
 8008de4:	eddf 1ab3 	vldr	s3, [pc, #716]	; 80090b4 <cppLoop+0x1bbc>
 8008de8:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 80090b4 <cppLoop+0x1bbc>
 8008dec:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80090b4 <cppLoop+0x1bbc>
 8008df0:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80090b4 <cppLoop+0x1bbc>
 8008df4:	48b0      	ldr	r0, [pc, #704]	; (80090b8 <cppLoop+0x1bc0>)
 8008df6:	f7f8 fa2b 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8008dfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008dfe:	f000 fc6b 	bl	80096d8 <HAL_Delay>
			esc.off();
 8008e02:	48ad      	ldr	r0, [pc, #692]	; (80090b8 <cppLoop+0x1bc0>)
 8008e04:	f7f8 fabe 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0e:	48a5      	ldr	r0, [pc, #660]	; (80090a4 <cppLoop+0x1bac>)
 8008e10:	f7f9 fabc 	bl	800238c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8008e14:	e32e      	b.n	8009474 <cppLoop+0x1f7c>

	case 12:
		led.fullColor('~');
 8008e16:	217e      	movs	r1, #126	; 0x7e
 8008e18:	48a2      	ldr	r0, [pc, #648]	; (80090a4 <cppLoop+0x1bac>)
 8008e1a:	f7f9 f9fb 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e1e:	f7f8 f93f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e22:	2100      	movs	r1, #0
 8008e24:	2000      	movs	r0, #0
 8008e26:	f7f8 f94b 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008e2a:	48a4      	ldr	r0, [pc, #656]	; (80090bc <cppLoop+0x1bc4>)
 8008e2c:	f7f8 f972 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e30:	2101      	movs	r1, #1
 8008e32:	2000      	movs	r0, #0
 8008e34:	f7f8 f944 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008e38:	48a1      	ldr	r0, [pc, #644]	; (80090c0 <cppLoop+0x1bc8>)
 8008e3a:	f7f8 f96b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008e3e:	489c      	ldr	r0, [pc, #624]	; (80090b0 <cppLoop+0x1bb8>)
 8008e40:	f7f9 f984 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	bf0c      	ite	eq
 8008e4a:	2301      	moveq	r3, #1
 8008e4c:	2300      	movne	r3, #0
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8311 	beq.w	8009478 <cppLoop+0x1f80>
			HAL_Delay(1500);
 8008e56:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008e5a:	f000 fc3d 	bl	80096d8 <HAL_Delay>
			led.LR(-1, 1);
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f04f 31ff 	mov.w	r1, #4294967295
 8008e64:	488f      	ldr	r0, [pc, #572]	; (80090a4 <cppLoop+0x1bac>)
 8008e66:	f7f9 fa91 	bl	800238c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8008e6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008e6e:	f000 fc33 	bl	80096d8 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008e72:	eddf 1a90 	vldr	s3, [pc, #576]	; 80090b4 <cppLoop+0x1bbc>
 8008e76:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80090b4 <cppLoop+0x1bbc>
 8008e7a:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80090b4 <cppLoop+0x1bbc>
 8008e7e:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80090b4 <cppLoop+0x1bbc>
 8008e82:	488d      	ldr	r0, [pc, #564]	; (80090b8 <cppLoop+0x1bc0>)
 8008e84:	f7f8 f9e4 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8008e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e8c:	f000 fc24 	bl	80096d8 <HAL_Delay>

			logger.start();
 8008e90:	488c      	ldr	r0, [pc, #560]	; (80090c4 <cppLoop+0x1bcc>)
 8008e92:	f7fb fb92 	bl	80045ba <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8008e96:	488c      	ldr	r0, [pc, #560]	; (80090c8 <cppLoop+0x1bd0>)
 8008e98:	f7fc fcab 	bl	80057f2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8008e9c:	eddf 0a8b 	vldr	s1, [pc, #556]	; 80090cc <cppLoop+0x1bd4>
 8008ea0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008ea4:	4888      	ldr	r0, [pc, #544]	; (80090c8 <cppLoop+0x1bd0>)
 8008ea6:	f7fc fc37 	bl	8005718 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8008eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eae:	f000 fc13 	bl	80096d8 <HAL_Delay>

			logger.stop();
 8008eb2:	4884      	ldr	r0, [pc, #528]	; (80090c4 <cppLoop+0x1bcc>)
 8008eb4:	f7fb fb91 	bl	80045da <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8008eb8:	4883      	ldr	r0, [pc, #524]	; (80090c8 <cppLoop+0x1bd0>)
 8008eba:	f7fc fcad 	bl	8005818 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8008ebe:	487e      	ldr	r0, [pc, #504]	; (80090b8 <cppLoop+0x1bc0>)
 8008ec0:	f7f8 fa60 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008ec4:	4a82      	ldr	r2, [pc, #520]	; (80090d0 <cppLoop+0x1bd8>)
 8008ec6:	4983      	ldr	r1, [pc, #524]	; (80090d4 <cppLoop+0x1bdc>)
 8008ec8:	487e      	ldr	r0, [pc, #504]	; (80090c4 <cppLoop+0x1bcc>)
 8008eca:	f7fb fa6d 	bl	80043a8 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ed4:	4873      	ldr	r0, [pc, #460]	; (80090a4 <cppLoop+0x1bac>)
 8008ed6:	f7f9 fa59 	bl	800238c <_ZN3LED2LREaa>
		}
		break;
 8008eda:	e2cd      	b.n	8009478 <cppLoop+0x1f80>

	case 13:

		led.fullColor('W');
 8008edc:	2157      	movs	r1, #87	; 0x57
 8008ede:	4871      	ldr	r0, [pc, #452]	; (80090a4 <cppLoop+0x1bac>)
 8008ee0:	f7f9 f998 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ee4:	f7f8 f8dc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	2000      	movs	r0, #0
 8008eec:	f7f8 f8e8 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008ef0:	4879      	ldr	r0, [pc, #484]	; (80090d8 <cppLoop+0x1be0>)
 8008ef2:	f7f8 f90f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f7f8 f8e1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008efe:	4b77      	ldr	r3, [pc, #476]	; (80090dc <cppLoop+0x1be4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f7 fb38 	bl	8000578 <__aeabi_f2d>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4623      	mov	r3, r4
 8008f10:	4873      	ldr	r0, [pc, #460]	; (80090e0 <cppLoop+0x1be8>)
 8008f12:	f7f8 f8ff 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008f16:	4866      	ldr	r0, [pc, #408]	; (80090b0 <cppLoop+0x1bb8>)
 8008f18:	f7f9 f918 	bl	800214c <_ZN8JoyStick8getValueEv>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 82a7 	beq.w	800947c <cppLoop+0x1f84>
			HAL_Delay(500);
 8008f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f32:	f000 fbd1 	bl	80096d8 <HAL_Delay>

			led.LR(1, -1);
 8008f36:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	4859      	ldr	r0, [pc, #356]	; (80090a4 <cppLoop+0x1bac>)
 8008f3e:	f7f9 fa25 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008f42:	2102      	movs	r1, #2
 8008f44:	4867      	ldr	r0, [pc, #412]	; (80090e4 <cppLoop+0x1bec>)
 8008f46:	f7fa fe43 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008f4a:	4b67      	ldr	r3, [pc, #412]	; (80090e8 <cppLoop+0x1bf0>)
 8008f4c:	edd3 7a00 	vldr	s15, [r3]
 8008f50:	eeb0 0a67 	vmov.f32	s0, s15
 8008f54:	4863      	ldr	r0, [pc, #396]	; (80090e4 <cppLoop+0x1bec>)
 8008f56:	f7fa fc90 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008f5a:	4b60      	ldr	r3, [pc, #384]	; (80090dc <cppLoop+0x1be4>)
 8008f5c:	edd3 7a00 	vldr	s15, [r3]
 8008f60:	eeb0 0a67 	vmov.f32	s0, s15
 8008f64:	485f      	ldr	r0, [pc, #380]	; (80090e4 <cppLoop+0x1bec>)
 8008f66:	f7fa fc98 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008f6a:	4b5c      	ldr	r3, [pc, #368]	; (80090dc <cppLoop+0x1be4>)
 8008f6c:	edd3 7a00 	vldr	s15, [r3]
 8008f70:	eeb0 0a67 	vmov.f32	s0, s15
 8008f74:	485b      	ldr	r0, [pc, #364]	; (80090e4 <cppLoop+0x1bec>)
 8008f76:	f7fa fcb0 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008f7a:	485a      	ldr	r0, [pc, #360]	; (80090e4 <cppLoop+0x1bec>)
 8008f7c:	f7fb f81e 	bl	8003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 8008f80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008f84:	f000 fba8 	bl	80096d8 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 8008f88:	eddf 1a4a 	vldr	s3, [pc, #296]	; 80090b4 <cppLoop+0x1bbc>
 8008f8c:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80090b4 <cppLoop+0x1bbc>
 8008f90:	eddf 0a48 	vldr	s1, [pc, #288]	; 80090b4 <cppLoop+0x1bbc>
 8008f94:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80090b4 <cppLoop+0x1bbc>
 8008f98:	4847      	ldr	r0, [pc, #284]	; (80090b8 <cppLoop+0x1bc0>)
 8008f9a:	f7f8 f959 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8008f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fa2:	f000 fb99 	bl	80096d8 <HAL_Delay>

			line_trace.running();
 8008fa6:	484f      	ldr	r0, [pc, #316]	; (80090e4 <cppLoop+0x1bec>)
 8008fa8:	f7fa fe50 	bl	8003c4c <_ZN9LineTrace7runningEv>

			esc.off();
 8008fac:	4842      	ldr	r0, [pc, #264]	; (80090b8 <cppLoop+0x1bc0>)
 8008fae:	f7f8 f9e9 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	483a      	ldr	r0, [pc, #232]	; (80090a4 <cppLoop+0x1bac>)
 8008fba:	f7f9 f9e7 	bl	800238c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8008fbe:	e25d      	b.n	800947c <cppLoop+0x1f84>

	case 14:
		led.fullColor('W');
 8008fc0:	2157      	movs	r1, #87	; 0x57
 8008fc2:	4838      	ldr	r0, [pc, #224]	; (80090a4 <cppLoop+0x1bac>)
 8008fc4:	f7f9 f926 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fc8:	f7f8 f86a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fcc:	2100      	movs	r1, #0
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f7f8 f876 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008fd4:	4845      	ldr	r0, [pc, #276]	; (80090ec <cppLoop+0x1bf4>)
 8008fd6:	f7f8 f89d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fda:	2101      	movs	r1, #1
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f7f8 f86f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008fe2:	4b43      	ldr	r3, [pc, #268]	; (80090f0 <cppLoop+0x1bf8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f7 fac6 	bl	8000578 <__aeabi_f2d>
 8008fec:	4603      	mov	r3, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4623      	mov	r3, r4
 8008ff4:	483a      	ldr	r0, [pc, #232]	; (80090e0 <cppLoop+0x1be8>)
 8008ff6:	f7f8 f88d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008ffa:	482d      	ldr	r0, [pc, #180]	; (80090b0 <cppLoop+0x1bb8>)
 8008ffc:	f7f9 f8a6 	bl	800214c <_ZN8JoyStick8getValueEv>
 8009000:	4603      	mov	r3, r0
 8009002:	2b02      	cmp	r3, #2
 8009004:	bf0c      	ite	eq
 8009006:	2301      	moveq	r3, #1
 8009008:	2300      	movne	r3, #0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8237 	beq.w	8009480 <cppLoop+0x1f88>
			HAL_Delay(500);
 8009012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009016:	f000 fb5f 	bl	80096d8 <HAL_Delay>

			led.LR(1, -1);
 800901a:	f04f 32ff 	mov.w	r2, #4294967295
 800901e:	2101      	movs	r1, #1
 8009020:	4820      	ldr	r0, [pc, #128]	; (80090a4 <cppLoop+0x1bac>)
 8009022:	f7f9 f9b3 	bl	800238c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009026:	2101      	movs	r1, #1
 8009028:	482e      	ldr	r0, [pc, #184]	; (80090e4 <cppLoop+0x1bec>)
 800902a:	f7fa fdd1 	bl	8003bd0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800902e:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <cppLoop+0x1bfc>)
 8009030:	edd3 7a00 	vldr	s15, [r3]
 8009034:	eeb0 0a67 	vmov.f32	s0, s15
 8009038:	482a      	ldr	r0, [pc, #168]	; (80090e4 <cppLoop+0x1bec>)
 800903a:	f7fa fc1e 	bl	800387a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800903e:	4b2c      	ldr	r3, [pc, #176]	; (80090f0 <cppLoop+0x1bf8>)
 8009040:	edd3 7a00 	vldr	s15, [r3]
 8009044:	eeb0 0a67 	vmov.f32	s0, s15
 8009048:	4826      	ldr	r0, [pc, #152]	; (80090e4 <cppLoop+0x1bec>)
 800904a:	f7fa fc26 	bl	800389a <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800904e:	4b29      	ldr	r3, [pc, #164]	; (80090f4 <cppLoop+0x1bfc>)
 8009050:	edd3 7a00 	vldr	s15, [r3]
 8009054:	eeb0 0a67 	vmov.f32	s0, s15
 8009058:	4822      	ldr	r0, [pc, #136]	; (80090e4 <cppLoop+0x1bec>)
 800905a:	f7fa fc3e 	bl	80038da <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800905e:	4821      	ldr	r0, [pc, #132]	; (80090e4 <cppLoop+0x1bec>)
 8009060:	f7fa ffac 	bl	8003fbc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 8009064:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009068:	f000 fb36 	bl	80096d8 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 800906c:	eddf 1a11 	vldr	s3, [pc, #68]	; 80090b4 <cppLoop+0x1bbc>
 8009070:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80090b4 <cppLoop+0x1bbc>
 8009074:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80090b4 <cppLoop+0x1bbc>
 8009078:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80090b4 <cppLoop+0x1bbc>
 800907c:	480e      	ldr	r0, [pc, #56]	; (80090b8 <cppLoop+0x1bc0>)
 800907e:	f7f8 f8e7 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009086:	f000 fb27 	bl	80096d8 <HAL_Delay>

			line_trace.running();
 800908a:	4816      	ldr	r0, [pc, #88]	; (80090e4 <cppLoop+0x1bec>)
 800908c:	f7fa fdde 	bl	8003c4c <_ZN9LineTrace7runningEv>

			esc.off();
 8009090:	4809      	ldr	r0, [pc, #36]	; (80090b8 <cppLoop+0x1bc0>)
 8009092:	f7f8 f977 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	2100      	movs	r1, #0
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <cppLoop+0x1bac>)
 800909e:	f7f9 f975 	bl	800238c <_ZN3LED2LREaa>
		}

		break;
 80090a2:	e1ed      	b.n	8009480 <cppLoop+0x1f88>
 80090a4:	200005b8 	.word	0x200005b8
 80090a8:	0801992c 	.word	0x0801992c
 80090ac:	08019930 	.word	0x08019930
 80090b0:	200005ac 	.word	0x200005ac
 80090b4:	3eb33333 	.word	0x3eb33333
 80090b8:	2001db48 	.word	0x2001db48
 80090bc:	08019938 	.word	0x08019938
 80090c0:	0801993c 	.word	0x0801993c
 80090c4:	200005dc 	.word	0x200005dc
 80090c8:	2001dac8 	.word	0x2001dac8
 80090cc:	00000000 	.word	0x00000000
 80090d0:	08019948 	.word	0x08019948
 80090d4:	08019954 	.word	0x08019954
 80090d8:	08019960 	.word	0x08019960
 80090dc:	20042274 	.word	0x20042274
 80090e0:	08019804 	.word	0x08019804
 80090e4:	2001db4c 	.word	0x2001db4c
 80090e8:	20042284 	.word	0x20042284
 80090ec:	0801996c 	.word	0x0801996c
 80090f0:	2004226c 	.word	0x2004226c
 80090f4:	2004227c 	.word	0x2004227c

	case 15:
		led.fullColor('W');
 80090f8:	2157      	movs	r1, #87	; 0x57
 80090fa:	48a3      	ldr	r0, [pc, #652]	; (8009388 <cppLoop+0x1e90>)
 80090fc:	f7f9 f88a 	bl	8002214 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009100:	f7f7 ffce 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009104:	2100      	movs	r1, #0
 8009106:	2000      	movs	r0, #0
 8009108:	f7f7 ffda 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", line_trace.getKp()*1000);
 800910c:	489f      	ldr	r0, [pc, #636]	; (800938c <cppLoop+0x1e94>)
 800910e:	f7fa fb32 	bl	8003776 <_ZN9LineTrace5getKpEv>
 8009112:	eeb0 7a40 	vmov.f32	s14, s0
 8009116:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8009390 <cppLoop+0x1e98>
 800911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911e:	ee17 0a90 	vmov	r0, s15
 8009122:	f7f7 fa29 	bl	8000578 <__aeabi_f2d>
 8009126:	4603      	mov	r3, r0
 8009128:	460c      	mov	r4, r1
 800912a:	461a      	mov	r2, r3
 800912c:	4623      	mov	r3, r4
 800912e:	4899      	ldr	r0, [pc, #612]	; (8009394 <cppLoop+0x1e9c>)
 8009130:	f7f7 fff0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009134:	2101      	movs	r1, #1
 8009136:	2000      	movs	r0, #0
 8009138:	f7f7 ffc2 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 800913c:	4893      	ldr	r0, [pc, #588]	; (800938c <cppLoop+0x1e94>)
 800913e:	f7fa fb29 	bl	8003794 <_ZN9LineTrace5getKiEv>
 8009142:	eeb0 7a40 	vmov.f32	s14, s0
 8009146:	eddf 7a94 	vldr	s15, [pc, #592]	; 8009398 <cppLoop+0x1ea0>
 800914a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914e:	ee17 0a90 	vmov	r0, s15
 8009152:	f7f7 fa11 	bl	8000578 <__aeabi_f2d>
 8009156:	4605      	mov	r5, r0
 8009158:	460e      	mov	r6, r1
 800915a:	488c      	ldr	r0, [pc, #560]	; (800938c <cppLoop+0x1e94>)
 800915c:	f7fa fb29 	bl	80037b2 <_ZN9LineTrace5getKdEv>
 8009160:	eeb0 7a40 	vmov.f32	s14, s0
 8009164:	eddf 7a8d 	vldr	s15, [pc, #564]	; 800939c <cppLoop+0x1ea4>
 8009168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916c:	ee17 0a90 	vmov	r0, s15
 8009170:	f7f7 fa02 	bl	8000578 <__aeabi_f2d>
 8009174:	4603      	mov	r3, r0
 8009176:	460c      	mov	r4, r1
 8009178:	e9cd 3400 	strd	r3, r4, [sp]
 800917c:	462a      	mov	r2, r5
 800917e:	4633      	mov	r3, r6
 8009180:	4887      	ldr	r0, [pc, #540]	; (80093a0 <cppLoop+0x1ea8>)
 8009182:	f7f7 ffc7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009186:	4887      	ldr	r0, [pc, #540]	; (80093a4 <cppLoop+0x1eac>)
 8009188:	f7f8 ffe0 	bl	800214c <_ZN8JoyStick8getValueEv>
 800918c:	4603      	mov	r3, r0
 800918e:	2b08      	cmp	r3, #8
 8009190:	bf0c      	ite	eq
 8009192:	2301      	moveq	r3, #1
 8009194:	2300      	movne	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d021      	beq.n	80091e0 <cppLoop+0x1ce8>
			led.LR(-1, 1);
 800919c:	2201      	movs	r2, #1
 800919e:	f04f 31ff 	mov.w	r1, #4294967295
 80091a2:	4879      	ldr	r0, [pc, #484]	; (8009388 <cppLoop+0x1e90>)
 80091a4:	f7f9 f8f2 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091ac:	f000 fa94 	bl	80096d8 <HAL_Delay>

			selector++;
 80091b0:	4b7d      	ldr	r3, [pc, #500]	; (80093a8 <cppLoop+0x1eb0>)
 80091b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	3301      	adds	r3, #1
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	b21a      	sxth	r2, r3
 80091be:	4b7a      	ldr	r3, [pc, #488]	; (80093a8 <cppLoop+0x1eb0>)
 80091c0:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80091c2:	4b79      	ldr	r3, [pc, #484]	; (80093a8 <cppLoop+0x1eb0>)
 80091c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	dd02      	ble.n	80091d2 <cppLoop+0x1cda>
 80091cc:	4b76      	ldr	r3, [pc, #472]	; (80093a8 <cppLoop+0x1eb0>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80091d2:	2200      	movs	r2, #0
 80091d4:	f04f 31ff 	mov.w	r1, #4294967295
 80091d8:	486b      	ldr	r0, [pc, #428]	; (8009388 <cppLoop+0x1e90>)
 80091da:	f7f9 f8d7 	bl	800238c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80091de:	e151      	b.n	8009484 <cppLoop+0x1f8c>
		else if(joy_stick.getValue() == JOY_R){
 80091e0:	4870      	ldr	r0, [pc, #448]	; (80093a4 <cppLoop+0x1eac>)
 80091e2:	f7f8 ffb3 	bl	800214c <_ZN8JoyStick8getValueEv>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b10      	cmp	r3, #16
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d058      	beq.n	80092a8 <cppLoop+0x1db0>
			led.LR(-1, 1);
 80091f6:	2201      	movs	r2, #1
 80091f8:	f04f 31ff 	mov.w	r1, #4294967295
 80091fc:	4862      	ldr	r0, [pc, #392]	; (8009388 <cppLoop+0x1e90>)
 80091fe:	f7f9 f8c5 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009202:	2064      	movs	r0, #100	; 0x64
 8009204:	f000 fa68 	bl	80096d8 <HAL_Delay>
			if(selector == 0){
 8009208:	4b67      	ldr	r3, [pc, #412]	; (80093a8 <cppLoop+0x1eb0>)
 800920a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d113      	bne.n	800923a <cppLoop+0x1d42>
				adj_kp = adj_kp + 0.00001;
 8009212:	4b66      	ldr	r3, [pc, #408]	; (80093ac <cppLoop+0x1eb4>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4618      	mov	r0, r3
 8009218:	f7f7 f9ae 	bl	8000578 <__aeabi_f2d>
 800921c:	a354      	add	r3, pc, #336	; (adr r3, 8009370 <cppLoop+0x1e78>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f84b 	bl	80002bc <__adddf3>
 8009226:	4603      	mov	r3, r0
 8009228:	460c      	mov	r4, r1
 800922a:	4618      	mov	r0, r3
 800922c:	4621      	mov	r1, r4
 800922e:	f7f7 fcf3 	bl	8000c18 <__aeabi_d2f>
 8009232:	4602      	mov	r2, r0
 8009234:	4b5d      	ldr	r3, [pc, #372]	; (80093ac <cppLoop+0x1eb4>)
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e02b      	b.n	8009292 <cppLoop+0x1d9a>
			else if(selector == 1){
 800923a:	4b5b      	ldr	r3, [pc, #364]	; (80093a8 <cppLoop+0x1eb0>)
 800923c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d113      	bne.n	800926c <cppLoop+0x1d74>
				adj_ki = adj_ki + 0.0001;
 8009244:	4b5a      	ldr	r3, [pc, #360]	; (80093b0 <cppLoop+0x1eb8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f7f7 f995 	bl	8000578 <__aeabi_f2d>
 800924e:	a34a      	add	r3, pc, #296	; (adr r3, 8009378 <cppLoop+0x1e80>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 f832 	bl	80002bc <__adddf3>
 8009258:	4603      	mov	r3, r0
 800925a:	460c      	mov	r4, r1
 800925c:	4618      	mov	r0, r3
 800925e:	4621      	mov	r1, r4
 8009260:	f7f7 fcda 	bl	8000c18 <__aeabi_d2f>
 8009264:	4602      	mov	r2, r0
 8009266:	4b52      	ldr	r3, [pc, #328]	; (80093b0 <cppLoop+0x1eb8>)
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e012      	b.n	8009292 <cppLoop+0x1d9a>
				adj_kd = adj_kd + 0.000001;
 800926c:	4b51      	ldr	r3, [pc, #324]	; (80093b4 <cppLoop+0x1ebc>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f7f7 f981 	bl	8000578 <__aeabi_f2d>
 8009276:	a342      	add	r3, pc, #264	; (adr r3, 8009380 <cppLoop+0x1e88>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f7 f81e 	bl	80002bc <__adddf3>
 8009280:	4603      	mov	r3, r0
 8009282:	460c      	mov	r4, r1
 8009284:	4618      	mov	r0, r3
 8009286:	4621      	mov	r1, r4
 8009288:	f7f7 fcc6 	bl	8000c18 <__aeabi_d2f>
 800928c:	4602      	mov	r2, r0
 800928e:	4b49      	ldr	r3, [pc, #292]	; (80093b4 <cppLoop+0x1ebc>)
 8009290:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009292:	2152      	movs	r1, #82	; 0x52
 8009294:	483c      	ldr	r0, [pc, #240]	; (8009388 <cppLoop+0x1e90>)
 8009296:	f7f8 ffbd 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800929a:	2200      	movs	r2, #0
 800929c:	f04f 31ff 	mov.w	r1, #4294967295
 80092a0:	4839      	ldr	r0, [pc, #228]	; (8009388 <cppLoop+0x1e90>)
 80092a2:	f7f9 f873 	bl	800238c <_ZN3LED2LREaa>
		break;
 80092a6:	e0ed      	b.n	8009484 <cppLoop+0x1f8c>
		else if(joy_stick.getValue() == JOY_L){
 80092a8:	483e      	ldr	r0, [pc, #248]	; (80093a4 <cppLoop+0x1eac>)
 80092aa:	f7f8 ff4f 	bl	800214c <_ZN8JoyStick8getValueEv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	bf0c      	ite	eq
 80092b4:	2301      	moveq	r3, #1
 80092b6:	2300      	movne	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d07c      	beq.n	80093b8 <cppLoop+0x1ec0>
			led.LR(-1, 1);
 80092be:	2201      	movs	r2, #1
 80092c0:	f04f 31ff 	mov.w	r1, #4294967295
 80092c4:	4830      	ldr	r0, [pc, #192]	; (8009388 <cppLoop+0x1e90>)
 80092c6:	f7f9 f861 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80092ca:	2064      	movs	r0, #100	; 0x64
 80092cc:	f000 fa04 	bl	80096d8 <HAL_Delay>
			if(selector == 0){
 80092d0:	4b35      	ldr	r3, [pc, #212]	; (80093a8 <cppLoop+0x1eb0>)
 80092d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d113      	bne.n	8009302 <cppLoop+0x1e0a>
				adj_kp = adj_kp - 0.00001;
 80092da:	4b34      	ldr	r3, [pc, #208]	; (80093ac <cppLoop+0x1eb4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f7 f94a 	bl	8000578 <__aeabi_f2d>
 80092e4:	a322      	add	r3, pc, #136	; (adr r3, 8009370 <cppLoop+0x1e78>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ffe5 	bl	80002b8 <__aeabi_dsub>
 80092ee:	4603      	mov	r3, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	4618      	mov	r0, r3
 80092f4:	4621      	mov	r1, r4
 80092f6:	f7f7 fc8f 	bl	8000c18 <__aeabi_d2f>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4b2b      	ldr	r3, [pc, #172]	; (80093ac <cppLoop+0x1eb4>)
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e02b      	b.n	800935a <cppLoop+0x1e62>
			else if(selector == 1){
 8009302:	4b29      	ldr	r3, [pc, #164]	; (80093a8 <cppLoop+0x1eb0>)
 8009304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d113      	bne.n	8009334 <cppLoop+0x1e3c>
				adj_ki = adj_ki - 0.0001;
 800930c:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <cppLoop+0x1eb8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f7f7 f931 	bl	8000578 <__aeabi_f2d>
 8009316:	a318      	add	r3, pc, #96	; (adr r3, 8009378 <cppLoop+0x1e80>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f6 ffcc 	bl	80002b8 <__aeabi_dsub>
 8009320:	4603      	mov	r3, r0
 8009322:	460c      	mov	r4, r1
 8009324:	4618      	mov	r0, r3
 8009326:	4621      	mov	r1, r4
 8009328:	f7f7 fc76 	bl	8000c18 <__aeabi_d2f>
 800932c:	4602      	mov	r2, r0
 800932e:	4b20      	ldr	r3, [pc, #128]	; (80093b0 <cppLoop+0x1eb8>)
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	e012      	b.n	800935a <cppLoop+0x1e62>
				adj_kd = adj_kd - 0.000001;
 8009334:	4b1f      	ldr	r3, [pc, #124]	; (80093b4 <cppLoop+0x1ebc>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4618      	mov	r0, r3
 800933a:	f7f7 f91d 	bl	8000578 <__aeabi_f2d>
 800933e:	a310      	add	r3, pc, #64	; (adr r3, 8009380 <cppLoop+0x1e88>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f7f6 ffb8 	bl	80002b8 <__aeabi_dsub>
 8009348:	4603      	mov	r3, r0
 800934a:	460c      	mov	r4, r1
 800934c:	4618      	mov	r0, r3
 800934e:	4621      	mov	r1, r4
 8009350:	f7f7 fc62 	bl	8000c18 <__aeabi_d2f>
 8009354:	4602      	mov	r2, r0
 8009356:	4b17      	ldr	r3, [pc, #92]	; (80093b4 <cppLoop+0x1ebc>)
 8009358:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800935a:	2152      	movs	r1, #82	; 0x52
 800935c:	480a      	ldr	r0, [pc, #40]	; (8009388 <cppLoop+0x1e90>)
 800935e:	f7f8 ff59 	bl	8002214 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009362:	2200      	movs	r2, #0
 8009364:	f04f 31ff 	mov.w	r1, #4294967295
 8009368:	4807      	ldr	r0, [pc, #28]	; (8009388 <cppLoop+0x1e90>)
 800936a:	f7f9 f80f 	bl	800238c <_ZN3LED2LREaa>
		break;
 800936e:	e089      	b.n	8009484 <cppLoop+0x1f8c>
 8009370:	88e368f1 	.word	0x88e368f1
 8009374:	3ee4f8b5 	.word	0x3ee4f8b5
 8009378:	eb1c432d 	.word	0xeb1c432d
 800937c:	3f1a36e2 	.word	0x3f1a36e2
 8009380:	a0b5ed8d 	.word	0xa0b5ed8d
 8009384:	3eb0c6f7 	.word	0x3eb0c6f7
 8009388:	200005b8 	.word	0x200005b8
 800938c:	2001db4c 	.word	0x2001db4c
 8009390:	447a0000 	.word	0x447a0000
 8009394:	08019978 	.word	0x08019978
 8009398:	42c80000 	.word	0x42c80000
 800939c:	461c4000 	.word	0x461c4000
 80093a0:	080197bc 	.word	0x080197bc
 80093a4:	200005ac 	.word	0x200005ac
 80093a8:	2004222a 	.word	0x2004222a
 80093ac:	20042234 	.word	0x20042234
 80093b0:	2004223c 	.word	0x2004223c
 80093b4:	20042244 	.word	0x20042244
		else if(joy_stick.getValue() == JOY_C){
 80093b8:	4836      	ldr	r0, [pc, #216]	; (8009494 <cppLoop+0x1f9c>)
 80093ba:	f7f8 fec7 	bl	800214c <_ZN8JoyStick8getValueEv>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	bf0c      	ite	eq
 80093c4:	2301      	moveq	r3, #1
 80093c6:	2300      	movne	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d05a      	beq.n	8009484 <cppLoop+0x1f8c>
			led.LR(-1, 1);
 80093ce:	2201      	movs	r2, #1
 80093d0:	f04f 31ff 	mov.w	r1, #4294967295
 80093d4:	4830      	ldr	r0, [pc, #192]	; (8009498 <cppLoop+0x1fa0>)
 80093d6:	f7f8 ffd9 	bl	800238c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093de:	f000 f97b 	bl	80096d8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80093e2:	2300      	movs	r3, #0
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4b2d      	ldr	r3, [pc, #180]	; (800949c <cppLoop+0x1fa4>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	492d      	ldr	r1, [pc, #180]	; (80094a0 <cppLoop+0x1fa8>)
 80093ec:	482d      	ldr	r0, [pc, #180]	; (80094a4 <cppLoop+0x1fac>)
 80093ee:	f7f8 fa27 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80093f2:	2300      	movs	r3, #0
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4b2c      	ldr	r3, [pc, #176]	; (80094a8 <cppLoop+0x1fb0>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	492c      	ldr	r1, [pc, #176]	; (80094ac <cppLoop+0x1fb4>)
 80093fc:	4829      	ldr	r0, [pc, #164]	; (80094a4 <cppLoop+0x1fac>)
 80093fe:	f7f8 fa1f 	bl	8001840 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009402:	2300      	movs	r3, #0
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	4b2a      	ldr	r3, [pc, #168]	; (80094b0 <cppLoop+0x1fb8>)
 8009408:	2201      	movs	r2, #1
 800940a:	492a      	ldr	r1, [pc, #168]	; (80094b4 <cppLoop+0x1fbc>)
 800940c:	4825      	ldr	r0, [pc, #148]	; (80094a4 <cppLoop+0x1fac>)
 800940e:	f7f8 fa17 	bl	8001840 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009412:	4b22      	ldr	r3, [pc, #136]	; (800949c <cppLoop+0x1fa4>)
 8009414:	edd3 7a00 	vldr	s15, [r3]
 8009418:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <cppLoop+0x1fb0>)
 800941a:	ed93 7a00 	vldr	s14, [r3]
 800941e:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <cppLoop+0x1fb8>)
 8009420:	edd3 6a00 	vldr	s13, [r3]
 8009424:	eeb0 1a66 	vmov.f32	s2, s13
 8009428:	eef0 0a47 	vmov.f32	s1, s14
 800942c:	eeb0 0a67 	vmov.f32	s0, s15
 8009430:	4821      	ldr	r0, [pc, #132]	; (80094b8 <cppLoop+0x1fc0>)
 8009432:	f7fa f987 	bl	8003744 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009436:	2200      	movs	r2, #0
 8009438:	f04f 31ff 	mov.w	r1, #4294967295
 800943c:	4816      	ldr	r0, [pc, #88]	; (8009498 <cppLoop+0x1fa0>)
 800943e:	f7f8 ffa5 	bl	800238c <_ZN3LED2LREaa>
		break;
 8009442:	e01f      	b.n	8009484 <cppLoop+0x1f8c>

	default:
		break;
 8009444:	bf00      	nop
 8009446:	e01e      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009448:	bf00      	nop
 800944a:	e01c      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 800944c:	bf00      	nop
 800944e:	e01a      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009450:	bf00      	nop
 8009452:	e018      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009454:	bf00      	nop
 8009456:	e016      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009458:	bf00      	nop
 800945a:	e014      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 800945c:	bf00      	nop
 800945e:	e012      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009460:	bf00      	nop
 8009462:	e010      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009464:	bf00      	nop
 8009466:	e00e      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009468:	bf00      	nop
 800946a:	e00c      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 800946c:	bf00      	nop
 800946e:	e00a      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009470:	bf00      	nop
 8009472:	e008      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009474:	bf00      	nop
 8009476:	e006      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009478:	bf00      	nop
 800947a:	e004      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 800947c:	bf00      	nop
 800947e:	e002      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009480:	bf00      	nop
 8009482:	e000      	b.n	8009486 <cppLoop+0x1f8e>
		break;
 8009484:	bf00      	nop

	}

	HAL_Delay(30);
 8009486:	201e      	movs	r0, #30
 8009488:	f000 f926 	bl	80096d8 <HAL_Delay>

}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009494:	200005ac 	.word	0x200005ac
 8009498:	200005b8 	.word	0x200005b8
 800949c:	20042234 	.word	0x20042234
 80094a0:	08019984 	.word	0x08019984
 80094a4:	080197d8 	.word	0x080197d8
 80094a8:	2004223c 	.word	0x2004223c
 80094ac:	0801998c 	.word	0x0801998c
 80094b0:	20042244 	.word	0x20042244
 80094b4:	08019994 	.word	0x08019994
 80094b8:	2001db4c 	.word	0x2001db4c

080094bc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af06      	add	r7, sp, #24
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d142      	bne.n	8009552 <_Z41__static_initialization_and_destruction_0ii+0x96>
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d13d      	bne.n	8009552 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 80094d6:	4821      	ldr	r0, [pc, #132]	; (800955c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80094d8:	f7f8 ff90 	bl	80023fc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80094dc:	4820      	ldr	r0, [pc, #128]	; (8009560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80094de:	f7fb fc6b 	bl	8004db8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80094e2:	4820      	ldr	r0, [pc, #128]	; (8009564 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80094e4:	f7f8 fe26 	bl	8002134 <_ZN8JoyStickC1Ev>
Motor motor;
 80094e8:	481f      	ldr	r0, [pc, #124]	; (8009568 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80094ea:	f7fb f886 	bl	80045fa <_ZN5MotorC1Ev>
IMU imu;
 80094ee:	481f      	ldr	r0, [pc, #124]	; (800956c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80094f0:	f7f8 fc1e 	bl	8001d30 <_ZN3IMUC1Ev>
Logger logger;
 80094f4:	481e      	ldr	r0, [pc, #120]	; (8009570 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80094f6:	f7fa fe51 	bl	800419c <_ZN6LoggerC1Ev>
Encoder encoder;
 80094fa:	481e      	ldr	r0, [pc, #120]	; (8009574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80094fc:	f7f7 ff66 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009502:	4a1c      	ldr	r2, [pc, #112]	; (8009574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009504:	4918      	ldr	r1, [pc, #96]	; (8009568 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009506:	481c      	ldr	r0, [pc, #112]	; (8009578 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009508:	f7fb ffd2 	bl	80054b0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800950c:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800950e:	4a17      	ldr	r2, [pc, #92]	; (800956c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009510:	4918      	ldr	r1, [pc, #96]	; (8009574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009512:	481a      	ldr	r0, [pc, #104]	; (800957c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009514:	f7fb f970 	bl	80047f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009518:	4819      	ldr	r0, [pc, #100]	; (8009580 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800951a:	f7f7 fe5b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800951e:	4b18      	ldr	r3, [pc, #96]	; (8009580 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	4b12      	ldr	r3, [pc, #72]	; (800956c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	4b12      	ldr	r3, [pc, #72]	; (8009570 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009528:	9303      	str	r3, [sp, #12]
 800952a:	4b14      	ldr	r3, [pc, #80]	; (800957c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800952c:	9302      	str	r3, [sp, #8]
 800952e:	4b11      	ldr	r3, [pc, #68]	; (8009574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	4b10      	ldr	r3, [pc, #64]	; (8009578 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009538:	4a08      	ldr	r2, [pc, #32]	; (800955c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800953a:	490b      	ldr	r1, [pc, #44]	; (8009568 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800953c:	4811      	ldr	r0, [pc, #68]	; (8009584 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800953e:	f7f9 faa5 	bl	8002a8c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009542:	4a09      	ldr	r2, [pc, #36]	; (8009568 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009544:	490a      	ldr	r1, [pc, #40]	; (8009570 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009546:	4810      	ldr	r0, [pc, #64]	; (8009588 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009548:	f7fb fd98 	bl	800507c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800954c:	480f      	ldr	r0, [pc, #60]	; (800958c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800954e:	f7fb fac5 	bl	8004adc <_ZN13PathFollowingC1Ev>
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	200002a8 	.word	0x200002a8
 8009560:	200005a0 	.word	0x200005a0
 8009564:	200005ac 	.word	0x200005ac
 8009568:	200005b4 	.word	0x200005b4
 800956c:	200005c8 	.word	0x200005c8
 8009570:	200005dc 	.word	0x200005dc
 8009574:	2001daa8 	.word	0x2001daa8
 8009578:	2001dac8 	.word	0x2001dac8
 800957c:	2001db08 	.word	0x2001db08
 8009580:	2001db48 	.word	0x2001db48
 8009584:	2001db4c 	.word	0x2001db4c
 8009588:	2002a8f4 	.word	0x2002a8f4
 800958c:	2002ab00 	.word	0x2002ab00

08009590 <_GLOBAL__sub_I_line_sensor>:
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
 8009594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009598:	2001      	movs	r0, #1
 800959a:	f7ff ff8f 	bl	80094bc <_Z41__static_initialization_and_destruction_0ii>
 800959e:	bd80      	pop	{r7, pc}

080095a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80095a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80095a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80095a6:	e003      	b.n	80095b0 <LoopCopyDataInit>

080095a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80095a8:	4b0c      	ldr	r3, [pc, #48]	; (80095dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80095aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80095ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80095ae:	3104      	adds	r1, #4

080095b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80095b0:	480b      	ldr	r0, [pc, #44]	; (80095e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80095b2:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80095b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80095b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80095b8:	d3f6      	bcc.n	80095a8 <CopyDataInit>
  ldr  r2, =_sbss
 80095ba:	4a0b      	ldr	r2, [pc, #44]	; (80095e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80095bc:	e002      	b.n	80095c4 <LoopFillZerobss>

080095be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80095be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80095c0:	f842 3b04 	str.w	r3, [r2], #4

080095c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80095c4:	4b09      	ldr	r3, [pc, #36]	; (80095ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80095c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80095c8:	d3f9      	bcc.n	80095be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80095ca:	f7fd fe73 	bl	80072b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80095ce:	f00b fdd3 	bl	8015178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80095d2:	f7fc f9ad 	bl	8005930 <main>
  bx  lr    
 80095d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80095d8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80095dc:	08019f88 	.word	0x08019f88
  ldr  r0, =_sdata
 80095e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80095e4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80095e8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80095ec:	20046c88 	.word	0x20046c88

080095f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80095f0:	e7fe      	b.n	80095f0 <ADC_IRQHandler>
	...

080095f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80095f8:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <HAL_Init+0x40>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a0d      	ldr	r2, [pc, #52]	; (8009634 <HAL_Init+0x40>)
 80095fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009604:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <HAL_Init+0x40>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a0a      	ldr	r2, [pc, #40]	; (8009634 <HAL_Init+0x40>)
 800960a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800960e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009610:	4b08      	ldr	r3, [pc, #32]	; (8009634 <HAL_Init+0x40>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a07      	ldr	r2, [pc, #28]	; (8009634 <HAL_Init+0x40>)
 8009616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800961a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800961c:	2003      	movs	r0, #3
 800961e:	f000 fd51 	bl	800a0c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009622:	2000      	movs	r0, #0
 8009624:	f000 f808 	bl	8009638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009628:	f7fd f894 	bl	8006754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40023c00 	.word	0x40023c00

08009638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009640:	4b12      	ldr	r3, [pc, #72]	; (800968c <HAL_InitTick+0x54>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	4b12      	ldr	r3, [pc, #72]	; (8009690 <HAL_InitTick+0x58>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	4619      	mov	r1, r3
 800964a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800964e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fd69 	bl	800a12e <HAL_SYSTICK_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e00e      	b.n	8009684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2b0f      	cmp	r3, #15
 800966a:	d80a      	bhi.n	8009682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800966c:	2200      	movs	r2, #0
 800966e:	6879      	ldr	r1, [r7, #4]
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	f000 fd31 	bl	800a0da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009678:	4a06      	ldr	r2, [pc, #24]	; (8009694 <HAL_InitTick+0x5c>)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e000      	b.n	8009684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000000 	.word	0x20000000
 8009690:	20000008 	.word	0x20000008
 8009694:	20000004 	.word	0x20000004

08009698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <HAL_IncTick+0x20>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	4b06      	ldr	r3, [pc, #24]	; (80096bc <HAL_IncTick+0x24>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4413      	add	r3, r2
 80096a8:	4a04      	ldr	r2, [pc, #16]	; (80096bc <HAL_IncTick+0x24>)
 80096aa:	6013      	str	r3, [r2, #0]
}
 80096ac:	bf00      	nop
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000008 	.word	0x20000008
 80096bc:	20044c10 	.word	0x20044c10

080096c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0
  return uwTick;
 80096c4:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <HAL_GetTick+0x14>)
 80096c6:	681b      	ldr	r3, [r3, #0]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20044c10 	.word	0x20044c10

080096d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80096e0:	f7ff ffee 	bl	80096c0 <HAL_GetTick>
 80096e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d005      	beq.n	80096fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80096f2:	4b09      	ldr	r3, [pc, #36]	; (8009718 <HAL_Delay+0x40>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80096fe:	bf00      	nop
 8009700:	f7ff ffde 	bl	80096c0 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	429a      	cmp	r2, r3
 800970e:	d8f7      	bhi.n	8009700 <HAL_Delay+0x28>
  {
  }
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000008 	.word	0x20000008

0800971c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e033      	b.n	800979a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d109      	bne.n	800974e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7fd f832 	bl	80067a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	f003 0310 	and.w	r3, r3, #16
 8009756:	2b00      	cmp	r3, #0
 8009758:	d118      	bne.n	800978c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009762:	f023 0302 	bic.w	r3, r3, #2
 8009766:	f043 0202 	orr.w	r2, r3, #2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa5a 	bl	8009c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	f023 0303 	bic.w	r3, r3, #3
 8009782:	f043 0201 	orr.w	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	641a      	str	r2, [r3, #64]	; 0x40
 800978a:	e001      	b.n	8009790 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d101      	bne.n	80097c2 <HAL_ADC_Start_DMA+0x1e>
 80097be:	2302      	movs	r3, #2
 80097c0:	e0cc      	b.n	800995c <HAL_ADC_Start_DMA+0x1b8>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d018      	beq.n	800980a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80097e8:	4b5e      	ldr	r3, [pc, #376]	; (8009964 <HAL_ADC_Start_DMA+0x1c0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a5e      	ldr	r2, [pc, #376]	; (8009968 <HAL_ADC_Start_DMA+0x1c4>)
 80097ee:	fba2 2303 	umull	r2, r3, r2, r3
 80097f2:	0c9a      	lsrs	r2, r3, #18
 80097f4:	4613      	mov	r3, r2
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	4413      	add	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80097fc:	e002      	b.n	8009804 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3b01      	subs	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1f9      	bne.n	80097fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b01      	cmp	r3, #1
 8009816:	f040 80a0 	bne.w	800995a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009844:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009858:	d106      	bne.n	8009868 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985e:	f023 0206 	bic.w	r2, r3, #6
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	645a      	str	r2, [r3, #68]	; 0x44
 8009866:	e002      	b.n	800986e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009876:	4b3d      	ldr	r3, [pc, #244]	; (800996c <HAL_ADC_Start_DMA+0x1c8>)
 8009878:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	4a3c      	ldr	r2, [pc, #240]	; (8009970 <HAL_ADC_Start_DMA+0x1cc>)
 8009880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	4a3b      	ldr	r2, [pc, #236]	; (8009974 <HAL_ADC_Start_DMA+0x1d0>)
 8009888:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	4a3a      	ldr	r2, [pc, #232]	; (8009978 <HAL_ADC_Start_DMA+0x1d4>)
 8009890:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800989a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80098aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	334c      	adds	r3, #76	; 0x4c
 80098c6:	4619      	mov	r1, r3
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f000 fcea 	bl	800a2a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f003 031f 	and.w	r3, r3, #31
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d12a      	bne.n	8009932 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <HAL_ADC_Start_DMA+0x1d8>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d015      	beq.n	8009912 <HAL_ADC_Start_DMA+0x16e>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a25      	ldr	r2, [pc, #148]	; (8009980 <HAL_ADC_Start_DMA+0x1dc>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d105      	bne.n	80098fc <HAL_ADC_Start_DMA+0x158>
 80098f0:	4b1e      	ldr	r3, [pc, #120]	; (800996c <HAL_ADC_Start_DMA+0x1c8>)
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f003 031f 	and.w	r3, r3, #31
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a20      	ldr	r2, [pc, #128]	; (8009984 <HAL_ADC_Start_DMA+0x1e0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d129      	bne.n	800995a <HAL_ADC_Start_DMA+0x1b6>
 8009906:	4b19      	ldr	r3, [pc, #100]	; (800996c <HAL_ADC_Start_DMA+0x1c8>)
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f003 031f 	and.w	r3, r3, #31
 800990e:	2b0f      	cmp	r3, #15
 8009910:	d823      	bhi.n	800995a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d11c      	bne.n	800995a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800992e:	609a      	str	r2, [r3, #8]
 8009930:	e013      	b.n	800995a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a11      	ldr	r2, [pc, #68]	; (800997c <HAL_ADC_Start_DMA+0x1d8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d10e      	bne.n	800995a <HAL_ADC_Start_DMA+0x1b6>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d107      	bne.n	800995a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009958:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000000 	.word	0x20000000
 8009968:	431bde83 	.word	0x431bde83
 800996c:	40012300 	.word	0x40012300
 8009970:	08009e21 	.word	0x08009e21
 8009974:	08009edb 	.word	0x08009edb
 8009978:	08009ef7 	.word	0x08009ef7
 800997c:	40012000 	.word	0x40012000
 8009980:	40012100 	.word	0x40012100
 8009984:	40012200 	.word	0x40012200

08009988 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d101      	bne.n	80099e0 <HAL_ADC_ConfigChannel+0x1c>
 80099dc:	2302      	movs	r3, #2
 80099de:	e113      	b.n	8009c08 <HAL_ADC_ConfigChannel+0x244>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b09      	cmp	r3, #9
 80099ee:	d925      	bls.n	8009a3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68d9      	ldr	r1, [r3, #12]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	4613      	mov	r3, r2
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	4413      	add	r3, r2
 8009a04:	3b1e      	subs	r3, #30
 8009a06:	2207      	movs	r2, #7
 8009a08:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0c:	43da      	mvns	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	400a      	ands	r2, r1
 8009a14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68d9      	ldr	r1, [r3, #12]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	4618      	mov	r0, r3
 8009a28:	4603      	mov	r3, r0
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	4403      	add	r3, r0
 8009a2e:	3b1e      	subs	r3, #30
 8009a30:	409a      	lsls	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e022      	b.n	8009a82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6919      	ldr	r1, [r3, #16]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	4413      	add	r3, r2
 8009a50:	2207      	movs	r2, #7
 8009a52:	fa02 f303 	lsl.w	r3, r2, r3
 8009a56:	43da      	mvns	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	400a      	ands	r2, r1
 8009a5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6919      	ldr	r1, [r3, #16]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	4618      	mov	r0, r3
 8009a72:	4603      	mov	r3, r0
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	4403      	add	r3, r0
 8009a78:	409a      	lsls	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2b06      	cmp	r3, #6
 8009a88:	d824      	bhi.n	8009ad4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	3b05      	subs	r3, #5
 8009a9c:	221f      	movs	r2, #31
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43da      	mvns	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	400a      	ands	r2, r1
 8009aaa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	4618      	mov	r0, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	3b05      	subs	r3, #5
 8009ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8009ad2:	e04c      	b.n	8009b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b0c      	cmp	r3, #12
 8009ada:	d824      	bhi.n	8009b26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	3b23      	subs	r3, #35	; 0x23
 8009aee:	221f      	movs	r2, #31
 8009af0:	fa02 f303 	lsl.w	r3, r2, r3
 8009af4:	43da      	mvns	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	400a      	ands	r2, r1
 8009afc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	3b23      	subs	r3, #35	; 0x23
 8009b18:	fa00 f203 	lsl.w	r2, r0, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	631a      	str	r2, [r3, #48]	; 0x30
 8009b24:	e023      	b.n	8009b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	3b41      	subs	r3, #65	; 0x41
 8009b38:	221f      	movs	r2, #31
 8009b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3e:	43da      	mvns	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	400a      	ands	r2, r1
 8009b46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	4618      	mov	r0, r3
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	3b41      	subs	r3, #65	; 0x41
 8009b62:	fa00 f203 	lsl.w	r2, r0, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b6e:	4b29      	ldr	r3, [pc, #164]	; (8009c14 <HAL_ADC_ConfigChannel+0x250>)
 8009b70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a28      	ldr	r2, [pc, #160]	; (8009c18 <HAL_ADC_ConfigChannel+0x254>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d10f      	bne.n	8009b9c <HAL_ADC_ConfigChannel+0x1d8>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b12      	cmp	r3, #18
 8009b82:	d10b      	bne.n	8009b9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	; (8009c18 <HAL_ADC_ConfigChannel+0x254>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d12b      	bne.n	8009bfe <HAL_ADC_ConfigChannel+0x23a>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a1c      	ldr	r2, [pc, #112]	; (8009c1c <HAL_ADC_ConfigChannel+0x258>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <HAL_ADC_ConfigChannel+0x1f4>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b11      	cmp	r3, #17
 8009bb6:	d122      	bne.n	8009bfe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <HAL_ADC_ConfigChannel+0x258>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d111      	bne.n	8009bfe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009bda:	4b11      	ldr	r3, [pc, #68]	; (8009c20 <HAL_ADC_ConfigChannel+0x25c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <HAL_ADC_ConfigChannel+0x260>)
 8009be0:	fba2 2303 	umull	r2, r3, r2, r3
 8009be4:	0c9a      	lsrs	r2, r3, #18
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009bf0:	e002      	b.n	8009bf8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1f9      	bne.n	8009bf2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	40012300 	.word	0x40012300
 8009c18:	40012000 	.word	0x40012000
 8009c1c:	10000012 	.word	0x10000012
 8009c20:	20000000 	.word	0x20000000
 8009c24:	431bde83 	.word	0x431bde83

08009c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009c30:	4b79      	ldr	r3, [pc, #484]	; (8009e18 <ADC_Init+0x1f0>)
 8009c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6859      	ldr	r1, [r3, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	021a      	lsls	r2, r3, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6859      	ldr	r1, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6899      	ldr	r1, [r3, #8]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cba:	4a58      	ldr	r2, [pc, #352]	; (8009e1c <ADC_Init+0x1f4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d022      	beq.n	8009d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6899      	ldr	r1, [r3, #8]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6899      	ldr	r1, [r3, #8]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	609a      	str	r2, [r3, #8]
 8009d04:	e00f      	b.n	8009d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 0202 	bic.w	r2, r2, #2
 8009d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6899      	ldr	r1, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7e1b      	ldrb	r3, [r3, #24]
 8009d40:	005a      	lsls	r2, r3, #1
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d01b      	beq.n	8009d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6859      	ldr	r1, [r3, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	035a      	lsls	r2, r3, #13
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]
 8009d8a:	e007      	b.n	8009d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	051a      	lsls	r2, r3, #20
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6899      	ldr	r1, [r3, #8]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dde:	025a      	lsls	r2, r3, #9
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6899      	ldr	r1, [r3, #8]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	029a      	lsls	r2, r3, #10
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	609a      	str	r2, [r3, #8]
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	40012300 	.word	0x40012300
 8009e1c:	0f000001 	.word	0x0f000001

08009e20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d13c      	bne.n	8009eb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d12b      	bne.n	8009eac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d127      	bne.n	8009eac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d006      	beq.n	8009e78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d119      	bne.n	8009eac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0220 	bic.w	r2, r2, #32
 8009e86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d105      	bne.n	8009eac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	f043 0201 	orr.w	r2, r3, #1
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff fd6b 	bl	8009988 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009eb2:	e00e      	b.n	8009ed2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	f003 0310 	and.w	r3, r3, #16
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7ff fd75 	bl	80099b0 <HAL_ADC_ErrorCallback>
}
 8009ec6:	e004      	b.n	8009ed2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	4798      	blx	r3
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7ff fd57 	bl	800999c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2240      	movs	r2, #64	; 0x40
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0e:	f043 0204 	orr.w	r2, r3, #4
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fd4a 	bl	80099b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f34:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <__NVIC_SetPriorityGrouping+0x44>)
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f40:	4013      	ands	r3, r2
 8009f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f56:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <__NVIC_SetPriorityGrouping+0x44>)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	60d3      	str	r3, [r2, #12]
}
 8009f5c:	bf00      	nop
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	e000ed00 	.word	0xe000ed00

08009f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f70:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <__NVIC_GetPriorityGrouping+0x18>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	0a1b      	lsrs	r3, r3, #8
 8009f76:	f003 0307 	and.w	r3, r3, #7
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	e000ed00 	.word	0xe000ed00

08009f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	db0b      	blt.n	8009fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f9a:	79fb      	ldrb	r3, [r7, #7]
 8009f9c:	f003 021f 	and.w	r2, r3, #31
 8009fa0:	4907      	ldr	r1, [pc, #28]	; (8009fc0 <__NVIC_EnableIRQ+0x38>)
 8009fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa6:	095b      	lsrs	r3, r3, #5
 8009fa8:	2001      	movs	r0, #1
 8009faa:	fa00 f202 	lsl.w	r2, r0, r2
 8009fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	e000e100 	.word	0xe000e100

08009fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	4603      	mov	r3, r0
 8009fcc:	6039      	str	r1, [r7, #0]
 8009fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	db0a      	blt.n	8009fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	490c      	ldr	r1, [pc, #48]	; (800a010 <__NVIC_SetPriority+0x4c>)
 8009fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe2:	0112      	lsls	r2, r2, #4
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009fec:	e00a      	b.n	800a004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	4908      	ldr	r1, [pc, #32]	; (800a014 <__NVIC_SetPriority+0x50>)
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	f003 030f 	and.w	r3, r3, #15
 8009ffa:	3b04      	subs	r3, #4
 8009ffc:	0112      	lsls	r2, r2, #4
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	440b      	add	r3, r1
 800a002:	761a      	strb	r2, [r3, #24]
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	e000e100 	.word	0xe000e100
 800a014:	e000ed00 	.word	0xe000ed00

0800a018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a018:	b480      	push	{r7}
 800a01a:	b089      	sub	sp, #36	; 0x24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f003 0307 	and.w	r3, r3, #7
 800a02a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	f1c3 0307 	rsb	r3, r3, #7
 800a032:	2b04      	cmp	r3, #4
 800a034:	bf28      	it	cs
 800a036:	2304      	movcs	r3, #4
 800a038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3304      	adds	r3, #4
 800a03e:	2b06      	cmp	r3, #6
 800a040:	d902      	bls.n	800a048 <NVIC_EncodePriority+0x30>
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	3b03      	subs	r3, #3
 800a046:	e000      	b.n	800a04a <NVIC_EncodePriority+0x32>
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a04c:	f04f 32ff 	mov.w	r2, #4294967295
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	fa02 f303 	lsl.w	r3, r2, r3
 800a056:	43da      	mvns	r2, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	401a      	ands	r2, r3
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a060:	f04f 31ff 	mov.w	r1, #4294967295
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	fa01 f303 	lsl.w	r3, r1, r3
 800a06a:	43d9      	mvns	r1, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a070:	4313      	orrs	r3, r2
         );
}
 800a072:	4618      	mov	r0, r3
 800a074:	3724      	adds	r7, #36	; 0x24
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
	...

0800a080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a090:	d301      	bcc.n	800a096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a092:	2301      	movs	r3, #1
 800a094:	e00f      	b.n	800a0b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <SysTick_Config+0x40>)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a09e:	210f      	movs	r1, #15
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	f7ff ff8e 	bl	8009fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <SysTick_Config+0x40>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0ae:	4b04      	ldr	r3, [pc, #16]	; (800a0c0 <SysTick_Config+0x40>)
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	e000e010 	.word	0xe000e010

0800a0c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ff29 	bl	8009f24 <__NVIC_SetPriorityGrouping>
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b086      	sub	sp, #24
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0ec:	f7ff ff3e 	bl	8009f6c <__NVIC_GetPriorityGrouping>
 800a0f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	68b9      	ldr	r1, [r7, #8]
 800a0f6:	6978      	ldr	r0, [r7, #20]
 800a0f8:	f7ff ff8e 	bl	800a018 <NVIC_EncodePriority>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff ff5d 	bl	8009fc4 <__NVIC_SetPriority>
}
 800a10a:	bf00      	nop
 800a10c:	3718      	adds	r7, #24
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	4603      	mov	r3, r0
 800a11a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a11c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff ff31 	bl	8009f88 <__NVIC_EnableIRQ>
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff ffa2 	bl	800a080 <SysTick_Config>
 800a13c:	4603      	mov	r3, r0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a154:	f7ff fab4 	bl	80096c0 <HAL_GetTick>
 800a158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e099      	b.n	800a298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 0201 	bic.w	r2, r2, #1
 800a182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a184:	e00f      	b.n	800a1a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a186:	f7ff fa9b 	bl	80096c0 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b05      	cmp	r3, #5
 800a192:	d908      	bls.n	800a1a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2203      	movs	r2, #3
 800a19e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e078      	b.n	800a298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e8      	bne.n	800a186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4b38      	ldr	r3, [pc, #224]	; (800a2a0 <HAL_DMA_Init+0x158>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d107      	bne.n	800a210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a208:	4313      	orrs	r3, r2
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f023 0307 	bic.w	r3, r3, #7
 800a226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4313      	orrs	r3, r2
 800a230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	2b04      	cmp	r3, #4
 800a238:	d117      	bne.n	800a26a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00e      	beq.n	800a26a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fa9d 	bl	800a78c <DMA_CheckFifoParam>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d008      	beq.n	800a26a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2240      	movs	r2, #64	; 0x40
 800a25c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a266:	2301      	movs	r3, #1
 800a268:	e016      	b.n	800a298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa54 	bl	800a720 <DMA_CalcBaseAndBitshift>
 800a278:	4603      	mov	r3, r0
 800a27a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a280:	223f      	movs	r2, #63	; 0x3f
 800a282:	409a      	lsls	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	f010803f 	.word	0xf010803f

0800a2a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_DMA_Start_IT+0x26>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e040      	b.n	800a34c <HAL_DMA_Start_IT+0xa8>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d12f      	bne.n	800a33e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	68b9      	ldr	r1, [r7, #8]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f9e6 	bl	800a6c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fc:	223f      	movs	r2, #63	; 0x3f
 800a2fe:	409a      	lsls	r2, r3
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0216 	orr.w	r2, r2, #22
 800a312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d007      	beq.n	800a32c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 0208 	orr.w	r2, r2, #8
 800a32a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	e005      	b.n	800a34a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a346:	2302      	movs	r3, #2
 800a348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d004      	beq.n	800a372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2280      	movs	r2, #128	; 0x80
 800a36c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e00c      	b.n	800a38c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2205      	movs	r2, #5
 800a376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0201 	bic.w	r2, r2, #1
 800a388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3a4:	4b92      	ldr	r3, [pc, #584]	; (800a5f0 <HAL_DMA_IRQHandler+0x258>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a92      	ldr	r2, [pc, #584]	; (800a5f4 <HAL_DMA_IRQHandler+0x25c>)
 800a3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ae:	0a9b      	lsrs	r3, r3, #10
 800a3b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c2:	2208      	movs	r2, #8
 800a3c4:	409a      	lsls	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d01a      	beq.n	800a404 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d013      	beq.n	800a404 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0204 	bic.w	r2, r2, #4
 800a3ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fc:	f043 0201 	orr.w	r2, r3, #1
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a408:	2201      	movs	r2, #1
 800a40a:	409a      	lsls	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4013      	ands	r3, r2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d012      	beq.n	800a43a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00b      	beq.n	800a43a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a426:	2201      	movs	r2, #1
 800a428:	409a      	lsls	r2, r3
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a432:	f043 0202 	orr.w	r2, r3, #2
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a43e:	2204      	movs	r2, #4
 800a440:	409a      	lsls	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4013      	ands	r3, r2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d012      	beq.n	800a470 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45c:	2204      	movs	r2, #4
 800a45e:	409a      	lsls	r2, r3
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a468:	f043 0204 	orr.w	r2, r3, #4
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a474:	2210      	movs	r2, #16
 800a476:	409a      	lsls	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4013      	ands	r3, r2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d043      	beq.n	800a508 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0308 	and.w	r3, r3, #8
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d03c      	beq.n	800a508 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a492:	2210      	movs	r2, #16
 800a494:	409a      	lsls	r2, r3
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d018      	beq.n	800a4da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d108      	bne.n	800a4c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d024      	beq.n	800a508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
 800a4c6:	e01f      	b.n	800a508 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d01b      	beq.n	800a508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	4798      	blx	r3
 800a4d8:	e016      	b.n	800a508 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d107      	bne.n	800a4f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0208 	bic.w	r2, r2, #8
 800a4f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a50c:	2220      	movs	r2, #32
 800a50e:	409a      	lsls	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4013      	ands	r3, r2
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 808e 	beq.w	800a636 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0310 	and.w	r3, r3, #16
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 8086 	beq.w	800a636 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52e:	2220      	movs	r2, #32
 800a530:	409a      	lsls	r2, r3
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d136      	bne.n	800a5b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0216 	bic.w	r2, r2, #22
 800a550:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	695a      	ldr	r2, [r3, #20]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a560:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <HAL_DMA_IRQHandler+0x1da>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0208 	bic.w	r2, r2, #8
 800a580:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a586:	223f      	movs	r2, #63	; 0x3f
 800a588:	409a      	lsls	r2, r3
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d07d      	beq.n	800a6a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
        }
        return;
 800a5ae:	e078      	b.n	800a6a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d01c      	beq.n	800a5f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d108      	bne.n	800a5de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d030      	beq.n	800a636 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
 800a5dc:	e02b      	b.n	800a636 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d027      	beq.n	800a636 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	4798      	blx	r3
 800a5ee:	e022      	b.n	800a636 <HAL_DMA_IRQHandler+0x29e>
 800a5f0:	20000000 	.word	0x20000000
 800a5f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10f      	bne.n	800a626 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0210 	bic.w	r2, r2, #16
 800a614:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d032      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d022      	beq.n	800a690 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2205      	movs	r2, #5
 800a64e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0201 	bic.w	r2, r2, #1
 800a660:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	3301      	adds	r3, #1
 800a666:	60bb      	str	r3, [r7, #8]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d307      	bcc.n	800a67e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1f2      	bne.n	800a662 <HAL_DMA_IRQHandler+0x2ca>
 800a67c:	e000      	b.n	800a680 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a67e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	4798      	blx	r3
 800a6a0:	e000      	b.n	800a6a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a6a2:	bf00      	nop
    }
  }
}
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop

0800a6ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a6e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	2b40      	cmp	r3, #64	; 0x40
 800a6f0:	d108      	bne.n	800a704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a702:	e007      	b.n	800a714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	60da      	str	r2, [r3, #12]
}
 800a714:	bf00      	nop
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	3b10      	subs	r3, #16
 800a730:	4a14      	ldr	r2, [pc, #80]	; (800a784 <DMA_CalcBaseAndBitshift+0x64>)
 800a732:	fba2 2303 	umull	r2, r3, r2, r3
 800a736:	091b      	lsrs	r3, r3, #4
 800a738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a73a:	4a13      	ldr	r2, [pc, #76]	; (800a788 <DMA_CalcBaseAndBitshift+0x68>)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d909      	bls.n	800a762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	1d1a      	adds	r2, r3, #4
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	659a      	str	r2, [r3, #88]	; 0x58
 800a760:	e007      	b.n	800a772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	aaaaaaab 	.word	0xaaaaaaab
 800a788:	080199d0 	.word	0x080199d0

0800a78c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d11f      	bne.n	800a7e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d855      	bhi.n	800a858 <DMA_CheckFifoParam+0xcc>
 800a7ac:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <DMA_CheckFifoParam+0x28>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7d7 	.word	0x0800a7d7
 800a7bc:	0800a7c5 	.word	0x0800a7c5
 800a7c0:	0800a859 	.word	0x0800a859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d045      	beq.n	800a85c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7d4:	e042      	b.n	800a85c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7de:	d13f      	bne.n	800a860 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7e4:	e03c      	b.n	800a860 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ee:	d121      	bne.n	800a834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d836      	bhi.n	800a864 <DMA_CheckFifoParam+0xd8>
 800a7f6:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <DMA_CheckFifoParam+0x70>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a80d 	.word	0x0800a80d
 800a800:	0800a813 	.word	0x0800a813
 800a804:	0800a80d 	.word	0x0800a80d
 800a808:	0800a825 	.word	0x0800a825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
      break;
 800a810:	e02f      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d024      	beq.n	800a868 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a822:	e021      	b.n	800a868 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a82c:	d11e      	bne.n	800a86c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a832:	e01b      	b.n	800a86c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d902      	bls.n	800a840 <DMA_CheckFifoParam+0xb4>
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d003      	beq.n	800a846 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a83e:	e018      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	73fb      	strb	r3, [r7, #15]
      break;
 800a844:	e015      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00e      	beq.n	800a870 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	73fb      	strb	r3, [r7, #15]
      break;
 800a856:	e00b      	b.n	800a870 <DMA_CheckFifoParam+0xe4>
      break;
 800a858:	bf00      	nop
 800a85a:	e00a      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      break;
 800a85c:	bf00      	nop
 800a85e:	e008      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      break;
 800a860:	bf00      	nop
 800a862:	e006      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      break;
 800a864:	bf00      	nop
 800a866:	e004      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      break;
 800a868:	bf00      	nop
 800a86a:	e002      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      break;   
 800a86c:	bf00      	nop
 800a86e:	e000      	b.n	800a872 <DMA_CheckFifoParam+0xe6>
      break;
 800a870:	bf00      	nop
    }
  } 
  
  return status; 
 800a872:	7bfb      	ldrb	r3, [r7, #15]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a880:	b480      	push	{r7}
 800a882:	b089      	sub	sp, #36	; 0x24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a88e:	2300      	movs	r3, #0
 800a890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a892:	2300      	movs	r3, #0
 800a894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a896:	2300      	movs	r3, #0
 800a898:	61fb      	str	r3, [r7, #28]
 800a89a:	e177      	b.n	800ab8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a89c:	2201      	movs	r2, #1
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	f040 8166 	bne.w	800ab86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d00b      	beq.n	800a8da <HAL_GPIO_Init+0x5a>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d007      	beq.n	800a8da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8ce:	2b11      	cmp	r3, #17
 800a8d0:	d003      	beq.n	800a8da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	2b12      	cmp	r3, #18
 800a8d8:	d130      	bne.n	800a93c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	43db      	mvns	r3, r3
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	4313      	orrs	r3, r2
 800a902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a910:	2201      	movs	r2, #1
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	fa02 f303 	lsl.w	r3, r2, r3
 800a918:	43db      	mvns	r3, r3
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	4013      	ands	r3, r2
 800a91e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	091b      	lsrs	r3, r3, #4
 800a926:	f003 0201 	and.w	r2, r3, #1
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	fa02 f303 	lsl.w	r3, r2, r3
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	4313      	orrs	r3, r2
 800a934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	2203      	movs	r2, #3
 800a948:	fa02 f303 	lsl.w	r3, r2, r3
 800a94c:	43db      	mvns	r3, r3
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	4013      	ands	r3, r2
 800a952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	689a      	ldr	r2, [r3, #8]
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	fa02 f303 	lsl.w	r3, r2, r3
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	4313      	orrs	r3, r2
 800a964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d003      	beq.n	800a97c <HAL_GPIO_Init+0xfc>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	2b12      	cmp	r3, #18
 800a97a:	d123      	bne.n	800a9c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	08da      	lsrs	r2, r3, #3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3208      	adds	r2, #8
 800a984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	220f      	movs	r2, #15
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	43db      	mvns	r3, r3
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	4013      	ands	r3, r2
 800a99e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	691a      	ldr	r2, [r3, #16]
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	08da      	lsrs	r2, r3, #3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3208      	adds	r2, #8
 800a9be:	69b9      	ldr	r1, [r7, #24]
 800a9c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d4:	43db      	mvns	r3, r3
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f003 0203 	and.w	r2, r3, #3
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 80c0 	beq.w	800ab86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	4b65      	ldr	r3, [pc, #404]	; (800aba0 <HAL_GPIO_Init+0x320>)
 800aa0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0e:	4a64      	ldr	r2, [pc, #400]	; (800aba0 <HAL_GPIO_Init+0x320>)
 800aa10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa14:	6453      	str	r3, [r2, #68]	; 0x44
 800aa16:	4b62      	ldr	r3, [pc, #392]	; (800aba0 <HAL_GPIO_Init+0x320>)
 800aa18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa22:	4a60      	ldr	r2, [pc, #384]	; (800aba4 <HAL_GPIO_Init+0x324>)
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	089b      	lsrs	r3, r3, #2
 800aa28:	3302      	adds	r3, #2
 800aa2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	220f      	movs	r2, #15
 800aa3a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3e:	43db      	mvns	r3, r3
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	4013      	ands	r3, r2
 800aa44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a57      	ldr	r2, [pc, #348]	; (800aba8 <HAL_GPIO_Init+0x328>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d037      	beq.n	800aabe <HAL_GPIO_Init+0x23e>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a56      	ldr	r2, [pc, #344]	; (800abac <HAL_GPIO_Init+0x32c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d031      	beq.n	800aaba <HAL_GPIO_Init+0x23a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a55      	ldr	r2, [pc, #340]	; (800abb0 <HAL_GPIO_Init+0x330>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d02b      	beq.n	800aab6 <HAL_GPIO_Init+0x236>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a54      	ldr	r2, [pc, #336]	; (800abb4 <HAL_GPIO_Init+0x334>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d025      	beq.n	800aab2 <HAL_GPIO_Init+0x232>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a53      	ldr	r2, [pc, #332]	; (800abb8 <HAL_GPIO_Init+0x338>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d01f      	beq.n	800aaae <HAL_GPIO_Init+0x22e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a52      	ldr	r2, [pc, #328]	; (800abbc <HAL_GPIO_Init+0x33c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d019      	beq.n	800aaaa <HAL_GPIO_Init+0x22a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a51      	ldr	r2, [pc, #324]	; (800abc0 <HAL_GPIO_Init+0x340>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d013      	beq.n	800aaa6 <HAL_GPIO_Init+0x226>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a50      	ldr	r2, [pc, #320]	; (800abc4 <HAL_GPIO_Init+0x344>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d00d      	beq.n	800aaa2 <HAL_GPIO_Init+0x222>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a4f      	ldr	r2, [pc, #316]	; (800abc8 <HAL_GPIO_Init+0x348>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d007      	beq.n	800aa9e <HAL_GPIO_Init+0x21e>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a4e      	ldr	r2, [pc, #312]	; (800abcc <HAL_GPIO_Init+0x34c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d101      	bne.n	800aa9a <HAL_GPIO_Init+0x21a>
 800aa96:	2309      	movs	r3, #9
 800aa98:	e012      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aa9a:	230a      	movs	r3, #10
 800aa9c:	e010      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aa9e:	2308      	movs	r3, #8
 800aaa0:	e00e      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aaa2:	2307      	movs	r3, #7
 800aaa4:	e00c      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aaa6:	2306      	movs	r3, #6
 800aaa8:	e00a      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aaaa:	2305      	movs	r3, #5
 800aaac:	e008      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aaae:	2304      	movs	r3, #4
 800aab0:	e006      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aab2:	2303      	movs	r3, #3
 800aab4:	e004      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e002      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e000      	b.n	800aac0 <HAL_GPIO_Init+0x240>
 800aabe:	2300      	movs	r3, #0
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	f002 0203 	and.w	r2, r2, #3
 800aac6:	0092      	lsls	r2, r2, #2
 800aac8:	4093      	lsls	r3, r2
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	4313      	orrs	r3, r2
 800aace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aad0:	4934      	ldr	r1, [pc, #208]	; (800aba4 <HAL_GPIO_Init+0x324>)
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	089b      	lsrs	r3, r3, #2
 800aad6:	3302      	adds	r3, #2
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aade:	4b3c      	ldr	r3, [pc, #240]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	43db      	mvns	r3, r3
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	4013      	ands	r3, r2
 800aaec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab02:	4a33      	ldr	r2, [pc, #204]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab08:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	43db      	mvns	r3, r3
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	4013      	ands	r3, r2
 800ab16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab2c:	4a28      	ldr	r2, [pc, #160]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab32:	4b27      	ldr	r3, [pc, #156]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	43db      	mvns	r3, r3
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ab4e:	69ba      	ldr	r2, [r7, #24]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab56:	4a1e      	ldr	r2, [pc, #120]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab5c:	4b1c      	ldr	r3, [pc, #112]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	43db      	mvns	r3, r3
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab80:	4a13      	ldr	r2, [pc, #76]	; (800abd0 <HAL_GPIO_Init+0x350>)
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	2b0f      	cmp	r3, #15
 800ab90:	f67f ae84 	bls.w	800a89c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ab94:	bf00      	nop
 800ab96:	3724      	adds	r7, #36	; 0x24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	40023800 	.word	0x40023800
 800aba4:	40013800 	.word	0x40013800
 800aba8:	40020000 	.word	0x40020000
 800abac:	40020400 	.word	0x40020400
 800abb0:	40020800 	.word	0x40020800
 800abb4:	40020c00 	.word	0x40020c00
 800abb8:	40021000 	.word	0x40021000
 800abbc:	40021400 	.word	0x40021400
 800abc0:	40021800 	.word	0x40021800
 800abc4:	40021c00 	.word	0x40021c00
 800abc8:	40022000 	.word	0x40022000
 800abcc:	40022400 	.word	0x40022400
 800abd0:	40013c00 	.word	0x40013c00

0800abd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	887b      	ldrh	r3, [r7, #2]
 800abe6:	4013      	ands	r3, r2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800abec:	2301      	movs	r3, #1
 800abee:	73fb      	strb	r3, [r7, #15]
 800abf0:	e001      	b.n	800abf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	807b      	strh	r3, [r7, #2]
 800ac10:	4613      	mov	r3, r2
 800ac12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac14:	787b      	ldrb	r3, [r7, #1]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac1a:	887a      	ldrh	r2, [r7, #2]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac20:	e003      	b.n	800ac2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac22:	887b      	ldrh	r3, [r7, #2]
 800ac24:	041a      	lsls	r2, r3, #16
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	619a      	str	r2, [r3, #24]
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
	...

0800ac38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e11f      	b.n	800ae8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d106      	bne.n	800ac64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7fb fe52 	bl	8006908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2224      	movs	r2, #36	; 0x24
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0201 	bic.w	r2, r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ac9c:	f001 f96e 	bl	800bf7c <HAL_RCC_GetPCLK1Freq>
 800aca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	4a7b      	ldr	r2, [pc, #492]	; (800ae94 <HAL_I2C_Init+0x25c>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d807      	bhi.n	800acbc <HAL_I2C_Init+0x84>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4a7a      	ldr	r2, [pc, #488]	; (800ae98 <HAL_I2C_Init+0x260>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	bf94      	ite	ls
 800acb4:	2301      	movls	r3, #1
 800acb6:	2300      	movhi	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	e006      	b.n	800acca <HAL_I2C_Init+0x92>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4a77      	ldr	r2, [pc, #476]	; (800ae9c <HAL_I2C_Init+0x264>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	bf94      	ite	ls
 800acc4:	2301      	movls	r3, #1
 800acc6:	2300      	movhi	r3, #0
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e0db      	b.n	800ae8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	4a72      	ldr	r2, [pc, #456]	; (800aea0 <HAL_I2C_Init+0x268>)
 800acd6:	fba2 2303 	umull	r2, r3, r2, r3
 800acda:	0c9b      	lsrs	r3, r3, #18
 800acdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a64      	ldr	r2, [pc, #400]	; (800ae94 <HAL_I2C_Init+0x25c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d802      	bhi.n	800ad0c <HAL_I2C_Init+0xd4>
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	e009      	b.n	800ad20 <HAL_I2C_Init+0xe8>
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad12:	fb02 f303 	mul.w	r3, r2, r3
 800ad16:	4a63      	ldr	r2, [pc, #396]	; (800aea4 <HAL_I2C_Init+0x26c>)
 800ad18:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1c:	099b      	lsrs	r3, r3, #6
 800ad1e:	3301      	adds	r3, #1
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6812      	ldr	r2, [r2, #0]
 800ad24:	430b      	orrs	r3, r1
 800ad26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ad32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	4956      	ldr	r1, [pc, #344]	; (800ae94 <HAL_I2C_Init+0x25c>)
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	d80d      	bhi.n	800ad5c <HAL_I2C_Init+0x124>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	1e59      	subs	r1, r3, #1
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad4e:	3301      	adds	r3, #1
 800ad50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad54:	2b04      	cmp	r3, #4
 800ad56:	bf38      	it	cc
 800ad58:	2304      	movcc	r3, #4
 800ad5a:	e04f      	b.n	800adfc <HAL_I2C_Init+0x1c4>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d111      	bne.n	800ad88 <HAL_I2C_Init+0x150>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	1e58      	subs	r0, r3, #1
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6859      	ldr	r1, [r3, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	440b      	add	r3, r1
 800ad72:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad76:	3301      	adds	r3, #1
 800ad78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	bf0c      	ite	eq
 800ad80:	2301      	moveq	r3, #1
 800ad82:	2300      	movne	r3, #0
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	e012      	b.n	800adae <HAL_I2C_Init+0x176>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	1e58      	subs	r0, r3, #1
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6859      	ldr	r1, [r3, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	0099      	lsls	r1, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad9e:	3301      	adds	r3, #1
 800ada0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bf0c      	ite	eq
 800ada8:	2301      	moveq	r3, #1
 800adaa:	2300      	movne	r3, #0
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <HAL_I2C_Init+0x17e>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e022      	b.n	800adfc <HAL_I2C_Init+0x1c4>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10e      	bne.n	800addc <HAL_I2C_Init+0x1a4>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1e58      	subs	r0, r3, #1
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6859      	ldr	r1, [r3, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	005b      	lsls	r3, r3, #1
 800adca:	440b      	add	r3, r1
 800adcc:	fbb0 f3f3 	udiv	r3, r0, r3
 800add0:	3301      	adds	r3, #1
 800add2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800add6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adda:	e00f      	b.n	800adfc <HAL_I2C_Init+0x1c4>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	1e58      	subs	r0, r3, #1
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6859      	ldr	r1, [r3, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	440b      	add	r3, r1
 800adea:	0099      	lsls	r1, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	fbb0 f3f3 	udiv	r3, r0, r3
 800adf2:	3301      	adds	r3, #1
 800adf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	6809      	ldr	r1, [r1, #0]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	69da      	ldr	r2, [r3, #28]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	431a      	orrs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ae2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	6911      	ldr	r1, [r2, #16]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	68d2      	ldr	r2, [r2, #12]
 800ae36:	4311      	orrs	r1, r2
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	6812      	ldr	r2, [r2, #0]
 800ae3c:	430b      	orrs	r3, r1
 800ae3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	695a      	ldr	r2, [r3, #20]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f042 0201 	orr.w	r2, r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2220      	movs	r2, #32
 800ae76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	000186a0 	.word	0x000186a0
 800ae98:	001e847f 	.word	0x001e847f
 800ae9c:	003d08ff 	.word	0x003d08ff
 800aea0:	431bde83 	.word	0x431bde83
 800aea4:	10624dd3 	.word	0x10624dd3

0800aea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af02      	add	r7, sp, #8
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	817b      	strh	r3, [r7, #10]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aebc:	f7fe fc00 	bl	80096c0 <HAL_GetTick>
 800aec0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b20      	cmp	r3, #32
 800aecc:	f040 80e0 	bne.w	800b090 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	2319      	movs	r3, #25
 800aed6:	2201      	movs	r2, #1
 800aed8:	4970      	ldr	r1, [pc, #448]	; (800b09c <HAL_I2C_Master_Transmit+0x1f4>)
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 fc58 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800aee6:	2302      	movs	r3, #2
 800aee8:	e0d3      	b.n	800b092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d101      	bne.n	800aef8 <HAL_I2C_Master_Transmit+0x50>
 800aef4:	2302      	movs	r3, #2
 800aef6:	e0cc      	b.n	800b092 <HAL_I2C_Master_Transmit+0x1ea>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d007      	beq.n	800af1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0201 	orr.w	r2, r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2221      	movs	r2, #33	; 0x21
 800af32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2210      	movs	r2, #16
 800af3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	893a      	ldrh	r2, [r7, #8]
 800af4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af54:	b29a      	uxth	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	4a50      	ldr	r2, [pc, #320]	; (800b0a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800af5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800af60:	8979      	ldrh	r1, [r7, #10]
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	6a3a      	ldr	r2, [r7, #32]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 fac2 	bl	800b4f0 <I2C_MasterRequestWrite>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e08d      	b.n	800b092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800af8c:	e066      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	6a39      	ldr	r1, [r7, #32]
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fcd2 	bl	800b93c <I2C_WaitOnTXEFlagUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00d      	beq.n	800afba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d107      	bne.n	800afb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e06b      	b.n	800b092 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	781a      	ldrb	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	3b01      	subs	r3, #1
 800afd8:	b29a      	uxth	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	f003 0304 	and.w	r3, r3, #4
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d11b      	bne.n	800b030 <HAL_I2C_Master_Transmit+0x188>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800affc:	2b00      	cmp	r3, #0
 800affe:	d017      	beq.n	800b030 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	781a      	ldrb	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b028:	3b01      	subs	r3, #1
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	6a39      	ldr	r1, [r7, #32]
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 fcc2 	bl	800b9be <I2C_WaitOnBTFFlagUntilTimeout>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00d      	beq.n	800b05c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b044:	2b04      	cmp	r3, #4
 800b046:	d107      	bne.n	800b058 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b056:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e01a      	b.n	800b092 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d194      	bne.n	800af8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2220      	movs	r2, #32
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	00100002 	.word	0x00100002
 800b0a0:	ffff0000 	.word	0xffff0000

0800b0a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08c      	sub	sp, #48	; 0x30
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	817b      	strh	r3, [r7, #10]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b0b8:	f7fe fb02 	bl	80096c0 <HAL_GetTick>
 800b0bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	f040 820b 	bne.w	800b4e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2319      	movs	r3, #25
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	497c      	ldr	r1, [pc, #496]	; (800b2c8 <HAL_I2C_Master_Receive+0x224>)
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 fb5a 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e1fe      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d101      	bne.n	800b0f4 <HAL_I2C_Master_Receive+0x50>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e1f7      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b01      	cmp	r3, #1
 800b108:	d007      	beq.n	800b11a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f042 0201 	orr.w	r2, r2, #1
 800b118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b128:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2222      	movs	r2, #34	; 0x22
 800b12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2210      	movs	r2, #16
 800b136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	893a      	ldrh	r2, [r7, #8]
 800b14a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b150:	b29a      	uxth	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	4a5c      	ldr	r2, [pc, #368]	; (800b2cc <HAL_I2C_Master_Receive+0x228>)
 800b15a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b15c:	8979      	ldrh	r1, [r7, #10]
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fa46 	bl	800b5f4 <I2C_MasterRequestRead>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e1b8      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b176:	2b00      	cmp	r3, #0
 800b178:	d113      	bne.n	800b1a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b17a:	2300      	movs	r3, #0
 800b17c:	623b      	str	r3, [r7, #32]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	623b      	str	r3, [r7, #32]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	623b      	str	r3, [r7, #32]
 800b18e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	e18c      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d11b      	bne.n	800b1e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	61fb      	str	r3, [r7, #28]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	61fb      	str	r3, [r7, #28]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	e16c      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d11b      	bne.n	800b222 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b20a:	2300      	movs	r3, #0
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	61bb      	str	r3, [r7, #24]
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	e14c      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b232:	2300      	movs	r3, #0
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	617b      	str	r3, [r7, #20]
 800b246:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b248:	e138      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b24e:	2b03      	cmp	r3, #3
 800b250:	f200 80f1 	bhi.w	800b436 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d123      	bne.n	800b2a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b25e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 fbed 	bl	800ba40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e139      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	691a      	ldr	r2, [r3, #16]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2a2:	e10b      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d14e      	bne.n	800b34a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4906      	ldr	r1, [pc, #24]	; (800b2d0 <HAL_I2C_Master_Receive+0x22c>)
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fa6a 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d008      	beq.n	800b2d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e10e      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
 800b2c6:	bf00      	nop
 800b2c8:	00100002 	.word	0x00100002
 800b2cc:	ffff0000 	.word	0xffff0000
 800b2d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	691a      	ldr	r2, [r3, #16]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b300:	3b01      	subs	r3, #1
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	3b01      	subs	r3, #1
 800b310:	b29a      	uxth	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691a      	ldr	r2, [r3, #16]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b332:	3b01      	subs	r3, #1
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b33e:	b29b      	uxth	r3, r3
 800b340:	3b01      	subs	r3, #1
 800b342:	b29a      	uxth	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b348:	e0b8      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	2200      	movs	r2, #0
 800b352:	4966      	ldr	r1, [pc, #408]	; (800b4ec <HAL_I2C_Master_Receive+0x448>)
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 fa1b 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e0bf      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	691a      	ldr	r2, [r3, #16]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b390:	3b01      	subs	r3, #1
 800b392:	b29a      	uxth	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	494f      	ldr	r1, [pc, #316]	; (800b4ec <HAL_I2C_Master_Receive+0x448>)
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f9ed 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e091      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	691a      	ldr	r2, [r3, #16]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	1c5a      	adds	r2, r3, #1
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	691a      	ldr	r2, [r3, #16]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b41e:	3b01      	subs	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b29a      	uxth	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b434:	e042      	b.n	800b4bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fb00 	bl	800ba40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e04c      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	691a      	ldr	r2, [r3, #16]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	b2d2      	uxtb	r2, r2
 800b456:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b466:	3b01      	subs	r3, #1
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b472:	b29b      	uxth	r3, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b04      	cmp	r3, #4
 800b488:	d118      	bne.n	800b4bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691a      	ldr	r2, [r3, #16]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f47f aec2 	bne.w	800b24a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e000      	b.n	800b4e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b4e2:	2302      	movs	r3, #2
  }
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3728      	adds	r7, #40	; 0x28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	00010004 	.word	0x00010004

0800b4f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	607a      	str	r2, [r7, #4]
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b08      	cmp	r3, #8
 800b50a:	d006      	beq.n	800b51a <I2C_MasterRequestWrite+0x2a>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d003      	beq.n	800b51a <I2C_MasterRequestWrite+0x2a>
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b518:	d108      	bne.n	800b52c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	e00b      	b.n	800b544 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b530:	2b12      	cmp	r3, #18
 800b532:	d107      	bne.n	800b544 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 f91d 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00d      	beq.n	800b578 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b56a:	d103      	bne.n	800b574 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e035      	b.n	800b5e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b580:	d108      	bne.n	800b594 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b582:	897b      	ldrh	r3, [r7, #10]
 800b584:	b2db      	uxtb	r3, r3
 800b586:	461a      	mov	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b590:	611a      	str	r2, [r3, #16]
 800b592:	e01b      	b.n	800b5cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b594:	897b      	ldrh	r3, [r7, #10]
 800b596:	11db      	asrs	r3, r3, #7
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	f003 0306 	and.w	r3, r3, #6
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	f063 030f 	orn	r3, r3, #15
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	490e      	ldr	r1, [pc, #56]	; (800b5ec <I2C_MasterRequestWrite+0xfc>)
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 f943 	bl	800b83e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e010      	b.n	800b5e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5c2:	897b      	ldrh	r3, [r7, #10]
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	4907      	ldr	r1, [pc, #28]	; (800b5f0 <I2C_MasterRequestWrite+0x100>)
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f933 	bl	800b83e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e000      	b.n	800b5e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	00010008 	.word	0x00010008
 800b5f0:	00010002 	.word	0x00010002

0800b5f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	460b      	mov	r3, r1
 800b602:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b618:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	d006      	beq.n	800b62e <I2C_MasterRequestRead+0x3a>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d003      	beq.n	800b62e <I2C_MasterRequestRead+0x3a>
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b62c:	d108      	bne.n	800b640 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	e00b      	b.n	800b658 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b644:	2b11      	cmp	r3, #17
 800b646:	d107      	bne.n	800b658 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b656:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f893 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00d      	beq.n	800b68c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b67a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b67e:	d103      	bne.n	800b688 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b686:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e079      	b.n	800b780 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b694:	d108      	bne.n	800b6a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b696:	897b      	ldrh	r3, [r7, #10]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	f043 0301 	orr.w	r3, r3, #1
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	611a      	str	r2, [r3, #16]
 800b6a6:	e05f      	b.n	800b768 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b6a8:	897b      	ldrh	r3, [r7, #10]
 800b6aa:	11db      	asrs	r3, r3, #7
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	f003 0306 	and.w	r3, r3, #6
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f063 030f 	orn	r3, r3, #15
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	4930      	ldr	r1, [pc, #192]	; (800b788 <I2C_MasterRequestRead+0x194>)
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 f8b9 	bl	800b83e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e054      	b.n	800b780 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b6d6:	897b      	ldrh	r3, [r7, #10]
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	4929      	ldr	r1, [pc, #164]	; (800b78c <I2C_MasterRequestRead+0x198>)
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 f8a9 	bl	800b83e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e044      	b.n	800b780 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	613b      	str	r3, [r7, #16]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b71a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 f831 	bl	800b790 <I2C_WaitOnFlagUntilTimeout>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00d      	beq.n	800b750 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b742:	d103      	bne.n	800b74c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b74a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e017      	b.n	800b780 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b750:	897b      	ldrh	r3, [r7, #10]
 800b752:	11db      	asrs	r3, r3, #7
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f003 0306 	and.w	r3, r3, #6
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f063 030e 	orn	r3, r3, #14
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	4907      	ldr	r1, [pc, #28]	; (800b78c <I2C_MasterRequestRead+0x198>)
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 f865 	bl	800b83e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e000      	b.n	800b780 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	00010008 	.word	0x00010008
 800b78c:	00010002 	.word	0x00010002

0800b790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	4613      	mov	r3, r2
 800b79e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7a0:	e025      	b.n	800b7ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d021      	beq.n	800b7ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7aa:	f7fd ff89 	bl	80096c0 <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d302      	bcc.n	800b7c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d116      	bne.n	800b7ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	f043 0220 	orr.w	r2, r3, #32
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e023      	b.n	800b836 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	0c1b      	lsrs	r3, r3, #16
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d10d      	bne.n	800b814 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	43da      	mvns	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4013      	ands	r3, r2
 800b804:	b29b      	uxth	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	bf0c      	ite	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	2300      	movne	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	461a      	mov	r2, r3
 800b812:	e00c      	b.n	800b82e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	43da      	mvns	r2, r3
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	4013      	ands	r3, r2
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	bf0c      	ite	eq
 800b826:	2301      	moveq	r3, #1
 800b828:	2300      	movne	r3, #0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	429a      	cmp	r2, r3
 800b832:	d0b6      	beq.n	800b7a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	60f8      	str	r0, [r7, #12]
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
 800b84a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b84c:	e051      	b.n	800b8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b85c:	d123      	bne.n	800b8a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b86c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b876:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2220      	movs	r2, #32
 800b882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b892:	f043 0204 	orr.w	r2, r3, #4
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e046      	b.n	800b934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d021      	beq.n	800b8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8ae:	f7fd ff07 	bl	80096c0 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d302      	bcc.n	800b8c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d116      	bne.n	800b8f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f043 0220 	orr.w	r2, r3, #32
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e020      	b.n	800b934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	0c1b      	lsrs	r3, r3, #16
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d10c      	bne.n	800b916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	43da      	mvns	r2, r3
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	4013      	ands	r3, r2
 800b908:	b29b      	uxth	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bf14      	ite	ne
 800b90e:	2301      	movne	r3, #1
 800b910:	2300      	moveq	r3, #0
 800b912:	b2db      	uxtb	r3, r3
 800b914:	e00b      	b.n	800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	43da      	mvns	r2, r3
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4013      	ands	r3, r2
 800b922:	b29b      	uxth	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	bf14      	ite	ne
 800b928:	2301      	movne	r3, #1
 800b92a:	2300      	moveq	r3, #0
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d18d      	bne.n	800b84e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b948:	e02d      	b.n	800b9a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f000 f8ce 	bl	800baec <I2C_IsAcknowledgeFailed>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e02d      	b.n	800b9b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b960:	d021      	beq.n	800b9a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b962:	f7fd fead 	bl	80096c0 <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d302      	bcc.n	800b978 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d116      	bne.n	800b9a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2220      	movs	r2, #32
 800b982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b992:	f043 0220 	orr.w	r2, r3, #32
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e007      	b.n	800b9b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b0:	2b80      	cmp	r3, #128	; 0x80
 800b9b2:	d1ca      	bne.n	800b94a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	60b9      	str	r1, [r7, #8]
 800b9c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b9ca:	e02d      	b.n	800ba28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 f88d 	bl	800baec <I2C_IsAcknowledgeFailed>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e02d      	b.n	800ba38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e2:	d021      	beq.n	800ba28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9e4:	f7fd fe6c 	bl	80096c0 <HAL_GetTick>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d302      	bcc.n	800b9fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d116      	bne.n	800ba28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba14:	f043 0220 	orr.w	r2, r3, #32
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e007      	b.n	800ba38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d1ca      	bne.n	800b9cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba4c:	e042      	b.n	800bad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	f003 0310 	and.w	r3, r3, #16
 800ba58:	2b10      	cmp	r3, #16
 800ba5a:	d119      	bne.n	800ba90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f06f 0210 	mvn.w	r2, #16
 800ba64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e029      	b.n	800bae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba90:	f7fd fe16 	bl	80096c0 <HAL_GetTick>
 800ba94:	4602      	mov	r2, r0
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d302      	bcc.n	800baa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d116      	bne.n	800bad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2220      	movs	r2, #32
 800bab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac0:	f043 0220 	orr.w	r2, r3, #32
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e007      	b.n	800bae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bade:	2b40      	cmp	r3, #64	; 0x40
 800bae0:	d1b5      	bne.n	800ba4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bafe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb02:	d11b      	bne.n	800bb3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb28:	f043 0204 	orr.w	r2, r3, #4
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e000      	b.n	800bb3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
	...

0800bb4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bb56:	2300      	movs	r3, #0
 800bb58:	603b      	str	r3, [r7, #0]
 800bb5a:	4b20      	ldr	r3, [pc, #128]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x90>)
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5e:	4a1f      	ldr	r2, [pc, #124]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x90>)
 800bb60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb64:	6413      	str	r3, [r2, #64]	; 0x40
 800bb66:	4b1d      	ldr	r3, [pc, #116]	; (800bbdc <HAL_PWREx_EnableOverDrive+0x90>)
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb6e:	603b      	str	r3, [r7, #0]
 800bb70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bb72:	4b1b      	ldr	r3, [pc, #108]	; (800bbe0 <HAL_PWREx_EnableOverDrive+0x94>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb78:	f7fd fda2 	bl	80096c0 <HAL_GetTick>
 800bb7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bb7e:	e009      	b.n	800bb94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bb80:	f7fd fd9e 	bl	80096c0 <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb8e:	d901      	bls.n	800bb94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	e01f      	b.n	800bbd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bb94:	4b13      	ldr	r3, [pc, #76]	; (800bbe4 <HAL_PWREx_EnableOverDrive+0x98>)
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba0:	d1ee      	bne.n	800bb80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bba2:	4b11      	ldr	r3, [pc, #68]	; (800bbe8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bba4:	2201      	movs	r2, #1
 800bba6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bba8:	f7fd fd8a 	bl	80096c0 <HAL_GetTick>
 800bbac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbae:	e009      	b.n	800bbc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbb0:	f7fd fd86 	bl	80096c0 <HAL_GetTick>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbbe:	d901      	bls.n	800bbc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e007      	b.n	800bbd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bbc4:	4b07      	ldr	r3, [pc, #28]	; (800bbe4 <HAL_PWREx_EnableOverDrive+0x98>)
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbd0:	d1ee      	bne.n	800bbb0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	40023800 	.word	0x40023800
 800bbe0:	420e0040 	.word	0x420e0040
 800bbe4:	40007000 	.word	0x40007000
 800bbe8:	420e0044 	.word	0x420e0044

0800bbec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e0cc      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc00:	4b68      	ldr	r3, [pc, #416]	; (800bda4 <HAL_RCC_ClockConfig+0x1b8>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 030f 	and.w	r3, r3, #15
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d90c      	bls.n	800bc28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc0e:	4b65      	ldr	r3, [pc, #404]	; (800bda4 <HAL_RCC_ClockConfig+0x1b8>)
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc16:	4b63      	ldr	r3, [pc, #396]	; (800bda4 <HAL_RCC_ClockConfig+0x1b8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d001      	beq.n	800bc28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e0b8      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d020      	beq.n	800bc76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0304 	and.w	r3, r3, #4
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bc40:	4b59      	ldr	r3, [pc, #356]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	4a58      	ldr	r2, [pc, #352]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bc4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0308 	and.w	r3, r3, #8
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d005      	beq.n	800bc64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bc58:	4b53      	ldr	r3, [pc, #332]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	4a52      	ldr	r2, [pc, #328]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bc62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc64:	4b50      	ldr	r3, [pc, #320]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	494d      	ldr	r1, [pc, #308]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc72:	4313      	orrs	r3, r2
 800bc74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d044      	beq.n	800bd0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d107      	bne.n	800bc9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc8a:	4b47      	ldr	r3, [pc, #284]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d119      	bne.n	800bcca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e07f      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d003      	beq.n	800bcaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d107      	bne.n	800bcba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bcaa:	4b3f      	ldr	r3, [pc, #252]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d109      	bne.n	800bcca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e06f      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcba:	4b3b      	ldr	r3, [pc, #236]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 0302 	and.w	r3, r3, #2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e067      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bcca:	4b37      	ldr	r3, [pc, #220]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f023 0203 	bic.w	r2, r3, #3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	4934      	ldr	r1, [pc, #208]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bcdc:	f7fd fcf0 	bl	80096c0 <HAL_GetTick>
 800bce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bce2:	e00a      	b.n	800bcfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bce4:	f7fd fcec 	bl	80096c0 <HAL_GetTick>
 800bce8:	4602      	mov	r2, r0
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d901      	bls.n	800bcfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e04f      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcfa:	4b2b      	ldr	r3, [pc, #172]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f003 020c 	and.w	r2, r3, #12
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d1eb      	bne.n	800bce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd0c:	4b25      	ldr	r3, [pc, #148]	; (800bda4 <HAL_RCC_ClockConfig+0x1b8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	683a      	ldr	r2, [r7, #0]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d20c      	bcs.n	800bd34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd1a:	4b22      	ldr	r3, [pc, #136]	; (800bda4 <HAL_RCC_ClockConfig+0x1b8>)
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd22:	4b20      	ldr	r3, [pc, #128]	; (800bda4 <HAL_RCC_ClockConfig+0x1b8>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 030f 	and.w	r3, r3, #15
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d001      	beq.n	800bd34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e032      	b.n	800bd9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0304 	and.w	r3, r3, #4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d008      	beq.n	800bd52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bd40:	4b19      	ldr	r3, [pc, #100]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	4916      	ldr	r1, [pc, #88]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d009      	beq.n	800bd72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd5e:	4b12      	ldr	r3, [pc, #72]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	490e      	ldr	r1, [pc, #56]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bd72:	f000 f821 	bl	800bdb8 <HAL_RCC_GetSysClockFreq>
 800bd76:	4601      	mov	r1, r0
 800bd78:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <HAL_RCC_ClockConfig+0x1bc>)
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	091b      	lsrs	r3, r3, #4
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <HAL_RCC_ClockConfig+0x1c0>)
 800bd84:	5cd3      	ldrb	r3, [r2, r3]
 800bd86:	fa21 f303 	lsr.w	r3, r1, r3
 800bd8a:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <HAL_RCC_ClockConfig+0x1c4>)
 800bd8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bd8e:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <HAL_RCC_ClockConfig+0x1c8>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fd fc50 	bl	8009638 <HAL_InitTick>

  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	40023c00 	.word	0x40023c00
 800bda8:	40023800 	.word	0x40023800
 800bdac:	080199b8 	.word	0x080199b8
 800bdb0:	20000000 	.word	0x20000000
 800bdb4:	20000004 	.word	0x20000004

0800bdb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	607b      	str	r3, [r7, #4]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bdce:	4b63      	ldr	r3, [pc, #396]	; (800bf5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f003 030c 	and.w	r3, r3, #12
 800bdd6:	2b04      	cmp	r3, #4
 800bdd8:	d007      	beq.n	800bdea <HAL_RCC_GetSysClockFreq+0x32>
 800bdda:	2b08      	cmp	r3, #8
 800bddc:	d008      	beq.n	800bdf0 <HAL_RCC_GetSysClockFreq+0x38>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f040 80b4 	bne.w	800bf4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bde4:	4b5e      	ldr	r3, [pc, #376]	; (800bf60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bde6:	60bb      	str	r3, [r7, #8]
       break;
 800bde8:	e0b3      	b.n	800bf52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bdea:	4b5d      	ldr	r3, [pc, #372]	; (800bf60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bdec:	60bb      	str	r3, [r7, #8]
      break;
 800bdee:	e0b0      	b.n	800bf52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bdf0:	4b5a      	ldr	r3, [pc, #360]	; (800bf5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bdfa:	4b58      	ldr	r3, [pc, #352]	; (800bf5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d04a      	beq.n	800be9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be06:	4b55      	ldr	r3, [pc, #340]	; (800bf5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	099b      	lsrs	r3, r3, #6
 800be0c:	f04f 0400 	mov.w	r4, #0
 800be10:	f240 11ff 	movw	r1, #511	; 0x1ff
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	ea03 0501 	and.w	r5, r3, r1
 800be1c:	ea04 0602 	and.w	r6, r4, r2
 800be20:	4629      	mov	r1, r5
 800be22:	4632      	mov	r2, r6
 800be24:	f04f 0300 	mov.w	r3, #0
 800be28:	f04f 0400 	mov.w	r4, #0
 800be2c:	0154      	lsls	r4, r2, #5
 800be2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800be32:	014b      	lsls	r3, r1, #5
 800be34:	4619      	mov	r1, r3
 800be36:	4622      	mov	r2, r4
 800be38:	1b49      	subs	r1, r1, r5
 800be3a:	eb62 0206 	sbc.w	r2, r2, r6
 800be3e:	f04f 0300 	mov.w	r3, #0
 800be42:	f04f 0400 	mov.w	r4, #0
 800be46:	0194      	lsls	r4, r2, #6
 800be48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800be4c:	018b      	lsls	r3, r1, #6
 800be4e:	1a5b      	subs	r3, r3, r1
 800be50:	eb64 0402 	sbc.w	r4, r4, r2
 800be54:	f04f 0100 	mov.w	r1, #0
 800be58:	f04f 0200 	mov.w	r2, #0
 800be5c:	00e2      	lsls	r2, r4, #3
 800be5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800be62:	00d9      	lsls	r1, r3, #3
 800be64:	460b      	mov	r3, r1
 800be66:	4614      	mov	r4, r2
 800be68:	195b      	adds	r3, r3, r5
 800be6a:	eb44 0406 	adc.w	r4, r4, r6
 800be6e:	f04f 0100 	mov.w	r1, #0
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	02a2      	lsls	r2, r4, #10
 800be78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800be7c:	0299      	lsls	r1, r3, #10
 800be7e:	460b      	mov	r3, r1
 800be80:	4614      	mov	r4, r2
 800be82:	4618      	mov	r0, r3
 800be84:	4621      	mov	r1, r4
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f04f 0400 	mov.w	r4, #0
 800be8c:	461a      	mov	r2, r3
 800be8e:	4623      	mov	r3, r4
 800be90:	f7f4 ff12 	bl	8000cb8 <__aeabi_uldivmod>
 800be94:	4603      	mov	r3, r0
 800be96:	460c      	mov	r4, r1
 800be98:	60fb      	str	r3, [r7, #12]
 800be9a:	e049      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be9c:	4b2f      	ldr	r3, [pc, #188]	; (800bf5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	099b      	lsrs	r3, r3, #6
 800bea2:	f04f 0400 	mov.w	r4, #0
 800bea6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	ea03 0501 	and.w	r5, r3, r1
 800beb2:	ea04 0602 	and.w	r6, r4, r2
 800beb6:	4629      	mov	r1, r5
 800beb8:	4632      	mov	r2, r6
 800beba:	f04f 0300 	mov.w	r3, #0
 800bebe:	f04f 0400 	mov.w	r4, #0
 800bec2:	0154      	lsls	r4, r2, #5
 800bec4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bec8:	014b      	lsls	r3, r1, #5
 800beca:	4619      	mov	r1, r3
 800becc:	4622      	mov	r2, r4
 800bece:	1b49      	subs	r1, r1, r5
 800bed0:	eb62 0206 	sbc.w	r2, r2, r6
 800bed4:	f04f 0300 	mov.w	r3, #0
 800bed8:	f04f 0400 	mov.w	r4, #0
 800bedc:	0194      	lsls	r4, r2, #6
 800bede:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bee2:	018b      	lsls	r3, r1, #6
 800bee4:	1a5b      	subs	r3, r3, r1
 800bee6:	eb64 0402 	sbc.w	r4, r4, r2
 800beea:	f04f 0100 	mov.w	r1, #0
 800beee:	f04f 0200 	mov.w	r2, #0
 800bef2:	00e2      	lsls	r2, r4, #3
 800bef4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bef8:	00d9      	lsls	r1, r3, #3
 800befa:	460b      	mov	r3, r1
 800befc:	4614      	mov	r4, r2
 800befe:	195b      	adds	r3, r3, r5
 800bf00:	eb44 0406 	adc.w	r4, r4, r6
 800bf04:	f04f 0100 	mov.w	r1, #0
 800bf08:	f04f 0200 	mov.w	r2, #0
 800bf0c:	02a2      	lsls	r2, r4, #10
 800bf0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf12:	0299      	lsls	r1, r3, #10
 800bf14:	460b      	mov	r3, r1
 800bf16:	4614      	mov	r4, r2
 800bf18:	4618      	mov	r0, r3
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f04f 0400 	mov.w	r4, #0
 800bf22:	461a      	mov	r2, r3
 800bf24:	4623      	mov	r3, r4
 800bf26:	f7f4 fec7 	bl	8000cb8 <__aeabi_uldivmod>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	0c1b      	lsrs	r3, r3, #16
 800bf36:	f003 0303 	and.w	r3, r3, #3
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf48:	60bb      	str	r3, [r7, #8]
      break;
 800bf4a:	e002      	b.n	800bf52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bf4c:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bf4e:	60bb      	str	r3, [r7, #8]
      break;
 800bf50:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf52:	68bb      	ldr	r3, [r7, #8]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf5c:	40023800 	.word	0x40023800
 800bf60:	00f42400 	.word	0x00f42400

0800bf64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf68:	4b03      	ldr	r3, [pc, #12]	; (800bf78 <HAL_RCC_GetHCLKFreq+0x14>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	20000000 	.word	0x20000000

0800bf7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bf80:	f7ff fff0 	bl	800bf64 <HAL_RCC_GetHCLKFreq>
 800bf84:	4601      	mov	r1, r0
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	0a9b      	lsrs	r3, r3, #10
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	4a03      	ldr	r2, [pc, #12]	; (800bfa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf92:	5cd3      	ldrb	r3, [r2, r3]
 800bf94:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	40023800 	.word	0x40023800
 800bfa0:	080199c8 	.word	0x080199c8

0800bfa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bfa8:	f7ff ffdc 	bl	800bf64 <HAL_RCC_GetHCLKFreq>
 800bfac:	4601      	mov	r1, r0
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	0b5b      	lsrs	r3, r3, #13
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	4a03      	ldr	r2, [pc, #12]	; (800bfc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfba:	5cd3      	ldrb	r3, [r2, r3]
 800bfbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	40023800 	.word	0x40023800
 800bfc8:	080199c8 	.word	0x080199c8

0800bfcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bff4:	4b66      	ldr	r3, [pc, #408]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bffa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c002:	4963      	ldr	r1, [pc, #396]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c004:	4313      	orrs	r3, r2
 800c006:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c016:	4b5e      	ldr	r3, [pc, #376]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c01c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	495a      	ldr	r1, [pc, #360]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c026:	4313      	orrs	r3, r2
 800c028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10b      	bne.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c040:	2b00      	cmp	r3, #0
 800c042:	d105      	bne.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d075      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c050:	4b50      	ldr	r3, [pc, #320]	; (800c194 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c056:	f7fd fb33 	bl	80096c0 <HAL_GetTick>
 800c05a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c05c:	e008      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c05e:	f7fd fb2f 	bl	80096c0 <HAL_GetTick>
 800c062:	4602      	mov	r2, r0
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	1ad3      	subs	r3, r2, r3
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d901      	bls.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e1dc      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c070:	4b47      	ldr	r3, [pc, #284]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1f0      	bne.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	019a      	lsls	r2, r3, #6
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	071b      	lsls	r3, r3, #28
 800c094:	493e      	ldr	r1, [pc, #248]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c096:	4313      	orrs	r3, r2
 800c098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f003 0302 	and.w	r3, r3, #2
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d01f      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c0a8:	4b39      	ldr	r3, [pc, #228]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0ae:	0f1b      	lsrs	r3, r3, #28
 800c0b0:	f003 0307 	and.w	r3, r3, #7
 800c0b4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	019a      	lsls	r2, r3, #6
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	061b      	lsls	r3, r3, #24
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	071b      	lsls	r3, r3, #28
 800c0c8:	4931      	ldr	r1, [pc, #196]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c0d0:	4b2f      	ldr	r3, [pc, #188]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0d6:	f023 021f 	bic.w	r2, r3, #31
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	492b      	ldr	r1, [pc, #172]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00d      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	019a      	lsls	r2, r3, #6
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	061b      	lsls	r3, r3, #24
 800c100:	431a      	orrs	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	071b      	lsls	r3, r3, #28
 800c108:	4921      	ldr	r1, [pc, #132]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c110:	4b20      	ldr	r3, [pc, #128]	; (800c194 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c112:	2201      	movs	r2, #1
 800c114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c116:	f7fd fad3 	bl	80096c0 <HAL_GetTick>
 800c11a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c11c:	e008      	b.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c11e:	f7fd facf 	bl	80096c0 <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d901      	bls.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e17c      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c130:	4b17      	ldr	r3, [pc, #92]	; (800c190 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0f0      	beq.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0304 	and.w	r3, r3, #4
 800c144:	2b00      	cmp	r3, #0
 800c146:	d112      	bne.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10c      	bne.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80ce 	beq.w	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c16a:	f040 80c8 	bne.w	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c16e:	4b0a      	ldr	r3, [pc, #40]	; (800c198 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c174:	f7fd faa4 	bl	80096c0 <HAL_GetTick>
 800c178:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c17a:	e00f      	b.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c17c:	f7fd faa0 	bl	80096c0 <HAL_GetTick>
 800c180:	4602      	mov	r2, r0
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	2b02      	cmp	r3, #2
 800c188:	d908      	bls.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e14d      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c18e:	bf00      	nop
 800c190:	40023800 	.word	0x40023800
 800c194:	42470068 	.word	0x42470068
 800c198:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c19c:	4ba5      	ldr	r3, [pc, #660]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a8:	d0e8      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f003 0304 	and.w	r3, r3, #4
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d02e      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c1b6:	4b9f      	ldr	r3, [pc, #636]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1bc:	0c1b      	lsrs	r3, r3, #16
 800c1be:	f003 0303 	and.w	r3, r3, #3
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c1c8:	4b9a      	ldr	r3, [pc, #616]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ce:	0f1b      	lsrs	r3, r3, #28
 800c1d0:	f003 0307 	and.w	r3, r3, #7
 800c1d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	019a      	lsls	r2, r3, #6
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	085b      	lsrs	r3, r3, #1
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	041b      	lsls	r3, r3, #16
 800c1e4:	431a      	orrs	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	061b      	lsls	r3, r3, #24
 800c1ec:	431a      	orrs	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	071b      	lsls	r3, r3, #28
 800c1f2:	4990      	ldr	r1, [pc, #576]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c1fa:	4b8e      	ldr	r3, [pc, #568]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c200:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	3b01      	subs	r3, #1
 800c20a:	021b      	lsls	r3, r3, #8
 800c20c:	4989      	ldr	r1, [pc, #548]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 0308 	and.w	r3, r3, #8
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d02c      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c220:	4b84      	ldr	r3, [pc, #528]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c226:	0c1b      	lsrs	r3, r3, #16
 800c228:	f003 0303 	and.w	r3, r3, #3
 800c22c:	3301      	adds	r3, #1
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c232:	4b80      	ldr	r3, [pc, #512]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c238:	0e1b      	lsrs	r3, r3, #24
 800c23a:	f003 030f 	and.w	r3, r3, #15
 800c23e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	019a      	lsls	r2, r3, #6
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	085b      	lsrs	r3, r3, #1
 800c24a:	3b01      	subs	r3, #1
 800c24c:	041b      	lsls	r3, r3, #16
 800c24e:	431a      	orrs	r2, r3
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	061b      	lsls	r3, r3, #24
 800c254:	431a      	orrs	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	071b      	lsls	r3, r3, #28
 800c25c:	4975      	ldr	r1, [pc, #468]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c264:	4b73      	ldr	r3, [pc, #460]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c26a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c272:	4970      	ldr	r1, [pc, #448]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c274:	4313      	orrs	r3, r2
 800c276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c282:	2b00      	cmp	r3, #0
 800c284:	d024      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c28a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c28e:	d11f      	bne.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c290:	4b68      	ldr	r3, [pc, #416]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c296:	0e1b      	lsrs	r3, r3, #24
 800c298:	f003 030f 	and.w	r3, r3, #15
 800c29c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c29e:	4b65      	ldr	r3, [pc, #404]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a4:	0f1b      	lsrs	r3, r3, #28
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	019a      	lsls	r2, r3, #6
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	085b      	lsrs	r3, r3, #1
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	041b      	lsls	r3, r3, #16
 800c2bc:	431a      	orrs	r2, r3
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	061b      	lsls	r3, r3, #24
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	071b      	lsls	r3, r3, #28
 800c2c8:	495a      	ldr	r1, [pc, #360]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c2d0:	4b59      	ldr	r3, [pc, #356]	; (800c438 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c2d6:	f7fd f9f3 	bl	80096c0 <HAL_GetTick>
 800c2da:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c2dc:	e008      	b.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c2de:	f7fd f9ef 	bl	80096c0 <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d901      	bls.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e09c      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c2f0:	4b50      	ldr	r3, [pc, #320]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2fc:	d1ef      	bne.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 0320 	and.w	r3, r3, #32
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 8083 	beq.w	800c412 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c30c:	2300      	movs	r3, #0
 800c30e:	60bb      	str	r3, [r7, #8]
 800c310:	4b48      	ldr	r3, [pc, #288]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	4a47      	ldr	r2, [pc, #284]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c31a:	6413      	str	r3, [r2, #64]	; 0x40
 800c31c:	4b45      	ldr	r3, [pc, #276]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c324:	60bb      	str	r3, [r7, #8]
 800c326:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c328:	4b44      	ldr	r3, [pc, #272]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a43      	ldr	r2, [pc, #268]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c32e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c332:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c334:	f7fd f9c4 	bl	80096c0 <HAL_GetTick>
 800c338:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c33a:	e008      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c33c:	f7fd f9c0 	bl	80096c0 <HAL_GetTick>
 800c340:	4602      	mov	r2, r0
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	2b02      	cmp	r3, #2
 800c348:	d901      	bls.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e06d      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c34e:	4b3b      	ldr	r3, [pc, #236]	; (800c43c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0f0      	beq.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c35a:	4b36      	ldr	r3, [pc, #216]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c362:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d02f      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c372:	69ba      	ldr	r2, [r7, #24]
 800c374:	429a      	cmp	r2, r3
 800c376:	d028      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c378:	4b2e      	ldr	r3, [pc, #184]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c37c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c380:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c382:	4b2f      	ldr	r3, [pc, #188]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c384:	2201      	movs	r2, #1
 800c386:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c388:	4b2d      	ldr	r3, [pc, #180]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c38e:	4a29      	ldr	r2, [pc, #164]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c394:	4b27      	ldr	r3, [pc, #156]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d114      	bne.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c3a0:	f7fd f98e 	bl	80096c0 <HAL_GetTick>
 800c3a4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3a6:	e00a      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3a8:	f7fd f98a 	bl	80096c0 <HAL_GetTick>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d901      	bls.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e035      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c3be:	4b1d      	ldr	r3, [pc, #116]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3c2:	f003 0302 	and.w	r3, r3, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0ee      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3d6:	d10d      	bne.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c3d8:	4b16      	ldr	r3, [pc, #88]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c3e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ec:	4911      	ldr	r1, [pc, #68]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	608b      	str	r3, [r1, #8]
 800c3f2:	e005      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c3f4:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	4a0e      	ldr	r2, [pc, #56]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c3fe:	6093      	str	r3, [r2, #8]
 800c400:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c402:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c40c:	4909      	ldr	r1, [pc, #36]	; (800c434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f003 0310 	and.w	r3, r3, #16
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d004      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c424:	4b07      	ldr	r3, [pc, #28]	; (800c444 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c426:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3720      	adds	r7, #32
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	40023800 	.word	0x40023800
 800c438:	42470070 	.word	0x42470070
 800c43c:	40007000 	.word	0x40007000
 800c440:	42470e40 	.word	0x42470e40
 800c444:	424711e0 	.word	0x424711e0

0800c448 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c450:	2300      	movs	r3, #0
 800c452:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d075      	beq.n	800c54c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c460:	4ba2      	ldr	r3, [pc, #648]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f003 030c 	and.w	r3, r3, #12
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d00c      	beq.n	800c486 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c46c:	4b9f      	ldr	r3, [pc, #636]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c474:	2b08      	cmp	r3, #8
 800c476:	d112      	bne.n	800c49e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c478:	4b9c      	ldr	r3, [pc, #624]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c484:	d10b      	bne.n	800c49e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c486:	4b99      	ldr	r3, [pc, #612]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d05b      	beq.n	800c54a <HAL_RCC_OscConfig+0x102>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d157      	bne.n	800c54a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e20b      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a6:	d106      	bne.n	800c4b6 <HAL_RCC_OscConfig+0x6e>
 800c4a8:	4b90      	ldr	r3, [pc, #576]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a8f      	ldr	r2, [pc, #572]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	e01d      	b.n	800c4f2 <HAL_RCC_OscConfig+0xaa>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4be:	d10c      	bne.n	800c4da <HAL_RCC_OscConfig+0x92>
 800c4c0:	4b8a      	ldr	r3, [pc, #552]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a89      	ldr	r2, [pc, #548]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4ca:	6013      	str	r3, [r2, #0]
 800c4cc:	4b87      	ldr	r3, [pc, #540]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a86      	ldr	r2, [pc, #536]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	e00b      	b.n	800c4f2 <HAL_RCC_OscConfig+0xaa>
 800c4da:	4b84      	ldr	r3, [pc, #528]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a83      	ldr	r2, [pc, #524]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	4b81      	ldr	r3, [pc, #516]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a80      	ldr	r2, [pc, #512]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c4ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d013      	beq.n	800c522 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4fa:	f7fd f8e1 	bl	80096c0 <HAL_GetTick>
 800c4fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c500:	e008      	b.n	800c514 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c502:	f7fd f8dd 	bl	80096c0 <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b64      	cmp	r3, #100	; 0x64
 800c50e:	d901      	bls.n	800c514 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e1d0      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c514:	4b75      	ldr	r3, [pc, #468]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0f0      	beq.n	800c502 <HAL_RCC_OscConfig+0xba>
 800c520:	e014      	b.n	800c54c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c522:	f7fd f8cd 	bl	80096c0 <HAL_GetTick>
 800c526:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c528:	e008      	b.n	800c53c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c52a:	f7fd f8c9 	bl	80096c0 <HAL_GetTick>
 800c52e:	4602      	mov	r2, r0
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	2b64      	cmp	r3, #100	; 0x64
 800c536:	d901      	bls.n	800c53c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	e1bc      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c53c:	4b6b      	ldr	r3, [pc, #428]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f0      	bne.n	800c52a <HAL_RCC_OscConfig+0xe2>
 800c548:	e000      	b.n	800c54c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c54a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d063      	beq.n	800c620 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c558:	4b64      	ldr	r3, [pc, #400]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	f003 030c 	and.w	r3, r3, #12
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00b      	beq.n	800c57c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c564:	4b61      	ldr	r3, [pc, #388]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c56c:	2b08      	cmp	r3, #8
 800c56e:	d11c      	bne.n	800c5aa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c570:	4b5e      	ldr	r3, [pc, #376]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d116      	bne.n	800c5aa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c57c:	4b5b      	ldr	r3, [pc, #364]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0302 	and.w	r3, r3, #2
 800c584:	2b00      	cmp	r3, #0
 800c586:	d005      	beq.n	800c594 <HAL_RCC_OscConfig+0x14c>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d001      	beq.n	800c594 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e190      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c594:	4b55      	ldr	r3, [pc, #340]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	4952      	ldr	r1, [pc, #328]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5a8:	e03a      	b.n	800c620 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d020      	beq.n	800c5f4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5b2:	4b4f      	ldr	r3, [pc, #316]	; (800c6f0 <HAL_RCC_OscConfig+0x2a8>)
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b8:	f7fd f882 	bl	80096c0 <HAL_GetTick>
 800c5bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5be:	e008      	b.n	800c5d2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c5c0:	f7fd f87e 	bl	80096c0 <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	d901      	bls.n	800c5d2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e171      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5d2:	4b46      	ldr	r3, [pc, #280]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0f0      	beq.n	800c5c0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5de:	4b43      	ldr	r3, [pc, #268]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	493f      	ldr	r1, [pc, #252]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	600b      	str	r3, [r1, #0]
 800c5f2:	e015      	b.n	800c620 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5f4:	4b3e      	ldr	r3, [pc, #248]	; (800c6f0 <HAL_RCC_OscConfig+0x2a8>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5fa:	f7fd f861 	bl	80096c0 <HAL_GetTick>
 800c5fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c600:	e008      	b.n	800c614 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c602:	f7fd f85d 	bl	80096c0 <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e150      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c614:	4b35      	ldr	r3, [pc, #212]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0302 	and.w	r3, r3, #2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f0      	bne.n	800c602 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0308 	and.w	r3, r3, #8
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d030      	beq.n	800c68e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d016      	beq.n	800c662 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c634:	4b2f      	ldr	r3, [pc, #188]	; (800c6f4 <HAL_RCC_OscConfig+0x2ac>)
 800c636:	2201      	movs	r2, #1
 800c638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c63a:	f7fd f841 	bl	80096c0 <HAL_GetTick>
 800c63e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c640:	e008      	b.n	800c654 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c642:	f7fd f83d 	bl	80096c0 <HAL_GetTick>
 800c646:	4602      	mov	r2, r0
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d901      	bls.n	800c654 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e130      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c654:	4b25      	ldr	r3, [pc, #148]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d0f0      	beq.n	800c642 <HAL_RCC_OscConfig+0x1fa>
 800c660:	e015      	b.n	800c68e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c662:	4b24      	ldr	r3, [pc, #144]	; (800c6f4 <HAL_RCC_OscConfig+0x2ac>)
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c668:	f7fd f82a 	bl	80096c0 <HAL_GetTick>
 800c66c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c66e:	e008      	b.n	800c682 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c670:	f7fd f826 	bl	80096c0 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d901      	bls.n	800c682 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	e119      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c682:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c686:	f003 0302 	and.w	r3, r3, #2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f0      	bne.n	800c670 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 0304 	and.w	r3, r3, #4
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 809f 	beq.w	800c7da <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c69c:	2300      	movs	r3, #0
 800c69e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6a0:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10f      	bne.n	800c6cc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b4:	4a0d      	ldr	r2, [pc, #52]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c6b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6ba:	6413      	str	r3, [r2, #64]	; 0x40
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <HAL_RCC_OscConfig+0x2a4>)
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6c4:	60fb      	str	r3, [r7, #12]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <HAL_RCC_OscConfig+0x2b0>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d120      	bne.n	800c71a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c6d8:	4b07      	ldr	r3, [pc, #28]	; (800c6f8 <HAL_RCC_OscConfig+0x2b0>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a06      	ldr	r2, [pc, #24]	; (800c6f8 <HAL_RCC_OscConfig+0x2b0>)
 800c6de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6e4:	f7fc ffec 	bl	80096c0 <HAL_GetTick>
 800c6e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6ea:	e010      	b.n	800c70e <HAL_RCC_OscConfig+0x2c6>
 800c6ec:	40023800 	.word	0x40023800
 800c6f0:	42470000 	.word	0x42470000
 800c6f4:	42470e80 	.word	0x42470e80
 800c6f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6fc:	f7fc ffe0 	bl	80096c0 <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b02      	cmp	r3, #2
 800c708:	d901      	bls.n	800c70e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e0d3      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c70e:	4b6c      	ldr	r3, [pc, #432]	; (800c8c0 <HAL_RCC_OscConfig+0x478>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0f0      	beq.n	800c6fc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d106      	bne.n	800c730 <HAL_RCC_OscConfig+0x2e8>
 800c722:	4b68      	ldr	r3, [pc, #416]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c726:	4a67      	ldr	r2, [pc, #412]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c728:	f043 0301 	orr.w	r3, r3, #1
 800c72c:	6713      	str	r3, [r2, #112]	; 0x70
 800c72e:	e01c      	b.n	800c76a <HAL_RCC_OscConfig+0x322>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	2b05      	cmp	r3, #5
 800c736:	d10c      	bne.n	800c752 <HAL_RCC_OscConfig+0x30a>
 800c738:	4b62      	ldr	r3, [pc, #392]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c73a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73c:	4a61      	ldr	r2, [pc, #388]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c73e:	f043 0304 	orr.w	r3, r3, #4
 800c742:	6713      	str	r3, [r2, #112]	; 0x70
 800c744:	4b5f      	ldr	r3, [pc, #380]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c748:	4a5e      	ldr	r2, [pc, #376]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c74a:	f043 0301 	orr.w	r3, r3, #1
 800c74e:	6713      	str	r3, [r2, #112]	; 0x70
 800c750:	e00b      	b.n	800c76a <HAL_RCC_OscConfig+0x322>
 800c752:	4b5c      	ldr	r3, [pc, #368]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c756:	4a5b      	ldr	r2, [pc, #364]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c758:	f023 0301 	bic.w	r3, r3, #1
 800c75c:	6713      	str	r3, [r2, #112]	; 0x70
 800c75e:	4b59      	ldr	r3, [pc, #356]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c762:	4a58      	ldr	r2, [pc, #352]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c764:	f023 0304 	bic.w	r3, r3, #4
 800c768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d015      	beq.n	800c79e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c772:	f7fc ffa5 	bl	80096c0 <HAL_GetTick>
 800c776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c778:	e00a      	b.n	800c790 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c77a:	f7fc ffa1 	bl	80096c0 <HAL_GetTick>
 800c77e:	4602      	mov	r2, r0
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	f241 3288 	movw	r2, #5000	; 0x1388
 800c788:	4293      	cmp	r3, r2
 800c78a:	d901      	bls.n	800c790 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c78c:	2303      	movs	r3, #3
 800c78e:	e092      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c790:	4b4c      	ldr	r3, [pc, #304]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c794:	f003 0302 	and.w	r3, r3, #2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0ee      	beq.n	800c77a <HAL_RCC_OscConfig+0x332>
 800c79c:	e014      	b.n	800c7c8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c79e:	f7fc ff8f 	bl	80096c0 <HAL_GetTick>
 800c7a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7a4:	e00a      	b.n	800c7bc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7a6:	f7fc ff8b 	bl	80096c0 <HAL_GetTick>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d901      	bls.n	800c7bc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e07c      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7bc:	4b41      	ldr	r3, [pc, #260]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c0:	f003 0302 	and.w	r3, r3, #2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1ee      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c7c8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d105      	bne.n	800c7da <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7ce:	4b3d      	ldr	r3, [pc, #244]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	4a3c      	ldr	r2, [pc, #240]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c7d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d068      	beq.n	800c8b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c7e2:	4b38      	ldr	r3, [pc, #224]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	f003 030c 	and.w	r3, r3, #12
 800c7ea:	2b08      	cmp	r3, #8
 800c7ec:	d060      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d145      	bne.n	800c882 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7f6:	4b34      	ldr	r3, [pc, #208]	; (800c8c8 <HAL_RCC_OscConfig+0x480>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7fc:	f7fc ff60 	bl	80096c0 <HAL_GetTick>
 800c800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c802:	e008      	b.n	800c816 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c804:	f7fc ff5c 	bl	80096c0 <HAL_GetTick>
 800c808:	4602      	mov	r2, r0
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d901      	bls.n	800c816 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e04f      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c816:	4b2b      	ldr	r3, [pc, #172]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f0      	bne.n	800c804 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	69da      	ldr	r2, [r3, #28]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	431a      	orrs	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	019b      	lsls	r3, r3, #6
 800c832:	431a      	orrs	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c838:	085b      	lsrs	r3, r3, #1
 800c83a:	3b01      	subs	r3, #1
 800c83c:	041b      	lsls	r3, r3, #16
 800c83e:	431a      	orrs	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	061b      	lsls	r3, r3, #24
 800c846:	431a      	orrs	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84c:	071b      	lsls	r3, r3, #28
 800c84e:	491d      	ldr	r1, [pc, #116]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c850:	4313      	orrs	r3, r2
 800c852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c854:	4b1c      	ldr	r3, [pc, #112]	; (800c8c8 <HAL_RCC_OscConfig+0x480>)
 800c856:	2201      	movs	r2, #1
 800c858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c85a:	f7fc ff31 	bl	80096c0 <HAL_GetTick>
 800c85e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c860:	e008      	b.n	800c874 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c862:	f7fc ff2d 	bl	80096c0 <HAL_GetTick>
 800c866:	4602      	mov	r2, r0
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d901      	bls.n	800c874 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e020      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c874:	4b13      	ldr	r3, [pc, #76]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0f0      	beq.n	800c862 <HAL_RCC_OscConfig+0x41a>
 800c880:	e018      	b.n	800c8b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c882:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <HAL_RCC_OscConfig+0x480>)
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c888:	f7fc ff1a 	bl	80096c0 <HAL_GetTick>
 800c88c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c88e:	e008      	b.n	800c8a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c890:	f7fc ff16 	bl	80096c0 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e009      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8a2:	4b08      	ldr	r3, [pc, #32]	; (800c8c4 <HAL_RCC_OscConfig+0x47c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1f0      	bne.n	800c890 <HAL_RCC_OscConfig+0x448>
 800c8ae:	e001      	b.n	800c8b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e000      	b.n	800c8b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3718      	adds	r7, #24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	40007000 	.word	0x40007000
 800c8c4:	40023800 	.word	0x40023800
 800c8c8:	42470060 	.word	0x42470060

0800c8cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e022      	b.n	800c924 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d105      	bne.n	800c8f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fa f885 	bl	8006a00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2203      	movs	r2, #3
 800c8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f814 	bl	800c92c <HAL_SD_InitCard>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e00a      	b.n	800c924 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c92c:	b5b0      	push	{r4, r5, r7, lr}
 800c92e:	b08e      	sub	sp, #56	; 0x38
 800c930:	af04      	add	r7, sp, #16
 800c932:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c934:	2300      	movs	r3, #0
 800c936:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c938:	2300      	movs	r3, #0
 800c93a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c940:	2300      	movs	r3, #0
 800c942:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c944:	2300      	movs	r3, #0
 800c946:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c948:	2376      	movs	r3, #118	; 0x76
 800c94a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681d      	ldr	r5, [r3, #0]
 800c950:	466c      	mov	r4, sp
 800c952:	f107 0314 	add.w	r3, r7, #20
 800c956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c95a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c95e:	f107 0308 	add.w	r3, r7, #8
 800c962:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c964:	4628      	mov	r0, r5
 800c966:	f003 fa87 	bl	800fe78 <SDIO_Init>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e031      	b.n	800c9e0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c97c:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <HAL_SD_InitCard+0xbc>)
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4618      	mov	r0, r3
 800c988:	f003 fabf 	bl	800ff0a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c98c:	4b16      	ldr	r3, [pc, #88]	; (800c9e8 <HAL_SD_InitCard+0xbc>)
 800c98e:	2201      	movs	r2, #1
 800c990:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 ffc6 	bl	800d924 <SD_PowerON>
 800c998:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e013      	b.n	800c9e0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fee5 	bl	800d788 <SD_InitCard>
 800c9be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00b      	beq.n	800c9de <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	431a      	orrs	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e000      	b.n	800c9e0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3728      	adds	r7, #40	; 0x28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c9e8:	422580a0 	.word	0x422580a0

0800c9ec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08c      	sub	sp, #48	; 0x30
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
 800c9f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d107      	bne.n	800ca14 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e0c7      	b.n	800cba4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	f040 80c0 	bne.w	800cba2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	441a      	add	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d907      	bls.n	800ca46 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e0ae      	b.n	800cba4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2203      	movs	r2, #3
 800ca4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2200      	movs	r2, #0
 800ca54:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ca64:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6a:	4a50      	ldr	r2, [pc, #320]	; (800cbac <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ca6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	4a4f      	ldr	r2, [pc, #316]	; (800cbb0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800ca74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3380      	adds	r3, #128	; 0x80
 800ca88:	4619      	mov	r1, r3
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	025b      	lsls	r3, r3, #9
 800ca90:	089b      	lsrs	r3, r3, #2
 800ca92:	f7fd fc07 	bl	800a2a4 <HAL_DMA_Start_IT>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d017      	beq.n	800cacc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800caaa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a40      	ldr	r2, [pc, #256]	; (800cbb4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	e06b      	b.n	800cba4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cacc:	4b3a      	ldr	r3, [pc, #232]	; (800cbb8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cace:	2201      	movs	r2, #1
 800cad0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d002      	beq.n	800cae0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	025b      	lsls	r3, r3, #9
 800cade:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cae8:	4618      	mov	r0, r3
 800caea:	f003 faa1 	bl	8010030 <SDMMC_CmdBlockLength>
 800caee:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00f      	beq.n	800cb16 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a2e      	ldr	r2, [pc, #184]	; (800cbb4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cafc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	431a      	orrs	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e046      	b.n	800cba4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb16:	f04f 33ff 	mov.w	r3, #4294967295
 800cb1a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	025b      	lsls	r3, r3, #9
 800cb20:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cb22:	2390      	movs	r3, #144	; 0x90
 800cb24:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cb26:	2302      	movs	r3, #2
 800cb28:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f107 0210 	add.w	r2, r7, #16
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f003 fa4b 	bl	800ffd8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d90a      	bls.n	800cb5e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2282      	movs	r2, #130	; 0x82
 800cb4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb54:	4618      	mov	r0, r3
 800cb56:	f003 faaf 	bl	80100b8 <SDMMC_CmdReadMultiBlock>
 800cb5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb5c:	e009      	b.n	800cb72 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2281      	movs	r2, #129	; 0x81
 800cb62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f003 fa82 	bl	8010074 <SDMMC_CmdReadSingleBlock>
 800cb70:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d012      	beq.n	800cb9e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a0d      	ldr	r2, [pc, #52]	; (800cbb4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cb7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb86:	431a      	orrs	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e002      	b.n	800cba4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e000      	b.n	800cba4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cba2:	2302      	movs	r3, #2
  }
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3730      	adds	r7, #48	; 0x30
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	0800d597 	.word	0x0800d597
 800cbb0:	0800d609 	.word	0x0800d609
 800cbb4:	004005ff 	.word	0x004005ff
 800cbb8:	4225858c 	.word	0x4225858c

0800cbbc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08c      	sub	sp, #48	; 0x30
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d107      	bne.n	800cbe4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e0ca      	b.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	f040 80c3 	bne.w	800cd78 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cbf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	441a      	add	r2, r3
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d907      	bls.n	800cc16 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e0b1      	b.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2203      	movs	r2, #3
 800cc1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2200      	movs	r2, #0
 800cc24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f042 021a 	orr.w	r2, r2, #26
 800cc34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3a:	4a52      	ldr	r2, [pc, #328]	; (800cd84 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cc3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc42:	4a51      	ldr	r2, [pc, #324]	; (800cd88 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cc44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d002      	beq.n	800cc5c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	025b      	lsls	r3, r3, #9
 800cc5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc64:	4618      	mov	r0, r3
 800cc66:	f003 f9e3 	bl	8010030 <SDMMC_CmdBlockLength>
 800cc6a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00f      	beq.n	800cc92 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a45      	ldr	r2, [pc, #276]	; (800cd8c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cc78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	431a      	orrs	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e073      	b.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d90a      	bls.n	800ccae <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	22a0      	movs	r2, #160	; 0xa0
 800cc9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 fa4b 	bl	8010140 <SDMMC_CmdWriteMultiBlock>
 800ccaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ccac:	e009      	b.n	800ccc2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2290      	movs	r2, #144	; 0x90
 800ccb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f003 fa1e 	bl	80100fc <SDMMC_CmdWriteSingleBlock>
 800ccc0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d012      	beq.n	800ccee <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a2f      	ldr	r2, [pc, #188]	; (800cd8c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ccce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e045      	b.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ccee:	4b28      	ldr	r3, [pc, #160]	; (800cd90 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ccf8:	68b9      	ldr	r1, [r7, #8]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3380      	adds	r3, #128	; 0x80
 800cd00:	461a      	mov	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	025b      	lsls	r3, r3, #9
 800cd06:	089b      	lsrs	r3, r3, #2
 800cd08:	f7fd facc 	bl	800a2a4 <HAL_DMA_Start_IT>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d01a      	beq.n	800cd48 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f022 021a 	bic.w	r2, r2, #26
 800cd20:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a19      	ldr	r2, [pc, #100]	; (800cd8c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e018      	b.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd48:	f04f 33ff 	mov.w	r3, #4294967295
 800cd4c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	025b      	lsls	r3, r3, #9
 800cd52:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cd54:	2390      	movs	r3, #144	; 0x90
 800cd56:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cd60:	2301      	movs	r3, #1
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f107 0210 	add.w	r2, r7, #16
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f003 f932 	bl	800ffd8 <SDIO_ConfigData>

      return HAL_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e000      	b.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd78:	2302      	movs	r3, #2
  }
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3730      	adds	r7, #48	; 0x30
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	0800d56d 	.word	0x0800d56d
 800cd88:	0800d609 	.word	0x0800d609
 800cd8c:	004005ff 	.word	0x004005ff
 800cd90:	4225858c 	.word	0x4225858c

0800cd94 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d008      	beq.n	800cdc2 <HAL_SD_IRQHandler+0x2e>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f003 0308 	and.w	r3, r3, #8
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 ffc8 	bl	800dd50 <SD_Read_IT>
 800cdc0:	e155      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 808f 	beq.w	800cef0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6812      	ldr	r2, [r2, #0]
 800cde6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cdea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cdee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f022 0201 	bic.w	r2, r2, #1
 800cdfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f003 0308 	and.w	r3, r3, #8
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d039      	beq.n	800ce7e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d104      	bne.n	800ce1e <HAL_SD_IRQHandler+0x8a>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f003 0320 	and.w	r3, r3, #32
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d011      	beq.n	800ce42 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f003 f9ae 	bl	8010184 <SDMMC_CmdStopTransfer>
 800ce28:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d008      	beq.n	800ce42 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	431a      	orrs	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f91f 	bl	800d080 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce4a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d104      	bne.n	800ce6e <HAL_SD_IRQHandler+0xda>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f003 0302 	and.w	r3, r3, #2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f003 fe04 	bl	8010a7c <HAL_SD_RxCpltCallback>
 800ce74:	e0fb      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f003 fdf6 	bl	8010a68 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce7c:	e0f7      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 80f2 	beq.w	800d06e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f003 0320 	and.w	r3, r3, #32
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d011      	beq.n	800ceb8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f003 f973 	bl	8010184 <SDMMC_CmdStopTransfer>
 800ce9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d008      	beq.n	800ceb8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	431a      	orrs	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 f8e4 	bl	800d080 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f040 80d5 	bne.w	800d06e <HAL_SD_IRQHandler+0x2da>
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f040 80cf 	bne.w	800d06e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f022 0208 	bic.w	r2, r2, #8
 800cede:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f003 fdbd 	bl	8010a68 <HAL_SD_TxCpltCallback>
}
 800ceee:	e0be      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d008      	beq.n	800cf10 <HAL_SD_IRQHandler+0x17c>
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f003 0308 	and.w	r3, r3, #8
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 ff72 	bl	800ddf2 <SD_Write_IT>
 800cf0e:	e0ae      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf16:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 80a7 	beq.w	800d06e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf26:	f003 0302 	and.w	r3, r3, #2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d005      	beq.n	800cf3a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf32:	f043 0202 	orr.w	r2, r3, #2
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf40:	f003 0308 	and.w	r3, r3, #8
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d005      	beq.n	800cf54 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4c:	f043 0208 	orr.w	r2, r3, #8
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d005      	beq.n	800cf6e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf66:	f043 0220 	orr.w	r2, r3, #32
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf74:	f003 0310 	and.w	r3, r3, #16
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d005      	beq.n	800cf88 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf80:	f043 0210 	orr.w	r2, r3, #16
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cfa0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f003 f8ec 	bl	8010184 <SDMMC_CmdStopTransfer>
 800cfac:	4602      	mov	r2, r0
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f003 0308 	and.w	r3, r3, #8
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 f855 	bl	800d080 <HAL_SD_ErrorCallback>
}
 800cfd6:	e04a      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d045      	beq.n	800d06e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f003 0310 	and.w	r3, r3, #16
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d104      	bne.n	800cff6 <HAL_SD_IRQHandler+0x262>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f003 0320 	and.w	r3, r3, #32
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d011      	beq.n	800d01a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	4a1f      	ldr	r2, [pc, #124]	; (800d078 <HAL_SD_IRQHandler+0x2e4>)
 800cffc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d002:	4618      	mov	r0, r3
 800d004:	f7fd f9a6 	bl	800a354 <HAL_DMA_Abort_IT>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d02f      	beq.n	800d06e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	4618      	mov	r0, r3
 800d014:	f000 fb4a 	bl	800d6ac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d018:	e029      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	2b00      	cmp	r3, #0
 800d022:	d104      	bne.n	800d02e <HAL_SD_IRQHandler+0x29a>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d011      	beq.n	800d052 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	4a12      	ldr	r2, [pc, #72]	; (800d07c <HAL_SD_IRQHandler+0x2e8>)
 800d034:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd f98a 	bl	800a354 <HAL_DMA_Abort_IT>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d013      	beq.n	800d06e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 fb65 	bl	800d71a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d050:	e00d      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f003 fcf4 	bl	8010a54 <HAL_SD_AbortCallback>
}
 800d06c:	e7ff      	b.n	800d06e <HAL_SD_IRQHandler+0x2da>
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	0800d6ad 	.word	0x0800d6ad
 800d07c:	0800d71b 	.word	0x0800d71b

0800d080 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a2:	0f9b      	lsrs	r3, r3, #30
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ae:	0e9b      	lsrs	r3, r3, #26
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	f003 030f 	and.w	r3, r3, #15
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0c0:	0e1b      	lsrs	r3, r3, #24
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d2:	0c1b      	lsrs	r3, r3, #16
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0de:	0a1b      	lsrs	r3, r3, #8
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0f4:	0d1b      	lsrs	r3, r3, #20
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d100:	0c1b      	lsrs	r3, r3, #16
 800d102:	b2db      	uxtb	r3, r3
 800d104:	f003 030f 	and.w	r3, r3, #15
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d112:	0bdb      	lsrs	r3, r3, #15
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d124:	0b9b      	lsrs	r3, r3, #14
 800d126:	b2db      	uxtb	r3, r3
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d136:	0b5b      	lsrs	r3, r3, #13
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d148:	0b1b      	lsrs	r3, r3, #12
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	b2da      	uxtb	r2, r3
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2200      	movs	r2, #0
 800d15a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d160:	2b00      	cmp	r3, #0
 800d162:	d163      	bne.n	800d22c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d168:	009a      	lsls	r2, r3, #2
 800d16a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d16e:	4013      	ands	r3, r2
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d174:	0f92      	lsrs	r2, r2, #30
 800d176:	431a      	orrs	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d180:	0edb      	lsrs	r3, r3, #27
 800d182:	b2db      	uxtb	r3, r3
 800d184:	f003 0307 	and.w	r3, r3, #7
 800d188:	b2da      	uxtb	r2, r3
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d192:	0e1b      	lsrs	r3, r3, #24
 800d194:	b2db      	uxtb	r3, r3
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a4:	0d5b      	lsrs	r3, r3, #21
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	f003 0307 	and.w	r3, r3, #7
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b6:	0c9b      	lsrs	r3, r3, #18
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	f003 0307 	and.w	r3, r3, #7
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1c8:	0bdb      	lsrs	r3, r3, #15
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	f003 0307 	and.w	r3, r3, #7
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	7e1b      	ldrb	r3, [r3, #24]
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 0307 	and.w	r3, r3, #7
 800d1ea:	3302      	adds	r3, #2
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d1f6:	fb02 f203 	mul.w	r2, r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	7a1b      	ldrb	r3, [r3, #8]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	2201      	movs	r2, #1
 800d20a:	409a      	lsls	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d218:	0a52      	lsrs	r2, r2, #9
 800d21a:	fb02 f203 	mul.w	r2, r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d228:	661a      	str	r2, [r3, #96]	; 0x60
 800d22a:	e031      	b.n	800d290 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d230:	2b01      	cmp	r3, #1
 800d232:	d11d      	bne.n	800d270 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d238:	041b      	lsls	r3, r3, #16
 800d23a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d242:	0c1b      	lsrs	r3, r3, #16
 800d244:	431a      	orrs	r2, r3
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	3301      	adds	r3, #1
 800d250:	029a      	lsls	r2, r3, #10
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d264:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	661a      	str	r2, [r3, #96]	; 0x60
 800d26e:	e00f      	b.n	800d290 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a58      	ldr	r2, [pc, #352]	; (800d3d8 <HAL_SD_GetCardCSD+0x344>)
 800d276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e09d      	b.n	800d3cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d294:	0b9b      	lsrs	r3, r3, #14
 800d296:	b2db      	uxtb	r3, r3
 800d298:	f003 0301 	and.w	r3, r3, #1
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a6:	09db      	lsrs	r3, r3, #7
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c8:	0fdb      	lsrs	r3, r3, #31
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d4:	0f5b      	lsrs	r3, r3, #29
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	f003 0303 	and.w	r3, r3, #3
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e6:	0e9b      	lsrs	r3, r3, #26
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	f003 0307 	and.w	r3, r3, #7
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f8:	0d9b      	lsrs	r3, r3, #22
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f003 030f 	and.w	r3, r3, #15
 800d300:	b2da      	uxtb	r2, r3
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30a:	0d5b      	lsrs	r3, r3, #21
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	f003 0301 	and.w	r3, r3, #1
 800d312:	b2da      	uxtb	r2, r3
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d326:	0c1b      	lsrs	r3, r3, #16
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33a:	0bdb      	lsrs	r3, r3, #15
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	b2da      	uxtb	r2, r3
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34e:	0b9b      	lsrs	r3, r3, #14
 800d350:	b2db      	uxtb	r3, r3
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	b2da      	uxtb	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d362:	0b5b      	lsrs	r3, r3, #13
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d376:	0b1b      	lsrs	r3, r3, #12
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d38a:	0a9b      	lsrs	r3, r3, #10
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 0303 	and.w	r3, r3, #3
 800d392:	b2da      	uxtb	r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d39e:	0a1b      	lsrs	r3, r3, #8
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f003 0303 	and.w	r3, r3, #3
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b2:	085b      	lsrs	r3, r3, #1
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	004005ff 	.word	0x004005ff

0800d3dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d434:	b5b0      	push	{r4, r5, r7, lr}
 800d436:	b08e      	sub	sp, #56	; 0x38
 800d438:	af04      	add	r7, sp, #16
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2203      	movs	r2, #3
 800d442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d02e      	beq.n	800d4ac <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d454:	d106      	bne.n	800d464 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	639a      	str	r2, [r3, #56]	; 0x38
 800d462:	e029      	b.n	800d4b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d46a:	d10a      	bne.n	800d482 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 fb0f 	bl	800da90 <SD_WideBus_Enable>
 800d472:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	431a      	orrs	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38
 800d480:	e01a      	b.n	800d4b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10a      	bne.n	800d49e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fb4c 	bl	800db26 <SD_WideBus_Disable>
 800d48e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	431a      	orrs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	639a      	str	r2, [r3, #56]	; 0x38
 800d49c:	e00c      	b.n	800d4b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	639a      	str	r2, [r3, #56]	; 0x38
 800d4aa:	e005      	b.n	800d4b8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d009      	beq.n	800d4d4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a18      	ldr	r2, [pc, #96]	; (800d528 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d4c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e024      	b.n	800d51e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	695b      	ldr	r3, [r3, #20]
 800d4ee:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681d      	ldr	r5, [r3, #0]
 800d4fa:	466c      	mov	r4, sp
 800d4fc:	f107 0318 	add.w	r3, r7, #24
 800d500:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d508:	f107 030c 	add.w	r3, r7, #12
 800d50c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d50e:	4628      	mov	r0, r5
 800d510:	f002 fcb2 	bl	800fe78 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3728      	adds	r7, #40	; 0x28
 800d522:	46bd      	mov	sp, r7
 800d524:	bdb0      	pop	{r4, r5, r7, pc}
 800d526:	bf00      	nop
 800d528:	004005ff 	.word	0x004005ff

0800d52c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d538:	f107 030c 	add.w	r3, r7, #12
 800d53c:	4619      	mov	r1, r3
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fa7e 	bl	800da40 <SD_SendStatus>
 800d544:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d005      	beq.n	800d558 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	431a      	orrs	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	0a5b      	lsrs	r3, r3, #9
 800d55c:	f003 030f 	and.w	r3, r3, #15
 800d560:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d562:	693b      	ldr	r3, [r7, #16]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d578:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d588:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d58a:	bf00      	nop
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a8:	2b82      	cmp	r3, #130	; 0x82
 800d5aa:	d111      	bne.n	800d5d0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f002 fde7 	bl	8010184 <SDMMC_CmdStopTransfer>
 800d5b6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d008      	beq.n	800d5d0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	431a      	orrs	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f7ff fd58 	bl	800d080 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f022 0208 	bic.w	r2, r2, #8
 800d5de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f003 fa3f 	bl	8010a7c <HAL_SD_RxCpltCallback>
#endif
}
 800d5fe:	bf00      	nop
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d614:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7fd f848 	bl	800a6ac <HAL_DMA_GetError>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d03e      	beq.n	800d6a0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d628:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d630:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d002      	beq.n	800d63e <SD_DMAError+0x36>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d12d      	bne.n	800d69a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a19      	ldr	r2, [pc, #100]	; (800d6a8 <SD_DMAError+0xa0>)
 800d644:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d654:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d662:	6978      	ldr	r0, [r7, #20]
 800d664:	f7ff ff62 	bl	800d52c <HAL_SD_GetCardState>
 800d668:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2b06      	cmp	r3, #6
 800d66e:	d002      	beq.n	800d676 <SD_DMAError+0x6e>
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b05      	cmp	r3, #5
 800d674:	d10a      	bne.n	800d68c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f002 fd82 	bl	8010184 <SDMMC_CmdStopTransfer>
 800d680:	4602      	mov	r2, r0
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d686:	431a      	orrs	r2, r3
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2200      	movs	r2, #0
 800d698:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d69a:	6978      	ldr	r0, [r7, #20]
 800d69c:	f7ff fcf0 	bl	800d080 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d6a0:	bf00      	nop
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	004005ff 	.word	0x004005ff

0800d6ac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f7ff ff31 	bl	800d52c <HAL_SD_GetCardState>
 800d6ca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2b06      	cmp	r3, #6
 800d6de:	d002      	beq.n	800d6e6 <SD_DMATxAbort+0x3a>
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2b05      	cmp	r3, #5
 800d6e4:	d10a      	bne.n	800d6fc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f002 fd4a 	bl	8010184 <SDMMC_CmdStopTransfer>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d103      	bne.n	800d70c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f003 f9a5 	bl	8010a54 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d70a:	e002      	b.n	800d712 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7ff fcb7 	bl	800d080 <HAL_SD_ErrorCallback>
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d730:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f7ff fefa 	bl	800d52c <HAL_SD_GetCardState>
 800d738:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	2b06      	cmp	r3, #6
 800d74c:	d002      	beq.n	800d754 <SD_DMARxAbort+0x3a>
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b05      	cmp	r3, #5
 800d752:	d10a      	bne.n	800d76a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f002 fd13 	bl	8010184 <SDMMC_CmdStopTransfer>
 800d75e:	4602      	mov	r2, r0
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	431a      	orrs	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d103      	bne.n	800d77a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f003 f96e 	bl	8010a54 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d778:	e002      	b.n	800d780 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f7ff fc80 	bl	800d080 <HAL_SD_ErrorCallback>
}
 800d780:	bf00      	nop
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d788:	b5b0      	push	{r4, r5, r7, lr}
 800d78a:	b094      	sub	sp, #80	; 0x50
 800d78c:	af04      	add	r7, sp, #16
 800d78e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d790:	2301      	movs	r3, #1
 800d792:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4618      	mov	r0, r3
 800d79a:	f002 fbc5 	bl	800ff28 <SDIO_GetPowerState>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d102      	bne.n	800d7aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d7a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d7a8:	e0b7      	b.n	800d91a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d02f      	beq.n	800d812 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f002 fdee 	bl	8010398 <SDMMC_CmdSendCID>
 800d7bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <SD_InitCard+0x40>
    {
      return errorstate;
 800d7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c6:	e0a8      	b.n	800d91a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f002 fbef 	bl	800ffb2 <SDIO_GetResponse>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2104      	movs	r1, #4
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f002 fbe6 	bl	800ffb2 <SDIO_GetResponse>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2108      	movs	r1, #8
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f002 fbdd 	bl	800ffb2 <SDIO_GetResponse>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	210c      	movs	r1, #12
 800d804:	4618      	mov	r0, r3
 800d806:	f002 fbd4 	bl	800ffb2 <SDIO_GetResponse>
 800d80a:	4602      	mov	r2, r0
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d816:	2b03      	cmp	r3, #3
 800d818:	d00d      	beq.n	800d836 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f107 020e 	add.w	r2, r7, #14
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f002 fdf4 	bl	8010412 <SDMMC_CmdSetRelAdd>
 800d82a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <SD_InitCard+0xae>
    {
      return errorstate;
 800d832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d834:	e071      	b.n	800d91a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83a:	2b03      	cmp	r3, #3
 800d83c:	d036      	beq.n	800d8ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d83e:	89fb      	ldrh	r3, [r7, #14]
 800d840:	461a      	mov	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d84e:	041b      	lsls	r3, r3, #16
 800d850:	4619      	mov	r1, r3
 800d852:	4610      	mov	r0, r2
 800d854:	f002 fdbe 	bl	80103d4 <SDMMC_CmdSendCSD>
 800d858:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d862:	e05a      	b.n	800d91a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2100      	movs	r1, #0
 800d86a:	4618      	mov	r0, r3
 800d86c:	f002 fba1 	bl	800ffb2 <SDIO_GetResponse>
 800d870:	4602      	mov	r2, r0
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2104      	movs	r1, #4
 800d87c:	4618      	mov	r0, r3
 800d87e:	f002 fb98 	bl	800ffb2 <SDIO_GetResponse>
 800d882:	4602      	mov	r2, r0
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2108      	movs	r1, #8
 800d88e:	4618      	mov	r0, r3
 800d890:	f002 fb8f 	bl	800ffb2 <SDIO_GetResponse>
 800d894:	4602      	mov	r2, r0
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	210c      	movs	r1, #12
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f002 fb86 	bl	800ffb2 <SDIO_GetResponse>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2104      	movs	r1, #4
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f002 fb7d 	bl	800ffb2 <SDIO_GetResponse>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	0d1a      	lsrs	r2, r3, #20
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff fbe4 	bl	800d094 <HAL_SD_GetCardCSD>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8d6:	e020      	b.n	800d91a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6819      	ldr	r1, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e0:	041b      	lsls	r3, r3, #16
 800d8e2:	f04f 0400 	mov.w	r4, #0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	4608      	mov	r0, r1
 800d8ec:	f002 fc6c 	bl	80101c8 <SDMMC_CmdSelDesel>
 800d8f0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <SD_InitCard+0x174>
  {
    return errorstate;
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fa:	e00e      	b.n	800d91a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681d      	ldr	r5, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	466c      	mov	r4, sp
 800d904:	f103 0210 	add.w	r2, r3, #16
 800d908:	ca07      	ldmia	r2, {r0, r1, r2}
 800d90a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d90e:	3304      	adds	r3, #4
 800d910:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d912:	4628      	mov	r0, r5
 800d914:	f002 fab0 	bl	800fe78 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3740      	adds	r7, #64	; 0x40
 800d91e:	46bd      	mov	sp, r7
 800d920:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d924 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d930:	2300      	movs	r3, #0
 800d932:	617b      	str	r3, [r7, #20]
 800d934:	2300      	movs	r3, #0
 800d936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f002 fc66 	bl	801020e <SDMMC_CmdGoIdleState>
 800d942:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	e072      	b.n	800da34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4618      	mov	r0, r3
 800d954:	f002 fc79 	bl	801024a <SDMMC_CmdOperCond>
 800d958:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00d      	beq.n	800d97c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f002 fc4f 	bl	801020e <SDMMC_CmdGoIdleState>
 800d970:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d004      	beq.n	800d982 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	e05b      	b.n	800da34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2201      	movs	r2, #1
 800d980:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d986:	2b01      	cmp	r3, #1
 800d988:	d137      	bne.n	800d9fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2100      	movs	r1, #0
 800d990:	4618      	mov	r0, r3
 800d992:	f002 fc79 	bl	8010288 <SDMMC_CmdAppCommand>
 800d996:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d02d      	beq.n	800d9fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d99e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9a2:	e047      	b.n	800da34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f002 fc6c 	bl	8010288 <SDMMC_CmdAppCommand>
 800d9b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <SD_PowerON+0x98>
    {
      return errorstate;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	e03b      	b.n	800da34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	491e      	ldr	r1, [pc, #120]	; (800da3c <SD_PowerON+0x118>)
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f002 fc82 	bl	80102cc <SDMMC_CmdAppOperCommand>
 800d9c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d002      	beq.n	800d9d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9d4:	e02e      	b.n	800da34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 fae8 	bl	800ffb2 <SDIO_GetResponse>
 800d9e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	0fdb      	lsrs	r3, r3, #31
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d101      	bne.n	800d9f0 <SD_PowerON+0xcc>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e000      	b.n	800d9f2 <SD_PowerON+0xce>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	613b      	str	r3, [r7, #16]

    count++;
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da00:	4293      	cmp	r3, r2
 800da02:	d802      	bhi.n	800da0a <SD_PowerON+0xe6>
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0cc      	beq.n	800d9a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da10:	4293      	cmp	r3, r2
 800da12:	d902      	bls.n	800da1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800da14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da18:	e00c      	b.n	800da34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d003      	beq.n	800da2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	645a      	str	r2, [r3, #68]	; 0x44
 800da2a:	e002      	b.n	800da32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	c1100000 	.word	0xc1100000

0800da40 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d102      	bne.n	800da56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800da50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da54:	e018      	b.n	800da88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da5e:	041b      	lsls	r3, r3, #16
 800da60:	4619      	mov	r1, r3
 800da62:	4610      	mov	r0, r2
 800da64:	f002 fcf6 	bl	8010454 <SDMMC_CmdSendStatus>
 800da68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <SD_SendStatus+0x34>
  {
    return errorstate;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	e009      	b.n	800da88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2100      	movs	r1, #0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f002 fa99 	bl	800ffb2 <SDIO_GetResponse>
 800da80:	4602      	mov	r2, r0
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800da98:	2300      	movs	r3, #0
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	2300      	movs	r3, #0
 800da9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2100      	movs	r1, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f002 fa83 	bl	800ffb2 <SDIO_GetResponse>
 800daac:	4603      	mov	r3, r0
 800daae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dab6:	d102      	bne.n	800dabe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dabc:	e02f      	b.n	800db1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dabe:	f107 030c 	add.w	r3, r7, #12
 800dac2:	4619      	mov	r1, r3
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f879 	bl	800dbbc <SD_FindSCR>
 800daca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	e023      	b.n	800db1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d01c      	beq.n	800db1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f002 fbcb 	bl	8010288 <SDMMC_CmdAppCommand>
 800daf2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	e00f      	b.n	800db1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2102      	movs	r1, #2
 800db04:	4618      	mov	r0, r3
 800db06:	f002 fc04 	bl	8010312 <SDMMC_CmdBusWidth>
 800db0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	e003      	b.n	800db1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db16:	2300      	movs	r3, #0
 800db18:	e001      	b.n	800db1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3718      	adds	r7, #24
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b086      	sub	sp, #24
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db2e:	2300      	movs	r3, #0
 800db30:	60fb      	str	r3, [r7, #12]
 800db32:	2300      	movs	r3, #0
 800db34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2100      	movs	r1, #0
 800db3c:	4618      	mov	r0, r3
 800db3e:	f002 fa38 	bl	800ffb2 <SDIO_GetResponse>
 800db42:	4603      	mov	r3, r0
 800db44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db4c:	d102      	bne.n	800db54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db52:	e02f      	b.n	800dbb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db54:	f107 030c 	add.w	r3, r7, #12
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f82e 	bl	800dbbc <SD_FindSCR>
 800db60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	e023      	b.n	800dbb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d01c      	beq.n	800dbb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db7e:	041b      	lsls	r3, r3, #16
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f002 fb80 	bl	8010288 <SDMMC_CmdAppCommand>
 800db88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	e00f      	b.n	800dbb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2100      	movs	r1, #0
 800db9a:	4618      	mov	r0, r3
 800db9c:	f002 fbb9 	bl	8010312 <SDMMC_CmdBusWidth>
 800dba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	e003      	b.n	800dbb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	e001      	b.n	800dbb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dbbc:	b590      	push	{r4, r7, lr}
 800dbbe:	b08f      	sub	sp, #60	; 0x3c
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dbc6:	f7fb fd7b 	bl	80096c0 <HAL_GetTick>
 800dbca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	60bb      	str	r3, [r7, #8]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2108      	movs	r1, #8
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f002 fa24 	bl	8010030 <SDMMC_CmdBlockLength>
 800dbe8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	e0a9      	b.n	800dd48 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbfc:	041b      	lsls	r3, r3, #16
 800dbfe:	4619      	mov	r1, r3
 800dc00:	4610      	mov	r0, r2
 800dc02:	f002 fb41 	bl	8010288 <SDMMC_CmdAppCommand>
 800dc06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	e09a      	b.n	800dd48 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc12:	f04f 33ff 	mov.w	r3, #4294967295
 800dc16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc18:	2308      	movs	r3, #8
 800dc1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dc1c:	2330      	movs	r3, #48	; 0x30
 800dc1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dc20:	2302      	movs	r3, #2
 800dc22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f107 0210 	add.w	r2, r7, #16
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f002 f9ce 	bl	800ffd8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f002 fb88 	bl	8010356 <SDMMC_CmdSendSCR>
 800dc46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d022      	beq.n	800dc94 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	e07a      	b.n	800dd48 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00e      	beq.n	800dc7e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6819      	ldr	r1, [r3, #0]
 800dc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	f107 0208 	add.w	r2, r7, #8
 800dc6c:	18d4      	adds	r4, r2, r3
 800dc6e:	4608      	mov	r0, r1
 800dc70:	f002 f92d 	bl	800fece <SDIO_ReadFIFO>
 800dc74:	4603      	mov	r3, r0
 800dc76:	6023      	str	r3, [r4, #0]
      index++;
 800dc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dc7e:	f7fb fd1f 	bl	80096c0 <HAL_GetTick>
 800dc82:	4602      	mov	r2, r0
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc8c:	d102      	bne.n	800dc94 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dc8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc92:	e059      	b.n	800dd48 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc9a:	f240 432a 	movw	r3, #1066	; 0x42a
 800dc9e:	4013      	ands	r3, r2
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d0d6      	beq.n	800dc52 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	f003 0308 	and.w	r3, r3, #8
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d005      	beq.n	800dcbe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2208      	movs	r2, #8
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dcba:	2308      	movs	r3, #8
 800dcbc:	e044      	b.n	800dd48 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	f003 0302 	and.w	r3, r3, #2
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d005      	beq.n	800dcd8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	e037      	b.n	800dd48 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcde:	f003 0320 	and.w	r3, r3, #32
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d005      	beq.n	800dcf2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2220      	movs	r2, #32
 800dcec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dcee:	2320      	movs	r3, #32
 800dcf0:	e02a      	b.n	800dd48 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dcfa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	061a      	lsls	r2, r3, #24
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	021b      	lsls	r3, r3, #8
 800dd04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	0a1b      	lsrs	r3, r3, #8
 800dd0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	0e1b      	lsrs	r3, r3, #24
 800dd18:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	601a      	str	r2, [r3, #0]
    scr++;
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd20:	3304      	adds	r3, #4
 800dd22:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	061a      	lsls	r2, r3, #24
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	021b      	lsls	r3, r3, #8
 800dd2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	0a1b      	lsrs	r3, r3, #8
 800dd36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	0e1b      	lsrs	r3, r3, #24
 800dd40:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd44:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	373c      	adds	r7, #60	; 0x3c
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd90      	pop	{r4, r7, pc}

0800dd50 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd62:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d03f      	beq.n	800ddea <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]
 800dd6e:	e033      	b.n	800ddd8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f002 f8aa 	bl	800fece <SDIO_ReadFIFO>
 800dd7a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	3301      	adds	r3, #1
 800dd88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	0a1b      	lsrs	r3, r3, #8
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	0c1b      	lsrs	r3, r3, #16
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	0e1b      	lsrs	r3, r3, #24
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	2b07      	cmp	r3, #7
 800dddc:	d9c8      	bls.n	800dd70 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	693a      	ldr	r2, [r7, #16]
 800dde8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ddea:	bf00      	nop
 800ddec:	3718      	adds	r7, #24
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b086      	sub	sp, #24
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de04:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d043      	beq.n	800de94 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800de0c:	2300      	movs	r3, #0
 800de0e:	617b      	str	r3, [r7, #20]
 800de10:	e037      	b.n	800de82 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3301      	adds	r3, #1
 800de1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	3b01      	subs	r3, #1
 800de22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	021a      	lsls	r2, r3, #8
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	4313      	orrs	r3, r2
 800de2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	3301      	adds	r3, #1
 800de34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	3b01      	subs	r3, #1
 800de3a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	041a      	lsls	r2, r3, #16
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	4313      	orrs	r3, r2
 800de46:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3301      	adds	r3, #1
 800de4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	3b01      	subs	r3, #1
 800de52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	061a      	lsls	r2, r3, #24
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3301      	adds	r3, #1
 800de64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	3b01      	subs	r3, #1
 800de6a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f107 0208 	add.w	r2, r7, #8
 800de74:	4611      	mov	r1, r2
 800de76:	4618      	mov	r0, r3
 800de78:	f002 f836 	bl	800fee8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	3301      	adds	r3, #1
 800de80:	617b      	str	r3, [r7, #20]
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	2b07      	cmp	r3, #7
 800de86:	d9c4      	bls.n	800de12 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800de94:	bf00      	nop
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	e056      	b.n	800df5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800deba:	b2db      	uxtb	r3, r3
 800debc:	2b00      	cmp	r3, #0
 800debe:	d106      	bne.n	800dece <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7f8 fe8b 	bl	8006be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2202      	movs	r2, #2
 800ded2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dee4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	685a      	ldr	r2, [r3, #4]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	431a      	orrs	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	431a      	orrs	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	431a      	orrs	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	699b      	ldr	r3, [r3, #24]
 800df06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df0a:	431a      	orrs	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	69db      	ldr	r3, [r3, #28]
 800df10:	431a      	orrs	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	ea42 0103 	orr.w	r1, r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	430a      	orrs	r2, r1
 800df24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	0c1b      	lsrs	r3, r3, #16
 800df2c:	f003 0104 	and.w	r1, r3, #4
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	430a      	orrs	r2, r1
 800df3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	69da      	ldr	r2, [r3, #28]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b088      	sub	sp, #32
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	4613      	mov	r3, r2
 800df72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d101      	bne.n	800df86 <HAL_SPI_Transmit+0x22>
 800df82:	2302      	movs	r3, #2
 800df84:	e11e      	b.n	800e1c4 <HAL_SPI_Transmit+0x260>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df8e:	f7fb fb97 	bl	80096c0 <HAL_GetTick>
 800df92:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800df94:	88fb      	ldrh	r3, [r7, #6]
 800df96:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d002      	beq.n	800dfaa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dfa8:	e103      	b.n	800e1b2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d002      	beq.n	800dfb6 <HAL_SPI_Transmit+0x52>
 800dfb0:	88fb      	ldrh	r3, [r7, #6]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d102      	bne.n	800dfbc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dfba:	e0fa      	b.n	800e1b2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2203      	movs	r2, #3
 800dfc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	88fa      	ldrh	r2, [r7, #6]
 800dfd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	88fa      	ldrh	r2, [r7, #6]
 800dfda:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2200      	movs	r2, #0
 800dfec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2200      	movs	r2, #0
 800dff8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e002:	d107      	bne.n	800e014 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e012:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e01e:	2b40      	cmp	r3, #64	; 0x40
 800e020:	d007      	beq.n	800e032 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e03a:	d14b      	bne.n	800e0d4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <HAL_SPI_Transmit+0xe6>
 800e044:	8afb      	ldrh	r3, [r7, #22]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d13e      	bne.n	800e0c8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e04e:	881a      	ldrh	r2, [r3, #0]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05a:	1c9a      	adds	r2, r3, #2
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e064:	b29b      	uxth	r3, r3
 800e066:	3b01      	subs	r3, #1
 800e068:	b29a      	uxth	r2, r3
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e06e:	e02b      	b.n	800e0c8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d112      	bne.n	800e0a4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e082:	881a      	ldrh	r2, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08e:	1c9a      	adds	r2, r3, #2
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e098:	b29b      	uxth	r3, r3
 800e09a:	3b01      	subs	r3, #1
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e0a2:	e011      	b.n	800e0c8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0a4:	f7fb fb0c 	bl	80096c0 <HAL_GetTick>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d803      	bhi.n	800e0bc <HAL_SPI_Transmit+0x158>
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ba:	d102      	bne.n	800e0c2 <HAL_SPI_Transmit+0x15e>
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d102      	bne.n	800e0c8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e0c2:	2303      	movs	r3, #3
 800e0c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e0c6:	e074      	b.n	800e1b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1ce      	bne.n	800e070 <HAL_SPI_Transmit+0x10c>
 800e0d2:	e04c      	b.n	800e16e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <HAL_SPI_Transmit+0x17e>
 800e0dc:	8afb      	ldrh	r3, [r7, #22]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d140      	bne.n	800e164 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	330c      	adds	r3, #12
 800e0ec:	7812      	ldrb	r2, [r2, #0]
 800e0ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0f4:	1c5a      	adds	r2, r3, #1
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	3b01      	subs	r3, #1
 800e102:	b29a      	uxth	r2, r3
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e108:	e02c      	b.n	800e164 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	f003 0302 	and.w	r3, r3, #2
 800e114:	2b02      	cmp	r3, #2
 800e116:	d113      	bne.n	800e140 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	330c      	adds	r3, #12
 800e122:	7812      	ldrb	r2, [r2, #0]
 800e124:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e134:	b29b      	uxth	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e13e:	e011      	b.n	800e164 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e140:	f7fb fabe 	bl	80096c0 <HAL_GetTick>
 800e144:	4602      	mov	r2, r0
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d803      	bhi.n	800e158 <HAL_SPI_Transmit+0x1f4>
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e156:	d102      	bne.n	800e15e <HAL_SPI_Transmit+0x1fa>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d102      	bne.n	800e164 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e162:	e026      	b.n	800e1b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e168:	b29b      	uxth	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1cd      	bne.n	800e10a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e16e:	69ba      	ldr	r2, [r7, #24]
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 fba4 	bl	800e8c0 <SPI_EndRxTxTransaction>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d002      	beq.n	800e184 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2220      	movs	r2, #32
 800e182:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10a      	bne.n	800e1a2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e18c:	2300      	movs	r3, #0
 800e18e:	613b      	str	r3, [r7, #16]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	613b      	str	r3, [r7, #16]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	613b      	str	r3, [r7, #16]
 800e1a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d002      	beq.n	800e1b0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	77fb      	strb	r3, [r7, #31]
 800e1ae:	e000      	b.n	800e1b2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e1b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e1c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3720      	adds	r7, #32
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af02      	add	r7, sp, #8
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	603b      	str	r3, [r7, #0]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1e8:	d112      	bne.n	800e210 <HAL_SPI_Receive+0x44>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10e      	bne.n	800e210 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2204      	movs	r2, #4
 800e1f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e1fa:	88fa      	ldrh	r2, [r7, #6]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	4613      	mov	r3, r2
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	68b9      	ldr	r1, [r7, #8]
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f8e9 	bl	800e3de <HAL_SPI_TransmitReceive>
 800e20c:	4603      	mov	r3, r0
 800e20e:	e0e2      	b.n	800e3d6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e216:	2b01      	cmp	r3, #1
 800e218:	d101      	bne.n	800e21e <HAL_SPI_Receive+0x52>
 800e21a:	2302      	movs	r3, #2
 800e21c:	e0db      	b.n	800e3d6 <HAL_SPI_Receive+0x20a>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e226:	f7fb fa4b 	bl	80096c0 <HAL_GetTick>
 800e22a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b01      	cmp	r3, #1
 800e236:	d002      	beq.n	800e23e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e238:	2302      	movs	r3, #2
 800e23a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e23c:	e0c2      	b.n	800e3c4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <HAL_SPI_Receive+0x7e>
 800e244:	88fb      	ldrh	r3, [r7, #6]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d102      	bne.n	800e250 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e24e:	e0b9      	b.n	800e3c4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2204      	movs	r2, #4
 800e254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	88fa      	ldrh	r2, [r7, #6]
 800e268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	88fa      	ldrh	r2, [r7, #6]
 800e26e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2200      	movs	r2, #0
 800e286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e296:	d107      	bne.n	800e2a8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e2a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b2:	2b40      	cmp	r3, #64	; 0x40
 800e2b4:	d007      	beq.n	800e2c6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d162      	bne.n	800e394 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e2ce:	e02e      	b.n	800e32e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d115      	bne.n	800e30a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f103 020c 	add.w	r2, r3, #12
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ea:	7812      	ldrb	r2, [r2, #0]
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e308:	e011      	b.n	800e32e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e30a:	f7fb f9d9 	bl	80096c0 <HAL_GetTick>
 800e30e:	4602      	mov	r2, r0
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d803      	bhi.n	800e322 <HAL_SPI_Receive+0x156>
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e320:	d102      	bne.n	800e328 <HAL_SPI_Receive+0x15c>
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e328:	2303      	movs	r3, #3
 800e32a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e32c:	e04a      	b.n	800e3c4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e332:	b29b      	uxth	r3, r3
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1cb      	bne.n	800e2d0 <HAL_SPI_Receive+0x104>
 800e338:	e031      	b.n	800e39e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	f003 0301 	and.w	r3, r3, #1
 800e344:	2b01      	cmp	r3, #1
 800e346:	d113      	bne.n	800e370 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68da      	ldr	r2, [r3, #12]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e352:	b292      	uxth	r2, r2
 800e354:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35a:	1c9a      	adds	r2, r3, #2
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e364:	b29b      	uxth	r3, r3
 800e366:	3b01      	subs	r3, #1
 800e368:	b29a      	uxth	r2, r3
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e36e:	e011      	b.n	800e394 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e370:	f7fb f9a6 	bl	80096c0 <HAL_GetTick>
 800e374:	4602      	mov	r2, r0
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d803      	bhi.n	800e388 <HAL_SPI_Receive+0x1bc>
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e386:	d102      	bne.n	800e38e <HAL_SPI_Receive+0x1c2>
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d102      	bne.n	800e394 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e38e:	2303      	movs	r3, #3
 800e390:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e392:	e017      	b.n	800e3c4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e398:	b29b      	uxth	r3, r3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1cd      	bne.n	800e33a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e39e:	693a      	ldr	r2, [r7, #16]
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f000 fa27 	bl	800e7f6 <SPI_EndRxTransaction>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d002      	beq.n	800e3b4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2220      	movs	r2, #32
 800e3b2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	75fb      	strb	r3, [r7, #23]
 800e3c0:	e000      	b.n	800e3c4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e3c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b08c      	sub	sp, #48	; 0x30
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	60f8      	str	r0, [r7, #12]
 800e3e6:	60b9      	str	r1, [r7, #8]
 800e3e8:	607a      	str	r2, [r7, #4]
 800e3ea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d101      	bne.n	800e404 <HAL_SPI_TransmitReceive+0x26>
 800e400:	2302      	movs	r3, #2
 800e402:	e18a      	b.n	800e71a <HAL_SPI_TransmitReceive+0x33c>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e40c:	f7fb f958 	bl	80096c0 <HAL_GetTick>
 800e410:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e422:	887b      	ldrh	r3, [r7, #2]
 800e424:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d00f      	beq.n	800e44e <HAL_SPI_TransmitReceive+0x70>
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e434:	d107      	bne.n	800e446 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d103      	bne.n	800e446 <HAL_SPI_TransmitReceive+0x68>
 800e43e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e442:	2b04      	cmp	r3, #4
 800e444:	d003      	beq.n	800e44e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e446:	2302      	movs	r3, #2
 800e448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e44c:	e15b      	b.n	800e706 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d005      	beq.n	800e460 <HAL_SPI_TransmitReceive+0x82>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <HAL_SPI_TransmitReceive+0x82>
 800e45a:	887b      	ldrh	r3, [r7, #2]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d103      	bne.n	800e468 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e460:	2301      	movs	r3, #1
 800e462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e466:	e14e      	b.n	800e706 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b04      	cmp	r3, #4
 800e472:	d003      	beq.n	800e47c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2205      	movs	r2, #5
 800e478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	887a      	ldrh	r2, [r7, #2]
 800e48c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	887a      	ldrh	r2, [r7, #2]
 800e492:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	887a      	ldrh	r2, [r7, #2]
 800e49e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	887a      	ldrh	r2, [r7, #2]
 800e4a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4bc:	2b40      	cmp	r3, #64	; 0x40
 800e4be:	d007      	beq.n	800e4d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4d8:	d178      	bne.n	800e5cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d002      	beq.n	800e4e8 <HAL_SPI_TransmitReceive+0x10a>
 800e4e2:	8b7b      	ldrh	r3, [r7, #26]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d166      	bne.n	800e5b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ec:	881a      	ldrh	r2, [r3, #0]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f8:	1c9a      	adds	r2, r3, #2
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e502:	b29b      	uxth	r3, r3
 800e504:	3b01      	subs	r3, #1
 800e506:	b29a      	uxth	r2, r3
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e50c:	e053      	b.n	800e5b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	f003 0302 	and.w	r3, r3, #2
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d11b      	bne.n	800e554 <HAL_SPI_TransmitReceive+0x176>
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e520:	b29b      	uxth	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d016      	beq.n	800e554 <HAL_SPI_TransmitReceive+0x176>
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d113      	bne.n	800e554 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e530:	881a      	ldrh	r2, [r3, #0]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e53c:	1c9a      	adds	r2, r3, #2
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e546:	b29b      	uxth	r3, r3
 800e548:	3b01      	subs	r3, #1
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e550:	2300      	movs	r3, #0
 800e552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	f003 0301 	and.w	r3, r3, #1
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d119      	bne.n	800e596 <HAL_SPI_TransmitReceive+0x1b8>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e566:	b29b      	uxth	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d014      	beq.n	800e596 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	68da      	ldr	r2, [r3, #12]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e576:	b292      	uxth	r2, r2
 800e578:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57e:	1c9a      	adds	r2, r3, #2
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e588:	b29b      	uxth	r3, r3
 800e58a:	3b01      	subs	r3, #1
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e592:	2301      	movs	r3, #1
 800e594:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e596:	f7fb f893 	bl	80096c0 <HAL_GetTick>
 800e59a:	4602      	mov	r2, r0
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d807      	bhi.n	800e5b6 <HAL_SPI_TransmitReceive+0x1d8>
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ac:	d003      	beq.n	800e5b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e5ae:	2303      	movs	r3, #3
 800e5b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e5b4:	e0a7      	b.n	800e706 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1a6      	bne.n	800e50e <HAL_SPI_TransmitReceive+0x130>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1a1      	bne.n	800e50e <HAL_SPI_TransmitReceive+0x130>
 800e5ca:	e07c      	b.n	800e6c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <HAL_SPI_TransmitReceive+0x1fc>
 800e5d4:	8b7b      	ldrh	r3, [r7, #26]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d16b      	bne.n	800e6b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	330c      	adds	r3, #12
 800e5e4:	7812      	ldrb	r2, [r2, #0]
 800e5e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ec:	1c5a      	adds	r2, r3, #1
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e600:	e057      	b.n	800e6b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 0302 	and.w	r3, r3, #2
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d11c      	bne.n	800e64a <HAL_SPI_TransmitReceive+0x26c>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e614:	b29b      	uxth	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d017      	beq.n	800e64a <HAL_SPI_TransmitReceive+0x26c>
 800e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d114      	bne.n	800e64a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	330c      	adds	r3, #12
 800e62a:	7812      	ldrb	r2, [r2, #0]
 800e62c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e632:	1c5a      	adds	r2, r3, #1
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	3b01      	subs	r3, #1
 800e640:	b29a      	uxth	r2, r3
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e646:	2300      	movs	r3, #0
 800e648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	2b01      	cmp	r3, #1
 800e656:	d119      	bne.n	800e68c <HAL_SPI_TransmitReceive+0x2ae>
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d014      	beq.n	800e68c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	68da      	ldr	r2, [r3, #12]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66c:	b2d2      	uxtb	r2, r2
 800e66e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e674:	1c5a      	adds	r2, r3, #1
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e67e:	b29b      	uxth	r3, r3
 800e680:	3b01      	subs	r3, #1
 800e682:	b29a      	uxth	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e688:	2301      	movs	r3, #1
 800e68a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e68c:	f7fb f818 	bl	80096c0 <HAL_GetTick>
 800e690:	4602      	mov	r2, r0
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e698:	429a      	cmp	r2, r3
 800e69a:	d803      	bhi.n	800e6a4 <HAL_SPI_TransmitReceive+0x2c6>
 800e69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d102      	bne.n	800e6aa <HAL_SPI_TransmitReceive+0x2cc>
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d103      	bne.n	800e6b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e6b0:	e029      	b.n	800e706 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1a2      	bne.n	800e602 <HAL_SPI_TransmitReceive+0x224>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d19d      	bne.n	800e602 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f000 f8f8 	bl	800e8c0 <SPI_EndRxTxTransaction>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d006      	beq.n	800e6e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2220      	movs	r2, #32
 800e6e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e6e2:	e010      	b.n	800e706 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10b      	bne.n	800e704 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	617b      	str	r3, [r7, #20]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	e000      	b.n	800e706 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e704:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e716:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3730      	adds	r7, #48	; 0x30
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	603b      	str	r3, [r7, #0]
 800e72e:	4613      	mov	r3, r2
 800e730:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e732:	e04c      	b.n	800e7ce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73a:	d048      	beq.n	800e7ce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e73c:	f7fa ffc0 	bl	80096c0 <HAL_GetTick>
 800e740:	4602      	mov	r2, r0
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d902      	bls.n	800e752 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d13d      	bne.n	800e7ce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e76a:	d111      	bne.n	800e790 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e774:	d004      	beq.n	800e780 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e77e:	d107      	bne.n	800e790 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e78e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e798:	d10f      	bne.n	800e7ba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	e00f      	b.n	800e7ee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	4013      	ands	r3, r2
 800e7d8:	68ba      	ldr	r2, [r7, #8]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	bf0c      	ite	eq
 800e7de:	2301      	moveq	r3, #1
 800e7e0:	2300      	movne	r3, #0
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d1a3      	bne.n	800e734 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b086      	sub	sp, #24
 800e7fa:	af02      	add	r7, sp, #8
 800e7fc:	60f8      	str	r0, [r7, #12]
 800e7fe:	60b9      	str	r1, [r7, #8]
 800e800:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e80a:	d111      	bne.n	800e830 <SPI_EndRxTransaction+0x3a>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e814:	d004      	beq.n	800e820 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e81e:	d107      	bne.n	800e830 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e82e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e838:	d12a      	bne.n	800e890 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e842:	d012      	beq.n	800e86a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2200      	movs	r2, #0
 800e84c:	2180      	movs	r1, #128	; 0x80
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f7ff ff67 	bl	800e722 <SPI_WaitFlagStateUntilTimeout>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d02d      	beq.n	800e8b6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e85e:	f043 0220 	orr.w	r2, r3, #32
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e866:	2303      	movs	r3, #3
 800e868:	e026      	b.n	800e8b8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	2200      	movs	r2, #0
 800e872:	2101      	movs	r1, #1
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f7ff ff54 	bl	800e722 <SPI_WaitFlagStateUntilTimeout>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d01a      	beq.n	800e8b6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e884:	f043 0220 	orr.w	r2, r3, #32
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e88c:	2303      	movs	r3, #3
 800e88e:	e013      	b.n	800e8b8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2200      	movs	r2, #0
 800e898:	2101      	movs	r1, #1
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f7ff ff41 	bl	800e722 <SPI_WaitFlagStateUntilTimeout>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d007      	beq.n	800e8b6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8aa:	f043 0220 	orr.w	r2, r3, #32
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	e000      	b.n	800e8b8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e8cc:	4b1b      	ldr	r3, [pc, #108]	; (800e93c <SPI_EndRxTxTransaction+0x7c>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a1b      	ldr	r2, [pc, #108]	; (800e940 <SPI_EndRxTxTransaction+0x80>)
 800e8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d6:	0d5b      	lsrs	r3, r3, #21
 800e8d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e8dc:	fb02 f303 	mul.w	r3, r2, r3
 800e8e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8ea:	d112      	bne.n	800e912 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2180      	movs	r1, #128	; 0x80
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7ff ff13 	bl	800e722 <SPI_WaitFlagStateUntilTimeout>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d016      	beq.n	800e930 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e906:	f043 0220 	orr.w	r2, r3, #32
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e90e:	2303      	movs	r3, #3
 800e910:	e00f      	b.n	800e932 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00a      	beq.n	800e92e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e928:	2b80      	cmp	r3, #128	; 0x80
 800e92a:	d0f2      	beq.n	800e912 <SPI_EndRxTxTransaction+0x52>
 800e92c:	e000      	b.n	800e930 <SPI_EndRxTxTransaction+0x70>
        break;
 800e92e:	bf00      	nop
  }

  return HAL_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3718      	adds	r7, #24
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20000000 	.word	0x20000000
 800e940:	165e9f81 	.word	0x165e9f81

0800e944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d101      	bne.n	800e956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	e01d      	b.n	800e992 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7f8 f9f6 	bl	8006d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2202      	movs	r2, #2
 800e974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3304      	adds	r3, #4
 800e980:	4619      	mov	r1, r3
 800e982:	4610      	mov	r0, r2
 800e984:	f000 fb56 	bl	800f034 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e99a:	b480      	push	{r7}
 800e99c:	b085      	sub	sp, #20
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68da      	ldr	r2, [r3, #12]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f042 0201 	orr.w	r2, r2, #1
 800e9b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	f003 0307 	and.w	r3, r3, #7
 800e9bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b06      	cmp	r3, #6
 800e9c2:	d007      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f042 0201 	orr.w	r2, r2, #1
 800e9d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d101      	bne.n	800e9f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e01d      	b.n	800ea30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d106      	bne.n	800ea0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f7f8 f933 	bl	8006c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2202      	movs	r2, #2
 800ea12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f000 fb07 	bl	800f034 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2201      	movs	r2, #1
 800ea48:	6839      	ldr	r1, [r7, #0]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 fd42 	bl	800f4d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a15      	ldr	r2, [pc, #84]	; (800eaac <HAL_TIM_PWM_Start+0x74>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d004      	beq.n	800ea64 <HAL_TIM_PWM_Start+0x2c>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a14      	ldr	r2, [pc, #80]	; (800eab0 <HAL_TIM_PWM_Start+0x78>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d101      	bne.n	800ea68 <HAL_TIM_PWM_Start+0x30>
 800ea64:	2301      	movs	r3, #1
 800ea66:	e000      	b.n	800ea6a <HAL_TIM_PWM_Start+0x32>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d007      	beq.n	800ea7e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	f003 0307 	and.w	r3, r3, #7
 800ea88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b06      	cmp	r3, #6
 800ea8e:	d007      	beq.n	800eaa0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f042 0201 	orr.w	r2, r2, #1
 800ea9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	40010000 	.word	0x40010000
 800eab0:	40010400 	.word	0x40010400

0800eab4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d101      	bne.n	800eac8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	e083      	b.n	800ebd0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d106      	bne.n	800eae2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7f8 f9cd 	bl	8006e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2202      	movs	r2, #2
 800eae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	6812      	ldr	r2, [r2, #0]
 800eaf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eaf8:	f023 0307 	bic.w	r3, r3, #7
 800eafc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3304      	adds	r3, #4
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f000 fa93 	bl	800f034 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	699b      	ldr	r3, [r3, #24]
 800eb1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6a1b      	ldr	r3, [r3, #32]
 800eb24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb36:	f023 0303 	bic.w	r3, r3, #3
 800eb3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	689a      	ldr	r2, [r3, #8]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	699b      	ldr	r3, [r3, #24]
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	4313      	orrs	r3, r2
 800eb48:	693a      	ldr	r2, [r7, #16]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800eb54:	f023 030c 	bic.w	r3, r3, #12
 800eb58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eb60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	68da      	ldr	r2, [r3, #12]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	4313      	orrs	r3, r2
 800eb72:	693a      	ldr	r2, [r7, #16]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	011a      	lsls	r2, r3, #4
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	6a1b      	ldr	r3, [r3, #32]
 800eb82:	031b      	lsls	r3, r3, #12
 800eb84:	4313      	orrs	r3, r2
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800eb92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800eb9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	685a      	ldr	r2, [r3, #4]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	695b      	ldr	r3, [r3, #20]
 800eba4:	011b      	lsls	r3, r3, #4
 800eba6:	4313      	orrs	r3, r2
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d002      	beq.n	800ebee <HAL_TIM_Encoder_Start+0x16>
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d008      	beq.n	800ebfe <HAL_TIM_Encoder_Start+0x26>
 800ebec:	e00f      	b.n	800ec0e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 fc6c 	bl	800f4d4 <TIM_CCxChannelCmd>
      break;
 800ebfc:	e016      	b.n	800ec2c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2201      	movs	r2, #1
 800ec04:	2104      	movs	r1, #4
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 fc64 	bl	800f4d4 <TIM_CCxChannelCmd>
      break;
 800ec0c:	e00e      	b.n	800ec2c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2201      	movs	r2, #1
 800ec14:	2100      	movs	r1, #0
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 fc5c 	bl	800f4d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2201      	movs	r2, #1
 800ec22:	2104      	movs	r1, #4
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 fc55 	bl	800f4d4 <TIM_CCxChannelCmd>
      break;
 800ec2a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f042 0201 	orr.w	r2, r2, #1
 800ec3a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b082      	sub	sp, #8
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	f003 0302 	and.w	r3, r3, #2
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d122      	bne.n	800eca2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f003 0302 	and.w	r3, r3, #2
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d11b      	bne.n	800eca2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f06f 0202 	mvn.w	r2, #2
 800ec72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	f003 0303 	and.w	r3, r3, #3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d003      	beq.n	800ec90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 f9b5 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800ec8e:	e005      	b.n	800ec9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 f9a7 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f9b8 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b04      	cmp	r3, #4
 800ecae:	d122      	bne.n	800ecf6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	f003 0304 	and.w	r3, r3, #4
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	d11b      	bne.n	800ecf6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f06f 0204 	mvn.w	r2, #4
 800ecc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2202      	movs	r2, #2
 800eccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f98b 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800ece2:	e005      	b.n	800ecf0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 f97d 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f98e 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	f003 0308 	and.w	r3, r3, #8
 800ed00:	2b08      	cmp	r3, #8
 800ed02:	d122      	bne.n	800ed4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	f003 0308 	and.w	r3, r3, #8
 800ed0e:	2b08      	cmp	r3, #8
 800ed10:	d11b      	bne.n	800ed4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f06f 0208 	mvn.w	r2, #8
 800ed1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2204      	movs	r2, #4
 800ed20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	69db      	ldr	r3, [r3, #28]
 800ed28:	f003 0303 	and.w	r3, r3, #3
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d003      	beq.n	800ed38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f961 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800ed36:	e005      	b.n	800ed44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f953 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 f964 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	f003 0310 	and.w	r3, r3, #16
 800ed54:	2b10      	cmp	r3, #16
 800ed56:	d122      	bne.n	800ed9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	f003 0310 	and.w	r3, r3, #16
 800ed62:	2b10      	cmp	r3, #16
 800ed64:	d11b      	bne.n	800ed9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f06f 0210 	mvn.w	r2, #16
 800ed6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2208      	movs	r2, #8
 800ed74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d003      	beq.n	800ed8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 f937 	bl	800eff8 <HAL_TIM_IC_CaptureCallback>
 800ed8a:	e005      	b.n	800ed98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 f929 	bl	800efe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 f93a 	bl	800f00c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	691b      	ldr	r3, [r3, #16]
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d10e      	bne.n	800edca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	f003 0301 	and.w	r3, r3, #1
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d107      	bne.n	800edca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f06f 0201 	mvn.w	r2, #1
 800edc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7f6 fd43 	bl	8005850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edd4:	2b80      	cmp	r3, #128	; 0x80
 800edd6:	d10e      	bne.n	800edf6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ede2:	2b80      	cmp	r3, #128	; 0x80
 800ede4:	d107      	bne.n	800edf6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800edee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fc6d 	bl	800f6d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee00:	2b40      	cmp	r3, #64	; 0x40
 800ee02:	d10e      	bne.n	800ee22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee0e:	2b40      	cmp	r3, #64	; 0x40
 800ee10:	d107      	bne.n	800ee22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f8ff 	bl	800f020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	f003 0320 	and.w	r3, r3, #32
 800ee2c:	2b20      	cmp	r3, #32
 800ee2e:	d10e      	bne.n	800ee4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	f003 0320 	and.w	r3, r3, #32
 800ee3a:	2b20      	cmp	r3, #32
 800ee3c:	d107      	bne.n	800ee4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f06f 0220 	mvn.w	r2, #32
 800ee46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fc37 	bl	800f6bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee4e:	bf00      	nop
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d101      	bne.n	800ee72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ee6e:	2302      	movs	r3, #2
 800ee70:	e0b4      	b.n	800efdc <HAL_TIM_PWM_ConfigChannel+0x184>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2201      	movs	r2, #1
 800ee76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b0c      	cmp	r3, #12
 800ee86:	f200 809f 	bhi.w	800efc8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ee8a:	a201      	add	r2, pc, #4	; (adr r2, 800ee90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ee8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee90:	0800eec5 	.word	0x0800eec5
 800ee94:	0800efc9 	.word	0x0800efc9
 800ee98:	0800efc9 	.word	0x0800efc9
 800ee9c:	0800efc9 	.word	0x0800efc9
 800eea0:	0800ef05 	.word	0x0800ef05
 800eea4:	0800efc9 	.word	0x0800efc9
 800eea8:	0800efc9 	.word	0x0800efc9
 800eeac:	0800efc9 	.word	0x0800efc9
 800eeb0:	0800ef47 	.word	0x0800ef47
 800eeb4:	0800efc9 	.word	0x0800efc9
 800eeb8:	0800efc9 	.word	0x0800efc9
 800eebc:	0800efc9 	.word	0x0800efc9
 800eec0:	0800ef87 	.word	0x0800ef87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	68b9      	ldr	r1, [r7, #8]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f000 f952 	bl	800f174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	699a      	ldr	r2, [r3, #24]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f042 0208 	orr.w	r2, r2, #8
 800eede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	699a      	ldr	r2, [r3, #24]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f022 0204 	bic.w	r2, r2, #4
 800eeee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6999      	ldr	r1, [r3, #24]
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	691a      	ldr	r2, [r3, #16]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	619a      	str	r2, [r3, #24]
      break;
 800ef02:	e062      	b.n	800efca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	68b9      	ldr	r1, [r7, #8]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 f9a2 	bl	800f254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	699a      	ldr	r2, [r3, #24]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	699a      	ldr	r2, [r3, #24]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	6999      	ldr	r1, [r3, #24]
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	021a      	lsls	r2, r3, #8
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	430a      	orrs	r2, r1
 800ef42:	619a      	str	r2, [r3, #24]
      break;
 800ef44:	e041      	b.n	800efca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68b9      	ldr	r1, [r7, #8]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 f9f7 	bl	800f340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	69da      	ldr	r2, [r3, #28]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f042 0208 	orr.w	r2, r2, #8
 800ef60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	69da      	ldr	r2, [r3, #28]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f022 0204 	bic.w	r2, r2, #4
 800ef70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	69d9      	ldr	r1, [r3, #28]
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	691a      	ldr	r2, [r3, #16]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	430a      	orrs	r2, r1
 800ef82:	61da      	str	r2, [r3, #28]
      break;
 800ef84:	e021      	b.n	800efca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68b9      	ldr	r1, [r7, #8]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f000 fa4b 	bl	800f428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	69da      	ldr	r2, [r3, #28]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	69da      	ldr	r2, [r3, #28]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	69d9      	ldr	r1, [r3, #28]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	691b      	ldr	r3, [r3, #16]
 800efbc:	021a      	lsls	r2, r3, #8
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	430a      	orrs	r2, r1
 800efc4:	61da      	str	r2, [r3, #28]
      break;
 800efc6:	e000      	b.n	800efca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800efc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f000:	bf00      	nop
 800f002:	370c      	adds	r7, #12
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a40      	ldr	r2, [pc, #256]	; (800f148 <TIM_Base_SetConfig+0x114>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d013      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f052:	d00f      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a3d      	ldr	r2, [pc, #244]	; (800f14c <TIM_Base_SetConfig+0x118>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d00b      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a3c      	ldr	r2, [pc, #240]	; (800f150 <TIM_Base_SetConfig+0x11c>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d007      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a3b      	ldr	r2, [pc, #236]	; (800f154 <TIM_Base_SetConfig+0x120>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d003      	beq.n	800f074 <TIM_Base_SetConfig+0x40>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a3a      	ldr	r2, [pc, #232]	; (800f158 <TIM_Base_SetConfig+0x124>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d108      	bne.n	800f086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f07a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a2f      	ldr	r2, [pc, #188]	; (800f148 <TIM_Base_SetConfig+0x114>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d02b      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f094:	d027      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a2c      	ldr	r2, [pc, #176]	; (800f14c <TIM_Base_SetConfig+0x118>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d023      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4a2b      	ldr	r2, [pc, #172]	; (800f150 <TIM_Base_SetConfig+0x11c>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d01f      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a2a      	ldr	r2, [pc, #168]	; (800f154 <TIM_Base_SetConfig+0x120>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d01b      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a29      	ldr	r2, [pc, #164]	; (800f158 <TIM_Base_SetConfig+0x124>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d017      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a28      	ldr	r2, [pc, #160]	; (800f15c <TIM_Base_SetConfig+0x128>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d013      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a27      	ldr	r2, [pc, #156]	; (800f160 <TIM_Base_SetConfig+0x12c>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d00f      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a26      	ldr	r2, [pc, #152]	; (800f164 <TIM_Base_SetConfig+0x130>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00b      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a25      	ldr	r2, [pc, #148]	; (800f168 <TIM_Base_SetConfig+0x134>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d007      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a24      	ldr	r2, [pc, #144]	; (800f16c <TIM_Base_SetConfig+0x138>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d003      	beq.n	800f0e6 <TIM_Base_SetConfig+0xb2>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a23      	ldr	r2, [pc, #140]	; (800f170 <TIM_Base_SetConfig+0x13c>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d108      	bne.n	800f0f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	689a      	ldr	r2, [r3, #8]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a0a      	ldr	r2, [pc, #40]	; (800f148 <TIM_Base_SetConfig+0x114>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d003      	beq.n	800f12c <TIM_Base_SetConfig+0xf8>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a0c      	ldr	r2, [pc, #48]	; (800f158 <TIM_Base_SetConfig+0x124>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d103      	bne.n	800f134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	691a      	ldr	r2, [r3, #16]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2201      	movs	r2, #1
 800f138:	615a      	str	r2, [r3, #20]
}
 800f13a:	bf00      	nop
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	40010000 	.word	0x40010000
 800f14c:	40000400 	.word	0x40000400
 800f150:	40000800 	.word	0x40000800
 800f154:	40000c00 	.word	0x40000c00
 800f158:	40010400 	.word	0x40010400
 800f15c:	40014000 	.word	0x40014000
 800f160:	40014400 	.word	0x40014400
 800f164:	40014800 	.word	0x40014800
 800f168:	40001800 	.word	0x40001800
 800f16c:	40001c00 	.word	0x40001c00
 800f170:	40002000 	.word	0x40002000

0800f174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f174:	b480      	push	{r7}
 800f176:	b087      	sub	sp, #28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	f023 0201 	bic.w	r2, r3, #1
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f023 0303 	bic.w	r3, r3, #3
 800f1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f023 0302 	bic.w	r3, r3, #2
 800f1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a20      	ldr	r2, [pc, #128]	; (800f24c <TIM_OC1_SetConfig+0xd8>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d003      	beq.n	800f1d8 <TIM_OC1_SetConfig+0x64>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a1f      	ldr	r2, [pc, #124]	; (800f250 <TIM_OC1_SetConfig+0xdc>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d10c      	bne.n	800f1f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	f023 0308 	bic.w	r3, r3, #8
 800f1de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f023 0304 	bic.w	r3, r3, #4
 800f1f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a15      	ldr	r2, [pc, #84]	; (800f24c <TIM_OC1_SetConfig+0xd8>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d003      	beq.n	800f202 <TIM_OC1_SetConfig+0x8e>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a14      	ldr	r2, [pc, #80]	; (800f250 <TIM_OC1_SetConfig+0xdc>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d111      	bne.n	800f226 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	4313      	orrs	r3, r2
 800f21a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	4313      	orrs	r3, r2
 800f224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	685a      	ldr	r2, [r3, #4]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	697a      	ldr	r2, [r7, #20]
 800f23e:	621a      	str	r2, [r3, #32]
}
 800f240:	bf00      	nop
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	40010000 	.word	0x40010000
 800f250:	40010400 	.word	0x40010400

0800f254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f254:	b480      	push	{r7}
 800f256:	b087      	sub	sp, #28
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6a1b      	ldr	r3, [r3, #32]
 800f262:	f023 0210 	bic.w	r2, r3, #16
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	699b      	ldr	r3, [r3, #24]
 800f27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f28a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	021b      	lsls	r3, r3, #8
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	4313      	orrs	r3, r2
 800f296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	f023 0320 	bic.w	r3, r3, #32
 800f29e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	011b      	lsls	r3, r3, #4
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a22      	ldr	r2, [pc, #136]	; (800f338 <TIM_OC2_SetConfig+0xe4>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d003      	beq.n	800f2bc <TIM_OC2_SetConfig+0x68>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a21      	ldr	r2, [pc, #132]	; (800f33c <TIM_OC2_SetConfig+0xe8>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d10d      	bne.n	800f2d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	011b      	lsls	r3, r3, #4
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a17      	ldr	r2, [pc, #92]	; (800f338 <TIM_OC2_SetConfig+0xe4>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d003      	beq.n	800f2e8 <TIM_OC2_SetConfig+0x94>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a16      	ldr	r2, [pc, #88]	; (800f33c <TIM_OC2_SetConfig+0xe8>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d113      	bne.n	800f310 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	695b      	ldr	r3, [r3, #20]
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	4313      	orrs	r3, r2
 800f302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	693a      	ldr	r2, [r7, #16]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	693a      	ldr	r2, [r7, #16]
 800f314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	697a      	ldr	r2, [r7, #20]
 800f328:	621a      	str	r2, [r3, #32]
}
 800f32a:	bf00      	nop
 800f32c:	371c      	adds	r7, #28
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	40010000 	.word	0x40010000
 800f33c:	40010400 	.word	0x40010400

0800f340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6a1b      	ldr	r3, [r3, #32]
 800f34e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a1b      	ldr	r3, [r3, #32]
 800f35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	69db      	ldr	r3, [r3, #28]
 800f366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f023 0303 	bic.w	r3, r3, #3
 800f376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	4313      	orrs	r3, r2
 800f380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	021b      	lsls	r3, r3, #8
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	4313      	orrs	r3, r2
 800f394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a21      	ldr	r2, [pc, #132]	; (800f420 <TIM_OC3_SetConfig+0xe0>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d003      	beq.n	800f3a6 <TIM_OC3_SetConfig+0x66>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a20      	ldr	r2, [pc, #128]	; (800f424 <TIM_OC3_SetConfig+0xe4>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d10d      	bne.n	800f3c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	021b      	lsls	r3, r3, #8
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4a16      	ldr	r2, [pc, #88]	; (800f420 <TIM_OC3_SetConfig+0xe0>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d003      	beq.n	800f3d2 <TIM_OC3_SetConfig+0x92>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4a15      	ldr	r2, [pc, #84]	; (800f424 <TIM_OC3_SetConfig+0xe4>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d113      	bne.n	800f3fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	699b      	ldr	r3, [r3, #24]
 800f3f2:	011b      	lsls	r3, r3, #4
 800f3f4:	693a      	ldr	r2, [r7, #16]
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	685a      	ldr	r2, [r3, #4]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	697a      	ldr	r2, [r7, #20]
 800f412:	621a      	str	r2, [r3, #32]
}
 800f414:	bf00      	nop
 800f416:	371c      	adds	r7, #28
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	40010000 	.word	0x40010000
 800f424:	40010400 	.word	0x40010400

0800f428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f428:	b480      	push	{r7}
 800f42a:	b087      	sub	sp, #28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a1b      	ldr	r3, [r3, #32]
 800f436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	69db      	ldr	r3, [r3, #28]
 800f44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	021b      	lsls	r3, r3, #8
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	4313      	orrs	r3, r2
 800f46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	031b      	lsls	r3, r3, #12
 800f47a:	693a      	ldr	r2, [r7, #16]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a12      	ldr	r2, [pc, #72]	; (800f4cc <TIM_OC4_SetConfig+0xa4>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d003      	beq.n	800f490 <TIM_OC4_SetConfig+0x68>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a11      	ldr	r2, [pc, #68]	; (800f4d0 <TIM_OC4_SetConfig+0xa8>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d109      	bne.n	800f4a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	695b      	ldr	r3, [r3, #20]
 800f49c:	019b      	lsls	r3, r3, #6
 800f49e:	697a      	ldr	r2, [r7, #20]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	693a      	ldr	r2, [r7, #16]
 800f4bc:	621a      	str	r2, [r3, #32]
}
 800f4be:	bf00      	nop
 800f4c0:	371c      	adds	r7, #28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	40010000 	.word	0x40010000
 800f4d0:	40010400 	.word	0x40010400

0800f4d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b087      	sub	sp, #28
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	f003 031f 	and.w	r3, r3, #31
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6a1a      	ldr	r2, [r3, #32]
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	43db      	mvns	r3, r3
 800f4f6:	401a      	ands	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	6a1a      	ldr	r2, [r3, #32]
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	f003 031f 	and.w	r3, r3, #31
 800f506:	6879      	ldr	r1, [r7, #4]
 800f508:	fa01 f303 	lsl.w	r3, r1, r3
 800f50c:	431a      	orrs	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	621a      	str	r2, [r3, #32]
}
 800f512:	bf00      	nop
 800f514:	371c      	adds	r7, #28
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
	...

0800f520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f530:	2b01      	cmp	r3, #1
 800f532:	d101      	bne.n	800f538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f534:	2302      	movs	r3, #2
 800f536:	e05a      	b.n	800f5ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f55e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	4313      	orrs	r3, r2
 800f568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a21      	ldr	r2, [pc, #132]	; (800f5fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d022      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f584:	d01d      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4a1d      	ldr	r2, [pc, #116]	; (800f600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d018      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a1b      	ldr	r2, [pc, #108]	; (800f604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d013      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a1a      	ldr	r2, [pc, #104]	; (800f608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d00e      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a18      	ldr	r2, [pc, #96]	; (800f60c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d009      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a17      	ldr	r2, [pc, #92]	; (800f610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d004      	beq.n	800f5c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a15      	ldr	r2, [pc, #84]	; (800f614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d10c      	bne.n	800f5dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	40010000 	.word	0x40010000
 800f600:	40000400 	.word	0x40000400
 800f604:	40000800 	.word	0x40000800
 800f608:	40000c00 	.word	0x40000c00
 800f60c:	40010400 	.word	0x40010400
 800f610:	40014000 	.word	0x40014000
 800f614:	40001800 	.word	0x40001800

0800f618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f622:	2300      	movs	r3, #0
 800f624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d101      	bne.n	800f634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f630:	2302      	movs	r3, #2
 800f632:	e03d      	b.n	800f6b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	4313      	orrs	r3, r2
 800f648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	4313      	orrs	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	4313      	orrs	r3, r2
 800f664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4313      	orrs	r3, r2
 800f672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	691b      	ldr	r3, [r3, #16]
 800f67e:	4313      	orrs	r3, r2
 800f680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	695b      	ldr	r3, [r3, #20]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	69db      	ldr	r3, [r3, #28]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3714      	adds	r7, #20
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e03f      	b.n	800f776 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d106      	bne.n	800f710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7f7 fce0 	bl	80070d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2224      	movs	r2, #36	; 0x24
 800f714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68da      	ldr	r2, [r3, #12]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f829 	bl	800f780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	691a      	ldr	r2, [r3, #16]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f73c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	695a      	ldr	r2, [r3, #20]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f74c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68da      	ldr	r2, [r3, #12]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f75c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2220      	movs	r2, #32
 800f768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2220      	movs	r2, #32
 800f770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
	...

0800f780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	b085      	sub	sp, #20
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	68da      	ldr	r2, [r3, #12]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	430a      	orrs	r2, r1
 800f79e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	689a      	ldr	r2, [r3, #8]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	431a      	orrs	r2, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	695b      	ldr	r3, [r3, #20]
 800f7ae:	431a      	orrs	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	69db      	ldr	r3, [r3, #28]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f7c2:	f023 030c 	bic.w	r3, r3, #12
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	6812      	ldr	r2, [r2, #0]
 800f7ca:	68f9      	ldr	r1, [r7, #12]
 800f7cc:	430b      	orrs	r3, r1
 800f7ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	699a      	ldr	r2, [r3, #24]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	430a      	orrs	r2, r1
 800f7e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	69db      	ldr	r3, [r3, #28]
 800f7ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7ee:	f040 818b 	bne.w	800fb08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4ac1      	ldr	r2, [pc, #772]	; (800fafc <UART_SetConfig+0x37c>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d005      	beq.n	800f808 <UART_SetConfig+0x88>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4abf      	ldr	r2, [pc, #764]	; (800fb00 <UART_SetConfig+0x380>)
 800f802:	4293      	cmp	r3, r2
 800f804:	f040 80bd 	bne.w	800f982 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f808:	f7fc fbcc 	bl	800bfa4 <HAL_RCC_GetPCLK2Freq>
 800f80c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	461d      	mov	r5, r3
 800f812:	f04f 0600 	mov.w	r6, #0
 800f816:	46a8      	mov	r8, r5
 800f818:	46b1      	mov	r9, r6
 800f81a:	eb18 0308 	adds.w	r3, r8, r8
 800f81e:	eb49 0409 	adc.w	r4, r9, r9
 800f822:	4698      	mov	r8, r3
 800f824:	46a1      	mov	r9, r4
 800f826:	eb18 0805 	adds.w	r8, r8, r5
 800f82a:	eb49 0906 	adc.w	r9, r9, r6
 800f82e:	f04f 0100 	mov.w	r1, #0
 800f832:	f04f 0200 	mov.w	r2, #0
 800f836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f83a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f83e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f842:	4688      	mov	r8, r1
 800f844:	4691      	mov	r9, r2
 800f846:	eb18 0005 	adds.w	r0, r8, r5
 800f84a:	eb49 0106 	adc.w	r1, r9, r6
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	461d      	mov	r5, r3
 800f854:	f04f 0600 	mov.w	r6, #0
 800f858:	196b      	adds	r3, r5, r5
 800f85a:	eb46 0406 	adc.w	r4, r6, r6
 800f85e:	461a      	mov	r2, r3
 800f860:	4623      	mov	r3, r4
 800f862:	f7f1 fa29 	bl	8000cb8 <__aeabi_uldivmod>
 800f866:	4603      	mov	r3, r0
 800f868:	460c      	mov	r4, r1
 800f86a:	461a      	mov	r2, r3
 800f86c:	4ba5      	ldr	r3, [pc, #660]	; (800fb04 <UART_SetConfig+0x384>)
 800f86e:	fba3 2302 	umull	r2, r3, r3, r2
 800f872:	095b      	lsrs	r3, r3, #5
 800f874:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	461d      	mov	r5, r3
 800f87c:	f04f 0600 	mov.w	r6, #0
 800f880:	46a9      	mov	r9, r5
 800f882:	46b2      	mov	sl, r6
 800f884:	eb19 0309 	adds.w	r3, r9, r9
 800f888:	eb4a 040a 	adc.w	r4, sl, sl
 800f88c:	4699      	mov	r9, r3
 800f88e:	46a2      	mov	sl, r4
 800f890:	eb19 0905 	adds.w	r9, r9, r5
 800f894:	eb4a 0a06 	adc.w	sl, sl, r6
 800f898:	f04f 0100 	mov.w	r1, #0
 800f89c:	f04f 0200 	mov.w	r2, #0
 800f8a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f8a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f8a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f8ac:	4689      	mov	r9, r1
 800f8ae:	4692      	mov	sl, r2
 800f8b0:	eb19 0005 	adds.w	r0, r9, r5
 800f8b4:	eb4a 0106 	adc.w	r1, sl, r6
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	461d      	mov	r5, r3
 800f8be:	f04f 0600 	mov.w	r6, #0
 800f8c2:	196b      	adds	r3, r5, r5
 800f8c4:	eb46 0406 	adc.w	r4, r6, r6
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4623      	mov	r3, r4
 800f8cc:	f7f1 f9f4 	bl	8000cb8 <__aeabi_uldivmod>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	4b8b      	ldr	r3, [pc, #556]	; (800fb04 <UART_SetConfig+0x384>)
 800f8d8:	fba3 1302 	umull	r1, r3, r3, r2
 800f8dc:	095b      	lsrs	r3, r3, #5
 800f8de:	2164      	movs	r1, #100	; 0x64
 800f8e0:	fb01 f303 	mul.w	r3, r1, r3
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	00db      	lsls	r3, r3, #3
 800f8e8:	3332      	adds	r3, #50	; 0x32
 800f8ea:	4a86      	ldr	r2, [pc, #536]	; (800fb04 <UART_SetConfig+0x384>)
 800f8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800f8f0:	095b      	lsrs	r3, r3, #5
 800f8f2:	005b      	lsls	r3, r3, #1
 800f8f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f8f8:	4498      	add	r8, r3
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	461d      	mov	r5, r3
 800f8fe:	f04f 0600 	mov.w	r6, #0
 800f902:	46a9      	mov	r9, r5
 800f904:	46b2      	mov	sl, r6
 800f906:	eb19 0309 	adds.w	r3, r9, r9
 800f90a:	eb4a 040a 	adc.w	r4, sl, sl
 800f90e:	4699      	mov	r9, r3
 800f910:	46a2      	mov	sl, r4
 800f912:	eb19 0905 	adds.w	r9, r9, r5
 800f916:	eb4a 0a06 	adc.w	sl, sl, r6
 800f91a:	f04f 0100 	mov.w	r1, #0
 800f91e:	f04f 0200 	mov.w	r2, #0
 800f922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f926:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f92a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f92e:	4689      	mov	r9, r1
 800f930:	4692      	mov	sl, r2
 800f932:	eb19 0005 	adds.w	r0, r9, r5
 800f936:	eb4a 0106 	adc.w	r1, sl, r6
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	461d      	mov	r5, r3
 800f940:	f04f 0600 	mov.w	r6, #0
 800f944:	196b      	adds	r3, r5, r5
 800f946:	eb46 0406 	adc.w	r4, r6, r6
 800f94a:	461a      	mov	r2, r3
 800f94c:	4623      	mov	r3, r4
 800f94e:	f7f1 f9b3 	bl	8000cb8 <__aeabi_uldivmod>
 800f952:	4603      	mov	r3, r0
 800f954:	460c      	mov	r4, r1
 800f956:	461a      	mov	r2, r3
 800f958:	4b6a      	ldr	r3, [pc, #424]	; (800fb04 <UART_SetConfig+0x384>)
 800f95a:	fba3 1302 	umull	r1, r3, r3, r2
 800f95e:	095b      	lsrs	r3, r3, #5
 800f960:	2164      	movs	r1, #100	; 0x64
 800f962:	fb01 f303 	mul.w	r3, r1, r3
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	3332      	adds	r3, #50	; 0x32
 800f96c:	4a65      	ldr	r2, [pc, #404]	; (800fb04 <UART_SetConfig+0x384>)
 800f96e:	fba2 2303 	umull	r2, r3, r2, r3
 800f972:	095b      	lsrs	r3, r3, #5
 800f974:	f003 0207 	and.w	r2, r3, #7
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4442      	add	r2, r8
 800f97e:	609a      	str	r2, [r3, #8]
 800f980:	e26f      	b.n	800fe62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f982:	f7fc fafb 	bl	800bf7c <HAL_RCC_GetPCLK1Freq>
 800f986:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	461d      	mov	r5, r3
 800f98c:	f04f 0600 	mov.w	r6, #0
 800f990:	46a8      	mov	r8, r5
 800f992:	46b1      	mov	r9, r6
 800f994:	eb18 0308 	adds.w	r3, r8, r8
 800f998:	eb49 0409 	adc.w	r4, r9, r9
 800f99c:	4698      	mov	r8, r3
 800f99e:	46a1      	mov	r9, r4
 800f9a0:	eb18 0805 	adds.w	r8, r8, r5
 800f9a4:	eb49 0906 	adc.w	r9, r9, r6
 800f9a8:	f04f 0100 	mov.w	r1, #0
 800f9ac:	f04f 0200 	mov.w	r2, #0
 800f9b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f9b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f9b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f9bc:	4688      	mov	r8, r1
 800f9be:	4691      	mov	r9, r2
 800f9c0:	eb18 0005 	adds.w	r0, r8, r5
 800f9c4:	eb49 0106 	adc.w	r1, r9, r6
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	461d      	mov	r5, r3
 800f9ce:	f04f 0600 	mov.w	r6, #0
 800f9d2:	196b      	adds	r3, r5, r5
 800f9d4:	eb46 0406 	adc.w	r4, r6, r6
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4623      	mov	r3, r4
 800f9dc:	f7f1 f96c 	bl	8000cb8 <__aeabi_uldivmod>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b47      	ldr	r3, [pc, #284]	; (800fb04 <UART_SetConfig+0x384>)
 800f9e8:	fba3 2302 	umull	r2, r3, r3, r2
 800f9ec:	095b      	lsrs	r3, r3, #5
 800f9ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	461d      	mov	r5, r3
 800f9f6:	f04f 0600 	mov.w	r6, #0
 800f9fa:	46a9      	mov	r9, r5
 800f9fc:	46b2      	mov	sl, r6
 800f9fe:	eb19 0309 	adds.w	r3, r9, r9
 800fa02:	eb4a 040a 	adc.w	r4, sl, sl
 800fa06:	4699      	mov	r9, r3
 800fa08:	46a2      	mov	sl, r4
 800fa0a:	eb19 0905 	adds.w	r9, r9, r5
 800fa0e:	eb4a 0a06 	adc.w	sl, sl, r6
 800fa12:	f04f 0100 	mov.w	r1, #0
 800fa16:	f04f 0200 	mov.w	r2, #0
 800fa1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa26:	4689      	mov	r9, r1
 800fa28:	4692      	mov	sl, r2
 800fa2a:	eb19 0005 	adds.w	r0, r9, r5
 800fa2e:	eb4a 0106 	adc.w	r1, sl, r6
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	461d      	mov	r5, r3
 800fa38:	f04f 0600 	mov.w	r6, #0
 800fa3c:	196b      	adds	r3, r5, r5
 800fa3e:	eb46 0406 	adc.w	r4, r6, r6
 800fa42:	461a      	mov	r2, r3
 800fa44:	4623      	mov	r3, r4
 800fa46:	f7f1 f937 	bl	8000cb8 <__aeabi_uldivmod>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	461a      	mov	r2, r3
 800fa50:	4b2c      	ldr	r3, [pc, #176]	; (800fb04 <UART_SetConfig+0x384>)
 800fa52:	fba3 1302 	umull	r1, r3, r3, r2
 800fa56:	095b      	lsrs	r3, r3, #5
 800fa58:	2164      	movs	r1, #100	; 0x64
 800fa5a:	fb01 f303 	mul.w	r3, r1, r3
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	00db      	lsls	r3, r3, #3
 800fa62:	3332      	adds	r3, #50	; 0x32
 800fa64:	4a27      	ldr	r2, [pc, #156]	; (800fb04 <UART_SetConfig+0x384>)
 800fa66:	fba2 2303 	umull	r2, r3, r2, r3
 800fa6a:	095b      	lsrs	r3, r3, #5
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fa72:	4498      	add	r8, r3
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	461d      	mov	r5, r3
 800fa78:	f04f 0600 	mov.w	r6, #0
 800fa7c:	46a9      	mov	r9, r5
 800fa7e:	46b2      	mov	sl, r6
 800fa80:	eb19 0309 	adds.w	r3, r9, r9
 800fa84:	eb4a 040a 	adc.w	r4, sl, sl
 800fa88:	4699      	mov	r9, r3
 800fa8a:	46a2      	mov	sl, r4
 800fa8c:	eb19 0905 	adds.w	r9, r9, r5
 800fa90:	eb4a 0a06 	adc.w	sl, sl, r6
 800fa94:	f04f 0100 	mov.w	r1, #0
 800fa98:	f04f 0200 	mov.w	r2, #0
 800fa9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800faa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800faa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800faa8:	4689      	mov	r9, r1
 800faaa:	4692      	mov	sl, r2
 800faac:	eb19 0005 	adds.w	r0, r9, r5
 800fab0:	eb4a 0106 	adc.w	r1, sl, r6
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	461d      	mov	r5, r3
 800faba:	f04f 0600 	mov.w	r6, #0
 800fabe:	196b      	adds	r3, r5, r5
 800fac0:	eb46 0406 	adc.w	r4, r6, r6
 800fac4:	461a      	mov	r2, r3
 800fac6:	4623      	mov	r3, r4
 800fac8:	f7f1 f8f6 	bl	8000cb8 <__aeabi_uldivmod>
 800facc:	4603      	mov	r3, r0
 800face:	460c      	mov	r4, r1
 800fad0:	461a      	mov	r2, r3
 800fad2:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <UART_SetConfig+0x384>)
 800fad4:	fba3 1302 	umull	r1, r3, r3, r2
 800fad8:	095b      	lsrs	r3, r3, #5
 800fada:	2164      	movs	r1, #100	; 0x64
 800fadc:	fb01 f303 	mul.w	r3, r1, r3
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	00db      	lsls	r3, r3, #3
 800fae4:	3332      	adds	r3, #50	; 0x32
 800fae6:	4a07      	ldr	r2, [pc, #28]	; (800fb04 <UART_SetConfig+0x384>)
 800fae8:	fba2 2303 	umull	r2, r3, r2, r3
 800faec:	095b      	lsrs	r3, r3, #5
 800faee:	f003 0207 	and.w	r2, r3, #7
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4442      	add	r2, r8
 800faf8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fafa:	e1b2      	b.n	800fe62 <UART_SetConfig+0x6e2>
 800fafc:	40011000 	.word	0x40011000
 800fb00:	40011400 	.word	0x40011400
 800fb04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4ad7      	ldr	r2, [pc, #860]	; (800fe6c <UART_SetConfig+0x6ec>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d005      	beq.n	800fb1e <UART_SetConfig+0x39e>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4ad6      	ldr	r2, [pc, #856]	; (800fe70 <UART_SetConfig+0x6f0>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	f040 80d1 	bne.w	800fcc0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fb1e:	f7fc fa41 	bl	800bfa4 <HAL_RCC_GetPCLK2Freq>
 800fb22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	469a      	mov	sl, r3
 800fb28:	f04f 0b00 	mov.w	fp, #0
 800fb2c:	46d0      	mov	r8, sl
 800fb2e:	46d9      	mov	r9, fp
 800fb30:	eb18 0308 	adds.w	r3, r8, r8
 800fb34:	eb49 0409 	adc.w	r4, r9, r9
 800fb38:	4698      	mov	r8, r3
 800fb3a:	46a1      	mov	r9, r4
 800fb3c:	eb18 080a 	adds.w	r8, r8, sl
 800fb40:	eb49 090b 	adc.w	r9, r9, fp
 800fb44:	f04f 0100 	mov.w	r1, #0
 800fb48:	f04f 0200 	mov.w	r2, #0
 800fb4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fb50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fb54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fb58:	4688      	mov	r8, r1
 800fb5a:	4691      	mov	r9, r2
 800fb5c:	eb1a 0508 	adds.w	r5, sl, r8
 800fb60:	eb4b 0609 	adc.w	r6, fp, r9
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	4619      	mov	r1, r3
 800fb6a:	f04f 0200 	mov.w	r2, #0
 800fb6e:	f04f 0300 	mov.w	r3, #0
 800fb72:	f04f 0400 	mov.w	r4, #0
 800fb76:	0094      	lsls	r4, r2, #2
 800fb78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb7c:	008b      	lsls	r3, r1, #2
 800fb7e:	461a      	mov	r2, r3
 800fb80:	4623      	mov	r3, r4
 800fb82:	4628      	mov	r0, r5
 800fb84:	4631      	mov	r1, r6
 800fb86:	f7f1 f897 	bl	8000cb8 <__aeabi_uldivmod>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	460c      	mov	r4, r1
 800fb8e:	461a      	mov	r2, r3
 800fb90:	4bb8      	ldr	r3, [pc, #736]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fb92:	fba3 2302 	umull	r2, r3, r3, r2
 800fb96:	095b      	lsrs	r3, r3, #5
 800fb98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	469b      	mov	fp, r3
 800fba0:	f04f 0c00 	mov.w	ip, #0
 800fba4:	46d9      	mov	r9, fp
 800fba6:	46e2      	mov	sl, ip
 800fba8:	eb19 0309 	adds.w	r3, r9, r9
 800fbac:	eb4a 040a 	adc.w	r4, sl, sl
 800fbb0:	4699      	mov	r9, r3
 800fbb2:	46a2      	mov	sl, r4
 800fbb4:	eb19 090b 	adds.w	r9, r9, fp
 800fbb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fbbc:	f04f 0100 	mov.w	r1, #0
 800fbc0:	f04f 0200 	mov.w	r2, #0
 800fbc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbd0:	4689      	mov	r9, r1
 800fbd2:	4692      	mov	sl, r2
 800fbd4:	eb1b 0509 	adds.w	r5, fp, r9
 800fbd8:	eb4c 060a 	adc.w	r6, ip, sl
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	f04f 0200 	mov.w	r2, #0
 800fbe6:	f04f 0300 	mov.w	r3, #0
 800fbea:	f04f 0400 	mov.w	r4, #0
 800fbee:	0094      	lsls	r4, r2, #2
 800fbf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fbf4:	008b      	lsls	r3, r1, #2
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	4623      	mov	r3, r4
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	4631      	mov	r1, r6
 800fbfe:	f7f1 f85b 	bl	8000cb8 <__aeabi_uldivmod>
 800fc02:	4603      	mov	r3, r0
 800fc04:	460c      	mov	r4, r1
 800fc06:	461a      	mov	r2, r3
 800fc08:	4b9a      	ldr	r3, [pc, #616]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fc0a:	fba3 1302 	umull	r1, r3, r3, r2
 800fc0e:	095b      	lsrs	r3, r3, #5
 800fc10:	2164      	movs	r1, #100	; 0x64
 800fc12:	fb01 f303 	mul.w	r3, r1, r3
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	011b      	lsls	r3, r3, #4
 800fc1a:	3332      	adds	r3, #50	; 0x32
 800fc1c:	4a95      	ldr	r2, [pc, #596]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc22:	095b      	lsrs	r3, r3, #5
 800fc24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc28:	4498      	add	r8, r3
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	469b      	mov	fp, r3
 800fc2e:	f04f 0c00 	mov.w	ip, #0
 800fc32:	46d9      	mov	r9, fp
 800fc34:	46e2      	mov	sl, ip
 800fc36:	eb19 0309 	adds.w	r3, r9, r9
 800fc3a:	eb4a 040a 	adc.w	r4, sl, sl
 800fc3e:	4699      	mov	r9, r3
 800fc40:	46a2      	mov	sl, r4
 800fc42:	eb19 090b 	adds.w	r9, r9, fp
 800fc46:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc4a:	f04f 0100 	mov.w	r1, #0
 800fc4e:	f04f 0200 	mov.w	r2, #0
 800fc52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc5e:	4689      	mov	r9, r1
 800fc60:	4692      	mov	sl, r2
 800fc62:	eb1b 0509 	adds.w	r5, fp, r9
 800fc66:	eb4c 060a 	adc.w	r6, ip, sl
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	f04f 0200 	mov.w	r2, #0
 800fc74:	f04f 0300 	mov.w	r3, #0
 800fc78:	f04f 0400 	mov.w	r4, #0
 800fc7c:	0094      	lsls	r4, r2, #2
 800fc7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc82:	008b      	lsls	r3, r1, #2
 800fc84:	461a      	mov	r2, r3
 800fc86:	4623      	mov	r3, r4
 800fc88:	4628      	mov	r0, r5
 800fc8a:	4631      	mov	r1, r6
 800fc8c:	f7f1 f814 	bl	8000cb8 <__aeabi_uldivmod>
 800fc90:	4603      	mov	r3, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	461a      	mov	r2, r3
 800fc96:	4b77      	ldr	r3, [pc, #476]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fc98:	fba3 1302 	umull	r1, r3, r3, r2
 800fc9c:	095b      	lsrs	r3, r3, #5
 800fc9e:	2164      	movs	r1, #100	; 0x64
 800fca0:	fb01 f303 	mul.w	r3, r1, r3
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	011b      	lsls	r3, r3, #4
 800fca8:	3332      	adds	r3, #50	; 0x32
 800fcaa:	4a72      	ldr	r2, [pc, #456]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fcac:	fba2 2303 	umull	r2, r3, r2, r3
 800fcb0:	095b      	lsrs	r3, r3, #5
 800fcb2:	f003 020f 	and.w	r2, r3, #15
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4442      	add	r2, r8
 800fcbc:	609a      	str	r2, [r3, #8]
 800fcbe:	e0d0      	b.n	800fe62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fcc0:	f7fc f95c 	bl	800bf7c <HAL_RCC_GetPCLK1Freq>
 800fcc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	469a      	mov	sl, r3
 800fcca:	f04f 0b00 	mov.w	fp, #0
 800fcce:	46d0      	mov	r8, sl
 800fcd0:	46d9      	mov	r9, fp
 800fcd2:	eb18 0308 	adds.w	r3, r8, r8
 800fcd6:	eb49 0409 	adc.w	r4, r9, r9
 800fcda:	4698      	mov	r8, r3
 800fcdc:	46a1      	mov	r9, r4
 800fcde:	eb18 080a 	adds.w	r8, r8, sl
 800fce2:	eb49 090b 	adc.w	r9, r9, fp
 800fce6:	f04f 0100 	mov.w	r1, #0
 800fcea:	f04f 0200 	mov.w	r2, #0
 800fcee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fcf2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fcf6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fcfa:	4688      	mov	r8, r1
 800fcfc:	4691      	mov	r9, r2
 800fcfe:	eb1a 0508 	adds.w	r5, sl, r8
 800fd02:	eb4b 0609 	adc.w	r6, fp, r9
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f04f 0200 	mov.w	r2, #0
 800fd10:	f04f 0300 	mov.w	r3, #0
 800fd14:	f04f 0400 	mov.w	r4, #0
 800fd18:	0094      	lsls	r4, r2, #2
 800fd1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd1e:	008b      	lsls	r3, r1, #2
 800fd20:	461a      	mov	r2, r3
 800fd22:	4623      	mov	r3, r4
 800fd24:	4628      	mov	r0, r5
 800fd26:	4631      	mov	r1, r6
 800fd28:	f7f0 ffc6 	bl	8000cb8 <__aeabi_uldivmod>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	460c      	mov	r4, r1
 800fd30:	461a      	mov	r2, r3
 800fd32:	4b50      	ldr	r3, [pc, #320]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fd34:	fba3 2302 	umull	r2, r3, r3, r2
 800fd38:	095b      	lsrs	r3, r3, #5
 800fd3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	469b      	mov	fp, r3
 800fd42:	f04f 0c00 	mov.w	ip, #0
 800fd46:	46d9      	mov	r9, fp
 800fd48:	46e2      	mov	sl, ip
 800fd4a:	eb19 0309 	adds.w	r3, r9, r9
 800fd4e:	eb4a 040a 	adc.w	r4, sl, sl
 800fd52:	4699      	mov	r9, r3
 800fd54:	46a2      	mov	sl, r4
 800fd56:	eb19 090b 	adds.w	r9, r9, fp
 800fd5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fd5e:	f04f 0100 	mov.w	r1, #0
 800fd62:	f04f 0200 	mov.w	r2, #0
 800fd66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd72:	4689      	mov	r9, r1
 800fd74:	4692      	mov	sl, r2
 800fd76:	eb1b 0509 	adds.w	r5, fp, r9
 800fd7a:	eb4c 060a 	adc.w	r6, ip, sl
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	4619      	mov	r1, r3
 800fd84:	f04f 0200 	mov.w	r2, #0
 800fd88:	f04f 0300 	mov.w	r3, #0
 800fd8c:	f04f 0400 	mov.w	r4, #0
 800fd90:	0094      	lsls	r4, r2, #2
 800fd92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd96:	008b      	lsls	r3, r1, #2
 800fd98:	461a      	mov	r2, r3
 800fd9a:	4623      	mov	r3, r4
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	4631      	mov	r1, r6
 800fda0:	f7f0 ff8a 	bl	8000cb8 <__aeabi_uldivmod>
 800fda4:	4603      	mov	r3, r0
 800fda6:	460c      	mov	r4, r1
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b32      	ldr	r3, [pc, #200]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fdac:	fba3 1302 	umull	r1, r3, r3, r2
 800fdb0:	095b      	lsrs	r3, r3, #5
 800fdb2:	2164      	movs	r1, #100	; 0x64
 800fdb4:	fb01 f303 	mul.w	r3, r1, r3
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	011b      	lsls	r3, r3, #4
 800fdbc:	3332      	adds	r3, #50	; 0x32
 800fdbe:	4a2d      	ldr	r2, [pc, #180]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fdc0:	fba2 2303 	umull	r2, r3, r2, r3
 800fdc4:	095b      	lsrs	r3, r3, #5
 800fdc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fdca:	4498      	add	r8, r3
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	469b      	mov	fp, r3
 800fdd0:	f04f 0c00 	mov.w	ip, #0
 800fdd4:	46d9      	mov	r9, fp
 800fdd6:	46e2      	mov	sl, ip
 800fdd8:	eb19 0309 	adds.w	r3, r9, r9
 800fddc:	eb4a 040a 	adc.w	r4, sl, sl
 800fde0:	4699      	mov	r9, r3
 800fde2:	46a2      	mov	sl, r4
 800fde4:	eb19 090b 	adds.w	r9, r9, fp
 800fde8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fdec:	f04f 0100 	mov.w	r1, #0
 800fdf0:	f04f 0200 	mov.w	r2, #0
 800fdf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe00:	4689      	mov	r9, r1
 800fe02:	4692      	mov	sl, r2
 800fe04:	eb1b 0509 	adds.w	r5, fp, r9
 800fe08:	eb4c 060a 	adc.w	r6, ip, sl
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	4619      	mov	r1, r3
 800fe12:	f04f 0200 	mov.w	r2, #0
 800fe16:	f04f 0300 	mov.w	r3, #0
 800fe1a:	f04f 0400 	mov.w	r4, #0
 800fe1e:	0094      	lsls	r4, r2, #2
 800fe20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe24:	008b      	lsls	r3, r1, #2
 800fe26:	461a      	mov	r2, r3
 800fe28:	4623      	mov	r3, r4
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	f7f0 ff43 	bl	8000cb8 <__aeabi_uldivmod>
 800fe32:	4603      	mov	r3, r0
 800fe34:	460c      	mov	r4, r1
 800fe36:	461a      	mov	r2, r3
 800fe38:	4b0e      	ldr	r3, [pc, #56]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fe3a:	fba3 1302 	umull	r1, r3, r3, r2
 800fe3e:	095b      	lsrs	r3, r3, #5
 800fe40:	2164      	movs	r1, #100	; 0x64
 800fe42:	fb01 f303 	mul.w	r3, r1, r3
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	011b      	lsls	r3, r3, #4
 800fe4a:	3332      	adds	r3, #50	; 0x32
 800fe4c:	4a09      	ldr	r2, [pc, #36]	; (800fe74 <UART_SetConfig+0x6f4>)
 800fe4e:	fba2 2303 	umull	r2, r3, r2, r3
 800fe52:	095b      	lsrs	r3, r3, #5
 800fe54:	f003 020f 	and.w	r2, r3, #15
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4442      	add	r2, r8
 800fe5e:	609a      	str	r2, [r3, #8]
}
 800fe60:	e7ff      	b.n	800fe62 <UART_SetConfig+0x6e2>
 800fe62:	bf00      	nop
 800fe64:	3714      	adds	r7, #20
 800fe66:	46bd      	mov	sp, r7
 800fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6c:	40011000 	.word	0x40011000
 800fe70:	40011400 	.word	0x40011400
 800fe74:	51eb851f 	.word	0x51eb851f

0800fe78 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800fe78:	b084      	sub	sp, #16
 800fe7a:	b480      	push	{r7}
 800fe7c:	b085      	sub	sp, #20
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
 800fe82:	f107 001c 	add.w	r0, r7, #28
 800fe86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fe8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fe90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fe92:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fe96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fe9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fe9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800fe9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800fea2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800feb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	431a      	orrs	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	b004      	add	sp, #16
 800fecc:	4770      	bx	lr

0800fece <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fedc:	4618      	mov	r0, r3
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr

0800fee8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr

0800ff0a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b082      	sub	sp, #8
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2203      	movs	r2, #3
 800ff16:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ff18:	2002      	movs	r0, #2
 800ff1a:	f7f9 fbdd 	bl	80096d8 <HAL_Delay>
  
  return HAL_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f003 0303 	and.w	r3, r3, #3
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ff68:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ff6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ff7e:	f023 030f 	bic.w	r3, r3, #15
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	431a      	orrs	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	691b      	ldr	r3, [r3, #16]
 800ffa4:	b2db      	uxtb	r3, r3
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	370c      	adds	r7, #12
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ffb2:	b480      	push	{r7}
 800ffb4:	b085      	sub	sp, #20
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
 800ffba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	3314      	adds	r3, #20
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
}  
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3714      	adds	r7, #20
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b085      	sub	sp, #20
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fffe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010004:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801000a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801000c:	68fa      	ldr	r2, [r7, #12]
 801000e:	4313      	orrs	r3, r2
 8010010:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010016:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	431a      	orrs	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010022:	2300      	movs	r3, #0

}
 8010024:	4618      	mov	r0, r3
 8010026:	3714      	adds	r7, #20
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801003e:	2310      	movs	r3, #16
 8010040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010042:	2340      	movs	r3, #64	; 0x40
 8010044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010046:	2300      	movs	r3, #0
 8010048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801004a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801004e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010050:	f107 0308 	add.w	r3, r7, #8
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7ff ff74 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801005c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010060:	2110      	movs	r1, #16
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 fa40 	bl	80104e8 <SDMMC_GetCmdResp1>
 8010068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801006a:	69fb      	ldr	r3, [r7, #28]
}
 801006c:	4618      	mov	r0, r3
 801006e:	3720      	adds	r7, #32
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b088      	sub	sp, #32
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010082:	2311      	movs	r3, #17
 8010084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010086:	2340      	movs	r3, #64	; 0x40
 8010088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801008a:	2300      	movs	r3, #0
 801008c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801008e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010094:	f107 0308 	add.w	r3, r7, #8
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7ff ff52 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80100a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80100a4:	2111      	movs	r1, #17
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fa1e 	bl	80104e8 <SDMMC_GetCmdResp1>
 80100ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100ae:	69fb      	ldr	r3, [r7, #28]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3720      	adds	r7, #32
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b088      	sub	sp, #32
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80100c6:	2312      	movs	r3, #18
 80100c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100ca:	2340      	movs	r3, #64	; 0x40
 80100cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100ce:	2300      	movs	r3, #0
 80100d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100d8:	f107 0308 	add.w	r3, r7, #8
 80100dc:	4619      	mov	r1, r3
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7ff ff30 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80100e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80100e8:	2112      	movs	r1, #18
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f9fc 	bl	80104e8 <SDMMC_GetCmdResp1>
 80100f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100f2:	69fb      	ldr	r3, [r7, #28]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3720      	adds	r7, #32
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b088      	sub	sp, #32
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801010a:	2318      	movs	r3, #24
 801010c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801010e:	2340      	movs	r3, #64	; 0x40
 8010110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010112:	2300      	movs	r3, #0
 8010114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801011a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801011c:	f107 0308 	add.w	r3, r7, #8
 8010120:	4619      	mov	r1, r3
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f7ff ff0e 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010128:	f241 3288 	movw	r2, #5000	; 0x1388
 801012c:	2118      	movs	r1, #24
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 f9da 	bl	80104e8 <SDMMC_GetCmdResp1>
 8010134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010136:	69fb      	ldr	r3, [r7, #28]
}
 8010138:	4618      	mov	r0, r3
 801013a:	3720      	adds	r7, #32
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b088      	sub	sp, #32
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801014e:	2319      	movs	r3, #25
 8010150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010152:	2340      	movs	r3, #64	; 0x40
 8010154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010156:	2300      	movs	r3, #0
 8010158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801015a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801015e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010160:	f107 0308 	add.w	r3, r7, #8
 8010164:	4619      	mov	r1, r3
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f7ff feec 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801016c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010170:	2119      	movs	r1, #25
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 f9b8 	bl	80104e8 <SDMMC_GetCmdResp1>
 8010178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801017a:	69fb      	ldr	r3, [r7, #28]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3720      	adds	r7, #32
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801018c:	2300      	movs	r3, #0
 801018e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010190:	230c      	movs	r3, #12
 8010192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010194:	2340      	movs	r3, #64	; 0x40
 8010196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010198:	2300      	movs	r3, #0
 801019a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801019c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101a2:	f107 0308 	add.w	r3, r7, #8
 80101a6:	4619      	mov	r1, r3
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f7ff fecb 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80101ae:	4a05      	ldr	r2, [pc, #20]	; (80101c4 <SDMMC_CmdStopTransfer+0x40>)
 80101b0:	210c      	movs	r1, #12
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f998 	bl	80104e8 <SDMMC_GetCmdResp1>
 80101b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ba:	69fb      	ldr	r3, [r7, #28]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3720      	adds	r7, #32
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	05f5e100 	.word	0x05f5e100

080101c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80101d8:	2307      	movs	r3, #7
 80101da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101dc:	2340      	movs	r3, #64	; 0x40
 80101de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101e0:	2300      	movs	r3, #0
 80101e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101ea:	f107 0310 	add.w	r3, r7, #16
 80101ee:	4619      	mov	r1, r3
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff fea7 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80101f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80101fa:	2107      	movs	r1, #7
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f000 f973 	bl	80104e8 <SDMMC_GetCmdResp1>
 8010202:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010206:	4618      	mov	r0, r3
 8010208:	3728      	adds	r7, #40	; 0x28
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b088      	sub	sp, #32
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010216:	2300      	movs	r3, #0
 8010218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801021a:	2300      	movs	r3, #0
 801021c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801021e:	2300      	movs	r3, #0
 8010220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010222:	2300      	movs	r3, #0
 8010224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801022a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801022c:	f107 0308 	add.w	r3, r7, #8
 8010230:	4619      	mov	r1, r3
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7ff fe86 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 f92d 	bl	8010498 <SDMMC_GetCmdError>
 801023e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010240:	69fb      	ldr	r3, [r7, #28]
}
 8010242:	4618      	mov	r0, r3
 8010244:	3720      	adds	r7, #32
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b088      	sub	sp, #32
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010252:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010258:	2308      	movs	r3, #8
 801025a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801025c:	2340      	movs	r3, #64	; 0x40
 801025e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010260:	2300      	movs	r3, #0
 8010262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010268:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801026a:	f107 0308 	add.w	r3, r7, #8
 801026e:	4619      	mov	r1, r3
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7ff fe67 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fb16 	bl	80108a8 <SDMMC_GetCmdResp7>
 801027c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801027e:	69fb      	ldr	r3, [r7, #28]
}
 8010280:	4618      	mov	r0, r3
 8010282:	3720      	adds	r7, #32
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b088      	sub	sp, #32
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010296:	2337      	movs	r3, #55	; 0x37
 8010298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801029a:	2340      	movs	r3, #64	; 0x40
 801029c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801029e:	2300      	movs	r3, #0
 80102a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102a8:	f107 0308 	add.w	r3, r7, #8
 80102ac:	4619      	mov	r1, r3
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7ff fe48 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80102b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80102b8:	2137      	movs	r1, #55	; 0x37
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 f914 	bl	80104e8 <SDMMC_GetCmdResp1>
 80102c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102c2:	69fb      	ldr	r3, [r7, #28]
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3720      	adds	r7, #32
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b088      	sub	sp, #32
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80102dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80102e2:	2329      	movs	r3, #41	; 0x29
 80102e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102e6:	2340      	movs	r3, #64	; 0x40
 80102e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102ea:	2300      	movs	r3, #0
 80102ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102f4:	f107 0308 	add.w	r3, r7, #8
 80102f8:	4619      	mov	r1, r3
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f7ff fe22 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 fa23 	bl	801074c <SDMMC_GetCmdResp3>
 8010306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010308:	69fb      	ldr	r3, [r7, #28]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3720      	adds	r7, #32
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b088      	sub	sp, #32
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
 801031a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010320:	2306      	movs	r3, #6
 8010322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010324:	2340      	movs	r3, #64	; 0x40
 8010326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010328:	2300      	movs	r3, #0
 801032a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801032c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010330:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010332:	f107 0308 	add.w	r3, r7, #8
 8010336:	4619      	mov	r1, r3
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7ff fe03 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801033e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010342:	2106      	movs	r1, #6
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f8cf 	bl	80104e8 <SDMMC_GetCmdResp1>
 801034a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801034c:	69fb      	ldr	r3, [r7, #28]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3720      	adds	r7, #32
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b088      	sub	sp, #32
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801035e:	2300      	movs	r3, #0
 8010360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010362:	2333      	movs	r3, #51	; 0x33
 8010364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010366:	2340      	movs	r3, #64	; 0x40
 8010368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801036a:	2300      	movs	r3, #0
 801036c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010372:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010374:	f107 0308 	add.w	r3, r7, #8
 8010378:	4619      	mov	r1, r3
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7ff fde2 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010380:	f241 3288 	movw	r2, #5000	; 0x1388
 8010384:	2133      	movs	r1, #51	; 0x33
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f8ae 	bl	80104e8 <SDMMC_GetCmdResp1>
 801038c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801038e:	69fb      	ldr	r3, [r7, #28]
}
 8010390:	4618      	mov	r0, r3
 8010392:	3720      	adds	r7, #32
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80103a0:	2300      	movs	r3, #0
 80103a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80103a4:	2302      	movs	r3, #2
 80103a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80103a8:	23c0      	movs	r3, #192	; 0xc0
 80103aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103ac:	2300      	movs	r3, #0
 80103ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103b6:	f107 0308 	add.w	r3, r7, #8
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7ff fdc1 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f97c 	bl	80106c0 <SDMMC_GetCmdResp2>
 80103c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ca:	69fb      	ldr	r3, [r7, #28]
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3720      	adds	r7, #32
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b088      	sub	sp, #32
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80103e2:	2309      	movs	r3, #9
 80103e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80103e6:	23c0      	movs	r3, #192	; 0xc0
 80103e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103ea:	2300      	movs	r3, #0
 80103ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103f4:	f107 0308 	add.w	r3, r7, #8
 80103f8:	4619      	mov	r1, r3
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7ff fda2 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 f95d 	bl	80106c0 <SDMMC_GetCmdResp2>
 8010406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010408:	69fb      	ldr	r3, [r7, #28]
}
 801040a:	4618      	mov	r0, r3
 801040c:	3720      	adds	r7, #32
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b088      	sub	sp, #32
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801041c:	2300      	movs	r3, #0
 801041e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010420:	2303      	movs	r3, #3
 8010422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010424:	2340      	movs	r3, #64	; 0x40
 8010426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010428:	2300      	movs	r3, #0
 801042a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801042c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010430:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010432:	f107 0308 	add.w	r3, r7, #8
 8010436:	4619      	mov	r1, r3
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f7ff fd83 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801043e:	683a      	ldr	r2, [r7, #0]
 8010440:	2103      	movs	r1, #3
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 f9bc 	bl	80107c0 <SDMMC_GetCmdResp6>
 8010448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801044a:	69fb      	ldr	r3, [r7, #28]
}
 801044c:	4618      	mov	r0, r3
 801044e:	3720      	adds	r7, #32
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b088      	sub	sp, #32
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010462:	230d      	movs	r3, #13
 8010464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010466:	2340      	movs	r3, #64	; 0x40
 8010468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801046a:	2300      	movs	r3, #0
 801046c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010474:	f107 0308 	add.w	r3, r7, #8
 8010478:	4619      	mov	r1, r3
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7ff fd62 	bl	800ff44 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010480:	f241 3288 	movw	r2, #5000	; 0x1388
 8010484:	210d      	movs	r1, #13
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 f82e 	bl	80104e8 <SDMMC_GetCmdResp1>
 801048c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801048e:	69fb      	ldr	r3, [r7, #28]
}
 8010490:	4618      	mov	r0, r3
 8010492:	3720      	adds	r7, #32
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010498:	b490      	push	{r4, r7}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80104a0:	4b0f      	ldr	r3, [pc, #60]	; (80104e0 <SDMMC_GetCmdError+0x48>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a0f      	ldr	r2, [pc, #60]	; (80104e4 <SDMMC_GetCmdError+0x4c>)
 80104a6:	fba2 2303 	umull	r2, r3, r2, r3
 80104aa:	0a5b      	lsrs	r3, r3, #9
 80104ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80104b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80104b4:	4623      	mov	r3, r4
 80104b6:	1e5c      	subs	r4, r3, #1
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d102      	bne.n	80104c2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80104c0:	e009      	b.n	80104d6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d0f2      	beq.n	80104b4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	22c5      	movs	r2, #197	; 0xc5
 80104d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3708      	adds	r7, #8
 80104da:	46bd      	mov	sp, r7
 80104dc:	bc90      	pop	{r4, r7}
 80104de:	4770      	bx	lr
 80104e0:	20000000 	.word	0x20000000
 80104e4:	10624dd3 	.word	0x10624dd3

080104e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b087      	sub	sp, #28
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	460b      	mov	r3, r1
 80104f2:	607a      	str	r2, [r7, #4]
 80104f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80104f6:	4b6f      	ldr	r3, [pc, #444]	; (80106b4 <SDMMC_GetCmdResp1+0x1cc>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a6f      	ldr	r2, [pc, #444]	; (80106b8 <SDMMC_GetCmdResp1+0x1d0>)
 80104fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010500:	0a5b      	lsrs	r3, r3, #9
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010508:	4623      	mov	r3, r4
 801050a:	1e5c      	subs	r4, r3, #1
 801050c:	2b00      	cmp	r3, #0
 801050e:	d102      	bne.n	8010516 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010514:	e0c9      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801051a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010522:	2b00      	cmp	r3, #0
 8010524:	d0f0      	beq.n	8010508 <SDMMC_GetCmdResp1+0x20>
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801052c:	2b00      	cmp	r3, #0
 801052e:	d1eb      	bne.n	8010508 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010534:	f003 0304 	and.w	r3, r3, #4
 8010538:	2b00      	cmp	r3, #0
 801053a:	d004      	beq.n	8010546 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2204      	movs	r2, #4
 8010540:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010542:	2304      	movs	r3, #4
 8010544:	e0b1      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801054a:	f003 0301 	and.w	r3, r3, #1
 801054e:	2b00      	cmp	r3, #0
 8010550:	d004      	beq.n	801055c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2201      	movs	r2, #1
 8010556:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010558:	2301      	movs	r3, #1
 801055a:	e0a6      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	22c5      	movs	r2, #197	; 0xc5
 8010560:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7ff fd18 	bl	800ff98 <SDIO_GetCommandResponse>
 8010568:	4603      	mov	r3, r0
 801056a:	461a      	mov	r2, r3
 801056c:	7afb      	ldrb	r3, [r7, #11]
 801056e:	4293      	cmp	r3, r2
 8010570:	d001      	beq.n	8010576 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010572:	2301      	movs	r3, #1
 8010574:	e099      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010576:	2100      	movs	r1, #0
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7ff fd1a 	bl	800ffb2 <SDIO_GetResponse>
 801057e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	4b4e      	ldr	r3, [pc, #312]	; (80106bc <SDMMC_GetCmdResp1+0x1d4>)
 8010584:	4013      	ands	r3, r2
 8010586:	2b00      	cmp	r3, #0
 8010588:	d101      	bne.n	801058e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801058a:	2300      	movs	r3, #0
 801058c:	e08d      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	2b00      	cmp	r3, #0
 8010592:	da02      	bge.n	801059a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010598:	e087      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80105a4:	2340      	movs	r3, #64	; 0x40
 80105a6:	e080      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d001      	beq.n	80105b6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80105b2:	2380      	movs	r3, #128	; 0x80
 80105b4:	e079      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80105c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105c4:	e071      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d002      	beq.n	80105d6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80105d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105d4:	e069      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d002      	beq.n	80105e6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80105e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105e4:	e061      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80105f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105f4:	e059      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010604:	e051      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801060c:	2b00      	cmp	r3, #0
 801060e:	d002      	beq.n	8010616 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010614:	e049      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801061c:	2b00      	cmp	r3, #0
 801061e:	d002      	beq.n	8010626 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010624:	e041      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801062c:	2b00      	cmp	r3, #0
 801062e:	d002      	beq.n	8010636 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010634:	e039      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010644:	e031      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010654:	e029      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801065c:	2b00      	cmp	r3, #0
 801065e:	d002      	beq.n	8010666 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010660:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010664:	e021      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010670:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010674:	e019      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010684:	e011      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010690:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010694:	e009      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	f003 0308 	and.w	r3, r3, #8
 801069c:	2b00      	cmp	r3, #0
 801069e:	d002      	beq.n	80106a6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80106a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80106a4:	e001      	b.n	80106aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80106a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	371c      	adds	r7, #28
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd90      	pop	{r4, r7, pc}
 80106b2:	bf00      	nop
 80106b4:	20000000 	.word	0x20000000
 80106b8:	10624dd3 	.word	0x10624dd3
 80106bc:	fdffe008 	.word	0xfdffe008

080106c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80106c0:	b490      	push	{r4, r7}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106c8:	4b1e      	ldr	r3, [pc, #120]	; (8010744 <SDMMC_GetCmdResp2+0x84>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a1e      	ldr	r2, [pc, #120]	; (8010748 <SDMMC_GetCmdResp2+0x88>)
 80106ce:	fba2 2303 	umull	r2, r3, r2, r3
 80106d2:	0a5b      	lsrs	r3, r3, #9
 80106d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80106d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80106dc:	4623      	mov	r3, r4
 80106de:	1e5c      	subs	r4, r3, #1
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d102      	bne.n	80106ea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106e8:	e026      	b.n	8010738 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d0f0      	beq.n	80106dc <SDMMC_GetCmdResp2+0x1c>
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1eb      	bne.n	80106dc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010708:	f003 0304 	and.w	r3, r3, #4
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2204      	movs	r2, #4
 8010714:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010716:	2304      	movs	r3, #4
 8010718:	e00e      	b.n	8010738 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801071e:	f003 0301 	and.w	r3, r3, #1
 8010722:	2b00      	cmp	r3, #0
 8010724:	d004      	beq.n	8010730 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2201      	movs	r2, #1
 801072a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801072c:	2301      	movs	r3, #1
 801072e:	e003      	b.n	8010738 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	22c5      	movs	r2, #197	; 0xc5
 8010734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	3710      	adds	r7, #16
 801073c:	46bd      	mov	sp, r7
 801073e:	bc90      	pop	{r4, r7}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	20000000 	.word	0x20000000
 8010748:	10624dd3 	.word	0x10624dd3

0801074c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801074c:	b490      	push	{r4, r7}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010754:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <SDMMC_GetCmdResp3+0x6c>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	4a18      	ldr	r2, [pc, #96]	; (80107bc <SDMMC_GetCmdResp3+0x70>)
 801075a:	fba2 2303 	umull	r2, r3, r2, r3
 801075e:	0a5b      	lsrs	r3, r3, #9
 8010760:	f241 3288 	movw	r2, #5000	; 0x1388
 8010764:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010768:	4623      	mov	r3, r4
 801076a:	1e5c      	subs	r4, r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	d102      	bne.n	8010776 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010774:	e01b      	b.n	80107ae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801077a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010782:	2b00      	cmp	r3, #0
 8010784:	d0f0      	beq.n	8010768 <SDMMC_GetCmdResp3+0x1c>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1eb      	bne.n	8010768 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010794:	f003 0304 	and.w	r3, r3, #4
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2204      	movs	r2, #4
 80107a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107a2:	2304      	movs	r3, #4
 80107a4:	e003      	b.n	80107ae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	22c5      	movs	r2, #197	; 0xc5
 80107aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3710      	adds	r7, #16
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bc90      	pop	{r4, r7}
 80107b6:	4770      	bx	lr
 80107b8:	20000000 	.word	0x20000000
 80107bc:	10624dd3 	.word	0x10624dd3

080107c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b087      	sub	sp, #28
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	460b      	mov	r3, r1
 80107ca:	607a      	str	r2, [r7, #4]
 80107cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107ce:	4b34      	ldr	r3, [pc, #208]	; (80108a0 <SDMMC_GetCmdResp6+0xe0>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	4a34      	ldr	r2, [pc, #208]	; (80108a4 <SDMMC_GetCmdResp6+0xe4>)
 80107d4:	fba2 2303 	umull	r2, r3, r2, r3
 80107d8:	0a5b      	lsrs	r3, r3, #9
 80107da:	f241 3288 	movw	r2, #5000	; 0x1388
 80107de:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107e2:	4623      	mov	r3, r4
 80107e4:	1e5c      	subs	r4, r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d102      	bne.n	80107f0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107ee:	e052      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d0f0      	beq.n	80107e2 <SDMMC_GetCmdResp6+0x22>
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1eb      	bne.n	80107e2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080e:	f003 0304 	and.w	r3, r3, #4
 8010812:	2b00      	cmp	r3, #0
 8010814:	d004      	beq.n	8010820 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2204      	movs	r2, #4
 801081a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801081c:	2304      	movs	r3, #4
 801081e:	e03a      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010824:	f003 0301 	and.w	r3, r3, #1
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2201      	movs	r2, #1
 8010830:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010832:	2301      	movs	r3, #1
 8010834:	e02f      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7ff fbae 	bl	800ff98 <SDIO_GetCommandResponse>
 801083c:	4603      	mov	r3, r0
 801083e:	461a      	mov	r2, r3
 8010840:	7afb      	ldrb	r3, [r7, #11]
 8010842:	4293      	cmp	r3, r2
 8010844:	d001      	beq.n	801084a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010846:	2301      	movs	r3, #1
 8010848:	e025      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	22c5      	movs	r2, #197	; 0xc5
 801084e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010850:	2100      	movs	r1, #0
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f7ff fbad 	bl	800ffb2 <SDIO_GetResponse>
 8010858:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010860:	2b00      	cmp	r3, #0
 8010862:	d106      	bne.n	8010872 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	0c1b      	lsrs	r3, r3, #16
 8010868:	b29a      	uxth	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801086e:	2300      	movs	r3, #0
 8010870:	e011      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d002      	beq.n	8010882 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010880:	e009      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010890:	e001      	b.n	8010896 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010896:	4618      	mov	r0, r3
 8010898:	371c      	adds	r7, #28
 801089a:	46bd      	mov	sp, r7
 801089c:	bd90      	pop	{r4, r7, pc}
 801089e:	bf00      	nop
 80108a0:	20000000 	.word	0x20000000
 80108a4:	10624dd3 	.word	0x10624dd3

080108a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80108a8:	b490      	push	{r4, r7}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108b0:	4b21      	ldr	r3, [pc, #132]	; (8010938 <SDMMC_GetCmdResp7+0x90>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a21      	ldr	r2, [pc, #132]	; (801093c <SDMMC_GetCmdResp7+0x94>)
 80108b6:	fba2 2303 	umull	r2, r3, r2, r3
 80108ba:	0a5b      	lsrs	r3, r3, #9
 80108bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80108c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80108c4:	4623      	mov	r3, r4
 80108c6:	1e5c      	subs	r4, r3, #1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108d0:	e02c      	b.n	801092c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d0f0      	beq.n	80108c4 <SDMMC_GetCmdResp7+0x1c>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1eb      	bne.n	80108c4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108f0:	f003 0304 	and.w	r3, r3, #4
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d004      	beq.n	8010902 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2204      	movs	r2, #4
 80108fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108fe:	2304      	movs	r3, #4
 8010900:	e014      	b.n	801092c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010906:	f003 0301 	and.w	r3, r3, #1
 801090a:	2b00      	cmp	r3, #0
 801090c:	d004      	beq.n	8010918 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010914:	2301      	movs	r3, #1
 8010916:	e009      	b.n	801092c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010920:	2b00      	cmp	r3, #0
 8010922:	d002      	beq.n	801092a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2240      	movs	r2, #64	; 0x40
 8010928:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801092a:	2300      	movs	r3, #0
  
}
 801092c:	4618      	mov	r0, r3
 801092e:	3710      	adds	r7, #16
 8010930:	46bd      	mov	sp, r7
 8010932:	bc90      	pop	{r4, r7}
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	20000000 	.word	0x20000000
 801093c:	10624dd3 	.word	0x10624dd3

08010940 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010944:	4904      	ldr	r1, [pc, #16]	; (8010958 <MX_FATFS_Init+0x18>)
 8010946:	4805      	ldr	r0, [pc, #20]	; (801095c <MX_FATFS_Init+0x1c>)
 8010948:	f003 fb9c 	bl	8014084 <FATFS_LinkDriver>
 801094c:	4603      	mov	r3, r0
 801094e:	461a      	mov	r2, r3
 8010950:	4b03      	ldr	r3, [pc, #12]	; (8010960 <MX_FATFS_Init+0x20>)
 8010952:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010954:	bf00      	nop
 8010956:	bd80      	pop	{r7, pc}
 8010958:	20044c18 	.word	0x20044c18
 801095c:	080199d8 	.word	0x080199d8
 8010960:	20044c14 	.word	0x20044c14

08010964 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801096e:	f000 f896 	bl	8010a9e <BSP_SD_IsDetected>
 8010972:	4603      	mov	r3, r0
 8010974:	2b01      	cmp	r3, #1
 8010976:	d001      	beq.n	801097c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010978:	2301      	movs	r3, #1
 801097a:	e012      	b.n	80109a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801097c:	480b      	ldr	r0, [pc, #44]	; (80109ac <BSP_SD_Init+0x48>)
 801097e:	f7fb ffa5 	bl	800c8cc <HAL_SD_Init>
 8010982:	4603      	mov	r3, r0
 8010984:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010986:	79fb      	ldrb	r3, [r7, #7]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d109      	bne.n	80109a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801098c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010990:	4806      	ldr	r0, [pc, #24]	; (80109ac <BSP_SD_Init+0x48>)
 8010992:	f7fc fd4f 	bl	800d434 <HAL_SD_ConfigWideBusOperation>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801099c:	2301      	movs	r3, #1
 801099e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80109a0:	79fb      	ldrb	r3, [r7, #7]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3708      	adds	r7, #8
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20044a14 	.word	0x20044a14

080109b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80109bc:	2300      	movs	r3, #0
 80109be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	68f9      	ldr	r1, [r7, #12]
 80109c6:	4806      	ldr	r0, [pc, #24]	; (80109e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80109c8:	f7fc f810 	bl	800c9ec <HAL_SD_ReadBlocks_DMA>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d001      	beq.n	80109d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80109d2:	2301      	movs	r3, #1
 80109d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	20044a14 	.word	0x20044a14

080109e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80109f0:	2300      	movs	r3, #0
 80109f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	68f9      	ldr	r1, [r7, #12]
 80109fa:	4806      	ldr	r0, [pc, #24]	; (8010a14 <BSP_SD_WriteBlocks_DMA+0x30>)
 80109fc:	f7fc f8de 	bl	800cbbc <HAL_SD_WriteBlocks_DMA>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a06:	2301      	movs	r3, #1
 8010a08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3718      	adds	r7, #24
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	20044a14 	.word	0x20044a14

08010a18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010a1c:	4805      	ldr	r0, [pc, #20]	; (8010a34 <BSP_SD_GetCardState+0x1c>)
 8010a1e:	f7fc fd85 	bl	800d52c <HAL_SD_GetCardState>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b04      	cmp	r3, #4
 8010a26:	bf14      	ite	ne
 8010a28:	2301      	movne	r3, #1
 8010a2a:	2300      	moveq	r3, #0
 8010a2c:	b2db      	uxtb	r3, r3
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	20044a14 	.word	0x20044a14

08010a38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010a40:	6879      	ldr	r1, [r7, #4]
 8010a42:	4803      	ldr	r0, [pc, #12]	; (8010a50 <BSP_SD_GetCardInfo+0x18>)
 8010a44:	f7fc fcca 	bl	800d3dc <HAL_SD_GetCardInfo>
}
 8010a48:	bf00      	nop
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20044a14 	.word	0x20044a14

08010a54 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010a5c:	f000 f818 	bl	8010a90 <BSP_SD_AbortCallback>
}
 8010a60:	bf00      	nop
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010a70:	f000 f9a8 	bl	8010dc4 <BSP_SD_WriteCpltCallback>
}
 8010a74:	bf00      	nop
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010a84:	f000 f9aa 	bl	8010ddc <BSP_SD_ReadCpltCallback>
}
 8010a88:	bf00      	nop
 8010a8a:	3708      	adds	r7, #8
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010a90:	b480      	push	{r7}
 8010a92:	af00      	add	r7, sp, #0

}
 8010a94:	bf00      	nop
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b082      	sub	sp, #8
 8010aa2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010aa8:	f000 f80c 	bl	8010ac4 <BSP_PlatformIsDetected>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d101      	bne.n	8010ab6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010ab6:	79fb      	ldrb	r3, [r7, #7]
 8010ab8:	b2db      	uxtb	r3, r3
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
	...

08010ac4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010aca:	2301      	movs	r3, #1
 8010acc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010ad2:	4806      	ldr	r0, [pc, #24]	; (8010aec <BSP_PlatformIsDetected+0x28>)
 8010ad4:	f7fa f87e 	bl	800abd4 <HAL_GPIO_ReadPin>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d001      	beq.n	8010ae2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	40020000 	.word	0x40020000

08010af0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010af8:	f7f8 fde2 	bl	80096c0 <HAL_GetTick>
 8010afc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010afe:	e006      	b.n	8010b0e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b00:	f7ff ff8a 	bl	8010a18 <BSP_SD_GetCardState>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d101      	bne.n	8010b0e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	e009      	b.n	8010b22 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010b0e:	f7f8 fdd7 	bl	80096c0 <HAL_GetTick>
 8010b12:	4602      	mov	r2, r0
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d8f0      	bhi.n	8010b00 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	4603      	mov	r3, r0
 8010b34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010b36:	4b0b      	ldr	r3, [pc, #44]	; (8010b64 <SD_CheckStatus+0x38>)
 8010b38:	2201      	movs	r2, #1
 8010b3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010b3c:	f7ff ff6c 	bl	8010a18 <BSP_SD_GetCardState>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d107      	bne.n	8010b56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010b46:	4b07      	ldr	r3, [pc, #28]	; (8010b64 <SD_CheckStatus+0x38>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	f023 0301 	bic.w	r3, r3, #1
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	4b04      	ldr	r3, [pc, #16]	; (8010b64 <SD_CheckStatus+0x38>)
 8010b54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010b56:	4b03      	ldr	r3, [pc, #12]	; (8010b64 <SD_CheckStatus+0x38>)
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	b2db      	uxtb	r3, r3
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	20000009 	.word	0x20000009

08010b68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010b72:	f7ff fef7 	bl	8010964 <BSP_SD_Init>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d107      	bne.n	8010b8c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7ff ffd4 	bl	8010b2c <SD_CheckStatus>
 8010b84:	4603      	mov	r3, r0
 8010b86:	461a      	mov	r2, r3
 8010b88:	4b04      	ldr	r3, [pc, #16]	; (8010b9c <SD_initialize+0x34>)
 8010b8a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010b8c:	4b03      	ldr	r3, [pc, #12]	; (8010b9c <SD_initialize+0x34>)
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	b2db      	uxtb	r3, r3
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000009 	.word	0x20000009

08010ba0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010baa:	79fb      	ldrb	r3, [r7, #7]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff ffbd 	bl	8010b2c <SD_CheckStatus>
 8010bb2:	4603      	mov	r3, r0
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60b9      	str	r1, [r7, #8]
 8010bc4:	607a      	str	r2, [r7, #4]
 8010bc6:	603b      	str	r3, [r7, #0]
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010bd0:	f247 5030 	movw	r0, #30000	; 0x7530
 8010bd4:	f7ff ff8c 	bl	8010af0 <SD_CheckStatusWithTimeout>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	da01      	bge.n	8010be2 <SD_read+0x26>
  {
    return res;
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
 8010be0:	e03b      	b.n	8010c5a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010be2:	683a      	ldr	r2, [r7, #0]
 8010be4:	6879      	ldr	r1, [r7, #4]
 8010be6:	68b8      	ldr	r0, [r7, #8]
 8010be8:	f7ff fee2 	bl	80109b0 <BSP_SD_ReadBlocks_DMA>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d132      	bne.n	8010c58 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010bf2:	4b1c      	ldr	r3, [pc, #112]	; (8010c64 <SD_read+0xa8>)
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010bf8:	f7f8 fd62 	bl	80096c0 <HAL_GetTick>
 8010bfc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010bfe:	bf00      	nop
 8010c00:	4b18      	ldr	r3, [pc, #96]	; (8010c64 <SD_read+0xa8>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d108      	bne.n	8010c1a <SD_read+0x5e>
 8010c08:	f7f8 fd5a 	bl	80096c0 <HAL_GetTick>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	1ad3      	subs	r3, r2, r3
 8010c12:	f247 522f 	movw	r2, #29999	; 0x752f
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d9f2      	bls.n	8010c00 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010c1a:	4b12      	ldr	r3, [pc, #72]	; (8010c64 <SD_read+0xa8>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d102      	bne.n	8010c28 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010c22:	2301      	movs	r3, #1
 8010c24:	75fb      	strb	r3, [r7, #23]
 8010c26:	e017      	b.n	8010c58 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010c28:	4b0e      	ldr	r3, [pc, #56]	; (8010c64 <SD_read+0xa8>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010c2e:	f7f8 fd47 	bl	80096c0 <HAL_GetTick>
 8010c32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c34:	e007      	b.n	8010c46 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c36:	f7ff feef 	bl	8010a18 <BSP_SD_GetCardState>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <SD_read+0x8a>
          {
            res = RES_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010c44:	e008      	b.n	8010c58 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010c46:	f7f8 fd3b 	bl	80096c0 <HAL_GetTick>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	f247 522f 	movw	r2, #29999	; 0x752f
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d9ee      	bls.n	8010c36 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3718      	adds	r7, #24
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	200422b0 	.word	0x200422b0

08010c68 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60b9      	str	r1, [r7, #8]
 8010c70:	607a      	str	r2, [r7, #4]
 8010c72:	603b      	str	r3, [r7, #0]
 8010c74:	4603      	mov	r3, r0
 8010c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010c7c:	4b24      	ldr	r3, [pc, #144]	; (8010d10 <SD_write+0xa8>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010c82:	f247 5030 	movw	r0, #30000	; 0x7530
 8010c86:	f7ff ff33 	bl	8010af0 <SD_CheckStatusWithTimeout>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	da01      	bge.n	8010c94 <SD_write+0x2c>
  {
    return res;
 8010c90:	7dfb      	ldrb	r3, [r7, #23]
 8010c92:	e038      	b.n	8010d06 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010c94:	683a      	ldr	r2, [r7, #0]
 8010c96:	6879      	ldr	r1, [r7, #4]
 8010c98:	68b8      	ldr	r0, [r7, #8]
 8010c9a:	f7ff fea3 	bl	80109e4 <BSP_SD_WriteBlocks_DMA>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d12f      	bne.n	8010d04 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010ca4:	f7f8 fd0c 	bl	80096c0 <HAL_GetTick>
 8010ca8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010caa:	bf00      	nop
 8010cac:	4b18      	ldr	r3, [pc, #96]	; (8010d10 <SD_write+0xa8>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d108      	bne.n	8010cc6 <SD_write+0x5e>
 8010cb4:	f7f8 fd04 	bl	80096c0 <HAL_GetTick>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	1ad3      	subs	r3, r2, r3
 8010cbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d9f2      	bls.n	8010cac <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010cc6:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <SD_write+0xa8>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d102      	bne.n	8010cd4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	75fb      	strb	r3, [r7, #23]
 8010cd2:	e017      	b.n	8010d04 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010cd4:	4b0e      	ldr	r3, [pc, #56]	; (8010d10 <SD_write+0xa8>)
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010cda:	f7f8 fcf1 	bl	80096c0 <HAL_GetTick>
 8010cde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ce0:	e007      	b.n	8010cf2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ce2:	f7ff fe99 	bl	8010a18 <BSP_SD_GetCardState>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d102      	bne.n	8010cf2 <SD_write+0x8a>
          {
            res = RES_OK;
 8010cec:	2300      	movs	r3, #0
 8010cee:	75fb      	strb	r3, [r7, #23]
            break;
 8010cf0:	e008      	b.n	8010d04 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010cf2:	f7f8 fce5 	bl	80096c0 <HAL_GetTick>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d9ee      	bls.n	8010ce2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3718      	adds	r7, #24
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	200422ac 	.word	0x200422ac

08010d14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08c      	sub	sp, #48	; 0x30
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	603a      	str	r2, [r7, #0]
 8010d1e:	71fb      	strb	r3, [r7, #7]
 8010d20:	460b      	mov	r3, r1
 8010d22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010d24:	2301      	movs	r3, #1
 8010d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010d2a:	4b25      	ldr	r3, [pc, #148]	; (8010dc0 <SD_ioctl+0xac>)
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <SD_ioctl+0x28>
 8010d38:	2303      	movs	r3, #3
 8010d3a:	e03c      	b.n	8010db6 <SD_ioctl+0xa2>

  switch (cmd)
 8010d3c:	79bb      	ldrb	r3, [r7, #6]
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d834      	bhi.n	8010dac <SD_ioctl+0x98>
 8010d42:	a201      	add	r2, pc, #4	; (adr r2, 8010d48 <SD_ioctl+0x34>)
 8010d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d48:	08010d59 	.word	0x08010d59
 8010d4c:	08010d61 	.word	0x08010d61
 8010d50:	08010d79 	.word	0x08010d79
 8010d54:	08010d93 	.word	0x08010d93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d5e:	e028      	b.n	8010db2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d60:	f107 030c 	add.w	r3, r7, #12
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7ff fe67 	bl	8010a38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010d70:	2300      	movs	r3, #0
 8010d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d76:	e01c      	b.n	8010db2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d78:	f107 030c 	add.w	r3, r7, #12
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff fe5b 	bl	8010a38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010d90:	e00f      	b.n	8010db2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010d92:	f107 030c 	add.w	r3, r7, #12
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff fe4e 	bl	8010a38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9e:	0a5a      	lsrs	r2, r3, #9
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010da4:	2300      	movs	r3, #0
 8010da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010daa:	e002      	b.n	8010db2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010dac:	2304      	movs	r3, #4
 8010dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3730      	adds	r7, #48	; 0x30
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20000009 	.word	0x20000009

08010dc4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010dc8:	4b03      	ldr	r3, [pc, #12]	; (8010dd8 <BSP_SD_WriteCpltCallback+0x14>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	601a      	str	r2, [r3, #0]
}
 8010dce:	bf00      	nop
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd6:	4770      	bx	lr
 8010dd8:	200422ac 	.word	0x200422ac

08010ddc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010de0:	4b03      	ldr	r3, [pc, #12]	; (8010df0 <BSP_SD_ReadCpltCallback+0x14>)
 8010de2:	2201      	movs	r2, #1
 8010de4:	601a      	str	r2, [r3, #0]
}
 8010de6:	bf00      	nop
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	200422b0 	.word	0x200422b0

08010df4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010dfe:	79fb      	ldrb	r3, [r7, #7]
 8010e00:	4a08      	ldr	r2, [pc, #32]	; (8010e24 <disk_status+0x30>)
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	4413      	add	r3, r2
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	79fa      	ldrb	r2, [r7, #7]
 8010e0c:	4905      	ldr	r1, [pc, #20]	; (8010e24 <disk_status+0x30>)
 8010e0e:	440a      	add	r2, r1
 8010e10:	7a12      	ldrb	r2, [r2, #8]
 8010e12:	4610      	mov	r0, r2
 8010e14:	4798      	blx	r3
 8010e16:	4603      	mov	r3, r0
 8010e18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3710      	adds	r7, #16
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	200422dc 	.word	0x200422dc

08010e28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	4603      	mov	r3, r0
 8010e30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	4a0d      	ldr	r2, [pc, #52]	; (8010e70 <disk_initialize+0x48>)
 8010e3a:	5cd3      	ldrb	r3, [r2, r3]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d111      	bne.n	8010e64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010e40:	79fb      	ldrb	r3, [r7, #7]
 8010e42:	4a0b      	ldr	r2, [pc, #44]	; (8010e70 <disk_initialize+0x48>)
 8010e44:	2101      	movs	r1, #1
 8010e46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010e48:	79fb      	ldrb	r3, [r7, #7]
 8010e4a:	4a09      	ldr	r2, [pc, #36]	; (8010e70 <disk_initialize+0x48>)
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	4413      	add	r3, r2
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	79fa      	ldrb	r2, [r7, #7]
 8010e56:	4906      	ldr	r1, [pc, #24]	; (8010e70 <disk_initialize+0x48>)
 8010e58:	440a      	add	r2, r1
 8010e5a:	7a12      	ldrb	r2, [r2, #8]
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	4798      	blx	r3
 8010e60:	4603      	mov	r3, r0
 8010e62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	200422dc 	.word	0x200422dc

08010e74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010e74:	b590      	push	{r4, r7, lr}
 8010e76:	b087      	sub	sp, #28
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
 8010e7e:	603b      	str	r3, [r7, #0]
 8010e80:	4603      	mov	r3, r0
 8010e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
 8010e86:	4a0a      	ldr	r2, [pc, #40]	; (8010eb0 <disk_read+0x3c>)
 8010e88:	009b      	lsls	r3, r3, #2
 8010e8a:	4413      	add	r3, r2
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	689c      	ldr	r4, [r3, #8]
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
 8010e92:	4a07      	ldr	r2, [pc, #28]	; (8010eb0 <disk_read+0x3c>)
 8010e94:	4413      	add	r3, r2
 8010e96:	7a18      	ldrb	r0, [r3, #8]
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	68b9      	ldr	r1, [r7, #8]
 8010e9e:	47a0      	blx	r4
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	371c      	adds	r7, #28
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd90      	pop	{r4, r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	200422dc 	.word	0x200422dc

08010eb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010eb4:	b590      	push	{r4, r7, lr}
 8010eb6:	b087      	sub	sp, #28
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60b9      	str	r1, [r7, #8]
 8010ebc:	607a      	str	r2, [r7, #4]
 8010ebe:	603b      	str	r3, [r7, #0]
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
 8010ec6:	4a0a      	ldr	r2, [pc, #40]	; (8010ef0 <disk_write+0x3c>)
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4413      	add	r3, r2
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	68dc      	ldr	r4, [r3, #12]
 8010ed0:	7bfb      	ldrb	r3, [r7, #15]
 8010ed2:	4a07      	ldr	r2, [pc, #28]	; (8010ef0 <disk_write+0x3c>)
 8010ed4:	4413      	add	r3, r2
 8010ed6:	7a18      	ldrb	r0, [r3, #8]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	68b9      	ldr	r1, [r7, #8]
 8010ede:	47a0      	blx	r4
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	371c      	adds	r7, #28
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd90      	pop	{r4, r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	200422dc 	.word	0x200422dc

08010ef4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	4603      	mov	r3, r0
 8010efc:	603a      	str	r2, [r7, #0]
 8010efe:	71fb      	strb	r3, [r7, #7]
 8010f00:	460b      	mov	r3, r1
 8010f02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010f04:	79fb      	ldrb	r3, [r7, #7]
 8010f06:	4a09      	ldr	r2, [pc, #36]	; (8010f2c <disk_ioctl+0x38>)
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	4413      	add	r3, r2
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	691b      	ldr	r3, [r3, #16]
 8010f10:	79fa      	ldrb	r2, [r7, #7]
 8010f12:	4906      	ldr	r1, [pc, #24]	; (8010f2c <disk_ioctl+0x38>)
 8010f14:	440a      	add	r2, r1
 8010f16:	7a10      	ldrb	r0, [r2, #8]
 8010f18:	79b9      	ldrb	r1, [r7, #6]
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	4798      	blx	r3
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73fb      	strb	r3, [r7, #15]
  return res;
 8010f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3710      	adds	r7, #16
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	200422dc 	.word	0x200422dc

08010f30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010f40:	89fb      	ldrh	r3, [r7, #14]
 8010f42:	021b      	lsls	r3, r3, #8
 8010f44:	b21a      	sxth	r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	b21b      	sxth	r3, r3
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	b21b      	sxth	r3, r3
 8010f50:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010f52:	89fb      	ldrh	r3, [r7, #14]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3303      	adds	r3, #3
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	021b      	lsls	r3, r3, #8
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	3202      	adds	r2, #2
 8010f78:	7812      	ldrb	r2, [r2, #0]
 8010f7a:	4313      	orrs	r3, r2
 8010f7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	021b      	lsls	r3, r3, #8
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	3201      	adds	r2, #1
 8010f86:	7812      	ldrb	r2, [r2, #0]
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	021b      	lsls	r3, r3, #8
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	7812      	ldrb	r2, [r2, #0]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	60fb      	str	r3, [r7, #12]
	return rv;
 8010f98:	68fb      	ldr	r3, [r7, #12]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr

08010fa6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010fa6:	b480      	push	{r7}
 8010fa8:	b083      	sub	sp, #12
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	460b      	mov	r3, r1
 8010fb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	887a      	ldrh	r2, [r7, #2]
 8010fba:	b2d2      	uxtb	r2, r2
 8010fbc:	701a      	strb	r2, [r3, #0]
 8010fbe:	887b      	ldrh	r3, [r7, #2]
 8010fc0:	0a1b      	lsrs	r3, r3, #8
 8010fc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	1c5a      	adds	r2, r3, #1
 8010fc8:	607a      	str	r2, [r7, #4]
 8010fca:	887a      	ldrh	r2, [r7, #2]
 8010fcc:	b2d2      	uxtb	r2, r2
 8010fce:	701a      	strb	r2, [r3, #0]
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	607a      	str	r2, [r7, #4]
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	b2d2      	uxtb	r2, r2
 8010ff0:	701a      	strb	r2, [r3, #0]
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	0a1b      	lsrs	r3, r3, #8
 8010ff6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	1c5a      	adds	r2, r3, #1
 8010ffc:	607a      	str	r2, [r7, #4]
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	b2d2      	uxtb	r2, r2
 8011002:	701a      	strb	r2, [r3, #0]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	0a1b      	lsrs	r3, r3, #8
 8011008:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	1c5a      	adds	r2, r3, #1
 801100e:	607a      	str	r2, [r7, #4]
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	b2d2      	uxtb	r2, r2
 8011014:	701a      	strb	r2, [r3, #0]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	0a1b      	lsrs	r3, r3, #8
 801101a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	1c5a      	adds	r2, r3, #1
 8011020:	607a      	str	r2, [r7, #4]
 8011022:	683a      	ldr	r2, [r7, #0]
 8011024:	b2d2      	uxtb	r2, r2
 8011026:	701a      	strb	r2, [r3, #0]
}
 8011028:	bf00      	nop
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011034:	b480      	push	{r7}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00d      	beq.n	801106a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801104e:	693a      	ldr	r2, [r7, #16]
 8011050:	1c53      	adds	r3, r2, #1
 8011052:	613b      	str	r3, [r7, #16]
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	1c59      	adds	r1, r3, #1
 8011058:	6179      	str	r1, [r7, #20]
 801105a:	7812      	ldrb	r2, [r2, #0]
 801105c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	3b01      	subs	r3, #1
 8011062:	607b      	str	r3, [r7, #4]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d1f1      	bne.n	801104e <mem_cpy+0x1a>
	}
}
 801106a:	bf00      	nop
 801106c:	371c      	adds	r7, #28
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr

08011076 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011076:	b480      	push	{r7}
 8011078:	b087      	sub	sp, #28
 801107a:	af00      	add	r7, sp, #0
 801107c:	60f8      	str	r0, [r7, #12]
 801107e:	60b9      	str	r1, [r7, #8]
 8011080:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	617a      	str	r2, [r7, #20]
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	b2d2      	uxtb	r2, r2
 8011090:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3b01      	subs	r3, #1
 8011096:	607b      	str	r3, [r7, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1f3      	bne.n	8011086 <mem_set+0x10>
}
 801109e:	bf00      	nop
 80110a0:	371c      	adds	r7, #28
 80110a2:	46bd      	mov	sp, r7
 80110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a8:	4770      	bx	lr

080110aa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80110aa:	b480      	push	{r7}
 80110ac:	b089      	sub	sp, #36	; 0x24
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	60f8      	str	r0, [r7, #12]
 80110b2:	60b9      	str	r1, [r7, #8]
 80110b4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	61fb      	str	r3, [r7, #28]
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80110be:	2300      	movs	r3, #0
 80110c0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	1c5a      	adds	r2, r3, #1
 80110c6:	61fa      	str	r2, [r7, #28]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	4619      	mov	r1, r3
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	1c5a      	adds	r2, r3, #1
 80110d0:	61ba      	str	r2, [r7, #24]
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	1acb      	subs	r3, r1, r3
 80110d6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	3b01      	subs	r3, #1
 80110dc:	607b      	str	r3, [r7, #4]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <mem_cmp+0x40>
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0eb      	beq.n	80110c2 <mem_cmp+0x18>

	return r;
 80110ea:	697b      	ldr	r3, [r7, #20]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3724      	adds	r7, #36	; 0x24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011102:	e002      	b.n	801110a <chk_chr+0x12>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3301      	adds	r3, #1
 8011108:	607b      	str	r3, [r7, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d005      	beq.n	801111e <chk_chr+0x26>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	4293      	cmp	r3, r2
 801111c:	d1f2      	bne.n	8011104 <chk_chr+0xc>
	return *str;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	781b      	ldrb	r3, [r3, #0]
}
 8011122:	4618      	mov	r0, r3
 8011124:	370c      	adds	r7, #12
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr
	...

08011130 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801113a:	2300      	movs	r3, #0
 801113c:	60bb      	str	r3, [r7, #8]
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	60fb      	str	r3, [r7, #12]
 8011142:	e029      	b.n	8011198 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011144:	4a27      	ldr	r2, [pc, #156]	; (80111e4 <chk_lock+0xb4>)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	011b      	lsls	r3, r3, #4
 801114a:	4413      	add	r3, r2
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d01d      	beq.n	801118e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011152:	4a24      	ldr	r2, [pc, #144]	; (80111e4 <chk_lock+0xb4>)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	011b      	lsls	r3, r3, #4
 8011158:	4413      	add	r3, r2
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	429a      	cmp	r2, r3
 8011162:	d116      	bne.n	8011192 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011164:	4a1f      	ldr	r2, [pc, #124]	; (80111e4 <chk_lock+0xb4>)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	011b      	lsls	r3, r3, #4
 801116a:	4413      	add	r3, r2
 801116c:	3304      	adds	r3, #4
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011174:	429a      	cmp	r2, r3
 8011176:	d10c      	bne.n	8011192 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011178:	4a1a      	ldr	r2, [pc, #104]	; (80111e4 <chk_lock+0xb4>)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	011b      	lsls	r3, r3, #4
 801117e:	4413      	add	r3, r2
 8011180:	3308      	adds	r3, #8
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011188:	429a      	cmp	r2, r3
 801118a:	d102      	bne.n	8011192 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801118c:	e007      	b.n	801119e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801118e:	2301      	movs	r3, #1
 8011190:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	3301      	adds	r3, #1
 8011196:	60fb      	str	r3, [r7, #12]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d9d2      	bls.n	8011144 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	d109      	bne.n	80111b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d102      	bne.n	80111b0 <chk_lock+0x80>
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d101      	bne.n	80111b4 <chk_lock+0x84>
 80111b0:	2300      	movs	r3, #0
 80111b2:	e010      	b.n	80111d6 <chk_lock+0xa6>
 80111b4:	2312      	movs	r3, #18
 80111b6:	e00e      	b.n	80111d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d108      	bne.n	80111d0 <chk_lock+0xa0>
 80111be:	4a09      	ldr	r2, [pc, #36]	; (80111e4 <chk_lock+0xb4>)
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	011b      	lsls	r3, r3, #4
 80111c4:	4413      	add	r3, r2
 80111c6:	330c      	adds	r3, #12
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111ce:	d101      	bne.n	80111d4 <chk_lock+0xa4>
 80111d0:	2310      	movs	r3, #16
 80111d2:	e000      	b.n	80111d6 <chk_lock+0xa6>
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3714      	adds	r7, #20
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	200422bc 	.word	0x200422bc

080111e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80111ee:	2300      	movs	r3, #0
 80111f0:	607b      	str	r3, [r7, #4]
 80111f2:	e002      	b.n	80111fa <enq_lock+0x12>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	3301      	adds	r3, #1
 80111f8:	607b      	str	r3, [r7, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d806      	bhi.n	801120e <enq_lock+0x26>
 8011200:	4a09      	ldr	r2, [pc, #36]	; (8011228 <enq_lock+0x40>)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	011b      	lsls	r3, r3, #4
 8011206:	4413      	add	r3, r2
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1f2      	bne.n	80111f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2b02      	cmp	r3, #2
 8011212:	bf14      	ite	ne
 8011214:	2301      	movne	r3, #1
 8011216:	2300      	moveq	r3, #0
 8011218:	b2db      	uxtb	r3, r3
}
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	200422bc 	.word	0x200422bc

0801122c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011236:	2300      	movs	r3, #0
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	e01f      	b.n	801127c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801123c:	4a41      	ldr	r2, [pc, #260]	; (8011344 <inc_lock+0x118>)
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	011b      	lsls	r3, r3, #4
 8011242:	4413      	add	r3, r2
 8011244:	681a      	ldr	r2, [r3, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	429a      	cmp	r2, r3
 801124c:	d113      	bne.n	8011276 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801124e:	4a3d      	ldr	r2, [pc, #244]	; (8011344 <inc_lock+0x118>)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	011b      	lsls	r3, r3, #4
 8011254:	4413      	add	r3, r2
 8011256:	3304      	adds	r3, #4
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801125e:	429a      	cmp	r2, r3
 8011260:	d109      	bne.n	8011276 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011262:	4a38      	ldr	r2, [pc, #224]	; (8011344 <inc_lock+0x118>)
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	011b      	lsls	r3, r3, #4
 8011268:	4413      	add	r3, r2
 801126a:	3308      	adds	r3, #8
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011272:	429a      	cmp	r2, r3
 8011274:	d006      	beq.n	8011284 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3301      	adds	r3, #1
 801127a:	60fb      	str	r3, [r7, #12]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b01      	cmp	r3, #1
 8011280:	d9dc      	bls.n	801123c <inc_lock+0x10>
 8011282:	e000      	b.n	8011286 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011284:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b02      	cmp	r3, #2
 801128a:	d132      	bne.n	80112f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801128c:	2300      	movs	r3, #0
 801128e:	60fb      	str	r3, [r7, #12]
 8011290:	e002      	b.n	8011298 <inc_lock+0x6c>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	3301      	adds	r3, #1
 8011296:	60fb      	str	r3, [r7, #12]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d806      	bhi.n	80112ac <inc_lock+0x80>
 801129e:	4a29      	ldr	r2, [pc, #164]	; (8011344 <inc_lock+0x118>)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	011b      	lsls	r3, r3, #4
 80112a4:	4413      	add	r3, r2
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1f2      	bne.n	8011292 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b02      	cmp	r3, #2
 80112b0:	d101      	bne.n	80112b6 <inc_lock+0x8a>
 80112b2:	2300      	movs	r3, #0
 80112b4:	e040      	b.n	8011338 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	4922      	ldr	r1, [pc, #136]	; (8011344 <inc_lock+0x118>)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	011b      	lsls	r3, r3, #4
 80112c0:	440b      	add	r3, r1
 80112c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	689a      	ldr	r2, [r3, #8]
 80112c8:	491e      	ldr	r1, [pc, #120]	; (8011344 <inc_lock+0x118>)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	440b      	add	r3, r1
 80112d0:	3304      	adds	r3, #4
 80112d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	695a      	ldr	r2, [r3, #20]
 80112d8:	491a      	ldr	r1, [pc, #104]	; (8011344 <inc_lock+0x118>)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	011b      	lsls	r3, r3, #4
 80112de:	440b      	add	r3, r1
 80112e0:	3308      	adds	r3, #8
 80112e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80112e4:	4a17      	ldr	r2, [pc, #92]	; (8011344 <inc_lock+0x118>)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	011b      	lsls	r3, r3, #4
 80112ea:	4413      	add	r3, r2
 80112ec:	330c      	adds	r3, #12
 80112ee:	2200      	movs	r2, #0
 80112f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d009      	beq.n	801130c <inc_lock+0xe0>
 80112f8:	4a12      	ldr	r2, [pc, #72]	; (8011344 <inc_lock+0x118>)
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	011b      	lsls	r3, r3, #4
 80112fe:	4413      	add	r3, r2
 8011300:	330c      	adds	r3, #12
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d001      	beq.n	801130c <inc_lock+0xe0>
 8011308:	2300      	movs	r3, #0
 801130a:	e015      	b.n	8011338 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d108      	bne.n	8011324 <inc_lock+0xf8>
 8011312:	4a0c      	ldr	r2, [pc, #48]	; (8011344 <inc_lock+0x118>)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	011b      	lsls	r3, r3, #4
 8011318:	4413      	add	r3, r2
 801131a:	330c      	adds	r3, #12
 801131c:	881b      	ldrh	r3, [r3, #0]
 801131e:	3301      	adds	r3, #1
 8011320:	b29a      	uxth	r2, r3
 8011322:	e001      	b.n	8011328 <inc_lock+0xfc>
 8011324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011328:	4906      	ldr	r1, [pc, #24]	; (8011344 <inc_lock+0x118>)
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	011b      	lsls	r3, r3, #4
 801132e:	440b      	add	r3, r1
 8011330:	330c      	adds	r3, #12
 8011332:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3301      	adds	r3, #1
}
 8011338:	4618      	mov	r0, r3
 801133a:	3714      	adds	r7, #20
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr
 8011344:	200422bc 	.word	0x200422bc

08011348 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011348:	b480      	push	{r7}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	3b01      	subs	r3, #1
 8011354:	607b      	str	r3, [r7, #4]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d825      	bhi.n	80113a8 <dec_lock+0x60>
		n = Files[i].ctr;
 801135c:	4a17      	ldr	r2, [pc, #92]	; (80113bc <dec_lock+0x74>)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	011b      	lsls	r3, r3, #4
 8011362:	4413      	add	r3, r2
 8011364:	330c      	adds	r3, #12
 8011366:	881b      	ldrh	r3, [r3, #0]
 8011368:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801136a:	89fb      	ldrh	r3, [r7, #14]
 801136c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011370:	d101      	bne.n	8011376 <dec_lock+0x2e>
 8011372:	2300      	movs	r3, #0
 8011374:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011376:	89fb      	ldrh	r3, [r7, #14]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <dec_lock+0x3a>
 801137c:	89fb      	ldrh	r3, [r7, #14]
 801137e:	3b01      	subs	r3, #1
 8011380:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011382:	4a0e      	ldr	r2, [pc, #56]	; (80113bc <dec_lock+0x74>)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	011b      	lsls	r3, r3, #4
 8011388:	4413      	add	r3, r2
 801138a:	330c      	adds	r3, #12
 801138c:	89fa      	ldrh	r2, [r7, #14]
 801138e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011390:	89fb      	ldrh	r3, [r7, #14]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d105      	bne.n	80113a2 <dec_lock+0x5a>
 8011396:	4a09      	ldr	r2, [pc, #36]	; (80113bc <dec_lock+0x74>)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	011b      	lsls	r3, r3, #4
 801139c:	4413      	add	r3, r2
 801139e:	2200      	movs	r2, #0
 80113a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80113a2:	2300      	movs	r3, #0
 80113a4:	737b      	strb	r3, [r7, #13]
 80113a6:	e001      	b.n	80113ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80113a8:	2302      	movs	r3, #2
 80113aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80113ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	200422bc 	.word	0x200422bc

080113c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80113c8:	2300      	movs	r3, #0
 80113ca:	60fb      	str	r3, [r7, #12]
 80113cc:	e010      	b.n	80113f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80113ce:	4a0d      	ldr	r2, [pc, #52]	; (8011404 <clear_lock+0x44>)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	011b      	lsls	r3, r3, #4
 80113d4:	4413      	add	r3, r2
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d105      	bne.n	80113ea <clear_lock+0x2a>
 80113de:	4a09      	ldr	r2, [pc, #36]	; (8011404 <clear_lock+0x44>)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	011b      	lsls	r3, r3, #4
 80113e4:	4413      	add	r3, r2
 80113e6:	2200      	movs	r2, #0
 80113e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	3301      	adds	r3, #1
 80113ee:	60fb      	str	r3, [r7, #12]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d9eb      	bls.n	80113ce <clear_lock+0xe>
	}
}
 80113f6:	bf00      	nop
 80113f8:	3714      	adds	r7, #20
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	200422bc 	.word	0x200422bc

08011408 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011410:	2300      	movs	r3, #0
 8011412:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	78db      	ldrb	r3, [r3, #3]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d034      	beq.n	8011486 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011420:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	7858      	ldrb	r0, [r3, #1]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801142c:	2301      	movs	r3, #1
 801142e:	697a      	ldr	r2, [r7, #20]
 8011430:	f7ff fd40 	bl	8010eb4 <disk_write>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d002      	beq.n	8011440 <sync_window+0x38>
			res = FR_DISK_ERR;
 801143a:	2301      	movs	r3, #1
 801143c:	73fb      	strb	r3, [r7, #15]
 801143e:	e022      	b.n	8011486 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801144a:	697a      	ldr	r2, [r7, #20]
 801144c:	1ad2      	subs	r2, r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a1b      	ldr	r3, [r3, #32]
 8011452:	429a      	cmp	r2, r3
 8011454:	d217      	bcs.n	8011486 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	789b      	ldrb	r3, [r3, #2]
 801145a:	613b      	str	r3, [r7, #16]
 801145c:	e010      	b.n	8011480 <sync_window+0x78>
					wsect += fs->fsize;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6a1b      	ldr	r3, [r3, #32]
 8011462:	697a      	ldr	r2, [r7, #20]
 8011464:	4413      	add	r3, r2
 8011466:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	7858      	ldrb	r0, [r3, #1]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011472:	2301      	movs	r3, #1
 8011474:	697a      	ldr	r2, [r7, #20]
 8011476:	f7ff fd1d 	bl	8010eb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	3b01      	subs	r3, #1
 801147e:	613b      	str	r3, [r7, #16]
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	2b01      	cmp	r3, #1
 8011484:	d8eb      	bhi.n	801145e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011486:	7bfb      	ldrb	r3, [r7, #15]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3718      	adds	r7, #24
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801149a:	2300      	movs	r3, #0
 801149c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a2:	683a      	ldr	r2, [r7, #0]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d01b      	beq.n	80114e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7ff ffad 	bl	8011408 <sync_window>
 80114ae:	4603      	mov	r3, r0
 80114b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d113      	bne.n	80114e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7858      	ldrb	r0, [r3, #1]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114c2:	2301      	movs	r3, #1
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	f7ff fcd5 	bl	8010e74 <disk_read>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d004      	beq.n	80114da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80114d0:	f04f 33ff 	mov.w	r3, #4294967295
 80114d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	683a      	ldr	r2, [r7, #0]
 80114de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80114e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
	...

080114ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7ff ff87 	bl	8011408 <sync_window>
 80114fa:	4603      	mov	r3, r0
 80114fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80114fe:	7bfb      	ldrb	r3, [r7, #15]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d159      	bne.n	80115b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	2b03      	cmp	r3, #3
 801150a:	d149      	bne.n	80115a0 <sync_fs+0xb4>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	791b      	ldrb	r3, [r3, #4]
 8011510:	2b01      	cmp	r3, #1
 8011512:	d145      	bne.n	80115a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	899b      	ldrh	r3, [r3, #12]
 801151e:	461a      	mov	r2, r3
 8011520:	2100      	movs	r1, #0
 8011522:	f7ff fda8 	bl	8011076 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3338      	adds	r3, #56	; 0x38
 801152a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801152e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011532:	4618      	mov	r0, r3
 8011534:	f7ff fd37 	bl	8010fa6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	3338      	adds	r3, #56	; 0x38
 801153c:	4921      	ldr	r1, [pc, #132]	; (80115c4 <sync_fs+0xd8>)
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff fd4c 	bl	8010fdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	3338      	adds	r3, #56	; 0x38
 8011548:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801154c:	491e      	ldr	r1, [pc, #120]	; (80115c8 <sync_fs+0xdc>)
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff fd44 	bl	8010fdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	3338      	adds	r3, #56	; 0x38
 8011558:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	4619      	mov	r1, r3
 8011562:	4610      	mov	r0, r2
 8011564:	f7ff fd3a 	bl	8010fdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3338      	adds	r3, #56	; 0x38
 801156c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	691b      	ldr	r3, [r3, #16]
 8011574:	4619      	mov	r1, r3
 8011576:	4610      	mov	r0, r2
 8011578:	f7ff fd30 	bl	8010fdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011580:	1c5a      	adds	r2, r3, #1
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	7858      	ldrb	r0, [r3, #1]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011594:	2301      	movs	r3, #1
 8011596:	f7ff fc8d 	bl	8010eb4 <disk_write>
			fs->fsi_flag = 0;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	785b      	ldrb	r3, [r3, #1]
 80115a4:	2200      	movs	r2, #0
 80115a6:	2100      	movs	r1, #0
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff fca3 	bl	8010ef4 <disk_ioctl>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <sync_fs+0xcc>
 80115b4:	2301      	movs	r3, #1
 80115b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	41615252 	.word	0x41615252
 80115c8:	61417272 	.word	0x61417272

080115cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	3b02      	subs	r3, #2
 80115da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	69db      	ldr	r3, [r3, #28]
 80115e0:	3b02      	subs	r3, #2
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d301      	bcc.n	80115ec <clust2sect+0x20>
 80115e8:	2300      	movs	r3, #0
 80115ea:	e008      	b.n	80115fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	895b      	ldrh	r3, [r3, #10]
 80115f0:	461a      	mov	r2, r3
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	fb03 f202 	mul.w	r2, r3, r2
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115fc:	4413      	add	r3, r2
}
 80115fe:	4618      	mov	r0, r3
 8011600:	370c      	adds	r7, #12
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr

0801160a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b086      	sub	sp, #24
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	2b01      	cmp	r3, #1
 801161e:	d904      	bls.n	801162a <get_fat+0x20>
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	69db      	ldr	r3, [r3, #28]
 8011624:	683a      	ldr	r2, [r7, #0]
 8011626:	429a      	cmp	r2, r3
 8011628:	d302      	bcc.n	8011630 <get_fat+0x26>
		val = 1;	/* Internal error */
 801162a:	2301      	movs	r3, #1
 801162c:	617b      	str	r3, [r7, #20]
 801162e:	e0b7      	b.n	80117a0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011630:	f04f 33ff 	mov.w	r3, #4294967295
 8011634:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	2b02      	cmp	r3, #2
 801163c:	d05a      	beq.n	80116f4 <get_fat+0xea>
 801163e:	2b03      	cmp	r3, #3
 8011640:	d07d      	beq.n	801173e <get_fat+0x134>
 8011642:	2b01      	cmp	r3, #1
 8011644:	f040 80a2 	bne.w	801178c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	60fb      	str	r3, [r7, #12]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	085b      	lsrs	r3, r3, #1
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	4413      	add	r3, r2
 8011654:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	899b      	ldrh	r3, [r3, #12]
 801165e:	4619      	mov	r1, r3
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	fbb3 f3f1 	udiv	r3, r3, r1
 8011666:	4413      	add	r3, r2
 8011668:	4619      	mov	r1, r3
 801166a:	6938      	ldr	r0, [r7, #16]
 801166c:	f7ff ff10 	bl	8011490 <move_window>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	f040 808d 	bne.w	8011792 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	1c5a      	adds	r2, r3, #1
 801167c:	60fa      	str	r2, [r7, #12]
 801167e:	693a      	ldr	r2, [r7, #16]
 8011680:	8992      	ldrh	r2, [r2, #12]
 8011682:	fbb3 f1f2 	udiv	r1, r3, r2
 8011686:	fb02 f201 	mul.w	r2, r2, r1
 801168a:	1a9b      	subs	r3, r3, r2
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	4413      	add	r3, r2
 8011690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011694:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	899b      	ldrh	r3, [r3, #12]
 801169e:	4619      	mov	r1, r3
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80116a6:	4413      	add	r3, r2
 80116a8:	4619      	mov	r1, r3
 80116aa:	6938      	ldr	r0, [r7, #16]
 80116ac:	f7ff fef0 	bl	8011490 <move_window>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d16f      	bne.n	8011796 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	899b      	ldrh	r3, [r3, #12]
 80116ba:	461a      	mov	r2, r3
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	fbb3 f1f2 	udiv	r1, r3, r2
 80116c2:	fb02 f201 	mul.w	r2, r2, r1
 80116c6:	1a9b      	subs	r3, r3, r2
 80116c8:	693a      	ldr	r2, [r7, #16]
 80116ca:	4413      	add	r3, r2
 80116cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80116d0:	021b      	lsls	r3, r3, #8
 80116d2:	461a      	mov	r2, r3
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	4313      	orrs	r3, r2
 80116d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	f003 0301 	and.w	r3, r3, #1
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d002      	beq.n	80116ea <get_fat+0xe0>
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	091b      	lsrs	r3, r3, #4
 80116e8:	e002      	b.n	80116f0 <get_fat+0xe6>
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80116f0:	617b      	str	r3, [r7, #20]
			break;
 80116f2:	e055      	b.n	80117a0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	899b      	ldrh	r3, [r3, #12]
 80116fc:	085b      	lsrs	r3, r3, #1
 80116fe:	b29b      	uxth	r3, r3
 8011700:	4619      	mov	r1, r3
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	fbb3 f3f1 	udiv	r3, r3, r1
 8011708:	4413      	add	r3, r2
 801170a:	4619      	mov	r1, r3
 801170c:	6938      	ldr	r0, [r7, #16]
 801170e:	f7ff febf 	bl	8011490 <move_window>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d140      	bne.n	801179a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	693a      	ldr	r2, [r7, #16]
 8011724:	8992      	ldrh	r2, [r2, #12]
 8011726:	fbb3 f0f2 	udiv	r0, r3, r2
 801172a:	fb02 f200 	mul.w	r2, r2, r0
 801172e:	1a9b      	subs	r3, r3, r2
 8011730:	440b      	add	r3, r1
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff fbfc 	bl	8010f30 <ld_word>
 8011738:	4603      	mov	r3, r0
 801173a:	617b      	str	r3, [r7, #20]
			break;
 801173c:	e030      	b.n	80117a0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	899b      	ldrh	r3, [r3, #12]
 8011746:	089b      	lsrs	r3, r3, #2
 8011748:	b29b      	uxth	r3, r3
 801174a:	4619      	mov	r1, r3
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011752:	4413      	add	r3, r2
 8011754:	4619      	mov	r1, r3
 8011756:	6938      	ldr	r0, [r7, #16]
 8011758:	f7ff fe9a 	bl	8011490 <move_window>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d11d      	bne.n	801179e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	693a      	ldr	r2, [r7, #16]
 801176e:	8992      	ldrh	r2, [r2, #12]
 8011770:	fbb3 f0f2 	udiv	r0, r3, r2
 8011774:	fb02 f200 	mul.w	r2, r2, r0
 8011778:	1a9b      	subs	r3, r3, r2
 801177a:	440b      	add	r3, r1
 801177c:	4618      	mov	r0, r3
 801177e:	f7ff fbef 	bl	8010f60 <ld_dword>
 8011782:	4603      	mov	r3, r0
 8011784:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011788:	617b      	str	r3, [r7, #20]
			break;
 801178a:	e009      	b.n	80117a0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801178c:	2301      	movs	r3, #1
 801178e:	617b      	str	r3, [r7, #20]
 8011790:	e006      	b.n	80117a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011792:	bf00      	nop
 8011794:	e004      	b.n	80117a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011796:	bf00      	nop
 8011798:	e002      	b.n	80117a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801179a:	bf00      	nop
 801179c:	e000      	b.n	80117a0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801179e:	bf00      	nop
		}
	}

	return val;
 80117a0:	697b      	ldr	r3, [r7, #20]
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3718      	adds	r7, #24
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80117aa:	b590      	push	{r4, r7, lr}
 80117ac:	b089      	sub	sp, #36	; 0x24
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	60f8      	str	r0, [r7, #12]
 80117b2:	60b9      	str	r1, [r7, #8]
 80117b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80117b6:	2302      	movs	r3, #2
 80117b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	2b01      	cmp	r3, #1
 80117be:	f240 8106 	bls.w	80119ce <put_fat+0x224>
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	69db      	ldr	r3, [r3, #28]
 80117c6:	68ba      	ldr	r2, [r7, #8]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	f080 8100 	bcs.w	80119ce <put_fat+0x224>
		switch (fs->fs_type) {
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	2b02      	cmp	r3, #2
 80117d4:	f000 8088 	beq.w	80118e8 <put_fat+0x13e>
 80117d8:	2b03      	cmp	r3, #3
 80117da:	f000 80b0 	beq.w	801193e <put_fat+0x194>
 80117de:	2b01      	cmp	r3, #1
 80117e0:	f040 80f5 	bne.w	80119ce <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	61bb      	str	r3, [r7, #24]
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	085b      	lsrs	r3, r3, #1
 80117ec:	69ba      	ldr	r2, [r7, #24]
 80117ee:	4413      	add	r3, r2
 80117f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	899b      	ldrh	r3, [r3, #12]
 80117fa:	4619      	mov	r1, r3
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011802:	4413      	add	r3, r2
 8011804:	4619      	mov	r1, r3
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7ff fe42 	bl	8011490 <move_window>
 801180c:	4603      	mov	r3, r0
 801180e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011810:	7ffb      	ldrb	r3, [r7, #31]
 8011812:	2b00      	cmp	r3, #0
 8011814:	f040 80d4 	bne.w	80119c0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	1c5a      	adds	r2, r3, #1
 8011822:	61ba      	str	r2, [r7, #24]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	8992      	ldrh	r2, [r2, #12]
 8011828:	fbb3 f0f2 	udiv	r0, r3, r2
 801182c:	fb02 f200 	mul.w	r2, r2, r0
 8011830:	1a9b      	subs	r3, r3, r2
 8011832:	440b      	add	r3, r1
 8011834:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	f003 0301 	and.w	r3, r3, #1
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00d      	beq.n	801185c <put_fat+0xb2>
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	b25b      	sxtb	r3, r3
 8011846:	f003 030f 	and.w	r3, r3, #15
 801184a:	b25a      	sxtb	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	b2db      	uxtb	r3, r3
 8011850:	011b      	lsls	r3, r3, #4
 8011852:	b25b      	sxtb	r3, r3
 8011854:	4313      	orrs	r3, r2
 8011856:	b25b      	sxtb	r3, r3
 8011858:	b2db      	uxtb	r3, r3
 801185a:	e001      	b.n	8011860 <put_fat+0xb6>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	b2db      	uxtb	r3, r3
 8011860:	697a      	ldr	r2, [r7, #20]
 8011862:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2201      	movs	r2, #1
 8011868:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	899b      	ldrh	r3, [r3, #12]
 8011872:	4619      	mov	r1, r3
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	fbb3 f3f1 	udiv	r3, r3, r1
 801187a:	4413      	add	r3, r2
 801187c:	4619      	mov	r1, r3
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7ff fe06 	bl	8011490 <move_window>
 8011884:	4603      	mov	r3, r0
 8011886:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011888:	7ffb      	ldrb	r3, [r7, #31]
 801188a:	2b00      	cmp	r3, #0
 801188c:	f040 809a 	bne.w	80119c4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	899b      	ldrh	r3, [r3, #12]
 801189a:	461a      	mov	r2, r3
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	fbb3 f0f2 	udiv	r0, r3, r2
 80118a2:	fb02 f200 	mul.w	r2, r2, r0
 80118a6:	1a9b      	subs	r3, r3, r2
 80118a8:	440b      	add	r3, r1
 80118aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	f003 0301 	and.w	r3, r3, #1
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d003      	beq.n	80118be <put_fat+0x114>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	091b      	lsrs	r3, r3, #4
 80118ba:	b2db      	uxtb	r3, r3
 80118bc:	e00e      	b.n	80118dc <put_fat+0x132>
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	b25b      	sxtb	r3, r3
 80118c4:	f023 030f 	bic.w	r3, r3, #15
 80118c8:	b25a      	sxtb	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	0a1b      	lsrs	r3, r3, #8
 80118ce:	b25b      	sxtb	r3, r3
 80118d0:	f003 030f 	and.w	r3, r3, #15
 80118d4:	b25b      	sxtb	r3, r3
 80118d6:	4313      	orrs	r3, r2
 80118d8:	b25b      	sxtb	r3, r3
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	697a      	ldr	r2, [r7, #20]
 80118de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2201      	movs	r2, #1
 80118e4:	70da      	strb	r2, [r3, #3]
			break;
 80118e6:	e072      	b.n	80119ce <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	899b      	ldrh	r3, [r3, #12]
 80118f0:	085b      	lsrs	r3, r3, #1
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	4619      	mov	r1, r3
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80118fc:	4413      	add	r3, r2
 80118fe:	4619      	mov	r1, r3
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f7ff fdc5 	bl	8011490 <move_window>
 8011906:	4603      	mov	r3, r0
 8011908:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801190a:	7ffb      	ldrb	r3, [r7, #31]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d15b      	bne.n	80119c8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	8992      	ldrh	r2, [r2, #12]
 801191e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011922:	fb02 f200 	mul.w	r2, r2, r0
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	440b      	add	r3, r1
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	b292      	uxth	r2, r2
 801192e:	4611      	mov	r1, r2
 8011930:	4618      	mov	r0, r3
 8011932:	f7ff fb38 	bl	8010fa6 <st_word>
			fs->wflag = 1;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2201      	movs	r2, #1
 801193a:	70da      	strb	r2, [r3, #3]
			break;
 801193c:	e047      	b.n	80119ce <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	899b      	ldrh	r3, [r3, #12]
 8011946:	089b      	lsrs	r3, r3, #2
 8011948:	b29b      	uxth	r3, r3
 801194a:	4619      	mov	r1, r3
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011952:	4413      	add	r3, r2
 8011954:	4619      	mov	r1, r3
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f7ff fd9a 	bl	8011490 <move_window>
 801195c:	4603      	mov	r3, r0
 801195e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011960:	7ffb      	ldrb	r3, [r7, #31]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d132      	bne.n	80119cc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	009b      	lsls	r3, r3, #2
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	8992      	ldrh	r2, [r2, #12]
 801197a:	fbb3 f0f2 	udiv	r0, r3, r2
 801197e:	fb02 f200 	mul.w	r2, r2, r0
 8011982:	1a9b      	subs	r3, r3, r2
 8011984:	440b      	add	r3, r1
 8011986:	4618      	mov	r0, r3
 8011988:	f7ff faea 	bl	8010f60 <ld_dword>
 801198c:	4603      	mov	r3, r0
 801198e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011992:	4323      	orrs	r3, r4
 8011994:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	8992      	ldrh	r2, [r2, #12]
 80119a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80119a8:	fb02 f200 	mul.w	r2, r2, r0
 80119ac:	1a9b      	subs	r3, r3, r2
 80119ae:	440b      	add	r3, r1
 80119b0:	6879      	ldr	r1, [r7, #4]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7ff fb12 	bl	8010fdc <st_dword>
			fs->wflag = 1;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2201      	movs	r2, #1
 80119bc:	70da      	strb	r2, [r3, #3]
			break;
 80119be:	e006      	b.n	80119ce <put_fat+0x224>
			if (res != FR_OK) break;
 80119c0:	bf00      	nop
 80119c2:	e004      	b.n	80119ce <put_fat+0x224>
			if (res != FR_OK) break;
 80119c4:	bf00      	nop
 80119c6:	e002      	b.n	80119ce <put_fat+0x224>
			if (res != FR_OK) break;
 80119c8:	bf00      	nop
 80119ca:	e000      	b.n	80119ce <put_fat+0x224>
			if (res != FR_OK) break;
 80119cc:	bf00      	nop
		}
	}
	return res;
 80119ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3724      	adds	r7, #36	; 0x24
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd90      	pop	{r4, r7, pc}

080119d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b088      	sub	sp, #32
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80119e4:	2300      	movs	r3, #0
 80119e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d904      	bls.n	80119fe <remove_chain+0x26>
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	69db      	ldr	r3, [r3, #28]
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d301      	bcc.n	8011a02 <remove_chain+0x2a>
 80119fe:	2302      	movs	r3, #2
 8011a00:	e04b      	b.n	8011a9a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00c      	beq.n	8011a22 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011a08:	f04f 32ff 	mov.w	r2, #4294967295
 8011a0c:	6879      	ldr	r1, [r7, #4]
 8011a0e:	69b8      	ldr	r0, [r7, #24]
 8011a10:	f7ff fecb 	bl	80117aa <put_fat>
 8011a14:	4603      	mov	r3, r0
 8011a16:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011a18:	7ffb      	ldrb	r3, [r7, #31]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d001      	beq.n	8011a22 <remove_chain+0x4a>
 8011a1e:	7ffb      	ldrb	r3, [r7, #31]
 8011a20:	e03b      	b.n	8011a9a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011a22:	68b9      	ldr	r1, [r7, #8]
 8011a24:	68f8      	ldr	r0, [r7, #12]
 8011a26:	f7ff fdf0 	bl	801160a <get_fat>
 8011a2a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d031      	beq.n	8011a96 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d101      	bne.n	8011a3c <remove_chain+0x64>
 8011a38:	2302      	movs	r3, #2
 8011a3a:	e02e      	b.n	8011a9a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a42:	d101      	bne.n	8011a48 <remove_chain+0x70>
 8011a44:	2301      	movs	r3, #1
 8011a46:	e028      	b.n	8011a9a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011a48:	2200      	movs	r2, #0
 8011a4a:	68b9      	ldr	r1, [r7, #8]
 8011a4c:	69b8      	ldr	r0, [r7, #24]
 8011a4e:	f7ff feac 	bl	80117aa <put_fat>
 8011a52:	4603      	mov	r3, r0
 8011a54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011a56:	7ffb      	ldrb	r3, [r7, #31]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <remove_chain+0x88>
 8011a5c:	7ffb      	ldrb	r3, [r7, #31]
 8011a5e:	e01c      	b.n	8011a9a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	695a      	ldr	r2, [r3, #20]
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	69db      	ldr	r3, [r3, #28]
 8011a68:	3b02      	subs	r3, #2
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d20b      	bcs.n	8011a86 <remove_chain+0xae>
			fs->free_clst++;
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	695b      	ldr	r3, [r3, #20]
 8011a72:	1c5a      	adds	r2, r3, #1
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	791b      	ldrb	r3, [r3, #4]
 8011a7c:	f043 0301 	orr.w	r3, r3, #1
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	69db      	ldr	r3, [r3, #28]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d3c6      	bcc.n	8011a22 <remove_chain+0x4a>
 8011a94:	e000      	b.n	8011a98 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011a96:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011a98:	2300      	movs	r3, #0
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3720      	adds	r7, #32
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011aa2:	b580      	push	{r7, lr}
 8011aa4:	b088      	sub	sp, #32
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
 8011aaa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10d      	bne.n	8011ad4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d004      	beq.n	8011ace <create_chain+0x2c>
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	69db      	ldr	r3, [r3, #28]
 8011ac8:	69ba      	ldr	r2, [r7, #24]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d31b      	bcc.n	8011b06 <create_chain+0x64>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	61bb      	str	r3, [r7, #24]
 8011ad2:	e018      	b.n	8011b06 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ff fd97 	bl	801160a <get_fat>
 8011adc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d801      	bhi.n	8011ae8 <create_chain+0x46>
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	e070      	b.n	8011bca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aee:	d101      	bne.n	8011af4 <create_chain+0x52>
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	e06a      	b.n	8011bca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	69db      	ldr	r3, [r3, #28]
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d201      	bcs.n	8011b02 <create_chain+0x60>
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	e063      	b.n	8011bca <create_chain+0x128>
		scl = clst;
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	69db      	ldr	r3, [r3, #28]
 8011b14:	69fa      	ldr	r2, [r7, #28]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d307      	bcc.n	8011b2a <create_chain+0x88>
				ncl = 2;
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011b1e:	69fa      	ldr	r2, [r7, #28]
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d901      	bls.n	8011b2a <create_chain+0x88>
 8011b26:	2300      	movs	r3, #0
 8011b28:	e04f      	b.n	8011bca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011b2a:	69f9      	ldr	r1, [r7, #28]
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7ff fd6c 	bl	801160a <get_fat>
 8011b32:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d00e      	beq.n	8011b58 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d003      	beq.n	8011b48 <create_chain+0xa6>
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b46:	d101      	bne.n	8011b4c <create_chain+0xaa>
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	e03e      	b.n	8011bca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011b4c:	69fa      	ldr	r2, [r7, #28]
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d1da      	bne.n	8011b0a <create_chain+0x68>
 8011b54:	2300      	movs	r3, #0
 8011b56:	e038      	b.n	8011bca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011b58:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b5e:	69f9      	ldr	r1, [r7, #28]
 8011b60:	6938      	ldr	r0, [r7, #16]
 8011b62:	f7ff fe22 	bl	80117aa <put_fat>
 8011b66:	4603      	mov	r3, r0
 8011b68:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011b6a:	7dfb      	ldrb	r3, [r7, #23]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d109      	bne.n	8011b84 <create_chain+0xe2>
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d006      	beq.n	8011b84 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011b76:	69fa      	ldr	r2, [r7, #28]
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	6938      	ldr	r0, [r7, #16]
 8011b7c:	f7ff fe15 	bl	80117aa <put_fat>
 8011b80:	4603      	mov	r3, r0
 8011b82:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011b84:	7dfb      	ldrb	r3, [r7, #23]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d116      	bne.n	8011bb8 <create_chain+0x116>
		fs->last_clst = ncl;
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	69fa      	ldr	r2, [r7, #28]
 8011b8e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	695a      	ldr	r2, [r3, #20]
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	69db      	ldr	r3, [r3, #28]
 8011b98:	3b02      	subs	r3, #2
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d804      	bhi.n	8011ba8 <create_chain+0x106>
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	695b      	ldr	r3, [r3, #20]
 8011ba2:	1e5a      	subs	r2, r3, #1
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	791b      	ldrb	r3, [r3, #4]
 8011bac:	f043 0301 	orr.w	r3, r3, #1
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	711a      	strb	r2, [r3, #4]
 8011bb6:	e007      	b.n	8011bc8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011bb8:	7dfb      	ldrb	r3, [r7, #23]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d102      	bne.n	8011bc4 <create_chain+0x122>
 8011bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc2:	e000      	b.n	8011bc6 <create_chain+0x124>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011bc8:	69fb      	ldr	r3, [r7, #28]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3720      	adds	r7, #32
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011bd2:	b480      	push	{r7}
 8011bd4:	b087      	sub	sp, #28
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
 8011bda:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be6:	3304      	adds	r3, #4
 8011be8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	899b      	ldrh	r3, [r3, #12]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bf6:	68fa      	ldr	r2, [r7, #12]
 8011bf8:	8952      	ldrh	r2, [r2, #10]
 8011bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bfe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	1d1a      	adds	r2, r3, #4
 8011c04:	613a      	str	r2, [r7, #16]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d101      	bne.n	8011c14 <clmt_clust+0x42>
 8011c10:	2300      	movs	r3, #0
 8011c12:	e010      	b.n	8011c36 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011c14:	697a      	ldr	r2, [r7, #20]
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d307      	bcc.n	8011c2c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	617b      	str	r3, [r7, #20]
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	3304      	adds	r3, #4
 8011c28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c2a:	e7e9      	b.n	8011c00 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011c2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	4413      	add	r3, r2
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	371c      	adds	r7, #28
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr

08011c42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011c42:	b580      	push	{r7, lr}
 8011c44:	b086      	sub	sp, #24
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
 8011c4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c58:	d204      	bcs.n	8011c64 <dir_sdi+0x22>
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	f003 031f 	and.w	r3, r3, #31
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d001      	beq.n	8011c68 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011c64:	2302      	movs	r3, #2
 8011c66:	e071      	b.n	8011d4c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	683a      	ldr	r2, [r7, #0]
 8011c6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d106      	bne.n	8011c88 <dir_sdi+0x46>
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	2b02      	cmp	r3, #2
 8011c80:	d902      	bls.n	8011c88 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10c      	bne.n	8011ca8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	095b      	lsrs	r3, r3, #5
 8011c92:	693a      	ldr	r2, [r7, #16]
 8011c94:	8912      	ldrh	r2, [r2, #8]
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d301      	bcc.n	8011c9e <dir_sdi+0x5c>
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	e056      	b.n	8011d4c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	61da      	str	r2, [r3, #28]
 8011ca6:	e02d      	b.n	8011d04 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	895b      	ldrh	r3, [r3, #10]
 8011cac:	461a      	mov	r2, r3
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	899b      	ldrh	r3, [r3, #12]
 8011cb2:	fb03 f302 	mul.w	r3, r3, r2
 8011cb6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011cb8:	e019      	b.n	8011cee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6979      	ldr	r1, [r7, #20]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7ff fca3 	bl	801160a <get_fat>
 8011cc4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ccc:	d101      	bne.n	8011cd2 <dir_sdi+0x90>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	e03c      	b.n	8011d4c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d904      	bls.n	8011ce2 <dir_sdi+0xa0>
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	69db      	ldr	r3, [r3, #28]
 8011cdc:	697a      	ldr	r2, [r7, #20]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d301      	bcc.n	8011ce6 <dir_sdi+0xa4>
 8011ce2:	2302      	movs	r3, #2
 8011ce4:	e032      	b.n	8011d4c <dir_sdi+0x10a>
			ofs -= csz;
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011cee:	683a      	ldr	r2, [r7, #0]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d2e1      	bcs.n	8011cba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011cf6:	6979      	ldr	r1, [r7, #20]
 8011cf8:	6938      	ldr	r0, [r7, #16]
 8011cfa:	f7ff fc67 	bl	80115cc <clust2sect>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	69db      	ldr	r3, [r3, #28]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d101      	bne.n	8011d16 <dir_sdi+0xd4>
 8011d12:	2302      	movs	r3, #2
 8011d14:	e01a      	b.n	8011d4c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	69da      	ldr	r2, [r3, #28]
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	899b      	ldrh	r3, [r3, #12]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d26:	441a      	add	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	899b      	ldrh	r3, [r3, #12]
 8011d36:	461a      	mov	r2, r3
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d3e:	fb02 f200 	mul.w	r2, r2, r0
 8011d42:	1a9b      	subs	r3, r3, r2
 8011d44:	18ca      	adds	r2, r1, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3718      	adds	r7, #24
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b086      	sub	sp, #24
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	695b      	ldr	r3, [r3, #20]
 8011d68:	3320      	adds	r3, #32
 8011d6a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	69db      	ldr	r3, [r3, #28]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d003      	beq.n	8011d7c <dir_next+0x28>
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011d7a:	d301      	bcc.n	8011d80 <dir_next+0x2c>
 8011d7c:	2304      	movs	r3, #4
 8011d7e:	e0bb      	b.n	8011ef8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	461a      	mov	r2, r3
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d8c:	fb02 f201 	mul.w	r2, r2, r1
 8011d90:	1a9b      	subs	r3, r3, r2
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f040 809d 	bne.w	8011ed2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	69db      	ldr	r3, [r3, #28]
 8011d9c:	1c5a      	adds	r2, r3, #1
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	699b      	ldr	r3, [r3, #24]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10b      	bne.n	8011dc2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	095b      	lsrs	r3, r3, #5
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	8912      	ldrh	r2, [r2, #8]
 8011db2:	4293      	cmp	r3, r2
 8011db4:	f0c0 808d 	bcc.w	8011ed2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	61da      	str	r2, [r3, #28]
 8011dbe:	2304      	movs	r3, #4
 8011dc0:	e09a      	b.n	8011ef8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	899b      	ldrh	r3, [r3, #12]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8011dce:	68fa      	ldr	r2, [r7, #12]
 8011dd0:	8952      	ldrh	r2, [r2, #10]
 8011dd2:	3a01      	subs	r2, #1
 8011dd4:	4013      	ands	r3, r2
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d17b      	bne.n	8011ed2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	699b      	ldr	r3, [r3, #24]
 8011de0:	4619      	mov	r1, r3
 8011de2:	4610      	mov	r0, r2
 8011de4:	f7ff fc11 	bl	801160a <get_fat>
 8011de8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d801      	bhi.n	8011df4 <dir_next+0xa0>
 8011df0:	2302      	movs	r3, #2
 8011df2:	e081      	b.n	8011ef8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfa:	d101      	bne.n	8011e00 <dir_next+0xac>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e07b      	b.n	8011ef8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	69db      	ldr	r3, [r3, #28]
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d359      	bcc.n	8011ebe <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d104      	bne.n	8011e1a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	61da      	str	r2, [r3, #28]
 8011e16:	2304      	movs	r3, #4
 8011e18:	e06e      	b.n	8011ef8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	699b      	ldr	r3, [r3, #24]
 8011e20:	4619      	mov	r1, r3
 8011e22:	4610      	mov	r0, r2
 8011e24:	f7ff fe3d 	bl	8011aa2 <create_chain>
 8011e28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d101      	bne.n	8011e34 <dir_next+0xe0>
 8011e30:	2307      	movs	r3, #7
 8011e32:	e061      	b.n	8011ef8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d101      	bne.n	8011e3e <dir_next+0xea>
 8011e3a:	2302      	movs	r3, #2
 8011e3c:	e05c      	b.n	8011ef8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e44:	d101      	bne.n	8011e4a <dir_next+0xf6>
 8011e46:	2301      	movs	r3, #1
 8011e48:	e056      	b.n	8011ef8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7ff fadc 	bl	8011408 <sync_window>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d001      	beq.n	8011e5a <dir_next+0x106>
 8011e56:	2301      	movs	r3, #1
 8011e58:	e04e      	b.n	8011ef8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	899b      	ldrh	r3, [r3, #12]
 8011e64:	461a      	mov	r2, r3
 8011e66:	2100      	movs	r1, #0
 8011e68:	f7ff f905 	bl	8011076 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	613b      	str	r3, [r7, #16]
 8011e70:	6979      	ldr	r1, [r7, #20]
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f7ff fbaa 	bl	80115cc <clust2sect>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8011e7e:	e012      	b.n	8011ea6 <dir_next+0x152>
						fs->wflag = 1;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2201      	movs	r2, #1
 8011e84:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f7ff fabe 	bl	8011408 <sync_window>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d001      	beq.n	8011e96 <dir_next+0x142>
 8011e92:	2301      	movs	r3, #1
 8011e94:	e030      	b.n	8011ef8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	3301      	adds	r3, #1
 8011e9a:	613b      	str	r3, [r7, #16]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ea0:	1c5a      	adds	r2, r3, #1
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	895b      	ldrh	r3, [r3, #10]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d3e6      	bcc.n	8011e80 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	1ad2      	subs	r2, r2, r3
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	697a      	ldr	r2, [r7, #20]
 8011ec2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011ec4:	6979      	ldr	r1, [r7, #20]
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	f7ff fb80 	bl	80115cc <clust2sect>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	68ba      	ldr	r2, [r7, #8]
 8011ed6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	899b      	ldrh	r3, [r3, #12]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eea:	fb02 f200 	mul.w	r2, r2, r0
 8011eee:	1a9b      	subs	r3, r3, r2
 8011ef0:	18ca      	adds	r2, r1, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3718      	adds	r7, #24
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011f10:	2100      	movs	r1, #0
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7ff fe95 	bl	8011c42 <dir_sdi>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f1c:	7dfb      	ldrb	r3, [r7, #23]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d12b      	bne.n	8011f7a <dir_alloc+0x7a>
		n = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	69db      	ldr	r3, [r3, #28]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f7ff faaf 	bl	8011490 <move_window>
 8011f32:	4603      	mov	r3, r0
 8011f34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f36:	7dfb      	ldrb	r3, [r7, #23]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d11d      	bne.n	8011f78 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6a1b      	ldr	r3, [r3, #32]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	2be5      	cmp	r3, #229	; 0xe5
 8011f44:	d004      	beq.n	8011f50 <dir_alloc+0x50>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6a1b      	ldr	r3, [r3, #32]
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d107      	bne.n	8011f60 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	3301      	adds	r3, #1
 8011f54:	613b      	str	r3, [r7, #16]
 8011f56:	693a      	ldr	r2, [r7, #16]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d102      	bne.n	8011f64 <dir_alloc+0x64>
 8011f5e:	e00c      	b.n	8011f7a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011f60:	2300      	movs	r3, #0
 8011f62:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011f64:	2101      	movs	r1, #1
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7ff fef4 	bl	8011d54 <dir_next>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011f70:	7dfb      	ldrb	r3, [r7, #23]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d0d7      	beq.n	8011f26 <dir_alloc+0x26>
 8011f76:	e000      	b.n	8011f7a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011f78:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	d101      	bne.n	8011f84 <dir_alloc+0x84>
 8011f80:	2307      	movs	r3, #7
 8011f82:	75fb      	strb	r3, [r7, #23]
	return res;
 8011f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3718      	adds	r7, #24
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b084      	sub	sp, #16
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
 8011f96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	331a      	adds	r3, #26
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fe ffc7 	bl	8010f30 <ld_word>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	2b03      	cmp	r3, #3
 8011fac:	d109      	bne.n	8011fc2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	3314      	adds	r3, #20
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fe ffbc 	bl	8010f30 <ld_word>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	041b      	lsls	r3, r3, #16
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3710      	adds	r7, #16
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	331a      	adds	r3, #26
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	b292      	uxth	r2, r2
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fe ffdf 	bl	8010fa6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b03      	cmp	r3, #3
 8011fee:	d109      	bne.n	8012004 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	f103 0214 	add.w	r2, r3, #20
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	0c1b      	lsrs	r3, r3, #16
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	4610      	mov	r0, r2
 8012000:	f7fe ffd1 	bl	8010fa6 <st_word>
	}
}
 8012004:	bf00      	nop
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b086      	sub	sp, #24
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012016:	2304      	movs	r3, #4
 8012018:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012020:	e03c      	b.n	801209c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	69db      	ldr	r3, [r3, #28]
 8012026:	4619      	mov	r1, r3
 8012028:	6938      	ldr	r0, [r7, #16]
 801202a:	f7ff fa31 	bl	8011490 <move_window>
 801202e:	4603      	mov	r3, r0
 8012030:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012032:	7dfb      	ldrb	r3, [r7, #23]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d136      	bne.n	80120a6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a1b      	ldr	r3, [r3, #32]
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012040:	7bfb      	ldrb	r3, [r7, #15]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d102      	bne.n	801204c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012046:	2304      	movs	r3, #4
 8012048:	75fb      	strb	r3, [r7, #23]
 801204a:	e031      	b.n	80120b0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6a1b      	ldr	r3, [r3, #32]
 8012050:	330b      	adds	r3, #11
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012058:	73bb      	strb	r3, [r7, #14]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	7bba      	ldrb	r2, [r7, #14]
 801205e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012060:	7bfb      	ldrb	r3, [r7, #15]
 8012062:	2be5      	cmp	r3, #229	; 0xe5
 8012064:	d011      	beq.n	801208a <dir_read+0x7e>
 8012066:	7bfb      	ldrb	r3, [r7, #15]
 8012068:	2b2e      	cmp	r3, #46	; 0x2e
 801206a:	d00e      	beq.n	801208a <dir_read+0x7e>
 801206c:	7bbb      	ldrb	r3, [r7, #14]
 801206e:	2b0f      	cmp	r3, #15
 8012070:	d00b      	beq.n	801208a <dir_read+0x7e>
 8012072:	7bbb      	ldrb	r3, [r7, #14]
 8012074:	f023 0320 	bic.w	r3, r3, #32
 8012078:	2b08      	cmp	r3, #8
 801207a:	bf0c      	ite	eq
 801207c:	2301      	moveq	r3, #1
 801207e:	2300      	movne	r3, #0
 8012080:	b2db      	uxtb	r3, r3
 8012082:	461a      	mov	r2, r3
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	4293      	cmp	r3, r2
 8012088:	d00f      	beq.n	80120aa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801208a:	2100      	movs	r1, #0
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f7ff fe61 	bl	8011d54 <dir_next>
 8012092:	4603      	mov	r3, r0
 8012094:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012096:	7dfb      	ldrb	r3, [r7, #23]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d108      	bne.n	80120ae <dir_read+0xa2>
	while (dp->sect) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	69db      	ldr	r3, [r3, #28]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d1be      	bne.n	8012022 <dir_read+0x16>
 80120a4:	e004      	b.n	80120b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80120a6:	bf00      	nop
 80120a8:	e002      	b.n	80120b0 <dir_read+0xa4>
				break;
 80120aa:	bf00      	nop
 80120ac:	e000      	b.n	80120b0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80120ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80120b0:	7dfb      	ldrb	r3, [r7, #23]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d002      	beq.n	80120bc <dir_read+0xb0>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	61da      	str	r2, [r3, #28]
	return res;
 80120bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3718      	adds	r7, #24
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b086      	sub	sp, #24
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80120d4:	2100      	movs	r1, #0
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ff fdb3 	bl	8011c42 <dir_sdi>
 80120dc:	4603      	mov	r3, r0
 80120de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <dir_find+0x24>
 80120e6:	7dfb      	ldrb	r3, [r7, #23]
 80120e8:	e03e      	b.n	8012168 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	69db      	ldr	r3, [r3, #28]
 80120ee:	4619      	mov	r1, r3
 80120f0:	6938      	ldr	r0, [r7, #16]
 80120f2:	f7ff f9cd 	bl	8011490 <move_window>
 80120f6:	4603      	mov	r3, r0
 80120f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d12f      	bne.n	8012160 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a1b      	ldr	r3, [r3, #32]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012108:	7bfb      	ldrb	r3, [r7, #15]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d102      	bne.n	8012114 <dir_find+0x4e>
 801210e:	2304      	movs	r3, #4
 8012110:	75fb      	strb	r3, [r7, #23]
 8012112:	e028      	b.n	8012166 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6a1b      	ldr	r3, [r3, #32]
 8012118:	330b      	adds	r3, #11
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012120:	b2da      	uxtb	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6a1b      	ldr	r3, [r3, #32]
 801212a:	330b      	adds	r3, #11
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	f003 0308 	and.w	r3, r3, #8
 8012132:	2b00      	cmp	r3, #0
 8012134:	d10a      	bne.n	801214c <dir_find+0x86>
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6a18      	ldr	r0, [r3, #32]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	3324      	adds	r3, #36	; 0x24
 801213e:	220b      	movs	r2, #11
 8012140:	4619      	mov	r1, r3
 8012142:	f7fe ffb2 	bl	80110aa <mem_cmp>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00b      	beq.n	8012164 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801214c:	2100      	movs	r1, #0
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff fe00 	bl	8011d54 <dir_next>
 8012154:	4603      	mov	r3, r0
 8012156:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012158:	7dfb      	ldrb	r3, [r7, #23]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d0c5      	beq.n	80120ea <dir_find+0x24>
 801215e:	e002      	b.n	8012166 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012160:	bf00      	nop
 8012162:	e000      	b.n	8012166 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012164:	bf00      	nop

	return res;
 8012166:	7dfb      	ldrb	r3, [r7, #23]
}
 8012168:	4618      	mov	r0, r3
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801217e:	2101      	movs	r1, #1
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7ff febd 	bl	8011f00 <dir_alloc>
 8012186:	4603      	mov	r3, r0
 8012188:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801218a:	7bfb      	ldrb	r3, [r7, #15]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d11c      	bne.n	80121ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	69db      	ldr	r3, [r3, #28]
 8012194:	4619      	mov	r1, r3
 8012196:	68b8      	ldr	r0, [r7, #8]
 8012198:	f7ff f97a 	bl	8011490 <move_window>
 801219c:	4603      	mov	r3, r0
 801219e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d111      	bne.n	80121ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a1b      	ldr	r3, [r3, #32]
 80121aa:	2220      	movs	r2, #32
 80121ac:	2100      	movs	r1, #0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fe ff61 	bl	8011076 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a18      	ldr	r0, [r3, #32]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3324      	adds	r3, #36	; 0x24
 80121bc:	220b      	movs	r2, #11
 80121be:	4619      	mov	r1, r3
 80121c0:	f7fe ff38 	bl	8011034 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	2201      	movs	r2, #1
 80121c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	69db      	ldr	r3, [r3, #28]
 80121e6:	4619      	mov	r1, r3
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7ff f951 	bl	8011490 <move_window>
 80121ee:	4603      	mov	r3, r0
 80121f0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80121f2:	7afb      	ldrb	r3, [r7, #11]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d106      	bne.n	8012206 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6a1b      	ldr	r3, [r3, #32]
 80121fc:	22e5      	movs	r2, #229	; 0xe5
 80121fe:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2201      	movs	r2, #1
 8012204:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012206:	7afb      	ldrb	r3, [r7, #11]
}
 8012208:	4618      	mov	r0, r3
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b088      	sub	sp, #32
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	60fb      	str	r3, [r7, #12]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	3324      	adds	r3, #36	; 0x24
 8012224:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012226:	220b      	movs	r2, #11
 8012228:	2120      	movs	r1, #32
 801222a:	68b8      	ldr	r0, [r7, #8]
 801222c:	f7fe ff23 	bl	8011076 <mem_set>
	si = i = 0; ni = 8;
 8012230:	2300      	movs	r3, #0
 8012232:	613b      	str	r3, [r7, #16]
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	617b      	str	r3, [r7, #20]
 8012238:	2308      	movs	r3, #8
 801223a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801223c:	68fa      	ldr	r2, [r7, #12]
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	4413      	add	r3, r2
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	2b2e      	cmp	r3, #46	; 0x2e
 8012246:	d12f      	bne.n	80122a8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	1c5a      	adds	r2, r3, #1
 801224c:	617a      	str	r2, [r7, #20]
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	4413      	add	r3, r2
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012256:	7ffb      	ldrb	r3, [r7, #31]
 8012258:	2b2e      	cmp	r3, #46	; 0x2e
 801225a:	d10a      	bne.n	8012272 <create_name+0x62>
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	2b02      	cmp	r3, #2
 8012260:	d807      	bhi.n	8012272 <create_name+0x62>
			sfn[i++] = c;
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	1c5a      	adds	r2, r3, #1
 8012266:	613a      	str	r2, [r7, #16]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	4413      	add	r3, r2
 801226c:	7ffa      	ldrb	r2, [r7, #31]
 801226e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012270:	e7ea      	b.n	8012248 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012272:	7ffb      	ldrb	r3, [r7, #31]
 8012274:	2b2f      	cmp	r3, #47	; 0x2f
 8012276:	d007      	beq.n	8012288 <create_name+0x78>
 8012278:	7ffb      	ldrb	r3, [r7, #31]
 801227a:	2b5c      	cmp	r3, #92	; 0x5c
 801227c:	d004      	beq.n	8012288 <create_name+0x78>
 801227e:	7ffb      	ldrb	r3, [r7, #31]
 8012280:	2b20      	cmp	r3, #32
 8012282:	d901      	bls.n	8012288 <create_name+0x78>
 8012284:	2306      	movs	r3, #6
 8012286:	e084      	b.n	8012392 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012288:	68fa      	ldr	r2, [r7, #12]
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	441a      	add	r2, r3
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012292:	7ffb      	ldrb	r3, [r7, #31]
 8012294:	2b20      	cmp	r3, #32
 8012296:	d801      	bhi.n	801229c <create_name+0x8c>
 8012298:	2224      	movs	r2, #36	; 0x24
 801229a:	e000      	b.n	801229e <create_name+0x8e>
 801229c:	2220      	movs	r2, #32
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	330b      	adds	r3, #11
 80122a2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80122a4:	2300      	movs	r3, #0
 80122a6:	e074      	b.n	8012392 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	1c5a      	adds	r2, r3, #1
 80122ac:	617a      	str	r2, [r7, #20]
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	4413      	add	r3, r2
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80122b6:	7ffb      	ldrb	r3, [r7, #31]
 80122b8:	2b20      	cmp	r3, #32
 80122ba:	d94e      	bls.n	801235a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80122bc:	7ffb      	ldrb	r3, [r7, #31]
 80122be:	2b2f      	cmp	r3, #47	; 0x2f
 80122c0:	d006      	beq.n	80122d0 <create_name+0xc0>
 80122c2:	7ffb      	ldrb	r3, [r7, #31]
 80122c4:	2b5c      	cmp	r3, #92	; 0x5c
 80122c6:	d110      	bne.n	80122ea <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80122c8:	e002      	b.n	80122d0 <create_name+0xc0>
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	3301      	adds	r3, #1
 80122ce:	617b      	str	r3, [r7, #20]
 80122d0:	68fa      	ldr	r2, [r7, #12]
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	4413      	add	r3, r2
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	2b2f      	cmp	r3, #47	; 0x2f
 80122da:	d0f6      	beq.n	80122ca <create_name+0xba>
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	4413      	add	r3, r2
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	2b5c      	cmp	r3, #92	; 0x5c
 80122e6:	d0f0      	beq.n	80122ca <create_name+0xba>
			break;
 80122e8:	e038      	b.n	801235c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80122ea:	7ffb      	ldrb	r3, [r7, #31]
 80122ec:	2b2e      	cmp	r3, #46	; 0x2e
 80122ee:	d003      	beq.n	80122f8 <create_name+0xe8>
 80122f0:	693a      	ldr	r2, [r7, #16]
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d30c      	bcc.n	8012312 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	2b0b      	cmp	r3, #11
 80122fc:	d002      	beq.n	8012304 <create_name+0xf4>
 80122fe:	7ffb      	ldrb	r3, [r7, #31]
 8012300:	2b2e      	cmp	r3, #46	; 0x2e
 8012302:	d001      	beq.n	8012308 <create_name+0xf8>
 8012304:	2306      	movs	r3, #6
 8012306:	e044      	b.n	8012392 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012308:	2308      	movs	r3, #8
 801230a:	613b      	str	r3, [r7, #16]
 801230c:	230b      	movs	r3, #11
 801230e:	61bb      	str	r3, [r7, #24]
			continue;
 8012310:	e022      	b.n	8012358 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012312:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012316:	2b00      	cmp	r3, #0
 8012318:	da04      	bge.n	8012324 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801231a:	7ffb      	ldrb	r3, [r7, #31]
 801231c:	3b80      	subs	r3, #128	; 0x80
 801231e:	4a1f      	ldr	r2, [pc, #124]	; (801239c <create_name+0x18c>)
 8012320:	5cd3      	ldrb	r3, [r2, r3]
 8012322:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012324:	7ffb      	ldrb	r3, [r7, #31]
 8012326:	4619      	mov	r1, r3
 8012328:	481d      	ldr	r0, [pc, #116]	; (80123a0 <create_name+0x190>)
 801232a:	f7fe fee5 	bl	80110f8 <chk_chr>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d001      	beq.n	8012338 <create_name+0x128>
 8012334:	2306      	movs	r3, #6
 8012336:	e02c      	b.n	8012392 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012338:	7ffb      	ldrb	r3, [r7, #31]
 801233a:	2b60      	cmp	r3, #96	; 0x60
 801233c:	d905      	bls.n	801234a <create_name+0x13a>
 801233e:	7ffb      	ldrb	r3, [r7, #31]
 8012340:	2b7a      	cmp	r3, #122	; 0x7a
 8012342:	d802      	bhi.n	801234a <create_name+0x13a>
 8012344:	7ffb      	ldrb	r3, [r7, #31]
 8012346:	3b20      	subs	r3, #32
 8012348:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	1c5a      	adds	r2, r3, #1
 801234e:	613a      	str	r2, [r7, #16]
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	4413      	add	r3, r2
 8012354:	7ffa      	ldrb	r2, [r7, #31]
 8012356:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012358:	e7a6      	b.n	80122a8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801235a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	441a      	add	r2, r3
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <create_name+0x160>
 801236c:	2306      	movs	r3, #6
 801236e:	e010      	b.n	8012392 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	2be5      	cmp	r3, #229	; 0xe5
 8012376:	d102      	bne.n	801237e <create_name+0x16e>
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2205      	movs	r2, #5
 801237c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801237e:	7ffb      	ldrb	r3, [r7, #31]
 8012380:	2b20      	cmp	r3, #32
 8012382:	d801      	bhi.n	8012388 <create_name+0x178>
 8012384:	2204      	movs	r2, #4
 8012386:	e000      	b.n	801238a <create_name+0x17a>
 8012388:	2200      	movs	r2, #0
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	330b      	adds	r3, #11
 801238e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012390:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012392:	4618      	mov	r0, r3
 8012394:	3720      	adds	r7, #32
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	080199ec 	.word	0x080199ec
 80123a0:	0801999c 	.word	0x0801999c

080123a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b086      	sub	sp, #24
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	2b2f      	cmp	r3, #47	; 0x2f
 80123be:	d00b      	beq.n	80123d8 <follow_path+0x34>
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b5c      	cmp	r3, #92	; 0x5c
 80123c6:	d007      	beq.n	80123d8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	699a      	ldr	r2, [r3, #24]
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	609a      	str	r2, [r3, #8]
 80123d0:	e00d      	b.n	80123ee <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	3301      	adds	r3, #1
 80123d6:	603b      	str	r3, [r7, #0]
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b2f      	cmp	r3, #47	; 0x2f
 80123de:	d0f8      	beq.n	80123d2 <follow_path+0x2e>
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	2b5c      	cmp	r3, #92	; 0x5c
 80123e6:	d0f4      	beq.n	80123d2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	2200      	movs	r2, #0
 80123ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	2b1f      	cmp	r3, #31
 80123f4:	d80a      	bhi.n	801240c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2280      	movs	r2, #128	; 0x80
 80123fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80123fe:	2100      	movs	r1, #0
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f7ff fc1e 	bl	8011c42 <dir_sdi>
 8012406:	4603      	mov	r3, r0
 8012408:	75fb      	strb	r3, [r7, #23]
 801240a:	e05b      	b.n	80124c4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801240c:	463b      	mov	r3, r7
 801240e:	4619      	mov	r1, r3
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7ff fefd 	bl	8012210 <create_name>
 8012416:	4603      	mov	r3, r0
 8012418:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801241a:	7dfb      	ldrb	r3, [r7, #23]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d14c      	bne.n	80124ba <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f7ff fe50 	bl	80120c6 <dir_find>
 8012426:	4603      	mov	r3, r0
 8012428:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012430:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012432:	7dfb      	ldrb	r3, [r7, #23]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d01b      	beq.n	8012470 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012438:	7dfb      	ldrb	r3, [r7, #23]
 801243a:	2b04      	cmp	r3, #4
 801243c:	d13f      	bne.n	80124be <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801243e:	7afb      	ldrb	r3, [r7, #11]
 8012440:	f003 0320 	and.w	r3, r3, #32
 8012444:	2b00      	cmp	r3, #0
 8012446:	d00b      	beq.n	8012460 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012448:	7afb      	ldrb	r3, [r7, #11]
 801244a:	f003 0304 	and.w	r3, r3, #4
 801244e:	2b00      	cmp	r3, #0
 8012450:	d031      	beq.n	80124b6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2280      	movs	r2, #128	; 0x80
 8012456:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801245a:	2300      	movs	r3, #0
 801245c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801245e:	e02e      	b.n	80124be <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012460:	7afb      	ldrb	r3, [r7, #11]
 8012462:	f003 0304 	and.w	r3, r3, #4
 8012466:	2b00      	cmp	r3, #0
 8012468:	d129      	bne.n	80124be <follow_path+0x11a>
 801246a:	2305      	movs	r3, #5
 801246c:	75fb      	strb	r3, [r7, #23]
				break;
 801246e:	e026      	b.n	80124be <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012470:	7afb      	ldrb	r3, [r7, #11]
 8012472:	f003 0304 	and.w	r3, r3, #4
 8012476:	2b00      	cmp	r3, #0
 8012478:	d123      	bne.n	80124c2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	799b      	ldrb	r3, [r3, #6]
 801247e:	f003 0310 	and.w	r3, r3, #16
 8012482:	2b00      	cmp	r3, #0
 8012484:	d102      	bne.n	801248c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012486:	2305      	movs	r3, #5
 8012488:	75fb      	strb	r3, [r7, #23]
 801248a:	e01b      	b.n	80124c4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	695b      	ldr	r3, [r3, #20]
 8012496:	68fa      	ldr	r2, [r7, #12]
 8012498:	8992      	ldrh	r2, [r2, #12]
 801249a:	fbb3 f0f2 	udiv	r0, r3, r2
 801249e:	fb02 f200 	mul.w	r2, r2, r0
 80124a2:	1a9b      	subs	r3, r3, r2
 80124a4:	440b      	add	r3, r1
 80124a6:	4619      	mov	r1, r3
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	f7ff fd70 	bl	8011f8e <ld_clust>
 80124ae:	4602      	mov	r2, r0
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	609a      	str	r2, [r3, #8]
 80124b4:	e7aa      	b.n	801240c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80124b6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124b8:	e7a8      	b.n	801240c <follow_path+0x68>
			if (res != FR_OK) break;
 80124ba:	bf00      	nop
 80124bc:	e002      	b.n	80124c4 <follow_path+0x120>
				break;
 80124be:	bf00      	nop
 80124c0:	e000      	b.n	80124c4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124c2:	bf00      	nop
			}
		}
	}

	return res;
 80124c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3718      	adds	r7, #24
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80124ce:	b480      	push	{r7}
 80124d0:	b087      	sub	sp, #28
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80124d6:	f04f 33ff 	mov.w	r3, #4294967295
 80124da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d031      	beq.n	8012548 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	617b      	str	r3, [r7, #20]
 80124ea:	e002      	b.n	80124f2 <get_ldnumber+0x24>
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	3301      	adds	r3, #1
 80124f0:	617b      	str	r3, [r7, #20]
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	2b20      	cmp	r3, #32
 80124f8:	d903      	bls.n	8012502 <get_ldnumber+0x34>
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	2b3a      	cmp	r3, #58	; 0x3a
 8012500:	d1f4      	bne.n	80124ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	2b3a      	cmp	r3, #58	; 0x3a
 8012508:	d11c      	bne.n	8012544 <get_ldnumber+0x76>
			tp = *path;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	1c5a      	adds	r2, r3, #1
 8012514:	60fa      	str	r2, [r7, #12]
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	3b30      	subs	r3, #48	; 0x30
 801251a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	2b09      	cmp	r3, #9
 8012520:	d80e      	bhi.n	8012540 <get_ldnumber+0x72>
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	429a      	cmp	r2, r3
 8012528:	d10a      	bne.n	8012540 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d107      	bne.n	8012540 <get_ldnumber+0x72>
					vol = (int)i;
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	3301      	adds	r3, #1
 8012538:	617b      	str	r3, [r7, #20]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	697a      	ldr	r2, [r7, #20]
 801253e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	e002      	b.n	801254a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012544:	2300      	movs	r3, #0
 8012546:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012548:	693b      	ldr	r3, [r7, #16]
}
 801254a:	4618      	mov	r0, r3
 801254c:	371c      	adds	r7, #28
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr
	...

08012558 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2200      	movs	r2, #0
 8012566:	70da      	strb	r2, [r3, #3]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f04f 32ff 	mov.w	r2, #4294967295
 801256e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012570:	6839      	ldr	r1, [r7, #0]
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7fe ff8c 	bl	8011490 <move_window>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d001      	beq.n	8012582 <check_fs+0x2a>
 801257e:	2304      	movs	r3, #4
 8012580:	e038      	b.n	80125f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	3338      	adds	r3, #56	; 0x38
 8012586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe fcd0 	bl	8010f30 <ld_word>
 8012590:	4603      	mov	r3, r0
 8012592:	461a      	mov	r2, r3
 8012594:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012598:	429a      	cmp	r2, r3
 801259a:	d001      	beq.n	80125a0 <check_fs+0x48>
 801259c:	2303      	movs	r3, #3
 801259e:	e029      	b.n	80125f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125a6:	2be9      	cmp	r3, #233	; 0xe9
 80125a8:	d009      	beq.n	80125be <check_fs+0x66>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125b0:	2beb      	cmp	r3, #235	; 0xeb
 80125b2:	d11e      	bne.n	80125f2 <check_fs+0x9a>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80125ba:	2b90      	cmp	r3, #144	; 0x90
 80125bc:	d119      	bne.n	80125f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	3338      	adds	r3, #56	; 0x38
 80125c2:	3336      	adds	r3, #54	; 0x36
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fe fccb 	bl	8010f60 <ld_dword>
 80125ca:	4603      	mov	r3, r0
 80125cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80125d0:	4a0a      	ldr	r2, [pc, #40]	; (80125fc <check_fs+0xa4>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d101      	bne.n	80125da <check_fs+0x82>
 80125d6:	2300      	movs	r3, #0
 80125d8:	e00c      	b.n	80125f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	3338      	adds	r3, #56	; 0x38
 80125de:	3352      	adds	r3, #82	; 0x52
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fe fcbd 	bl	8010f60 <ld_dword>
 80125e6:	4602      	mov	r2, r0
 80125e8:	4b05      	ldr	r3, [pc, #20]	; (8012600 <check_fs+0xa8>)
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d101      	bne.n	80125f2 <check_fs+0x9a>
 80125ee:	2300      	movs	r3, #0
 80125f0:	e000      	b.n	80125f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80125f2:	2302      	movs	r3, #2
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	00544146 	.word	0x00544146
 8012600:	33544146 	.word	0x33544146

08012604 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b096      	sub	sp, #88	; 0x58
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	4613      	mov	r3, r2
 8012610:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	2200      	movs	r2, #0
 8012616:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012618:	68f8      	ldr	r0, [r7, #12]
 801261a:	f7ff ff58 	bl	80124ce <get_ldnumber>
 801261e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012622:	2b00      	cmp	r3, #0
 8012624:	da01      	bge.n	801262a <find_volume+0x26>
 8012626:	230b      	movs	r3, #11
 8012628:	e268      	b.n	8012afc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801262a:	4ab0      	ldr	r2, [pc, #704]	; (80128ec <find_volume+0x2e8>)
 801262c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012632:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012636:	2b00      	cmp	r3, #0
 8012638:	d101      	bne.n	801263e <find_volume+0x3a>
 801263a:	230c      	movs	r3, #12
 801263c:	e25e      	b.n	8012afc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012642:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012644:	79fb      	ldrb	r3, [r7, #7]
 8012646:	f023 0301 	bic.w	r3, r3, #1
 801264a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d01a      	beq.n	801268a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012656:	785b      	ldrb	r3, [r3, #1]
 8012658:	4618      	mov	r0, r3
 801265a:	f7fe fbcb 	bl	8010df4 <disk_status>
 801265e:	4603      	mov	r3, r0
 8012660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012668:	f003 0301 	and.w	r3, r3, #1
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10c      	bne.n	801268a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012670:	79fb      	ldrb	r3, [r7, #7]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d007      	beq.n	8012686 <find_volume+0x82>
 8012676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801267a:	f003 0304 	and.w	r3, r3, #4
 801267e:	2b00      	cmp	r3, #0
 8012680:	d001      	beq.n	8012686 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012682:	230a      	movs	r3, #10
 8012684:	e23a      	b.n	8012afc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012686:	2300      	movs	r3, #0
 8012688:	e238      	b.n	8012afc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268c:	2200      	movs	r2, #0
 801268e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012692:	b2da      	uxtb	r2, r3
 8012694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012696:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	785b      	ldrb	r3, [r3, #1]
 801269c:	4618      	mov	r0, r3
 801269e:	f7fe fbc3 	bl	8010e28 <disk_initialize>
 80126a2:	4603      	mov	r3, r0
 80126a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80126a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126ac:	f003 0301 	and.w	r3, r3, #1
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d001      	beq.n	80126b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80126b4:	2303      	movs	r3, #3
 80126b6:	e221      	b.n	8012afc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80126b8:	79fb      	ldrb	r3, [r7, #7]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d007      	beq.n	80126ce <find_volume+0xca>
 80126be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126c2:	f003 0304 	and.w	r3, r3, #4
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d001      	beq.n	80126ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80126ca:	230a      	movs	r3, #10
 80126cc:	e216      	b.n	8012afc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	7858      	ldrb	r0, [r3, #1]
 80126d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d4:	330c      	adds	r3, #12
 80126d6:	461a      	mov	r2, r3
 80126d8:	2102      	movs	r1, #2
 80126da:	f7fe fc0b 	bl	8010ef4 <disk_ioctl>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d001      	beq.n	80126e8 <find_volume+0xe4>
 80126e4:	2301      	movs	r3, #1
 80126e6:	e209      	b.n	8012afc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126f0:	d80d      	bhi.n	801270e <find_volume+0x10a>
 80126f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f4:	899b      	ldrh	r3, [r3, #12]
 80126f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126fa:	d308      	bcc.n	801270e <find_volume+0x10a>
 80126fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fe:	899b      	ldrh	r3, [r3, #12]
 8012700:	461a      	mov	r2, r3
 8012702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012704:	899b      	ldrh	r3, [r3, #12]
 8012706:	3b01      	subs	r3, #1
 8012708:	4013      	ands	r3, r2
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <find_volume+0x10e>
 801270e:	2301      	movs	r3, #1
 8012710:	e1f4      	b.n	8012afc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801271a:	f7ff ff1d 	bl	8012558 <check_fs>
 801271e:	4603      	mov	r3, r0
 8012720:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012728:	2b02      	cmp	r3, #2
 801272a:	d14b      	bne.n	80127c4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801272c:	2300      	movs	r3, #0
 801272e:	643b      	str	r3, [r7, #64]	; 0x40
 8012730:	e01f      	b.n	8012772 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012734:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801273a:	011b      	lsls	r3, r3, #4
 801273c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012740:	4413      	add	r3, r2
 8012742:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012746:	3304      	adds	r3, #4
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d006      	beq.n	801275c <find_volume+0x158>
 801274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012750:	3308      	adds	r3, #8
 8012752:	4618      	mov	r0, r3
 8012754:	f7fe fc04 	bl	8010f60 <ld_dword>
 8012758:	4602      	mov	r2, r0
 801275a:	e000      	b.n	801275e <find_volume+0x15a>
 801275c:	2200      	movs	r2, #0
 801275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012766:	440b      	add	r3, r1
 8012768:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801276c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801276e:	3301      	adds	r3, #1
 8012770:	643b      	str	r3, [r7, #64]	; 0x40
 8012772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012774:	2b03      	cmp	r3, #3
 8012776:	d9dc      	bls.n	8012732 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012778:	2300      	movs	r3, #0
 801277a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801277c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801277e:	2b00      	cmp	r3, #0
 8012780:	d002      	beq.n	8012788 <find_volume+0x184>
 8012782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012784:	3b01      	subs	r3, #1
 8012786:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012790:	4413      	add	r3, r2
 8012792:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012796:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801279a:	2b00      	cmp	r3, #0
 801279c:	d005      	beq.n	80127aa <find_volume+0x1a6>
 801279e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127a2:	f7ff fed9 	bl	8012558 <check_fs>
 80127a6:	4603      	mov	r3, r0
 80127a8:	e000      	b.n	80127ac <find_volume+0x1a8>
 80127aa:	2303      	movs	r3, #3
 80127ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80127b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d905      	bls.n	80127c4 <find_volume+0x1c0>
 80127b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ba:	3301      	adds	r3, #1
 80127bc:	643b      	str	r3, [r7, #64]	; 0x40
 80127be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d9e1      	bls.n	8012788 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80127c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127c8:	2b04      	cmp	r3, #4
 80127ca:	d101      	bne.n	80127d0 <find_volume+0x1cc>
 80127cc:	2301      	movs	r3, #1
 80127ce:	e195      	b.n	8012afc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80127d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d901      	bls.n	80127dc <find_volume+0x1d8>
 80127d8:	230d      	movs	r3, #13
 80127da:	e18f      	b.n	8012afc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80127dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127de:	3338      	adds	r3, #56	; 0x38
 80127e0:	330b      	adds	r3, #11
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe fba4 	bl	8010f30 <ld_word>
 80127e8:	4603      	mov	r3, r0
 80127ea:	461a      	mov	r2, r3
 80127ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ee:	899b      	ldrh	r3, [r3, #12]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d001      	beq.n	80127f8 <find_volume+0x1f4>
 80127f4:	230d      	movs	r3, #13
 80127f6:	e181      	b.n	8012afc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	3338      	adds	r3, #56	; 0x38
 80127fc:	3316      	adds	r3, #22
 80127fe:	4618      	mov	r0, r3
 8012800:	f7fe fb96 	bl	8010f30 <ld_word>
 8012804:	4603      	mov	r3, r0
 8012806:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801280a:	2b00      	cmp	r3, #0
 801280c:	d106      	bne.n	801281c <find_volume+0x218>
 801280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012810:	3338      	adds	r3, #56	; 0x38
 8012812:	3324      	adds	r3, #36	; 0x24
 8012814:	4618      	mov	r0, r3
 8012816:	f7fe fba3 	bl	8010f60 <ld_dword>
 801281a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012820:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012824:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282e:	789b      	ldrb	r3, [r3, #2]
 8012830:	2b01      	cmp	r3, #1
 8012832:	d005      	beq.n	8012840 <find_volume+0x23c>
 8012834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012836:	789b      	ldrb	r3, [r3, #2]
 8012838:	2b02      	cmp	r3, #2
 801283a:	d001      	beq.n	8012840 <find_volume+0x23c>
 801283c:	230d      	movs	r3, #13
 801283e:	e15d      	b.n	8012afc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	789b      	ldrb	r3, [r3, #2]
 8012844:	461a      	mov	r2, r3
 8012846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012848:	fb02 f303 	mul.w	r3, r2, r3
 801284c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012854:	b29a      	uxth	r2, r3
 8012856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012858:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285c:	895b      	ldrh	r3, [r3, #10]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d008      	beq.n	8012874 <find_volume+0x270>
 8012862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012864:	895b      	ldrh	r3, [r3, #10]
 8012866:	461a      	mov	r2, r3
 8012868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286a:	895b      	ldrh	r3, [r3, #10]
 801286c:	3b01      	subs	r3, #1
 801286e:	4013      	ands	r3, r2
 8012870:	2b00      	cmp	r3, #0
 8012872:	d001      	beq.n	8012878 <find_volume+0x274>
 8012874:	230d      	movs	r3, #13
 8012876:	e141      	b.n	8012afc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	3338      	adds	r3, #56	; 0x38
 801287c:	3311      	adds	r3, #17
 801287e:	4618      	mov	r0, r3
 8012880:	f7fe fb56 	bl	8010f30 <ld_word>
 8012884:	4603      	mov	r3, r0
 8012886:	461a      	mov	r2, r3
 8012888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288e:	891b      	ldrh	r3, [r3, #8]
 8012890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012892:	8992      	ldrh	r2, [r2, #12]
 8012894:	0952      	lsrs	r2, r2, #5
 8012896:	b292      	uxth	r2, r2
 8012898:	fbb3 f1f2 	udiv	r1, r3, r2
 801289c:	fb02 f201 	mul.w	r2, r2, r1
 80128a0:	1a9b      	subs	r3, r3, r2
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d001      	beq.n	80128ac <find_volume+0x2a8>
 80128a8:	230d      	movs	r3, #13
 80128aa:	e127      	b.n	8012afc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80128ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ae:	3338      	adds	r3, #56	; 0x38
 80128b0:	3313      	adds	r3, #19
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7fe fb3c 	bl	8010f30 <ld_word>
 80128b8:	4603      	mov	r3, r0
 80128ba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80128bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d106      	bne.n	80128d0 <find_volume+0x2cc>
 80128c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c4:	3338      	adds	r3, #56	; 0x38
 80128c6:	3320      	adds	r3, #32
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7fe fb49 	bl	8010f60 <ld_dword>
 80128ce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80128d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d2:	3338      	adds	r3, #56	; 0x38
 80128d4:	330e      	adds	r3, #14
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fe fb2a 	bl	8010f30 <ld_word>
 80128dc:	4603      	mov	r3, r0
 80128de:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80128e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d104      	bne.n	80128f0 <find_volume+0x2ec>
 80128e6:	230d      	movs	r3, #13
 80128e8:	e108      	b.n	8012afc <find_volume+0x4f8>
 80128ea:	bf00      	nop
 80128ec:	200422b4 	.word	0x200422b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80128f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80128f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128f4:	4413      	add	r3, r2
 80128f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128f8:	8911      	ldrh	r1, [r2, #8]
 80128fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128fc:	8992      	ldrh	r2, [r2, #12]
 80128fe:	0952      	lsrs	r2, r2, #5
 8012900:	b292      	uxth	r2, r2
 8012902:	fbb1 f2f2 	udiv	r2, r1, r2
 8012906:	b292      	uxth	r2, r2
 8012908:	4413      	add	r3, r2
 801290a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801290c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012910:	429a      	cmp	r2, r3
 8012912:	d201      	bcs.n	8012918 <find_volume+0x314>
 8012914:	230d      	movs	r3, #13
 8012916:	e0f1      	b.n	8012afc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012920:	8952      	ldrh	r2, [r2, #10]
 8012922:	fbb3 f3f2 	udiv	r3, r3, r2
 8012926:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292a:	2b00      	cmp	r3, #0
 801292c:	d101      	bne.n	8012932 <find_volume+0x32e>
 801292e:	230d      	movs	r3, #13
 8012930:	e0e4      	b.n	8012afc <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012932:	2303      	movs	r3, #3
 8012934:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801293e:	4293      	cmp	r3, r2
 8012940:	d802      	bhi.n	8012948 <find_volume+0x344>
 8012942:	2302      	movs	r3, #2
 8012944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801294e:	4293      	cmp	r3, r2
 8012950:	d802      	bhi.n	8012958 <find_volume+0x354>
 8012952:	2301      	movs	r3, #1
 8012954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295a:	1c9a      	adds	r2, r3, #2
 801295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012962:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012964:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012966:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801296a:	441a      	add	r2, r3
 801296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	441a      	add	r2, r3
 8012976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012978:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801297a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801297e:	2b03      	cmp	r3, #3
 8012980:	d11e      	bne.n	80129c0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012984:	3338      	adds	r3, #56	; 0x38
 8012986:	332a      	adds	r3, #42	; 0x2a
 8012988:	4618      	mov	r0, r3
 801298a:	f7fe fad1 	bl	8010f30 <ld_word>
 801298e:	4603      	mov	r3, r0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d001      	beq.n	8012998 <find_volume+0x394>
 8012994:	230d      	movs	r3, #13
 8012996:	e0b1      	b.n	8012afc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299a:	891b      	ldrh	r3, [r3, #8]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <find_volume+0x3a0>
 80129a0:	230d      	movs	r3, #13
 80129a2:	e0ab      	b.n	8012afc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	3338      	adds	r3, #56	; 0x38
 80129a8:	332c      	adds	r3, #44	; 0x2c
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7fe fad8 	bl	8010f60 <ld_dword>
 80129b0:	4602      	mov	r2, r0
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80129b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b8:	69db      	ldr	r3, [r3, #28]
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	647b      	str	r3, [r7, #68]	; 0x44
 80129be:	e01f      	b.n	8012a00 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80129c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c2:	891b      	ldrh	r3, [r3, #8]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d101      	bne.n	80129cc <find_volume+0x3c8>
 80129c8:	230d      	movs	r3, #13
 80129ca:	e097      	b.n	8012afc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80129cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129d2:	441a      	add	r2, r3
 80129d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80129d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d103      	bne.n	80129e8 <find_volume+0x3e4>
 80129e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e2:	69db      	ldr	r3, [r3, #28]
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	e00a      	b.n	80129fe <find_volume+0x3fa>
 80129e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ea:	69da      	ldr	r2, [r3, #28]
 80129ec:	4613      	mov	r3, r2
 80129ee:	005b      	lsls	r3, r3, #1
 80129f0:	4413      	add	r3, r2
 80129f2:	085a      	lsrs	r2, r3, #1
 80129f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f6:	69db      	ldr	r3, [r3, #28]
 80129f8:	f003 0301 	and.w	r3, r3, #1
 80129fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80129fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a02:	6a1a      	ldr	r2, [r3, #32]
 8012a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a06:	899b      	ldrh	r3, [r3, #12]
 8012a08:	4619      	mov	r1, r3
 8012a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a0c:	440b      	add	r3, r1
 8012a0e:	3b01      	subs	r3, #1
 8012a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a12:	8989      	ldrh	r1, [r1, #12]
 8012a14:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d201      	bcs.n	8012a20 <find_volume+0x41c>
 8012a1c:	230d      	movs	r3, #13
 8012a1e:	e06d      	b.n	8012afc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a22:	f04f 32ff 	mov.w	r2, #4294967295
 8012a26:	615a      	str	r2, [r3, #20]
 8012a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2a:	695a      	ldr	r2, [r3, #20]
 8012a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a32:	2280      	movs	r2, #128	; 0x80
 8012a34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012a36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a3a:	2b03      	cmp	r3, #3
 8012a3c:	d149      	bne.n	8012ad2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a40:	3338      	adds	r3, #56	; 0x38
 8012a42:	3330      	adds	r3, #48	; 0x30
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7fe fa73 	bl	8010f30 <ld_word>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d140      	bne.n	8012ad2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a52:	3301      	adds	r3, #1
 8012a54:	4619      	mov	r1, r3
 8012a56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a58:	f7fe fd1a 	bl	8011490 <move_window>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d137      	bne.n	8012ad2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a64:	2200      	movs	r2, #0
 8012a66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6a:	3338      	adds	r3, #56	; 0x38
 8012a6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fe fa5d 	bl	8010f30 <ld_word>
 8012a76:	4603      	mov	r3, r0
 8012a78:	461a      	mov	r2, r3
 8012a7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d127      	bne.n	8012ad2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a84:	3338      	adds	r3, #56	; 0x38
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fe fa6a 	bl	8010f60 <ld_dword>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	4b1d      	ldr	r3, [pc, #116]	; (8012b04 <find_volume+0x500>)
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d11e      	bne.n	8012ad2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a96:	3338      	adds	r3, #56	; 0x38
 8012a98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fe fa5f 	bl	8010f60 <ld_dword>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	4b18      	ldr	r3, [pc, #96]	; (8012b08 <find_volume+0x504>)
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d113      	bne.n	8012ad2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aac:	3338      	adds	r3, #56	; 0x38
 8012aae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fe fa54 	bl	8010f60 <ld_dword>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac0:	3338      	adds	r3, #56	; 0x38
 8012ac2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fe fa4a 	bl	8010f60 <ld_dword>
 8012acc:	4602      	mov	r2, r0
 8012ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012ad8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012ada:	4b0c      	ldr	r3, [pc, #48]	; (8012b0c <find_volume+0x508>)
 8012adc:	881b      	ldrh	r3, [r3, #0]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	4b0a      	ldr	r3, [pc, #40]	; (8012b0c <find_volume+0x508>)
 8012ae4:	801a      	strh	r2, [r3, #0]
 8012ae6:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <find_volume+0x508>)
 8012ae8:	881a      	ldrh	r2, [r3, #0]
 8012aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aec:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af0:	2200      	movs	r2, #0
 8012af2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012af6:	f7fe fc63 	bl	80113c0 <clear_lock>
#endif
	return FR_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3758      	adds	r7, #88	; 0x58
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	41615252 	.word	0x41615252
 8012b08:	61417272 	.word	0x61417272
 8012b0c:	200422b8 	.word	0x200422b8

08012b10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012b1a:	2309      	movs	r3, #9
 8012b1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d01c      	beq.n	8012b5e <validate+0x4e>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d018      	beq.n	8012b5e <validate+0x4e>
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d013      	beq.n	8012b5e <validate+0x4e>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	889a      	ldrh	r2, [r3, #4]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	88db      	ldrh	r3, [r3, #6]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d10c      	bne.n	8012b5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	785b      	ldrb	r3, [r3, #1]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fe f952 	bl	8010df4 <disk_status>
 8012b50:	4603      	mov	r3, r0
 8012b52:	f003 0301 	and.w	r3, r3, #1
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d101      	bne.n	8012b5e <validate+0x4e>
			res = FR_OK;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012b5e:	7bfb      	ldrb	r3, [r7, #15]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d102      	bne.n	8012b6a <validate+0x5a>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	e000      	b.n	8012b6c <validate+0x5c>
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	683a      	ldr	r2, [r7, #0]
 8012b6e:	6013      	str	r3, [r2, #0]
	return res;
 8012b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
	...

08012b7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b088      	sub	sp, #32
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	60b9      	str	r1, [r7, #8]
 8012b86:	4613      	mov	r3, r2
 8012b88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012b8e:	f107 0310 	add.w	r3, r7, #16
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7ff fc9b 	bl	80124ce <get_ldnumber>
 8012b98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	da01      	bge.n	8012ba4 <f_mount+0x28>
 8012ba0:	230b      	movs	r3, #11
 8012ba2:	e02b      	b.n	8012bfc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ba4:	4a17      	ldr	r2, [pc, #92]	; (8012c04 <f_mount+0x88>)
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d005      	beq.n	8012bc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012bb4:	69b8      	ldr	r0, [r7, #24]
 8012bb6:	f7fe fc03 	bl	80113c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d002      	beq.n	8012bcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	490d      	ldr	r1, [pc, #52]	; (8012c04 <f_mount+0x88>)
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d002      	beq.n	8012be2 <f_mount+0x66>
 8012bdc:	79fb      	ldrb	r3, [r7, #7]
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d001      	beq.n	8012be6 <f_mount+0x6a>
 8012be2:	2300      	movs	r3, #0
 8012be4:	e00a      	b.n	8012bfc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012be6:	f107 010c 	add.w	r1, r7, #12
 8012bea:	f107 0308 	add.w	r3, r7, #8
 8012bee:	2200      	movs	r2, #0
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ff fd07 	bl	8012604 <find_volume>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3720      	adds	r7, #32
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	200422b4 	.word	0x200422b4

08012c08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b098      	sub	sp, #96	; 0x60
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	60b9      	str	r1, [r7, #8]
 8012c12:	4613      	mov	r3, r2
 8012c14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d101      	bne.n	8012c20 <f_open+0x18>
 8012c1c:	2309      	movs	r3, #9
 8012c1e:	e1ba      	b.n	8012f96 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012c20:	79fb      	ldrb	r3, [r7, #7]
 8012c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012c28:	79fa      	ldrb	r2, [r7, #7]
 8012c2a:	f107 0110 	add.w	r1, r7, #16
 8012c2e:	f107 0308 	add.w	r3, r7, #8
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff fce6 	bl	8012604 <find_volume>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	f040 819e 	bne.w	8012f84 <f_open+0x37c>
		dj.obj.fs = fs;
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	f107 0314 	add.w	r3, r7, #20
 8012c52:	4611      	mov	r1, r2
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7ff fba5 	bl	80123a4 <follow_path>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d11a      	bne.n	8012c9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012c68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	da03      	bge.n	8012c7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012c72:	2306      	movs	r3, #6
 8012c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c78:	e011      	b.n	8012c9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c7a:	79fb      	ldrb	r3, [r7, #7]
 8012c7c:	f023 0301 	bic.w	r3, r3, #1
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	bf14      	ite	ne
 8012c84:	2301      	movne	r3, #1
 8012c86:	2300      	moveq	r3, #0
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	f107 0314 	add.w	r3, r7, #20
 8012c90:	4611      	mov	r1, r2
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fe fa4c 	bl	8011130 <chk_lock>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012c9e:	79fb      	ldrb	r3, [r7, #7]
 8012ca0:	f003 031c 	and.w	r3, r3, #28
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d07e      	beq.n	8012da6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d017      	beq.n	8012ce0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cb4:	2b04      	cmp	r3, #4
 8012cb6:	d10e      	bne.n	8012cd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012cb8:	f7fe fa96 	bl	80111e8 <enq_lock>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d006      	beq.n	8012cd0 <f_open+0xc8>
 8012cc2:	f107 0314 	add.w	r3, r7, #20
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7ff fa52 	bl	8012170 <dir_register>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	e000      	b.n	8012cd2 <f_open+0xca>
 8012cd0:	2312      	movs	r3, #18
 8012cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012cd6:	79fb      	ldrb	r3, [r7, #7]
 8012cd8:	f043 0308 	orr.w	r3, r3, #8
 8012cdc:	71fb      	strb	r3, [r7, #7]
 8012cde:	e010      	b.n	8012d02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ce0:	7ebb      	ldrb	r3, [r7, #26]
 8012ce2:	f003 0311 	and.w	r3, r3, #17
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d003      	beq.n	8012cf2 <f_open+0xea>
					res = FR_DENIED;
 8012cea:	2307      	movs	r3, #7
 8012cec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012cf0:	e007      	b.n	8012d02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012cf2:	79fb      	ldrb	r3, [r7, #7]
 8012cf4:	f003 0304 	and.w	r3, r3, #4
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <f_open+0xfa>
 8012cfc:	2308      	movs	r3, #8
 8012cfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012d02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d167      	bne.n	8012dda <f_open+0x1d2>
 8012d0a:	79fb      	ldrb	r3, [r7, #7]
 8012d0c:	f003 0308 	and.w	r3, r3, #8
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d062      	beq.n	8012dda <f_open+0x1d2>
				dw = GET_FATTIME();
 8012d14:	4ba2      	ldr	r3, [pc, #648]	; (8012fa0 <f_open+0x398>)
 8012d16:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1a:	330e      	adds	r3, #14
 8012d1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fe f95c 	bl	8010fdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d26:	3316      	adds	r3, #22
 8012d28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7fe f956 	bl	8010fdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d32:	330b      	adds	r3, #11
 8012d34:	2220      	movs	r2, #32
 8012d36:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d3c:	4611      	mov	r1, r2
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff f925 	bl	8011f8e <ld_clust>
 8012d44:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7ff f93d 	bl	8011fcc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d54:	331c      	adds	r3, #28
 8012d56:	2100      	movs	r1, #0
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7fe f93f 	bl	8010fdc <st_dword>
					fs->wflag = 1;
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	2201      	movs	r2, #1
 8012d62:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d037      	beq.n	8012dda <f_open+0x1d2>
						dw = fs->winsect;
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d6e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012d70:	f107 0314 	add.w	r3, r7, #20
 8012d74:	2200      	movs	r2, #0
 8012d76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fe fe2d 	bl	80119d8 <remove_chain>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d126      	bne.n	8012dda <f_open+0x1d2>
							res = move_window(fs, dw);
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fe fb7d 	bl	8011490 <move_window>
 8012d96:	4603      	mov	r3, r0
 8012d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012da0:	3a01      	subs	r2, #1
 8012da2:	611a      	str	r2, [r3, #16]
 8012da4:	e019      	b.n	8012dda <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012da6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d115      	bne.n	8012dda <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012dae:	7ebb      	ldrb	r3, [r7, #26]
 8012db0:	f003 0310 	and.w	r3, r3, #16
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d003      	beq.n	8012dc0 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012db8:	2304      	movs	r3, #4
 8012dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012dbe:	e00c      	b.n	8012dda <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012dc0:	79fb      	ldrb	r3, [r7, #7]
 8012dc2:	f003 0302 	and.w	r3, r3, #2
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d007      	beq.n	8012dda <f_open+0x1d2>
 8012dca:	7ebb      	ldrb	r3, [r7, #26]
 8012dcc:	f003 0301 	and.w	r3, r3, #1
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d002      	beq.n	8012dda <f_open+0x1d2>
						res = FR_DENIED;
 8012dd4:	2307      	movs	r3, #7
 8012dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d128      	bne.n	8012e34 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012de2:	79fb      	ldrb	r3, [r7, #7]
 8012de4:	f003 0308 	and.w	r3, r3, #8
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d003      	beq.n	8012df4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012dec:	79fb      	ldrb	r3, [r7, #7]
 8012dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012df2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e02:	79fb      	ldrb	r3, [r7, #7]
 8012e04:	f023 0301 	bic.w	r3, r3, #1
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	bf14      	ite	ne
 8012e0c:	2301      	movne	r3, #1
 8012e0e:	2300      	moveq	r3, #0
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	461a      	mov	r2, r3
 8012e14:	f107 0314 	add.w	r3, r7, #20
 8012e18:	4611      	mov	r1, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fe fa06 	bl	801122c <inc_lock>
 8012e20:	4602      	mov	r2, r0
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	691b      	ldr	r3, [r3, #16]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d102      	bne.n	8012e34 <f_open+0x22c>
 8012e2e:	2302      	movs	r3, #2
 8012e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f040 80a3 	bne.w	8012f84 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e42:	4611      	mov	r1, r2
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ff f8a2 	bl	8011f8e <ld_clust>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e52:	331c      	adds	r3, #28
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fe f883 	bl	8010f60 <ld_dword>
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2200      	movs	r2, #0
 8012e64:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012e66:	693a      	ldr	r2, [r7, #16]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	88da      	ldrh	r2, [r3, #6]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	79fa      	ldrb	r2, [r7, #7]
 8012e78:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2200      	movs	r2, #0
 8012e84:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	3330      	adds	r3, #48	; 0x30
 8012e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012e94:	2100      	movs	r1, #0
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fe f8ed 	bl	8011076 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012e9c:	79fb      	ldrb	r3, [r7, #7]
 8012e9e:	f003 0320 	and.w	r3, r3, #32
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d06e      	beq.n	8012f84 <f_open+0x37c>
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	68db      	ldr	r3, [r3, #12]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d06a      	beq.n	8012f84 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	68da      	ldr	r2, [r3, #12]
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	895b      	ldrh	r3, [r3, #10]
 8012eba:	461a      	mov	r2, r3
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	899b      	ldrh	r3, [r3, #12]
 8012ec0:	fb03 f302 	mul.w	r3, r3, r2
 8012ec4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8012ed2:	e016      	b.n	8012f02 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7fe fb96 	bl	801160a <get_fat>
 8012ede:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d802      	bhi.n	8012eec <f_open+0x2e4>
 8012ee6:	2302      	movs	r3, #2
 8012ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef2:	d102      	bne.n	8012efa <f_open+0x2f2>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012efa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	657b      	str	r3, [r7, #84]	; 0x54
 8012f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d103      	bne.n	8012f12 <f_open+0x30a>
 8012f0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d8e0      	bhi.n	8012ed4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f16:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d131      	bne.n	8012f84 <f_open+0x37c>
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	899b      	ldrh	r3, [r3, #12]
 8012f24:	461a      	mov	r2, r3
 8012f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f2c:	fb02 f201 	mul.w	r2, r2, r1
 8012f30:	1a9b      	subs	r3, r3, r2
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d026      	beq.n	8012f84 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7fe fb46 	bl	80115cc <clust2sect>
 8012f40:	6478      	str	r0, [r7, #68]	; 0x44
 8012f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d103      	bne.n	8012f50 <f_open+0x348>
						res = FR_INT_ERR;
 8012f48:	2302      	movs	r3, #2
 8012f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f4e:	e019      	b.n	8012f84 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	899b      	ldrh	r3, [r3, #12]
 8012f54:	461a      	mov	r2, r3
 8012f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f58:	fbb3 f2f2 	udiv	r2, r3, r2
 8012f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f5e:	441a      	add	r2, r3
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	7858      	ldrb	r0, [r3, #1]
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6a1a      	ldr	r2, [r3, #32]
 8012f72:	2301      	movs	r3, #1
 8012f74:	f7fd ff7e 	bl	8010e74 <disk_read>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d002      	beq.n	8012f84 <f_open+0x37c>
 8012f7e:	2301      	movs	r3, #1
 8012f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d002      	beq.n	8012f92 <f_open+0x38a>
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3760      	adds	r7, #96	; 0x60
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	274a0000 	.word	0x274a0000

08012fa4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b08e      	sub	sp, #56	; 0x38
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	607a      	str	r2, [r7, #4]
 8012fb0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f107 0214 	add.w	r2, r7, #20
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff fda3 	bl	8012b10 <validate>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d107      	bne.n	8012fe8 <f_read+0x44>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	7d5b      	ldrb	r3, [r3, #21]
 8012fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <f_read+0x4a>
 8012fe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fec:	e135      	b.n	801325a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	7d1b      	ldrb	r3, [r3, #20]
 8012ff2:	f003 0301 	and.w	r3, r3, #1
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d101      	bne.n	8012ffe <f_read+0x5a>
 8012ffa:	2307      	movs	r3, #7
 8012ffc:	e12d      	b.n	801325a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	68da      	ldr	r2, [r3, #12]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	699b      	ldr	r3, [r3, #24]
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	429a      	cmp	r2, r3
 8013010:	f240 811e 	bls.w	8013250 <f_read+0x2ac>
 8013014:	6a3b      	ldr	r3, [r7, #32]
 8013016:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013018:	e11a      	b.n	8013250 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	699b      	ldr	r3, [r3, #24]
 801301e:	697a      	ldr	r2, [r7, #20]
 8013020:	8992      	ldrh	r2, [r2, #12]
 8013022:	fbb3 f1f2 	udiv	r1, r3, r2
 8013026:	fb02 f201 	mul.w	r2, r2, r1
 801302a:	1a9b      	subs	r3, r3, r2
 801302c:	2b00      	cmp	r3, #0
 801302e:	f040 80d5 	bne.w	80131dc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	699b      	ldr	r3, [r3, #24]
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	8992      	ldrh	r2, [r2, #12]
 801303a:	fbb3 f3f2 	udiv	r3, r3, r2
 801303e:	697a      	ldr	r2, [r7, #20]
 8013040:	8952      	ldrh	r2, [r2, #10]
 8013042:	3a01      	subs	r2, #1
 8013044:	4013      	ands	r3, r2
 8013046:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013048:	69fb      	ldr	r3, [r7, #28]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d12f      	bne.n	80130ae <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d103      	bne.n	801305e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	633b      	str	r3, [r7, #48]	; 0x30
 801305c:	e013      	b.n	8013086 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013062:	2b00      	cmp	r3, #0
 8013064:	d007      	beq.n	8013076 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	699b      	ldr	r3, [r3, #24]
 801306a:	4619      	mov	r1, r3
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7fe fdb0 	bl	8011bd2 <clmt_clust>
 8013072:	6338      	str	r0, [r7, #48]	; 0x30
 8013074:	e007      	b.n	8013086 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	69db      	ldr	r3, [r3, #28]
 801307c:	4619      	mov	r1, r3
 801307e:	4610      	mov	r0, r2
 8013080:	f7fe fac3 	bl	801160a <get_fat>
 8013084:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013088:	2b01      	cmp	r3, #1
 801308a:	d804      	bhi.n	8013096 <f_read+0xf2>
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2202      	movs	r2, #2
 8013090:	755a      	strb	r2, [r3, #21]
 8013092:	2302      	movs	r3, #2
 8013094:	e0e1      	b.n	801325a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801309c:	d104      	bne.n	80130a8 <f_read+0x104>
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2201      	movs	r2, #1
 80130a2:	755a      	strb	r2, [r3, #21]
 80130a4:	2301      	movs	r3, #1
 80130a6:	e0d8      	b.n	801325a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80130ae:	697a      	ldr	r2, [r7, #20]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	69db      	ldr	r3, [r3, #28]
 80130b4:	4619      	mov	r1, r3
 80130b6:	4610      	mov	r0, r2
 80130b8:	f7fe fa88 	bl	80115cc <clust2sect>
 80130bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d104      	bne.n	80130ce <f_read+0x12a>
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	2202      	movs	r2, #2
 80130c8:	755a      	strb	r2, [r3, #21]
 80130ca:	2302      	movs	r3, #2
 80130cc:	e0c5      	b.n	801325a <f_read+0x2b6>
			sect += csect;
 80130ce:	69ba      	ldr	r2, [r7, #24]
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	4413      	add	r3, r2
 80130d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	899b      	ldrh	r3, [r3, #12]
 80130da:	461a      	mov	r2, r3
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	fbb3 f3f2 	udiv	r3, r3, r2
 80130e2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80130e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d041      	beq.n	801316e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80130ea:	69fa      	ldr	r2, [r7, #28]
 80130ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ee:	4413      	add	r3, r2
 80130f0:	697a      	ldr	r2, [r7, #20]
 80130f2:	8952      	ldrh	r2, [r2, #10]
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d905      	bls.n	8013104 <f_read+0x160>
					cc = fs->csize - csect;
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	895b      	ldrh	r3, [r3, #10]
 80130fc:	461a      	mov	r2, r3
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	7858      	ldrb	r0, [r3, #1]
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	69ba      	ldr	r2, [r7, #24]
 801310c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801310e:	f7fd feb1 	bl	8010e74 <disk_read>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d004      	beq.n	8013122 <f_read+0x17e>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2201      	movs	r2, #1
 801311c:	755a      	strb	r2, [r3, #21]
 801311e:	2301      	movs	r3, #1
 8013120:	e09b      	b.n	801325a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	7d1b      	ldrb	r3, [r3, #20]
 8013126:	b25b      	sxtb	r3, r3
 8013128:	2b00      	cmp	r3, #0
 801312a:	da18      	bge.n	801315e <f_read+0x1ba>
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	6a1a      	ldr	r2, [r3, #32]
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013136:	429a      	cmp	r2, r3
 8013138:	d911      	bls.n	801315e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6a1a      	ldr	r2, [r3, #32]
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	697a      	ldr	r2, [r7, #20]
 8013144:	8992      	ldrh	r2, [r2, #12]
 8013146:	fb02 f303 	mul.w	r3, r2, r3
 801314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801314c:	18d0      	adds	r0, r2, r3
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	899b      	ldrh	r3, [r3, #12]
 8013158:	461a      	mov	r2, r3
 801315a:	f7fd ff6b 	bl	8011034 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	899b      	ldrh	r3, [r3, #12]
 8013162:	461a      	mov	r2, r3
 8013164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013166:	fb02 f303 	mul.w	r3, r2, r3
 801316a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801316c:	e05c      	b.n	8013228 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	6a1b      	ldr	r3, [r3, #32]
 8013172:	69ba      	ldr	r2, [r7, #24]
 8013174:	429a      	cmp	r2, r3
 8013176:	d02e      	beq.n	80131d6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	7d1b      	ldrb	r3, [r3, #20]
 801317c:	b25b      	sxtb	r3, r3
 801317e:	2b00      	cmp	r3, #0
 8013180:	da18      	bge.n	80131b4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	7858      	ldrb	r0, [r3, #1]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	6a1a      	ldr	r2, [r3, #32]
 8013190:	2301      	movs	r3, #1
 8013192:	f7fd fe8f 	bl	8010eb4 <disk_write>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d004      	beq.n	80131a6 <f_read+0x202>
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2201      	movs	r2, #1
 80131a0:	755a      	strb	r2, [r3, #21]
 80131a2:	2301      	movs	r3, #1
 80131a4:	e059      	b.n	801325a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	7d1b      	ldrb	r3, [r3, #20]
 80131aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131ae:	b2da      	uxtb	r2, r3
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	7858      	ldrb	r0, [r3, #1]
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131be:	2301      	movs	r3, #1
 80131c0:	69ba      	ldr	r2, [r7, #24]
 80131c2:	f7fd fe57 	bl	8010e74 <disk_read>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d004      	beq.n	80131d6 <f_read+0x232>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2201      	movs	r2, #1
 80131d0:	755a      	strb	r2, [r3, #21]
 80131d2:	2301      	movs	r3, #1
 80131d4:	e041      	b.n	801325a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	69ba      	ldr	r2, [r7, #24]
 80131da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	899b      	ldrh	r3, [r3, #12]
 80131e0:	4618      	mov	r0, r3
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	699b      	ldr	r3, [r3, #24]
 80131e6:	697a      	ldr	r2, [r7, #20]
 80131e8:	8992      	ldrh	r2, [r2, #12]
 80131ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80131ee:	fb02 f201 	mul.w	r2, r2, r1
 80131f2:	1a9b      	subs	r3, r3, r2
 80131f4:	1ac3      	subs	r3, r0, r3
 80131f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80131f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d901      	bls.n	8013204 <f_read+0x260>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	699b      	ldr	r3, [r3, #24]
 801320e:	697a      	ldr	r2, [r7, #20]
 8013210:	8992      	ldrh	r2, [r2, #12]
 8013212:	fbb3 f0f2 	udiv	r0, r3, r2
 8013216:	fb02 f200 	mul.w	r2, r2, r0
 801321a:	1a9b      	subs	r3, r3, r2
 801321c:	440b      	add	r3, r1
 801321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013220:	4619      	mov	r1, r3
 8013222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013224:	f7fd ff06 	bl	8011034 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322c:	4413      	add	r3, r2
 801322e:	627b      	str	r3, [r7, #36]	; 0x24
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	699a      	ldr	r2, [r3, #24]
 8013234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013236:	441a      	add	r2, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	619a      	str	r2, [r3, #24]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013242:	441a      	add	r2, r3
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	601a      	str	r2, [r3, #0]
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	f47f aee1 	bne.w	801301a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3738      	adds	r7, #56	; 0x38
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013262:	b580      	push	{r7, lr}
 8013264:	b08c      	sub	sp, #48	; 0x30
 8013266:	af00      	add	r7, sp, #0
 8013268:	60f8      	str	r0, [r7, #12]
 801326a:	60b9      	str	r1, [r7, #8]
 801326c:	607a      	str	r2, [r7, #4]
 801326e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	2200      	movs	r2, #0
 8013278:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	f107 0210 	add.w	r2, r7, #16
 8013280:	4611      	mov	r1, r2
 8013282:	4618      	mov	r0, r3
 8013284:	f7ff fc44 	bl	8012b10 <validate>
 8013288:	4603      	mov	r3, r0
 801328a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801328e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013292:	2b00      	cmp	r3, #0
 8013294:	d107      	bne.n	80132a6 <f_write+0x44>
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	7d5b      	ldrb	r3, [r3, #21]
 801329a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801329e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <f_write+0x4a>
 80132a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132aa:	e16a      	b.n	8013582 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	7d1b      	ldrb	r3, [r3, #20]
 80132b0:	f003 0302 	and.w	r3, r3, #2
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <f_write+0x5a>
 80132b8:	2307      	movs	r3, #7
 80132ba:	e162      	b.n	8013582 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	699a      	ldr	r2, [r3, #24]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	441a      	add	r2, r3
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	699b      	ldr	r3, [r3, #24]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	f080 814c 	bcs.w	8013566 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	699b      	ldr	r3, [r3, #24]
 80132d2:	43db      	mvns	r3, r3
 80132d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80132d6:	e146      	b.n	8013566 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	699b      	ldr	r3, [r3, #24]
 80132dc:	693a      	ldr	r2, [r7, #16]
 80132de:	8992      	ldrh	r2, [r2, #12]
 80132e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80132e4:	fb02 f201 	mul.w	r2, r2, r1
 80132e8:	1a9b      	subs	r3, r3, r2
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	f040 80f1 	bne.w	80134d2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	699b      	ldr	r3, [r3, #24]
 80132f4:	693a      	ldr	r2, [r7, #16]
 80132f6:	8992      	ldrh	r2, [r2, #12]
 80132f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80132fc:	693a      	ldr	r2, [r7, #16]
 80132fe:	8952      	ldrh	r2, [r2, #10]
 8013300:	3a01      	subs	r2, #1
 8013302:	4013      	ands	r3, r2
 8013304:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d143      	bne.n	8013394 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	699b      	ldr	r3, [r3, #24]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d10c      	bne.n	801332e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331c:	2b00      	cmp	r3, #0
 801331e:	d11a      	bne.n	8013356 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2100      	movs	r1, #0
 8013324:	4618      	mov	r0, r3
 8013326:	f7fe fbbc 	bl	8011aa2 <create_chain>
 801332a:	62b8      	str	r0, [r7, #40]	; 0x28
 801332c:	e013      	b.n	8013356 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013332:	2b00      	cmp	r3, #0
 8013334:	d007      	beq.n	8013346 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	699b      	ldr	r3, [r3, #24]
 801333a:	4619      	mov	r1, r3
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f7fe fc48 	bl	8011bd2 <clmt_clust>
 8013342:	62b8      	str	r0, [r7, #40]	; 0x28
 8013344:	e007      	b.n	8013356 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013346:	68fa      	ldr	r2, [r7, #12]
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	69db      	ldr	r3, [r3, #28]
 801334c:	4619      	mov	r1, r3
 801334e:	4610      	mov	r0, r2
 8013350:	f7fe fba7 	bl	8011aa2 <create_chain>
 8013354:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013358:	2b00      	cmp	r3, #0
 801335a:	f000 8109 	beq.w	8013570 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013360:	2b01      	cmp	r3, #1
 8013362:	d104      	bne.n	801336e <f_write+0x10c>
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2202      	movs	r2, #2
 8013368:	755a      	strb	r2, [r3, #21]
 801336a:	2302      	movs	r3, #2
 801336c:	e109      	b.n	8013582 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013374:	d104      	bne.n	8013380 <f_write+0x11e>
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2201      	movs	r2, #1
 801337a:	755a      	strb	r2, [r3, #21]
 801337c:	2301      	movs	r3, #1
 801337e:	e100      	b.n	8013582 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013384:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	689b      	ldr	r3, [r3, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d102      	bne.n	8013394 <f_write+0x132>
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013392:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	7d1b      	ldrb	r3, [r3, #20]
 8013398:	b25b      	sxtb	r3, r3
 801339a:	2b00      	cmp	r3, #0
 801339c:	da18      	bge.n	80133d0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	7858      	ldrb	r0, [r3, #1]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	6a1a      	ldr	r2, [r3, #32]
 80133ac:	2301      	movs	r3, #1
 80133ae:	f7fd fd81 	bl	8010eb4 <disk_write>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d004      	beq.n	80133c2 <f_write+0x160>
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2201      	movs	r2, #1
 80133bc:	755a      	strb	r2, [r3, #21]
 80133be:	2301      	movs	r3, #1
 80133c0:	e0df      	b.n	8013582 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	7d1b      	ldrb	r3, [r3, #20]
 80133c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133ca:	b2da      	uxtb	r2, r3
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80133d0:	693a      	ldr	r2, [r7, #16]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	69db      	ldr	r3, [r3, #28]
 80133d6:	4619      	mov	r1, r3
 80133d8:	4610      	mov	r0, r2
 80133da:	f7fe f8f7 	bl	80115cc <clust2sect>
 80133de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d104      	bne.n	80133f0 <f_write+0x18e>
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2202      	movs	r2, #2
 80133ea:	755a      	strb	r2, [r3, #21]
 80133ec:	2302      	movs	r3, #2
 80133ee:	e0c8      	b.n	8013582 <f_write+0x320>
			sect += csect;
 80133f0:	697a      	ldr	r2, [r7, #20]
 80133f2:	69bb      	ldr	r3, [r7, #24]
 80133f4:	4413      	add	r3, r2
 80133f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	899b      	ldrh	r3, [r3, #12]
 80133fc:	461a      	mov	r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	fbb3 f3f2 	udiv	r3, r3, r2
 8013404:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d043      	beq.n	8013494 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801340c:	69ba      	ldr	r2, [r7, #24]
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	4413      	add	r3, r2
 8013412:	693a      	ldr	r2, [r7, #16]
 8013414:	8952      	ldrh	r2, [r2, #10]
 8013416:	4293      	cmp	r3, r2
 8013418:	d905      	bls.n	8013426 <f_write+0x1c4>
					cc = fs->csize - csect;
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	895b      	ldrh	r3, [r3, #10]
 801341e:	461a      	mov	r2, r3
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	7858      	ldrb	r0, [r3, #1]
 801342a:	6a3b      	ldr	r3, [r7, #32]
 801342c:	697a      	ldr	r2, [r7, #20]
 801342e:	69f9      	ldr	r1, [r7, #28]
 8013430:	f7fd fd40 	bl	8010eb4 <disk_write>
 8013434:	4603      	mov	r3, r0
 8013436:	2b00      	cmp	r3, #0
 8013438:	d004      	beq.n	8013444 <f_write+0x1e2>
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2201      	movs	r2, #1
 801343e:	755a      	strb	r2, [r3, #21]
 8013440:	2301      	movs	r3, #1
 8013442:	e09e      	b.n	8013582 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6a1a      	ldr	r2, [r3, #32]
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	1ad3      	subs	r3, r2, r3
 801344c:	6a3a      	ldr	r2, [r7, #32]
 801344e:	429a      	cmp	r2, r3
 8013450:	d918      	bls.n	8013484 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	6a1a      	ldr	r2, [r3, #32]
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	693a      	ldr	r2, [r7, #16]
 8013462:	8992      	ldrh	r2, [r2, #12]
 8013464:	fb02 f303 	mul.w	r3, r2, r3
 8013468:	69fa      	ldr	r2, [r7, #28]
 801346a:	18d1      	adds	r1, r2, r3
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	899b      	ldrh	r3, [r3, #12]
 8013470:	461a      	mov	r2, r3
 8013472:	f7fd fddf 	bl	8011034 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	7d1b      	ldrb	r3, [r3, #20]
 801347a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801347e:	b2da      	uxtb	r2, r3
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	899b      	ldrh	r3, [r3, #12]
 8013488:	461a      	mov	r2, r3
 801348a:	6a3b      	ldr	r3, [r7, #32]
 801348c:	fb02 f303 	mul.w	r3, r2, r3
 8013490:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013492:	e04b      	b.n	801352c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6a1b      	ldr	r3, [r3, #32]
 8013498:	697a      	ldr	r2, [r7, #20]
 801349a:	429a      	cmp	r2, r3
 801349c:	d016      	beq.n	80134cc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	699a      	ldr	r2, [r3, #24]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d210      	bcs.n	80134cc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	7858      	ldrb	r0, [r3, #1]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134b4:	2301      	movs	r3, #1
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	f7fd fcdc 	bl	8010e74 <disk_read>
 80134bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d004      	beq.n	80134cc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2201      	movs	r2, #1
 80134c6:	755a      	strb	r2, [r3, #21]
 80134c8:	2301      	movs	r3, #1
 80134ca:	e05a      	b.n	8013582 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	697a      	ldr	r2, [r7, #20]
 80134d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	899b      	ldrh	r3, [r3, #12]
 80134d6:	4618      	mov	r0, r3
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	699b      	ldr	r3, [r3, #24]
 80134dc:	693a      	ldr	r2, [r7, #16]
 80134de:	8992      	ldrh	r2, [r2, #12]
 80134e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80134e4:	fb02 f201 	mul.w	r2, r2, r1
 80134e8:	1a9b      	subs	r3, r3, r2
 80134ea:	1ac3      	subs	r3, r0, r3
 80134ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80134ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d901      	bls.n	80134fa <f_write+0x298>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	699b      	ldr	r3, [r3, #24]
 8013504:	693a      	ldr	r2, [r7, #16]
 8013506:	8992      	ldrh	r2, [r2, #12]
 8013508:	fbb3 f0f2 	udiv	r0, r3, r2
 801350c:	fb02 f200 	mul.w	r2, r2, r0
 8013510:	1a9b      	subs	r3, r3, r2
 8013512:	440b      	add	r3, r1
 8013514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013516:	69f9      	ldr	r1, [r7, #28]
 8013518:	4618      	mov	r0, r3
 801351a:	f7fd fd8b 	bl	8011034 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	7d1b      	ldrb	r3, [r3, #20]
 8013522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013526:	b2da      	uxtb	r2, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801352c:	69fa      	ldr	r2, [r7, #28]
 801352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013530:	4413      	add	r3, r2
 8013532:	61fb      	str	r3, [r7, #28]
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	699a      	ldr	r2, [r3, #24]
 8013538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353a:	441a      	add	r2, r3
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	619a      	str	r2, [r3, #24]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	68da      	ldr	r2, [r3, #12]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	699b      	ldr	r3, [r3, #24]
 8013548:	429a      	cmp	r2, r3
 801354a:	bf38      	it	cc
 801354c:	461a      	movcc	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	60da      	str	r2, [r3, #12]
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013558:	441a      	add	r2, r3
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013562:	1ad3      	subs	r3, r2, r3
 8013564:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b00      	cmp	r3, #0
 801356a:	f47f aeb5 	bne.w	80132d8 <f_write+0x76>
 801356e:	e000      	b.n	8013572 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013570:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	7d1b      	ldrb	r3, [r3, #20]
 8013576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801357a:	b2da      	uxtb	r2, r3
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013580:	2300      	movs	r3, #0
}
 8013582:	4618      	mov	r0, r3
 8013584:	3730      	adds	r7, #48	; 0x30
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
	...

0801358c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b086      	sub	sp, #24
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f107 0208 	add.w	r2, r7, #8
 801359a:	4611      	mov	r1, r2
 801359c:	4618      	mov	r0, r3
 801359e:	f7ff fab7 	bl	8012b10 <validate>
 80135a2:	4603      	mov	r3, r0
 80135a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80135a6:	7dfb      	ldrb	r3, [r7, #23]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d167      	bne.n	801367c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	7d1b      	ldrb	r3, [r3, #20]
 80135b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d061      	beq.n	801367c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	7d1b      	ldrb	r3, [r3, #20]
 80135bc:	b25b      	sxtb	r3, r3
 80135be:	2b00      	cmp	r3, #0
 80135c0:	da15      	bge.n	80135ee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	7858      	ldrb	r0, [r3, #1]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6a1a      	ldr	r2, [r3, #32]
 80135d0:	2301      	movs	r3, #1
 80135d2:	f7fd fc6f 	bl	8010eb4 <disk_write>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d001      	beq.n	80135e0 <f_sync+0x54>
 80135dc:	2301      	movs	r3, #1
 80135de:	e04e      	b.n	801367e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	7d1b      	ldrb	r3, [r3, #20]
 80135e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135e8:	b2da      	uxtb	r2, r3
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80135ee:	4b26      	ldr	r3, [pc, #152]	; (8013688 <f_sync+0xfc>)
 80135f0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f8:	4619      	mov	r1, r3
 80135fa:	4610      	mov	r0, r2
 80135fc:	f7fd ff48 	bl	8011490 <move_window>
 8013600:	4603      	mov	r3, r0
 8013602:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013604:	7dfb      	ldrb	r3, [r7, #23]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d138      	bne.n	801367c <f_sync+0xf0>
					dir = fp->dir_ptr;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801360e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	330b      	adds	r3, #11
 8013614:	781a      	ldrb	r2, [r3, #0]
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	330b      	adds	r3, #11
 801361a:	f042 0220 	orr.w	r2, r2, #32
 801361e:	b2d2      	uxtb	r2, r2
 8013620:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	461a      	mov	r2, r3
 801362c:	68f9      	ldr	r1, [r7, #12]
 801362e:	f7fe fccd 	bl	8011fcc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f103 021c 	add.w	r2, r3, #28
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	4619      	mov	r1, r3
 801363e:	4610      	mov	r0, r2
 8013640:	f7fd fccc 	bl	8010fdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	3316      	adds	r3, #22
 8013648:	6939      	ldr	r1, [r7, #16]
 801364a:	4618      	mov	r0, r3
 801364c:	f7fd fcc6 	bl	8010fdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	3312      	adds	r3, #18
 8013654:	2100      	movs	r1, #0
 8013656:	4618      	mov	r0, r3
 8013658:	f7fd fca5 	bl	8010fa6 <st_word>
					fs->wflag = 1;
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	2201      	movs	r2, #1
 8013660:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	4618      	mov	r0, r3
 8013666:	f7fd ff41 	bl	80114ec <sync_fs>
 801366a:	4603      	mov	r3, r0
 801366c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7d1b      	ldrb	r3, [r3, #20]
 8013672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013676:	b2da      	uxtb	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801367c:	7dfb      	ldrb	r3, [r7, #23]
}
 801367e:	4618      	mov	r0, r3
 8013680:	3718      	adds	r7, #24
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	274a0000 	.word	0x274a0000

0801368c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7ff ff79 	bl	801358c <f_sync>
 801369a:	4603      	mov	r3, r0
 801369c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801369e:	7bfb      	ldrb	r3, [r7, #15]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d118      	bne.n	80136d6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f107 0208 	add.w	r2, r7, #8
 80136aa:	4611      	mov	r1, r2
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7ff fa2f 	bl	8012b10 <validate>
 80136b2:	4603      	mov	r3, r0
 80136b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80136b6:	7bfb      	ldrb	r3, [r7, #15]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d10c      	bne.n	80136d6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	691b      	ldr	r3, [r3, #16]
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7fd fe41 	bl	8011348 <dec_lock>
 80136c6:	4603      	mov	r3, r0
 80136c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80136ca:	7bfb      	ldrb	r3, [r7, #15]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d102      	bne.n	80136d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2200      	movs	r2, #0
 80136d4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80136d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3710      	adds	r7, #16
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80136e0:	b590      	push	{r4, r7, lr}
 80136e2:	b091      	sub	sp, #68	; 0x44
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80136e8:	f107 0108 	add.w	r1, r7, #8
 80136ec:	1d3b      	adds	r3, r7, #4
 80136ee:	2200      	movs	r2, #0
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fe ff87 	bl	8012604 <find_volume>
 80136f6:	4603      	mov	r3, r0
 80136f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80136fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013700:	2b00      	cmp	r3, #0
 8013702:	d131      	bne.n	8013768 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	f107 030c 	add.w	r3, r7, #12
 801370e:	4611      	mov	r1, r2
 8013710:	4618      	mov	r0, r3
 8013712:	f7fe fe47 	bl	80123a4 <follow_path>
 8013716:	4603      	mov	r3, r0
 8013718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801371c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013720:	2b00      	cmp	r3, #0
 8013722:	d11a      	bne.n	801375a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013724:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013728:	b25b      	sxtb	r3, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	da03      	bge.n	8013736 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	697a      	ldr	r2, [r7, #20]
 8013732:	619a      	str	r2, [r3, #24]
 8013734:	e011      	b.n	801375a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013736:	7cbb      	ldrb	r3, [r7, #18]
 8013738:	f003 0310 	and.w	r3, r3, #16
 801373c:	2b00      	cmp	r3, #0
 801373e:	d009      	beq.n	8013754 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013744:	68bc      	ldr	r4, [r7, #8]
 8013746:	4611      	mov	r1, r2
 8013748:	4618      	mov	r0, r3
 801374a:	f7fe fc20 	bl	8011f8e <ld_clust>
 801374e:	4603      	mov	r3, r0
 8013750:	61a3      	str	r3, [r4, #24]
 8013752:	e002      	b.n	801375a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013754:	2305      	movs	r3, #5
 8013756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801375a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801375e:	2b04      	cmp	r3, #4
 8013760:	d102      	bne.n	8013768 <f_chdir+0x88>
 8013762:	2305      	movs	r3, #5
 8013764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801376c:	4618      	mov	r0, r3
 801376e:	3744      	adds	r7, #68	; 0x44
 8013770:	46bd      	mov	sp, r7
 8013772:	bd90      	pop	{r4, r7, pc}

08013774 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b090      	sub	sp, #64	; 0x40
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f107 0208 	add.w	r2, r7, #8
 8013784:	4611      	mov	r1, r2
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff f9c2 	bl	8012b10 <validate>
 801378c:	4603      	mov	r3, r0
 801378e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013796:	2b00      	cmp	r3, #0
 8013798:	d103      	bne.n	80137a2 <f_lseek+0x2e>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	7d5b      	ldrb	r3, [r3, #21]
 801379e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80137a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d002      	beq.n	80137b0 <f_lseek+0x3c>
 80137aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137ae:	e201      	b.n	8013bb4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f000 80d9 	beq.w	801396c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c0:	d15a      	bne.n	8013878 <f_lseek+0x104>
			tbl = fp->cltbl;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137c6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	1d1a      	adds	r2, r3, #4
 80137cc:	627a      	str	r2, [r7, #36]	; 0x24
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	617b      	str	r3, [r7, #20]
 80137d2:	2302      	movs	r3, #2
 80137d4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	689b      	ldr	r3, [r3, #8]
 80137da:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80137dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d03a      	beq.n	8013858 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	613b      	str	r3, [r7, #16]
 80137e6:	2300      	movs	r3, #0
 80137e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ec:	3302      	adds	r3, #2
 80137ee:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80137f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f2:	60fb      	str	r3, [r7, #12]
 80137f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f6:	3301      	adds	r3, #1
 80137f8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fd ff03 	bl	801160a <get_fat>
 8013804:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013808:	2b01      	cmp	r3, #1
 801380a:	d804      	bhi.n	8013816 <f_lseek+0xa2>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2202      	movs	r2, #2
 8013810:	755a      	strb	r2, [r3, #21]
 8013812:	2302      	movs	r3, #2
 8013814:	e1ce      	b.n	8013bb4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801381c:	d104      	bne.n	8013828 <f_lseek+0xb4>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2201      	movs	r2, #1
 8013822:	755a      	strb	r2, [r3, #21]
 8013824:	2301      	movs	r3, #1
 8013826:	e1c5      	b.n	8013bb4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3301      	adds	r3, #1
 801382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801382e:	429a      	cmp	r2, r3
 8013830:	d0de      	beq.n	80137f0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	429a      	cmp	r2, r3
 8013838:	d809      	bhi.n	801384e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	1d1a      	adds	r2, r3, #4
 801383e:	627a      	str	r2, [r7, #36]	; 0x24
 8013840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013842:	601a      	str	r2, [r3, #0]
 8013844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013846:	1d1a      	adds	r2, r3, #4
 8013848:	627a      	str	r2, [r7, #36]	; 0x24
 801384a:	693a      	ldr	r2, [r7, #16]
 801384c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	69db      	ldr	r3, [r3, #28]
 8013852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013854:	429a      	cmp	r2, r3
 8013856:	d3c4      	bcc.n	80137e2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801385c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801385e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	429a      	cmp	r2, r3
 8013866:	d803      	bhi.n	8013870 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386a:	2200      	movs	r2, #0
 801386c:	601a      	str	r2, [r3, #0]
 801386e:	e19f      	b.n	8013bb0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013870:	2311      	movs	r3, #17
 8013872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013876:	e19b      	b.n	8013bb0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	429a      	cmp	r2, r3
 8013880:	d902      	bls.n	8013888 <f_lseek+0x114>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	683a      	ldr	r2, [r7, #0]
 801388c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	f000 818d 	beq.w	8013bb0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	3b01      	subs	r3, #1
 801389a:	4619      	mov	r1, r3
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f7fe f998 	bl	8011bd2 <clmt_clust>
 80138a2:	4602      	mov	r2, r0
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	69db      	ldr	r3, [r3, #28]
 80138ae:	4619      	mov	r1, r3
 80138b0:	4610      	mov	r0, r2
 80138b2:	f7fd fe8b 	bl	80115cc <clust2sect>
 80138b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d104      	bne.n	80138c8 <f_lseek+0x154>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	2202      	movs	r2, #2
 80138c2:	755a      	strb	r2, [r3, #21]
 80138c4:	2302      	movs	r3, #2
 80138c6:	e175      	b.n	8013bb4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	3b01      	subs	r3, #1
 80138cc:	68ba      	ldr	r2, [r7, #8]
 80138ce:	8992      	ldrh	r2, [r2, #12]
 80138d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	8952      	ldrh	r2, [r2, #10]
 80138d8:	3a01      	subs	r2, #1
 80138da:	4013      	ands	r3, r2
 80138dc:	69ba      	ldr	r2, [r7, #24]
 80138de:	4413      	add	r3, r2
 80138e0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	699b      	ldr	r3, [r3, #24]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	8992      	ldrh	r2, [r2, #12]
 80138ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80138ee:	fb02 f201 	mul.w	r2, r2, r1
 80138f2:	1a9b      	subs	r3, r3, r2
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f000 815b 	beq.w	8013bb0 <f_lseek+0x43c>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6a1b      	ldr	r3, [r3, #32]
 80138fe:	69ba      	ldr	r2, [r7, #24]
 8013900:	429a      	cmp	r2, r3
 8013902:	f000 8155 	beq.w	8013bb0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	7d1b      	ldrb	r3, [r3, #20]
 801390a:	b25b      	sxtb	r3, r3
 801390c:	2b00      	cmp	r3, #0
 801390e:	da18      	bge.n	8013942 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	7858      	ldrb	r0, [r3, #1]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6a1a      	ldr	r2, [r3, #32]
 801391e:	2301      	movs	r3, #1
 8013920:	f7fd fac8 	bl	8010eb4 <disk_write>
 8013924:	4603      	mov	r3, r0
 8013926:	2b00      	cmp	r3, #0
 8013928:	d004      	beq.n	8013934 <f_lseek+0x1c0>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2201      	movs	r2, #1
 801392e:	755a      	strb	r2, [r3, #21]
 8013930:	2301      	movs	r3, #1
 8013932:	e13f      	b.n	8013bb4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	7d1b      	ldrb	r3, [r3, #20]
 8013938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801393c:	b2da      	uxtb	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	7858      	ldrb	r0, [r3, #1]
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801394c:	2301      	movs	r3, #1
 801394e:	69ba      	ldr	r2, [r7, #24]
 8013950:	f7fd fa90 	bl	8010e74 <disk_read>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d004      	beq.n	8013964 <f_lseek+0x1f0>
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2201      	movs	r2, #1
 801395e:	755a      	strb	r2, [r3, #21]
 8013960:	2301      	movs	r3, #1
 8013962:	e127      	b.n	8013bb4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	69ba      	ldr	r2, [r7, #24]
 8013968:	621a      	str	r2, [r3, #32]
 801396a:	e121      	b.n	8013bb0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	68db      	ldr	r3, [r3, #12]
 8013970:	683a      	ldr	r2, [r7, #0]
 8013972:	429a      	cmp	r2, r3
 8013974:	d908      	bls.n	8013988 <f_lseek+0x214>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	7d1b      	ldrb	r3, [r3, #20]
 801397a:	f003 0302 	and.w	r3, r3, #2
 801397e:	2b00      	cmp	r3, #0
 8013980:	d102      	bne.n	8013988 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	68db      	ldr	r3, [r3, #12]
 8013986:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	699b      	ldr	r3, [r3, #24]
 801398c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801398e:	2300      	movs	r3, #0
 8013990:	637b      	str	r3, [r7, #52]	; 0x34
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013996:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f000 80b5 	beq.w	8013b0a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	895b      	ldrh	r3, [r3, #10]
 80139a4:	461a      	mov	r2, r3
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	899b      	ldrh	r3, [r3, #12]
 80139aa:	fb03 f302 	mul.w	r3, r3, r2
 80139ae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80139b0:	6a3b      	ldr	r3, [r7, #32]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d01b      	beq.n	80139ee <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	1e5a      	subs	r2, r3, #1
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80139c0:	6a3b      	ldr	r3, [r7, #32]
 80139c2:	1e59      	subs	r1, r3, #1
 80139c4:	69fb      	ldr	r3, [r7, #28]
 80139c6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d30f      	bcc.n	80139ee <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80139ce:	6a3b      	ldr	r3, [r7, #32]
 80139d0:	1e5a      	subs	r2, r3, #1
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	425b      	negs	r3, r3
 80139d6:	401a      	ands	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	699b      	ldr	r3, [r3, #24]
 80139e0:	683a      	ldr	r2, [r7, #0]
 80139e2:	1ad3      	subs	r3, r2, r3
 80139e4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	69db      	ldr	r3, [r3, #28]
 80139ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80139ec:	e022      	b.n	8013a34 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	689b      	ldr	r3, [r3, #8]
 80139f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80139f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d119      	bne.n	8013a2e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2100      	movs	r1, #0
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fe f84f 	bl	8011aa2 <create_chain>
 8013a04:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d104      	bne.n	8013a16 <f_lseek+0x2a2>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2202      	movs	r2, #2
 8013a10:	755a      	strb	r2, [r3, #21]
 8013a12:	2302      	movs	r3, #2
 8013a14:	e0ce      	b.n	8013bb4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a1c:	d104      	bne.n	8013a28 <f_lseek+0x2b4>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2201      	movs	r2, #1
 8013a22:	755a      	strb	r2, [r3, #21]
 8013a24:	2301      	movs	r3, #1
 8013a26:	e0c5      	b.n	8013bb4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a2c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a32:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d067      	beq.n	8013b0a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013a3a:	e03a      	b.n	8013ab2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013a3c:	683a      	ldr	r2, [r7, #0]
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	603b      	str	r3, [r7, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	699a      	ldr	r2, [r3, #24]
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	441a      	add	r2, r3
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	7d1b      	ldrb	r3, [r3, #20]
 8013a54:	f003 0302 	and.w	r3, r3, #2
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00b      	beq.n	8013a74 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fe f81e 	bl	8011aa2 <create_chain>
 8013a66:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d108      	bne.n	8013a80 <f_lseek+0x30c>
							ofs = 0; break;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	603b      	str	r3, [r7, #0]
 8013a72:	e022      	b.n	8013aba <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fd fdc6 	bl	801160a <get_fat>
 8013a7e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a86:	d104      	bne.n	8013a92 <f_lseek+0x31e>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	755a      	strb	r2, [r3, #21]
 8013a8e:	2301      	movs	r3, #1
 8013a90:	e090      	b.n	8013bb4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d904      	bls.n	8013aa2 <f_lseek+0x32e>
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	69db      	ldr	r3, [r3, #28]
 8013a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d304      	bcc.n	8013aac <f_lseek+0x338>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2202      	movs	r2, #2
 8013aa6:	755a      	strb	r2, [r3, #21]
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	e083      	b.n	8013bb4 <f_lseek+0x440>
					fp->clust = clst;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ab0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d8c0      	bhi.n	8013a3c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	699a      	ldr	r2, [r3, #24]
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	441a      	add	r2, r3
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	899b      	ldrh	r3, [r3, #12]
 8013aca:	461a      	mov	r2, r3
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ad2:	fb02 f201 	mul.w	r2, r2, r1
 8013ad6:	1a9b      	subs	r3, r3, r2
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d016      	beq.n	8013b0a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fd fd73 	bl	80115cc <clust2sect>
 8013ae6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d104      	bne.n	8013af8 <f_lseek+0x384>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2202      	movs	r2, #2
 8013af2:	755a      	strb	r2, [r3, #21]
 8013af4:	2302      	movs	r3, #2
 8013af6:	e05d      	b.n	8013bb4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	899b      	ldrh	r3, [r3, #12]
 8013afc:	461a      	mov	r2, r3
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b06:	4413      	add	r3, r2
 8013b08:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	699a      	ldr	r2, [r3, #24]
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d90a      	bls.n	8013b2c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	699a      	ldr	r2, [r3, #24]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	7d1b      	ldrb	r3, [r3, #20]
 8013b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b26:	b2da      	uxtb	r2, r3
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	8992      	ldrh	r2, [r2, #12]
 8013b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b38:	fb02 f201 	mul.w	r2, r2, r1
 8013b3c:	1a9b      	subs	r3, r3, r2
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d036      	beq.n	8013bb0 <f_lseek+0x43c>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6a1b      	ldr	r3, [r3, #32]
 8013b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d031      	beq.n	8013bb0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	7d1b      	ldrb	r3, [r3, #20]
 8013b50:	b25b      	sxtb	r3, r3
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	da18      	bge.n	8013b88 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	7858      	ldrb	r0, [r3, #1]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6a1a      	ldr	r2, [r3, #32]
 8013b64:	2301      	movs	r3, #1
 8013b66:	f7fd f9a5 	bl	8010eb4 <disk_write>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d004      	beq.n	8013b7a <f_lseek+0x406>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2201      	movs	r2, #1
 8013b74:	755a      	strb	r2, [r3, #21]
 8013b76:	2301      	movs	r3, #1
 8013b78:	e01c      	b.n	8013bb4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	7d1b      	ldrb	r3, [r3, #20]
 8013b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b82:	b2da      	uxtb	r2, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	7858      	ldrb	r0, [r3, #1]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b92:	2301      	movs	r3, #1
 8013b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b96:	f7fd f96d 	bl	8010e74 <disk_read>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d004      	beq.n	8013baa <f_lseek+0x436>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	755a      	strb	r2, [r3, #21]
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e004      	b.n	8013bb4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013bb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3740      	adds	r7, #64	; 0x40
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}

08013bbc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b09e      	sub	sp, #120	; 0x78
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013bc8:	f107 010c 	add.w	r1, r7, #12
 8013bcc:	1d3b      	adds	r3, r7, #4
 8013bce:	2202      	movs	r2, #2
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fe fd17 	bl	8012604 <find_volume>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013be0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	f040 80a4 	bne.w	8013d32 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013bf0:	4611      	mov	r1, r2
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe fbd6 	bl	80123a4 <follow_path>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013bfe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d108      	bne.n	8013c18 <f_unlink+0x5c>
 8013c06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c0a:	f003 0320 	and.w	r3, r3, #32
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d002      	beq.n	8013c18 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013c12:	2306      	movs	r3, #6
 8013c14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013c18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d108      	bne.n	8013c32 <f_unlink+0x76>
 8013c20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c24:	2102      	movs	r1, #2
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7fd fa82 	bl	8011130 <chk_lock>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013c32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d17b      	bne.n	8013d32 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013c3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013c3e:	b25b      	sxtb	r3, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	da03      	bge.n	8013c4c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013c44:	2306      	movs	r3, #6
 8013c46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013c4a:	e008      	b.n	8013c5e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013c4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013c50:	f003 0301 	and.w	r3, r3, #1
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d002      	beq.n	8013c5e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013c58:	2307      	movs	r3, #7
 8013c5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013c5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d13d      	bne.n	8013ce2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fe f98e 	bl	8011f8e <ld_clust>
 8013c72:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013c74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013c78:	f003 0310 	and.w	r3, r3, #16
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d030      	beq.n	8013ce2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	699b      	ldr	r3, [r3, #24]
 8013c84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d103      	bne.n	8013c92 <f_unlink+0xd6>
						res = FR_DENIED;
 8013c8a:	2307      	movs	r3, #7
 8013c8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013c90:	e027      	b.n	8013ce2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c98:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013c9a:	f107 0310 	add.w	r3, r7, #16
 8013c9e:	2100      	movs	r1, #0
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fd ffce 	bl	8011c42 <dir_sdi>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013cac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d116      	bne.n	8013ce2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013cb4:	f107 0310 	add.w	r3, r7, #16
 8013cb8:	2100      	movs	r1, #0
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7fe f9a6 	bl	801200c <dir_read>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013cc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d102      	bne.n	8013cd4 <f_unlink+0x118>
 8013cce:	2307      	movs	r3, #7
 8013cd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013cd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cd8:	2b04      	cmp	r3, #4
 8013cda:	d102      	bne.n	8013ce2 <f_unlink+0x126>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013ce2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d123      	bne.n	8013d32 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013cea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fe fa70 	bl	80121d4 <dir_remove>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013cfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d10c      	bne.n	8013d1c <f_unlink+0x160>
 8013d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d009      	beq.n	8013d1c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013d08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7fd fe61 	bl	80119d8 <remove_chain>
 8013d16:	4603      	mov	r3, r0
 8013d18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013d1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d106      	bne.n	8013d32 <f_unlink+0x176>
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fd fbe0 	bl	80114ec <sync_fs>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013d32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3778      	adds	r7, #120	; 0x78
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
	...

08013d40 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b096      	sub	sp, #88	; 0x58
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013d48:	f107 0108 	add.w	r1, r7, #8
 8013d4c:	1d3b      	adds	r3, r7, #4
 8013d4e:	2202      	movs	r2, #2
 8013d50:	4618      	mov	r0, r3
 8013d52:	f7fe fc57 	bl	8012604 <find_volume>
 8013d56:	4603      	mov	r3, r0
 8013d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f040 80fe 	bne.w	8013f66 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	f107 030c 	add.w	r3, r7, #12
 8013d70:	4611      	mov	r1, r2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7fe fb16 	bl	80123a4 <follow_path>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013d7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d102      	bne.n	8013d8c <f_mkdir+0x4c>
 8013d86:	2308      	movs	r3, #8
 8013d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d90:	2b04      	cmp	r3, #4
 8013d92:	d108      	bne.n	8013da6 <f_mkdir+0x66>
 8013d94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013d98:	f003 0320 	and.w	r3, r3, #32
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d002      	beq.n	8013da6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013da0:	2306      	movs	r3, #6
 8013da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013daa:	2b04      	cmp	r3, #4
 8013dac:	f040 80db 	bne.w	8013f66 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013db0:	f107 030c 	add.w	r3, r7, #12
 8013db4:	2100      	movs	r1, #0
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fd fe73 	bl	8011aa2 <create_chain>
 8013dbc:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	895b      	ldrh	r3, [r3, #10]
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	899b      	ldrh	r3, [r3, #12]
 8013dc8:	fb03 f302 	mul.w	r3, r3, r2
 8013dcc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d102      	bne.n	8013de0 <f_mkdir+0xa0>
 8013dda:	2307      	movs	r3, #7
 8013ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d102      	bne.n	8013dec <f_mkdir+0xac>
 8013de6:	2302      	movs	r3, #2
 8013de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013df2:	d102      	bne.n	8013dfa <f_mkdir+0xba>
 8013df4:	2301      	movs	r3, #1
 8013df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d106      	bne.n	8013e10 <f_mkdir+0xd0>
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fd faff 	bl	8011408 <sync_window>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013e10:	4b58      	ldr	r3, [pc, #352]	; (8013f74 <f_mkdir+0x234>)
 8013e12:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d16c      	bne.n	8013ef6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fd fbd3 	bl	80115cc <clust2sect>
 8013e26:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	3338      	adds	r3, #56	; 0x38
 8013e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	899b      	ldrh	r3, [r3, #12]
 8013e32:	461a      	mov	r2, r3
 8013e34:	2100      	movs	r1, #0
 8013e36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e38:	f7fd f91d 	bl	8011076 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013e3c:	220b      	movs	r2, #11
 8013e3e:	2120      	movs	r1, #32
 8013e40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013e42:	f7fd f918 	bl	8011076 <mem_set>
					dir[DIR_Name] = '.';
 8013e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e48:	222e      	movs	r2, #46	; 0x2e
 8013e4a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e4e:	330b      	adds	r3, #11
 8013e50:	2210      	movs	r2, #16
 8013e52:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e56:	3316      	adds	r3, #22
 8013e58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fd f8be 	bl	8010fdc <st_dword>
					st_clust(fs, dir, dcl);
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7fe f8b0 	bl	8011fcc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e6e:	3320      	adds	r3, #32
 8013e70:	2220      	movs	r2, #32
 8013e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fd f8dd 	bl	8011034 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e7c:	3321      	adds	r3, #33	; 0x21
 8013e7e:	222e      	movs	r2, #46	; 0x2e
 8013e80:	701a      	strb	r2, [r3, #0]
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	2b03      	cmp	r3, #3
 8013e8c:	d106      	bne.n	8013e9c <f_mkdir+0x15c>
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d101      	bne.n	8013e9c <f_mkdir+0x15c>
 8013e98:	2300      	movs	r3, #0
 8013e9a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013e9c:	68b8      	ldr	r0, [r7, #8]
 8013e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ea0:	3320      	adds	r3, #32
 8013ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	f7fe f891 	bl	8011fcc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	895b      	ldrh	r3, [r3, #10]
 8013eae:	653b      	str	r3, [r7, #80]	; 0x50
 8013eb0:	e01c      	b.n	8013eec <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eb4:	1c5a      	adds	r2, r3, #1
 8013eb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013eb8:	68ba      	ldr	r2, [r7, #8]
 8013eba:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fd fa9f 	bl	8011408 <sync_window>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d10d      	bne.n	8013ef4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	899b      	ldrh	r3, [r3, #12]
 8013edc:	461a      	mov	r2, r3
 8013ede:	2100      	movs	r1, #0
 8013ee0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ee2:	f7fd f8c8 	bl	8011076 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ee8:	3b01      	subs	r3, #1
 8013eea:	653b      	str	r3, [r7, #80]	; 0x50
 8013eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d1df      	bne.n	8013eb2 <f_mkdir+0x172>
 8013ef2:	e000      	b.n	8013ef6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013ef4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013ef6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d107      	bne.n	8013f0e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013efe:	f107 030c 	add.w	r3, r7, #12
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fe f934 	bl	8012170 <dir_register>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d120      	bne.n	8013f58 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f18:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f1c:	3316      	adds	r3, #22
 8013f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fd f85b 	bl	8010fdc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe f84d 	bl	8011fcc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f34:	330b      	adds	r3, #11
 8013f36:	2210      	movs	r2, #16
 8013f38:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	2201      	movs	r2, #1
 8013f3e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d10e      	bne.n	8013f66 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fd face 	bl	80114ec <sync_fs>
 8013f50:	4603      	mov	r3, r0
 8013f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013f56:	e006      	b.n	8013f66 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013f58:	f107 030c 	add.w	r3, r7, #12
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fd fd39 	bl	80119d8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3758      	adds	r7, #88	; 0x58
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	274a0000 	.word	0x274a0000

08013f78 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b088      	sub	sp, #32
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	60f8      	str	r0, [r7, #12]
 8013f80:	60b9      	str	r1, [r7, #8]
 8013f82:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013f84:	2300      	movs	r3, #0
 8013f86:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013f8c:	e017      	b.n	8013fbe <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013f8e:	f107 0310 	add.w	r3, r7, #16
 8013f92:	f107 0114 	add.w	r1, r7, #20
 8013f96:	2201      	movs	r2, #1
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f7ff f803 	bl	8012fa4 <f_read>
		if (rc != 1) break;
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d112      	bne.n	8013fca <f_gets+0x52>
		c = s[0];
 8013fa4:	7d3b      	ldrb	r3, [r7, #20]
 8013fa6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	1c5a      	adds	r2, r3, #1
 8013fac:	61ba      	str	r2, [r7, #24]
 8013fae:	7dfa      	ldrb	r2, [r7, #23]
 8013fb0:	701a      	strb	r2, [r3, #0]
		n++;
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	3301      	adds	r3, #1
 8013fb6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013fb8:	7dfb      	ldrb	r3, [r7, #23]
 8013fba:	2b0a      	cmp	r3, #10
 8013fbc:	d007      	beq.n	8013fce <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	3b01      	subs	r3, #1
 8013fc2:	69fa      	ldr	r2, [r7, #28]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	dbe2      	blt.n	8013f8e <f_gets+0x16>
 8013fc8:	e002      	b.n	8013fd0 <f_gets+0x58>
		if (rc != 1) break;
 8013fca:	bf00      	nop
 8013fcc:	e000      	b.n	8013fd0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8013fce:	bf00      	nop
	}
	*p = 0;
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d001      	beq.n	8013fe0 <f_gets+0x68>
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	e000      	b.n	8013fe2 <f_gets+0x6a>
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3720      	adds	r7, #32
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
	...

08013fec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b087      	sub	sp, #28
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	60f8      	str	r0, [r7, #12]
 8013ff4:	60b9      	str	r1, [r7, #8]
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013ffe:	2300      	movs	r3, #0
 8014000:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014002:	4b1f      	ldr	r3, [pc, #124]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 8014004:	7a5b      	ldrb	r3, [r3, #9]
 8014006:	b2db      	uxtb	r3, r3
 8014008:	2b00      	cmp	r3, #0
 801400a:	d131      	bne.n	8014070 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801400c:	4b1c      	ldr	r3, [pc, #112]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 801400e:	7a5b      	ldrb	r3, [r3, #9]
 8014010:	b2db      	uxtb	r3, r3
 8014012:	461a      	mov	r2, r3
 8014014:	4b1a      	ldr	r3, [pc, #104]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 8014016:	2100      	movs	r1, #0
 8014018:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801401a:	4b19      	ldr	r3, [pc, #100]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 801401c:	7a5b      	ldrb	r3, [r3, #9]
 801401e:	b2db      	uxtb	r3, r3
 8014020:	4a17      	ldr	r2, [pc, #92]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 8014022:	009b      	lsls	r3, r3, #2
 8014024:	4413      	add	r3, r2
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801402a:	4b15      	ldr	r3, [pc, #84]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 801402c:	7a5b      	ldrb	r3, [r3, #9]
 801402e:	b2db      	uxtb	r3, r3
 8014030:	461a      	mov	r2, r3
 8014032:	4b13      	ldr	r3, [pc, #76]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 8014034:	4413      	add	r3, r2
 8014036:	79fa      	ldrb	r2, [r7, #7]
 8014038:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801403a:	4b11      	ldr	r3, [pc, #68]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 801403c:	7a5b      	ldrb	r3, [r3, #9]
 801403e:	b2db      	uxtb	r3, r3
 8014040:	1c5a      	adds	r2, r3, #1
 8014042:	b2d1      	uxtb	r1, r2
 8014044:	4a0e      	ldr	r2, [pc, #56]	; (8014080 <FATFS_LinkDriverEx+0x94>)
 8014046:	7251      	strb	r1, [r2, #9]
 8014048:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801404a:	7dbb      	ldrb	r3, [r7, #22]
 801404c:	3330      	adds	r3, #48	; 0x30
 801404e:	b2da      	uxtb	r2, r3
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	3301      	adds	r3, #1
 8014058:	223a      	movs	r2, #58	; 0x3a
 801405a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	3302      	adds	r3, #2
 8014060:	222f      	movs	r2, #47	; 0x2f
 8014062:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	3303      	adds	r3, #3
 8014068:	2200      	movs	r2, #0
 801406a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801406c:	2300      	movs	r3, #0
 801406e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014070:	7dfb      	ldrb	r3, [r7, #23]
}
 8014072:	4618      	mov	r0, r3
 8014074:	371c      	adds	r7, #28
 8014076:	46bd      	mov	sp, r7
 8014078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407c:	4770      	bx	lr
 801407e:	bf00      	nop
 8014080:	200422dc 	.word	0x200422dc

08014084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801408e:	2200      	movs	r2, #0
 8014090:	6839      	ldr	r1, [r7, #0]
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7ff ffaa 	bl	8013fec <FATFS_LinkDriverEx>
 8014098:	4603      	mov	r3, r0
}
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <__cxa_guard_acquire>:
 80140a2:	6803      	ldr	r3, [r0, #0]
 80140a4:	07db      	lsls	r3, r3, #31
 80140a6:	d406      	bmi.n	80140b6 <__cxa_guard_acquire+0x14>
 80140a8:	7843      	ldrb	r3, [r0, #1]
 80140aa:	b103      	cbz	r3, 80140ae <__cxa_guard_acquire+0xc>
 80140ac:	deff      	udf	#255	; 0xff
 80140ae:	2301      	movs	r3, #1
 80140b0:	7043      	strb	r3, [r0, #1]
 80140b2:	4618      	mov	r0, r3
 80140b4:	4770      	bx	lr
 80140b6:	2000      	movs	r0, #0
 80140b8:	4770      	bx	lr

080140ba <__cxa_guard_release>:
 80140ba:	2301      	movs	r3, #1
 80140bc:	6003      	str	r3, [r0, #0]
 80140be:	4770      	bx	lr

080140c0 <cos>:
 80140c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140c2:	ec51 0b10 	vmov	r0, r1, d0
 80140c6:	4a1e      	ldr	r2, [pc, #120]	; (8014140 <cos+0x80>)
 80140c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80140cc:	4293      	cmp	r3, r2
 80140ce:	dc06      	bgt.n	80140de <cos+0x1e>
 80140d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014138 <cos+0x78>
 80140d4:	f000 fa74 	bl	80145c0 <__kernel_cos>
 80140d8:	ec51 0b10 	vmov	r0, r1, d0
 80140dc:	e007      	b.n	80140ee <cos+0x2e>
 80140de:	4a19      	ldr	r2, [pc, #100]	; (8014144 <cos+0x84>)
 80140e0:	4293      	cmp	r3, r2
 80140e2:	dd09      	ble.n	80140f8 <cos+0x38>
 80140e4:	ee10 2a10 	vmov	r2, s0
 80140e8:	460b      	mov	r3, r1
 80140ea:	f7ec f8e5 	bl	80002b8 <__aeabi_dsub>
 80140ee:	ec41 0b10 	vmov	d0, r0, r1
 80140f2:	b005      	add	sp, #20
 80140f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80140f8:	4668      	mov	r0, sp
 80140fa:	f000 f86d 	bl	80141d8 <__ieee754_rem_pio2>
 80140fe:	f000 0003 	and.w	r0, r0, #3
 8014102:	2801      	cmp	r0, #1
 8014104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014108:	ed9d 0b00 	vldr	d0, [sp]
 801410c:	d007      	beq.n	801411e <cos+0x5e>
 801410e:	2802      	cmp	r0, #2
 8014110:	d00e      	beq.n	8014130 <cos+0x70>
 8014112:	2800      	cmp	r0, #0
 8014114:	d0de      	beq.n	80140d4 <cos+0x14>
 8014116:	2001      	movs	r0, #1
 8014118:	f000 fe5a 	bl	8014dd0 <__kernel_sin>
 801411c:	e7dc      	b.n	80140d8 <cos+0x18>
 801411e:	f000 fe57 	bl	8014dd0 <__kernel_sin>
 8014122:	ec53 2b10 	vmov	r2, r3, d0
 8014126:	ee10 0a10 	vmov	r0, s0
 801412a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801412e:	e7de      	b.n	80140ee <cos+0x2e>
 8014130:	f000 fa46 	bl	80145c0 <__kernel_cos>
 8014134:	e7f5      	b.n	8014122 <cos+0x62>
 8014136:	bf00      	nop
	...
 8014140:	3fe921fb 	.word	0x3fe921fb
 8014144:	7fefffff 	.word	0x7fefffff

08014148 <sin>:
 8014148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801414a:	ec51 0b10 	vmov	r0, r1, d0
 801414e:	4a20      	ldr	r2, [pc, #128]	; (80141d0 <sin+0x88>)
 8014150:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014154:	4293      	cmp	r3, r2
 8014156:	dc07      	bgt.n	8014168 <sin+0x20>
 8014158:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80141c8 <sin+0x80>
 801415c:	2000      	movs	r0, #0
 801415e:	f000 fe37 	bl	8014dd0 <__kernel_sin>
 8014162:	ec51 0b10 	vmov	r0, r1, d0
 8014166:	e007      	b.n	8014178 <sin+0x30>
 8014168:	4a1a      	ldr	r2, [pc, #104]	; (80141d4 <sin+0x8c>)
 801416a:	4293      	cmp	r3, r2
 801416c:	dd09      	ble.n	8014182 <sin+0x3a>
 801416e:	ee10 2a10 	vmov	r2, s0
 8014172:	460b      	mov	r3, r1
 8014174:	f7ec f8a0 	bl	80002b8 <__aeabi_dsub>
 8014178:	ec41 0b10 	vmov	d0, r0, r1
 801417c:	b005      	add	sp, #20
 801417e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014182:	4668      	mov	r0, sp
 8014184:	f000 f828 	bl	80141d8 <__ieee754_rem_pio2>
 8014188:	f000 0003 	and.w	r0, r0, #3
 801418c:	2801      	cmp	r0, #1
 801418e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014192:	ed9d 0b00 	vldr	d0, [sp]
 8014196:	d004      	beq.n	80141a2 <sin+0x5a>
 8014198:	2802      	cmp	r0, #2
 801419a:	d005      	beq.n	80141a8 <sin+0x60>
 801419c:	b970      	cbnz	r0, 80141bc <sin+0x74>
 801419e:	2001      	movs	r0, #1
 80141a0:	e7dd      	b.n	801415e <sin+0x16>
 80141a2:	f000 fa0d 	bl	80145c0 <__kernel_cos>
 80141a6:	e7dc      	b.n	8014162 <sin+0x1a>
 80141a8:	2001      	movs	r0, #1
 80141aa:	f000 fe11 	bl	8014dd0 <__kernel_sin>
 80141ae:	ec53 2b10 	vmov	r2, r3, d0
 80141b2:	ee10 0a10 	vmov	r0, s0
 80141b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80141ba:	e7dd      	b.n	8014178 <sin+0x30>
 80141bc:	f000 fa00 	bl	80145c0 <__kernel_cos>
 80141c0:	e7f5      	b.n	80141ae <sin+0x66>
 80141c2:	bf00      	nop
 80141c4:	f3af 8000 	nop.w
	...
 80141d0:	3fe921fb 	.word	0x3fe921fb
 80141d4:	7fefffff 	.word	0x7fefffff

080141d8 <__ieee754_rem_pio2>:
 80141d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141dc:	ec57 6b10 	vmov	r6, r7, d0
 80141e0:	4bc3      	ldr	r3, [pc, #780]	; (80144f0 <__ieee754_rem_pio2+0x318>)
 80141e2:	b08d      	sub	sp, #52	; 0x34
 80141e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80141e8:	4598      	cmp	r8, r3
 80141ea:	4604      	mov	r4, r0
 80141ec:	9704      	str	r7, [sp, #16]
 80141ee:	dc07      	bgt.n	8014200 <__ieee754_rem_pio2+0x28>
 80141f0:	2200      	movs	r2, #0
 80141f2:	2300      	movs	r3, #0
 80141f4:	ed84 0b00 	vstr	d0, [r4]
 80141f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80141fc:	2500      	movs	r5, #0
 80141fe:	e027      	b.n	8014250 <__ieee754_rem_pio2+0x78>
 8014200:	4bbc      	ldr	r3, [pc, #752]	; (80144f4 <__ieee754_rem_pio2+0x31c>)
 8014202:	4598      	cmp	r8, r3
 8014204:	dc75      	bgt.n	80142f2 <__ieee754_rem_pio2+0x11a>
 8014206:	9b04      	ldr	r3, [sp, #16]
 8014208:	4dbb      	ldr	r5, [pc, #748]	; (80144f8 <__ieee754_rem_pio2+0x320>)
 801420a:	2b00      	cmp	r3, #0
 801420c:	ee10 0a10 	vmov	r0, s0
 8014210:	a3a9      	add	r3, pc, #676	; (adr r3, 80144b8 <__ieee754_rem_pio2+0x2e0>)
 8014212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014216:	4639      	mov	r1, r7
 8014218:	dd36      	ble.n	8014288 <__ieee754_rem_pio2+0xb0>
 801421a:	f7ec f84d 	bl	80002b8 <__aeabi_dsub>
 801421e:	45a8      	cmp	r8, r5
 8014220:	4606      	mov	r6, r0
 8014222:	460f      	mov	r7, r1
 8014224:	d018      	beq.n	8014258 <__ieee754_rem_pio2+0x80>
 8014226:	a3a6      	add	r3, pc, #664	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x2e8>)
 8014228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422c:	f7ec f844 	bl	80002b8 <__aeabi_dsub>
 8014230:	4602      	mov	r2, r0
 8014232:	460b      	mov	r3, r1
 8014234:	e9c4 2300 	strd	r2, r3, [r4]
 8014238:	4630      	mov	r0, r6
 801423a:	4639      	mov	r1, r7
 801423c:	f7ec f83c 	bl	80002b8 <__aeabi_dsub>
 8014240:	a39f      	add	r3, pc, #636	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x2e8>)
 8014242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014246:	f7ec f837 	bl	80002b8 <__aeabi_dsub>
 801424a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801424e:	2501      	movs	r5, #1
 8014250:	4628      	mov	r0, r5
 8014252:	b00d      	add	sp, #52	; 0x34
 8014254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014258:	a39b      	add	r3, pc, #620	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x2f0>)
 801425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425e:	f7ec f82b 	bl	80002b8 <__aeabi_dsub>
 8014262:	a39b      	add	r3, pc, #620	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x2f8>)
 8014264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014268:	4606      	mov	r6, r0
 801426a:	460f      	mov	r7, r1
 801426c:	f7ec f824 	bl	80002b8 <__aeabi_dsub>
 8014270:	4602      	mov	r2, r0
 8014272:	460b      	mov	r3, r1
 8014274:	e9c4 2300 	strd	r2, r3, [r4]
 8014278:	4630      	mov	r0, r6
 801427a:	4639      	mov	r1, r7
 801427c:	f7ec f81c 	bl	80002b8 <__aeabi_dsub>
 8014280:	a393      	add	r3, pc, #588	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x2f8>)
 8014282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014286:	e7de      	b.n	8014246 <__ieee754_rem_pio2+0x6e>
 8014288:	f7ec f818 	bl	80002bc <__adddf3>
 801428c:	45a8      	cmp	r8, r5
 801428e:	4606      	mov	r6, r0
 8014290:	460f      	mov	r7, r1
 8014292:	d016      	beq.n	80142c2 <__ieee754_rem_pio2+0xea>
 8014294:	a38a      	add	r3, pc, #552	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x2e8>)
 8014296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429a:	f7ec f80f 	bl	80002bc <__adddf3>
 801429e:	4602      	mov	r2, r0
 80142a0:	460b      	mov	r3, r1
 80142a2:	e9c4 2300 	strd	r2, r3, [r4]
 80142a6:	4630      	mov	r0, r6
 80142a8:	4639      	mov	r1, r7
 80142aa:	f7ec f805 	bl	80002b8 <__aeabi_dsub>
 80142ae:	a384      	add	r3, pc, #528	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x2e8>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	f7ec f802 	bl	80002bc <__adddf3>
 80142b8:	f04f 35ff 	mov.w	r5, #4294967295
 80142bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142c0:	e7c6      	b.n	8014250 <__ieee754_rem_pio2+0x78>
 80142c2:	a381      	add	r3, pc, #516	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x2f0>)
 80142c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c8:	f7eb fff8 	bl	80002bc <__adddf3>
 80142cc:	a380      	add	r3, pc, #512	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x2f8>)
 80142ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d2:	4606      	mov	r6, r0
 80142d4:	460f      	mov	r7, r1
 80142d6:	f7eb fff1 	bl	80002bc <__adddf3>
 80142da:	4602      	mov	r2, r0
 80142dc:	460b      	mov	r3, r1
 80142de:	e9c4 2300 	strd	r2, r3, [r4]
 80142e2:	4630      	mov	r0, r6
 80142e4:	4639      	mov	r1, r7
 80142e6:	f7eb ffe7 	bl	80002b8 <__aeabi_dsub>
 80142ea:	a379      	add	r3, pc, #484	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x2f8>)
 80142ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f0:	e7e0      	b.n	80142b4 <__ieee754_rem_pio2+0xdc>
 80142f2:	4b82      	ldr	r3, [pc, #520]	; (80144fc <__ieee754_rem_pio2+0x324>)
 80142f4:	4598      	cmp	r8, r3
 80142f6:	f300 80d0 	bgt.w	801449a <__ieee754_rem_pio2+0x2c2>
 80142fa:	f000 fe23 	bl	8014f44 <fabs>
 80142fe:	ec57 6b10 	vmov	r6, r7, d0
 8014302:	ee10 0a10 	vmov	r0, s0
 8014306:	a374      	add	r3, pc, #464	; (adr r3, 80144d8 <__ieee754_rem_pio2+0x300>)
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	4639      	mov	r1, r7
 801430e:	f7ec f98b 	bl	8000628 <__aeabi_dmul>
 8014312:	2200      	movs	r2, #0
 8014314:	4b7a      	ldr	r3, [pc, #488]	; (8014500 <__ieee754_rem_pio2+0x328>)
 8014316:	f7eb ffd1 	bl	80002bc <__adddf3>
 801431a:	f7ec fc35 	bl	8000b88 <__aeabi_d2iz>
 801431e:	4605      	mov	r5, r0
 8014320:	f7ec f918 	bl	8000554 <__aeabi_i2d>
 8014324:	a364      	add	r3, pc, #400	; (adr r3, 80144b8 <__ieee754_rem_pio2+0x2e0>)
 8014326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801432e:	f7ec f97b 	bl	8000628 <__aeabi_dmul>
 8014332:	4602      	mov	r2, r0
 8014334:	460b      	mov	r3, r1
 8014336:	4630      	mov	r0, r6
 8014338:	4639      	mov	r1, r7
 801433a:	f7eb ffbd 	bl	80002b8 <__aeabi_dsub>
 801433e:	a360      	add	r3, pc, #384	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x2e8>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	4682      	mov	sl, r0
 8014346:	468b      	mov	fp, r1
 8014348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801434c:	f7ec f96c 	bl	8000628 <__aeabi_dmul>
 8014350:	2d1f      	cmp	r5, #31
 8014352:	4606      	mov	r6, r0
 8014354:	460f      	mov	r7, r1
 8014356:	dc0c      	bgt.n	8014372 <__ieee754_rem_pio2+0x19a>
 8014358:	1e6a      	subs	r2, r5, #1
 801435a:	4b6a      	ldr	r3, [pc, #424]	; (8014504 <__ieee754_rem_pio2+0x32c>)
 801435c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014360:	4543      	cmp	r3, r8
 8014362:	d006      	beq.n	8014372 <__ieee754_rem_pio2+0x19a>
 8014364:	4632      	mov	r2, r6
 8014366:	463b      	mov	r3, r7
 8014368:	4650      	mov	r0, sl
 801436a:	4659      	mov	r1, fp
 801436c:	f7eb ffa4 	bl	80002b8 <__aeabi_dsub>
 8014370:	e00e      	b.n	8014390 <__ieee754_rem_pio2+0x1b8>
 8014372:	4632      	mov	r2, r6
 8014374:	463b      	mov	r3, r7
 8014376:	4650      	mov	r0, sl
 8014378:	4659      	mov	r1, fp
 801437a:	f7eb ff9d 	bl	80002b8 <__aeabi_dsub>
 801437e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014382:	9305      	str	r3, [sp, #20]
 8014384:	9a05      	ldr	r2, [sp, #20]
 8014386:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801438a:	1ad3      	subs	r3, r2, r3
 801438c:	2b10      	cmp	r3, #16
 801438e:	dc02      	bgt.n	8014396 <__ieee754_rem_pio2+0x1be>
 8014390:	e9c4 0100 	strd	r0, r1, [r4]
 8014394:	e039      	b.n	801440a <__ieee754_rem_pio2+0x232>
 8014396:	a34c      	add	r3, pc, #304	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x2f0>)
 8014398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143a0:	f7ec f942 	bl	8000628 <__aeabi_dmul>
 80143a4:	4606      	mov	r6, r0
 80143a6:	460f      	mov	r7, r1
 80143a8:	4602      	mov	r2, r0
 80143aa:	460b      	mov	r3, r1
 80143ac:	4650      	mov	r0, sl
 80143ae:	4659      	mov	r1, fp
 80143b0:	f7eb ff82 	bl	80002b8 <__aeabi_dsub>
 80143b4:	4602      	mov	r2, r0
 80143b6:	460b      	mov	r3, r1
 80143b8:	4680      	mov	r8, r0
 80143ba:	4689      	mov	r9, r1
 80143bc:	4650      	mov	r0, sl
 80143be:	4659      	mov	r1, fp
 80143c0:	f7eb ff7a 	bl	80002b8 <__aeabi_dsub>
 80143c4:	4632      	mov	r2, r6
 80143c6:	463b      	mov	r3, r7
 80143c8:	f7eb ff76 	bl	80002b8 <__aeabi_dsub>
 80143cc:	a340      	add	r3, pc, #256	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x2f8>)
 80143ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d2:	4606      	mov	r6, r0
 80143d4:	460f      	mov	r7, r1
 80143d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143da:	f7ec f925 	bl	8000628 <__aeabi_dmul>
 80143de:	4632      	mov	r2, r6
 80143e0:	463b      	mov	r3, r7
 80143e2:	f7eb ff69 	bl	80002b8 <__aeabi_dsub>
 80143e6:	4602      	mov	r2, r0
 80143e8:	460b      	mov	r3, r1
 80143ea:	4606      	mov	r6, r0
 80143ec:	460f      	mov	r7, r1
 80143ee:	4640      	mov	r0, r8
 80143f0:	4649      	mov	r1, r9
 80143f2:	f7eb ff61 	bl	80002b8 <__aeabi_dsub>
 80143f6:	9a05      	ldr	r2, [sp, #20]
 80143f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80143fc:	1ad3      	subs	r3, r2, r3
 80143fe:	2b31      	cmp	r3, #49	; 0x31
 8014400:	dc20      	bgt.n	8014444 <__ieee754_rem_pio2+0x26c>
 8014402:	e9c4 0100 	strd	r0, r1, [r4]
 8014406:	46c2      	mov	sl, r8
 8014408:	46cb      	mov	fp, r9
 801440a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801440e:	4650      	mov	r0, sl
 8014410:	4642      	mov	r2, r8
 8014412:	464b      	mov	r3, r9
 8014414:	4659      	mov	r1, fp
 8014416:	f7eb ff4f 	bl	80002b8 <__aeabi_dsub>
 801441a:	463b      	mov	r3, r7
 801441c:	4632      	mov	r2, r6
 801441e:	f7eb ff4b 	bl	80002b8 <__aeabi_dsub>
 8014422:	9b04      	ldr	r3, [sp, #16]
 8014424:	2b00      	cmp	r3, #0
 8014426:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801442a:	f6bf af11 	bge.w	8014250 <__ieee754_rem_pio2+0x78>
 801442e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014432:	6063      	str	r3, [r4, #4]
 8014434:	f8c4 8000 	str.w	r8, [r4]
 8014438:	60a0      	str	r0, [r4, #8]
 801443a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801443e:	60e3      	str	r3, [r4, #12]
 8014440:	426d      	negs	r5, r5
 8014442:	e705      	b.n	8014250 <__ieee754_rem_pio2+0x78>
 8014444:	a326      	add	r3, pc, #152	; (adr r3, 80144e0 <__ieee754_rem_pio2+0x308>)
 8014446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801444e:	f7ec f8eb 	bl	8000628 <__aeabi_dmul>
 8014452:	4606      	mov	r6, r0
 8014454:	460f      	mov	r7, r1
 8014456:	4602      	mov	r2, r0
 8014458:	460b      	mov	r3, r1
 801445a:	4640      	mov	r0, r8
 801445c:	4649      	mov	r1, r9
 801445e:	f7eb ff2b 	bl	80002b8 <__aeabi_dsub>
 8014462:	4602      	mov	r2, r0
 8014464:	460b      	mov	r3, r1
 8014466:	4682      	mov	sl, r0
 8014468:	468b      	mov	fp, r1
 801446a:	4640      	mov	r0, r8
 801446c:	4649      	mov	r1, r9
 801446e:	f7eb ff23 	bl	80002b8 <__aeabi_dsub>
 8014472:	4632      	mov	r2, r6
 8014474:	463b      	mov	r3, r7
 8014476:	f7eb ff1f 	bl	80002b8 <__aeabi_dsub>
 801447a:	a31b      	add	r3, pc, #108	; (adr r3, 80144e8 <__ieee754_rem_pio2+0x310>)
 801447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014480:	4606      	mov	r6, r0
 8014482:	460f      	mov	r7, r1
 8014484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014488:	f7ec f8ce 	bl	8000628 <__aeabi_dmul>
 801448c:	4632      	mov	r2, r6
 801448e:	463b      	mov	r3, r7
 8014490:	f7eb ff12 	bl	80002b8 <__aeabi_dsub>
 8014494:	4606      	mov	r6, r0
 8014496:	460f      	mov	r7, r1
 8014498:	e764      	b.n	8014364 <__ieee754_rem_pio2+0x18c>
 801449a:	4b1b      	ldr	r3, [pc, #108]	; (8014508 <__ieee754_rem_pio2+0x330>)
 801449c:	4598      	cmp	r8, r3
 801449e:	dd35      	ble.n	801450c <__ieee754_rem_pio2+0x334>
 80144a0:	ee10 2a10 	vmov	r2, s0
 80144a4:	463b      	mov	r3, r7
 80144a6:	4630      	mov	r0, r6
 80144a8:	4639      	mov	r1, r7
 80144aa:	f7eb ff05 	bl	80002b8 <__aeabi_dsub>
 80144ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144b2:	e9c4 0100 	strd	r0, r1, [r4]
 80144b6:	e6a1      	b.n	80141fc <__ieee754_rem_pio2+0x24>
 80144b8:	54400000 	.word	0x54400000
 80144bc:	3ff921fb 	.word	0x3ff921fb
 80144c0:	1a626331 	.word	0x1a626331
 80144c4:	3dd0b461 	.word	0x3dd0b461
 80144c8:	1a600000 	.word	0x1a600000
 80144cc:	3dd0b461 	.word	0x3dd0b461
 80144d0:	2e037073 	.word	0x2e037073
 80144d4:	3ba3198a 	.word	0x3ba3198a
 80144d8:	6dc9c883 	.word	0x6dc9c883
 80144dc:	3fe45f30 	.word	0x3fe45f30
 80144e0:	2e000000 	.word	0x2e000000
 80144e4:	3ba3198a 	.word	0x3ba3198a
 80144e8:	252049c1 	.word	0x252049c1
 80144ec:	397b839a 	.word	0x397b839a
 80144f0:	3fe921fb 	.word	0x3fe921fb
 80144f4:	4002d97b 	.word	0x4002d97b
 80144f8:	3ff921fb 	.word	0x3ff921fb
 80144fc:	413921fb 	.word	0x413921fb
 8014500:	3fe00000 	.word	0x3fe00000
 8014504:	08019a6c 	.word	0x08019a6c
 8014508:	7fefffff 	.word	0x7fefffff
 801450c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014510:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014514:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014518:	4630      	mov	r0, r6
 801451a:	460f      	mov	r7, r1
 801451c:	f7ec fb34 	bl	8000b88 <__aeabi_d2iz>
 8014520:	f7ec f818 	bl	8000554 <__aeabi_i2d>
 8014524:	4602      	mov	r2, r0
 8014526:	460b      	mov	r3, r1
 8014528:	4630      	mov	r0, r6
 801452a:	4639      	mov	r1, r7
 801452c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014530:	f7eb fec2 	bl	80002b8 <__aeabi_dsub>
 8014534:	2200      	movs	r2, #0
 8014536:	4b1f      	ldr	r3, [pc, #124]	; (80145b4 <__ieee754_rem_pio2+0x3dc>)
 8014538:	f7ec f876 	bl	8000628 <__aeabi_dmul>
 801453c:	460f      	mov	r7, r1
 801453e:	4606      	mov	r6, r0
 8014540:	f7ec fb22 	bl	8000b88 <__aeabi_d2iz>
 8014544:	f7ec f806 	bl	8000554 <__aeabi_i2d>
 8014548:	4602      	mov	r2, r0
 801454a:	460b      	mov	r3, r1
 801454c:	4630      	mov	r0, r6
 801454e:	4639      	mov	r1, r7
 8014550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014554:	f7eb feb0 	bl	80002b8 <__aeabi_dsub>
 8014558:	2200      	movs	r2, #0
 801455a:	4b16      	ldr	r3, [pc, #88]	; (80145b4 <__ieee754_rem_pio2+0x3dc>)
 801455c:	f7ec f864 	bl	8000628 <__aeabi_dmul>
 8014560:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014564:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014568:	f04f 0803 	mov.w	r8, #3
 801456c:	2600      	movs	r6, #0
 801456e:	2700      	movs	r7, #0
 8014570:	4632      	mov	r2, r6
 8014572:	463b      	mov	r3, r7
 8014574:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014578:	f108 3aff 	add.w	sl, r8, #4294967295
 801457c:	f7ec fabc 	bl	8000af8 <__aeabi_dcmpeq>
 8014580:	b9b0      	cbnz	r0, 80145b0 <__ieee754_rem_pio2+0x3d8>
 8014582:	4b0d      	ldr	r3, [pc, #52]	; (80145b8 <__ieee754_rem_pio2+0x3e0>)
 8014584:	9301      	str	r3, [sp, #4]
 8014586:	2302      	movs	r3, #2
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	462a      	mov	r2, r5
 801458c:	4643      	mov	r3, r8
 801458e:	4621      	mov	r1, r4
 8014590:	a806      	add	r0, sp, #24
 8014592:	f000 f8dd 	bl	8014750 <__kernel_rem_pio2>
 8014596:	9b04      	ldr	r3, [sp, #16]
 8014598:	2b00      	cmp	r3, #0
 801459a:	4605      	mov	r5, r0
 801459c:	f6bf ae58 	bge.w	8014250 <__ieee754_rem_pio2+0x78>
 80145a0:	6863      	ldr	r3, [r4, #4]
 80145a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80145a6:	6063      	str	r3, [r4, #4]
 80145a8:	68e3      	ldr	r3, [r4, #12]
 80145aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80145ae:	e746      	b.n	801443e <__ieee754_rem_pio2+0x266>
 80145b0:	46d0      	mov	r8, sl
 80145b2:	e7dd      	b.n	8014570 <__ieee754_rem_pio2+0x398>
 80145b4:	41700000 	.word	0x41700000
 80145b8:	08019aec 	.word	0x08019aec
 80145bc:	00000000 	.word	0x00000000

080145c0 <__kernel_cos>:
 80145c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c4:	ec59 8b10 	vmov	r8, r9, d0
 80145c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80145cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80145d0:	ed2d 8b02 	vpush	{d8}
 80145d4:	eeb0 8a41 	vmov.f32	s16, s2
 80145d8:	eef0 8a61 	vmov.f32	s17, s3
 80145dc:	da07      	bge.n	80145ee <__kernel_cos+0x2e>
 80145de:	ee10 0a10 	vmov	r0, s0
 80145e2:	4649      	mov	r1, r9
 80145e4:	f7ec fad0 	bl	8000b88 <__aeabi_d2iz>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	f000 8089 	beq.w	8014700 <__kernel_cos+0x140>
 80145ee:	4642      	mov	r2, r8
 80145f0:	464b      	mov	r3, r9
 80145f2:	4640      	mov	r0, r8
 80145f4:	4649      	mov	r1, r9
 80145f6:	f7ec f817 	bl	8000628 <__aeabi_dmul>
 80145fa:	2200      	movs	r2, #0
 80145fc:	4b4e      	ldr	r3, [pc, #312]	; (8014738 <__kernel_cos+0x178>)
 80145fe:	4604      	mov	r4, r0
 8014600:	460d      	mov	r5, r1
 8014602:	f7ec f811 	bl	8000628 <__aeabi_dmul>
 8014606:	a340      	add	r3, pc, #256	; (adr r3, 8014708 <__kernel_cos+0x148>)
 8014608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460c:	4682      	mov	sl, r0
 801460e:	468b      	mov	fp, r1
 8014610:	4620      	mov	r0, r4
 8014612:	4629      	mov	r1, r5
 8014614:	f7ec f808 	bl	8000628 <__aeabi_dmul>
 8014618:	a33d      	add	r3, pc, #244	; (adr r3, 8014710 <__kernel_cos+0x150>)
 801461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461e:	f7eb fe4d 	bl	80002bc <__adddf3>
 8014622:	4622      	mov	r2, r4
 8014624:	462b      	mov	r3, r5
 8014626:	f7eb ffff 	bl	8000628 <__aeabi_dmul>
 801462a:	a33b      	add	r3, pc, #236	; (adr r3, 8014718 <__kernel_cos+0x158>)
 801462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014630:	f7eb fe42 	bl	80002b8 <__aeabi_dsub>
 8014634:	4622      	mov	r2, r4
 8014636:	462b      	mov	r3, r5
 8014638:	f7eb fff6 	bl	8000628 <__aeabi_dmul>
 801463c:	a338      	add	r3, pc, #224	; (adr r3, 8014720 <__kernel_cos+0x160>)
 801463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014642:	f7eb fe3b 	bl	80002bc <__adddf3>
 8014646:	4622      	mov	r2, r4
 8014648:	462b      	mov	r3, r5
 801464a:	f7eb ffed 	bl	8000628 <__aeabi_dmul>
 801464e:	a336      	add	r3, pc, #216	; (adr r3, 8014728 <__kernel_cos+0x168>)
 8014650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014654:	f7eb fe30 	bl	80002b8 <__aeabi_dsub>
 8014658:	4622      	mov	r2, r4
 801465a:	462b      	mov	r3, r5
 801465c:	f7eb ffe4 	bl	8000628 <__aeabi_dmul>
 8014660:	a333      	add	r3, pc, #204	; (adr r3, 8014730 <__kernel_cos+0x170>)
 8014662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014666:	f7eb fe29 	bl	80002bc <__adddf3>
 801466a:	4622      	mov	r2, r4
 801466c:	462b      	mov	r3, r5
 801466e:	f7eb ffdb 	bl	8000628 <__aeabi_dmul>
 8014672:	4622      	mov	r2, r4
 8014674:	462b      	mov	r3, r5
 8014676:	f7eb ffd7 	bl	8000628 <__aeabi_dmul>
 801467a:	ec53 2b18 	vmov	r2, r3, d8
 801467e:	4604      	mov	r4, r0
 8014680:	460d      	mov	r5, r1
 8014682:	4640      	mov	r0, r8
 8014684:	4649      	mov	r1, r9
 8014686:	f7eb ffcf 	bl	8000628 <__aeabi_dmul>
 801468a:	460b      	mov	r3, r1
 801468c:	4602      	mov	r2, r0
 801468e:	4629      	mov	r1, r5
 8014690:	4620      	mov	r0, r4
 8014692:	f7eb fe11 	bl	80002b8 <__aeabi_dsub>
 8014696:	4b29      	ldr	r3, [pc, #164]	; (801473c <__kernel_cos+0x17c>)
 8014698:	429e      	cmp	r6, r3
 801469a:	4680      	mov	r8, r0
 801469c:	4689      	mov	r9, r1
 801469e:	dc11      	bgt.n	80146c4 <__kernel_cos+0x104>
 80146a0:	4602      	mov	r2, r0
 80146a2:	460b      	mov	r3, r1
 80146a4:	4650      	mov	r0, sl
 80146a6:	4659      	mov	r1, fp
 80146a8:	f7eb fe06 	bl	80002b8 <__aeabi_dsub>
 80146ac:	460b      	mov	r3, r1
 80146ae:	4924      	ldr	r1, [pc, #144]	; (8014740 <__kernel_cos+0x180>)
 80146b0:	4602      	mov	r2, r0
 80146b2:	2000      	movs	r0, #0
 80146b4:	f7eb fe00 	bl	80002b8 <__aeabi_dsub>
 80146b8:	ecbd 8b02 	vpop	{d8}
 80146bc:	ec41 0b10 	vmov	d0, r0, r1
 80146c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146c4:	4b1f      	ldr	r3, [pc, #124]	; (8014744 <__kernel_cos+0x184>)
 80146c6:	491e      	ldr	r1, [pc, #120]	; (8014740 <__kernel_cos+0x180>)
 80146c8:	429e      	cmp	r6, r3
 80146ca:	bfcc      	ite	gt
 80146cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8014748 <__kernel_cos+0x188>)
 80146ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80146d2:	2400      	movs	r4, #0
 80146d4:	4622      	mov	r2, r4
 80146d6:	462b      	mov	r3, r5
 80146d8:	2000      	movs	r0, #0
 80146da:	f7eb fded 	bl	80002b8 <__aeabi_dsub>
 80146de:	4622      	mov	r2, r4
 80146e0:	4606      	mov	r6, r0
 80146e2:	460f      	mov	r7, r1
 80146e4:	462b      	mov	r3, r5
 80146e6:	4650      	mov	r0, sl
 80146e8:	4659      	mov	r1, fp
 80146ea:	f7eb fde5 	bl	80002b8 <__aeabi_dsub>
 80146ee:	4642      	mov	r2, r8
 80146f0:	464b      	mov	r3, r9
 80146f2:	f7eb fde1 	bl	80002b8 <__aeabi_dsub>
 80146f6:	4602      	mov	r2, r0
 80146f8:	460b      	mov	r3, r1
 80146fa:	4630      	mov	r0, r6
 80146fc:	4639      	mov	r1, r7
 80146fe:	e7d9      	b.n	80146b4 <__kernel_cos+0xf4>
 8014700:	2000      	movs	r0, #0
 8014702:	490f      	ldr	r1, [pc, #60]	; (8014740 <__kernel_cos+0x180>)
 8014704:	e7d8      	b.n	80146b8 <__kernel_cos+0xf8>
 8014706:	bf00      	nop
 8014708:	be8838d4 	.word	0xbe8838d4
 801470c:	bda8fae9 	.word	0xbda8fae9
 8014710:	bdb4b1c4 	.word	0xbdb4b1c4
 8014714:	3e21ee9e 	.word	0x3e21ee9e
 8014718:	809c52ad 	.word	0x809c52ad
 801471c:	3e927e4f 	.word	0x3e927e4f
 8014720:	19cb1590 	.word	0x19cb1590
 8014724:	3efa01a0 	.word	0x3efa01a0
 8014728:	16c15177 	.word	0x16c15177
 801472c:	3f56c16c 	.word	0x3f56c16c
 8014730:	5555554c 	.word	0x5555554c
 8014734:	3fa55555 	.word	0x3fa55555
 8014738:	3fe00000 	.word	0x3fe00000
 801473c:	3fd33332 	.word	0x3fd33332
 8014740:	3ff00000 	.word	0x3ff00000
 8014744:	3fe90000 	.word	0x3fe90000
 8014748:	3fd20000 	.word	0x3fd20000
 801474c:	00000000 	.word	0x00000000

08014750 <__kernel_rem_pio2>:
 8014750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014754:	ed2d 8b02 	vpush	{d8}
 8014758:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801475c:	1ed4      	subs	r4, r2, #3
 801475e:	9308      	str	r3, [sp, #32]
 8014760:	9101      	str	r1, [sp, #4]
 8014762:	4bc5      	ldr	r3, [pc, #788]	; (8014a78 <__kernel_rem_pio2+0x328>)
 8014764:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014766:	9009      	str	r0, [sp, #36]	; 0x24
 8014768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801476c:	9304      	str	r3, [sp, #16]
 801476e:	9b08      	ldr	r3, [sp, #32]
 8014770:	3b01      	subs	r3, #1
 8014772:	9307      	str	r3, [sp, #28]
 8014774:	2318      	movs	r3, #24
 8014776:	fb94 f4f3 	sdiv	r4, r4, r3
 801477a:	f06f 0317 	mvn.w	r3, #23
 801477e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014782:	fb04 3303 	mla	r3, r4, r3, r3
 8014786:	eb03 0a02 	add.w	sl, r3, r2
 801478a:	9b04      	ldr	r3, [sp, #16]
 801478c:	9a07      	ldr	r2, [sp, #28]
 801478e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014a68 <__kernel_rem_pio2+0x318>
 8014792:	eb03 0802 	add.w	r8, r3, r2
 8014796:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014798:	1aa7      	subs	r7, r4, r2
 801479a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801479e:	ae22      	add	r6, sp, #136	; 0x88
 80147a0:	2500      	movs	r5, #0
 80147a2:	4545      	cmp	r5, r8
 80147a4:	dd13      	ble.n	80147ce <__kernel_rem_pio2+0x7e>
 80147a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014a68 <__kernel_rem_pio2+0x318>
 80147aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80147ae:	2600      	movs	r6, #0
 80147b0:	9b04      	ldr	r3, [sp, #16]
 80147b2:	429e      	cmp	r6, r3
 80147b4:	dc32      	bgt.n	801481c <__kernel_rem_pio2+0xcc>
 80147b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b8:	9302      	str	r3, [sp, #8]
 80147ba:	9b08      	ldr	r3, [sp, #32]
 80147bc:	199d      	adds	r5, r3, r6
 80147be:	ab22      	add	r3, sp, #136	; 0x88
 80147c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80147c4:	9306      	str	r3, [sp, #24]
 80147c6:	ec59 8b18 	vmov	r8, r9, d8
 80147ca:	2700      	movs	r7, #0
 80147cc:	e01f      	b.n	801480e <__kernel_rem_pio2+0xbe>
 80147ce:	42ef      	cmn	r7, r5
 80147d0:	d407      	bmi.n	80147e2 <__kernel_rem_pio2+0x92>
 80147d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80147d6:	f7eb febd 	bl	8000554 <__aeabi_i2d>
 80147da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80147de:	3501      	adds	r5, #1
 80147e0:	e7df      	b.n	80147a2 <__kernel_rem_pio2+0x52>
 80147e2:	ec51 0b18 	vmov	r0, r1, d8
 80147e6:	e7f8      	b.n	80147da <__kernel_rem_pio2+0x8a>
 80147e8:	9906      	ldr	r1, [sp, #24]
 80147ea:	9d02      	ldr	r5, [sp, #8]
 80147ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80147f0:	9106      	str	r1, [sp, #24]
 80147f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80147f6:	9502      	str	r5, [sp, #8]
 80147f8:	f7eb ff16 	bl	8000628 <__aeabi_dmul>
 80147fc:	4602      	mov	r2, r0
 80147fe:	460b      	mov	r3, r1
 8014800:	4640      	mov	r0, r8
 8014802:	4649      	mov	r1, r9
 8014804:	f7eb fd5a 	bl	80002bc <__adddf3>
 8014808:	3701      	adds	r7, #1
 801480a:	4680      	mov	r8, r0
 801480c:	4689      	mov	r9, r1
 801480e:	9b07      	ldr	r3, [sp, #28]
 8014810:	429f      	cmp	r7, r3
 8014812:	dde9      	ble.n	80147e8 <__kernel_rem_pio2+0x98>
 8014814:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014818:	3601      	adds	r6, #1
 801481a:	e7c9      	b.n	80147b0 <__kernel_rem_pio2+0x60>
 801481c:	9b04      	ldr	r3, [sp, #16]
 801481e:	aa0e      	add	r2, sp, #56	; 0x38
 8014820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014824:	930c      	str	r3, [sp, #48]	; 0x30
 8014826:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014828:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801482c:	9c04      	ldr	r4, [sp, #16]
 801482e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014830:	ab9a      	add	r3, sp, #616	; 0x268
 8014832:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014836:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801483a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801483e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014842:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014846:	ab9a      	add	r3, sp, #616	; 0x268
 8014848:	445b      	add	r3, fp
 801484a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801484e:	2500      	movs	r5, #0
 8014850:	1b63      	subs	r3, r4, r5
 8014852:	2b00      	cmp	r3, #0
 8014854:	dc78      	bgt.n	8014948 <__kernel_rem_pio2+0x1f8>
 8014856:	4650      	mov	r0, sl
 8014858:	ec49 8b10 	vmov	d0, r8, r9
 801485c:	f000 fc00 	bl	8015060 <scalbn>
 8014860:	ec57 6b10 	vmov	r6, r7, d0
 8014864:	2200      	movs	r2, #0
 8014866:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801486a:	ee10 0a10 	vmov	r0, s0
 801486e:	4639      	mov	r1, r7
 8014870:	f7eb feda 	bl	8000628 <__aeabi_dmul>
 8014874:	ec41 0b10 	vmov	d0, r0, r1
 8014878:	f000 fb6e 	bl	8014f58 <floor>
 801487c:	2200      	movs	r2, #0
 801487e:	ec51 0b10 	vmov	r0, r1, d0
 8014882:	4b7e      	ldr	r3, [pc, #504]	; (8014a7c <__kernel_rem_pio2+0x32c>)
 8014884:	f7eb fed0 	bl	8000628 <__aeabi_dmul>
 8014888:	4602      	mov	r2, r0
 801488a:	460b      	mov	r3, r1
 801488c:	4630      	mov	r0, r6
 801488e:	4639      	mov	r1, r7
 8014890:	f7eb fd12 	bl	80002b8 <__aeabi_dsub>
 8014894:	460f      	mov	r7, r1
 8014896:	4606      	mov	r6, r0
 8014898:	f7ec f976 	bl	8000b88 <__aeabi_d2iz>
 801489c:	9006      	str	r0, [sp, #24]
 801489e:	f7eb fe59 	bl	8000554 <__aeabi_i2d>
 80148a2:	4602      	mov	r2, r0
 80148a4:	460b      	mov	r3, r1
 80148a6:	4630      	mov	r0, r6
 80148a8:	4639      	mov	r1, r7
 80148aa:	f7eb fd05 	bl	80002b8 <__aeabi_dsub>
 80148ae:	f1ba 0f00 	cmp.w	sl, #0
 80148b2:	4606      	mov	r6, r0
 80148b4:	460f      	mov	r7, r1
 80148b6:	dd6c      	ble.n	8014992 <__kernel_rem_pio2+0x242>
 80148b8:	1e62      	subs	r2, r4, #1
 80148ba:	ab0e      	add	r3, sp, #56	; 0x38
 80148bc:	f1ca 0118 	rsb	r1, sl, #24
 80148c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80148c4:	9d06      	ldr	r5, [sp, #24]
 80148c6:	fa40 f301 	asr.w	r3, r0, r1
 80148ca:	441d      	add	r5, r3
 80148cc:	408b      	lsls	r3, r1
 80148ce:	1ac0      	subs	r0, r0, r3
 80148d0:	ab0e      	add	r3, sp, #56	; 0x38
 80148d2:	9506      	str	r5, [sp, #24]
 80148d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80148d8:	f1ca 0317 	rsb	r3, sl, #23
 80148dc:	fa40 f303 	asr.w	r3, r0, r3
 80148e0:	9302      	str	r3, [sp, #8]
 80148e2:	9b02      	ldr	r3, [sp, #8]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	dd62      	ble.n	80149ae <__kernel_rem_pio2+0x25e>
 80148e8:	9b06      	ldr	r3, [sp, #24]
 80148ea:	2200      	movs	r2, #0
 80148ec:	3301      	adds	r3, #1
 80148ee:	9306      	str	r3, [sp, #24]
 80148f0:	4615      	mov	r5, r2
 80148f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80148f6:	4294      	cmp	r4, r2
 80148f8:	f300 8095 	bgt.w	8014a26 <__kernel_rem_pio2+0x2d6>
 80148fc:	f1ba 0f00 	cmp.w	sl, #0
 8014900:	dd07      	ble.n	8014912 <__kernel_rem_pio2+0x1c2>
 8014902:	f1ba 0f01 	cmp.w	sl, #1
 8014906:	f000 80a2 	beq.w	8014a4e <__kernel_rem_pio2+0x2fe>
 801490a:	f1ba 0f02 	cmp.w	sl, #2
 801490e:	f000 80c1 	beq.w	8014a94 <__kernel_rem_pio2+0x344>
 8014912:	9b02      	ldr	r3, [sp, #8]
 8014914:	2b02      	cmp	r3, #2
 8014916:	d14a      	bne.n	80149ae <__kernel_rem_pio2+0x25e>
 8014918:	4632      	mov	r2, r6
 801491a:	463b      	mov	r3, r7
 801491c:	2000      	movs	r0, #0
 801491e:	4958      	ldr	r1, [pc, #352]	; (8014a80 <__kernel_rem_pio2+0x330>)
 8014920:	f7eb fcca 	bl	80002b8 <__aeabi_dsub>
 8014924:	4606      	mov	r6, r0
 8014926:	460f      	mov	r7, r1
 8014928:	2d00      	cmp	r5, #0
 801492a:	d040      	beq.n	80149ae <__kernel_rem_pio2+0x25e>
 801492c:	4650      	mov	r0, sl
 801492e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014a70 <__kernel_rem_pio2+0x320>
 8014932:	f000 fb95 	bl	8015060 <scalbn>
 8014936:	4630      	mov	r0, r6
 8014938:	4639      	mov	r1, r7
 801493a:	ec53 2b10 	vmov	r2, r3, d0
 801493e:	f7eb fcbb 	bl	80002b8 <__aeabi_dsub>
 8014942:	4606      	mov	r6, r0
 8014944:	460f      	mov	r7, r1
 8014946:	e032      	b.n	80149ae <__kernel_rem_pio2+0x25e>
 8014948:	2200      	movs	r2, #0
 801494a:	4b4e      	ldr	r3, [pc, #312]	; (8014a84 <__kernel_rem_pio2+0x334>)
 801494c:	4640      	mov	r0, r8
 801494e:	4649      	mov	r1, r9
 8014950:	f7eb fe6a 	bl	8000628 <__aeabi_dmul>
 8014954:	f7ec f918 	bl	8000b88 <__aeabi_d2iz>
 8014958:	f7eb fdfc 	bl	8000554 <__aeabi_i2d>
 801495c:	2200      	movs	r2, #0
 801495e:	4b4a      	ldr	r3, [pc, #296]	; (8014a88 <__kernel_rem_pio2+0x338>)
 8014960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014964:	f7eb fe60 	bl	8000628 <__aeabi_dmul>
 8014968:	4602      	mov	r2, r0
 801496a:	460b      	mov	r3, r1
 801496c:	4640      	mov	r0, r8
 801496e:	4649      	mov	r1, r9
 8014970:	f7eb fca2 	bl	80002b8 <__aeabi_dsub>
 8014974:	f7ec f908 	bl	8000b88 <__aeabi_d2iz>
 8014978:	ab0e      	add	r3, sp, #56	; 0x38
 801497a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801497e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014986:	f7eb fc99 	bl	80002bc <__adddf3>
 801498a:	3501      	adds	r5, #1
 801498c:	4680      	mov	r8, r0
 801498e:	4689      	mov	r9, r1
 8014990:	e75e      	b.n	8014850 <__kernel_rem_pio2+0x100>
 8014992:	d105      	bne.n	80149a0 <__kernel_rem_pio2+0x250>
 8014994:	1e63      	subs	r3, r4, #1
 8014996:	aa0e      	add	r2, sp, #56	; 0x38
 8014998:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801499c:	15c3      	asrs	r3, r0, #23
 801499e:	e79f      	b.n	80148e0 <__kernel_rem_pio2+0x190>
 80149a0:	2200      	movs	r2, #0
 80149a2:	4b3a      	ldr	r3, [pc, #232]	; (8014a8c <__kernel_rem_pio2+0x33c>)
 80149a4:	f7ec f8c6 	bl	8000b34 <__aeabi_dcmpge>
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d139      	bne.n	8014a20 <__kernel_rem_pio2+0x2d0>
 80149ac:	9002      	str	r0, [sp, #8]
 80149ae:	2200      	movs	r2, #0
 80149b0:	2300      	movs	r3, #0
 80149b2:	4630      	mov	r0, r6
 80149b4:	4639      	mov	r1, r7
 80149b6:	f7ec f89f 	bl	8000af8 <__aeabi_dcmpeq>
 80149ba:	2800      	cmp	r0, #0
 80149bc:	f000 80c7 	beq.w	8014b4e <__kernel_rem_pio2+0x3fe>
 80149c0:	1e65      	subs	r5, r4, #1
 80149c2:	462b      	mov	r3, r5
 80149c4:	2200      	movs	r2, #0
 80149c6:	9904      	ldr	r1, [sp, #16]
 80149c8:	428b      	cmp	r3, r1
 80149ca:	da6a      	bge.n	8014aa2 <__kernel_rem_pio2+0x352>
 80149cc:	2a00      	cmp	r2, #0
 80149ce:	f000 8088 	beq.w	8014ae2 <__kernel_rem_pio2+0x392>
 80149d2:	ab0e      	add	r3, sp, #56	; 0x38
 80149d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80149d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f000 80b4 	beq.w	8014b4a <__kernel_rem_pio2+0x3fa>
 80149e2:	4650      	mov	r0, sl
 80149e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014a70 <__kernel_rem_pio2+0x320>
 80149e8:	f000 fb3a 	bl	8015060 <scalbn>
 80149ec:	00ec      	lsls	r4, r5, #3
 80149ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80149f0:	191e      	adds	r6, r3, r4
 80149f2:	ec59 8b10 	vmov	r8, r9, d0
 80149f6:	f106 0a08 	add.w	sl, r6, #8
 80149fa:	462f      	mov	r7, r5
 80149fc:	2f00      	cmp	r7, #0
 80149fe:	f280 80df 	bge.w	8014bc0 <__kernel_rem_pio2+0x470>
 8014a02:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014a68 <__kernel_rem_pio2+0x318>
 8014a06:	f04f 0a00 	mov.w	sl, #0
 8014a0a:	eba5 030a 	sub.w	r3, r5, sl
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	f2c0 810a 	blt.w	8014c28 <__kernel_rem_pio2+0x4d8>
 8014a14:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014a90 <__kernel_rem_pio2+0x340>
 8014a18:	ec59 8b18 	vmov	r8, r9, d8
 8014a1c:	2700      	movs	r7, #0
 8014a1e:	e0f5      	b.n	8014c0c <__kernel_rem_pio2+0x4bc>
 8014a20:	2302      	movs	r3, #2
 8014a22:	9302      	str	r3, [sp, #8]
 8014a24:	e760      	b.n	80148e8 <__kernel_rem_pio2+0x198>
 8014a26:	ab0e      	add	r3, sp, #56	; 0x38
 8014a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a2c:	b94d      	cbnz	r5, 8014a42 <__kernel_rem_pio2+0x2f2>
 8014a2e:	b12b      	cbz	r3, 8014a3c <__kernel_rem_pio2+0x2ec>
 8014a30:	a80e      	add	r0, sp, #56	; 0x38
 8014a32:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014a36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	3201      	adds	r2, #1
 8014a3e:	461d      	mov	r5, r3
 8014a40:	e759      	b.n	80148f6 <__kernel_rem_pio2+0x1a6>
 8014a42:	a80e      	add	r0, sp, #56	; 0x38
 8014a44:	1acb      	subs	r3, r1, r3
 8014a46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014a4a:	462b      	mov	r3, r5
 8014a4c:	e7f6      	b.n	8014a3c <__kernel_rem_pio2+0x2ec>
 8014a4e:	1e62      	subs	r2, r4, #1
 8014a50:	ab0e      	add	r3, sp, #56	; 0x38
 8014a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014a5a:	a90e      	add	r1, sp, #56	; 0x38
 8014a5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014a60:	e757      	b.n	8014912 <__kernel_rem_pio2+0x1c2>
 8014a62:	bf00      	nop
 8014a64:	f3af 8000 	nop.w
	...
 8014a74:	3ff00000 	.word	0x3ff00000
 8014a78:	08019c38 	.word	0x08019c38
 8014a7c:	40200000 	.word	0x40200000
 8014a80:	3ff00000 	.word	0x3ff00000
 8014a84:	3e700000 	.word	0x3e700000
 8014a88:	41700000 	.word	0x41700000
 8014a8c:	3fe00000 	.word	0x3fe00000
 8014a90:	08019bf8 	.word	0x08019bf8
 8014a94:	1e62      	subs	r2, r4, #1
 8014a96:	ab0e      	add	r3, sp, #56	; 0x38
 8014a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014aa0:	e7db      	b.n	8014a5a <__kernel_rem_pio2+0x30a>
 8014aa2:	a90e      	add	r1, sp, #56	; 0x38
 8014aa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	430a      	orrs	r2, r1
 8014aac:	e78b      	b.n	80149c6 <__kernel_rem_pio2+0x276>
 8014aae:	3301      	adds	r3, #1
 8014ab0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014ab4:	2900      	cmp	r1, #0
 8014ab6:	d0fa      	beq.n	8014aae <__kernel_rem_pio2+0x35e>
 8014ab8:	9a08      	ldr	r2, [sp, #32]
 8014aba:	4422      	add	r2, r4
 8014abc:	00d2      	lsls	r2, r2, #3
 8014abe:	a922      	add	r1, sp, #136	; 0x88
 8014ac0:	18e3      	adds	r3, r4, r3
 8014ac2:	9206      	str	r2, [sp, #24]
 8014ac4:	440a      	add	r2, r1
 8014ac6:	9302      	str	r3, [sp, #8]
 8014ac8:	f10b 0108 	add.w	r1, fp, #8
 8014acc:	f102 0308 	add.w	r3, r2, #8
 8014ad0:	1c66      	adds	r6, r4, #1
 8014ad2:	910a      	str	r1, [sp, #40]	; 0x28
 8014ad4:	2500      	movs	r5, #0
 8014ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8014ad8:	9b02      	ldr	r3, [sp, #8]
 8014ada:	42b3      	cmp	r3, r6
 8014adc:	da04      	bge.n	8014ae8 <__kernel_rem_pio2+0x398>
 8014ade:	461c      	mov	r4, r3
 8014ae0:	e6a6      	b.n	8014830 <__kernel_rem_pio2+0xe0>
 8014ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	e7e3      	b.n	8014ab0 <__kernel_rem_pio2+0x360>
 8014ae8:	9b06      	ldr	r3, [sp, #24]
 8014aea:	18ef      	adds	r7, r5, r3
 8014aec:	ab22      	add	r3, sp, #136	; 0x88
 8014aee:	441f      	add	r7, r3
 8014af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014af2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014af6:	f7eb fd2d 	bl	8000554 <__aeabi_i2d>
 8014afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014afc:	461c      	mov	r4, r3
 8014afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b00:	e9c7 0100 	strd	r0, r1, [r7]
 8014b04:	eb03 0b05 	add.w	fp, r3, r5
 8014b08:	2700      	movs	r7, #0
 8014b0a:	f04f 0800 	mov.w	r8, #0
 8014b0e:	f04f 0900 	mov.w	r9, #0
 8014b12:	9b07      	ldr	r3, [sp, #28]
 8014b14:	429f      	cmp	r7, r3
 8014b16:	dd08      	ble.n	8014b2a <__kernel_rem_pio2+0x3da>
 8014b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b1a:	aa72      	add	r2, sp, #456	; 0x1c8
 8014b1c:	18eb      	adds	r3, r5, r3
 8014b1e:	4413      	add	r3, r2
 8014b20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014b24:	3601      	adds	r6, #1
 8014b26:	3508      	adds	r5, #8
 8014b28:	e7d6      	b.n	8014ad8 <__kernel_rem_pio2+0x388>
 8014b2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014b2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014b32:	f7eb fd79 	bl	8000628 <__aeabi_dmul>
 8014b36:	4602      	mov	r2, r0
 8014b38:	460b      	mov	r3, r1
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	4649      	mov	r1, r9
 8014b3e:	f7eb fbbd 	bl	80002bc <__adddf3>
 8014b42:	3701      	adds	r7, #1
 8014b44:	4680      	mov	r8, r0
 8014b46:	4689      	mov	r9, r1
 8014b48:	e7e3      	b.n	8014b12 <__kernel_rem_pio2+0x3c2>
 8014b4a:	3d01      	subs	r5, #1
 8014b4c:	e741      	b.n	80149d2 <__kernel_rem_pio2+0x282>
 8014b4e:	f1ca 0000 	rsb	r0, sl, #0
 8014b52:	ec47 6b10 	vmov	d0, r6, r7
 8014b56:	f000 fa83 	bl	8015060 <scalbn>
 8014b5a:	ec57 6b10 	vmov	r6, r7, d0
 8014b5e:	2200      	movs	r2, #0
 8014b60:	4b99      	ldr	r3, [pc, #612]	; (8014dc8 <__kernel_rem_pio2+0x678>)
 8014b62:	ee10 0a10 	vmov	r0, s0
 8014b66:	4639      	mov	r1, r7
 8014b68:	f7eb ffe4 	bl	8000b34 <__aeabi_dcmpge>
 8014b6c:	b1f8      	cbz	r0, 8014bae <__kernel_rem_pio2+0x45e>
 8014b6e:	2200      	movs	r2, #0
 8014b70:	4b96      	ldr	r3, [pc, #600]	; (8014dcc <__kernel_rem_pio2+0x67c>)
 8014b72:	4630      	mov	r0, r6
 8014b74:	4639      	mov	r1, r7
 8014b76:	f7eb fd57 	bl	8000628 <__aeabi_dmul>
 8014b7a:	f7ec f805 	bl	8000b88 <__aeabi_d2iz>
 8014b7e:	4680      	mov	r8, r0
 8014b80:	f7eb fce8 	bl	8000554 <__aeabi_i2d>
 8014b84:	2200      	movs	r2, #0
 8014b86:	4b90      	ldr	r3, [pc, #576]	; (8014dc8 <__kernel_rem_pio2+0x678>)
 8014b88:	f7eb fd4e 	bl	8000628 <__aeabi_dmul>
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	4602      	mov	r2, r0
 8014b90:	4639      	mov	r1, r7
 8014b92:	4630      	mov	r0, r6
 8014b94:	f7eb fb90 	bl	80002b8 <__aeabi_dsub>
 8014b98:	f7eb fff6 	bl	8000b88 <__aeabi_d2iz>
 8014b9c:	1c65      	adds	r5, r4, #1
 8014b9e:	ab0e      	add	r3, sp, #56	; 0x38
 8014ba0:	f10a 0a18 	add.w	sl, sl, #24
 8014ba4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014ba8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014bac:	e719      	b.n	80149e2 <__kernel_rem_pio2+0x292>
 8014bae:	4630      	mov	r0, r6
 8014bb0:	4639      	mov	r1, r7
 8014bb2:	f7eb ffe9 	bl	8000b88 <__aeabi_d2iz>
 8014bb6:	ab0e      	add	r3, sp, #56	; 0x38
 8014bb8:	4625      	mov	r5, r4
 8014bba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014bbe:	e710      	b.n	80149e2 <__kernel_rem_pio2+0x292>
 8014bc0:	ab0e      	add	r3, sp, #56	; 0x38
 8014bc2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014bc6:	f7eb fcc5 	bl	8000554 <__aeabi_i2d>
 8014bca:	4642      	mov	r2, r8
 8014bcc:	464b      	mov	r3, r9
 8014bce:	f7eb fd2b 	bl	8000628 <__aeabi_dmul>
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014bd8:	4b7c      	ldr	r3, [pc, #496]	; (8014dcc <__kernel_rem_pio2+0x67c>)
 8014bda:	4640      	mov	r0, r8
 8014bdc:	4649      	mov	r1, r9
 8014bde:	f7eb fd23 	bl	8000628 <__aeabi_dmul>
 8014be2:	3f01      	subs	r7, #1
 8014be4:	4680      	mov	r8, r0
 8014be6:	4689      	mov	r9, r1
 8014be8:	e708      	b.n	80149fc <__kernel_rem_pio2+0x2ac>
 8014bea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014bf6:	f7eb fd17 	bl	8000628 <__aeabi_dmul>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	4640      	mov	r0, r8
 8014c00:	4649      	mov	r1, r9
 8014c02:	f7eb fb5b 	bl	80002bc <__adddf3>
 8014c06:	3701      	adds	r7, #1
 8014c08:	4680      	mov	r8, r0
 8014c0a:	4689      	mov	r9, r1
 8014c0c:	9b04      	ldr	r3, [sp, #16]
 8014c0e:	429f      	cmp	r7, r3
 8014c10:	dc01      	bgt.n	8014c16 <__kernel_rem_pio2+0x4c6>
 8014c12:	45ba      	cmp	sl, r7
 8014c14:	dae9      	bge.n	8014bea <__kernel_rem_pio2+0x49a>
 8014c16:	ab4a      	add	r3, sp, #296	; 0x128
 8014c18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014c1c:	e9c3 8900 	strd	r8, r9, [r3]
 8014c20:	f10a 0a01 	add.w	sl, sl, #1
 8014c24:	3e08      	subs	r6, #8
 8014c26:	e6f0      	b.n	8014a0a <__kernel_rem_pio2+0x2ba>
 8014c28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014c2a:	2b03      	cmp	r3, #3
 8014c2c:	d85b      	bhi.n	8014ce6 <__kernel_rem_pio2+0x596>
 8014c2e:	e8df f003 	tbb	[pc, r3]
 8014c32:	264a      	.short	0x264a
 8014c34:	0226      	.short	0x0226
 8014c36:	ab9a      	add	r3, sp, #616	; 0x268
 8014c38:	441c      	add	r4, r3
 8014c3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014c3e:	46a2      	mov	sl, r4
 8014c40:	46ab      	mov	fp, r5
 8014c42:	f1bb 0f00 	cmp.w	fp, #0
 8014c46:	dc6c      	bgt.n	8014d22 <__kernel_rem_pio2+0x5d2>
 8014c48:	46a2      	mov	sl, r4
 8014c4a:	46ab      	mov	fp, r5
 8014c4c:	f1bb 0f01 	cmp.w	fp, #1
 8014c50:	f300 8086 	bgt.w	8014d60 <__kernel_rem_pio2+0x610>
 8014c54:	2000      	movs	r0, #0
 8014c56:	2100      	movs	r1, #0
 8014c58:	2d01      	cmp	r5, #1
 8014c5a:	f300 80a0 	bgt.w	8014d9e <__kernel_rem_pio2+0x64e>
 8014c5e:	9b02      	ldr	r3, [sp, #8]
 8014c60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014c64:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	f040 809e 	bne.w	8014daa <__kernel_rem_pio2+0x65a>
 8014c6e:	9b01      	ldr	r3, [sp, #4]
 8014c70:	e9c3 7800 	strd	r7, r8, [r3]
 8014c74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014c78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014c7c:	e033      	b.n	8014ce6 <__kernel_rem_pio2+0x596>
 8014c7e:	3408      	adds	r4, #8
 8014c80:	ab4a      	add	r3, sp, #296	; 0x128
 8014c82:	441c      	add	r4, r3
 8014c84:	462e      	mov	r6, r5
 8014c86:	2000      	movs	r0, #0
 8014c88:	2100      	movs	r1, #0
 8014c8a:	2e00      	cmp	r6, #0
 8014c8c:	da3a      	bge.n	8014d04 <__kernel_rem_pio2+0x5b4>
 8014c8e:	9b02      	ldr	r3, [sp, #8]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d03d      	beq.n	8014d10 <__kernel_rem_pio2+0x5c0>
 8014c94:	4602      	mov	r2, r0
 8014c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c9a:	9c01      	ldr	r4, [sp, #4]
 8014c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014ca8:	f7eb fb06 	bl	80002b8 <__aeabi_dsub>
 8014cac:	ae4c      	add	r6, sp, #304	; 0x130
 8014cae:	2401      	movs	r4, #1
 8014cb0:	42a5      	cmp	r5, r4
 8014cb2:	da30      	bge.n	8014d16 <__kernel_rem_pio2+0x5c6>
 8014cb4:	9b02      	ldr	r3, [sp, #8]
 8014cb6:	b113      	cbz	r3, 8014cbe <__kernel_rem_pio2+0x56e>
 8014cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	9b01      	ldr	r3, [sp, #4]
 8014cc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014cc4:	e00f      	b.n	8014ce6 <__kernel_rem_pio2+0x596>
 8014cc6:	ab9a      	add	r3, sp, #616	; 0x268
 8014cc8:	441c      	add	r4, r3
 8014cca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014cce:	2000      	movs	r0, #0
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	2d00      	cmp	r5, #0
 8014cd4:	da10      	bge.n	8014cf8 <__kernel_rem_pio2+0x5a8>
 8014cd6:	9b02      	ldr	r3, [sp, #8]
 8014cd8:	b113      	cbz	r3, 8014ce0 <__kernel_rem_pio2+0x590>
 8014cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cde:	4619      	mov	r1, r3
 8014ce0:	9b01      	ldr	r3, [sp, #4]
 8014ce2:	e9c3 0100 	strd	r0, r1, [r3]
 8014ce6:	9b06      	ldr	r3, [sp, #24]
 8014ce8:	f003 0007 	and.w	r0, r3, #7
 8014cec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014cf0:	ecbd 8b02 	vpop	{d8}
 8014cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014cfc:	f7eb fade 	bl	80002bc <__adddf3>
 8014d00:	3d01      	subs	r5, #1
 8014d02:	e7e6      	b.n	8014cd2 <__kernel_rem_pio2+0x582>
 8014d04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014d08:	f7eb fad8 	bl	80002bc <__adddf3>
 8014d0c:	3e01      	subs	r6, #1
 8014d0e:	e7bc      	b.n	8014c8a <__kernel_rem_pio2+0x53a>
 8014d10:	4602      	mov	r2, r0
 8014d12:	460b      	mov	r3, r1
 8014d14:	e7c1      	b.n	8014c9a <__kernel_rem_pio2+0x54a>
 8014d16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014d1a:	f7eb facf 	bl	80002bc <__adddf3>
 8014d1e:	3401      	adds	r4, #1
 8014d20:	e7c6      	b.n	8014cb0 <__kernel_rem_pio2+0x560>
 8014d22:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014d26:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014d2a:	4640      	mov	r0, r8
 8014d2c:	ec53 2b17 	vmov	r2, r3, d7
 8014d30:	4649      	mov	r1, r9
 8014d32:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014d36:	f7eb fac1 	bl	80002bc <__adddf3>
 8014d3a:	4602      	mov	r2, r0
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	4606      	mov	r6, r0
 8014d40:	460f      	mov	r7, r1
 8014d42:	4640      	mov	r0, r8
 8014d44:	4649      	mov	r1, r9
 8014d46:	f7eb fab7 	bl	80002b8 <__aeabi_dsub>
 8014d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d4e:	f7eb fab5 	bl	80002bc <__adddf3>
 8014d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d56:	e9ca 0100 	strd	r0, r1, [sl]
 8014d5a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014d5e:	e770      	b.n	8014c42 <__kernel_rem_pio2+0x4f2>
 8014d60:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014d64:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014d68:	4630      	mov	r0, r6
 8014d6a:	ec53 2b17 	vmov	r2, r3, d7
 8014d6e:	4639      	mov	r1, r7
 8014d70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014d74:	f7eb faa2 	bl	80002bc <__adddf3>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4680      	mov	r8, r0
 8014d7e:	4689      	mov	r9, r1
 8014d80:	4630      	mov	r0, r6
 8014d82:	4639      	mov	r1, r7
 8014d84:	f7eb fa98 	bl	80002b8 <__aeabi_dsub>
 8014d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d8c:	f7eb fa96 	bl	80002bc <__adddf3>
 8014d90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d94:	e9ca 0100 	strd	r0, r1, [sl]
 8014d98:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014d9c:	e756      	b.n	8014c4c <__kernel_rem_pio2+0x4fc>
 8014d9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014da2:	f7eb fa8b 	bl	80002bc <__adddf3>
 8014da6:	3d01      	subs	r5, #1
 8014da8:	e756      	b.n	8014c58 <__kernel_rem_pio2+0x508>
 8014daa:	9b01      	ldr	r3, [sp, #4]
 8014dac:	9a01      	ldr	r2, [sp, #4]
 8014dae:	601f      	str	r7, [r3, #0]
 8014db0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014db4:	605c      	str	r4, [r3, #4]
 8014db6:	609d      	str	r5, [r3, #8]
 8014db8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014dbc:	60d3      	str	r3, [r2, #12]
 8014dbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dc2:	6110      	str	r0, [r2, #16]
 8014dc4:	6153      	str	r3, [r2, #20]
 8014dc6:	e78e      	b.n	8014ce6 <__kernel_rem_pio2+0x596>
 8014dc8:	41700000 	.word	0x41700000
 8014dcc:	3e700000 	.word	0x3e700000

08014dd0 <__kernel_sin>:
 8014dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd4:	ec55 4b10 	vmov	r4, r5, d0
 8014dd8:	b085      	sub	sp, #20
 8014dda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014dde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014de2:	ed8d 1b00 	vstr	d1, [sp]
 8014de6:	9002      	str	r0, [sp, #8]
 8014de8:	da06      	bge.n	8014df8 <__kernel_sin+0x28>
 8014dea:	ee10 0a10 	vmov	r0, s0
 8014dee:	4629      	mov	r1, r5
 8014df0:	f7eb feca 	bl	8000b88 <__aeabi_d2iz>
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d051      	beq.n	8014e9c <__kernel_sin+0xcc>
 8014df8:	4622      	mov	r2, r4
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	4629      	mov	r1, r5
 8014e00:	f7eb fc12 	bl	8000628 <__aeabi_dmul>
 8014e04:	4682      	mov	sl, r0
 8014e06:	468b      	mov	fp, r1
 8014e08:	4602      	mov	r2, r0
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	4629      	mov	r1, r5
 8014e10:	f7eb fc0a 	bl	8000628 <__aeabi_dmul>
 8014e14:	a341      	add	r3, pc, #260	; (adr r3, 8014f1c <__kernel_sin+0x14c>)
 8014e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1a:	4680      	mov	r8, r0
 8014e1c:	4689      	mov	r9, r1
 8014e1e:	4650      	mov	r0, sl
 8014e20:	4659      	mov	r1, fp
 8014e22:	f7eb fc01 	bl	8000628 <__aeabi_dmul>
 8014e26:	a33f      	add	r3, pc, #252	; (adr r3, 8014f24 <__kernel_sin+0x154>)
 8014e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2c:	f7eb fa44 	bl	80002b8 <__aeabi_dsub>
 8014e30:	4652      	mov	r2, sl
 8014e32:	465b      	mov	r3, fp
 8014e34:	f7eb fbf8 	bl	8000628 <__aeabi_dmul>
 8014e38:	a33c      	add	r3, pc, #240	; (adr r3, 8014f2c <__kernel_sin+0x15c>)
 8014e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3e:	f7eb fa3d 	bl	80002bc <__adddf3>
 8014e42:	4652      	mov	r2, sl
 8014e44:	465b      	mov	r3, fp
 8014e46:	f7eb fbef 	bl	8000628 <__aeabi_dmul>
 8014e4a:	a33a      	add	r3, pc, #232	; (adr r3, 8014f34 <__kernel_sin+0x164>)
 8014e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e50:	f7eb fa32 	bl	80002b8 <__aeabi_dsub>
 8014e54:	4652      	mov	r2, sl
 8014e56:	465b      	mov	r3, fp
 8014e58:	f7eb fbe6 	bl	8000628 <__aeabi_dmul>
 8014e5c:	a337      	add	r3, pc, #220	; (adr r3, 8014f3c <__kernel_sin+0x16c>)
 8014e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e62:	f7eb fa2b 	bl	80002bc <__adddf3>
 8014e66:	9b02      	ldr	r3, [sp, #8]
 8014e68:	4606      	mov	r6, r0
 8014e6a:	460f      	mov	r7, r1
 8014e6c:	b9db      	cbnz	r3, 8014ea6 <__kernel_sin+0xd6>
 8014e6e:	4602      	mov	r2, r0
 8014e70:	460b      	mov	r3, r1
 8014e72:	4650      	mov	r0, sl
 8014e74:	4659      	mov	r1, fp
 8014e76:	f7eb fbd7 	bl	8000628 <__aeabi_dmul>
 8014e7a:	a325      	add	r3, pc, #148	; (adr r3, 8014f10 <__kernel_sin+0x140>)
 8014e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e80:	f7eb fa1a 	bl	80002b8 <__aeabi_dsub>
 8014e84:	4642      	mov	r2, r8
 8014e86:	464b      	mov	r3, r9
 8014e88:	f7eb fbce 	bl	8000628 <__aeabi_dmul>
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	460b      	mov	r3, r1
 8014e90:	4620      	mov	r0, r4
 8014e92:	4629      	mov	r1, r5
 8014e94:	f7eb fa12 	bl	80002bc <__adddf3>
 8014e98:	4604      	mov	r4, r0
 8014e9a:	460d      	mov	r5, r1
 8014e9c:	ec45 4b10 	vmov	d0, r4, r5
 8014ea0:	b005      	add	sp, #20
 8014ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	4b1b      	ldr	r3, [pc, #108]	; (8014f18 <__kernel_sin+0x148>)
 8014eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014eae:	f7eb fbbb 	bl	8000628 <__aeabi_dmul>
 8014eb2:	4632      	mov	r2, r6
 8014eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014eb8:	463b      	mov	r3, r7
 8014eba:	4640      	mov	r0, r8
 8014ebc:	4649      	mov	r1, r9
 8014ebe:	f7eb fbb3 	bl	8000628 <__aeabi_dmul>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014eca:	f7eb f9f5 	bl	80002b8 <__aeabi_dsub>
 8014ece:	4652      	mov	r2, sl
 8014ed0:	465b      	mov	r3, fp
 8014ed2:	f7eb fba9 	bl	8000628 <__aeabi_dmul>
 8014ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014eda:	f7eb f9ed 	bl	80002b8 <__aeabi_dsub>
 8014ede:	a30c      	add	r3, pc, #48	; (adr r3, 8014f10 <__kernel_sin+0x140>)
 8014ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee4:	4606      	mov	r6, r0
 8014ee6:	460f      	mov	r7, r1
 8014ee8:	4640      	mov	r0, r8
 8014eea:	4649      	mov	r1, r9
 8014eec:	f7eb fb9c 	bl	8000628 <__aeabi_dmul>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	460b      	mov	r3, r1
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	f7eb f9e0 	bl	80002bc <__adddf3>
 8014efc:	4602      	mov	r2, r0
 8014efe:	460b      	mov	r3, r1
 8014f00:	4620      	mov	r0, r4
 8014f02:	4629      	mov	r1, r5
 8014f04:	f7eb f9d8 	bl	80002b8 <__aeabi_dsub>
 8014f08:	e7c6      	b.n	8014e98 <__kernel_sin+0xc8>
 8014f0a:	bf00      	nop
 8014f0c:	f3af 8000 	nop.w
 8014f10:	55555549 	.word	0x55555549
 8014f14:	3fc55555 	.word	0x3fc55555
 8014f18:	3fe00000 	.word	0x3fe00000
 8014f1c:	5acfd57c 	.word	0x5acfd57c
 8014f20:	3de5d93a 	.word	0x3de5d93a
 8014f24:	8a2b9ceb 	.word	0x8a2b9ceb
 8014f28:	3e5ae5e6 	.word	0x3e5ae5e6
 8014f2c:	57b1fe7d 	.word	0x57b1fe7d
 8014f30:	3ec71de3 	.word	0x3ec71de3
 8014f34:	19c161d5 	.word	0x19c161d5
 8014f38:	3f2a01a0 	.word	0x3f2a01a0
 8014f3c:	1110f8a6 	.word	0x1110f8a6
 8014f40:	3f811111 	.word	0x3f811111

08014f44 <fabs>:
 8014f44:	ec51 0b10 	vmov	r0, r1, d0
 8014f48:	ee10 2a10 	vmov	r2, s0
 8014f4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014f50:	ec43 2b10 	vmov	d0, r2, r3
 8014f54:	4770      	bx	lr
	...

08014f58 <floor>:
 8014f58:	ec51 0b10 	vmov	r0, r1, d0
 8014f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014f64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014f68:	2e13      	cmp	r6, #19
 8014f6a:	460c      	mov	r4, r1
 8014f6c:	ee10 5a10 	vmov	r5, s0
 8014f70:	4680      	mov	r8, r0
 8014f72:	dc34      	bgt.n	8014fde <floor+0x86>
 8014f74:	2e00      	cmp	r6, #0
 8014f76:	da16      	bge.n	8014fa6 <floor+0x4e>
 8014f78:	a335      	add	r3, pc, #212	; (adr r3, 8015050 <floor+0xf8>)
 8014f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7e:	f7eb f99d 	bl	80002bc <__adddf3>
 8014f82:	2200      	movs	r2, #0
 8014f84:	2300      	movs	r3, #0
 8014f86:	f7eb fddf 	bl	8000b48 <__aeabi_dcmpgt>
 8014f8a:	b148      	cbz	r0, 8014fa0 <floor+0x48>
 8014f8c:	2c00      	cmp	r4, #0
 8014f8e:	da59      	bge.n	8015044 <floor+0xec>
 8014f90:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014f94:	4a30      	ldr	r2, [pc, #192]	; (8015058 <floor+0x100>)
 8014f96:	432b      	orrs	r3, r5
 8014f98:	2500      	movs	r5, #0
 8014f9a:	42ab      	cmp	r3, r5
 8014f9c:	bf18      	it	ne
 8014f9e:	4614      	movne	r4, r2
 8014fa0:	4621      	mov	r1, r4
 8014fa2:	4628      	mov	r0, r5
 8014fa4:	e025      	b.n	8014ff2 <floor+0x9a>
 8014fa6:	4f2d      	ldr	r7, [pc, #180]	; (801505c <floor+0x104>)
 8014fa8:	4137      	asrs	r7, r6
 8014faa:	ea01 0307 	and.w	r3, r1, r7
 8014fae:	4303      	orrs	r3, r0
 8014fb0:	d01f      	beq.n	8014ff2 <floor+0x9a>
 8014fb2:	a327      	add	r3, pc, #156	; (adr r3, 8015050 <floor+0xf8>)
 8014fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb8:	f7eb f980 	bl	80002bc <__adddf3>
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f7eb fdc2 	bl	8000b48 <__aeabi_dcmpgt>
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	d0eb      	beq.n	8014fa0 <floor+0x48>
 8014fc8:	2c00      	cmp	r4, #0
 8014fca:	bfbe      	ittt	lt
 8014fcc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014fd0:	fa43 f606 	asrlt.w	r6, r3, r6
 8014fd4:	19a4      	addlt	r4, r4, r6
 8014fd6:	ea24 0407 	bic.w	r4, r4, r7
 8014fda:	2500      	movs	r5, #0
 8014fdc:	e7e0      	b.n	8014fa0 <floor+0x48>
 8014fde:	2e33      	cmp	r6, #51	; 0x33
 8014fe0:	dd0b      	ble.n	8014ffa <floor+0xa2>
 8014fe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014fe6:	d104      	bne.n	8014ff2 <floor+0x9a>
 8014fe8:	ee10 2a10 	vmov	r2, s0
 8014fec:	460b      	mov	r3, r1
 8014fee:	f7eb f965 	bl	80002bc <__adddf3>
 8014ff2:	ec41 0b10 	vmov	d0, r0, r1
 8014ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ffa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8015002:	fa23 f707 	lsr.w	r7, r3, r7
 8015006:	4207      	tst	r7, r0
 8015008:	d0f3      	beq.n	8014ff2 <floor+0x9a>
 801500a:	a311      	add	r3, pc, #68	; (adr r3, 8015050 <floor+0xf8>)
 801500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015010:	f7eb f954 	bl	80002bc <__adddf3>
 8015014:	2200      	movs	r2, #0
 8015016:	2300      	movs	r3, #0
 8015018:	f7eb fd96 	bl	8000b48 <__aeabi_dcmpgt>
 801501c:	2800      	cmp	r0, #0
 801501e:	d0bf      	beq.n	8014fa0 <floor+0x48>
 8015020:	2c00      	cmp	r4, #0
 8015022:	da02      	bge.n	801502a <floor+0xd2>
 8015024:	2e14      	cmp	r6, #20
 8015026:	d103      	bne.n	8015030 <floor+0xd8>
 8015028:	3401      	adds	r4, #1
 801502a:	ea25 0507 	bic.w	r5, r5, r7
 801502e:	e7b7      	b.n	8014fa0 <floor+0x48>
 8015030:	2301      	movs	r3, #1
 8015032:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015036:	fa03 f606 	lsl.w	r6, r3, r6
 801503a:	4435      	add	r5, r6
 801503c:	4545      	cmp	r5, r8
 801503e:	bf38      	it	cc
 8015040:	18e4      	addcc	r4, r4, r3
 8015042:	e7f2      	b.n	801502a <floor+0xd2>
 8015044:	2500      	movs	r5, #0
 8015046:	462c      	mov	r4, r5
 8015048:	e7aa      	b.n	8014fa0 <floor+0x48>
 801504a:	bf00      	nop
 801504c:	f3af 8000 	nop.w
 8015050:	8800759c 	.word	0x8800759c
 8015054:	7e37e43c 	.word	0x7e37e43c
 8015058:	bff00000 	.word	0xbff00000
 801505c:	000fffff 	.word	0x000fffff

08015060 <scalbn>:
 8015060:	b570      	push	{r4, r5, r6, lr}
 8015062:	ec55 4b10 	vmov	r4, r5, d0
 8015066:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801506a:	4606      	mov	r6, r0
 801506c:	462b      	mov	r3, r5
 801506e:	b9aa      	cbnz	r2, 801509c <scalbn+0x3c>
 8015070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015074:	4323      	orrs	r3, r4
 8015076:	d03b      	beq.n	80150f0 <scalbn+0x90>
 8015078:	4b31      	ldr	r3, [pc, #196]	; (8015140 <scalbn+0xe0>)
 801507a:	4629      	mov	r1, r5
 801507c:	2200      	movs	r2, #0
 801507e:	ee10 0a10 	vmov	r0, s0
 8015082:	f7eb fad1 	bl	8000628 <__aeabi_dmul>
 8015086:	4b2f      	ldr	r3, [pc, #188]	; (8015144 <scalbn+0xe4>)
 8015088:	429e      	cmp	r6, r3
 801508a:	4604      	mov	r4, r0
 801508c:	460d      	mov	r5, r1
 801508e:	da12      	bge.n	80150b6 <scalbn+0x56>
 8015090:	a327      	add	r3, pc, #156	; (adr r3, 8015130 <scalbn+0xd0>)
 8015092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015096:	f7eb fac7 	bl	8000628 <__aeabi_dmul>
 801509a:	e009      	b.n	80150b0 <scalbn+0x50>
 801509c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80150a0:	428a      	cmp	r2, r1
 80150a2:	d10c      	bne.n	80150be <scalbn+0x5e>
 80150a4:	ee10 2a10 	vmov	r2, s0
 80150a8:	4620      	mov	r0, r4
 80150aa:	4629      	mov	r1, r5
 80150ac:	f7eb f906 	bl	80002bc <__adddf3>
 80150b0:	4604      	mov	r4, r0
 80150b2:	460d      	mov	r5, r1
 80150b4:	e01c      	b.n	80150f0 <scalbn+0x90>
 80150b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80150ba:	460b      	mov	r3, r1
 80150bc:	3a36      	subs	r2, #54	; 0x36
 80150be:	4432      	add	r2, r6
 80150c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80150c4:	428a      	cmp	r2, r1
 80150c6:	dd0b      	ble.n	80150e0 <scalbn+0x80>
 80150c8:	ec45 4b11 	vmov	d1, r4, r5
 80150cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015138 <scalbn+0xd8>
 80150d0:	f000 f83c 	bl	801514c <copysign>
 80150d4:	a318      	add	r3, pc, #96	; (adr r3, 8015138 <scalbn+0xd8>)
 80150d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150da:	ec51 0b10 	vmov	r0, r1, d0
 80150de:	e7da      	b.n	8015096 <scalbn+0x36>
 80150e0:	2a00      	cmp	r2, #0
 80150e2:	dd08      	ble.n	80150f6 <scalbn+0x96>
 80150e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80150e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80150ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80150f0:	ec45 4b10 	vmov	d0, r4, r5
 80150f4:	bd70      	pop	{r4, r5, r6, pc}
 80150f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80150fa:	da0d      	bge.n	8015118 <scalbn+0xb8>
 80150fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015100:	429e      	cmp	r6, r3
 8015102:	ec45 4b11 	vmov	d1, r4, r5
 8015106:	dce1      	bgt.n	80150cc <scalbn+0x6c>
 8015108:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015130 <scalbn+0xd0>
 801510c:	f000 f81e 	bl	801514c <copysign>
 8015110:	a307      	add	r3, pc, #28	; (adr r3, 8015130 <scalbn+0xd0>)
 8015112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015116:	e7e0      	b.n	80150da <scalbn+0x7a>
 8015118:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801511c:	3236      	adds	r2, #54	; 0x36
 801511e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015126:	4620      	mov	r0, r4
 8015128:	4629      	mov	r1, r5
 801512a:	2200      	movs	r2, #0
 801512c:	4b06      	ldr	r3, [pc, #24]	; (8015148 <scalbn+0xe8>)
 801512e:	e7b2      	b.n	8015096 <scalbn+0x36>
 8015130:	c2f8f359 	.word	0xc2f8f359
 8015134:	01a56e1f 	.word	0x01a56e1f
 8015138:	8800759c 	.word	0x8800759c
 801513c:	7e37e43c 	.word	0x7e37e43c
 8015140:	43500000 	.word	0x43500000
 8015144:	ffff3cb0 	.word	0xffff3cb0
 8015148:	3c900000 	.word	0x3c900000

0801514c <copysign>:
 801514c:	ec51 0b10 	vmov	r0, r1, d0
 8015150:	ee11 0a90 	vmov	r0, s3
 8015154:	ee10 2a10 	vmov	r2, s0
 8015158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801515c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015160:	ea41 0300 	orr.w	r3, r1, r0
 8015164:	ec43 2b10 	vmov	d0, r2, r3
 8015168:	4770      	bx	lr
	...

0801516c <__errno>:
 801516c:	4b01      	ldr	r3, [pc, #4]	; (8015174 <__errno+0x8>)
 801516e:	6818      	ldr	r0, [r3, #0]
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop
 8015174:	2000000c 	.word	0x2000000c

08015178 <__libc_init_array>:
 8015178:	b570      	push	{r4, r5, r6, lr}
 801517a:	4e0d      	ldr	r6, [pc, #52]	; (80151b0 <__libc_init_array+0x38>)
 801517c:	4c0d      	ldr	r4, [pc, #52]	; (80151b4 <__libc_init_array+0x3c>)
 801517e:	1ba4      	subs	r4, r4, r6
 8015180:	10a4      	asrs	r4, r4, #2
 8015182:	2500      	movs	r5, #0
 8015184:	42a5      	cmp	r5, r4
 8015186:	d109      	bne.n	801519c <__libc_init_array+0x24>
 8015188:	4e0b      	ldr	r6, [pc, #44]	; (80151b8 <__libc_init_array+0x40>)
 801518a:	4c0c      	ldr	r4, [pc, #48]	; (80151bc <__libc_init_array+0x44>)
 801518c:	f004 f9e6 	bl	801955c <_init>
 8015190:	1ba4      	subs	r4, r4, r6
 8015192:	10a4      	asrs	r4, r4, #2
 8015194:	2500      	movs	r5, #0
 8015196:	42a5      	cmp	r5, r4
 8015198:	d105      	bne.n	80151a6 <__libc_init_array+0x2e>
 801519a:	bd70      	pop	{r4, r5, r6, pc}
 801519c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151a0:	4798      	blx	r3
 80151a2:	3501      	adds	r5, #1
 80151a4:	e7ee      	b.n	8015184 <__libc_init_array+0xc>
 80151a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151aa:	4798      	blx	r3
 80151ac:	3501      	adds	r5, #1
 80151ae:	e7f2      	b.n	8015196 <__libc_init_array+0x1e>
 80151b0:	08019f7c 	.word	0x08019f7c
 80151b4:	08019f7c 	.word	0x08019f7c
 80151b8:	08019f7c 	.word	0x08019f7c
 80151bc:	08019f84 	.word	0x08019f84

080151c0 <memset>:
 80151c0:	4402      	add	r2, r0
 80151c2:	4603      	mov	r3, r0
 80151c4:	4293      	cmp	r3, r2
 80151c6:	d100      	bne.n	80151ca <memset+0xa>
 80151c8:	4770      	bx	lr
 80151ca:	f803 1b01 	strb.w	r1, [r3], #1
 80151ce:	e7f9      	b.n	80151c4 <memset+0x4>

080151d0 <__cvt>:
 80151d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80151d4:	ec55 4b10 	vmov	r4, r5, d0
 80151d8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80151da:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80151de:	2d00      	cmp	r5, #0
 80151e0:	460e      	mov	r6, r1
 80151e2:	4691      	mov	r9, r2
 80151e4:	4619      	mov	r1, r3
 80151e6:	bfb8      	it	lt
 80151e8:	4622      	movlt	r2, r4
 80151ea:	462b      	mov	r3, r5
 80151ec:	f027 0720 	bic.w	r7, r7, #32
 80151f0:	bfbb      	ittet	lt
 80151f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80151f6:	461d      	movlt	r5, r3
 80151f8:	2300      	movge	r3, #0
 80151fa:	232d      	movlt	r3, #45	; 0x2d
 80151fc:	bfb8      	it	lt
 80151fe:	4614      	movlt	r4, r2
 8015200:	2f46      	cmp	r7, #70	; 0x46
 8015202:	700b      	strb	r3, [r1, #0]
 8015204:	d004      	beq.n	8015210 <__cvt+0x40>
 8015206:	2f45      	cmp	r7, #69	; 0x45
 8015208:	d100      	bne.n	801520c <__cvt+0x3c>
 801520a:	3601      	adds	r6, #1
 801520c:	2102      	movs	r1, #2
 801520e:	e000      	b.n	8015212 <__cvt+0x42>
 8015210:	2103      	movs	r1, #3
 8015212:	ab03      	add	r3, sp, #12
 8015214:	9301      	str	r3, [sp, #4]
 8015216:	ab02      	add	r3, sp, #8
 8015218:	9300      	str	r3, [sp, #0]
 801521a:	4632      	mov	r2, r6
 801521c:	4653      	mov	r3, sl
 801521e:	ec45 4b10 	vmov	d0, r4, r5
 8015222:	f001 fdfd 	bl	8016e20 <_dtoa_r>
 8015226:	2f47      	cmp	r7, #71	; 0x47
 8015228:	4680      	mov	r8, r0
 801522a:	d102      	bne.n	8015232 <__cvt+0x62>
 801522c:	f019 0f01 	tst.w	r9, #1
 8015230:	d026      	beq.n	8015280 <__cvt+0xb0>
 8015232:	2f46      	cmp	r7, #70	; 0x46
 8015234:	eb08 0906 	add.w	r9, r8, r6
 8015238:	d111      	bne.n	801525e <__cvt+0x8e>
 801523a:	f898 3000 	ldrb.w	r3, [r8]
 801523e:	2b30      	cmp	r3, #48	; 0x30
 8015240:	d10a      	bne.n	8015258 <__cvt+0x88>
 8015242:	2200      	movs	r2, #0
 8015244:	2300      	movs	r3, #0
 8015246:	4620      	mov	r0, r4
 8015248:	4629      	mov	r1, r5
 801524a:	f7eb fc55 	bl	8000af8 <__aeabi_dcmpeq>
 801524e:	b918      	cbnz	r0, 8015258 <__cvt+0x88>
 8015250:	f1c6 0601 	rsb	r6, r6, #1
 8015254:	f8ca 6000 	str.w	r6, [sl]
 8015258:	f8da 3000 	ldr.w	r3, [sl]
 801525c:	4499      	add	r9, r3
 801525e:	2200      	movs	r2, #0
 8015260:	2300      	movs	r3, #0
 8015262:	4620      	mov	r0, r4
 8015264:	4629      	mov	r1, r5
 8015266:	f7eb fc47 	bl	8000af8 <__aeabi_dcmpeq>
 801526a:	b938      	cbnz	r0, 801527c <__cvt+0xac>
 801526c:	2230      	movs	r2, #48	; 0x30
 801526e:	9b03      	ldr	r3, [sp, #12]
 8015270:	454b      	cmp	r3, r9
 8015272:	d205      	bcs.n	8015280 <__cvt+0xb0>
 8015274:	1c59      	adds	r1, r3, #1
 8015276:	9103      	str	r1, [sp, #12]
 8015278:	701a      	strb	r2, [r3, #0]
 801527a:	e7f8      	b.n	801526e <__cvt+0x9e>
 801527c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015280:	9b03      	ldr	r3, [sp, #12]
 8015282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015284:	eba3 0308 	sub.w	r3, r3, r8
 8015288:	4640      	mov	r0, r8
 801528a:	6013      	str	r3, [r2, #0]
 801528c:	b004      	add	sp, #16
 801528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015292 <__exponent>:
 8015292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015294:	2900      	cmp	r1, #0
 8015296:	4604      	mov	r4, r0
 8015298:	bfba      	itte	lt
 801529a:	4249      	neglt	r1, r1
 801529c:	232d      	movlt	r3, #45	; 0x2d
 801529e:	232b      	movge	r3, #43	; 0x2b
 80152a0:	2909      	cmp	r1, #9
 80152a2:	f804 2b02 	strb.w	r2, [r4], #2
 80152a6:	7043      	strb	r3, [r0, #1]
 80152a8:	dd20      	ble.n	80152ec <__exponent+0x5a>
 80152aa:	f10d 0307 	add.w	r3, sp, #7
 80152ae:	461f      	mov	r7, r3
 80152b0:	260a      	movs	r6, #10
 80152b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80152b6:	fb06 1115 	mls	r1, r6, r5, r1
 80152ba:	3130      	adds	r1, #48	; 0x30
 80152bc:	2d09      	cmp	r5, #9
 80152be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80152c2:	f103 32ff 	add.w	r2, r3, #4294967295
 80152c6:	4629      	mov	r1, r5
 80152c8:	dc09      	bgt.n	80152de <__exponent+0x4c>
 80152ca:	3130      	adds	r1, #48	; 0x30
 80152cc:	3b02      	subs	r3, #2
 80152ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80152d2:	42bb      	cmp	r3, r7
 80152d4:	4622      	mov	r2, r4
 80152d6:	d304      	bcc.n	80152e2 <__exponent+0x50>
 80152d8:	1a10      	subs	r0, r2, r0
 80152da:	b003      	add	sp, #12
 80152dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152de:	4613      	mov	r3, r2
 80152e0:	e7e7      	b.n	80152b2 <__exponent+0x20>
 80152e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152e6:	f804 2b01 	strb.w	r2, [r4], #1
 80152ea:	e7f2      	b.n	80152d2 <__exponent+0x40>
 80152ec:	2330      	movs	r3, #48	; 0x30
 80152ee:	4419      	add	r1, r3
 80152f0:	7083      	strb	r3, [r0, #2]
 80152f2:	1d02      	adds	r2, r0, #4
 80152f4:	70c1      	strb	r1, [r0, #3]
 80152f6:	e7ef      	b.n	80152d8 <__exponent+0x46>

080152f8 <_printf_float>:
 80152f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152fc:	b08d      	sub	sp, #52	; 0x34
 80152fe:	460c      	mov	r4, r1
 8015300:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015304:	4616      	mov	r6, r2
 8015306:	461f      	mov	r7, r3
 8015308:	4605      	mov	r5, r0
 801530a:	f002 fe7b 	bl	8018004 <_localeconv_r>
 801530e:	6803      	ldr	r3, [r0, #0]
 8015310:	9304      	str	r3, [sp, #16]
 8015312:	4618      	mov	r0, r3
 8015314:	f7ea ff74 	bl	8000200 <strlen>
 8015318:	2300      	movs	r3, #0
 801531a:	930a      	str	r3, [sp, #40]	; 0x28
 801531c:	f8d8 3000 	ldr.w	r3, [r8]
 8015320:	9005      	str	r0, [sp, #20]
 8015322:	3307      	adds	r3, #7
 8015324:	f023 0307 	bic.w	r3, r3, #7
 8015328:	f103 0208 	add.w	r2, r3, #8
 801532c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015330:	f8d4 b000 	ldr.w	fp, [r4]
 8015334:	f8c8 2000 	str.w	r2, [r8]
 8015338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015340:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015344:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015348:	9307      	str	r3, [sp, #28]
 801534a:	f8cd 8018 	str.w	r8, [sp, #24]
 801534e:	f04f 32ff 	mov.w	r2, #4294967295
 8015352:	4ba7      	ldr	r3, [pc, #668]	; (80155f0 <_printf_float+0x2f8>)
 8015354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015358:	f7eb fc00 	bl	8000b5c <__aeabi_dcmpun>
 801535c:	bb70      	cbnz	r0, 80153bc <_printf_float+0xc4>
 801535e:	f04f 32ff 	mov.w	r2, #4294967295
 8015362:	4ba3      	ldr	r3, [pc, #652]	; (80155f0 <_printf_float+0x2f8>)
 8015364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015368:	f7eb fbda 	bl	8000b20 <__aeabi_dcmple>
 801536c:	bb30      	cbnz	r0, 80153bc <_printf_float+0xc4>
 801536e:	2200      	movs	r2, #0
 8015370:	2300      	movs	r3, #0
 8015372:	4640      	mov	r0, r8
 8015374:	4649      	mov	r1, r9
 8015376:	f7eb fbc9 	bl	8000b0c <__aeabi_dcmplt>
 801537a:	b110      	cbz	r0, 8015382 <_printf_float+0x8a>
 801537c:	232d      	movs	r3, #45	; 0x2d
 801537e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015382:	4a9c      	ldr	r2, [pc, #624]	; (80155f4 <_printf_float+0x2fc>)
 8015384:	4b9c      	ldr	r3, [pc, #624]	; (80155f8 <_printf_float+0x300>)
 8015386:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801538a:	bf8c      	ite	hi
 801538c:	4690      	movhi	r8, r2
 801538e:	4698      	movls	r8, r3
 8015390:	2303      	movs	r3, #3
 8015392:	f02b 0204 	bic.w	r2, fp, #4
 8015396:	6123      	str	r3, [r4, #16]
 8015398:	6022      	str	r2, [r4, #0]
 801539a:	f04f 0900 	mov.w	r9, #0
 801539e:	9700      	str	r7, [sp, #0]
 80153a0:	4633      	mov	r3, r6
 80153a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80153a4:	4621      	mov	r1, r4
 80153a6:	4628      	mov	r0, r5
 80153a8:	f000 f9e6 	bl	8015778 <_printf_common>
 80153ac:	3001      	adds	r0, #1
 80153ae:	f040 808d 	bne.w	80154cc <_printf_float+0x1d4>
 80153b2:	f04f 30ff 	mov.w	r0, #4294967295
 80153b6:	b00d      	add	sp, #52	; 0x34
 80153b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153bc:	4642      	mov	r2, r8
 80153be:	464b      	mov	r3, r9
 80153c0:	4640      	mov	r0, r8
 80153c2:	4649      	mov	r1, r9
 80153c4:	f7eb fbca 	bl	8000b5c <__aeabi_dcmpun>
 80153c8:	b110      	cbz	r0, 80153d0 <_printf_float+0xd8>
 80153ca:	4a8c      	ldr	r2, [pc, #560]	; (80155fc <_printf_float+0x304>)
 80153cc:	4b8c      	ldr	r3, [pc, #560]	; (8015600 <_printf_float+0x308>)
 80153ce:	e7da      	b.n	8015386 <_printf_float+0x8e>
 80153d0:	6861      	ldr	r1, [r4, #4]
 80153d2:	1c4b      	adds	r3, r1, #1
 80153d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80153d8:	a80a      	add	r0, sp, #40	; 0x28
 80153da:	d13e      	bne.n	801545a <_printf_float+0x162>
 80153dc:	2306      	movs	r3, #6
 80153de:	6063      	str	r3, [r4, #4]
 80153e0:	2300      	movs	r3, #0
 80153e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80153e6:	ab09      	add	r3, sp, #36	; 0x24
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	ec49 8b10 	vmov	d0, r8, r9
 80153ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80153f2:	6022      	str	r2, [r4, #0]
 80153f4:	f8cd a004 	str.w	sl, [sp, #4]
 80153f8:	6861      	ldr	r1, [r4, #4]
 80153fa:	4628      	mov	r0, r5
 80153fc:	f7ff fee8 	bl	80151d0 <__cvt>
 8015400:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015404:	2b47      	cmp	r3, #71	; 0x47
 8015406:	4680      	mov	r8, r0
 8015408:	d109      	bne.n	801541e <_printf_float+0x126>
 801540a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801540c:	1cd8      	adds	r0, r3, #3
 801540e:	db02      	blt.n	8015416 <_printf_float+0x11e>
 8015410:	6862      	ldr	r2, [r4, #4]
 8015412:	4293      	cmp	r3, r2
 8015414:	dd47      	ble.n	80154a6 <_printf_float+0x1ae>
 8015416:	f1aa 0a02 	sub.w	sl, sl, #2
 801541a:	fa5f fa8a 	uxtb.w	sl, sl
 801541e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015424:	d824      	bhi.n	8015470 <_printf_float+0x178>
 8015426:	3901      	subs	r1, #1
 8015428:	4652      	mov	r2, sl
 801542a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801542e:	9109      	str	r1, [sp, #36]	; 0x24
 8015430:	f7ff ff2f 	bl	8015292 <__exponent>
 8015434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015436:	1813      	adds	r3, r2, r0
 8015438:	2a01      	cmp	r2, #1
 801543a:	4681      	mov	r9, r0
 801543c:	6123      	str	r3, [r4, #16]
 801543e:	dc02      	bgt.n	8015446 <_printf_float+0x14e>
 8015440:	6822      	ldr	r2, [r4, #0]
 8015442:	07d1      	lsls	r1, r2, #31
 8015444:	d501      	bpl.n	801544a <_printf_float+0x152>
 8015446:	3301      	adds	r3, #1
 8015448:	6123      	str	r3, [r4, #16]
 801544a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801544e:	2b00      	cmp	r3, #0
 8015450:	d0a5      	beq.n	801539e <_printf_float+0xa6>
 8015452:	232d      	movs	r3, #45	; 0x2d
 8015454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015458:	e7a1      	b.n	801539e <_printf_float+0xa6>
 801545a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801545e:	f000 8177 	beq.w	8015750 <_printf_float+0x458>
 8015462:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015466:	d1bb      	bne.n	80153e0 <_printf_float+0xe8>
 8015468:	2900      	cmp	r1, #0
 801546a:	d1b9      	bne.n	80153e0 <_printf_float+0xe8>
 801546c:	2301      	movs	r3, #1
 801546e:	e7b6      	b.n	80153de <_printf_float+0xe6>
 8015470:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015474:	d119      	bne.n	80154aa <_printf_float+0x1b2>
 8015476:	2900      	cmp	r1, #0
 8015478:	6863      	ldr	r3, [r4, #4]
 801547a:	dd0c      	ble.n	8015496 <_printf_float+0x19e>
 801547c:	6121      	str	r1, [r4, #16]
 801547e:	b913      	cbnz	r3, 8015486 <_printf_float+0x18e>
 8015480:	6822      	ldr	r2, [r4, #0]
 8015482:	07d2      	lsls	r2, r2, #31
 8015484:	d502      	bpl.n	801548c <_printf_float+0x194>
 8015486:	3301      	adds	r3, #1
 8015488:	440b      	add	r3, r1
 801548a:	6123      	str	r3, [r4, #16]
 801548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801548e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015490:	f04f 0900 	mov.w	r9, #0
 8015494:	e7d9      	b.n	801544a <_printf_float+0x152>
 8015496:	b913      	cbnz	r3, 801549e <_printf_float+0x1a6>
 8015498:	6822      	ldr	r2, [r4, #0]
 801549a:	07d0      	lsls	r0, r2, #31
 801549c:	d501      	bpl.n	80154a2 <_printf_float+0x1aa>
 801549e:	3302      	adds	r3, #2
 80154a0:	e7f3      	b.n	801548a <_printf_float+0x192>
 80154a2:	2301      	movs	r3, #1
 80154a4:	e7f1      	b.n	801548a <_printf_float+0x192>
 80154a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80154aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80154ae:	4293      	cmp	r3, r2
 80154b0:	db05      	blt.n	80154be <_printf_float+0x1c6>
 80154b2:	6822      	ldr	r2, [r4, #0]
 80154b4:	6123      	str	r3, [r4, #16]
 80154b6:	07d1      	lsls	r1, r2, #31
 80154b8:	d5e8      	bpl.n	801548c <_printf_float+0x194>
 80154ba:	3301      	adds	r3, #1
 80154bc:	e7e5      	b.n	801548a <_printf_float+0x192>
 80154be:	2b00      	cmp	r3, #0
 80154c0:	bfd4      	ite	le
 80154c2:	f1c3 0302 	rsble	r3, r3, #2
 80154c6:	2301      	movgt	r3, #1
 80154c8:	4413      	add	r3, r2
 80154ca:	e7de      	b.n	801548a <_printf_float+0x192>
 80154cc:	6823      	ldr	r3, [r4, #0]
 80154ce:	055a      	lsls	r2, r3, #21
 80154d0:	d407      	bmi.n	80154e2 <_printf_float+0x1ea>
 80154d2:	6923      	ldr	r3, [r4, #16]
 80154d4:	4642      	mov	r2, r8
 80154d6:	4631      	mov	r1, r6
 80154d8:	4628      	mov	r0, r5
 80154da:	47b8      	blx	r7
 80154dc:	3001      	adds	r0, #1
 80154de:	d12b      	bne.n	8015538 <_printf_float+0x240>
 80154e0:	e767      	b.n	80153b2 <_printf_float+0xba>
 80154e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80154e6:	f240 80dc 	bls.w	80156a2 <_printf_float+0x3aa>
 80154ea:	2200      	movs	r2, #0
 80154ec:	2300      	movs	r3, #0
 80154ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80154f2:	f7eb fb01 	bl	8000af8 <__aeabi_dcmpeq>
 80154f6:	2800      	cmp	r0, #0
 80154f8:	d033      	beq.n	8015562 <_printf_float+0x26a>
 80154fa:	2301      	movs	r3, #1
 80154fc:	4a41      	ldr	r2, [pc, #260]	; (8015604 <_printf_float+0x30c>)
 80154fe:	4631      	mov	r1, r6
 8015500:	4628      	mov	r0, r5
 8015502:	47b8      	blx	r7
 8015504:	3001      	adds	r0, #1
 8015506:	f43f af54 	beq.w	80153b2 <_printf_float+0xba>
 801550a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801550e:	429a      	cmp	r2, r3
 8015510:	db02      	blt.n	8015518 <_printf_float+0x220>
 8015512:	6823      	ldr	r3, [r4, #0]
 8015514:	07d8      	lsls	r0, r3, #31
 8015516:	d50f      	bpl.n	8015538 <_printf_float+0x240>
 8015518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801551c:	4631      	mov	r1, r6
 801551e:	4628      	mov	r0, r5
 8015520:	47b8      	blx	r7
 8015522:	3001      	adds	r0, #1
 8015524:	f43f af45 	beq.w	80153b2 <_printf_float+0xba>
 8015528:	f04f 0800 	mov.w	r8, #0
 801552c:	f104 091a 	add.w	r9, r4, #26
 8015530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015532:	3b01      	subs	r3, #1
 8015534:	4543      	cmp	r3, r8
 8015536:	dc09      	bgt.n	801554c <_printf_float+0x254>
 8015538:	6823      	ldr	r3, [r4, #0]
 801553a:	079b      	lsls	r3, r3, #30
 801553c:	f100 8103 	bmi.w	8015746 <_printf_float+0x44e>
 8015540:	68e0      	ldr	r0, [r4, #12]
 8015542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015544:	4298      	cmp	r0, r3
 8015546:	bfb8      	it	lt
 8015548:	4618      	movlt	r0, r3
 801554a:	e734      	b.n	80153b6 <_printf_float+0xbe>
 801554c:	2301      	movs	r3, #1
 801554e:	464a      	mov	r2, r9
 8015550:	4631      	mov	r1, r6
 8015552:	4628      	mov	r0, r5
 8015554:	47b8      	blx	r7
 8015556:	3001      	adds	r0, #1
 8015558:	f43f af2b 	beq.w	80153b2 <_printf_float+0xba>
 801555c:	f108 0801 	add.w	r8, r8, #1
 8015560:	e7e6      	b.n	8015530 <_printf_float+0x238>
 8015562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015564:	2b00      	cmp	r3, #0
 8015566:	dc2b      	bgt.n	80155c0 <_printf_float+0x2c8>
 8015568:	2301      	movs	r3, #1
 801556a:	4a26      	ldr	r2, [pc, #152]	; (8015604 <_printf_float+0x30c>)
 801556c:	4631      	mov	r1, r6
 801556e:	4628      	mov	r0, r5
 8015570:	47b8      	blx	r7
 8015572:	3001      	adds	r0, #1
 8015574:	f43f af1d 	beq.w	80153b2 <_printf_float+0xba>
 8015578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801557a:	b923      	cbnz	r3, 8015586 <_printf_float+0x28e>
 801557c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801557e:	b913      	cbnz	r3, 8015586 <_printf_float+0x28e>
 8015580:	6823      	ldr	r3, [r4, #0]
 8015582:	07d9      	lsls	r1, r3, #31
 8015584:	d5d8      	bpl.n	8015538 <_printf_float+0x240>
 8015586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801558a:	4631      	mov	r1, r6
 801558c:	4628      	mov	r0, r5
 801558e:	47b8      	blx	r7
 8015590:	3001      	adds	r0, #1
 8015592:	f43f af0e 	beq.w	80153b2 <_printf_float+0xba>
 8015596:	f04f 0900 	mov.w	r9, #0
 801559a:	f104 0a1a 	add.w	sl, r4, #26
 801559e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155a0:	425b      	negs	r3, r3
 80155a2:	454b      	cmp	r3, r9
 80155a4:	dc01      	bgt.n	80155aa <_printf_float+0x2b2>
 80155a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a8:	e794      	b.n	80154d4 <_printf_float+0x1dc>
 80155aa:	2301      	movs	r3, #1
 80155ac:	4652      	mov	r2, sl
 80155ae:	4631      	mov	r1, r6
 80155b0:	4628      	mov	r0, r5
 80155b2:	47b8      	blx	r7
 80155b4:	3001      	adds	r0, #1
 80155b6:	f43f aefc 	beq.w	80153b2 <_printf_float+0xba>
 80155ba:	f109 0901 	add.w	r9, r9, #1
 80155be:	e7ee      	b.n	801559e <_printf_float+0x2a6>
 80155c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80155c4:	429a      	cmp	r2, r3
 80155c6:	bfa8      	it	ge
 80155c8:	461a      	movge	r2, r3
 80155ca:	2a00      	cmp	r2, #0
 80155cc:	4691      	mov	r9, r2
 80155ce:	dd07      	ble.n	80155e0 <_printf_float+0x2e8>
 80155d0:	4613      	mov	r3, r2
 80155d2:	4631      	mov	r1, r6
 80155d4:	4642      	mov	r2, r8
 80155d6:	4628      	mov	r0, r5
 80155d8:	47b8      	blx	r7
 80155da:	3001      	adds	r0, #1
 80155dc:	f43f aee9 	beq.w	80153b2 <_printf_float+0xba>
 80155e0:	f104 031a 	add.w	r3, r4, #26
 80155e4:	f04f 0b00 	mov.w	fp, #0
 80155e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80155ec:	9306      	str	r3, [sp, #24]
 80155ee:	e015      	b.n	801561c <_printf_float+0x324>
 80155f0:	7fefffff 	.word	0x7fefffff
 80155f4:	08019c4c 	.word	0x08019c4c
 80155f8:	08019c48 	.word	0x08019c48
 80155fc:	08019c54 	.word	0x08019c54
 8015600:	08019c50 	.word	0x08019c50
 8015604:	08019e0b 	.word	0x08019e0b
 8015608:	2301      	movs	r3, #1
 801560a:	9a06      	ldr	r2, [sp, #24]
 801560c:	4631      	mov	r1, r6
 801560e:	4628      	mov	r0, r5
 8015610:	47b8      	blx	r7
 8015612:	3001      	adds	r0, #1
 8015614:	f43f aecd 	beq.w	80153b2 <_printf_float+0xba>
 8015618:	f10b 0b01 	add.w	fp, fp, #1
 801561c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015620:	ebaa 0309 	sub.w	r3, sl, r9
 8015624:	455b      	cmp	r3, fp
 8015626:	dcef      	bgt.n	8015608 <_printf_float+0x310>
 8015628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801562c:	429a      	cmp	r2, r3
 801562e:	44d0      	add	r8, sl
 8015630:	db15      	blt.n	801565e <_printf_float+0x366>
 8015632:	6823      	ldr	r3, [r4, #0]
 8015634:	07da      	lsls	r2, r3, #31
 8015636:	d412      	bmi.n	801565e <_printf_float+0x366>
 8015638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801563a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801563c:	eba3 020a 	sub.w	r2, r3, sl
 8015640:	eba3 0a01 	sub.w	sl, r3, r1
 8015644:	4592      	cmp	sl, r2
 8015646:	bfa8      	it	ge
 8015648:	4692      	movge	sl, r2
 801564a:	f1ba 0f00 	cmp.w	sl, #0
 801564e:	dc0e      	bgt.n	801566e <_printf_float+0x376>
 8015650:	f04f 0800 	mov.w	r8, #0
 8015654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015658:	f104 091a 	add.w	r9, r4, #26
 801565c:	e019      	b.n	8015692 <_printf_float+0x39a>
 801565e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015662:	4631      	mov	r1, r6
 8015664:	4628      	mov	r0, r5
 8015666:	47b8      	blx	r7
 8015668:	3001      	adds	r0, #1
 801566a:	d1e5      	bne.n	8015638 <_printf_float+0x340>
 801566c:	e6a1      	b.n	80153b2 <_printf_float+0xba>
 801566e:	4653      	mov	r3, sl
 8015670:	4642      	mov	r2, r8
 8015672:	4631      	mov	r1, r6
 8015674:	4628      	mov	r0, r5
 8015676:	47b8      	blx	r7
 8015678:	3001      	adds	r0, #1
 801567a:	d1e9      	bne.n	8015650 <_printf_float+0x358>
 801567c:	e699      	b.n	80153b2 <_printf_float+0xba>
 801567e:	2301      	movs	r3, #1
 8015680:	464a      	mov	r2, r9
 8015682:	4631      	mov	r1, r6
 8015684:	4628      	mov	r0, r5
 8015686:	47b8      	blx	r7
 8015688:	3001      	adds	r0, #1
 801568a:	f43f ae92 	beq.w	80153b2 <_printf_float+0xba>
 801568e:	f108 0801 	add.w	r8, r8, #1
 8015692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015696:	1a9b      	subs	r3, r3, r2
 8015698:	eba3 030a 	sub.w	r3, r3, sl
 801569c:	4543      	cmp	r3, r8
 801569e:	dcee      	bgt.n	801567e <_printf_float+0x386>
 80156a0:	e74a      	b.n	8015538 <_printf_float+0x240>
 80156a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156a4:	2a01      	cmp	r2, #1
 80156a6:	dc01      	bgt.n	80156ac <_printf_float+0x3b4>
 80156a8:	07db      	lsls	r3, r3, #31
 80156aa:	d53a      	bpl.n	8015722 <_printf_float+0x42a>
 80156ac:	2301      	movs	r3, #1
 80156ae:	4642      	mov	r2, r8
 80156b0:	4631      	mov	r1, r6
 80156b2:	4628      	mov	r0, r5
 80156b4:	47b8      	blx	r7
 80156b6:	3001      	adds	r0, #1
 80156b8:	f43f ae7b 	beq.w	80153b2 <_printf_float+0xba>
 80156bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156c0:	4631      	mov	r1, r6
 80156c2:	4628      	mov	r0, r5
 80156c4:	47b8      	blx	r7
 80156c6:	3001      	adds	r0, #1
 80156c8:	f108 0801 	add.w	r8, r8, #1
 80156cc:	f43f ae71 	beq.w	80153b2 <_printf_float+0xba>
 80156d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d2:	2200      	movs	r2, #0
 80156d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80156d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80156dc:	2300      	movs	r3, #0
 80156de:	f7eb fa0b 	bl	8000af8 <__aeabi_dcmpeq>
 80156e2:	b9c8      	cbnz	r0, 8015718 <_printf_float+0x420>
 80156e4:	4653      	mov	r3, sl
 80156e6:	4642      	mov	r2, r8
 80156e8:	4631      	mov	r1, r6
 80156ea:	4628      	mov	r0, r5
 80156ec:	47b8      	blx	r7
 80156ee:	3001      	adds	r0, #1
 80156f0:	d10e      	bne.n	8015710 <_printf_float+0x418>
 80156f2:	e65e      	b.n	80153b2 <_printf_float+0xba>
 80156f4:	2301      	movs	r3, #1
 80156f6:	4652      	mov	r2, sl
 80156f8:	4631      	mov	r1, r6
 80156fa:	4628      	mov	r0, r5
 80156fc:	47b8      	blx	r7
 80156fe:	3001      	adds	r0, #1
 8015700:	f43f ae57 	beq.w	80153b2 <_printf_float+0xba>
 8015704:	f108 0801 	add.w	r8, r8, #1
 8015708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801570a:	3b01      	subs	r3, #1
 801570c:	4543      	cmp	r3, r8
 801570e:	dcf1      	bgt.n	80156f4 <_printf_float+0x3fc>
 8015710:	464b      	mov	r3, r9
 8015712:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015716:	e6de      	b.n	80154d6 <_printf_float+0x1de>
 8015718:	f04f 0800 	mov.w	r8, #0
 801571c:	f104 0a1a 	add.w	sl, r4, #26
 8015720:	e7f2      	b.n	8015708 <_printf_float+0x410>
 8015722:	2301      	movs	r3, #1
 8015724:	e7df      	b.n	80156e6 <_printf_float+0x3ee>
 8015726:	2301      	movs	r3, #1
 8015728:	464a      	mov	r2, r9
 801572a:	4631      	mov	r1, r6
 801572c:	4628      	mov	r0, r5
 801572e:	47b8      	blx	r7
 8015730:	3001      	adds	r0, #1
 8015732:	f43f ae3e 	beq.w	80153b2 <_printf_float+0xba>
 8015736:	f108 0801 	add.w	r8, r8, #1
 801573a:	68e3      	ldr	r3, [r4, #12]
 801573c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801573e:	1a9b      	subs	r3, r3, r2
 8015740:	4543      	cmp	r3, r8
 8015742:	dcf0      	bgt.n	8015726 <_printf_float+0x42e>
 8015744:	e6fc      	b.n	8015540 <_printf_float+0x248>
 8015746:	f04f 0800 	mov.w	r8, #0
 801574a:	f104 0919 	add.w	r9, r4, #25
 801574e:	e7f4      	b.n	801573a <_printf_float+0x442>
 8015750:	2900      	cmp	r1, #0
 8015752:	f43f ae8b 	beq.w	801546c <_printf_float+0x174>
 8015756:	2300      	movs	r3, #0
 8015758:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801575c:	ab09      	add	r3, sp, #36	; 0x24
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	ec49 8b10 	vmov	d0, r8, r9
 8015764:	6022      	str	r2, [r4, #0]
 8015766:	f8cd a004 	str.w	sl, [sp, #4]
 801576a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801576e:	4628      	mov	r0, r5
 8015770:	f7ff fd2e 	bl	80151d0 <__cvt>
 8015774:	4680      	mov	r8, r0
 8015776:	e648      	b.n	801540a <_printf_float+0x112>

08015778 <_printf_common>:
 8015778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801577c:	4691      	mov	r9, r2
 801577e:	461f      	mov	r7, r3
 8015780:	688a      	ldr	r2, [r1, #8]
 8015782:	690b      	ldr	r3, [r1, #16]
 8015784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015788:	4293      	cmp	r3, r2
 801578a:	bfb8      	it	lt
 801578c:	4613      	movlt	r3, r2
 801578e:	f8c9 3000 	str.w	r3, [r9]
 8015792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015796:	4606      	mov	r6, r0
 8015798:	460c      	mov	r4, r1
 801579a:	b112      	cbz	r2, 80157a2 <_printf_common+0x2a>
 801579c:	3301      	adds	r3, #1
 801579e:	f8c9 3000 	str.w	r3, [r9]
 80157a2:	6823      	ldr	r3, [r4, #0]
 80157a4:	0699      	lsls	r1, r3, #26
 80157a6:	bf42      	ittt	mi
 80157a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80157ac:	3302      	addmi	r3, #2
 80157ae:	f8c9 3000 	strmi.w	r3, [r9]
 80157b2:	6825      	ldr	r5, [r4, #0]
 80157b4:	f015 0506 	ands.w	r5, r5, #6
 80157b8:	d107      	bne.n	80157ca <_printf_common+0x52>
 80157ba:	f104 0a19 	add.w	sl, r4, #25
 80157be:	68e3      	ldr	r3, [r4, #12]
 80157c0:	f8d9 2000 	ldr.w	r2, [r9]
 80157c4:	1a9b      	subs	r3, r3, r2
 80157c6:	42ab      	cmp	r3, r5
 80157c8:	dc28      	bgt.n	801581c <_printf_common+0xa4>
 80157ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80157ce:	6822      	ldr	r2, [r4, #0]
 80157d0:	3300      	adds	r3, #0
 80157d2:	bf18      	it	ne
 80157d4:	2301      	movne	r3, #1
 80157d6:	0692      	lsls	r2, r2, #26
 80157d8:	d42d      	bmi.n	8015836 <_printf_common+0xbe>
 80157da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80157de:	4639      	mov	r1, r7
 80157e0:	4630      	mov	r0, r6
 80157e2:	47c0      	blx	r8
 80157e4:	3001      	adds	r0, #1
 80157e6:	d020      	beq.n	801582a <_printf_common+0xb2>
 80157e8:	6823      	ldr	r3, [r4, #0]
 80157ea:	68e5      	ldr	r5, [r4, #12]
 80157ec:	f8d9 2000 	ldr.w	r2, [r9]
 80157f0:	f003 0306 	and.w	r3, r3, #6
 80157f4:	2b04      	cmp	r3, #4
 80157f6:	bf08      	it	eq
 80157f8:	1aad      	subeq	r5, r5, r2
 80157fa:	68a3      	ldr	r3, [r4, #8]
 80157fc:	6922      	ldr	r2, [r4, #16]
 80157fe:	bf0c      	ite	eq
 8015800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015804:	2500      	movne	r5, #0
 8015806:	4293      	cmp	r3, r2
 8015808:	bfc4      	itt	gt
 801580a:	1a9b      	subgt	r3, r3, r2
 801580c:	18ed      	addgt	r5, r5, r3
 801580e:	f04f 0900 	mov.w	r9, #0
 8015812:	341a      	adds	r4, #26
 8015814:	454d      	cmp	r5, r9
 8015816:	d11a      	bne.n	801584e <_printf_common+0xd6>
 8015818:	2000      	movs	r0, #0
 801581a:	e008      	b.n	801582e <_printf_common+0xb6>
 801581c:	2301      	movs	r3, #1
 801581e:	4652      	mov	r2, sl
 8015820:	4639      	mov	r1, r7
 8015822:	4630      	mov	r0, r6
 8015824:	47c0      	blx	r8
 8015826:	3001      	adds	r0, #1
 8015828:	d103      	bne.n	8015832 <_printf_common+0xba>
 801582a:	f04f 30ff 	mov.w	r0, #4294967295
 801582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015832:	3501      	adds	r5, #1
 8015834:	e7c3      	b.n	80157be <_printf_common+0x46>
 8015836:	18e1      	adds	r1, r4, r3
 8015838:	1c5a      	adds	r2, r3, #1
 801583a:	2030      	movs	r0, #48	; 0x30
 801583c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015840:	4422      	add	r2, r4
 8015842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801584a:	3302      	adds	r3, #2
 801584c:	e7c5      	b.n	80157da <_printf_common+0x62>
 801584e:	2301      	movs	r3, #1
 8015850:	4622      	mov	r2, r4
 8015852:	4639      	mov	r1, r7
 8015854:	4630      	mov	r0, r6
 8015856:	47c0      	blx	r8
 8015858:	3001      	adds	r0, #1
 801585a:	d0e6      	beq.n	801582a <_printf_common+0xb2>
 801585c:	f109 0901 	add.w	r9, r9, #1
 8015860:	e7d8      	b.n	8015814 <_printf_common+0x9c>
	...

08015864 <_printf_i>:
 8015864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801586c:	460c      	mov	r4, r1
 801586e:	7e09      	ldrb	r1, [r1, #24]
 8015870:	b085      	sub	sp, #20
 8015872:	296e      	cmp	r1, #110	; 0x6e
 8015874:	4617      	mov	r7, r2
 8015876:	4606      	mov	r6, r0
 8015878:	4698      	mov	r8, r3
 801587a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801587c:	f000 80b3 	beq.w	80159e6 <_printf_i+0x182>
 8015880:	d822      	bhi.n	80158c8 <_printf_i+0x64>
 8015882:	2963      	cmp	r1, #99	; 0x63
 8015884:	d036      	beq.n	80158f4 <_printf_i+0x90>
 8015886:	d80a      	bhi.n	801589e <_printf_i+0x3a>
 8015888:	2900      	cmp	r1, #0
 801588a:	f000 80b9 	beq.w	8015a00 <_printf_i+0x19c>
 801588e:	2958      	cmp	r1, #88	; 0x58
 8015890:	f000 8083 	beq.w	801599a <_printf_i+0x136>
 8015894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801589c:	e032      	b.n	8015904 <_printf_i+0xa0>
 801589e:	2964      	cmp	r1, #100	; 0x64
 80158a0:	d001      	beq.n	80158a6 <_printf_i+0x42>
 80158a2:	2969      	cmp	r1, #105	; 0x69
 80158a4:	d1f6      	bne.n	8015894 <_printf_i+0x30>
 80158a6:	6820      	ldr	r0, [r4, #0]
 80158a8:	6813      	ldr	r3, [r2, #0]
 80158aa:	0605      	lsls	r5, r0, #24
 80158ac:	f103 0104 	add.w	r1, r3, #4
 80158b0:	d52a      	bpl.n	8015908 <_printf_i+0xa4>
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	6011      	str	r1, [r2, #0]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	da03      	bge.n	80158c2 <_printf_i+0x5e>
 80158ba:	222d      	movs	r2, #45	; 0x2d
 80158bc:	425b      	negs	r3, r3
 80158be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80158c2:	486f      	ldr	r0, [pc, #444]	; (8015a80 <_printf_i+0x21c>)
 80158c4:	220a      	movs	r2, #10
 80158c6:	e039      	b.n	801593c <_printf_i+0xd8>
 80158c8:	2973      	cmp	r1, #115	; 0x73
 80158ca:	f000 809d 	beq.w	8015a08 <_printf_i+0x1a4>
 80158ce:	d808      	bhi.n	80158e2 <_printf_i+0x7e>
 80158d0:	296f      	cmp	r1, #111	; 0x6f
 80158d2:	d020      	beq.n	8015916 <_printf_i+0xb2>
 80158d4:	2970      	cmp	r1, #112	; 0x70
 80158d6:	d1dd      	bne.n	8015894 <_printf_i+0x30>
 80158d8:	6823      	ldr	r3, [r4, #0]
 80158da:	f043 0320 	orr.w	r3, r3, #32
 80158de:	6023      	str	r3, [r4, #0]
 80158e0:	e003      	b.n	80158ea <_printf_i+0x86>
 80158e2:	2975      	cmp	r1, #117	; 0x75
 80158e4:	d017      	beq.n	8015916 <_printf_i+0xb2>
 80158e6:	2978      	cmp	r1, #120	; 0x78
 80158e8:	d1d4      	bne.n	8015894 <_printf_i+0x30>
 80158ea:	2378      	movs	r3, #120	; 0x78
 80158ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80158f0:	4864      	ldr	r0, [pc, #400]	; (8015a84 <_printf_i+0x220>)
 80158f2:	e055      	b.n	80159a0 <_printf_i+0x13c>
 80158f4:	6813      	ldr	r3, [r2, #0]
 80158f6:	1d19      	adds	r1, r3, #4
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	6011      	str	r1, [r2, #0]
 80158fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015904:	2301      	movs	r3, #1
 8015906:	e08c      	b.n	8015a22 <_printf_i+0x1be>
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	6011      	str	r1, [r2, #0]
 801590c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015910:	bf18      	it	ne
 8015912:	b21b      	sxthne	r3, r3
 8015914:	e7cf      	b.n	80158b6 <_printf_i+0x52>
 8015916:	6813      	ldr	r3, [r2, #0]
 8015918:	6825      	ldr	r5, [r4, #0]
 801591a:	1d18      	adds	r0, r3, #4
 801591c:	6010      	str	r0, [r2, #0]
 801591e:	0628      	lsls	r0, r5, #24
 8015920:	d501      	bpl.n	8015926 <_printf_i+0xc2>
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	e002      	b.n	801592c <_printf_i+0xc8>
 8015926:	0668      	lsls	r0, r5, #25
 8015928:	d5fb      	bpl.n	8015922 <_printf_i+0xbe>
 801592a:	881b      	ldrh	r3, [r3, #0]
 801592c:	4854      	ldr	r0, [pc, #336]	; (8015a80 <_printf_i+0x21c>)
 801592e:	296f      	cmp	r1, #111	; 0x6f
 8015930:	bf14      	ite	ne
 8015932:	220a      	movne	r2, #10
 8015934:	2208      	moveq	r2, #8
 8015936:	2100      	movs	r1, #0
 8015938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801593c:	6865      	ldr	r5, [r4, #4]
 801593e:	60a5      	str	r5, [r4, #8]
 8015940:	2d00      	cmp	r5, #0
 8015942:	f2c0 8095 	blt.w	8015a70 <_printf_i+0x20c>
 8015946:	6821      	ldr	r1, [r4, #0]
 8015948:	f021 0104 	bic.w	r1, r1, #4
 801594c:	6021      	str	r1, [r4, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d13d      	bne.n	80159ce <_printf_i+0x16a>
 8015952:	2d00      	cmp	r5, #0
 8015954:	f040 808e 	bne.w	8015a74 <_printf_i+0x210>
 8015958:	4665      	mov	r5, ip
 801595a:	2a08      	cmp	r2, #8
 801595c:	d10b      	bne.n	8015976 <_printf_i+0x112>
 801595e:	6823      	ldr	r3, [r4, #0]
 8015960:	07db      	lsls	r3, r3, #31
 8015962:	d508      	bpl.n	8015976 <_printf_i+0x112>
 8015964:	6923      	ldr	r3, [r4, #16]
 8015966:	6862      	ldr	r2, [r4, #4]
 8015968:	429a      	cmp	r2, r3
 801596a:	bfde      	ittt	le
 801596c:	2330      	movle	r3, #48	; 0x30
 801596e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015972:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015976:	ebac 0305 	sub.w	r3, ip, r5
 801597a:	6123      	str	r3, [r4, #16]
 801597c:	f8cd 8000 	str.w	r8, [sp]
 8015980:	463b      	mov	r3, r7
 8015982:	aa03      	add	r2, sp, #12
 8015984:	4621      	mov	r1, r4
 8015986:	4630      	mov	r0, r6
 8015988:	f7ff fef6 	bl	8015778 <_printf_common>
 801598c:	3001      	adds	r0, #1
 801598e:	d14d      	bne.n	8015a2c <_printf_i+0x1c8>
 8015990:	f04f 30ff 	mov.w	r0, #4294967295
 8015994:	b005      	add	sp, #20
 8015996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801599a:	4839      	ldr	r0, [pc, #228]	; (8015a80 <_printf_i+0x21c>)
 801599c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80159a0:	6813      	ldr	r3, [r2, #0]
 80159a2:	6821      	ldr	r1, [r4, #0]
 80159a4:	1d1d      	adds	r5, r3, #4
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	6015      	str	r5, [r2, #0]
 80159aa:	060a      	lsls	r2, r1, #24
 80159ac:	d50b      	bpl.n	80159c6 <_printf_i+0x162>
 80159ae:	07ca      	lsls	r2, r1, #31
 80159b0:	bf44      	itt	mi
 80159b2:	f041 0120 	orrmi.w	r1, r1, #32
 80159b6:	6021      	strmi	r1, [r4, #0]
 80159b8:	b91b      	cbnz	r3, 80159c2 <_printf_i+0x15e>
 80159ba:	6822      	ldr	r2, [r4, #0]
 80159bc:	f022 0220 	bic.w	r2, r2, #32
 80159c0:	6022      	str	r2, [r4, #0]
 80159c2:	2210      	movs	r2, #16
 80159c4:	e7b7      	b.n	8015936 <_printf_i+0xd2>
 80159c6:	064d      	lsls	r5, r1, #25
 80159c8:	bf48      	it	mi
 80159ca:	b29b      	uxthmi	r3, r3
 80159cc:	e7ef      	b.n	80159ae <_printf_i+0x14a>
 80159ce:	4665      	mov	r5, ip
 80159d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80159d4:	fb02 3311 	mls	r3, r2, r1, r3
 80159d8:	5cc3      	ldrb	r3, [r0, r3]
 80159da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80159de:	460b      	mov	r3, r1
 80159e0:	2900      	cmp	r1, #0
 80159e2:	d1f5      	bne.n	80159d0 <_printf_i+0x16c>
 80159e4:	e7b9      	b.n	801595a <_printf_i+0xf6>
 80159e6:	6813      	ldr	r3, [r2, #0]
 80159e8:	6825      	ldr	r5, [r4, #0]
 80159ea:	6961      	ldr	r1, [r4, #20]
 80159ec:	1d18      	adds	r0, r3, #4
 80159ee:	6010      	str	r0, [r2, #0]
 80159f0:	0628      	lsls	r0, r5, #24
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	d501      	bpl.n	80159fa <_printf_i+0x196>
 80159f6:	6019      	str	r1, [r3, #0]
 80159f8:	e002      	b.n	8015a00 <_printf_i+0x19c>
 80159fa:	066a      	lsls	r2, r5, #25
 80159fc:	d5fb      	bpl.n	80159f6 <_printf_i+0x192>
 80159fe:	8019      	strh	r1, [r3, #0]
 8015a00:	2300      	movs	r3, #0
 8015a02:	6123      	str	r3, [r4, #16]
 8015a04:	4665      	mov	r5, ip
 8015a06:	e7b9      	b.n	801597c <_printf_i+0x118>
 8015a08:	6813      	ldr	r3, [r2, #0]
 8015a0a:	1d19      	adds	r1, r3, #4
 8015a0c:	6011      	str	r1, [r2, #0]
 8015a0e:	681d      	ldr	r5, [r3, #0]
 8015a10:	6862      	ldr	r2, [r4, #4]
 8015a12:	2100      	movs	r1, #0
 8015a14:	4628      	mov	r0, r5
 8015a16:	f7ea fbfb 	bl	8000210 <memchr>
 8015a1a:	b108      	cbz	r0, 8015a20 <_printf_i+0x1bc>
 8015a1c:	1b40      	subs	r0, r0, r5
 8015a1e:	6060      	str	r0, [r4, #4]
 8015a20:	6863      	ldr	r3, [r4, #4]
 8015a22:	6123      	str	r3, [r4, #16]
 8015a24:	2300      	movs	r3, #0
 8015a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a2a:	e7a7      	b.n	801597c <_printf_i+0x118>
 8015a2c:	6923      	ldr	r3, [r4, #16]
 8015a2e:	462a      	mov	r2, r5
 8015a30:	4639      	mov	r1, r7
 8015a32:	4630      	mov	r0, r6
 8015a34:	47c0      	blx	r8
 8015a36:	3001      	adds	r0, #1
 8015a38:	d0aa      	beq.n	8015990 <_printf_i+0x12c>
 8015a3a:	6823      	ldr	r3, [r4, #0]
 8015a3c:	079b      	lsls	r3, r3, #30
 8015a3e:	d413      	bmi.n	8015a68 <_printf_i+0x204>
 8015a40:	68e0      	ldr	r0, [r4, #12]
 8015a42:	9b03      	ldr	r3, [sp, #12]
 8015a44:	4298      	cmp	r0, r3
 8015a46:	bfb8      	it	lt
 8015a48:	4618      	movlt	r0, r3
 8015a4a:	e7a3      	b.n	8015994 <_printf_i+0x130>
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	464a      	mov	r2, r9
 8015a50:	4639      	mov	r1, r7
 8015a52:	4630      	mov	r0, r6
 8015a54:	47c0      	blx	r8
 8015a56:	3001      	adds	r0, #1
 8015a58:	d09a      	beq.n	8015990 <_printf_i+0x12c>
 8015a5a:	3501      	adds	r5, #1
 8015a5c:	68e3      	ldr	r3, [r4, #12]
 8015a5e:	9a03      	ldr	r2, [sp, #12]
 8015a60:	1a9b      	subs	r3, r3, r2
 8015a62:	42ab      	cmp	r3, r5
 8015a64:	dcf2      	bgt.n	8015a4c <_printf_i+0x1e8>
 8015a66:	e7eb      	b.n	8015a40 <_printf_i+0x1dc>
 8015a68:	2500      	movs	r5, #0
 8015a6a:	f104 0919 	add.w	r9, r4, #25
 8015a6e:	e7f5      	b.n	8015a5c <_printf_i+0x1f8>
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d1ac      	bne.n	80159ce <_printf_i+0x16a>
 8015a74:	7803      	ldrb	r3, [r0, #0]
 8015a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a7e:	e76c      	b.n	801595a <_printf_i+0xf6>
 8015a80:	08019c58 	.word	0x08019c58
 8015a84:	08019c69 	.word	0x08019c69

08015a88 <_scanf_float>:
 8015a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a8c:	469a      	mov	sl, r3
 8015a8e:	688b      	ldr	r3, [r1, #8]
 8015a90:	4616      	mov	r6, r2
 8015a92:	1e5a      	subs	r2, r3, #1
 8015a94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015a98:	b087      	sub	sp, #28
 8015a9a:	bf83      	ittte	hi
 8015a9c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015aa0:	189b      	addhi	r3, r3, r2
 8015aa2:	9301      	strhi	r3, [sp, #4]
 8015aa4:	2300      	movls	r3, #0
 8015aa6:	bf86      	itte	hi
 8015aa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015aac:	608b      	strhi	r3, [r1, #8]
 8015aae:	9301      	strls	r3, [sp, #4]
 8015ab0:	680b      	ldr	r3, [r1, #0]
 8015ab2:	4688      	mov	r8, r1
 8015ab4:	f04f 0b00 	mov.w	fp, #0
 8015ab8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015abc:	f848 3b1c 	str.w	r3, [r8], #28
 8015ac0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015ac4:	4607      	mov	r7, r0
 8015ac6:	460c      	mov	r4, r1
 8015ac8:	4645      	mov	r5, r8
 8015aca:	465a      	mov	r2, fp
 8015acc:	46d9      	mov	r9, fp
 8015ace:	f8cd b008 	str.w	fp, [sp, #8]
 8015ad2:	68a1      	ldr	r1, [r4, #8]
 8015ad4:	b181      	cbz	r1, 8015af8 <_scanf_float+0x70>
 8015ad6:	6833      	ldr	r3, [r6, #0]
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	2b49      	cmp	r3, #73	; 0x49
 8015adc:	d071      	beq.n	8015bc2 <_scanf_float+0x13a>
 8015ade:	d84d      	bhi.n	8015b7c <_scanf_float+0xf4>
 8015ae0:	2b39      	cmp	r3, #57	; 0x39
 8015ae2:	d840      	bhi.n	8015b66 <_scanf_float+0xde>
 8015ae4:	2b31      	cmp	r3, #49	; 0x31
 8015ae6:	f080 8088 	bcs.w	8015bfa <_scanf_float+0x172>
 8015aea:	2b2d      	cmp	r3, #45	; 0x2d
 8015aec:	f000 8090 	beq.w	8015c10 <_scanf_float+0x188>
 8015af0:	d815      	bhi.n	8015b1e <_scanf_float+0x96>
 8015af2:	2b2b      	cmp	r3, #43	; 0x2b
 8015af4:	f000 808c 	beq.w	8015c10 <_scanf_float+0x188>
 8015af8:	f1b9 0f00 	cmp.w	r9, #0
 8015afc:	d003      	beq.n	8015b06 <_scanf_float+0x7e>
 8015afe:	6823      	ldr	r3, [r4, #0]
 8015b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b04:	6023      	str	r3, [r4, #0]
 8015b06:	3a01      	subs	r2, #1
 8015b08:	2a01      	cmp	r2, #1
 8015b0a:	f200 80ea 	bhi.w	8015ce2 <_scanf_float+0x25a>
 8015b0e:	4545      	cmp	r5, r8
 8015b10:	f200 80dc 	bhi.w	8015ccc <_scanf_float+0x244>
 8015b14:	2601      	movs	r6, #1
 8015b16:	4630      	mov	r0, r6
 8015b18:	b007      	add	sp, #28
 8015b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8015b20:	f000 809f 	beq.w	8015c62 <_scanf_float+0x1da>
 8015b24:	2b30      	cmp	r3, #48	; 0x30
 8015b26:	d1e7      	bne.n	8015af8 <_scanf_float+0x70>
 8015b28:	6820      	ldr	r0, [r4, #0]
 8015b2a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015b2e:	d064      	beq.n	8015bfa <_scanf_float+0x172>
 8015b30:	9b01      	ldr	r3, [sp, #4]
 8015b32:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015b36:	6020      	str	r0, [r4, #0]
 8015b38:	f109 0901 	add.w	r9, r9, #1
 8015b3c:	b11b      	cbz	r3, 8015b46 <_scanf_float+0xbe>
 8015b3e:	3b01      	subs	r3, #1
 8015b40:	3101      	adds	r1, #1
 8015b42:	9301      	str	r3, [sp, #4]
 8015b44:	60a1      	str	r1, [r4, #8]
 8015b46:	68a3      	ldr	r3, [r4, #8]
 8015b48:	3b01      	subs	r3, #1
 8015b4a:	60a3      	str	r3, [r4, #8]
 8015b4c:	6923      	ldr	r3, [r4, #16]
 8015b4e:	3301      	adds	r3, #1
 8015b50:	6123      	str	r3, [r4, #16]
 8015b52:	6873      	ldr	r3, [r6, #4]
 8015b54:	3b01      	subs	r3, #1
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	6073      	str	r3, [r6, #4]
 8015b5a:	f340 80ac 	ble.w	8015cb6 <_scanf_float+0x22e>
 8015b5e:	6833      	ldr	r3, [r6, #0]
 8015b60:	3301      	adds	r3, #1
 8015b62:	6033      	str	r3, [r6, #0]
 8015b64:	e7b5      	b.n	8015ad2 <_scanf_float+0x4a>
 8015b66:	2b45      	cmp	r3, #69	; 0x45
 8015b68:	f000 8085 	beq.w	8015c76 <_scanf_float+0x1ee>
 8015b6c:	2b46      	cmp	r3, #70	; 0x46
 8015b6e:	d06a      	beq.n	8015c46 <_scanf_float+0x1be>
 8015b70:	2b41      	cmp	r3, #65	; 0x41
 8015b72:	d1c1      	bne.n	8015af8 <_scanf_float+0x70>
 8015b74:	2a01      	cmp	r2, #1
 8015b76:	d1bf      	bne.n	8015af8 <_scanf_float+0x70>
 8015b78:	2202      	movs	r2, #2
 8015b7a:	e046      	b.n	8015c0a <_scanf_float+0x182>
 8015b7c:	2b65      	cmp	r3, #101	; 0x65
 8015b7e:	d07a      	beq.n	8015c76 <_scanf_float+0x1ee>
 8015b80:	d818      	bhi.n	8015bb4 <_scanf_float+0x12c>
 8015b82:	2b54      	cmp	r3, #84	; 0x54
 8015b84:	d066      	beq.n	8015c54 <_scanf_float+0x1cc>
 8015b86:	d811      	bhi.n	8015bac <_scanf_float+0x124>
 8015b88:	2b4e      	cmp	r3, #78	; 0x4e
 8015b8a:	d1b5      	bne.n	8015af8 <_scanf_float+0x70>
 8015b8c:	2a00      	cmp	r2, #0
 8015b8e:	d146      	bne.n	8015c1e <_scanf_float+0x196>
 8015b90:	f1b9 0f00 	cmp.w	r9, #0
 8015b94:	d145      	bne.n	8015c22 <_scanf_float+0x19a>
 8015b96:	6821      	ldr	r1, [r4, #0]
 8015b98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015b9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ba0:	d13f      	bne.n	8015c22 <_scanf_float+0x19a>
 8015ba2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ba6:	6021      	str	r1, [r4, #0]
 8015ba8:	2201      	movs	r2, #1
 8015baa:	e02e      	b.n	8015c0a <_scanf_float+0x182>
 8015bac:	2b59      	cmp	r3, #89	; 0x59
 8015bae:	d01e      	beq.n	8015bee <_scanf_float+0x166>
 8015bb0:	2b61      	cmp	r3, #97	; 0x61
 8015bb2:	e7de      	b.n	8015b72 <_scanf_float+0xea>
 8015bb4:	2b6e      	cmp	r3, #110	; 0x6e
 8015bb6:	d0e9      	beq.n	8015b8c <_scanf_float+0x104>
 8015bb8:	d815      	bhi.n	8015be6 <_scanf_float+0x15e>
 8015bba:	2b66      	cmp	r3, #102	; 0x66
 8015bbc:	d043      	beq.n	8015c46 <_scanf_float+0x1be>
 8015bbe:	2b69      	cmp	r3, #105	; 0x69
 8015bc0:	d19a      	bne.n	8015af8 <_scanf_float+0x70>
 8015bc2:	f1bb 0f00 	cmp.w	fp, #0
 8015bc6:	d138      	bne.n	8015c3a <_scanf_float+0x1b2>
 8015bc8:	f1b9 0f00 	cmp.w	r9, #0
 8015bcc:	d197      	bne.n	8015afe <_scanf_float+0x76>
 8015bce:	6821      	ldr	r1, [r4, #0]
 8015bd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015bd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015bd8:	d195      	bne.n	8015b06 <_scanf_float+0x7e>
 8015bda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015bde:	6021      	str	r1, [r4, #0]
 8015be0:	f04f 0b01 	mov.w	fp, #1
 8015be4:	e011      	b.n	8015c0a <_scanf_float+0x182>
 8015be6:	2b74      	cmp	r3, #116	; 0x74
 8015be8:	d034      	beq.n	8015c54 <_scanf_float+0x1cc>
 8015bea:	2b79      	cmp	r3, #121	; 0x79
 8015bec:	d184      	bne.n	8015af8 <_scanf_float+0x70>
 8015bee:	f1bb 0f07 	cmp.w	fp, #7
 8015bf2:	d181      	bne.n	8015af8 <_scanf_float+0x70>
 8015bf4:	f04f 0b08 	mov.w	fp, #8
 8015bf8:	e007      	b.n	8015c0a <_scanf_float+0x182>
 8015bfa:	eb12 0f0b 	cmn.w	r2, fp
 8015bfe:	f47f af7b 	bne.w	8015af8 <_scanf_float+0x70>
 8015c02:	6821      	ldr	r1, [r4, #0]
 8015c04:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015c08:	6021      	str	r1, [r4, #0]
 8015c0a:	702b      	strb	r3, [r5, #0]
 8015c0c:	3501      	adds	r5, #1
 8015c0e:	e79a      	b.n	8015b46 <_scanf_float+0xbe>
 8015c10:	6821      	ldr	r1, [r4, #0]
 8015c12:	0608      	lsls	r0, r1, #24
 8015c14:	f57f af70 	bpl.w	8015af8 <_scanf_float+0x70>
 8015c18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015c1c:	e7f4      	b.n	8015c08 <_scanf_float+0x180>
 8015c1e:	2a02      	cmp	r2, #2
 8015c20:	d047      	beq.n	8015cb2 <_scanf_float+0x22a>
 8015c22:	f1bb 0f01 	cmp.w	fp, #1
 8015c26:	d003      	beq.n	8015c30 <_scanf_float+0x1a8>
 8015c28:	f1bb 0f04 	cmp.w	fp, #4
 8015c2c:	f47f af64 	bne.w	8015af8 <_scanf_float+0x70>
 8015c30:	f10b 0b01 	add.w	fp, fp, #1
 8015c34:	fa5f fb8b 	uxtb.w	fp, fp
 8015c38:	e7e7      	b.n	8015c0a <_scanf_float+0x182>
 8015c3a:	f1bb 0f03 	cmp.w	fp, #3
 8015c3e:	d0f7      	beq.n	8015c30 <_scanf_float+0x1a8>
 8015c40:	f1bb 0f05 	cmp.w	fp, #5
 8015c44:	e7f2      	b.n	8015c2c <_scanf_float+0x1a4>
 8015c46:	f1bb 0f02 	cmp.w	fp, #2
 8015c4a:	f47f af55 	bne.w	8015af8 <_scanf_float+0x70>
 8015c4e:	f04f 0b03 	mov.w	fp, #3
 8015c52:	e7da      	b.n	8015c0a <_scanf_float+0x182>
 8015c54:	f1bb 0f06 	cmp.w	fp, #6
 8015c58:	f47f af4e 	bne.w	8015af8 <_scanf_float+0x70>
 8015c5c:	f04f 0b07 	mov.w	fp, #7
 8015c60:	e7d3      	b.n	8015c0a <_scanf_float+0x182>
 8015c62:	6821      	ldr	r1, [r4, #0]
 8015c64:	0588      	lsls	r0, r1, #22
 8015c66:	f57f af47 	bpl.w	8015af8 <_scanf_float+0x70>
 8015c6a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015c6e:	6021      	str	r1, [r4, #0]
 8015c70:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c74:	e7c9      	b.n	8015c0a <_scanf_float+0x182>
 8015c76:	6821      	ldr	r1, [r4, #0]
 8015c78:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015c7c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015c80:	d006      	beq.n	8015c90 <_scanf_float+0x208>
 8015c82:	0548      	lsls	r0, r1, #21
 8015c84:	f57f af38 	bpl.w	8015af8 <_scanf_float+0x70>
 8015c88:	f1b9 0f00 	cmp.w	r9, #0
 8015c8c:	f43f af3b 	beq.w	8015b06 <_scanf_float+0x7e>
 8015c90:	0588      	lsls	r0, r1, #22
 8015c92:	bf58      	it	pl
 8015c94:	9802      	ldrpl	r0, [sp, #8]
 8015c96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c9a:	bf58      	it	pl
 8015c9c:	eba9 0000 	subpl.w	r0, r9, r0
 8015ca0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015ca4:	bf58      	it	pl
 8015ca6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015caa:	6021      	str	r1, [r4, #0]
 8015cac:	f04f 0900 	mov.w	r9, #0
 8015cb0:	e7ab      	b.n	8015c0a <_scanf_float+0x182>
 8015cb2:	2203      	movs	r2, #3
 8015cb4:	e7a9      	b.n	8015c0a <_scanf_float+0x182>
 8015cb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015cba:	9205      	str	r2, [sp, #20]
 8015cbc:	4631      	mov	r1, r6
 8015cbe:	4638      	mov	r0, r7
 8015cc0:	4798      	blx	r3
 8015cc2:	9a05      	ldr	r2, [sp, #20]
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	f43f af04 	beq.w	8015ad2 <_scanf_float+0x4a>
 8015cca:	e715      	b.n	8015af8 <_scanf_float+0x70>
 8015ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015cd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015cd4:	4632      	mov	r2, r6
 8015cd6:	4638      	mov	r0, r7
 8015cd8:	4798      	blx	r3
 8015cda:	6923      	ldr	r3, [r4, #16]
 8015cdc:	3b01      	subs	r3, #1
 8015cde:	6123      	str	r3, [r4, #16]
 8015ce0:	e715      	b.n	8015b0e <_scanf_float+0x86>
 8015ce2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015ce6:	2b06      	cmp	r3, #6
 8015ce8:	d80a      	bhi.n	8015d00 <_scanf_float+0x278>
 8015cea:	f1bb 0f02 	cmp.w	fp, #2
 8015cee:	d968      	bls.n	8015dc2 <_scanf_float+0x33a>
 8015cf0:	f1ab 0b03 	sub.w	fp, fp, #3
 8015cf4:	fa5f fb8b 	uxtb.w	fp, fp
 8015cf8:	eba5 0b0b 	sub.w	fp, r5, fp
 8015cfc:	455d      	cmp	r5, fp
 8015cfe:	d14b      	bne.n	8015d98 <_scanf_float+0x310>
 8015d00:	6823      	ldr	r3, [r4, #0]
 8015d02:	05da      	lsls	r2, r3, #23
 8015d04:	d51f      	bpl.n	8015d46 <_scanf_float+0x2be>
 8015d06:	055b      	lsls	r3, r3, #21
 8015d08:	d468      	bmi.n	8015ddc <_scanf_float+0x354>
 8015d0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015d0e:	6923      	ldr	r3, [r4, #16]
 8015d10:	2965      	cmp	r1, #101	; 0x65
 8015d12:	f103 33ff 	add.w	r3, r3, #4294967295
 8015d16:	f105 3bff 	add.w	fp, r5, #4294967295
 8015d1a:	6123      	str	r3, [r4, #16]
 8015d1c:	d00d      	beq.n	8015d3a <_scanf_float+0x2b2>
 8015d1e:	2945      	cmp	r1, #69	; 0x45
 8015d20:	d00b      	beq.n	8015d3a <_scanf_float+0x2b2>
 8015d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d26:	4632      	mov	r2, r6
 8015d28:	4638      	mov	r0, r7
 8015d2a:	4798      	blx	r3
 8015d2c:	6923      	ldr	r3, [r4, #16]
 8015d2e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015d32:	3b01      	subs	r3, #1
 8015d34:	f1a5 0b02 	sub.w	fp, r5, #2
 8015d38:	6123      	str	r3, [r4, #16]
 8015d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d3e:	4632      	mov	r2, r6
 8015d40:	4638      	mov	r0, r7
 8015d42:	4798      	blx	r3
 8015d44:	465d      	mov	r5, fp
 8015d46:	6826      	ldr	r6, [r4, #0]
 8015d48:	f016 0610 	ands.w	r6, r6, #16
 8015d4c:	d17a      	bne.n	8015e44 <_scanf_float+0x3bc>
 8015d4e:	702e      	strb	r6, [r5, #0]
 8015d50:	6823      	ldr	r3, [r4, #0]
 8015d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015d5a:	d142      	bne.n	8015de2 <_scanf_float+0x35a>
 8015d5c:	9b02      	ldr	r3, [sp, #8]
 8015d5e:	eba9 0303 	sub.w	r3, r9, r3
 8015d62:	425a      	negs	r2, r3
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d149      	bne.n	8015dfc <_scanf_float+0x374>
 8015d68:	2200      	movs	r2, #0
 8015d6a:	4641      	mov	r1, r8
 8015d6c:	4638      	mov	r0, r7
 8015d6e:	f000 ff0b 	bl	8016b88 <_strtod_r>
 8015d72:	6825      	ldr	r5, [r4, #0]
 8015d74:	f8da 3000 	ldr.w	r3, [sl]
 8015d78:	f015 0f02 	tst.w	r5, #2
 8015d7c:	f103 0204 	add.w	r2, r3, #4
 8015d80:	ec59 8b10 	vmov	r8, r9, d0
 8015d84:	f8ca 2000 	str.w	r2, [sl]
 8015d88:	d043      	beq.n	8015e12 <_scanf_float+0x38a>
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	e9c3 8900 	strd	r8, r9, [r3]
 8015d90:	68e3      	ldr	r3, [r4, #12]
 8015d92:	3301      	adds	r3, #1
 8015d94:	60e3      	str	r3, [r4, #12]
 8015d96:	e6be      	b.n	8015b16 <_scanf_float+0x8e>
 8015d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015da0:	4632      	mov	r2, r6
 8015da2:	4638      	mov	r0, r7
 8015da4:	4798      	blx	r3
 8015da6:	6923      	ldr	r3, [r4, #16]
 8015da8:	3b01      	subs	r3, #1
 8015daa:	6123      	str	r3, [r4, #16]
 8015dac:	e7a6      	b.n	8015cfc <_scanf_float+0x274>
 8015dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015db2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015db6:	4632      	mov	r2, r6
 8015db8:	4638      	mov	r0, r7
 8015dba:	4798      	blx	r3
 8015dbc:	6923      	ldr	r3, [r4, #16]
 8015dbe:	3b01      	subs	r3, #1
 8015dc0:	6123      	str	r3, [r4, #16]
 8015dc2:	4545      	cmp	r5, r8
 8015dc4:	d8f3      	bhi.n	8015dae <_scanf_float+0x326>
 8015dc6:	e6a5      	b.n	8015b14 <_scanf_float+0x8c>
 8015dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015dd0:	4632      	mov	r2, r6
 8015dd2:	4638      	mov	r0, r7
 8015dd4:	4798      	blx	r3
 8015dd6:	6923      	ldr	r3, [r4, #16]
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	6123      	str	r3, [r4, #16]
 8015ddc:	4545      	cmp	r5, r8
 8015dde:	d8f3      	bhi.n	8015dc8 <_scanf_float+0x340>
 8015de0:	e698      	b.n	8015b14 <_scanf_float+0x8c>
 8015de2:	9b03      	ldr	r3, [sp, #12]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d0bf      	beq.n	8015d68 <_scanf_float+0x2e0>
 8015de8:	9904      	ldr	r1, [sp, #16]
 8015dea:	230a      	movs	r3, #10
 8015dec:	4632      	mov	r2, r6
 8015dee:	3101      	adds	r1, #1
 8015df0:	4638      	mov	r0, r7
 8015df2:	f000 ff55 	bl	8016ca0 <_strtol_r>
 8015df6:	9b03      	ldr	r3, [sp, #12]
 8015df8:	9d04      	ldr	r5, [sp, #16]
 8015dfa:	1ac2      	subs	r2, r0, r3
 8015dfc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015e00:	429d      	cmp	r5, r3
 8015e02:	bf28      	it	cs
 8015e04:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015e08:	490f      	ldr	r1, [pc, #60]	; (8015e48 <_scanf_float+0x3c0>)
 8015e0a:	4628      	mov	r0, r5
 8015e0c:	f000 f858 	bl	8015ec0 <siprintf>
 8015e10:	e7aa      	b.n	8015d68 <_scanf_float+0x2e0>
 8015e12:	f015 0504 	ands.w	r5, r5, #4
 8015e16:	d1b8      	bne.n	8015d8a <_scanf_float+0x302>
 8015e18:	681f      	ldr	r7, [r3, #0]
 8015e1a:	ee10 2a10 	vmov	r2, s0
 8015e1e:	464b      	mov	r3, r9
 8015e20:	ee10 0a10 	vmov	r0, s0
 8015e24:	4649      	mov	r1, r9
 8015e26:	f7ea fe99 	bl	8000b5c <__aeabi_dcmpun>
 8015e2a:	b128      	cbz	r0, 8015e38 <_scanf_float+0x3b0>
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	f000 f80d 	bl	8015e4c <nanf>
 8015e32:	ed87 0a00 	vstr	s0, [r7]
 8015e36:	e7ab      	b.n	8015d90 <_scanf_float+0x308>
 8015e38:	4640      	mov	r0, r8
 8015e3a:	4649      	mov	r1, r9
 8015e3c:	f7ea feec 	bl	8000c18 <__aeabi_d2f>
 8015e40:	6038      	str	r0, [r7, #0]
 8015e42:	e7a5      	b.n	8015d90 <_scanf_float+0x308>
 8015e44:	2600      	movs	r6, #0
 8015e46:	e666      	b.n	8015b16 <_scanf_float+0x8e>
 8015e48:	08019c7a 	.word	0x08019c7a

08015e4c <nanf>:
 8015e4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015e54 <nanf+0x8>
 8015e50:	4770      	bx	lr
 8015e52:	bf00      	nop
 8015e54:	7fc00000 	.word	0x7fc00000

08015e58 <sniprintf>:
 8015e58:	b40c      	push	{r2, r3}
 8015e5a:	b530      	push	{r4, r5, lr}
 8015e5c:	4b17      	ldr	r3, [pc, #92]	; (8015ebc <sniprintf+0x64>)
 8015e5e:	1e0c      	subs	r4, r1, #0
 8015e60:	b09d      	sub	sp, #116	; 0x74
 8015e62:	681d      	ldr	r5, [r3, #0]
 8015e64:	da08      	bge.n	8015e78 <sniprintf+0x20>
 8015e66:	238b      	movs	r3, #139	; 0x8b
 8015e68:	602b      	str	r3, [r5, #0]
 8015e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6e:	b01d      	add	sp, #116	; 0x74
 8015e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e74:	b002      	add	sp, #8
 8015e76:	4770      	bx	lr
 8015e78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015e7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015e80:	bf14      	ite	ne
 8015e82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015e86:	4623      	moveq	r3, r4
 8015e88:	9304      	str	r3, [sp, #16]
 8015e8a:	9307      	str	r3, [sp, #28]
 8015e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e90:	9002      	str	r0, [sp, #8]
 8015e92:	9006      	str	r0, [sp, #24]
 8015e94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e9a:	ab21      	add	r3, sp, #132	; 0x84
 8015e9c:	a902      	add	r1, sp, #8
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	9301      	str	r3, [sp, #4]
 8015ea2:	f002 fdf1 	bl	8018a88 <_svfiprintf_r>
 8015ea6:	1c43      	adds	r3, r0, #1
 8015ea8:	bfbc      	itt	lt
 8015eaa:	238b      	movlt	r3, #139	; 0x8b
 8015eac:	602b      	strlt	r3, [r5, #0]
 8015eae:	2c00      	cmp	r4, #0
 8015eb0:	d0dd      	beq.n	8015e6e <sniprintf+0x16>
 8015eb2:	9b02      	ldr	r3, [sp, #8]
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	701a      	strb	r2, [r3, #0]
 8015eb8:	e7d9      	b.n	8015e6e <sniprintf+0x16>
 8015eba:	bf00      	nop
 8015ebc:	2000000c 	.word	0x2000000c

08015ec0 <siprintf>:
 8015ec0:	b40e      	push	{r1, r2, r3}
 8015ec2:	b500      	push	{lr}
 8015ec4:	b09c      	sub	sp, #112	; 0x70
 8015ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8015ec8:	9002      	str	r0, [sp, #8]
 8015eca:	9006      	str	r0, [sp, #24]
 8015ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ed0:	4809      	ldr	r0, [pc, #36]	; (8015ef8 <siprintf+0x38>)
 8015ed2:	9107      	str	r1, [sp, #28]
 8015ed4:	9104      	str	r1, [sp, #16]
 8015ed6:	4909      	ldr	r1, [pc, #36]	; (8015efc <siprintf+0x3c>)
 8015ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015edc:	9105      	str	r1, [sp, #20]
 8015ede:	6800      	ldr	r0, [r0, #0]
 8015ee0:	9301      	str	r3, [sp, #4]
 8015ee2:	a902      	add	r1, sp, #8
 8015ee4:	f002 fdd0 	bl	8018a88 <_svfiprintf_r>
 8015ee8:	9b02      	ldr	r3, [sp, #8]
 8015eea:	2200      	movs	r2, #0
 8015eec:	701a      	strb	r2, [r3, #0]
 8015eee:	b01c      	add	sp, #112	; 0x70
 8015ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ef4:	b003      	add	sp, #12
 8015ef6:	4770      	bx	lr
 8015ef8:	2000000c 	.word	0x2000000c
 8015efc:	ffff0208 	.word	0xffff0208

08015f00 <siscanf>:
 8015f00:	b40e      	push	{r1, r2, r3}
 8015f02:	b530      	push	{r4, r5, lr}
 8015f04:	b09c      	sub	sp, #112	; 0x70
 8015f06:	ac1f      	add	r4, sp, #124	; 0x7c
 8015f08:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015f0c:	f854 5b04 	ldr.w	r5, [r4], #4
 8015f10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015f14:	9002      	str	r0, [sp, #8]
 8015f16:	9006      	str	r0, [sp, #24]
 8015f18:	f7ea f972 	bl	8000200 <strlen>
 8015f1c:	4b0b      	ldr	r3, [pc, #44]	; (8015f4c <siscanf+0x4c>)
 8015f1e:	9003      	str	r0, [sp, #12]
 8015f20:	9007      	str	r0, [sp, #28]
 8015f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f24:	480a      	ldr	r0, [pc, #40]	; (8015f50 <siscanf+0x50>)
 8015f26:	9401      	str	r4, [sp, #4]
 8015f28:	2300      	movs	r3, #0
 8015f2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f2c:	9314      	str	r3, [sp, #80]	; 0x50
 8015f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f36:	462a      	mov	r2, r5
 8015f38:	4623      	mov	r3, r4
 8015f3a:	a902      	add	r1, sp, #8
 8015f3c:	6800      	ldr	r0, [r0, #0]
 8015f3e:	f002 fef5 	bl	8018d2c <__ssvfiscanf_r>
 8015f42:	b01c      	add	sp, #112	; 0x70
 8015f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f48:	b003      	add	sp, #12
 8015f4a:	4770      	bx	lr
 8015f4c:	08015f55 	.word	0x08015f55
 8015f50:	2000000c 	.word	0x2000000c

08015f54 <__seofread>:
 8015f54:	2000      	movs	r0, #0
 8015f56:	4770      	bx	lr

08015f58 <strcpy>:
 8015f58:	4603      	mov	r3, r0
 8015f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f5e:	f803 2b01 	strb.w	r2, [r3], #1
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	d1f9      	bne.n	8015f5a <strcpy+0x2>
 8015f66:	4770      	bx	lr

08015f68 <sulp>:
 8015f68:	b570      	push	{r4, r5, r6, lr}
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	460d      	mov	r5, r1
 8015f6e:	ec45 4b10 	vmov	d0, r4, r5
 8015f72:	4616      	mov	r6, r2
 8015f74:	f002 fb44 	bl	8018600 <__ulp>
 8015f78:	ec51 0b10 	vmov	r0, r1, d0
 8015f7c:	b17e      	cbz	r6, 8015f9e <sulp+0x36>
 8015f7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015f82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	dd09      	ble.n	8015f9e <sulp+0x36>
 8015f8a:	051b      	lsls	r3, r3, #20
 8015f8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015f90:	2400      	movs	r4, #0
 8015f92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015f96:	4622      	mov	r2, r4
 8015f98:	462b      	mov	r3, r5
 8015f9a:	f7ea fb45 	bl	8000628 <__aeabi_dmul>
 8015f9e:	bd70      	pop	{r4, r5, r6, pc}

08015fa0 <_strtod_l>:
 8015fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa4:	461f      	mov	r7, r3
 8015fa6:	b0a1      	sub	sp, #132	; 0x84
 8015fa8:	2300      	movs	r3, #0
 8015faa:	4681      	mov	r9, r0
 8015fac:	4638      	mov	r0, r7
 8015fae:	460e      	mov	r6, r1
 8015fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8015fb2:	931c      	str	r3, [sp, #112]	; 0x70
 8015fb4:	f002 f824 	bl	8018000 <__localeconv_l>
 8015fb8:	4680      	mov	r8, r0
 8015fba:	6800      	ldr	r0, [r0, #0]
 8015fbc:	f7ea f920 	bl	8000200 <strlen>
 8015fc0:	f04f 0a00 	mov.w	sl, #0
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	f04f 0b00 	mov.w	fp, #0
 8015fca:	961b      	str	r6, [sp, #108]	; 0x6c
 8015fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fce:	781a      	ldrb	r2, [r3, #0]
 8015fd0:	2a0d      	cmp	r2, #13
 8015fd2:	d832      	bhi.n	801603a <_strtod_l+0x9a>
 8015fd4:	2a09      	cmp	r2, #9
 8015fd6:	d236      	bcs.n	8016046 <_strtod_l+0xa6>
 8015fd8:	2a00      	cmp	r2, #0
 8015fda:	d03e      	beq.n	801605a <_strtod_l+0xba>
 8015fdc:	2300      	movs	r3, #0
 8015fde:	930d      	str	r3, [sp, #52]	; 0x34
 8015fe0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015fe2:	782b      	ldrb	r3, [r5, #0]
 8015fe4:	2b30      	cmp	r3, #48	; 0x30
 8015fe6:	f040 80ac 	bne.w	8016142 <_strtod_l+0x1a2>
 8015fea:	786b      	ldrb	r3, [r5, #1]
 8015fec:	2b58      	cmp	r3, #88	; 0x58
 8015fee:	d001      	beq.n	8015ff4 <_strtod_l+0x54>
 8015ff0:	2b78      	cmp	r3, #120	; 0x78
 8015ff2:	d167      	bne.n	80160c4 <_strtod_l+0x124>
 8015ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ff6:	9301      	str	r3, [sp, #4]
 8015ff8:	ab1c      	add	r3, sp, #112	; 0x70
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	9702      	str	r7, [sp, #8]
 8015ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8016000:	4a88      	ldr	r2, [pc, #544]	; (8016224 <_strtod_l+0x284>)
 8016002:	a91b      	add	r1, sp, #108	; 0x6c
 8016004:	4648      	mov	r0, r9
 8016006:	f001 fd12 	bl	8017a2e <__gethex>
 801600a:	f010 0407 	ands.w	r4, r0, #7
 801600e:	4606      	mov	r6, r0
 8016010:	d005      	beq.n	801601e <_strtod_l+0x7e>
 8016012:	2c06      	cmp	r4, #6
 8016014:	d12b      	bne.n	801606e <_strtod_l+0xce>
 8016016:	3501      	adds	r5, #1
 8016018:	2300      	movs	r3, #0
 801601a:	951b      	str	r5, [sp, #108]	; 0x6c
 801601c:	930d      	str	r3, [sp, #52]	; 0x34
 801601e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016020:	2b00      	cmp	r3, #0
 8016022:	f040 859a 	bne.w	8016b5a <_strtod_l+0xbba>
 8016026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016028:	b1e3      	cbz	r3, 8016064 <_strtod_l+0xc4>
 801602a:	4652      	mov	r2, sl
 801602c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016030:	ec43 2b10 	vmov	d0, r2, r3
 8016034:	b021      	add	sp, #132	; 0x84
 8016036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603a:	2a2b      	cmp	r2, #43	; 0x2b
 801603c:	d015      	beq.n	801606a <_strtod_l+0xca>
 801603e:	2a2d      	cmp	r2, #45	; 0x2d
 8016040:	d004      	beq.n	801604c <_strtod_l+0xac>
 8016042:	2a20      	cmp	r2, #32
 8016044:	d1ca      	bne.n	8015fdc <_strtod_l+0x3c>
 8016046:	3301      	adds	r3, #1
 8016048:	931b      	str	r3, [sp, #108]	; 0x6c
 801604a:	e7bf      	b.n	8015fcc <_strtod_l+0x2c>
 801604c:	2201      	movs	r2, #1
 801604e:	920d      	str	r2, [sp, #52]	; 0x34
 8016050:	1c5a      	adds	r2, r3, #1
 8016052:	921b      	str	r2, [sp, #108]	; 0x6c
 8016054:	785b      	ldrb	r3, [r3, #1]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d1c2      	bne.n	8015fe0 <_strtod_l+0x40>
 801605a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801605c:	961b      	str	r6, [sp, #108]	; 0x6c
 801605e:	2b00      	cmp	r3, #0
 8016060:	f040 8579 	bne.w	8016b56 <_strtod_l+0xbb6>
 8016064:	4652      	mov	r2, sl
 8016066:	465b      	mov	r3, fp
 8016068:	e7e2      	b.n	8016030 <_strtod_l+0x90>
 801606a:	2200      	movs	r2, #0
 801606c:	e7ef      	b.n	801604e <_strtod_l+0xae>
 801606e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016070:	b13a      	cbz	r2, 8016082 <_strtod_l+0xe2>
 8016072:	2135      	movs	r1, #53	; 0x35
 8016074:	a81e      	add	r0, sp, #120	; 0x78
 8016076:	f002 fbbb 	bl	80187f0 <__copybits>
 801607a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801607c:	4648      	mov	r0, r9
 801607e:	f002 f828 	bl	80180d2 <_Bfree>
 8016082:	3c01      	subs	r4, #1
 8016084:	2c04      	cmp	r4, #4
 8016086:	d806      	bhi.n	8016096 <_strtod_l+0xf6>
 8016088:	e8df f004 	tbb	[pc, r4]
 801608c:	1714030a 	.word	0x1714030a
 8016090:	0a          	.byte	0x0a
 8016091:	00          	.byte	0x00
 8016092:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016096:	0730      	lsls	r0, r6, #28
 8016098:	d5c1      	bpl.n	801601e <_strtod_l+0x7e>
 801609a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801609e:	e7be      	b.n	801601e <_strtod_l+0x7e>
 80160a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80160a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80160a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80160aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80160ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80160b2:	e7f0      	b.n	8016096 <_strtod_l+0xf6>
 80160b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016228 <_strtod_l+0x288>
 80160b8:	e7ed      	b.n	8016096 <_strtod_l+0xf6>
 80160ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80160be:	f04f 3aff 	mov.w	sl, #4294967295
 80160c2:	e7e8      	b.n	8016096 <_strtod_l+0xf6>
 80160c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160c6:	1c5a      	adds	r2, r3, #1
 80160c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80160ca:	785b      	ldrb	r3, [r3, #1]
 80160cc:	2b30      	cmp	r3, #48	; 0x30
 80160ce:	d0f9      	beq.n	80160c4 <_strtod_l+0x124>
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d0a4      	beq.n	801601e <_strtod_l+0x7e>
 80160d4:	2301      	movs	r3, #1
 80160d6:	2500      	movs	r5, #0
 80160d8:	9306      	str	r3, [sp, #24]
 80160da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160dc:	9308      	str	r3, [sp, #32]
 80160de:	9507      	str	r5, [sp, #28]
 80160e0:	9505      	str	r5, [sp, #20]
 80160e2:	220a      	movs	r2, #10
 80160e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80160e6:	7807      	ldrb	r7, [r0, #0]
 80160e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80160ec:	b2d9      	uxtb	r1, r3
 80160ee:	2909      	cmp	r1, #9
 80160f0:	d929      	bls.n	8016146 <_strtod_l+0x1a6>
 80160f2:	4622      	mov	r2, r4
 80160f4:	f8d8 1000 	ldr.w	r1, [r8]
 80160f8:	f003 f902 	bl	8019300 <strncmp>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d031      	beq.n	8016164 <_strtod_l+0x1c4>
 8016100:	2000      	movs	r0, #0
 8016102:	9c05      	ldr	r4, [sp, #20]
 8016104:	9004      	str	r0, [sp, #16]
 8016106:	463b      	mov	r3, r7
 8016108:	4602      	mov	r2, r0
 801610a:	2b65      	cmp	r3, #101	; 0x65
 801610c:	d001      	beq.n	8016112 <_strtod_l+0x172>
 801610e:	2b45      	cmp	r3, #69	; 0x45
 8016110:	d114      	bne.n	801613c <_strtod_l+0x19c>
 8016112:	b924      	cbnz	r4, 801611e <_strtod_l+0x17e>
 8016114:	b910      	cbnz	r0, 801611c <_strtod_l+0x17c>
 8016116:	9b06      	ldr	r3, [sp, #24]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d09e      	beq.n	801605a <_strtod_l+0xba>
 801611c:	2400      	movs	r4, #0
 801611e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016120:	1c73      	adds	r3, r6, #1
 8016122:	931b      	str	r3, [sp, #108]	; 0x6c
 8016124:	7873      	ldrb	r3, [r6, #1]
 8016126:	2b2b      	cmp	r3, #43	; 0x2b
 8016128:	d078      	beq.n	801621c <_strtod_l+0x27c>
 801612a:	2b2d      	cmp	r3, #45	; 0x2d
 801612c:	d070      	beq.n	8016210 <_strtod_l+0x270>
 801612e:	f04f 0c00 	mov.w	ip, #0
 8016132:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016136:	2f09      	cmp	r7, #9
 8016138:	d97c      	bls.n	8016234 <_strtod_l+0x294>
 801613a:	961b      	str	r6, [sp, #108]	; 0x6c
 801613c:	f04f 0e00 	mov.w	lr, #0
 8016140:	e09a      	b.n	8016278 <_strtod_l+0x2d8>
 8016142:	2300      	movs	r3, #0
 8016144:	e7c7      	b.n	80160d6 <_strtod_l+0x136>
 8016146:	9905      	ldr	r1, [sp, #20]
 8016148:	2908      	cmp	r1, #8
 801614a:	bfdd      	ittte	le
 801614c:	9907      	ldrle	r1, [sp, #28]
 801614e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016152:	9307      	strle	r3, [sp, #28]
 8016154:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016158:	9b05      	ldr	r3, [sp, #20]
 801615a:	3001      	adds	r0, #1
 801615c:	3301      	adds	r3, #1
 801615e:	9305      	str	r3, [sp, #20]
 8016160:	901b      	str	r0, [sp, #108]	; 0x6c
 8016162:	e7bf      	b.n	80160e4 <_strtod_l+0x144>
 8016164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016166:	191a      	adds	r2, r3, r4
 8016168:	921b      	str	r2, [sp, #108]	; 0x6c
 801616a:	9a05      	ldr	r2, [sp, #20]
 801616c:	5d1b      	ldrb	r3, [r3, r4]
 801616e:	2a00      	cmp	r2, #0
 8016170:	d037      	beq.n	80161e2 <_strtod_l+0x242>
 8016172:	9c05      	ldr	r4, [sp, #20]
 8016174:	4602      	mov	r2, r0
 8016176:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801617a:	2909      	cmp	r1, #9
 801617c:	d913      	bls.n	80161a6 <_strtod_l+0x206>
 801617e:	2101      	movs	r1, #1
 8016180:	9104      	str	r1, [sp, #16]
 8016182:	e7c2      	b.n	801610a <_strtod_l+0x16a>
 8016184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016186:	1c5a      	adds	r2, r3, #1
 8016188:	921b      	str	r2, [sp, #108]	; 0x6c
 801618a:	785b      	ldrb	r3, [r3, #1]
 801618c:	3001      	adds	r0, #1
 801618e:	2b30      	cmp	r3, #48	; 0x30
 8016190:	d0f8      	beq.n	8016184 <_strtod_l+0x1e4>
 8016192:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016196:	2a08      	cmp	r2, #8
 8016198:	f200 84e4 	bhi.w	8016b64 <_strtod_l+0xbc4>
 801619c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801619e:	9208      	str	r2, [sp, #32]
 80161a0:	4602      	mov	r2, r0
 80161a2:	2000      	movs	r0, #0
 80161a4:	4604      	mov	r4, r0
 80161a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80161aa:	f100 0101 	add.w	r1, r0, #1
 80161ae:	d012      	beq.n	80161d6 <_strtod_l+0x236>
 80161b0:	440a      	add	r2, r1
 80161b2:	eb00 0c04 	add.w	ip, r0, r4
 80161b6:	4621      	mov	r1, r4
 80161b8:	270a      	movs	r7, #10
 80161ba:	458c      	cmp	ip, r1
 80161bc:	d113      	bne.n	80161e6 <_strtod_l+0x246>
 80161be:	1821      	adds	r1, r4, r0
 80161c0:	2908      	cmp	r1, #8
 80161c2:	f104 0401 	add.w	r4, r4, #1
 80161c6:	4404      	add	r4, r0
 80161c8:	dc19      	bgt.n	80161fe <_strtod_l+0x25e>
 80161ca:	9b07      	ldr	r3, [sp, #28]
 80161cc:	210a      	movs	r1, #10
 80161ce:	fb01 e303 	mla	r3, r1, r3, lr
 80161d2:	9307      	str	r3, [sp, #28]
 80161d4:	2100      	movs	r1, #0
 80161d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161d8:	1c58      	adds	r0, r3, #1
 80161da:	901b      	str	r0, [sp, #108]	; 0x6c
 80161dc:	785b      	ldrb	r3, [r3, #1]
 80161de:	4608      	mov	r0, r1
 80161e0:	e7c9      	b.n	8016176 <_strtod_l+0x1d6>
 80161e2:	9805      	ldr	r0, [sp, #20]
 80161e4:	e7d3      	b.n	801618e <_strtod_l+0x1ee>
 80161e6:	2908      	cmp	r1, #8
 80161e8:	f101 0101 	add.w	r1, r1, #1
 80161ec:	dc03      	bgt.n	80161f6 <_strtod_l+0x256>
 80161ee:	9b07      	ldr	r3, [sp, #28]
 80161f0:	437b      	muls	r3, r7
 80161f2:	9307      	str	r3, [sp, #28]
 80161f4:	e7e1      	b.n	80161ba <_strtod_l+0x21a>
 80161f6:	2910      	cmp	r1, #16
 80161f8:	bfd8      	it	le
 80161fa:	437d      	mulle	r5, r7
 80161fc:	e7dd      	b.n	80161ba <_strtod_l+0x21a>
 80161fe:	2c10      	cmp	r4, #16
 8016200:	bfdc      	itt	le
 8016202:	210a      	movle	r1, #10
 8016204:	fb01 e505 	mlale	r5, r1, r5, lr
 8016208:	e7e4      	b.n	80161d4 <_strtod_l+0x234>
 801620a:	2301      	movs	r3, #1
 801620c:	9304      	str	r3, [sp, #16]
 801620e:	e781      	b.n	8016114 <_strtod_l+0x174>
 8016210:	f04f 0c01 	mov.w	ip, #1
 8016214:	1cb3      	adds	r3, r6, #2
 8016216:	931b      	str	r3, [sp, #108]	; 0x6c
 8016218:	78b3      	ldrb	r3, [r6, #2]
 801621a:	e78a      	b.n	8016132 <_strtod_l+0x192>
 801621c:	f04f 0c00 	mov.w	ip, #0
 8016220:	e7f8      	b.n	8016214 <_strtod_l+0x274>
 8016222:	bf00      	nop
 8016224:	08019c80 	.word	0x08019c80
 8016228:	7ff00000 	.word	0x7ff00000
 801622c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801622e:	1c5f      	adds	r7, r3, #1
 8016230:	971b      	str	r7, [sp, #108]	; 0x6c
 8016232:	785b      	ldrb	r3, [r3, #1]
 8016234:	2b30      	cmp	r3, #48	; 0x30
 8016236:	d0f9      	beq.n	801622c <_strtod_l+0x28c>
 8016238:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801623c:	2f08      	cmp	r7, #8
 801623e:	f63f af7d 	bhi.w	801613c <_strtod_l+0x19c>
 8016242:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016248:	930a      	str	r3, [sp, #40]	; 0x28
 801624a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801624c:	1c5f      	adds	r7, r3, #1
 801624e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016250:	785b      	ldrb	r3, [r3, #1]
 8016252:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016256:	f1b8 0f09 	cmp.w	r8, #9
 801625a:	d937      	bls.n	80162cc <_strtod_l+0x32c>
 801625c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801625e:	1a7f      	subs	r7, r7, r1
 8016260:	2f08      	cmp	r7, #8
 8016262:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016266:	dc37      	bgt.n	80162d8 <_strtod_l+0x338>
 8016268:	45be      	cmp	lr, r7
 801626a:	bfa8      	it	ge
 801626c:	46be      	movge	lr, r7
 801626e:	f1bc 0f00 	cmp.w	ip, #0
 8016272:	d001      	beq.n	8016278 <_strtod_l+0x2d8>
 8016274:	f1ce 0e00 	rsb	lr, lr, #0
 8016278:	2c00      	cmp	r4, #0
 801627a:	d151      	bne.n	8016320 <_strtod_l+0x380>
 801627c:	2800      	cmp	r0, #0
 801627e:	f47f aece 	bne.w	801601e <_strtod_l+0x7e>
 8016282:	9a06      	ldr	r2, [sp, #24]
 8016284:	2a00      	cmp	r2, #0
 8016286:	f47f aeca 	bne.w	801601e <_strtod_l+0x7e>
 801628a:	9a04      	ldr	r2, [sp, #16]
 801628c:	2a00      	cmp	r2, #0
 801628e:	f47f aee4 	bne.w	801605a <_strtod_l+0xba>
 8016292:	2b4e      	cmp	r3, #78	; 0x4e
 8016294:	d027      	beq.n	80162e6 <_strtod_l+0x346>
 8016296:	dc21      	bgt.n	80162dc <_strtod_l+0x33c>
 8016298:	2b49      	cmp	r3, #73	; 0x49
 801629a:	f47f aede 	bne.w	801605a <_strtod_l+0xba>
 801629e:	49a0      	ldr	r1, [pc, #640]	; (8016520 <_strtod_l+0x580>)
 80162a0:	a81b      	add	r0, sp, #108	; 0x6c
 80162a2:	f001 fdf7 	bl	8017e94 <__match>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	f43f aed7 	beq.w	801605a <_strtod_l+0xba>
 80162ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162ae:	499d      	ldr	r1, [pc, #628]	; (8016524 <_strtod_l+0x584>)
 80162b0:	3b01      	subs	r3, #1
 80162b2:	a81b      	add	r0, sp, #108	; 0x6c
 80162b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80162b6:	f001 fded 	bl	8017e94 <__match>
 80162ba:	b910      	cbnz	r0, 80162c2 <_strtod_l+0x322>
 80162bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162be:	3301      	adds	r3, #1
 80162c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80162c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016538 <_strtod_l+0x598>
 80162c6:	f04f 0a00 	mov.w	sl, #0
 80162ca:	e6a8      	b.n	801601e <_strtod_l+0x7e>
 80162cc:	210a      	movs	r1, #10
 80162ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80162d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80162d6:	e7b8      	b.n	801624a <_strtod_l+0x2aa>
 80162d8:	46be      	mov	lr, r7
 80162da:	e7c8      	b.n	801626e <_strtod_l+0x2ce>
 80162dc:	2b69      	cmp	r3, #105	; 0x69
 80162de:	d0de      	beq.n	801629e <_strtod_l+0x2fe>
 80162e0:	2b6e      	cmp	r3, #110	; 0x6e
 80162e2:	f47f aeba 	bne.w	801605a <_strtod_l+0xba>
 80162e6:	4990      	ldr	r1, [pc, #576]	; (8016528 <_strtod_l+0x588>)
 80162e8:	a81b      	add	r0, sp, #108	; 0x6c
 80162ea:	f001 fdd3 	bl	8017e94 <__match>
 80162ee:	2800      	cmp	r0, #0
 80162f0:	f43f aeb3 	beq.w	801605a <_strtod_l+0xba>
 80162f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b28      	cmp	r3, #40	; 0x28
 80162fa:	d10e      	bne.n	801631a <_strtod_l+0x37a>
 80162fc:	aa1e      	add	r2, sp, #120	; 0x78
 80162fe:	498b      	ldr	r1, [pc, #556]	; (801652c <_strtod_l+0x58c>)
 8016300:	a81b      	add	r0, sp, #108	; 0x6c
 8016302:	f001 fddb 	bl	8017ebc <__hexnan>
 8016306:	2805      	cmp	r0, #5
 8016308:	d107      	bne.n	801631a <_strtod_l+0x37a>
 801630a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801630c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016310:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016314:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016318:	e681      	b.n	801601e <_strtod_l+0x7e>
 801631a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016540 <_strtod_l+0x5a0>
 801631e:	e7d2      	b.n	80162c6 <_strtod_l+0x326>
 8016320:	ebae 0302 	sub.w	r3, lr, r2
 8016324:	9306      	str	r3, [sp, #24]
 8016326:	9b05      	ldr	r3, [sp, #20]
 8016328:	9807      	ldr	r0, [sp, #28]
 801632a:	2b00      	cmp	r3, #0
 801632c:	bf08      	it	eq
 801632e:	4623      	moveq	r3, r4
 8016330:	2c10      	cmp	r4, #16
 8016332:	9305      	str	r3, [sp, #20]
 8016334:	46a0      	mov	r8, r4
 8016336:	bfa8      	it	ge
 8016338:	f04f 0810 	movge.w	r8, #16
 801633c:	f7ea f8fa 	bl	8000534 <__aeabi_ui2d>
 8016340:	2c09      	cmp	r4, #9
 8016342:	4682      	mov	sl, r0
 8016344:	468b      	mov	fp, r1
 8016346:	dc13      	bgt.n	8016370 <_strtod_l+0x3d0>
 8016348:	9b06      	ldr	r3, [sp, #24]
 801634a:	2b00      	cmp	r3, #0
 801634c:	f43f ae67 	beq.w	801601e <_strtod_l+0x7e>
 8016350:	9b06      	ldr	r3, [sp, #24]
 8016352:	dd7a      	ble.n	801644a <_strtod_l+0x4aa>
 8016354:	2b16      	cmp	r3, #22
 8016356:	dc61      	bgt.n	801641c <_strtod_l+0x47c>
 8016358:	4a75      	ldr	r2, [pc, #468]	; (8016530 <_strtod_l+0x590>)
 801635a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801635e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016362:	4652      	mov	r2, sl
 8016364:	465b      	mov	r3, fp
 8016366:	f7ea f95f 	bl	8000628 <__aeabi_dmul>
 801636a:	4682      	mov	sl, r0
 801636c:	468b      	mov	fp, r1
 801636e:	e656      	b.n	801601e <_strtod_l+0x7e>
 8016370:	4b6f      	ldr	r3, [pc, #444]	; (8016530 <_strtod_l+0x590>)
 8016372:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016376:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801637a:	f7ea f955 	bl	8000628 <__aeabi_dmul>
 801637e:	4606      	mov	r6, r0
 8016380:	4628      	mov	r0, r5
 8016382:	460f      	mov	r7, r1
 8016384:	f7ea f8d6 	bl	8000534 <__aeabi_ui2d>
 8016388:	4602      	mov	r2, r0
 801638a:	460b      	mov	r3, r1
 801638c:	4630      	mov	r0, r6
 801638e:	4639      	mov	r1, r7
 8016390:	f7e9 ff94 	bl	80002bc <__adddf3>
 8016394:	2c0f      	cmp	r4, #15
 8016396:	4682      	mov	sl, r0
 8016398:	468b      	mov	fp, r1
 801639a:	ddd5      	ble.n	8016348 <_strtod_l+0x3a8>
 801639c:	9b06      	ldr	r3, [sp, #24]
 801639e:	eba4 0808 	sub.w	r8, r4, r8
 80163a2:	4498      	add	r8, r3
 80163a4:	f1b8 0f00 	cmp.w	r8, #0
 80163a8:	f340 8096 	ble.w	80164d8 <_strtod_l+0x538>
 80163ac:	f018 030f 	ands.w	r3, r8, #15
 80163b0:	d00a      	beq.n	80163c8 <_strtod_l+0x428>
 80163b2:	495f      	ldr	r1, [pc, #380]	; (8016530 <_strtod_l+0x590>)
 80163b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80163b8:	4652      	mov	r2, sl
 80163ba:	465b      	mov	r3, fp
 80163bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163c0:	f7ea f932 	bl	8000628 <__aeabi_dmul>
 80163c4:	4682      	mov	sl, r0
 80163c6:	468b      	mov	fp, r1
 80163c8:	f038 080f 	bics.w	r8, r8, #15
 80163cc:	d073      	beq.n	80164b6 <_strtod_l+0x516>
 80163ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80163d2:	dd47      	ble.n	8016464 <_strtod_l+0x4c4>
 80163d4:	2400      	movs	r4, #0
 80163d6:	46a0      	mov	r8, r4
 80163d8:	9407      	str	r4, [sp, #28]
 80163da:	9405      	str	r4, [sp, #20]
 80163dc:	2322      	movs	r3, #34	; 0x22
 80163de:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016538 <_strtod_l+0x598>
 80163e2:	f8c9 3000 	str.w	r3, [r9]
 80163e6:	f04f 0a00 	mov.w	sl, #0
 80163ea:	9b07      	ldr	r3, [sp, #28]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f43f ae16 	beq.w	801601e <_strtod_l+0x7e>
 80163f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80163f4:	4648      	mov	r0, r9
 80163f6:	f001 fe6c 	bl	80180d2 <_Bfree>
 80163fa:	9905      	ldr	r1, [sp, #20]
 80163fc:	4648      	mov	r0, r9
 80163fe:	f001 fe68 	bl	80180d2 <_Bfree>
 8016402:	4641      	mov	r1, r8
 8016404:	4648      	mov	r0, r9
 8016406:	f001 fe64 	bl	80180d2 <_Bfree>
 801640a:	9907      	ldr	r1, [sp, #28]
 801640c:	4648      	mov	r0, r9
 801640e:	f001 fe60 	bl	80180d2 <_Bfree>
 8016412:	4621      	mov	r1, r4
 8016414:	4648      	mov	r0, r9
 8016416:	f001 fe5c 	bl	80180d2 <_Bfree>
 801641a:	e600      	b.n	801601e <_strtod_l+0x7e>
 801641c:	9a06      	ldr	r2, [sp, #24]
 801641e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016422:	4293      	cmp	r3, r2
 8016424:	dbba      	blt.n	801639c <_strtod_l+0x3fc>
 8016426:	4d42      	ldr	r5, [pc, #264]	; (8016530 <_strtod_l+0x590>)
 8016428:	f1c4 040f 	rsb	r4, r4, #15
 801642c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016430:	4652      	mov	r2, sl
 8016432:	465b      	mov	r3, fp
 8016434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016438:	f7ea f8f6 	bl	8000628 <__aeabi_dmul>
 801643c:	9b06      	ldr	r3, [sp, #24]
 801643e:	1b1c      	subs	r4, r3, r4
 8016440:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016444:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016448:	e78d      	b.n	8016366 <_strtod_l+0x3c6>
 801644a:	f113 0f16 	cmn.w	r3, #22
 801644e:	dba5      	blt.n	801639c <_strtod_l+0x3fc>
 8016450:	4a37      	ldr	r2, [pc, #220]	; (8016530 <_strtod_l+0x590>)
 8016452:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016456:	e9d2 2300 	ldrd	r2, r3, [r2]
 801645a:	4650      	mov	r0, sl
 801645c:	4659      	mov	r1, fp
 801645e:	f7ea fa0d 	bl	800087c <__aeabi_ddiv>
 8016462:	e782      	b.n	801636a <_strtod_l+0x3ca>
 8016464:	2300      	movs	r3, #0
 8016466:	4e33      	ldr	r6, [pc, #204]	; (8016534 <_strtod_l+0x594>)
 8016468:	ea4f 1828 	mov.w	r8, r8, asr #4
 801646c:	4650      	mov	r0, sl
 801646e:	4659      	mov	r1, fp
 8016470:	461d      	mov	r5, r3
 8016472:	f1b8 0f01 	cmp.w	r8, #1
 8016476:	dc21      	bgt.n	80164bc <_strtod_l+0x51c>
 8016478:	b10b      	cbz	r3, 801647e <_strtod_l+0x4de>
 801647a:	4682      	mov	sl, r0
 801647c:	468b      	mov	fp, r1
 801647e:	4b2d      	ldr	r3, [pc, #180]	; (8016534 <_strtod_l+0x594>)
 8016480:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016484:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016488:	4652      	mov	r2, sl
 801648a:	465b      	mov	r3, fp
 801648c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016490:	f7ea f8ca 	bl	8000628 <__aeabi_dmul>
 8016494:	4b28      	ldr	r3, [pc, #160]	; (8016538 <_strtod_l+0x598>)
 8016496:	460a      	mov	r2, r1
 8016498:	400b      	ands	r3, r1
 801649a:	4928      	ldr	r1, [pc, #160]	; (801653c <_strtod_l+0x59c>)
 801649c:	428b      	cmp	r3, r1
 801649e:	4682      	mov	sl, r0
 80164a0:	d898      	bhi.n	80163d4 <_strtod_l+0x434>
 80164a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80164a6:	428b      	cmp	r3, r1
 80164a8:	bf86      	itte	hi
 80164aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016544 <_strtod_l+0x5a4>
 80164ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80164b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80164b6:	2300      	movs	r3, #0
 80164b8:	9304      	str	r3, [sp, #16]
 80164ba:	e077      	b.n	80165ac <_strtod_l+0x60c>
 80164bc:	f018 0f01 	tst.w	r8, #1
 80164c0:	d006      	beq.n	80164d0 <_strtod_l+0x530>
 80164c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80164c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ca:	f7ea f8ad 	bl	8000628 <__aeabi_dmul>
 80164ce:	2301      	movs	r3, #1
 80164d0:	3501      	adds	r5, #1
 80164d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80164d6:	e7cc      	b.n	8016472 <_strtod_l+0x4d2>
 80164d8:	d0ed      	beq.n	80164b6 <_strtod_l+0x516>
 80164da:	f1c8 0800 	rsb	r8, r8, #0
 80164de:	f018 020f 	ands.w	r2, r8, #15
 80164e2:	d00a      	beq.n	80164fa <_strtod_l+0x55a>
 80164e4:	4b12      	ldr	r3, [pc, #72]	; (8016530 <_strtod_l+0x590>)
 80164e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80164ea:	4650      	mov	r0, sl
 80164ec:	4659      	mov	r1, fp
 80164ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f2:	f7ea f9c3 	bl	800087c <__aeabi_ddiv>
 80164f6:	4682      	mov	sl, r0
 80164f8:	468b      	mov	fp, r1
 80164fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80164fe:	d0da      	beq.n	80164b6 <_strtod_l+0x516>
 8016500:	f1b8 0f1f 	cmp.w	r8, #31
 8016504:	dd20      	ble.n	8016548 <_strtod_l+0x5a8>
 8016506:	2400      	movs	r4, #0
 8016508:	46a0      	mov	r8, r4
 801650a:	9407      	str	r4, [sp, #28]
 801650c:	9405      	str	r4, [sp, #20]
 801650e:	2322      	movs	r3, #34	; 0x22
 8016510:	f04f 0a00 	mov.w	sl, #0
 8016514:	f04f 0b00 	mov.w	fp, #0
 8016518:	f8c9 3000 	str.w	r3, [r9]
 801651c:	e765      	b.n	80163ea <_strtod_l+0x44a>
 801651e:	bf00      	nop
 8016520:	08019c4d 	.word	0x08019c4d
 8016524:	08019cd3 	.word	0x08019cd3
 8016528:	08019c55 	.word	0x08019c55
 801652c:	08019c94 	.word	0x08019c94
 8016530:	08019d10 	.word	0x08019d10
 8016534:	08019ce8 	.word	0x08019ce8
 8016538:	7ff00000 	.word	0x7ff00000
 801653c:	7ca00000 	.word	0x7ca00000
 8016540:	fff80000 	.word	0xfff80000
 8016544:	7fefffff 	.word	0x7fefffff
 8016548:	f018 0310 	ands.w	r3, r8, #16
 801654c:	bf18      	it	ne
 801654e:	236a      	movne	r3, #106	; 0x6a
 8016550:	4da0      	ldr	r5, [pc, #640]	; (80167d4 <_strtod_l+0x834>)
 8016552:	9304      	str	r3, [sp, #16]
 8016554:	4650      	mov	r0, sl
 8016556:	4659      	mov	r1, fp
 8016558:	2300      	movs	r3, #0
 801655a:	f1b8 0f00 	cmp.w	r8, #0
 801655e:	f300 810a 	bgt.w	8016776 <_strtod_l+0x7d6>
 8016562:	b10b      	cbz	r3, 8016568 <_strtod_l+0x5c8>
 8016564:	4682      	mov	sl, r0
 8016566:	468b      	mov	fp, r1
 8016568:	9b04      	ldr	r3, [sp, #16]
 801656a:	b1bb      	cbz	r3, 801659c <_strtod_l+0x5fc>
 801656c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016574:	2b00      	cmp	r3, #0
 8016576:	4659      	mov	r1, fp
 8016578:	dd10      	ble.n	801659c <_strtod_l+0x5fc>
 801657a:	2b1f      	cmp	r3, #31
 801657c:	f340 8107 	ble.w	801678e <_strtod_l+0x7ee>
 8016580:	2b34      	cmp	r3, #52	; 0x34
 8016582:	bfde      	ittt	le
 8016584:	3b20      	suble	r3, #32
 8016586:	f04f 32ff 	movle.w	r2, #4294967295
 801658a:	fa02 f303 	lslle.w	r3, r2, r3
 801658e:	f04f 0a00 	mov.w	sl, #0
 8016592:	bfcc      	ite	gt
 8016594:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016598:	ea03 0b01 	andle.w	fp, r3, r1
 801659c:	2200      	movs	r2, #0
 801659e:	2300      	movs	r3, #0
 80165a0:	4650      	mov	r0, sl
 80165a2:	4659      	mov	r1, fp
 80165a4:	f7ea faa8 	bl	8000af8 <__aeabi_dcmpeq>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	d1ac      	bne.n	8016506 <_strtod_l+0x566>
 80165ac:	9b07      	ldr	r3, [sp, #28]
 80165ae:	9300      	str	r3, [sp, #0]
 80165b0:	9a05      	ldr	r2, [sp, #20]
 80165b2:	9908      	ldr	r1, [sp, #32]
 80165b4:	4623      	mov	r3, r4
 80165b6:	4648      	mov	r0, r9
 80165b8:	f001 fddd 	bl	8018176 <__s2b>
 80165bc:	9007      	str	r0, [sp, #28]
 80165be:	2800      	cmp	r0, #0
 80165c0:	f43f af08 	beq.w	80163d4 <_strtod_l+0x434>
 80165c4:	9a06      	ldr	r2, [sp, #24]
 80165c6:	9b06      	ldr	r3, [sp, #24]
 80165c8:	2a00      	cmp	r2, #0
 80165ca:	f1c3 0300 	rsb	r3, r3, #0
 80165ce:	bfa8      	it	ge
 80165d0:	2300      	movge	r3, #0
 80165d2:	930e      	str	r3, [sp, #56]	; 0x38
 80165d4:	2400      	movs	r4, #0
 80165d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80165da:	9316      	str	r3, [sp, #88]	; 0x58
 80165dc:	46a0      	mov	r8, r4
 80165de:	9b07      	ldr	r3, [sp, #28]
 80165e0:	4648      	mov	r0, r9
 80165e2:	6859      	ldr	r1, [r3, #4]
 80165e4:	f001 fd41 	bl	801806a <_Balloc>
 80165e8:	9005      	str	r0, [sp, #20]
 80165ea:	2800      	cmp	r0, #0
 80165ec:	f43f aef6 	beq.w	80163dc <_strtod_l+0x43c>
 80165f0:	9b07      	ldr	r3, [sp, #28]
 80165f2:	691a      	ldr	r2, [r3, #16]
 80165f4:	3202      	adds	r2, #2
 80165f6:	f103 010c 	add.w	r1, r3, #12
 80165fa:	0092      	lsls	r2, r2, #2
 80165fc:	300c      	adds	r0, #12
 80165fe:	f001 fd29 	bl	8018054 <memcpy>
 8016602:	aa1e      	add	r2, sp, #120	; 0x78
 8016604:	a91d      	add	r1, sp, #116	; 0x74
 8016606:	ec4b ab10 	vmov	d0, sl, fp
 801660a:	4648      	mov	r0, r9
 801660c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016610:	f002 f86c 	bl	80186ec <__d2b>
 8016614:	901c      	str	r0, [sp, #112]	; 0x70
 8016616:	2800      	cmp	r0, #0
 8016618:	f43f aee0 	beq.w	80163dc <_strtod_l+0x43c>
 801661c:	2101      	movs	r1, #1
 801661e:	4648      	mov	r0, r9
 8016620:	f001 fe35 	bl	801828e <__i2b>
 8016624:	4680      	mov	r8, r0
 8016626:	2800      	cmp	r0, #0
 8016628:	f43f aed8 	beq.w	80163dc <_strtod_l+0x43c>
 801662c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801662e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016630:	2e00      	cmp	r6, #0
 8016632:	bfab      	itete	ge
 8016634:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016636:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016638:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801663a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801663c:	bfac      	ite	ge
 801663e:	18f7      	addge	r7, r6, r3
 8016640:	1b9d      	sublt	r5, r3, r6
 8016642:	9b04      	ldr	r3, [sp, #16]
 8016644:	1af6      	subs	r6, r6, r3
 8016646:	4416      	add	r6, r2
 8016648:	4b63      	ldr	r3, [pc, #396]	; (80167d8 <_strtod_l+0x838>)
 801664a:	3e01      	subs	r6, #1
 801664c:	429e      	cmp	r6, r3
 801664e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016652:	f280 80af 	bge.w	80167b4 <_strtod_l+0x814>
 8016656:	1b9b      	subs	r3, r3, r6
 8016658:	2b1f      	cmp	r3, #31
 801665a:	eba2 0203 	sub.w	r2, r2, r3
 801665e:	f04f 0101 	mov.w	r1, #1
 8016662:	f300 809b 	bgt.w	801679c <_strtod_l+0x7fc>
 8016666:	fa01 f303 	lsl.w	r3, r1, r3
 801666a:	930f      	str	r3, [sp, #60]	; 0x3c
 801666c:	2300      	movs	r3, #0
 801666e:	930a      	str	r3, [sp, #40]	; 0x28
 8016670:	18be      	adds	r6, r7, r2
 8016672:	9b04      	ldr	r3, [sp, #16]
 8016674:	42b7      	cmp	r7, r6
 8016676:	4415      	add	r5, r2
 8016678:	441d      	add	r5, r3
 801667a:	463b      	mov	r3, r7
 801667c:	bfa8      	it	ge
 801667e:	4633      	movge	r3, r6
 8016680:	42ab      	cmp	r3, r5
 8016682:	bfa8      	it	ge
 8016684:	462b      	movge	r3, r5
 8016686:	2b00      	cmp	r3, #0
 8016688:	bfc2      	ittt	gt
 801668a:	1af6      	subgt	r6, r6, r3
 801668c:	1aed      	subgt	r5, r5, r3
 801668e:	1aff      	subgt	r7, r7, r3
 8016690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016692:	b1bb      	cbz	r3, 80166c4 <_strtod_l+0x724>
 8016694:	4641      	mov	r1, r8
 8016696:	461a      	mov	r2, r3
 8016698:	4648      	mov	r0, r9
 801669a:	f001 fe97 	bl	80183cc <__pow5mult>
 801669e:	4680      	mov	r8, r0
 80166a0:	2800      	cmp	r0, #0
 80166a2:	f43f ae9b 	beq.w	80163dc <_strtod_l+0x43c>
 80166a6:	4601      	mov	r1, r0
 80166a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80166aa:	4648      	mov	r0, r9
 80166ac:	f001 fdf8 	bl	80182a0 <__multiply>
 80166b0:	900c      	str	r0, [sp, #48]	; 0x30
 80166b2:	2800      	cmp	r0, #0
 80166b4:	f43f ae92 	beq.w	80163dc <_strtod_l+0x43c>
 80166b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166ba:	4648      	mov	r0, r9
 80166bc:	f001 fd09 	bl	80180d2 <_Bfree>
 80166c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166c2:	931c      	str	r3, [sp, #112]	; 0x70
 80166c4:	2e00      	cmp	r6, #0
 80166c6:	dc7a      	bgt.n	80167be <_strtod_l+0x81e>
 80166c8:	9b06      	ldr	r3, [sp, #24]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	dd08      	ble.n	80166e0 <_strtod_l+0x740>
 80166ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80166d0:	9905      	ldr	r1, [sp, #20]
 80166d2:	4648      	mov	r0, r9
 80166d4:	f001 fe7a 	bl	80183cc <__pow5mult>
 80166d8:	9005      	str	r0, [sp, #20]
 80166da:	2800      	cmp	r0, #0
 80166dc:	f43f ae7e 	beq.w	80163dc <_strtod_l+0x43c>
 80166e0:	2d00      	cmp	r5, #0
 80166e2:	dd08      	ble.n	80166f6 <_strtod_l+0x756>
 80166e4:	462a      	mov	r2, r5
 80166e6:	9905      	ldr	r1, [sp, #20]
 80166e8:	4648      	mov	r0, r9
 80166ea:	f001 febd 	bl	8018468 <__lshift>
 80166ee:	9005      	str	r0, [sp, #20]
 80166f0:	2800      	cmp	r0, #0
 80166f2:	f43f ae73 	beq.w	80163dc <_strtod_l+0x43c>
 80166f6:	2f00      	cmp	r7, #0
 80166f8:	dd08      	ble.n	801670c <_strtod_l+0x76c>
 80166fa:	4641      	mov	r1, r8
 80166fc:	463a      	mov	r2, r7
 80166fe:	4648      	mov	r0, r9
 8016700:	f001 feb2 	bl	8018468 <__lshift>
 8016704:	4680      	mov	r8, r0
 8016706:	2800      	cmp	r0, #0
 8016708:	f43f ae68 	beq.w	80163dc <_strtod_l+0x43c>
 801670c:	9a05      	ldr	r2, [sp, #20]
 801670e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016710:	4648      	mov	r0, r9
 8016712:	f001 ff17 	bl	8018544 <__mdiff>
 8016716:	4604      	mov	r4, r0
 8016718:	2800      	cmp	r0, #0
 801671a:	f43f ae5f 	beq.w	80163dc <_strtod_l+0x43c>
 801671e:	68c3      	ldr	r3, [r0, #12]
 8016720:	930c      	str	r3, [sp, #48]	; 0x30
 8016722:	2300      	movs	r3, #0
 8016724:	60c3      	str	r3, [r0, #12]
 8016726:	4641      	mov	r1, r8
 8016728:	f001 fef2 	bl	8018510 <__mcmp>
 801672c:	2800      	cmp	r0, #0
 801672e:	da55      	bge.n	80167dc <_strtod_l+0x83c>
 8016730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016732:	b9e3      	cbnz	r3, 801676e <_strtod_l+0x7ce>
 8016734:	f1ba 0f00 	cmp.w	sl, #0
 8016738:	d119      	bne.n	801676e <_strtod_l+0x7ce>
 801673a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801673e:	b9b3      	cbnz	r3, 801676e <_strtod_l+0x7ce>
 8016740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016744:	0d1b      	lsrs	r3, r3, #20
 8016746:	051b      	lsls	r3, r3, #20
 8016748:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801674c:	d90f      	bls.n	801676e <_strtod_l+0x7ce>
 801674e:	6963      	ldr	r3, [r4, #20]
 8016750:	b913      	cbnz	r3, 8016758 <_strtod_l+0x7b8>
 8016752:	6923      	ldr	r3, [r4, #16]
 8016754:	2b01      	cmp	r3, #1
 8016756:	dd0a      	ble.n	801676e <_strtod_l+0x7ce>
 8016758:	4621      	mov	r1, r4
 801675a:	2201      	movs	r2, #1
 801675c:	4648      	mov	r0, r9
 801675e:	f001 fe83 	bl	8018468 <__lshift>
 8016762:	4641      	mov	r1, r8
 8016764:	4604      	mov	r4, r0
 8016766:	f001 fed3 	bl	8018510 <__mcmp>
 801676a:	2800      	cmp	r0, #0
 801676c:	dc67      	bgt.n	801683e <_strtod_l+0x89e>
 801676e:	9b04      	ldr	r3, [sp, #16]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d171      	bne.n	8016858 <_strtod_l+0x8b8>
 8016774:	e63d      	b.n	80163f2 <_strtod_l+0x452>
 8016776:	f018 0f01 	tst.w	r8, #1
 801677a:	d004      	beq.n	8016786 <_strtod_l+0x7e6>
 801677c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016780:	f7e9 ff52 	bl	8000628 <__aeabi_dmul>
 8016784:	2301      	movs	r3, #1
 8016786:	ea4f 0868 	mov.w	r8, r8, asr #1
 801678a:	3508      	adds	r5, #8
 801678c:	e6e5      	b.n	801655a <_strtod_l+0x5ba>
 801678e:	f04f 32ff 	mov.w	r2, #4294967295
 8016792:	fa02 f303 	lsl.w	r3, r2, r3
 8016796:	ea03 0a0a 	and.w	sl, r3, sl
 801679a:	e6ff      	b.n	801659c <_strtod_l+0x5fc>
 801679c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80167a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80167a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80167a8:	36e2      	adds	r6, #226	; 0xe2
 80167aa:	fa01 f306 	lsl.w	r3, r1, r6
 80167ae:	930a      	str	r3, [sp, #40]	; 0x28
 80167b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80167b2:	e75d      	b.n	8016670 <_strtod_l+0x6d0>
 80167b4:	2300      	movs	r3, #0
 80167b6:	930a      	str	r3, [sp, #40]	; 0x28
 80167b8:	2301      	movs	r3, #1
 80167ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80167bc:	e758      	b.n	8016670 <_strtod_l+0x6d0>
 80167be:	4632      	mov	r2, r6
 80167c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167c2:	4648      	mov	r0, r9
 80167c4:	f001 fe50 	bl	8018468 <__lshift>
 80167c8:	901c      	str	r0, [sp, #112]	; 0x70
 80167ca:	2800      	cmp	r0, #0
 80167cc:	f47f af7c 	bne.w	80166c8 <_strtod_l+0x728>
 80167d0:	e604      	b.n	80163dc <_strtod_l+0x43c>
 80167d2:	bf00      	nop
 80167d4:	08019ca8 	.word	0x08019ca8
 80167d8:	fffffc02 	.word	0xfffffc02
 80167dc:	465d      	mov	r5, fp
 80167de:	f040 8086 	bne.w	80168ee <_strtod_l+0x94e>
 80167e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80167e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80167e8:	b32a      	cbz	r2, 8016836 <_strtod_l+0x896>
 80167ea:	4aaf      	ldr	r2, [pc, #700]	; (8016aa8 <_strtod_l+0xb08>)
 80167ec:	4293      	cmp	r3, r2
 80167ee:	d153      	bne.n	8016898 <_strtod_l+0x8f8>
 80167f0:	9b04      	ldr	r3, [sp, #16]
 80167f2:	4650      	mov	r0, sl
 80167f4:	b1d3      	cbz	r3, 801682c <_strtod_l+0x88c>
 80167f6:	4aad      	ldr	r2, [pc, #692]	; (8016aac <_strtod_l+0xb0c>)
 80167f8:	402a      	ands	r2, r5
 80167fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80167fe:	f04f 31ff 	mov.w	r1, #4294967295
 8016802:	d816      	bhi.n	8016832 <_strtod_l+0x892>
 8016804:	0d12      	lsrs	r2, r2, #20
 8016806:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801680a:	fa01 f303 	lsl.w	r3, r1, r3
 801680e:	4298      	cmp	r0, r3
 8016810:	d142      	bne.n	8016898 <_strtod_l+0x8f8>
 8016812:	4ba7      	ldr	r3, [pc, #668]	; (8016ab0 <_strtod_l+0xb10>)
 8016814:	429d      	cmp	r5, r3
 8016816:	d102      	bne.n	801681e <_strtod_l+0x87e>
 8016818:	3001      	adds	r0, #1
 801681a:	f43f addf 	beq.w	80163dc <_strtod_l+0x43c>
 801681e:	4ba3      	ldr	r3, [pc, #652]	; (8016aac <_strtod_l+0xb0c>)
 8016820:	402b      	ands	r3, r5
 8016822:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016826:	f04f 0a00 	mov.w	sl, #0
 801682a:	e7a0      	b.n	801676e <_strtod_l+0x7ce>
 801682c:	f04f 33ff 	mov.w	r3, #4294967295
 8016830:	e7ed      	b.n	801680e <_strtod_l+0x86e>
 8016832:	460b      	mov	r3, r1
 8016834:	e7eb      	b.n	801680e <_strtod_l+0x86e>
 8016836:	bb7b      	cbnz	r3, 8016898 <_strtod_l+0x8f8>
 8016838:	f1ba 0f00 	cmp.w	sl, #0
 801683c:	d12c      	bne.n	8016898 <_strtod_l+0x8f8>
 801683e:	9904      	ldr	r1, [sp, #16]
 8016840:	4a9a      	ldr	r2, [pc, #616]	; (8016aac <_strtod_l+0xb0c>)
 8016842:	465b      	mov	r3, fp
 8016844:	b1f1      	cbz	r1, 8016884 <_strtod_l+0x8e4>
 8016846:	ea02 010b 	and.w	r1, r2, fp
 801684a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801684e:	dc19      	bgt.n	8016884 <_strtod_l+0x8e4>
 8016850:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016854:	f77f ae5b 	ble.w	801650e <_strtod_l+0x56e>
 8016858:	4a96      	ldr	r2, [pc, #600]	; (8016ab4 <_strtod_l+0xb14>)
 801685a:	2300      	movs	r3, #0
 801685c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016860:	4650      	mov	r0, sl
 8016862:	4659      	mov	r1, fp
 8016864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016868:	f7e9 fede 	bl	8000628 <__aeabi_dmul>
 801686c:	4682      	mov	sl, r0
 801686e:	468b      	mov	fp, r1
 8016870:	2900      	cmp	r1, #0
 8016872:	f47f adbe 	bne.w	80163f2 <_strtod_l+0x452>
 8016876:	2800      	cmp	r0, #0
 8016878:	f47f adbb 	bne.w	80163f2 <_strtod_l+0x452>
 801687c:	2322      	movs	r3, #34	; 0x22
 801687e:	f8c9 3000 	str.w	r3, [r9]
 8016882:	e5b6      	b.n	80163f2 <_strtod_l+0x452>
 8016884:	4013      	ands	r3, r2
 8016886:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801688a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801688e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016892:	f04f 3aff 	mov.w	sl, #4294967295
 8016896:	e76a      	b.n	801676e <_strtod_l+0x7ce>
 8016898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801689a:	b193      	cbz	r3, 80168c2 <_strtod_l+0x922>
 801689c:	422b      	tst	r3, r5
 801689e:	f43f af66 	beq.w	801676e <_strtod_l+0x7ce>
 80168a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168a4:	9a04      	ldr	r2, [sp, #16]
 80168a6:	4650      	mov	r0, sl
 80168a8:	4659      	mov	r1, fp
 80168aa:	b173      	cbz	r3, 80168ca <_strtod_l+0x92a>
 80168ac:	f7ff fb5c 	bl	8015f68 <sulp>
 80168b0:	4602      	mov	r2, r0
 80168b2:	460b      	mov	r3, r1
 80168b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168b8:	f7e9 fd00 	bl	80002bc <__adddf3>
 80168bc:	4682      	mov	sl, r0
 80168be:	468b      	mov	fp, r1
 80168c0:	e755      	b.n	801676e <_strtod_l+0x7ce>
 80168c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168c4:	ea13 0f0a 	tst.w	r3, sl
 80168c8:	e7e9      	b.n	801689e <_strtod_l+0x8fe>
 80168ca:	f7ff fb4d 	bl	8015f68 <sulp>
 80168ce:	4602      	mov	r2, r0
 80168d0:	460b      	mov	r3, r1
 80168d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168d6:	f7e9 fcef 	bl	80002b8 <__aeabi_dsub>
 80168da:	2200      	movs	r2, #0
 80168dc:	2300      	movs	r3, #0
 80168de:	4682      	mov	sl, r0
 80168e0:	468b      	mov	fp, r1
 80168e2:	f7ea f909 	bl	8000af8 <__aeabi_dcmpeq>
 80168e6:	2800      	cmp	r0, #0
 80168e8:	f47f ae11 	bne.w	801650e <_strtod_l+0x56e>
 80168ec:	e73f      	b.n	801676e <_strtod_l+0x7ce>
 80168ee:	4641      	mov	r1, r8
 80168f0:	4620      	mov	r0, r4
 80168f2:	f001 ff4a 	bl	801878a <__ratio>
 80168f6:	ec57 6b10 	vmov	r6, r7, d0
 80168fa:	2200      	movs	r2, #0
 80168fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016900:	ee10 0a10 	vmov	r0, s0
 8016904:	4639      	mov	r1, r7
 8016906:	f7ea f90b 	bl	8000b20 <__aeabi_dcmple>
 801690a:	2800      	cmp	r0, #0
 801690c:	d077      	beq.n	80169fe <_strtod_l+0xa5e>
 801690e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016910:	2b00      	cmp	r3, #0
 8016912:	d04a      	beq.n	80169aa <_strtod_l+0xa0a>
 8016914:	4b68      	ldr	r3, [pc, #416]	; (8016ab8 <_strtod_l+0xb18>)
 8016916:	2200      	movs	r2, #0
 8016918:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801691c:	4f66      	ldr	r7, [pc, #408]	; (8016ab8 <_strtod_l+0xb18>)
 801691e:	2600      	movs	r6, #0
 8016920:	4b62      	ldr	r3, [pc, #392]	; (8016aac <_strtod_l+0xb0c>)
 8016922:	402b      	ands	r3, r5
 8016924:	930f      	str	r3, [sp, #60]	; 0x3c
 8016926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016928:	4b64      	ldr	r3, [pc, #400]	; (8016abc <_strtod_l+0xb1c>)
 801692a:	429a      	cmp	r2, r3
 801692c:	f040 80ce 	bne.w	8016acc <_strtod_l+0xb2c>
 8016930:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016934:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016938:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801693c:	ec4b ab10 	vmov	d0, sl, fp
 8016940:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016944:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016948:	f001 fe5a 	bl	8018600 <__ulp>
 801694c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016950:	ec53 2b10 	vmov	r2, r3, d0
 8016954:	f7e9 fe68 	bl	8000628 <__aeabi_dmul>
 8016958:	4652      	mov	r2, sl
 801695a:	465b      	mov	r3, fp
 801695c:	f7e9 fcae 	bl	80002bc <__adddf3>
 8016960:	460b      	mov	r3, r1
 8016962:	4952      	ldr	r1, [pc, #328]	; (8016aac <_strtod_l+0xb0c>)
 8016964:	4a56      	ldr	r2, [pc, #344]	; (8016ac0 <_strtod_l+0xb20>)
 8016966:	4019      	ands	r1, r3
 8016968:	4291      	cmp	r1, r2
 801696a:	4682      	mov	sl, r0
 801696c:	d95b      	bls.n	8016a26 <_strtod_l+0xa86>
 801696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016970:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016974:	4293      	cmp	r3, r2
 8016976:	d103      	bne.n	8016980 <_strtod_l+0x9e0>
 8016978:	9b08      	ldr	r3, [sp, #32]
 801697a:	3301      	adds	r3, #1
 801697c:	f43f ad2e 	beq.w	80163dc <_strtod_l+0x43c>
 8016980:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016ab0 <_strtod_l+0xb10>
 8016984:	f04f 3aff 	mov.w	sl, #4294967295
 8016988:	991c      	ldr	r1, [sp, #112]	; 0x70
 801698a:	4648      	mov	r0, r9
 801698c:	f001 fba1 	bl	80180d2 <_Bfree>
 8016990:	9905      	ldr	r1, [sp, #20]
 8016992:	4648      	mov	r0, r9
 8016994:	f001 fb9d 	bl	80180d2 <_Bfree>
 8016998:	4641      	mov	r1, r8
 801699a:	4648      	mov	r0, r9
 801699c:	f001 fb99 	bl	80180d2 <_Bfree>
 80169a0:	4621      	mov	r1, r4
 80169a2:	4648      	mov	r0, r9
 80169a4:	f001 fb95 	bl	80180d2 <_Bfree>
 80169a8:	e619      	b.n	80165de <_strtod_l+0x63e>
 80169aa:	f1ba 0f00 	cmp.w	sl, #0
 80169ae:	d11a      	bne.n	80169e6 <_strtod_l+0xa46>
 80169b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169b4:	b9eb      	cbnz	r3, 80169f2 <_strtod_l+0xa52>
 80169b6:	2200      	movs	r2, #0
 80169b8:	4b3f      	ldr	r3, [pc, #252]	; (8016ab8 <_strtod_l+0xb18>)
 80169ba:	4630      	mov	r0, r6
 80169bc:	4639      	mov	r1, r7
 80169be:	f7ea f8a5 	bl	8000b0c <__aeabi_dcmplt>
 80169c2:	b9c8      	cbnz	r0, 80169f8 <_strtod_l+0xa58>
 80169c4:	4630      	mov	r0, r6
 80169c6:	4639      	mov	r1, r7
 80169c8:	2200      	movs	r2, #0
 80169ca:	4b3e      	ldr	r3, [pc, #248]	; (8016ac4 <_strtod_l+0xb24>)
 80169cc:	f7e9 fe2c 	bl	8000628 <__aeabi_dmul>
 80169d0:	4606      	mov	r6, r0
 80169d2:	460f      	mov	r7, r1
 80169d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80169d8:	9618      	str	r6, [sp, #96]	; 0x60
 80169da:	9319      	str	r3, [sp, #100]	; 0x64
 80169dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80169e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80169e4:	e79c      	b.n	8016920 <_strtod_l+0x980>
 80169e6:	f1ba 0f01 	cmp.w	sl, #1
 80169ea:	d102      	bne.n	80169f2 <_strtod_l+0xa52>
 80169ec:	2d00      	cmp	r5, #0
 80169ee:	f43f ad8e 	beq.w	801650e <_strtod_l+0x56e>
 80169f2:	2200      	movs	r2, #0
 80169f4:	4b34      	ldr	r3, [pc, #208]	; (8016ac8 <_strtod_l+0xb28>)
 80169f6:	e78f      	b.n	8016918 <_strtod_l+0x978>
 80169f8:	2600      	movs	r6, #0
 80169fa:	4f32      	ldr	r7, [pc, #200]	; (8016ac4 <_strtod_l+0xb24>)
 80169fc:	e7ea      	b.n	80169d4 <_strtod_l+0xa34>
 80169fe:	4b31      	ldr	r3, [pc, #196]	; (8016ac4 <_strtod_l+0xb24>)
 8016a00:	4630      	mov	r0, r6
 8016a02:	4639      	mov	r1, r7
 8016a04:	2200      	movs	r2, #0
 8016a06:	f7e9 fe0f 	bl	8000628 <__aeabi_dmul>
 8016a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a0c:	4606      	mov	r6, r0
 8016a0e:	460f      	mov	r7, r1
 8016a10:	b933      	cbnz	r3, 8016a20 <_strtod_l+0xa80>
 8016a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a16:	9010      	str	r0, [sp, #64]	; 0x40
 8016a18:	9311      	str	r3, [sp, #68]	; 0x44
 8016a1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016a1e:	e7df      	b.n	80169e0 <_strtod_l+0xa40>
 8016a20:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016a24:	e7f9      	b.n	8016a1a <_strtod_l+0xa7a>
 8016a26:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016a2a:	9b04      	ldr	r3, [sp, #16]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d1ab      	bne.n	8016988 <_strtod_l+0x9e8>
 8016a30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a34:	0d1b      	lsrs	r3, r3, #20
 8016a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a38:	051b      	lsls	r3, r3, #20
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	465d      	mov	r5, fp
 8016a3e:	d1a3      	bne.n	8016988 <_strtod_l+0x9e8>
 8016a40:	4639      	mov	r1, r7
 8016a42:	4630      	mov	r0, r6
 8016a44:	f7ea f8a0 	bl	8000b88 <__aeabi_d2iz>
 8016a48:	f7e9 fd84 	bl	8000554 <__aeabi_i2d>
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	4602      	mov	r2, r0
 8016a50:	4639      	mov	r1, r7
 8016a52:	4630      	mov	r0, r6
 8016a54:	f7e9 fc30 	bl	80002b8 <__aeabi_dsub>
 8016a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a5a:	4606      	mov	r6, r0
 8016a5c:	460f      	mov	r7, r1
 8016a5e:	b933      	cbnz	r3, 8016a6e <_strtod_l+0xace>
 8016a60:	f1ba 0f00 	cmp.w	sl, #0
 8016a64:	d103      	bne.n	8016a6e <_strtod_l+0xace>
 8016a66:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016a6a:	2d00      	cmp	r5, #0
 8016a6c:	d06d      	beq.n	8016b4a <_strtod_l+0xbaa>
 8016a6e:	a30a      	add	r3, pc, #40	; (adr r3, 8016a98 <_strtod_l+0xaf8>)
 8016a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a74:	4630      	mov	r0, r6
 8016a76:	4639      	mov	r1, r7
 8016a78:	f7ea f848 	bl	8000b0c <__aeabi_dcmplt>
 8016a7c:	2800      	cmp	r0, #0
 8016a7e:	f47f acb8 	bne.w	80163f2 <_strtod_l+0x452>
 8016a82:	a307      	add	r3, pc, #28	; (adr r3, 8016aa0 <_strtod_l+0xb00>)
 8016a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a88:	4630      	mov	r0, r6
 8016a8a:	4639      	mov	r1, r7
 8016a8c:	f7ea f85c 	bl	8000b48 <__aeabi_dcmpgt>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	f43f af79 	beq.w	8016988 <_strtod_l+0x9e8>
 8016a96:	e4ac      	b.n	80163f2 <_strtod_l+0x452>
 8016a98:	94a03595 	.word	0x94a03595
 8016a9c:	3fdfffff 	.word	0x3fdfffff
 8016aa0:	35afe535 	.word	0x35afe535
 8016aa4:	3fe00000 	.word	0x3fe00000
 8016aa8:	000fffff 	.word	0x000fffff
 8016aac:	7ff00000 	.word	0x7ff00000
 8016ab0:	7fefffff 	.word	0x7fefffff
 8016ab4:	39500000 	.word	0x39500000
 8016ab8:	3ff00000 	.word	0x3ff00000
 8016abc:	7fe00000 	.word	0x7fe00000
 8016ac0:	7c9fffff 	.word	0x7c9fffff
 8016ac4:	3fe00000 	.word	0x3fe00000
 8016ac8:	bff00000 	.word	0xbff00000
 8016acc:	9b04      	ldr	r3, [sp, #16]
 8016ace:	b333      	cbz	r3, 8016b1e <_strtod_l+0xb7e>
 8016ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ad2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016ad6:	d822      	bhi.n	8016b1e <_strtod_l+0xb7e>
 8016ad8:	a327      	add	r3, pc, #156	; (adr r3, 8016b78 <_strtod_l+0xbd8>)
 8016ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ade:	4630      	mov	r0, r6
 8016ae0:	4639      	mov	r1, r7
 8016ae2:	f7ea f81d 	bl	8000b20 <__aeabi_dcmple>
 8016ae6:	b1a0      	cbz	r0, 8016b12 <_strtod_l+0xb72>
 8016ae8:	4639      	mov	r1, r7
 8016aea:	4630      	mov	r0, r6
 8016aec:	f7ea f874 	bl	8000bd8 <__aeabi_d2uiz>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	bf08      	it	eq
 8016af4:	2001      	moveq	r0, #1
 8016af6:	f7e9 fd1d 	bl	8000534 <__aeabi_ui2d>
 8016afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016afc:	4606      	mov	r6, r0
 8016afe:	460f      	mov	r7, r1
 8016b00:	bb03      	cbnz	r3, 8016b44 <_strtod_l+0xba4>
 8016b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b06:	9012      	str	r0, [sp, #72]	; 0x48
 8016b08:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016b0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b16:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016b1a:	1a9b      	subs	r3, r3, r2
 8016b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b1e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016b22:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016b26:	f001 fd6b 	bl	8018600 <__ulp>
 8016b2a:	4650      	mov	r0, sl
 8016b2c:	ec53 2b10 	vmov	r2, r3, d0
 8016b30:	4659      	mov	r1, fp
 8016b32:	f7e9 fd79 	bl	8000628 <__aeabi_dmul>
 8016b36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016b3a:	f7e9 fbbf 	bl	80002bc <__adddf3>
 8016b3e:	4682      	mov	sl, r0
 8016b40:	468b      	mov	fp, r1
 8016b42:	e772      	b.n	8016a2a <_strtod_l+0xa8a>
 8016b44:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016b48:	e7df      	b.n	8016b0a <_strtod_l+0xb6a>
 8016b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8016b80 <_strtod_l+0xbe0>)
 8016b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b50:	f7e9 ffdc 	bl	8000b0c <__aeabi_dcmplt>
 8016b54:	e79c      	b.n	8016a90 <_strtod_l+0xaf0>
 8016b56:	2300      	movs	r3, #0
 8016b58:	930d      	str	r3, [sp, #52]	; 0x34
 8016b5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016b5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b5e:	6013      	str	r3, [r2, #0]
 8016b60:	f7ff ba61 	b.w	8016026 <_strtod_l+0x86>
 8016b64:	2b65      	cmp	r3, #101	; 0x65
 8016b66:	f04f 0200 	mov.w	r2, #0
 8016b6a:	f43f ab4e 	beq.w	801620a <_strtod_l+0x26a>
 8016b6e:	2101      	movs	r1, #1
 8016b70:	4614      	mov	r4, r2
 8016b72:	9104      	str	r1, [sp, #16]
 8016b74:	f7ff bacb 	b.w	801610e <_strtod_l+0x16e>
 8016b78:	ffc00000 	.word	0xffc00000
 8016b7c:	41dfffff 	.word	0x41dfffff
 8016b80:	94a03595 	.word	0x94a03595
 8016b84:	3fcfffff 	.word	0x3fcfffff

08016b88 <_strtod_r>:
 8016b88:	4b05      	ldr	r3, [pc, #20]	; (8016ba0 <_strtod_r+0x18>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	b410      	push	{r4}
 8016b8e:	6a1b      	ldr	r3, [r3, #32]
 8016b90:	4c04      	ldr	r4, [pc, #16]	; (8016ba4 <_strtod_r+0x1c>)
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	bf08      	it	eq
 8016b96:	4623      	moveq	r3, r4
 8016b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b9c:	f7ff ba00 	b.w	8015fa0 <_strtod_l>
 8016ba0:	2000000c 	.word	0x2000000c
 8016ba4:	20000070 	.word	0x20000070

08016ba8 <_strtol_l.isra.0>:
 8016ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bac:	4680      	mov	r8, r0
 8016bae:	4689      	mov	r9, r1
 8016bb0:	4692      	mov	sl, r2
 8016bb2:	461e      	mov	r6, r3
 8016bb4:	460f      	mov	r7, r1
 8016bb6:	463d      	mov	r5, r7
 8016bb8:	9808      	ldr	r0, [sp, #32]
 8016bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bbe:	f001 fa0d 	bl	8017fdc <__locale_ctype_ptr_l>
 8016bc2:	4420      	add	r0, r4
 8016bc4:	7843      	ldrb	r3, [r0, #1]
 8016bc6:	f013 0308 	ands.w	r3, r3, #8
 8016bca:	d132      	bne.n	8016c32 <_strtol_l.isra.0+0x8a>
 8016bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8016bce:	d132      	bne.n	8016c36 <_strtol_l.isra.0+0x8e>
 8016bd0:	787c      	ldrb	r4, [r7, #1]
 8016bd2:	1cbd      	adds	r5, r7, #2
 8016bd4:	2201      	movs	r2, #1
 8016bd6:	2e00      	cmp	r6, #0
 8016bd8:	d05d      	beq.n	8016c96 <_strtol_l.isra.0+0xee>
 8016bda:	2e10      	cmp	r6, #16
 8016bdc:	d109      	bne.n	8016bf2 <_strtol_l.isra.0+0x4a>
 8016bde:	2c30      	cmp	r4, #48	; 0x30
 8016be0:	d107      	bne.n	8016bf2 <_strtol_l.isra.0+0x4a>
 8016be2:	782b      	ldrb	r3, [r5, #0]
 8016be4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016be8:	2b58      	cmp	r3, #88	; 0x58
 8016bea:	d14f      	bne.n	8016c8c <_strtol_l.isra.0+0xe4>
 8016bec:	786c      	ldrb	r4, [r5, #1]
 8016bee:	2610      	movs	r6, #16
 8016bf0:	3502      	adds	r5, #2
 8016bf2:	2a00      	cmp	r2, #0
 8016bf4:	bf14      	ite	ne
 8016bf6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016bfa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016bfe:	2700      	movs	r7, #0
 8016c00:	fbb1 fcf6 	udiv	ip, r1, r6
 8016c04:	4638      	mov	r0, r7
 8016c06:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016c0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016c0e:	2b09      	cmp	r3, #9
 8016c10:	d817      	bhi.n	8016c42 <_strtol_l.isra.0+0x9a>
 8016c12:	461c      	mov	r4, r3
 8016c14:	42a6      	cmp	r6, r4
 8016c16:	dd23      	ble.n	8016c60 <_strtol_l.isra.0+0xb8>
 8016c18:	1c7b      	adds	r3, r7, #1
 8016c1a:	d007      	beq.n	8016c2c <_strtol_l.isra.0+0x84>
 8016c1c:	4584      	cmp	ip, r0
 8016c1e:	d31c      	bcc.n	8016c5a <_strtol_l.isra.0+0xb2>
 8016c20:	d101      	bne.n	8016c26 <_strtol_l.isra.0+0x7e>
 8016c22:	45a6      	cmp	lr, r4
 8016c24:	db19      	blt.n	8016c5a <_strtol_l.isra.0+0xb2>
 8016c26:	fb00 4006 	mla	r0, r0, r6, r4
 8016c2a:	2701      	movs	r7, #1
 8016c2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c30:	e7eb      	b.n	8016c0a <_strtol_l.isra.0+0x62>
 8016c32:	462f      	mov	r7, r5
 8016c34:	e7bf      	b.n	8016bb6 <_strtol_l.isra.0+0xe>
 8016c36:	2c2b      	cmp	r4, #43	; 0x2b
 8016c38:	bf04      	itt	eq
 8016c3a:	1cbd      	addeq	r5, r7, #2
 8016c3c:	787c      	ldrbeq	r4, [r7, #1]
 8016c3e:	461a      	mov	r2, r3
 8016c40:	e7c9      	b.n	8016bd6 <_strtol_l.isra.0+0x2e>
 8016c42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016c46:	2b19      	cmp	r3, #25
 8016c48:	d801      	bhi.n	8016c4e <_strtol_l.isra.0+0xa6>
 8016c4a:	3c37      	subs	r4, #55	; 0x37
 8016c4c:	e7e2      	b.n	8016c14 <_strtol_l.isra.0+0x6c>
 8016c4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016c52:	2b19      	cmp	r3, #25
 8016c54:	d804      	bhi.n	8016c60 <_strtol_l.isra.0+0xb8>
 8016c56:	3c57      	subs	r4, #87	; 0x57
 8016c58:	e7dc      	b.n	8016c14 <_strtol_l.isra.0+0x6c>
 8016c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8016c5e:	e7e5      	b.n	8016c2c <_strtol_l.isra.0+0x84>
 8016c60:	1c7b      	adds	r3, r7, #1
 8016c62:	d108      	bne.n	8016c76 <_strtol_l.isra.0+0xce>
 8016c64:	2322      	movs	r3, #34	; 0x22
 8016c66:	f8c8 3000 	str.w	r3, [r8]
 8016c6a:	4608      	mov	r0, r1
 8016c6c:	f1ba 0f00 	cmp.w	sl, #0
 8016c70:	d107      	bne.n	8016c82 <_strtol_l.isra.0+0xda>
 8016c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c76:	b102      	cbz	r2, 8016c7a <_strtol_l.isra.0+0xd2>
 8016c78:	4240      	negs	r0, r0
 8016c7a:	f1ba 0f00 	cmp.w	sl, #0
 8016c7e:	d0f8      	beq.n	8016c72 <_strtol_l.isra.0+0xca>
 8016c80:	b10f      	cbz	r7, 8016c86 <_strtol_l.isra.0+0xde>
 8016c82:	f105 39ff 	add.w	r9, r5, #4294967295
 8016c86:	f8ca 9000 	str.w	r9, [sl]
 8016c8a:	e7f2      	b.n	8016c72 <_strtol_l.isra.0+0xca>
 8016c8c:	2430      	movs	r4, #48	; 0x30
 8016c8e:	2e00      	cmp	r6, #0
 8016c90:	d1af      	bne.n	8016bf2 <_strtol_l.isra.0+0x4a>
 8016c92:	2608      	movs	r6, #8
 8016c94:	e7ad      	b.n	8016bf2 <_strtol_l.isra.0+0x4a>
 8016c96:	2c30      	cmp	r4, #48	; 0x30
 8016c98:	d0a3      	beq.n	8016be2 <_strtol_l.isra.0+0x3a>
 8016c9a:	260a      	movs	r6, #10
 8016c9c:	e7a9      	b.n	8016bf2 <_strtol_l.isra.0+0x4a>
	...

08016ca0 <_strtol_r>:
 8016ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ca2:	4c06      	ldr	r4, [pc, #24]	; (8016cbc <_strtol_r+0x1c>)
 8016ca4:	4d06      	ldr	r5, [pc, #24]	; (8016cc0 <_strtol_r+0x20>)
 8016ca6:	6824      	ldr	r4, [r4, #0]
 8016ca8:	6a24      	ldr	r4, [r4, #32]
 8016caa:	2c00      	cmp	r4, #0
 8016cac:	bf08      	it	eq
 8016cae:	462c      	moveq	r4, r5
 8016cb0:	9400      	str	r4, [sp, #0]
 8016cb2:	f7ff ff79 	bl	8016ba8 <_strtol_l.isra.0>
 8016cb6:	b003      	add	sp, #12
 8016cb8:	bd30      	pop	{r4, r5, pc}
 8016cba:	bf00      	nop
 8016cbc:	2000000c 	.word	0x2000000c
 8016cc0:	20000070 	.word	0x20000070

08016cc4 <_vsiprintf_r>:
 8016cc4:	b500      	push	{lr}
 8016cc6:	b09b      	sub	sp, #108	; 0x6c
 8016cc8:	9100      	str	r1, [sp, #0]
 8016cca:	9104      	str	r1, [sp, #16]
 8016ccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016cd0:	9105      	str	r1, [sp, #20]
 8016cd2:	9102      	str	r1, [sp, #8]
 8016cd4:	4905      	ldr	r1, [pc, #20]	; (8016cec <_vsiprintf_r+0x28>)
 8016cd6:	9103      	str	r1, [sp, #12]
 8016cd8:	4669      	mov	r1, sp
 8016cda:	f001 fed5 	bl	8018a88 <_svfiprintf_r>
 8016cde:	9b00      	ldr	r3, [sp, #0]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	701a      	strb	r2, [r3, #0]
 8016ce4:	b01b      	add	sp, #108	; 0x6c
 8016ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cea:	bf00      	nop
 8016cec:	ffff0208 	.word	0xffff0208

08016cf0 <vsiprintf>:
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	460a      	mov	r2, r1
 8016cf4:	4601      	mov	r1, r0
 8016cf6:	4802      	ldr	r0, [pc, #8]	; (8016d00 <vsiprintf+0x10>)
 8016cf8:	6800      	ldr	r0, [r0, #0]
 8016cfa:	f7ff bfe3 	b.w	8016cc4 <_vsiprintf_r>
 8016cfe:	bf00      	nop
 8016d00:	2000000c 	.word	0x2000000c

08016d04 <quorem>:
 8016d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d08:	6903      	ldr	r3, [r0, #16]
 8016d0a:	690c      	ldr	r4, [r1, #16]
 8016d0c:	42a3      	cmp	r3, r4
 8016d0e:	4680      	mov	r8, r0
 8016d10:	f2c0 8082 	blt.w	8016e18 <quorem+0x114>
 8016d14:	3c01      	subs	r4, #1
 8016d16:	f101 0714 	add.w	r7, r1, #20
 8016d1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016d1e:	f100 0614 	add.w	r6, r0, #20
 8016d22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016d26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016d2a:	eb06 030c 	add.w	r3, r6, ip
 8016d2e:	3501      	adds	r5, #1
 8016d30:	eb07 090c 	add.w	r9, r7, ip
 8016d34:	9301      	str	r3, [sp, #4]
 8016d36:	fbb0 f5f5 	udiv	r5, r0, r5
 8016d3a:	b395      	cbz	r5, 8016da2 <quorem+0x9e>
 8016d3c:	f04f 0a00 	mov.w	sl, #0
 8016d40:	4638      	mov	r0, r7
 8016d42:	46b6      	mov	lr, r6
 8016d44:	46d3      	mov	fp, sl
 8016d46:	f850 2b04 	ldr.w	r2, [r0], #4
 8016d4a:	b293      	uxth	r3, r2
 8016d4c:	fb05 a303 	mla	r3, r5, r3, sl
 8016d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d54:	b29b      	uxth	r3, r3
 8016d56:	ebab 0303 	sub.w	r3, fp, r3
 8016d5a:	0c12      	lsrs	r2, r2, #16
 8016d5c:	f8de b000 	ldr.w	fp, [lr]
 8016d60:	fb05 a202 	mla	r2, r5, r2, sl
 8016d64:	fa13 f38b 	uxtah	r3, r3, fp
 8016d68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016d6c:	fa1f fb82 	uxth.w	fp, r2
 8016d70:	f8de 2000 	ldr.w	r2, [lr]
 8016d74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d82:	4581      	cmp	r9, r0
 8016d84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016d88:	f84e 3b04 	str.w	r3, [lr], #4
 8016d8c:	d2db      	bcs.n	8016d46 <quorem+0x42>
 8016d8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016d92:	b933      	cbnz	r3, 8016da2 <quorem+0x9e>
 8016d94:	9b01      	ldr	r3, [sp, #4]
 8016d96:	3b04      	subs	r3, #4
 8016d98:	429e      	cmp	r6, r3
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	d330      	bcc.n	8016e00 <quorem+0xfc>
 8016d9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8016da2:	4640      	mov	r0, r8
 8016da4:	f001 fbb4 	bl	8018510 <__mcmp>
 8016da8:	2800      	cmp	r0, #0
 8016daa:	db25      	blt.n	8016df8 <quorem+0xf4>
 8016dac:	3501      	adds	r5, #1
 8016dae:	4630      	mov	r0, r6
 8016db0:	f04f 0c00 	mov.w	ip, #0
 8016db4:	f857 2b04 	ldr.w	r2, [r7], #4
 8016db8:	f8d0 e000 	ldr.w	lr, [r0]
 8016dbc:	b293      	uxth	r3, r2
 8016dbe:	ebac 0303 	sub.w	r3, ip, r3
 8016dc2:	0c12      	lsrs	r2, r2, #16
 8016dc4:	fa13 f38e 	uxtah	r3, r3, lr
 8016dc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016dcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dd6:	45b9      	cmp	r9, r7
 8016dd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016ddc:	f840 3b04 	str.w	r3, [r0], #4
 8016de0:	d2e8      	bcs.n	8016db4 <quorem+0xb0>
 8016de2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016de6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016dea:	b92a      	cbnz	r2, 8016df8 <quorem+0xf4>
 8016dec:	3b04      	subs	r3, #4
 8016dee:	429e      	cmp	r6, r3
 8016df0:	461a      	mov	r2, r3
 8016df2:	d30b      	bcc.n	8016e0c <quorem+0x108>
 8016df4:	f8c8 4010 	str.w	r4, [r8, #16]
 8016df8:	4628      	mov	r0, r5
 8016dfa:	b003      	add	sp, #12
 8016dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e00:	6812      	ldr	r2, [r2, #0]
 8016e02:	3b04      	subs	r3, #4
 8016e04:	2a00      	cmp	r2, #0
 8016e06:	d1ca      	bne.n	8016d9e <quorem+0x9a>
 8016e08:	3c01      	subs	r4, #1
 8016e0a:	e7c5      	b.n	8016d98 <quorem+0x94>
 8016e0c:	6812      	ldr	r2, [r2, #0]
 8016e0e:	3b04      	subs	r3, #4
 8016e10:	2a00      	cmp	r2, #0
 8016e12:	d1ef      	bne.n	8016df4 <quorem+0xf0>
 8016e14:	3c01      	subs	r4, #1
 8016e16:	e7ea      	b.n	8016dee <quorem+0xea>
 8016e18:	2000      	movs	r0, #0
 8016e1a:	e7ee      	b.n	8016dfa <quorem+0xf6>
 8016e1c:	0000      	movs	r0, r0
	...

08016e20 <_dtoa_r>:
 8016e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e24:	ec57 6b10 	vmov	r6, r7, d0
 8016e28:	b097      	sub	sp, #92	; 0x5c
 8016e2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e2c:	9106      	str	r1, [sp, #24]
 8016e2e:	4604      	mov	r4, r0
 8016e30:	920b      	str	r2, [sp, #44]	; 0x2c
 8016e32:	9312      	str	r3, [sp, #72]	; 0x48
 8016e34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016e38:	e9cd 6700 	strd	r6, r7, [sp]
 8016e3c:	b93d      	cbnz	r5, 8016e4e <_dtoa_r+0x2e>
 8016e3e:	2010      	movs	r0, #16
 8016e40:	f001 f8ee 	bl	8018020 <malloc>
 8016e44:	6260      	str	r0, [r4, #36]	; 0x24
 8016e46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e4a:	6005      	str	r5, [r0, #0]
 8016e4c:	60c5      	str	r5, [r0, #12]
 8016e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e50:	6819      	ldr	r1, [r3, #0]
 8016e52:	b151      	cbz	r1, 8016e6a <_dtoa_r+0x4a>
 8016e54:	685a      	ldr	r2, [r3, #4]
 8016e56:	604a      	str	r2, [r1, #4]
 8016e58:	2301      	movs	r3, #1
 8016e5a:	4093      	lsls	r3, r2
 8016e5c:	608b      	str	r3, [r1, #8]
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f001 f937 	bl	80180d2 <_Bfree>
 8016e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e66:	2200      	movs	r2, #0
 8016e68:	601a      	str	r2, [r3, #0]
 8016e6a:	1e3b      	subs	r3, r7, #0
 8016e6c:	bfbb      	ittet	lt
 8016e6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016e72:	9301      	strlt	r3, [sp, #4]
 8016e74:	2300      	movge	r3, #0
 8016e76:	2201      	movlt	r2, #1
 8016e78:	bfac      	ite	ge
 8016e7a:	f8c8 3000 	strge.w	r3, [r8]
 8016e7e:	f8c8 2000 	strlt.w	r2, [r8]
 8016e82:	4baf      	ldr	r3, [pc, #700]	; (8017140 <_dtoa_r+0x320>)
 8016e84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016e88:	ea33 0308 	bics.w	r3, r3, r8
 8016e8c:	d114      	bne.n	8016eb8 <_dtoa_r+0x98>
 8016e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e90:	f242 730f 	movw	r3, #9999	; 0x270f
 8016e94:	6013      	str	r3, [r2, #0]
 8016e96:	9b00      	ldr	r3, [sp, #0]
 8016e98:	b923      	cbnz	r3, 8016ea4 <_dtoa_r+0x84>
 8016e9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016e9e:	2800      	cmp	r0, #0
 8016ea0:	f000 8542 	beq.w	8017928 <_dtoa_r+0xb08>
 8016ea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ea6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017154 <_dtoa_r+0x334>
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	f000 8544 	beq.w	8017938 <_dtoa_r+0xb18>
 8016eb0:	f10b 0303 	add.w	r3, fp, #3
 8016eb4:	f000 bd3e 	b.w	8017934 <_dtoa_r+0xb14>
 8016eb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	4639      	mov	r1, r7
 8016ec4:	f7e9 fe18 	bl	8000af8 <__aeabi_dcmpeq>
 8016ec8:	4681      	mov	r9, r0
 8016eca:	b168      	cbz	r0, 8016ee8 <_dtoa_r+0xc8>
 8016ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ece:	2301      	movs	r3, #1
 8016ed0:	6013      	str	r3, [r2, #0]
 8016ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f000 8524 	beq.w	8017922 <_dtoa_r+0xb02>
 8016eda:	4b9a      	ldr	r3, [pc, #616]	; (8017144 <_dtoa_r+0x324>)
 8016edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016ede:	f103 3bff 	add.w	fp, r3, #4294967295
 8016ee2:	6013      	str	r3, [r2, #0]
 8016ee4:	f000 bd28 	b.w	8017938 <_dtoa_r+0xb18>
 8016ee8:	aa14      	add	r2, sp, #80	; 0x50
 8016eea:	a915      	add	r1, sp, #84	; 0x54
 8016eec:	ec47 6b10 	vmov	d0, r6, r7
 8016ef0:	4620      	mov	r0, r4
 8016ef2:	f001 fbfb 	bl	80186ec <__d2b>
 8016ef6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016efa:	9004      	str	r0, [sp, #16]
 8016efc:	2d00      	cmp	r5, #0
 8016efe:	d07c      	beq.n	8016ffa <_dtoa_r+0x1da>
 8016f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016f04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016f08:	46b2      	mov	sl, r6
 8016f0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016f12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016f16:	2200      	movs	r2, #0
 8016f18:	4b8b      	ldr	r3, [pc, #556]	; (8017148 <_dtoa_r+0x328>)
 8016f1a:	4650      	mov	r0, sl
 8016f1c:	4659      	mov	r1, fp
 8016f1e:	f7e9 f9cb 	bl	80002b8 <__aeabi_dsub>
 8016f22:	a381      	add	r3, pc, #516	; (adr r3, 8017128 <_dtoa_r+0x308>)
 8016f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f28:	f7e9 fb7e 	bl	8000628 <__aeabi_dmul>
 8016f2c:	a380      	add	r3, pc, #512	; (adr r3, 8017130 <_dtoa_r+0x310>)
 8016f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f32:	f7e9 f9c3 	bl	80002bc <__adddf3>
 8016f36:	4606      	mov	r6, r0
 8016f38:	4628      	mov	r0, r5
 8016f3a:	460f      	mov	r7, r1
 8016f3c:	f7e9 fb0a 	bl	8000554 <__aeabi_i2d>
 8016f40:	a37d      	add	r3, pc, #500	; (adr r3, 8017138 <_dtoa_r+0x318>)
 8016f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f46:	f7e9 fb6f 	bl	8000628 <__aeabi_dmul>
 8016f4a:	4602      	mov	r2, r0
 8016f4c:	460b      	mov	r3, r1
 8016f4e:	4630      	mov	r0, r6
 8016f50:	4639      	mov	r1, r7
 8016f52:	f7e9 f9b3 	bl	80002bc <__adddf3>
 8016f56:	4606      	mov	r6, r0
 8016f58:	460f      	mov	r7, r1
 8016f5a:	f7e9 fe15 	bl	8000b88 <__aeabi_d2iz>
 8016f5e:	2200      	movs	r2, #0
 8016f60:	4682      	mov	sl, r0
 8016f62:	2300      	movs	r3, #0
 8016f64:	4630      	mov	r0, r6
 8016f66:	4639      	mov	r1, r7
 8016f68:	f7e9 fdd0 	bl	8000b0c <__aeabi_dcmplt>
 8016f6c:	b148      	cbz	r0, 8016f82 <_dtoa_r+0x162>
 8016f6e:	4650      	mov	r0, sl
 8016f70:	f7e9 faf0 	bl	8000554 <__aeabi_i2d>
 8016f74:	4632      	mov	r2, r6
 8016f76:	463b      	mov	r3, r7
 8016f78:	f7e9 fdbe 	bl	8000af8 <__aeabi_dcmpeq>
 8016f7c:	b908      	cbnz	r0, 8016f82 <_dtoa_r+0x162>
 8016f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f82:	f1ba 0f16 	cmp.w	sl, #22
 8016f86:	d859      	bhi.n	801703c <_dtoa_r+0x21c>
 8016f88:	4970      	ldr	r1, [pc, #448]	; (801714c <_dtoa_r+0x32c>)
 8016f8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f96:	f7e9 fdd7 	bl	8000b48 <__aeabi_dcmpgt>
 8016f9a:	2800      	cmp	r0, #0
 8016f9c:	d050      	beq.n	8017040 <_dtoa_r+0x220>
 8016f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fa8:	1b5d      	subs	r5, r3, r5
 8016faa:	f1b5 0801 	subs.w	r8, r5, #1
 8016fae:	bf49      	itett	mi
 8016fb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8016fb4:	2300      	movpl	r3, #0
 8016fb6:	9305      	strmi	r3, [sp, #20]
 8016fb8:	f04f 0800 	movmi.w	r8, #0
 8016fbc:	bf58      	it	pl
 8016fbe:	9305      	strpl	r3, [sp, #20]
 8016fc0:	f1ba 0f00 	cmp.w	sl, #0
 8016fc4:	db3e      	blt.n	8017044 <_dtoa_r+0x224>
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	44d0      	add	r8, sl
 8016fca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016fce:	9307      	str	r3, [sp, #28]
 8016fd0:	9b06      	ldr	r3, [sp, #24]
 8016fd2:	2b09      	cmp	r3, #9
 8016fd4:	f200 8090 	bhi.w	80170f8 <_dtoa_r+0x2d8>
 8016fd8:	2b05      	cmp	r3, #5
 8016fda:	bfc4      	itt	gt
 8016fdc:	3b04      	subgt	r3, #4
 8016fde:	9306      	strgt	r3, [sp, #24]
 8016fe0:	9b06      	ldr	r3, [sp, #24]
 8016fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8016fe6:	bfcc      	ite	gt
 8016fe8:	2500      	movgt	r5, #0
 8016fea:	2501      	movle	r5, #1
 8016fec:	2b03      	cmp	r3, #3
 8016fee:	f200 808f 	bhi.w	8017110 <_dtoa_r+0x2f0>
 8016ff2:	e8df f003 	tbb	[pc, r3]
 8016ff6:	7f7d      	.short	0x7f7d
 8016ff8:	7131      	.short	0x7131
 8016ffa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016ffe:	441d      	add	r5, r3
 8017000:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017004:	2820      	cmp	r0, #32
 8017006:	dd13      	ble.n	8017030 <_dtoa_r+0x210>
 8017008:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801700c:	9b00      	ldr	r3, [sp, #0]
 801700e:	fa08 f800 	lsl.w	r8, r8, r0
 8017012:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017016:	fa23 f000 	lsr.w	r0, r3, r0
 801701a:	ea48 0000 	orr.w	r0, r8, r0
 801701e:	f7e9 fa89 	bl	8000534 <__aeabi_ui2d>
 8017022:	2301      	movs	r3, #1
 8017024:	4682      	mov	sl, r0
 8017026:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801702a:	3d01      	subs	r5, #1
 801702c:	9313      	str	r3, [sp, #76]	; 0x4c
 801702e:	e772      	b.n	8016f16 <_dtoa_r+0xf6>
 8017030:	9b00      	ldr	r3, [sp, #0]
 8017032:	f1c0 0020 	rsb	r0, r0, #32
 8017036:	fa03 f000 	lsl.w	r0, r3, r0
 801703a:	e7f0      	b.n	801701e <_dtoa_r+0x1fe>
 801703c:	2301      	movs	r3, #1
 801703e:	e7b1      	b.n	8016fa4 <_dtoa_r+0x184>
 8017040:	900f      	str	r0, [sp, #60]	; 0x3c
 8017042:	e7b0      	b.n	8016fa6 <_dtoa_r+0x186>
 8017044:	9b05      	ldr	r3, [sp, #20]
 8017046:	eba3 030a 	sub.w	r3, r3, sl
 801704a:	9305      	str	r3, [sp, #20]
 801704c:	f1ca 0300 	rsb	r3, sl, #0
 8017050:	9307      	str	r3, [sp, #28]
 8017052:	2300      	movs	r3, #0
 8017054:	930e      	str	r3, [sp, #56]	; 0x38
 8017056:	e7bb      	b.n	8016fd0 <_dtoa_r+0x1b0>
 8017058:	2301      	movs	r3, #1
 801705a:	930a      	str	r3, [sp, #40]	; 0x28
 801705c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801705e:	2b00      	cmp	r3, #0
 8017060:	dd59      	ble.n	8017116 <_dtoa_r+0x2f6>
 8017062:	9302      	str	r3, [sp, #8]
 8017064:	4699      	mov	r9, r3
 8017066:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017068:	2200      	movs	r2, #0
 801706a:	6072      	str	r2, [r6, #4]
 801706c:	2204      	movs	r2, #4
 801706e:	f102 0014 	add.w	r0, r2, #20
 8017072:	4298      	cmp	r0, r3
 8017074:	6871      	ldr	r1, [r6, #4]
 8017076:	d953      	bls.n	8017120 <_dtoa_r+0x300>
 8017078:	4620      	mov	r0, r4
 801707a:	f000 fff6 	bl	801806a <_Balloc>
 801707e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017080:	6030      	str	r0, [r6, #0]
 8017082:	f1b9 0f0e 	cmp.w	r9, #14
 8017086:	f8d3 b000 	ldr.w	fp, [r3]
 801708a:	f200 80e6 	bhi.w	801725a <_dtoa_r+0x43a>
 801708e:	2d00      	cmp	r5, #0
 8017090:	f000 80e3 	beq.w	801725a <_dtoa_r+0x43a>
 8017094:	ed9d 7b00 	vldr	d7, [sp]
 8017098:	f1ba 0f00 	cmp.w	sl, #0
 801709c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80170a0:	dd74      	ble.n	801718c <_dtoa_r+0x36c>
 80170a2:	4a2a      	ldr	r2, [pc, #168]	; (801714c <_dtoa_r+0x32c>)
 80170a4:	f00a 030f 	and.w	r3, sl, #15
 80170a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80170ac:	ed93 7b00 	vldr	d7, [r3]
 80170b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80170b4:	06f0      	lsls	r0, r6, #27
 80170b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80170ba:	d565      	bpl.n	8017188 <_dtoa_r+0x368>
 80170bc:	4b24      	ldr	r3, [pc, #144]	; (8017150 <_dtoa_r+0x330>)
 80170be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80170c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80170c6:	f7e9 fbd9 	bl	800087c <__aeabi_ddiv>
 80170ca:	e9cd 0100 	strd	r0, r1, [sp]
 80170ce:	f006 060f 	and.w	r6, r6, #15
 80170d2:	2503      	movs	r5, #3
 80170d4:	4f1e      	ldr	r7, [pc, #120]	; (8017150 <_dtoa_r+0x330>)
 80170d6:	e04c      	b.n	8017172 <_dtoa_r+0x352>
 80170d8:	2301      	movs	r3, #1
 80170da:	930a      	str	r3, [sp, #40]	; 0x28
 80170dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170de:	4453      	add	r3, sl
 80170e0:	f103 0901 	add.w	r9, r3, #1
 80170e4:	9302      	str	r3, [sp, #8]
 80170e6:	464b      	mov	r3, r9
 80170e8:	2b01      	cmp	r3, #1
 80170ea:	bfb8      	it	lt
 80170ec:	2301      	movlt	r3, #1
 80170ee:	e7ba      	b.n	8017066 <_dtoa_r+0x246>
 80170f0:	2300      	movs	r3, #0
 80170f2:	e7b2      	b.n	801705a <_dtoa_r+0x23a>
 80170f4:	2300      	movs	r3, #0
 80170f6:	e7f0      	b.n	80170da <_dtoa_r+0x2ba>
 80170f8:	2501      	movs	r5, #1
 80170fa:	2300      	movs	r3, #0
 80170fc:	9306      	str	r3, [sp, #24]
 80170fe:	950a      	str	r5, [sp, #40]	; 0x28
 8017100:	f04f 33ff 	mov.w	r3, #4294967295
 8017104:	9302      	str	r3, [sp, #8]
 8017106:	4699      	mov	r9, r3
 8017108:	2200      	movs	r2, #0
 801710a:	2312      	movs	r3, #18
 801710c:	920b      	str	r2, [sp, #44]	; 0x2c
 801710e:	e7aa      	b.n	8017066 <_dtoa_r+0x246>
 8017110:	2301      	movs	r3, #1
 8017112:	930a      	str	r3, [sp, #40]	; 0x28
 8017114:	e7f4      	b.n	8017100 <_dtoa_r+0x2e0>
 8017116:	2301      	movs	r3, #1
 8017118:	9302      	str	r3, [sp, #8]
 801711a:	4699      	mov	r9, r3
 801711c:	461a      	mov	r2, r3
 801711e:	e7f5      	b.n	801710c <_dtoa_r+0x2ec>
 8017120:	3101      	adds	r1, #1
 8017122:	6071      	str	r1, [r6, #4]
 8017124:	0052      	lsls	r2, r2, #1
 8017126:	e7a2      	b.n	801706e <_dtoa_r+0x24e>
 8017128:	636f4361 	.word	0x636f4361
 801712c:	3fd287a7 	.word	0x3fd287a7
 8017130:	8b60c8b3 	.word	0x8b60c8b3
 8017134:	3fc68a28 	.word	0x3fc68a28
 8017138:	509f79fb 	.word	0x509f79fb
 801713c:	3fd34413 	.word	0x3fd34413
 8017140:	7ff00000 	.word	0x7ff00000
 8017144:	08019e0c 	.word	0x08019e0c
 8017148:	3ff80000 	.word	0x3ff80000
 801714c:	08019d10 	.word	0x08019d10
 8017150:	08019ce8 	.word	0x08019ce8
 8017154:	08019cd9 	.word	0x08019cd9
 8017158:	07f1      	lsls	r1, r6, #31
 801715a:	d508      	bpl.n	801716e <_dtoa_r+0x34e>
 801715c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017164:	f7e9 fa60 	bl	8000628 <__aeabi_dmul>
 8017168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801716c:	3501      	adds	r5, #1
 801716e:	1076      	asrs	r6, r6, #1
 8017170:	3708      	adds	r7, #8
 8017172:	2e00      	cmp	r6, #0
 8017174:	d1f0      	bne.n	8017158 <_dtoa_r+0x338>
 8017176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801717a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801717e:	f7e9 fb7d 	bl	800087c <__aeabi_ddiv>
 8017182:	e9cd 0100 	strd	r0, r1, [sp]
 8017186:	e01a      	b.n	80171be <_dtoa_r+0x39e>
 8017188:	2502      	movs	r5, #2
 801718a:	e7a3      	b.n	80170d4 <_dtoa_r+0x2b4>
 801718c:	f000 80a0 	beq.w	80172d0 <_dtoa_r+0x4b0>
 8017190:	f1ca 0600 	rsb	r6, sl, #0
 8017194:	4b9f      	ldr	r3, [pc, #636]	; (8017414 <_dtoa_r+0x5f4>)
 8017196:	4fa0      	ldr	r7, [pc, #640]	; (8017418 <_dtoa_r+0x5f8>)
 8017198:	f006 020f 	and.w	r2, r6, #15
 801719c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80171a8:	f7e9 fa3e 	bl	8000628 <__aeabi_dmul>
 80171ac:	e9cd 0100 	strd	r0, r1, [sp]
 80171b0:	1136      	asrs	r6, r6, #4
 80171b2:	2300      	movs	r3, #0
 80171b4:	2502      	movs	r5, #2
 80171b6:	2e00      	cmp	r6, #0
 80171b8:	d17f      	bne.n	80172ba <_dtoa_r+0x49a>
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1e1      	bne.n	8017182 <_dtoa_r+0x362>
 80171be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	f000 8087 	beq.w	80172d4 <_dtoa_r+0x4b4>
 80171c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80171ca:	2200      	movs	r2, #0
 80171cc:	4b93      	ldr	r3, [pc, #588]	; (801741c <_dtoa_r+0x5fc>)
 80171ce:	4630      	mov	r0, r6
 80171d0:	4639      	mov	r1, r7
 80171d2:	f7e9 fc9b 	bl	8000b0c <__aeabi_dcmplt>
 80171d6:	2800      	cmp	r0, #0
 80171d8:	d07c      	beq.n	80172d4 <_dtoa_r+0x4b4>
 80171da:	f1b9 0f00 	cmp.w	r9, #0
 80171de:	d079      	beq.n	80172d4 <_dtoa_r+0x4b4>
 80171e0:	9b02      	ldr	r3, [sp, #8]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	dd35      	ble.n	8017252 <_dtoa_r+0x432>
 80171e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80171ea:	9308      	str	r3, [sp, #32]
 80171ec:	4639      	mov	r1, r7
 80171ee:	2200      	movs	r2, #0
 80171f0:	4b8b      	ldr	r3, [pc, #556]	; (8017420 <_dtoa_r+0x600>)
 80171f2:	4630      	mov	r0, r6
 80171f4:	f7e9 fa18 	bl	8000628 <__aeabi_dmul>
 80171f8:	e9cd 0100 	strd	r0, r1, [sp]
 80171fc:	9f02      	ldr	r7, [sp, #8]
 80171fe:	3501      	adds	r5, #1
 8017200:	4628      	mov	r0, r5
 8017202:	f7e9 f9a7 	bl	8000554 <__aeabi_i2d>
 8017206:	e9dd 2300 	ldrd	r2, r3, [sp]
 801720a:	f7e9 fa0d 	bl	8000628 <__aeabi_dmul>
 801720e:	2200      	movs	r2, #0
 8017210:	4b84      	ldr	r3, [pc, #528]	; (8017424 <_dtoa_r+0x604>)
 8017212:	f7e9 f853 	bl	80002bc <__adddf3>
 8017216:	4605      	mov	r5, r0
 8017218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801721c:	2f00      	cmp	r7, #0
 801721e:	d15d      	bne.n	80172dc <_dtoa_r+0x4bc>
 8017220:	2200      	movs	r2, #0
 8017222:	4b81      	ldr	r3, [pc, #516]	; (8017428 <_dtoa_r+0x608>)
 8017224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017228:	f7e9 f846 	bl	80002b8 <__aeabi_dsub>
 801722c:	462a      	mov	r2, r5
 801722e:	4633      	mov	r3, r6
 8017230:	e9cd 0100 	strd	r0, r1, [sp]
 8017234:	f7e9 fc88 	bl	8000b48 <__aeabi_dcmpgt>
 8017238:	2800      	cmp	r0, #0
 801723a:	f040 8288 	bne.w	801774e <_dtoa_r+0x92e>
 801723e:	462a      	mov	r2, r5
 8017240:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017248:	f7e9 fc60 	bl	8000b0c <__aeabi_dcmplt>
 801724c:	2800      	cmp	r0, #0
 801724e:	f040 827c 	bne.w	801774a <_dtoa_r+0x92a>
 8017252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017256:	e9cd 2300 	strd	r2, r3, [sp]
 801725a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801725c:	2b00      	cmp	r3, #0
 801725e:	f2c0 8150 	blt.w	8017502 <_dtoa_r+0x6e2>
 8017262:	f1ba 0f0e 	cmp.w	sl, #14
 8017266:	f300 814c 	bgt.w	8017502 <_dtoa_r+0x6e2>
 801726a:	4b6a      	ldr	r3, [pc, #424]	; (8017414 <_dtoa_r+0x5f4>)
 801726c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017270:	ed93 7b00 	vldr	d7, [r3]
 8017274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017276:	2b00      	cmp	r3, #0
 8017278:	ed8d 7b02 	vstr	d7, [sp, #8]
 801727c:	f280 80d8 	bge.w	8017430 <_dtoa_r+0x610>
 8017280:	f1b9 0f00 	cmp.w	r9, #0
 8017284:	f300 80d4 	bgt.w	8017430 <_dtoa_r+0x610>
 8017288:	f040 825e 	bne.w	8017748 <_dtoa_r+0x928>
 801728c:	2200      	movs	r2, #0
 801728e:	4b66      	ldr	r3, [pc, #408]	; (8017428 <_dtoa_r+0x608>)
 8017290:	ec51 0b17 	vmov	r0, r1, d7
 8017294:	f7e9 f9c8 	bl	8000628 <__aeabi_dmul>
 8017298:	e9dd 2300 	ldrd	r2, r3, [sp]
 801729c:	f7e9 fc4a 	bl	8000b34 <__aeabi_dcmpge>
 80172a0:	464f      	mov	r7, r9
 80172a2:	464e      	mov	r6, r9
 80172a4:	2800      	cmp	r0, #0
 80172a6:	f040 8234 	bne.w	8017712 <_dtoa_r+0x8f2>
 80172aa:	2331      	movs	r3, #49	; 0x31
 80172ac:	f10b 0501 	add.w	r5, fp, #1
 80172b0:	f88b 3000 	strb.w	r3, [fp]
 80172b4:	f10a 0a01 	add.w	sl, sl, #1
 80172b8:	e22f      	b.n	801771a <_dtoa_r+0x8fa>
 80172ba:	07f2      	lsls	r2, r6, #31
 80172bc:	d505      	bpl.n	80172ca <_dtoa_r+0x4aa>
 80172be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172c2:	f7e9 f9b1 	bl	8000628 <__aeabi_dmul>
 80172c6:	3501      	adds	r5, #1
 80172c8:	2301      	movs	r3, #1
 80172ca:	1076      	asrs	r6, r6, #1
 80172cc:	3708      	adds	r7, #8
 80172ce:	e772      	b.n	80171b6 <_dtoa_r+0x396>
 80172d0:	2502      	movs	r5, #2
 80172d2:	e774      	b.n	80171be <_dtoa_r+0x39e>
 80172d4:	f8cd a020 	str.w	sl, [sp, #32]
 80172d8:	464f      	mov	r7, r9
 80172da:	e791      	b.n	8017200 <_dtoa_r+0x3e0>
 80172dc:	4b4d      	ldr	r3, [pc, #308]	; (8017414 <_dtoa_r+0x5f4>)
 80172de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80172e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80172e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d047      	beq.n	801737c <_dtoa_r+0x55c>
 80172ec:	4602      	mov	r2, r0
 80172ee:	460b      	mov	r3, r1
 80172f0:	2000      	movs	r0, #0
 80172f2:	494e      	ldr	r1, [pc, #312]	; (801742c <_dtoa_r+0x60c>)
 80172f4:	f7e9 fac2 	bl	800087c <__aeabi_ddiv>
 80172f8:	462a      	mov	r2, r5
 80172fa:	4633      	mov	r3, r6
 80172fc:	f7e8 ffdc 	bl	80002b8 <__aeabi_dsub>
 8017300:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017304:	465d      	mov	r5, fp
 8017306:	e9dd 0100 	ldrd	r0, r1, [sp]
 801730a:	f7e9 fc3d 	bl	8000b88 <__aeabi_d2iz>
 801730e:	4606      	mov	r6, r0
 8017310:	f7e9 f920 	bl	8000554 <__aeabi_i2d>
 8017314:	4602      	mov	r2, r0
 8017316:	460b      	mov	r3, r1
 8017318:	e9dd 0100 	ldrd	r0, r1, [sp]
 801731c:	f7e8 ffcc 	bl	80002b8 <__aeabi_dsub>
 8017320:	3630      	adds	r6, #48	; 0x30
 8017322:	f805 6b01 	strb.w	r6, [r5], #1
 8017326:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801732a:	e9cd 0100 	strd	r0, r1, [sp]
 801732e:	f7e9 fbed 	bl	8000b0c <__aeabi_dcmplt>
 8017332:	2800      	cmp	r0, #0
 8017334:	d163      	bne.n	80173fe <_dtoa_r+0x5de>
 8017336:	e9dd 2300 	ldrd	r2, r3, [sp]
 801733a:	2000      	movs	r0, #0
 801733c:	4937      	ldr	r1, [pc, #220]	; (801741c <_dtoa_r+0x5fc>)
 801733e:	f7e8 ffbb 	bl	80002b8 <__aeabi_dsub>
 8017342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017346:	f7e9 fbe1 	bl	8000b0c <__aeabi_dcmplt>
 801734a:	2800      	cmp	r0, #0
 801734c:	f040 80b7 	bne.w	80174be <_dtoa_r+0x69e>
 8017350:	eba5 030b 	sub.w	r3, r5, fp
 8017354:	429f      	cmp	r7, r3
 8017356:	f77f af7c 	ble.w	8017252 <_dtoa_r+0x432>
 801735a:	2200      	movs	r2, #0
 801735c:	4b30      	ldr	r3, [pc, #192]	; (8017420 <_dtoa_r+0x600>)
 801735e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017362:	f7e9 f961 	bl	8000628 <__aeabi_dmul>
 8017366:	2200      	movs	r2, #0
 8017368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801736c:	4b2c      	ldr	r3, [pc, #176]	; (8017420 <_dtoa_r+0x600>)
 801736e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017372:	f7e9 f959 	bl	8000628 <__aeabi_dmul>
 8017376:	e9cd 0100 	strd	r0, r1, [sp]
 801737a:	e7c4      	b.n	8017306 <_dtoa_r+0x4e6>
 801737c:	462a      	mov	r2, r5
 801737e:	4633      	mov	r3, r6
 8017380:	f7e9 f952 	bl	8000628 <__aeabi_dmul>
 8017384:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017388:	eb0b 0507 	add.w	r5, fp, r7
 801738c:	465e      	mov	r6, fp
 801738e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017392:	f7e9 fbf9 	bl	8000b88 <__aeabi_d2iz>
 8017396:	4607      	mov	r7, r0
 8017398:	f7e9 f8dc 	bl	8000554 <__aeabi_i2d>
 801739c:	3730      	adds	r7, #48	; 0x30
 801739e:	4602      	mov	r2, r0
 80173a0:	460b      	mov	r3, r1
 80173a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173a6:	f7e8 ff87 	bl	80002b8 <__aeabi_dsub>
 80173aa:	f806 7b01 	strb.w	r7, [r6], #1
 80173ae:	42ae      	cmp	r6, r5
 80173b0:	e9cd 0100 	strd	r0, r1, [sp]
 80173b4:	f04f 0200 	mov.w	r2, #0
 80173b8:	d126      	bne.n	8017408 <_dtoa_r+0x5e8>
 80173ba:	4b1c      	ldr	r3, [pc, #112]	; (801742c <_dtoa_r+0x60c>)
 80173bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80173c0:	f7e8 ff7c 	bl	80002bc <__adddf3>
 80173c4:	4602      	mov	r2, r0
 80173c6:	460b      	mov	r3, r1
 80173c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173cc:	f7e9 fbbc 	bl	8000b48 <__aeabi_dcmpgt>
 80173d0:	2800      	cmp	r0, #0
 80173d2:	d174      	bne.n	80174be <_dtoa_r+0x69e>
 80173d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80173d8:	2000      	movs	r0, #0
 80173da:	4914      	ldr	r1, [pc, #80]	; (801742c <_dtoa_r+0x60c>)
 80173dc:	f7e8 ff6c 	bl	80002b8 <__aeabi_dsub>
 80173e0:	4602      	mov	r2, r0
 80173e2:	460b      	mov	r3, r1
 80173e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173e8:	f7e9 fb90 	bl	8000b0c <__aeabi_dcmplt>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	f43f af30 	beq.w	8017252 <_dtoa_r+0x432>
 80173f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80173f6:	2b30      	cmp	r3, #48	; 0x30
 80173f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80173fc:	d002      	beq.n	8017404 <_dtoa_r+0x5e4>
 80173fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017402:	e04a      	b.n	801749a <_dtoa_r+0x67a>
 8017404:	4615      	mov	r5, r2
 8017406:	e7f4      	b.n	80173f2 <_dtoa_r+0x5d2>
 8017408:	4b05      	ldr	r3, [pc, #20]	; (8017420 <_dtoa_r+0x600>)
 801740a:	f7e9 f90d 	bl	8000628 <__aeabi_dmul>
 801740e:	e9cd 0100 	strd	r0, r1, [sp]
 8017412:	e7bc      	b.n	801738e <_dtoa_r+0x56e>
 8017414:	08019d10 	.word	0x08019d10
 8017418:	08019ce8 	.word	0x08019ce8
 801741c:	3ff00000 	.word	0x3ff00000
 8017420:	40240000 	.word	0x40240000
 8017424:	401c0000 	.word	0x401c0000
 8017428:	40140000 	.word	0x40140000
 801742c:	3fe00000 	.word	0x3fe00000
 8017430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017434:	465d      	mov	r5, fp
 8017436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801743a:	4630      	mov	r0, r6
 801743c:	4639      	mov	r1, r7
 801743e:	f7e9 fa1d 	bl	800087c <__aeabi_ddiv>
 8017442:	f7e9 fba1 	bl	8000b88 <__aeabi_d2iz>
 8017446:	4680      	mov	r8, r0
 8017448:	f7e9 f884 	bl	8000554 <__aeabi_i2d>
 801744c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017450:	f7e9 f8ea 	bl	8000628 <__aeabi_dmul>
 8017454:	4602      	mov	r2, r0
 8017456:	460b      	mov	r3, r1
 8017458:	4630      	mov	r0, r6
 801745a:	4639      	mov	r1, r7
 801745c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017460:	f7e8 ff2a 	bl	80002b8 <__aeabi_dsub>
 8017464:	f805 6b01 	strb.w	r6, [r5], #1
 8017468:	eba5 060b 	sub.w	r6, r5, fp
 801746c:	45b1      	cmp	r9, r6
 801746e:	4602      	mov	r2, r0
 8017470:	460b      	mov	r3, r1
 8017472:	d139      	bne.n	80174e8 <_dtoa_r+0x6c8>
 8017474:	f7e8 ff22 	bl	80002bc <__adddf3>
 8017478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801747c:	4606      	mov	r6, r0
 801747e:	460f      	mov	r7, r1
 8017480:	f7e9 fb62 	bl	8000b48 <__aeabi_dcmpgt>
 8017484:	b9c8      	cbnz	r0, 80174ba <_dtoa_r+0x69a>
 8017486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801748a:	4630      	mov	r0, r6
 801748c:	4639      	mov	r1, r7
 801748e:	f7e9 fb33 	bl	8000af8 <__aeabi_dcmpeq>
 8017492:	b110      	cbz	r0, 801749a <_dtoa_r+0x67a>
 8017494:	f018 0f01 	tst.w	r8, #1
 8017498:	d10f      	bne.n	80174ba <_dtoa_r+0x69a>
 801749a:	9904      	ldr	r1, [sp, #16]
 801749c:	4620      	mov	r0, r4
 801749e:	f000 fe18 	bl	80180d2 <_Bfree>
 80174a2:	2300      	movs	r3, #0
 80174a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174a6:	702b      	strb	r3, [r5, #0]
 80174a8:	f10a 0301 	add.w	r3, sl, #1
 80174ac:	6013      	str	r3, [r2, #0]
 80174ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	f000 8241 	beq.w	8017938 <_dtoa_r+0xb18>
 80174b6:	601d      	str	r5, [r3, #0]
 80174b8:	e23e      	b.n	8017938 <_dtoa_r+0xb18>
 80174ba:	f8cd a020 	str.w	sl, [sp, #32]
 80174be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80174c2:	2a39      	cmp	r2, #57	; 0x39
 80174c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80174c8:	d108      	bne.n	80174dc <_dtoa_r+0x6bc>
 80174ca:	459b      	cmp	fp, r3
 80174cc:	d10a      	bne.n	80174e4 <_dtoa_r+0x6c4>
 80174ce:	9b08      	ldr	r3, [sp, #32]
 80174d0:	3301      	adds	r3, #1
 80174d2:	9308      	str	r3, [sp, #32]
 80174d4:	2330      	movs	r3, #48	; 0x30
 80174d6:	f88b 3000 	strb.w	r3, [fp]
 80174da:	465b      	mov	r3, fp
 80174dc:	781a      	ldrb	r2, [r3, #0]
 80174de:	3201      	adds	r2, #1
 80174e0:	701a      	strb	r2, [r3, #0]
 80174e2:	e78c      	b.n	80173fe <_dtoa_r+0x5de>
 80174e4:	461d      	mov	r5, r3
 80174e6:	e7ea      	b.n	80174be <_dtoa_r+0x69e>
 80174e8:	2200      	movs	r2, #0
 80174ea:	4b9b      	ldr	r3, [pc, #620]	; (8017758 <_dtoa_r+0x938>)
 80174ec:	f7e9 f89c 	bl	8000628 <__aeabi_dmul>
 80174f0:	2200      	movs	r2, #0
 80174f2:	2300      	movs	r3, #0
 80174f4:	4606      	mov	r6, r0
 80174f6:	460f      	mov	r7, r1
 80174f8:	f7e9 fafe 	bl	8000af8 <__aeabi_dcmpeq>
 80174fc:	2800      	cmp	r0, #0
 80174fe:	d09a      	beq.n	8017436 <_dtoa_r+0x616>
 8017500:	e7cb      	b.n	801749a <_dtoa_r+0x67a>
 8017502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017504:	2a00      	cmp	r2, #0
 8017506:	f000 808b 	beq.w	8017620 <_dtoa_r+0x800>
 801750a:	9a06      	ldr	r2, [sp, #24]
 801750c:	2a01      	cmp	r2, #1
 801750e:	dc6e      	bgt.n	80175ee <_dtoa_r+0x7ce>
 8017510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017512:	2a00      	cmp	r2, #0
 8017514:	d067      	beq.n	80175e6 <_dtoa_r+0x7c6>
 8017516:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801751a:	9f07      	ldr	r7, [sp, #28]
 801751c:	9d05      	ldr	r5, [sp, #20]
 801751e:	9a05      	ldr	r2, [sp, #20]
 8017520:	2101      	movs	r1, #1
 8017522:	441a      	add	r2, r3
 8017524:	4620      	mov	r0, r4
 8017526:	9205      	str	r2, [sp, #20]
 8017528:	4498      	add	r8, r3
 801752a:	f000 feb0 	bl	801828e <__i2b>
 801752e:	4606      	mov	r6, r0
 8017530:	2d00      	cmp	r5, #0
 8017532:	dd0c      	ble.n	801754e <_dtoa_r+0x72e>
 8017534:	f1b8 0f00 	cmp.w	r8, #0
 8017538:	dd09      	ble.n	801754e <_dtoa_r+0x72e>
 801753a:	4545      	cmp	r5, r8
 801753c:	9a05      	ldr	r2, [sp, #20]
 801753e:	462b      	mov	r3, r5
 8017540:	bfa8      	it	ge
 8017542:	4643      	movge	r3, r8
 8017544:	1ad2      	subs	r2, r2, r3
 8017546:	9205      	str	r2, [sp, #20]
 8017548:	1aed      	subs	r5, r5, r3
 801754a:	eba8 0803 	sub.w	r8, r8, r3
 801754e:	9b07      	ldr	r3, [sp, #28]
 8017550:	b1eb      	cbz	r3, 801758e <_dtoa_r+0x76e>
 8017552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017554:	2b00      	cmp	r3, #0
 8017556:	d067      	beq.n	8017628 <_dtoa_r+0x808>
 8017558:	b18f      	cbz	r7, 801757e <_dtoa_r+0x75e>
 801755a:	4631      	mov	r1, r6
 801755c:	463a      	mov	r2, r7
 801755e:	4620      	mov	r0, r4
 8017560:	f000 ff34 	bl	80183cc <__pow5mult>
 8017564:	9a04      	ldr	r2, [sp, #16]
 8017566:	4601      	mov	r1, r0
 8017568:	4606      	mov	r6, r0
 801756a:	4620      	mov	r0, r4
 801756c:	f000 fe98 	bl	80182a0 <__multiply>
 8017570:	9904      	ldr	r1, [sp, #16]
 8017572:	9008      	str	r0, [sp, #32]
 8017574:	4620      	mov	r0, r4
 8017576:	f000 fdac 	bl	80180d2 <_Bfree>
 801757a:	9b08      	ldr	r3, [sp, #32]
 801757c:	9304      	str	r3, [sp, #16]
 801757e:	9b07      	ldr	r3, [sp, #28]
 8017580:	1bda      	subs	r2, r3, r7
 8017582:	d004      	beq.n	801758e <_dtoa_r+0x76e>
 8017584:	9904      	ldr	r1, [sp, #16]
 8017586:	4620      	mov	r0, r4
 8017588:	f000 ff20 	bl	80183cc <__pow5mult>
 801758c:	9004      	str	r0, [sp, #16]
 801758e:	2101      	movs	r1, #1
 8017590:	4620      	mov	r0, r4
 8017592:	f000 fe7c 	bl	801828e <__i2b>
 8017596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017598:	4607      	mov	r7, r0
 801759a:	2b00      	cmp	r3, #0
 801759c:	f000 81d0 	beq.w	8017940 <_dtoa_r+0xb20>
 80175a0:	461a      	mov	r2, r3
 80175a2:	4601      	mov	r1, r0
 80175a4:	4620      	mov	r0, r4
 80175a6:	f000 ff11 	bl	80183cc <__pow5mult>
 80175aa:	9b06      	ldr	r3, [sp, #24]
 80175ac:	2b01      	cmp	r3, #1
 80175ae:	4607      	mov	r7, r0
 80175b0:	dc40      	bgt.n	8017634 <_dtoa_r+0x814>
 80175b2:	9b00      	ldr	r3, [sp, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d139      	bne.n	801762c <_dtoa_r+0x80c>
 80175b8:	9b01      	ldr	r3, [sp, #4]
 80175ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d136      	bne.n	8017630 <_dtoa_r+0x810>
 80175c2:	9b01      	ldr	r3, [sp, #4]
 80175c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80175c8:	0d1b      	lsrs	r3, r3, #20
 80175ca:	051b      	lsls	r3, r3, #20
 80175cc:	b12b      	cbz	r3, 80175da <_dtoa_r+0x7ba>
 80175ce:	9b05      	ldr	r3, [sp, #20]
 80175d0:	3301      	adds	r3, #1
 80175d2:	9305      	str	r3, [sp, #20]
 80175d4:	f108 0801 	add.w	r8, r8, #1
 80175d8:	2301      	movs	r3, #1
 80175da:	9307      	str	r3, [sp, #28]
 80175dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d12a      	bne.n	8017638 <_dtoa_r+0x818>
 80175e2:	2001      	movs	r0, #1
 80175e4:	e030      	b.n	8017648 <_dtoa_r+0x828>
 80175e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80175e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80175ec:	e795      	b.n	801751a <_dtoa_r+0x6fa>
 80175ee:	9b07      	ldr	r3, [sp, #28]
 80175f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80175f4:	42bb      	cmp	r3, r7
 80175f6:	bfbf      	itttt	lt
 80175f8:	9b07      	ldrlt	r3, [sp, #28]
 80175fa:	9707      	strlt	r7, [sp, #28]
 80175fc:	1afa      	sublt	r2, r7, r3
 80175fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017600:	bfbb      	ittet	lt
 8017602:	189b      	addlt	r3, r3, r2
 8017604:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017606:	1bdf      	subge	r7, r3, r7
 8017608:	2700      	movlt	r7, #0
 801760a:	f1b9 0f00 	cmp.w	r9, #0
 801760e:	bfb5      	itete	lt
 8017610:	9b05      	ldrlt	r3, [sp, #20]
 8017612:	9d05      	ldrge	r5, [sp, #20]
 8017614:	eba3 0509 	sublt.w	r5, r3, r9
 8017618:	464b      	movge	r3, r9
 801761a:	bfb8      	it	lt
 801761c:	2300      	movlt	r3, #0
 801761e:	e77e      	b.n	801751e <_dtoa_r+0x6fe>
 8017620:	9f07      	ldr	r7, [sp, #28]
 8017622:	9d05      	ldr	r5, [sp, #20]
 8017624:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017626:	e783      	b.n	8017530 <_dtoa_r+0x710>
 8017628:	9a07      	ldr	r2, [sp, #28]
 801762a:	e7ab      	b.n	8017584 <_dtoa_r+0x764>
 801762c:	2300      	movs	r3, #0
 801762e:	e7d4      	b.n	80175da <_dtoa_r+0x7ba>
 8017630:	9b00      	ldr	r3, [sp, #0]
 8017632:	e7d2      	b.n	80175da <_dtoa_r+0x7ba>
 8017634:	2300      	movs	r3, #0
 8017636:	9307      	str	r3, [sp, #28]
 8017638:	693b      	ldr	r3, [r7, #16]
 801763a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801763e:	6918      	ldr	r0, [r3, #16]
 8017640:	f000 fdd7 	bl	80181f2 <__hi0bits>
 8017644:	f1c0 0020 	rsb	r0, r0, #32
 8017648:	4440      	add	r0, r8
 801764a:	f010 001f 	ands.w	r0, r0, #31
 801764e:	d047      	beq.n	80176e0 <_dtoa_r+0x8c0>
 8017650:	f1c0 0320 	rsb	r3, r0, #32
 8017654:	2b04      	cmp	r3, #4
 8017656:	dd3b      	ble.n	80176d0 <_dtoa_r+0x8b0>
 8017658:	9b05      	ldr	r3, [sp, #20]
 801765a:	f1c0 001c 	rsb	r0, r0, #28
 801765e:	4403      	add	r3, r0
 8017660:	9305      	str	r3, [sp, #20]
 8017662:	4405      	add	r5, r0
 8017664:	4480      	add	r8, r0
 8017666:	9b05      	ldr	r3, [sp, #20]
 8017668:	2b00      	cmp	r3, #0
 801766a:	dd05      	ble.n	8017678 <_dtoa_r+0x858>
 801766c:	461a      	mov	r2, r3
 801766e:	9904      	ldr	r1, [sp, #16]
 8017670:	4620      	mov	r0, r4
 8017672:	f000 fef9 	bl	8018468 <__lshift>
 8017676:	9004      	str	r0, [sp, #16]
 8017678:	f1b8 0f00 	cmp.w	r8, #0
 801767c:	dd05      	ble.n	801768a <_dtoa_r+0x86a>
 801767e:	4639      	mov	r1, r7
 8017680:	4642      	mov	r2, r8
 8017682:	4620      	mov	r0, r4
 8017684:	f000 fef0 	bl	8018468 <__lshift>
 8017688:	4607      	mov	r7, r0
 801768a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801768c:	b353      	cbz	r3, 80176e4 <_dtoa_r+0x8c4>
 801768e:	4639      	mov	r1, r7
 8017690:	9804      	ldr	r0, [sp, #16]
 8017692:	f000 ff3d 	bl	8018510 <__mcmp>
 8017696:	2800      	cmp	r0, #0
 8017698:	da24      	bge.n	80176e4 <_dtoa_r+0x8c4>
 801769a:	2300      	movs	r3, #0
 801769c:	220a      	movs	r2, #10
 801769e:	9904      	ldr	r1, [sp, #16]
 80176a0:	4620      	mov	r0, r4
 80176a2:	f000 fd2d 	bl	8018100 <__multadd>
 80176a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176a8:	9004      	str	r0, [sp, #16]
 80176aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	f000 814d 	beq.w	801794e <_dtoa_r+0xb2e>
 80176b4:	2300      	movs	r3, #0
 80176b6:	4631      	mov	r1, r6
 80176b8:	220a      	movs	r2, #10
 80176ba:	4620      	mov	r0, r4
 80176bc:	f000 fd20 	bl	8018100 <__multadd>
 80176c0:	9b02      	ldr	r3, [sp, #8]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	4606      	mov	r6, r0
 80176c6:	dc4f      	bgt.n	8017768 <_dtoa_r+0x948>
 80176c8:	9b06      	ldr	r3, [sp, #24]
 80176ca:	2b02      	cmp	r3, #2
 80176cc:	dd4c      	ble.n	8017768 <_dtoa_r+0x948>
 80176ce:	e011      	b.n	80176f4 <_dtoa_r+0x8d4>
 80176d0:	d0c9      	beq.n	8017666 <_dtoa_r+0x846>
 80176d2:	9a05      	ldr	r2, [sp, #20]
 80176d4:	331c      	adds	r3, #28
 80176d6:	441a      	add	r2, r3
 80176d8:	9205      	str	r2, [sp, #20]
 80176da:	441d      	add	r5, r3
 80176dc:	4498      	add	r8, r3
 80176de:	e7c2      	b.n	8017666 <_dtoa_r+0x846>
 80176e0:	4603      	mov	r3, r0
 80176e2:	e7f6      	b.n	80176d2 <_dtoa_r+0x8b2>
 80176e4:	f1b9 0f00 	cmp.w	r9, #0
 80176e8:	dc38      	bgt.n	801775c <_dtoa_r+0x93c>
 80176ea:	9b06      	ldr	r3, [sp, #24]
 80176ec:	2b02      	cmp	r3, #2
 80176ee:	dd35      	ble.n	801775c <_dtoa_r+0x93c>
 80176f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80176f4:	9b02      	ldr	r3, [sp, #8]
 80176f6:	b963      	cbnz	r3, 8017712 <_dtoa_r+0x8f2>
 80176f8:	4639      	mov	r1, r7
 80176fa:	2205      	movs	r2, #5
 80176fc:	4620      	mov	r0, r4
 80176fe:	f000 fcff 	bl	8018100 <__multadd>
 8017702:	4601      	mov	r1, r0
 8017704:	4607      	mov	r7, r0
 8017706:	9804      	ldr	r0, [sp, #16]
 8017708:	f000 ff02 	bl	8018510 <__mcmp>
 801770c:	2800      	cmp	r0, #0
 801770e:	f73f adcc 	bgt.w	80172aa <_dtoa_r+0x48a>
 8017712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017714:	465d      	mov	r5, fp
 8017716:	ea6f 0a03 	mvn.w	sl, r3
 801771a:	f04f 0900 	mov.w	r9, #0
 801771e:	4639      	mov	r1, r7
 8017720:	4620      	mov	r0, r4
 8017722:	f000 fcd6 	bl	80180d2 <_Bfree>
 8017726:	2e00      	cmp	r6, #0
 8017728:	f43f aeb7 	beq.w	801749a <_dtoa_r+0x67a>
 801772c:	f1b9 0f00 	cmp.w	r9, #0
 8017730:	d005      	beq.n	801773e <_dtoa_r+0x91e>
 8017732:	45b1      	cmp	r9, r6
 8017734:	d003      	beq.n	801773e <_dtoa_r+0x91e>
 8017736:	4649      	mov	r1, r9
 8017738:	4620      	mov	r0, r4
 801773a:	f000 fcca 	bl	80180d2 <_Bfree>
 801773e:	4631      	mov	r1, r6
 8017740:	4620      	mov	r0, r4
 8017742:	f000 fcc6 	bl	80180d2 <_Bfree>
 8017746:	e6a8      	b.n	801749a <_dtoa_r+0x67a>
 8017748:	2700      	movs	r7, #0
 801774a:	463e      	mov	r6, r7
 801774c:	e7e1      	b.n	8017712 <_dtoa_r+0x8f2>
 801774e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017752:	463e      	mov	r6, r7
 8017754:	e5a9      	b.n	80172aa <_dtoa_r+0x48a>
 8017756:	bf00      	nop
 8017758:	40240000 	.word	0x40240000
 801775c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801775e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017762:	2b00      	cmp	r3, #0
 8017764:	f000 80fa 	beq.w	801795c <_dtoa_r+0xb3c>
 8017768:	2d00      	cmp	r5, #0
 801776a:	dd05      	ble.n	8017778 <_dtoa_r+0x958>
 801776c:	4631      	mov	r1, r6
 801776e:	462a      	mov	r2, r5
 8017770:	4620      	mov	r0, r4
 8017772:	f000 fe79 	bl	8018468 <__lshift>
 8017776:	4606      	mov	r6, r0
 8017778:	9b07      	ldr	r3, [sp, #28]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d04c      	beq.n	8017818 <_dtoa_r+0x9f8>
 801777e:	6871      	ldr	r1, [r6, #4]
 8017780:	4620      	mov	r0, r4
 8017782:	f000 fc72 	bl	801806a <_Balloc>
 8017786:	6932      	ldr	r2, [r6, #16]
 8017788:	3202      	adds	r2, #2
 801778a:	4605      	mov	r5, r0
 801778c:	0092      	lsls	r2, r2, #2
 801778e:	f106 010c 	add.w	r1, r6, #12
 8017792:	300c      	adds	r0, #12
 8017794:	f000 fc5e 	bl	8018054 <memcpy>
 8017798:	2201      	movs	r2, #1
 801779a:	4629      	mov	r1, r5
 801779c:	4620      	mov	r0, r4
 801779e:	f000 fe63 	bl	8018468 <__lshift>
 80177a2:	9b00      	ldr	r3, [sp, #0]
 80177a4:	f8cd b014 	str.w	fp, [sp, #20]
 80177a8:	f003 0301 	and.w	r3, r3, #1
 80177ac:	46b1      	mov	r9, r6
 80177ae:	9307      	str	r3, [sp, #28]
 80177b0:	4606      	mov	r6, r0
 80177b2:	4639      	mov	r1, r7
 80177b4:	9804      	ldr	r0, [sp, #16]
 80177b6:	f7ff faa5 	bl	8016d04 <quorem>
 80177ba:	4649      	mov	r1, r9
 80177bc:	4605      	mov	r5, r0
 80177be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80177c2:	9804      	ldr	r0, [sp, #16]
 80177c4:	f000 fea4 	bl	8018510 <__mcmp>
 80177c8:	4632      	mov	r2, r6
 80177ca:	9000      	str	r0, [sp, #0]
 80177cc:	4639      	mov	r1, r7
 80177ce:	4620      	mov	r0, r4
 80177d0:	f000 feb8 	bl	8018544 <__mdiff>
 80177d4:	68c3      	ldr	r3, [r0, #12]
 80177d6:	4602      	mov	r2, r0
 80177d8:	bb03      	cbnz	r3, 801781c <_dtoa_r+0x9fc>
 80177da:	4601      	mov	r1, r0
 80177dc:	9008      	str	r0, [sp, #32]
 80177de:	9804      	ldr	r0, [sp, #16]
 80177e0:	f000 fe96 	bl	8018510 <__mcmp>
 80177e4:	9a08      	ldr	r2, [sp, #32]
 80177e6:	4603      	mov	r3, r0
 80177e8:	4611      	mov	r1, r2
 80177ea:	4620      	mov	r0, r4
 80177ec:	9308      	str	r3, [sp, #32]
 80177ee:	f000 fc70 	bl	80180d2 <_Bfree>
 80177f2:	9b08      	ldr	r3, [sp, #32]
 80177f4:	b9a3      	cbnz	r3, 8017820 <_dtoa_r+0xa00>
 80177f6:	9a06      	ldr	r2, [sp, #24]
 80177f8:	b992      	cbnz	r2, 8017820 <_dtoa_r+0xa00>
 80177fa:	9a07      	ldr	r2, [sp, #28]
 80177fc:	b982      	cbnz	r2, 8017820 <_dtoa_r+0xa00>
 80177fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017802:	d029      	beq.n	8017858 <_dtoa_r+0xa38>
 8017804:	9b00      	ldr	r3, [sp, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	dd01      	ble.n	801780e <_dtoa_r+0x9ee>
 801780a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801780e:	9b05      	ldr	r3, [sp, #20]
 8017810:	1c5d      	adds	r5, r3, #1
 8017812:	f883 8000 	strb.w	r8, [r3]
 8017816:	e782      	b.n	801771e <_dtoa_r+0x8fe>
 8017818:	4630      	mov	r0, r6
 801781a:	e7c2      	b.n	80177a2 <_dtoa_r+0x982>
 801781c:	2301      	movs	r3, #1
 801781e:	e7e3      	b.n	80177e8 <_dtoa_r+0x9c8>
 8017820:	9a00      	ldr	r2, [sp, #0]
 8017822:	2a00      	cmp	r2, #0
 8017824:	db04      	blt.n	8017830 <_dtoa_r+0xa10>
 8017826:	d125      	bne.n	8017874 <_dtoa_r+0xa54>
 8017828:	9a06      	ldr	r2, [sp, #24]
 801782a:	bb1a      	cbnz	r2, 8017874 <_dtoa_r+0xa54>
 801782c:	9a07      	ldr	r2, [sp, #28]
 801782e:	bb0a      	cbnz	r2, 8017874 <_dtoa_r+0xa54>
 8017830:	2b00      	cmp	r3, #0
 8017832:	ddec      	ble.n	801780e <_dtoa_r+0x9ee>
 8017834:	2201      	movs	r2, #1
 8017836:	9904      	ldr	r1, [sp, #16]
 8017838:	4620      	mov	r0, r4
 801783a:	f000 fe15 	bl	8018468 <__lshift>
 801783e:	4639      	mov	r1, r7
 8017840:	9004      	str	r0, [sp, #16]
 8017842:	f000 fe65 	bl	8018510 <__mcmp>
 8017846:	2800      	cmp	r0, #0
 8017848:	dc03      	bgt.n	8017852 <_dtoa_r+0xa32>
 801784a:	d1e0      	bne.n	801780e <_dtoa_r+0x9ee>
 801784c:	f018 0f01 	tst.w	r8, #1
 8017850:	d0dd      	beq.n	801780e <_dtoa_r+0x9ee>
 8017852:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017856:	d1d8      	bne.n	801780a <_dtoa_r+0x9ea>
 8017858:	9b05      	ldr	r3, [sp, #20]
 801785a:	9a05      	ldr	r2, [sp, #20]
 801785c:	1c5d      	adds	r5, r3, #1
 801785e:	2339      	movs	r3, #57	; 0x39
 8017860:	7013      	strb	r3, [r2, #0]
 8017862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017866:	2b39      	cmp	r3, #57	; 0x39
 8017868:	f105 32ff 	add.w	r2, r5, #4294967295
 801786c:	d04f      	beq.n	801790e <_dtoa_r+0xaee>
 801786e:	3301      	adds	r3, #1
 8017870:	7013      	strb	r3, [r2, #0]
 8017872:	e754      	b.n	801771e <_dtoa_r+0x8fe>
 8017874:	9a05      	ldr	r2, [sp, #20]
 8017876:	2b00      	cmp	r3, #0
 8017878:	f102 0501 	add.w	r5, r2, #1
 801787c:	dd06      	ble.n	801788c <_dtoa_r+0xa6c>
 801787e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017882:	d0e9      	beq.n	8017858 <_dtoa_r+0xa38>
 8017884:	f108 0801 	add.w	r8, r8, #1
 8017888:	9b05      	ldr	r3, [sp, #20]
 801788a:	e7c2      	b.n	8017812 <_dtoa_r+0x9f2>
 801788c:	9a02      	ldr	r2, [sp, #8]
 801788e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017892:	eba5 030b 	sub.w	r3, r5, fp
 8017896:	4293      	cmp	r3, r2
 8017898:	d021      	beq.n	80178de <_dtoa_r+0xabe>
 801789a:	2300      	movs	r3, #0
 801789c:	220a      	movs	r2, #10
 801789e:	9904      	ldr	r1, [sp, #16]
 80178a0:	4620      	mov	r0, r4
 80178a2:	f000 fc2d 	bl	8018100 <__multadd>
 80178a6:	45b1      	cmp	r9, r6
 80178a8:	9004      	str	r0, [sp, #16]
 80178aa:	f04f 0300 	mov.w	r3, #0
 80178ae:	f04f 020a 	mov.w	r2, #10
 80178b2:	4649      	mov	r1, r9
 80178b4:	4620      	mov	r0, r4
 80178b6:	d105      	bne.n	80178c4 <_dtoa_r+0xaa4>
 80178b8:	f000 fc22 	bl	8018100 <__multadd>
 80178bc:	4681      	mov	r9, r0
 80178be:	4606      	mov	r6, r0
 80178c0:	9505      	str	r5, [sp, #20]
 80178c2:	e776      	b.n	80177b2 <_dtoa_r+0x992>
 80178c4:	f000 fc1c 	bl	8018100 <__multadd>
 80178c8:	4631      	mov	r1, r6
 80178ca:	4681      	mov	r9, r0
 80178cc:	2300      	movs	r3, #0
 80178ce:	220a      	movs	r2, #10
 80178d0:	4620      	mov	r0, r4
 80178d2:	f000 fc15 	bl	8018100 <__multadd>
 80178d6:	4606      	mov	r6, r0
 80178d8:	e7f2      	b.n	80178c0 <_dtoa_r+0xaa0>
 80178da:	f04f 0900 	mov.w	r9, #0
 80178de:	2201      	movs	r2, #1
 80178e0:	9904      	ldr	r1, [sp, #16]
 80178e2:	4620      	mov	r0, r4
 80178e4:	f000 fdc0 	bl	8018468 <__lshift>
 80178e8:	4639      	mov	r1, r7
 80178ea:	9004      	str	r0, [sp, #16]
 80178ec:	f000 fe10 	bl	8018510 <__mcmp>
 80178f0:	2800      	cmp	r0, #0
 80178f2:	dcb6      	bgt.n	8017862 <_dtoa_r+0xa42>
 80178f4:	d102      	bne.n	80178fc <_dtoa_r+0xadc>
 80178f6:	f018 0f01 	tst.w	r8, #1
 80178fa:	d1b2      	bne.n	8017862 <_dtoa_r+0xa42>
 80178fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017900:	2b30      	cmp	r3, #48	; 0x30
 8017902:	f105 32ff 	add.w	r2, r5, #4294967295
 8017906:	f47f af0a 	bne.w	801771e <_dtoa_r+0x8fe>
 801790a:	4615      	mov	r5, r2
 801790c:	e7f6      	b.n	80178fc <_dtoa_r+0xadc>
 801790e:	4593      	cmp	fp, r2
 8017910:	d105      	bne.n	801791e <_dtoa_r+0xafe>
 8017912:	2331      	movs	r3, #49	; 0x31
 8017914:	f10a 0a01 	add.w	sl, sl, #1
 8017918:	f88b 3000 	strb.w	r3, [fp]
 801791c:	e6ff      	b.n	801771e <_dtoa_r+0x8fe>
 801791e:	4615      	mov	r5, r2
 8017920:	e79f      	b.n	8017862 <_dtoa_r+0xa42>
 8017922:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017988 <_dtoa_r+0xb68>
 8017926:	e007      	b.n	8017938 <_dtoa_r+0xb18>
 8017928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801792a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801798c <_dtoa_r+0xb6c>
 801792e:	b11b      	cbz	r3, 8017938 <_dtoa_r+0xb18>
 8017930:	f10b 0308 	add.w	r3, fp, #8
 8017934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017936:	6013      	str	r3, [r2, #0]
 8017938:	4658      	mov	r0, fp
 801793a:	b017      	add	sp, #92	; 0x5c
 801793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017940:	9b06      	ldr	r3, [sp, #24]
 8017942:	2b01      	cmp	r3, #1
 8017944:	f77f ae35 	ble.w	80175b2 <_dtoa_r+0x792>
 8017948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801794a:	9307      	str	r3, [sp, #28]
 801794c:	e649      	b.n	80175e2 <_dtoa_r+0x7c2>
 801794e:	9b02      	ldr	r3, [sp, #8]
 8017950:	2b00      	cmp	r3, #0
 8017952:	dc03      	bgt.n	801795c <_dtoa_r+0xb3c>
 8017954:	9b06      	ldr	r3, [sp, #24]
 8017956:	2b02      	cmp	r3, #2
 8017958:	f73f aecc 	bgt.w	80176f4 <_dtoa_r+0x8d4>
 801795c:	465d      	mov	r5, fp
 801795e:	4639      	mov	r1, r7
 8017960:	9804      	ldr	r0, [sp, #16]
 8017962:	f7ff f9cf 	bl	8016d04 <quorem>
 8017966:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801796a:	f805 8b01 	strb.w	r8, [r5], #1
 801796e:	9a02      	ldr	r2, [sp, #8]
 8017970:	eba5 030b 	sub.w	r3, r5, fp
 8017974:	429a      	cmp	r2, r3
 8017976:	ddb0      	ble.n	80178da <_dtoa_r+0xaba>
 8017978:	2300      	movs	r3, #0
 801797a:	220a      	movs	r2, #10
 801797c:	9904      	ldr	r1, [sp, #16]
 801797e:	4620      	mov	r0, r4
 8017980:	f000 fbbe 	bl	8018100 <__multadd>
 8017984:	9004      	str	r0, [sp, #16]
 8017986:	e7ea      	b.n	801795e <_dtoa_r+0xb3e>
 8017988:	08019e0b 	.word	0x08019e0b
 801798c:	08019cd0 	.word	0x08019cd0

08017990 <rshift>:
 8017990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017992:	6906      	ldr	r6, [r0, #16]
 8017994:	114b      	asrs	r3, r1, #5
 8017996:	429e      	cmp	r6, r3
 8017998:	f100 0414 	add.w	r4, r0, #20
 801799c:	dd30      	ble.n	8017a00 <rshift+0x70>
 801799e:	f011 011f 	ands.w	r1, r1, #31
 80179a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80179a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80179aa:	d108      	bne.n	80179be <rshift+0x2e>
 80179ac:	4621      	mov	r1, r4
 80179ae:	42b2      	cmp	r2, r6
 80179b0:	460b      	mov	r3, r1
 80179b2:	d211      	bcs.n	80179d8 <rshift+0x48>
 80179b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80179b8:	f841 3b04 	str.w	r3, [r1], #4
 80179bc:	e7f7      	b.n	80179ae <rshift+0x1e>
 80179be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80179c2:	f1c1 0c20 	rsb	ip, r1, #32
 80179c6:	40cd      	lsrs	r5, r1
 80179c8:	3204      	adds	r2, #4
 80179ca:	4623      	mov	r3, r4
 80179cc:	42b2      	cmp	r2, r6
 80179ce:	4617      	mov	r7, r2
 80179d0:	d30c      	bcc.n	80179ec <rshift+0x5c>
 80179d2:	601d      	str	r5, [r3, #0]
 80179d4:	b105      	cbz	r5, 80179d8 <rshift+0x48>
 80179d6:	3304      	adds	r3, #4
 80179d8:	1b1a      	subs	r2, r3, r4
 80179da:	42a3      	cmp	r3, r4
 80179dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80179e0:	bf08      	it	eq
 80179e2:	2300      	moveq	r3, #0
 80179e4:	6102      	str	r2, [r0, #16]
 80179e6:	bf08      	it	eq
 80179e8:	6143      	streq	r3, [r0, #20]
 80179ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179ec:	683f      	ldr	r7, [r7, #0]
 80179ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80179f2:	433d      	orrs	r5, r7
 80179f4:	f843 5b04 	str.w	r5, [r3], #4
 80179f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80179fc:	40cd      	lsrs	r5, r1
 80179fe:	e7e5      	b.n	80179cc <rshift+0x3c>
 8017a00:	4623      	mov	r3, r4
 8017a02:	e7e9      	b.n	80179d8 <rshift+0x48>

08017a04 <__hexdig_fun>:
 8017a04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017a08:	2b09      	cmp	r3, #9
 8017a0a:	d802      	bhi.n	8017a12 <__hexdig_fun+0xe>
 8017a0c:	3820      	subs	r0, #32
 8017a0e:	b2c0      	uxtb	r0, r0
 8017a10:	4770      	bx	lr
 8017a12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017a16:	2b05      	cmp	r3, #5
 8017a18:	d801      	bhi.n	8017a1e <__hexdig_fun+0x1a>
 8017a1a:	3847      	subs	r0, #71	; 0x47
 8017a1c:	e7f7      	b.n	8017a0e <__hexdig_fun+0xa>
 8017a1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017a22:	2b05      	cmp	r3, #5
 8017a24:	d801      	bhi.n	8017a2a <__hexdig_fun+0x26>
 8017a26:	3827      	subs	r0, #39	; 0x27
 8017a28:	e7f1      	b.n	8017a0e <__hexdig_fun+0xa>
 8017a2a:	2000      	movs	r0, #0
 8017a2c:	4770      	bx	lr

08017a2e <__gethex>:
 8017a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a32:	b08b      	sub	sp, #44	; 0x2c
 8017a34:	468a      	mov	sl, r1
 8017a36:	9002      	str	r0, [sp, #8]
 8017a38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017a3a:	9306      	str	r3, [sp, #24]
 8017a3c:	4690      	mov	r8, r2
 8017a3e:	f000 fadf 	bl	8018000 <__localeconv_l>
 8017a42:	6803      	ldr	r3, [r0, #0]
 8017a44:	9303      	str	r3, [sp, #12]
 8017a46:	4618      	mov	r0, r3
 8017a48:	f7e8 fbda 	bl	8000200 <strlen>
 8017a4c:	9b03      	ldr	r3, [sp, #12]
 8017a4e:	9001      	str	r0, [sp, #4]
 8017a50:	4403      	add	r3, r0
 8017a52:	f04f 0b00 	mov.w	fp, #0
 8017a56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017a5a:	9307      	str	r3, [sp, #28]
 8017a5c:	f8da 3000 	ldr.w	r3, [sl]
 8017a60:	3302      	adds	r3, #2
 8017a62:	461f      	mov	r7, r3
 8017a64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017a68:	2830      	cmp	r0, #48	; 0x30
 8017a6a:	d06c      	beq.n	8017b46 <__gethex+0x118>
 8017a6c:	f7ff ffca 	bl	8017a04 <__hexdig_fun>
 8017a70:	4604      	mov	r4, r0
 8017a72:	2800      	cmp	r0, #0
 8017a74:	d16a      	bne.n	8017b4c <__gethex+0x11e>
 8017a76:	9a01      	ldr	r2, [sp, #4]
 8017a78:	9903      	ldr	r1, [sp, #12]
 8017a7a:	4638      	mov	r0, r7
 8017a7c:	f001 fc40 	bl	8019300 <strncmp>
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d166      	bne.n	8017b52 <__gethex+0x124>
 8017a84:	9b01      	ldr	r3, [sp, #4]
 8017a86:	5cf8      	ldrb	r0, [r7, r3]
 8017a88:	18fe      	adds	r6, r7, r3
 8017a8a:	f7ff ffbb 	bl	8017a04 <__hexdig_fun>
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	d062      	beq.n	8017b58 <__gethex+0x12a>
 8017a92:	4633      	mov	r3, r6
 8017a94:	7818      	ldrb	r0, [r3, #0]
 8017a96:	2830      	cmp	r0, #48	; 0x30
 8017a98:	461f      	mov	r7, r3
 8017a9a:	f103 0301 	add.w	r3, r3, #1
 8017a9e:	d0f9      	beq.n	8017a94 <__gethex+0x66>
 8017aa0:	f7ff ffb0 	bl	8017a04 <__hexdig_fun>
 8017aa4:	fab0 f580 	clz	r5, r0
 8017aa8:	096d      	lsrs	r5, r5, #5
 8017aaa:	4634      	mov	r4, r6
 8017aac:	f04f 0b01 	mov.w	fp, #1
 8017ab0:	463a      	mov	r2, r7
 8017ab2:	4616      	mov	r6, r2
 8017ab4:	3201      	adds	r2, #1
 8017ab6:	7830      	ldrb	r0, [r6, #0]
 8017ab8:	f7ff ffa4 	bl	8017a04 <__hexdig_fun>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d1f8      	bne.n	8017ab2 <__gethex+0x84>
 8017ac0:	9a01      	ldr	r2, [sp, #4]
 8017ac2:	9903      	ldr	r1, [sp, #12]
 8017ac4:	4630      	mov	r0, r6
 8017ac6:	f001 fc1b 	bl	8019300 <strncmp>
 8017aca:	b950      	cbnz	r0, 8017ae2 <__gethex+0xb4>
 8017acc:	b954      	cbnz	r4, 8017ae4 <__gethex+0xb6>
 8017ace:	9b01      	ldr	r3, [sp, #4]
 8017ad0:	18f4      	adds	r4, r6, r3
 8017ad2:	4622      	mov	r2, r4
 8017ad4:	4616      	mov	r6, r2
 8017ad6:	3201      	adds	r2, #1
 8017ad8:	7830      	ldrb	r0, [r6, #0]
 8017ada:	f7ff ff93 	bl	8017a04 <__hexdig_fun>
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	d1f8      	bne.n	8017ad4 <__gethex+0xa6>
 8017ae2:	b10c      	cbz	r4, 8017ae8 <__gethex+0xba>
 8017ae4:	1ba4      	subs	r4, r4, r6
 8017ae6:	00a4      	lsls	r4, r4, #2
 8017ae8:	7833      	ldrb	r3, [r6, #0]
 8017aea:	2b50      	cmp	r3, #80	; 0x50
 8017aec:	d001      	beq.n	8017af2 <__gethex+0xc4>
 8017aee:	2b70      	cmp	r3, #112	; 0x70
 8017af0:	d140      	bne.n	8017b74 <__gethex+0x146>
 8017af2:	7873      	ldrb	r3, [r6, #1]
 8017af4:	2b2b      	cmp	r3, #43	; 0x2b
 8017af6:	d031      	beq.n	8017b5c <__gethex+0x12e>
 8017af8:	2b2d      	cmp	r3, #45	; 0x2d
 8017afa:	d033      	beq.n	8017b64 <__gethex+0x136>
 8017afc:	1c71      	adds	r1, r6, #1
 8017afe:	f04f 0900 	mov.w	r9, #0
 8017b02:	7808      	ldrb	r0, [r1, #0]
 8017b04:	f7ff ff7e 	bl	8017a04 <__hexdig_fun>
 8017b08:	1e43      	subs	r3, r0, #1
 8017b0a:	b2db      	uxtb	r3, r3
 8017b0c:	2b18      	cmp	r3, #24
 8017b0e:	d831      	bhi.n	8017b74 <__gethex+0x146>
 8017b10:	f1a0 0210 	sub.w	r2, r0, #16
 8017b14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017b18:	f7ff ff74 	bl	8017a04 <__hexdig_fun>
 8017b1c:	1e43      	subs	r3, r0, #1
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	2b18      	cmp	r3, #24
 8017b22:	d922      	bls.n	8017b6a <__gethex+0x13c>
 8017b24:	f1b9 0f00 	cmp.w	r9, #0
 8017b28:	d000      	beq.n	8017b2c <__gethex+0xfe>
 8017b2a:	4252      	negs	r2, r2
 8017b2c:	4414      	add	r4, r2
 8017b2e:	f8ca 1000 	str.w	r1, [sl]
 8017b32:	b30d      	cbz	r5, 8017b78 <__gethex+0x14a>
 8017b34:	f1bb 0f00 	cmp.w	fp, #0
 8017b38:	bf0c      	ite	eq
 8017b3a:	2706      	moveq	r7, #6
 8017b3c:	2700      	movne	r7, #0
 8017b3e:	4638      	mov	r0, r7
 8017b40:	b00b      	add	sp, #44	; 0x2c
 8017b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b46:	f10b 0b01 	add.w	fp, fp, #1
 8017b4a:	e78a      	b.n	8017a62 <__gethex+0x34>
 8017b4c:	2500      	movs	r5, #0
 8017b4e:	462c      	mov	r4, r5
 8017b50:	e7ae      	b.n	8017ab0 <__gethex+0x82>
 8017b52:	463e      	mov	r6, r7
 8017b54:	2501      	movs	r5, #1
 8017b56:	e7c7      	b.n	8017ae8 <__gethex+0xba>
 8017b58:	4604      	mov	r4, r0
 8017b5a:	e7fb      	b.n	8017b54 <__gethex+0x126>
 8017b5c:	f04f 0900 	mov.w	r9, #0
 8017b60:	1cb1      	adds	r1, r6, #2
 8017b62:	e7ce      	b.n	8017b02 <__gethex+0xd4>
 8017b64:	f04f 0901 	mov.w	r9, #1
 8017b68:	e7fa      	b.n	8017b60 <__gethex+0x132>
 8017b6a:	230a      	movs	r3, #10
 8017b6c:	fb03 0202 	mla	r2, r3, r2, r0
 8017b70:	3a10      	subs	r2, #16
 8017b72:	e7cf      	b.n	8017b14 <__gethex+0xe6>
 8017b74:	4631      	mov	r1, r6
 8017b76:	e7da      	b.n	8017b2e <__gethex+0x100>
 8017b78:	1bf3      	subs	r3, r6, r7
 8017b7a:	3b01      	subs	r3, #1
 8017b7c:	4629      	mov	r1, r5
 8017b7e:	2b07      	cmp	r3, #7
 8017b80:	dc49      	bgt.n	8017c16 <__gethex+0x1e8>
 8017b82:	9802      	ldr	r0, [sp, #8]
 8017b84:	f000 fa71 	bl	801806a <_Balloc>
 8017b88:	9b01      	ldr	r3, [sp, #4]
 8017b8a:	f100 0914 	add.w	r9, r0, #20
 8017b8e:	f04f 0b00 	mov.w	fp, #0
 8017b92:	f1c3 0301 	rsb	r3, r3, #1
 8017b96:	4605      	mov	r5, r0
 8017b98:	f8cd 9010 	str.w	r9, [sp, #16]
 8017b9c:	46da      	mov	sl, fp
 8017b9e:	9308      	str	r3, [sp, #32]
 8017ba0:	42b7      	cmp	r7, r6
 8017ba2:	d33b      	bcc.n	8017c1c <__gethex+0x1ee>
 8017ba4:	9804      	ldr	r0, [sp, #16]
 8017ba6:	f840 ab04 	str.w	sl, [r0], #4
 8017baa:	eba0 0009 	sub.w	r0, r0, r9
 8017bae:	1080      	asrs	r0, r0, #2
 8017bb0:	6128      	str	r0, [r5, #16]
 8017bb2:	0147      	lsls	r7, r0, #5
 8017bb4:	4650      	mov	r0, sl
 8017bb6:	f000 fb1c 	bl	80181f2 <__hi0bits>
 8017bba:	f8d8 6000 	ldr.w	r6, [r8]
 8017bbe:	1a3f      	subs	r7, r7, r0
 8017bc0:	42b7      	cmp	r7, r6
 8017bc2:	dd64      	ble.n	8017c8e <__gethex+0x260>
 8017bc4:	1bbf      	subs	r7, r7, r6
 8017bc6:	4639      	mov	r1, r7
 8017bc8:	4628      	mov	r0, r5
 8017bca:	f000 fe2b 	bl	8018824 <__any_on>
 8017bce:	4682      	mov	sl, r0
 8017bd0:	b178      	cbz	r0, 8017bf2 <__gethex+0x1c4>
 8017bd2:	1e7b      	subs	r3, r7, #1
 8017bd4:	1159      	asrs	r1, r3, #5
 8017bd6:	f003 021f 	and.w	r2, r3, #31
 8017bda:	f04f 0a01 	mov.w	sl, #1
 8017bde:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017be2:	fa0a f202 	lsl.w	r2, sl, r2
 8017be6:	420a      	tst	r2, r1
 8017be8:	d003      	beq.n	8017bf2 <__gethex+0x1c4>
 8017bea:	4553      	cmp	r3, sl
 8017bec:	dc46      	bgt.n	8017c7c <__gethex+0x24e>
 8017bee:	f04f 0a02 	mov.w	sl, #2
 8017bf2:	4639      	mov	r1, r7
 8017bf4:	4628      	mov	r0, r5
 8017bf6:	f7ff fecb 	bl	8017990 <rshift>
 8017bfa:	443c      	add	r4, r7
 8017bfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c00:	42a3      	cmp	r3, r4
 8017c02:	da52      	bge.n	8017caa <__gethex+0x27c>
 8017c04:	4629      	mov	r1, r5
 8017c06:	9802      	ldr	r0, [sp, #8]
 8017c08:	f000 fa63 	bl	80180d2 <_Bfree>
 8017c0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c0e:	2300      	movs	r3, #0
 8017c10:	6013      	str	r3, [r2, #0]
 8017c12:	27a3      	movs	r7, #163	; 0xa3
 8017c14:	e793      	b.n	8017b3e <__gethex+0x110>
 8017c16:	3101      	adds	r1, #1
 8017c18:	105b      	asrs	r3, r3, #1
 8017c1a:	e7b0      	b.n	8017b7e <__gethex+0x150>
 8017c1c:	1e73      	subs	r3, r6, #1
 8017c1e:	9305      	str	r3, [sp, #20]
 8017c20:	9a07      	ldr	r2, [sp, #28]
 8017c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017c26:	4293      	cmp	r3, r2
 8017c28:	d018      	beq.n	8017c5c <__gethex+0x22e>
 8017c2a:	f1bb 0f20 	cmp.w	fp, #32
 8017c2e:	d107      	bne.n	8017c40 <__gethex+0x212>
 8017c30:	9b04      	ldr	r3, [sp, #16]
 8017c32:	f8c3 a000 	str.w	sl, [r3]
 8017c36:	3304      	adds	r3, #4
 8017c38:	f04f 0a00 	mov.w	sl, #0
 8017c3c:	9304      	str	r3, [sp, #16]
 8017c3e:	46d3      	mov	fp, sl
 8017c40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017c44:	f7ff fede 	bl	8017a04 <__hexdig_fun>
 8017c48:	f000 000f 	and.w	r0, r0, #15
 8017c4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017c50:	ea4a 0a00 	orr.w	sl, sl, r0
 8017c54:	f10b 0b04 	add.w	fp, fp, #4
 8017c58:	9b05      	ldr	r3, [sp, #20]
 8017c5a:	e00d      	b.n	8017c78 <__gethex+0x24a>
 8017c5c:	9b05      	ldr	r3, [sp, #20]
 8017c5e:	9a08      	ldr	r2, [sp, #32]
 8017c60:	4413      	add	r3, r2
 8017c62:	42bb      	cmp	r3, r7
 8017c64:	d3e1      	bcc.n	8017c2a <__gethex+0x1fc>
 8017c66:	4618      	mov	r0, r3
 8017c68:	9a01      	ldr	r2, [sp, #4]
 8017c6a:	9903      	ldr	r1, [sp, #12]
 8017c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c6e:	f001 fb47 	bl	8019300 <strncmp>
 8017c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c74:	2800      	cmp	r0, #0
 8017c76:	d1d8      	bne.n	8017c2a <__gethex+0x1fc>
 8017c78:	461e      	mov	r6, r3
 8017c7a:	e791      	b.n	8017ba0 <__gethex+0x172>
 8017c7c:	1eb9      	subs	r1, r7, #2
 8017c7e:	4628      	mov	r0, r5
 8017c80:	f000 fdd0 	bl	8018824 <__any_on>
 8017c84:	2800      	cmp	r0, #0
 8017c86:	d0b2      	beq.n	8017bee <__gethex+0x1c0>
 8017c88:	f04f 0a03 	mov.w	sl, #3
 8017c8c:	e7b1      	b.n	8017bf2 <__gethex+0x1c4>
 8017c8e:	da09      	bge.n	8017ca4 <__gethex+0x276>
 8017c90:	1bf7      	subs	r7, r6, r7
 8017c92:	4629      	mov	r1, r5
 8017c94:	463a      	mov	r2, r7
 8017c96:	9802      	ldr	r0, [sp, #8]
 8017c98:	f000 fbe6 	bl	8018468 <__lshift>
 8017c9c:	1be4      	subs	r4, r4, r7
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	f100 0914 	add.w	r9, r0, #20
 8017ca4:	f04f 0a00 	mov.w	sl, #0
 8017ca8:	e7a8      	b.n	8017bfc <__gethex+0x1ce>
 8017caa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017cae:	42a0      	cmp	r0, r4
 8017cb0:	dd6a      	ble.n	8017d88 <__gethex+0x35a>
 8017cb2:	1b04      	subs	r4, r0, r4
 8017cb4:	42a6      	cmp	r6, r4
 8017cb6:	dc2e      	bgt.n	8017d16 <__gethex+0x2e8>
 8017cb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017cbc:	2b02      	cmp	r3, #2
 8017cbe:	d022      	beq.n	8017d06 <__gethex+0x2d8>
 8017cc0:	2b03      	cmp	r3, #3
 8017cc2:	d024      	beq.n	8017d0e <__gethex+0x2e0>
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d115      	bne.n	8017cf4 <__gethex+0x2c6>
 8017cc8:	42a6      	cmp	r6, r4
 8017cca:	d113      	bne.n	8017cf4 <__gethex+0x2c6>
 8017ccc:	2e01      	cmp	r6, #1
 8017cce:	dc0b      	bgt.n	8017ce8 <__gethex+0x2ba>
 8017cd0:	9a06      	ldr	r2, [sp, #24]
 8017cd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017cd6:	6013      	str	r3, [r2, #0]
 8017cd8:	2301      	movs	r3, #1
 8017cda:	612b      	str	r3, [r5, #16]
 8017cdc:	f8c9 3000 	str.w	r3, [r9]
 8017ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ce2:	2762      	movs	r7, #98	; 0x62
 8017ce4:	601d      	str	r5, [r3, #0]
 8017ce6:	e72a      	b.n	8017b3e <__gethex+0x110>
 8017ce8:	1e71      	subs	r1, r6, #1
 8017cea:	4628      	mov	r0, r5
 8017cec:	f000 fd9a 	bl	8018824 <__any_on>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d1ed      	bne.n	8017cd0 <__gethex+0x2a2>
 8017cf4:	4629      	mov	r1, r5
 8017cf6:	9802      	ldr	r0, [sp, #8]
 8017cf8:	f000 f9eb 	bl	80180d2 <_Bfree>
 8017cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cfe:	2300      	movs	r3, #0
 8017d00:	6013      	str	r3, [r2, #0]
 8017d02:	2750      	movs	r7, #80	; 0x50
 8017d04:	e71b      	b.n	8017b3e <__gethex+0x110>
 8017d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d0e1      	beq.n	8017cd0 <__gethex+0x2a2>
 8017d0c:	e7f2      	b.n	8017cf4 <__gethex+0x2c6>
 8017d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d1dd      	bne.n	8017cd0 <__gethex+0x2a2>
 8017d14:	e7ee      	b.n	8017cf4 <__gethex+0x2c6>
 8017d16:	1e67      	subs	r7, r4, #1
 8017d18:	f1ba 0f00 	cmp.w	sl, #0
 8017d1c:	d131      	bne.n	8017d82 <__gethex+0x354>
 8017d1e:	b127      	cbz	r7, 8017d2a <__gethex+0x2fc>
 8017d20:	4639      	mov	r1, r7
 8017d22:	4628      	mov	r0, r5
 8017d24:	f000 fd7e 	bl	8018824 <__any_on>
 8017d28:	4682      	mov	sl, r0
 8017d2a:	117a      	asrs	r2, r7, #5
 8017d2c:	2301      	movs	r3, #1
 8017d2e:	f007 071f 	and.w	r7, r7, #31
 8017d32:	fa03 f707 	lsl.w	r7, r3, r7
 8017d36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017d3a:	4621      	mov	r1, r4
 8017d3c:	421f      	tst	r7, r3
 8017d3e:	4628      	mov	r0, r5
 8017d40:	bf18      	it	ne
 8017d42:	f04a 0a02 	orrne.w	sl, sl, #2
 8017d46:	1b36      	subs	r6, r6, r4
 8017d48:	f7ff fe22 	bl	8017990 <rshift>
 8017d4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017d50:	2702      	movs	r7, #2
 8017d52:	f1ba 0f00 	cmp.w	sl, #0
 8017d56:	d048      	beq.n	8017dea <__gethex+0x3bc>
 8017d58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d5c:	2b02      	cmp	r3, #2
 8017d5e:	d015      	beq.n	8017d8c <__gethex+0x35e>
 8017d60:	2b03      	cmp	r3, #3
 8017d62:	d017      	beq.n	8017d94 <__gethex+0x366>
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d109      	bne.n	8017d7c <__gethex+0x34e>
 8017d68:	f01a 0f02 	tst.w	sl, #2
 8017d6c:	d006      	beq.n	8017d7c <__gethex+0x34e>
 8017d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8017d72:	ea4a 0a03 	orr.w	sl, sl, r3
 8017d76:	f01a 0f01 	tst.w	sl, #1
 8017d7a:	d10e      	bne.n	8017d9a <__gethex+0x36c>
 8017d7c:	f047 0710 	orr.w	r7, r7, #16
 8017d80:	e033      	b.n	8017dea <__gethex+0x3bc>
 8017d82:	f04f 0a01 	mov.w	sl, #1
 8017d86:	e7d0      	b.n	8017d2a <__gethex+0x2fc>
 8017d88:	2701      	movs	r7, #1
 8017d8a:	e7e2      	b.n	8017d52 <__gethex+0x324>
 8017d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d8e:	f1c3 0301 	rsb	r3, r3, #1
 8017d92:	9315      	str	r3, [sp, #84]	; 0x54
 8017d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d0f0      	beq.n	8017d7c <__gethex+0x34e>
 8017d9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017d9e:	f105 0314 	add.w	r3, r5, #20
 8017da2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017da6:	eb03 010a 	add.w	r1, r3, sl
 8017daa:	f04f 0c00 	mov.w	ip, #0
 8017dae:	4618      	mov	r0, r3
 8017db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017db4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017db8:	d01c      	beq.n	8017df4 <__gethex+0x3c6>
 8017dba:	3201      	adds	r2, #1
 8017dbc:	6002      	str	r2, [r0, #0]
 8017dbe:	2f02      	cmp	r7, #2
 8017dc0:	f105 0314 	add.w	r3, r5, #20
 8017dc4:	d138      	bne.n	8017e38 <__gethex+0x40a>
 8017dc6:	f8d8 2000 	ldr.w	r2, [r8]
 8017dca:	3a01      	subs	r2, #1
 8017dcc:	42b2      	cmp	r2, r6
 8017dce:	d10a      	bne.n	8017de6 <__gethex+0x3b8>
 8017dd0:	1171      	asrs	r1, r6, #5
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	f006 061f 	and.w	r6, r6, #31
 8017dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ddc:	fa02 f606 	lsl.w	r6, r2, r6
 8017de0:	421e      	tst	r6, r3
 8017de2:	bf18      	it	ne
 8017de4:	4617      	movne	r7, r2
 8017de6:	f047 0720 	orr.w	r7, r7, #32
 8017dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017dec:	601d      	str	r5, [r3, #0]
 8017dee:	9b06      	ldr	r3, [sp, #24]
 8017df0:	601c      	str	r4, [r3, #0]
 8017df2:	e6a4      	b.n	8017b3e <__gethex+0x110>
 8017df4:	4299      	cmp	r1, r3
 8017df6:	f843 cc04 	str.w	ip, [r3, #-4]
 8017dfa:	d8d8      	bhi.n	8017dae <__gethex+0x380>
 8017dfc:	68ab      	ldr	r3, [r5, #8]
 8017dfe:	4599      	cmp	r9, r3
 8017e00:	db12      	blt.n	8017e28 <__gethex+0x3fa>
 8017e02:	6869      	ldr	r1, [r5, #4]
 8017e04:	9802      	ldr	r0, [sp, #8]
 8017e06:	3101      	adds	r1, #1
 8017e08:	f000 f92f 	bl	801806a <_Balloc>
 8017e0c:	692a      	ldr	r2, [r5, #16]
 8017e0e:	3202      	adds	r2, #2
 8017e10:	f105 010c 	add.w	r1, r5, #12
 8017e14:	4683      	mov	fp, r0
 8017e16:	0092      	lsls	r2, r2, #2
 8017e18:	300c      	adds	r0, #12
 8017e1a:	f000 f91b 	bl	8018054 <memcpy>
 8017e1e:	4629      	mov	r1, r5
 8017e20:	9802      	ldr	r0, [sp, #8]
 8017e22:	f000 f956 	bl	80180d2 <_Bfree>
 8017e26:	465d      	mov	r5, fp
 8017e28:	692b      	ldr	r3, [r5, #16]
 8017e2a:	1c5a      	adds	r2, r3, #1
 8017e2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017e30:	612a      	str	r2, [r5, #16]
 8017e32:	2201      	movs	r2, #1
 8017e34:	615a      	str	r2, [r3, #20]
 8017e36:	e7c2      	b.n	8017dbe <__gethex+0x390>
 8017e38:	692a      	ldr	r2, [r5, #16]
 8017e3a:	454a      	cmp	r2, r9
 8017e3c:	dd0b      	ble.n	8017e56 <__gethex+0x428>
 8017e3e:	2101      	movs	r1, #1
 8017e40:	4628      	mov	r0, r5
 8017e42:	f7ff fda5 	bl	8017990 <rshift>
 8017e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e4a:	3401      	adds	r4, #1
 8017e4c:	42a3      	cmp	r3, r4
 8017e4e:	f6ff aed9 	blt.w	8017c04 <__gethex+0x1d6>
 8017e52:	2701      	movs	r7, #1
 8017e54:	e7c7      	b.n	8017de6 <__gethex+0x3b8>
 8017e56:	f016 061f 	ands.w	r6, r6, #31
 8017e5a:	d0fa      	beq.n	8017e52 <__gethex+0x424>
 8017e5c:	449a      	add	sl, r3
 8017e5e:	f1c6 0620 	rsb	r6, r6, #32
 8017e62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017e66:	f000 f9c4 	bl	80181f2 <__hi0bits>
 8017e6a:	42b0      	cmp	r0, r6
 8017e6c:	dbe7      	blt.n	8017e3e <__gethex+0x410>
 8017e6e:	e7f0      	b.n	8017e52 <__gethex+0x424>

08017e70 <L_shift>:
 8017e70:	f1c2 0208 	rsb	r2, r2, #8
 8017e74:	0092      	lsls	r2, r2, #2
 8017e76:	b570      	push	{r4, r5, r6, lr}
 8017e78:	f1c2 0620 	rsb	r6, r2, #32
 8017e7c:	6843      	ldr	r3, [r0, #4]
 8017e7e:	6804      	ldr	r4, [r0, #0]
 8017e80:	fa03 f506 	lsl.w	r5, r3, r6
 8017e84:	432c      	orrs	r4, r5
 8017e86:	40d3      	lsrs	r3, r2
 8017e88:	6004      	str	r4, [r0, #0]
 8017e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017e8e:	4288      	cmp	r0, r1
 8017e90:	d3f4      	bcc.n	8017e7c <L_shift+0xc>
 8017e92:	bd70      	pop	{r4, r5, r6, pc}

08017e94 <__match>:
 8017e94:	b530      	push	{r4, r5, lr}
 8017e96:	6803      	ldr	r3, [r0, #0]
 8017e98:	3301      	adds	r3, #1
 8017e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e9e:	b914      	cbnz	r4, 8017ea6 <__match+0x12>
 8017ea0:	6003      	str	r3, [r0, #0]
 8017ea2:	2001      	movs	r0, #1
 8017ea4:	bd30      	pop	{r4, r5, pc}
 8017ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017eae:	2d19      	cmp	r5, #25
 8017eb0:	bf98      	it	ls
 8017eb2:	3220      	addls	r2, #32
 8017eb4:	42a2      	cmp	r2, r4
 8017eb6:	d0f0      	beq.n	8017e9a <__match+0x6>
 8017eb8:	2000      	movs	r0, #0
 8017eba:	e7f3      	b.n	8017ea4 <__match+0x10>

08017ebc <__hexnan>:
 8017ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec0:	680b      	ldr	r3, [r1, #0]
 8017ec2:	6801      	ldr	r1, [r0, #0]
 8017ec4:	115f      	asrs	r7, r3, #5
 8017ec6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017eca:	f013 031f 	ands.w	r3, r3, #31
 8017ece:	b087      	sub	sp, #28
 8017ed0:	bf18      	it	ne
 8017ed2:	3704      	addne	r7, #4
 8017ed4:	2500      	movs	r5, #0
 8017ed6:	1f3e      	subs	r6, r7, #4
 8017ed8:	4682      	mov	sl, r0
 8017eda:	4690      	mov	r8, r2
 8017edc:	9301      	str	r3, [sp, #4]
 8017ede:	f847 5c04 	str.w	r5, [r7, #-4]
 8017ee2:	46b1      	mov	r9, r6
 8017ee4:	4634      	mov	r4, r6
 8017ee6:	9502      	str	r5, [sp, #8]
 8017ee8:	46ab      	mov	fp, r5
 8017eea:	784a      	ldrb	r2, [r1, #1]
 8017eec:	1c4b      	adds	r3, r1, #1
 8017eee:	9303      	str	r3, [sp, #12]
 8017ef0:	b342      	cbz	r2, 8017f44 <__hexnan+0x88>
 8017ef2:	4610      	mov	r0, r2
 8017ef4:	9105      	str	r1, [sp, #20]
 8017ef6:	9204      	str	r2, [sp, #16]
 8017ef8:	f7ff fd84 	bl	8017a04 <__hexdig_fun>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	d143      	bne.n	8017f88 <__hexnan+0xcc>
 8017f00:	9a04      	ldr	r2, [sp, #16]
 8017f02:	9905      	ldr	r1, [sp, #20]
 8017f04:	2a20      	cmp	r2, #32
 8017f06:	d818      	bhi.n	8017f3a <__hexnan+0x7e>
 8017f08:	9b02      	ldr	r3, [sp, #8]
 8017f0a:	459b      	cmp	fp, r3
 8017f0c:	dd13      	ble.n	8017f36 <__hexnan+0x7a>
 8017f0e:	454c      	cmp	r4, r9
 8017f10:	d206      	bcs.n	8017f20 <__hexnan+0x64>
 8017f12:	2d07      	cmp	r5, #7
 8017f14:	dc04      	bgt.n	8017f20 <__hexnan+0x64>
 8017f16:	462a      	mov	r2, r5
 8017f18:	4649      	mov	r1, r9
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f7ff ffa8 	bl	8017e70 <L_shift>
 8017f20:	4544      	cmp	r4, r8
 8017f22:	d944      	bls.n	8017fae <__hexnan+0xf2>
 8017f24:	2300      	movs	r3, #0
 8017f26:	f1a4 0904 	sub.w	r9, r4, #4
 8017f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f2e:	f8cd b008 	str.w	fp, [sp, #8]
 8017f32:	464c      	mov	r4, r9
 8017f34:	461d      	mov	r5, r3
 8017f36:	9903      	ldr	r1, [sp, #12]
 8017f38:	e7d7      	b.n	8017eea <__hexnan+0x2e>
 8017f3a:	2a29      	cmp	r2, #41	; 0x29
 8017f3c:	d14a      	bne.n	8017fd4 <__hexnan+0x118>
 8017f3e:	3102      	adds	r1, #2
 8017f40:	f8ca 1000 	str.w	r1, [sl]
 8017f44:	f1bb 0f00 	cmp.w	fp, #0
 8017f48:	d044      	beq.n	8017fd4 <__hexnan+0x118>
 8017f4a:	454c      	cmp	r4, r9
 8017f4c:	d206      	bcs.n	8017f5c <__hexnan+0xa0>
 8017f4e:	2d07      	cmp	r5, #7
 8017f50:	dc04      	bgt.n	8017f5c <__hexnan+0xa0>
 8017f52:	462a      	mov	r2, r5
 8017f54:	4649      	mov	r1, r9
 8017f56:	4620      	mov	r0, r4
 8017f58:	f7ff ff8a 	bl	8017e70 <L_shift>
 8017f5c:	4544      	cmp	r4, r8
 8017f5e:	d928      	bls.n	8017fb2 <__hexnan+0xf6>
 8017f60:	4643      	mov	r3, r8
 8017f62:	f854 2b04 	ldr.w	r2, [r4], #4
 8017f66:	f843 2b04 	str.w	r2, [r3], #4
 8017f6a:	42a6      	cmp	r6, r4
 8017f6c:	d2f9      	bcs.n	8017f62 <__hexnan+0xa6>
 8017f6e:	2200      	movs	r2, #0
 8017f70:	f843 2b04 	str.w	r2, [r3], #4
 8017f74:	429e      	cmp	r6, r3
 8017f76:	d2fb      	bcs.n	8017f70 <__hexnan+0xb4>
 8017f78:	6833      	ldr	r3, [r6, #0]
 8017f7a:	b91b      	cbnz	r3, 8017f84 <__hexnan+0xc8>
 8017f7c:	4546      	cmp	r6, r8
 8017f7e:	d127      	bne.n	8017fd0 <__hexnan+0x114>
 8017f80:	2301      	movs	r3, #1
 8017f82:	6033      	str	r3, [r6, #0]
 8017f84:	2005      	movs	r0, #5
 8017f86:	e026      	b.n	8017fd6 <__hexnan+0x11a>
 8017f88:	3501      	adds	r5, #1
 8017f8a:	2d08      	cmp	r5, #8
 8017f8c:	f10b 0b01 	add.w	fp, fp, #1
 8017f90:	dd06      	ble.n	8017fa0 <__hexnan+0xe4>
 8017f92:	4544      	cmp	r4, r8
 8017f94:	d9cf      	bls.n	8017f36 <__hexnan+0x7a>
 8017f96:	2300      	movs	r3, #0
 8017f98:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f9c:	2501      	movs	r5, #1
 8017f9e:	3c04      	subs	r4, #4
 8017fa0:	6822      	ldr	r2, [r4, #0]
 8017fa2:	f000 000f 	and.w	r0, r0, #15
 8017fa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017faa:	6020      	str	r0, [r4, #0]
 8017fac:	e7c3      	b.n	8017f36 <__hexnan+0x7a>
 8017fae:	2508      	movs	r5, #8
 8017fb0:	e7c1      	b.n	8017f36 <__hexnan+0x7a>
 8017fb2:	9b01      	ldr	r3, [sp, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d0df      	beq.n	8017f78 <__hexnan+0xbc>
 8017fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8017fbc:	f1c3 0320 	rsb	r3, r3, #32
 8017fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8017fc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017fc8:	401a      	ands	r2, r3
 8017fca:	f847 2c04 	str.w	r2, [r7, #-4]
 8017fce:	e7d3      	b.n	8017f78 <__hexnan+0xbc>
 8017fd0:	3e04      	subs	r6, #4
 8017fd2:	e7d1      	b.n	8017f78 <__hexnan+0xbc>
 8017fd4:	2004      	movs	r0, #4
 8017fd6:	b007      	add	sp, #28
 8017fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017fdc <__locale_ctype_ptr_l>:
 8017fdc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017fe0:	4770      	bx	lr
	...

08017fe4 <__locale_ctype_ptr>:
 8017fe4:	4b04      	ldr	r3, [pc, #16]	; (8017ff8 <__locale_ctype_ptr+0x14>)
 8017fe6:	4a05      	ldr	r2, [pc, #20]	; (8017ffc <__locale_ctype_ptr+0x18>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	6a1b      	ldr	r3, [r3, #32]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	bf08      	it	eq
 8017ff0:	4613      	moveq	r3, r2
 8017ff2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017ff6:	4770      	bx	lr
 8017ff8:	2000000c 	.word	0x2000000c
 8017ffc:	20000070 	.word	0x20000070

08018000 <__localeconv_l>:
 8018000:	30f0      	adds	r0, #240	; 0xf0
 8018002:	4770      	bx	lr

08018004 <_localeconv_r>:
 8018004:	4b04      	ldr	r3, [pc, #16]	; (8018018 <_localeconv_r+0x14>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	6a18      	ldr	r0, [r3, #32]
 801800a:	4b04      	ldr	r3, [pc, #16]	; (801801c <_localeconv_r+0x18>)
 801800c:	2800      	cmp	r0, #0
 801800e:	bf08      	it	eq
 8018010:	4618      	moveq	r0, r3
 8018012:	30f0      	adds	r0, #240	; 0xf0
 8018014:	4770      	bx	lr
 8018016:	bf00      	nop
 8018018:	2000000c 	.word	0x2000000c
 801801c:	20000070 	.word	0x20000070

08018020 <malloc>:
 8018020:	4b02      	ldr	r3, [pc, #8]	; (801802c <malloc+0xc>)
 8018022:	4601      	mov	r1, r0
 8018024:	6818      	ldr	r0, [r3, #0]
 8018026:	f000 bc7b 	b.w	8018920 <_malloc_r>
 801802a:	bf00      	nop
 801802c:	2000000c 	.word	0x2000000c

08018030 <__ascii_mbtowc>:
 8018030:	b082      	sub	sp, #8
 8018032:	b901      	cbnz	r1, 8018036 <__ascii_mbtowc+0x6>
 8018034:	a901      	add	r1, sp, #4
 8018036:	b142      	cbz	r2, 801804a <__ascii_mbtowc+0x1a>
 8018038:	b14b      	cbz	r3, 801804e <__ascii_mbtowc+0x1e>
 801803a:	7813      	ldrb	r3, [r2, #0]
 801803c:	600b      	str	r3, [r1, #0]
 801803e:	7812      	ldrb	r2, [r2, #0]
 8018040:	1c10      	adds	r0, r2, #0
 8018042:	bf18      	it	ne
 8018044:	2001      	movne	r0, #1
 8018046:	b002      	add	sp, #8
 8018048:	4770      	bx	lr
 801804a:	4610      	mov	r0, r2
 801804c:	e7fb      	b.n	8018046 <__ascii_mbtowc+0x16>
 801804e:	f06f 0001 	mvn.w	r0, #1
 8018052:	e7f8      	b.n	8018046 <__ascii_mbtowc+0x16>

08018054 <memcpy>:
 8018054:	b510      	push	{r4, lr}
 8018056:	1e43      	subs	r3, r0, #1
 8018058:	440a      	add	r2, r1
 801805a:	4291      	cmp	r1, r2
 801805c:	d100      	bne.n	8018060 <memcpy+0xc>
 801805e:	bd10      	pop	{r4, pc}
 8018060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018068:	e7f7      	b.n	801805a <memcpy+0x6>

0801806a <_Balloc>:
 801806a:	b570      	push	{r4, r5, r6, lr}
 801806c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801806e:	4604      	mov	r4, r0
 8018070:	460e      	mov	r6, r1
 8018072:	b93d      	cbnz	r5, 8018084 <_Balloc+0x1a>
 8018074:	2010      	movs	r0, #16
 8018076:	f7ff ffd3 	bl	8018020 <malloc>
 801807a:	6260      	str	r0, [r4, #36]	; 0x24
 801807c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018080:	6005      	str	r5, [r0, #0]
 8018082:	60c5      	str	r5, [r0, #12]
 8018084:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018086:	68eb      	ldr	r3, [r5, #12]
 8018088:	b183      	cbz	r3, 80180ac <_Balloc+0x42>
 801808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801808c:	68db      	ldr	r3, [r3, #12]
 801808e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018092:	b9b8      	cbnz	r0, 80180c4 <_Balloc+0x5a>
 8018094:	2101      	movs	r1, #1
 8018096:	fa01 f506 	lsl.w	r5, r1, r6
 801809a:	1d6a      	adds	r2, r5, #5
 801809c:	0092      	lsls	r2, r2, #2
 801809e:	4620      	mov	r0, r4
 80180a0:	f000 fbe1 	bl	8018866 <_calloc_r>
 80180a4:	b160      	cbz	r0, 80180c0 <_Balloc+0x56>
 80180a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80180aa:	e00e      	b.n	80180ca <_Balloc+0x60>
 80180ac:	2221      	movs	r2, #33	; 0x21
 80180ae:	2104      	movs	r1, #4
 80180b0:	4620      	mov	r0, r4
 80180b2:	f000 fbd8 	bl	8018866 <_calloc_r>
 80180b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180b8:	60e8      	str	r0, [r5, #12]
 80180ba:	68db      	ldr	r3, [r3, #12]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d1e4      	bne.n	801808a <_Balloc+0x20>
 80180c0:	2000      	movs	r0, #0
 80180c2:	bd70      	pop	{r4, r5, r6, pc}
 80180c4:	6802      	ldr	r2, [r0, #0]
 80180c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80180ca:	2300      	movs	r3, #0
 80180cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80180d0:	e7f7      	b.n	80180c2 <_Balloc+0x58>

080180d2 <_Bfree>:
 80180d2:	b570      	push	{r4, r5, r6, lr}
 80180d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80180d6:	4606      	mov	r6, r0
 80180d8:	460d      	mov	r5, r1
 80180da:	b93c      	cbnz	r4, 80180ec <_Bfree+0x1a>
 80180dc:	2010      	movs	r0, #16
 80180de:	f7ff ff9f 	bl	8018020 <malloc>
 80180e2:	6270      	str	r0, [r6, #36]	; 0x24
 80180e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80180e8:	6004      	str	r4, [r0, #0]
 80180ea:	60c4      	str	r4, [r0, #12]
 80180ec:	b13d      	cbz	r5, 80180fe <_Bfree+0x2c>
 80180ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80180f0:	686a      	ldr	r2, [r5, #4]
 80180f2:	68db      	ldr	r3, [r3, #12]
 80180f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80180f8:	6029      	str	r1, [r5, #0]
 80180fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80180fe:	bd70      	pop	{r4, r5, r6, pc}

08018100 <__multadd>:
 8018100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018104:	690d      	ldr	r5, [r1, #16]
 8018106:	461f      	mov	r7, r3
 8018108:	4606      	mov	r6, r0
 801810a:	460c      	mov	r4, r1
 801810c:	f101 0c14 	add.w	ip, r1, #20
 8018110:	2300      	movs	r3, #0
 8018112:	f8dc 0000 	ldr.w	r0, [ip]
 8018116:	b281      	uxth	r1, r0
 8018118:	fb02 7101 	mla	r1, r2, r1, r7
 801811c:	0c0f      	lsrs	r7, r1, #16
 801811e:	0c00      	lsrs	r0, r0, #16
 8018120:	fb02 7000 	mla	r0, r2, r0, r7
 8018124:	b289      	uxth	r1, r1
 8018126:	3301      	adds	r3, #1
 8018128:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801812c:	429d      	cmp	r5, r3
 801812e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018132:	f84c 1b04 	str.w	r1, [ip], #4
 8018136:	dcec      	bgt.n	8018112 <__multadd+0x12>
 8018138:	b1d7      	cbz	r7, 8018170 <__multadd+0x70>
 801813a:	68a3      	ldr	r3, [r4, #8]
 801813c:	42ab      	cmp	r3, r5
 801813e:	dc12      	bgt.n	8018166 <__multadd+0x66>
 8018140:	6861      	ldr	r1, [r4, #4]
 8018142:	4630      	mov	r0, r6
 8018144:	3101      	adds	r1, #1
 8018146:	f7ff ff90 	bl	801806a <_Balloc>
 801814a:	6922      	ldr	r2, [r4, #16]
 801814c:	3202      	adds	r2, #2
 801814e:	f104 010c 	add.w	r1, r4, #12
 8018152:	4680      	mov	r8, r0
 8018154:	0092      	lsls	r2, r2, #2
 8018156:	300c      	adds	r0, #12
 8018158:	f7ff ff7c 	bl	8018054 <memcpy>
 801815c:	4621      	mov	r1, r4
 801815e:	4630      	mov	r0, r6
 8018160:	f7ff ffb7 	bl	80180d2 <_Bfree>
 8018164:	4644      	mov	r4, r8
 8018166:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801816a:	3501      	adds	r5, #1
 801816c:	615f      	str	r7, [r3, #20]
 801816e:	6125      	str	r5, [r4, #16]
 8018170:	4620      	mov	r0, r4
 8018172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018176 <__s2b>:
 8018176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801817a:	460c      	mov	r4, r1
 801817c:	4615      	mov	r5, r2
 801817e:	461f      	mov	r7, r3
 8018180:	2209      	movs	r2, #9
 8018182:	3308      	adds	r3, #8
 8018184:	4606      	mov	r6, r0
 8018186:	fb93 f3f2 	sdiv	r3, r3, r2
 801818a:	2100      	movs	r1, #0
 801818c:	2201      	movs	r2, #1
 801818e:	429a      	cmp	r2, r3
 8018190:	db20      	blt.n	80181d4 <__s2b+0x5e>
 8018192:	4630      	mov	r0, r6
 8018194:	f7ff ff69 	bl	801806a <_Balloc>
 8018198:	9b08      	ldr	r3, [sp, #32]
 801819a:	6143      	str	r3, [r0, #20]
 801819c:	2d09      	cmp	r5, #9
 801819e:	f04f 0301 	mov.w	r3, #1
 80181a2:	6103      	str	r3, [r0, #16]
 80181a4:	dd19      	ble.n	80181da <__s2b+0x64>
 80181a6:	f104 0809 	add.w	r8, r4, #9
 80181aa:	46c1      	mov	r9, r8
 80181ac:	442c      	add	r4, r5
 80181ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80181b2:	4601      	mov	r1, r0
 80181b4:	3b30      	subs	r3, #48	; 0x30
 80181b6:	220a      	movs	r2, #10
 80181b8:	4630      	mov	r0, r6
 80181ba:	f7ff ffa1 	bl	8018100 <__multadd>
 80181be:	45a1      	cmp	r9, r4
 80181c0:	d1f5      	bne.n	80181ae <__s2b+0x38>
 80181c2:	eb08 0405 	add.w	r4, r8, r5
 80181c6:	3c08      	subs	r4, #8
 80181c8:	1b2d      	subs	r5, r5, r4
 80181ca:	1963      	adds	r3, r4, r5
 80181cc:	42bb      	cmp	r3, r7
 80181ce:	db07      	blt.n	80181e0 <__s2b+0x6a>
 80181d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181d4:	0052      	lsls	r2, r2, #1
 80181d6:	3101      	adds	r1, #1
 80181d8:	e7d9      	b.n	801818e <__s2b+0x18>
 80181da:	340a      	adds	r4, #10
 80181dc:	2509      	movs	r5, #9
 80181de:	e7f3      	b.n	80181c8 <__s2b+0x52>
 80181e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80181e4:	4601      	mov	r1, r0
 80181e6:	3b30      	subs	r3, #48	; 0x30
 80181e8:	220a      	movs	r2, #10
 80181ea:	4630      	mov	r0, r6
 80181ec:	f7ff ff88 	bl	8018100 <__multadd>
 80181f0:	e7eb      	b.n	80181ca <__s2b+0x54>

080181f2 <__hi0bits>:
 80181f2:	0c02      	lsrs	r2, r0, #16
 80181f4:	0412      	lsls	r2, r2, #16
 80181f6:	4603      	mov	r3, r0
 80181f8:	b9b2      	cbnz	r2, 8018228 <__hi0bits+0x36>
 80181fa:	0403      	lsls	r3, r0, #16
 80181fc:	2010      	movs	r0, #16
 80181fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018202:	bf04      	itt	eq
 8018204:	021b      	lsleq	r3, r3, #8
 8018206:	3008      	addeq	r0, #8
 8018208:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801820c:	bf04      	itt	eq
 801820e:	011b      	lsleq	r3, r3, #4
 8018210:	3004      	addeq	r0, #4
 8018212:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018216:	bf04      	itt	eq
 8018218:	009b      	lsleq	r3, r3, #2
 801821a:	3002      	addeq	r0, #2
 801821c:	2b00      	cmp	r3, #0
 801821e:	db06      	blt.n	801822e <__hi0bits+0x3c>
 8018220:	005b      	lsls	r3, r3, #1
 8018222:	d503      	bpl.n	801822c <__hi0bits+0x3a>
 8018224:	3001      	adds	r0, #1
 8018226:	4770      	bx	lr
 8018228:	2000      	movs	r0, #0
 801822a:	e7e8      	b.n	80181fe <__hi0bits+0xc>
 801822c:	2020      	movs	r0, #32
 801822e:	4770      	bx	lr

08018230 <__lo0bits>:
 8018230:	6803      	ldr	r3, [r0, #0]
 8018232:	f013 0207 	ands.w	r2, r3, #7
 8018236:	4601      	mov	r1, r0
 8018238:	d00b      	beq.n	8018252 <__lo0bits+0x22>
 801823a:	07da      	lsls	r2, r3, #31
 801823c:	d423      	bmi.n	8018286 <__lo0bits+0x56>
 801823e:	0798      	lsls	r0, r3, #30
 8018240:	bf49      	itett	mi
 8018242:	085b      	lsrmi	r3, r3, #1
 8018244:	089b      	lsrpl	r3, r3, #2
 8018246:	2001      	movmi	r0, #1
 8018248:	600b      	strmi	r3, [r1, #0]
 801824a:	bf5c      	itt	pl
 801824c:	600b      	strpl	r3, [r1, #0]
 801824e:	2002      	movpl	r0, #2
 8018250:	4770      	bx	lr
 8018252:	b298      	uxth	r0, r3
 8018254:	b9a8      	cbnz	r0, 8018282 <__lo0bits+0x52>
 8018256:	0c1b      	lsrs	r3, r3, #16
 8018258:	2010      	movs	r0, #16
 801825a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801825e:	bf04      	itt	eq
 8018260:	0a1b      	lsreq	r3, r3, #8
 8018262:	3008      	addeq	r0, #8
 8018264:	071a      	lsls	r2, r3, #28
 8018266:	bf04      	itt	eq
 8018268:	091b      	lsreq	r3, r3, #4
 801826a:	3004      	addeq	r0, #4
 801826c:	079a      	lsls	r2, r3, #30
 801826e:	bf04      	itt	eq
 8018270:	089b      	lsreq	r3, r3, #2
 8018272:	3002      	addeq	r0, #2
 8018274:	07da      	lsls	r2, r3, #31
 8018276:	d402      	bmi.n	801827e <__lo0bits+0x4e>
 8018278:	085b      	lsrs	r3, r3, #1
 801827a:	d006      	beq.n	801828a <__lo0bits+0x5a>
 801827c:	3001      	adds	r0, #1
 801827e:	600b      	str	r3, [r1, #0]
 8018280:	4770      	bx	lr
 8018282:	4610      	mov	r0, r2
 8018284:	e7e9      	b.n	801825a <__lo0bits+0x2a>
 8018286:	2000      	movs	r0, #0
 8018288:	4770      	bx	lr
 801828a:	2020      	movs	r0, #32
 801828c:	4770      	bx	lr

0801828e <__i2b>:
 801828e:	b510      	push	{r4, lr}
 8018290:	460c      	mov	r4, r1
 8018292:	2101      	movs	r1, #1
 8018294:	f7ff fee9 	bl	801806a <_Balloc>
 8018298:	2201      	movs	r2, #1
 801829a:	6144      	str	r4, [r0, #20]
 801829c:	6102      	str	r2, [r0, #16]
 801829e:	bd10      	pop	{r4, pc}

080182a0 <__multiply>:
 80182a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a4:	4614      	mov	r4, r2
 80182a6:	690a      	ldr	r2, [r1, #16]
 80182a8:	6923      	ldr	r3, [r4, #16]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	bfb8      	it	lt
 80182ae:	460b      	movlt	r3, r1
 80182b0:	4688      	mov	r8, r1
 80182b2:	bfbc      	itt	lt
 80182b4:	46a0      	movlt	r8, r4
 80182b6:	461c      	movlt	r4, r3
 80182b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80182bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80182c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80182c8:	eb07 0609 	add.w	r6, r7, r9
 80182cc:	42b3      	cmp	r3, r6
 80182ce:	bfb8      	it	lt
 80182d0:	3101      	addlt	r1, #1
 80182d2:	f7ff feca 	bl	801806a <_Balloc>
 80182d6:	f100 0514 	add.w	r5, r0, #20
 80182da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80182de:	462b      	mov	r3, r5
 80182e0:	2200      	movs	r2, #0
 80182e2:	4573      	cmp	r3, lr
 80182e4:	d316      	bcc.n	8018314 <__multiply+0x74>
 80182e6:	f104 0214 	add.w	r2, r4, #20
 80182ea:	f108 0114 	add.w	r1, r8, #20
 80182ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80182f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80182f6:	9300      	str	r3, [sp, #0]
 80182f8:	9b00      	ldr	r3, [sp, #0]
 80182fa:	9201      	str	r2, [sp, #4]
 80182fc:	4293      	cmp	r3, r2
 80182fe:	d80c      	bhi.n	801831a <__multiply+0x7a>
 8018300:	2e00      	cmp	r6, #0
 8018302:	dd03      	ble.n	801830c <__multiply+0x6c>
 8018304:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018308:	2b00      	cmp	r3, #0
 801830a:	d05d      	beq.n	80183c8 <__multiply+0x128>
 801830c:	6106      	str	r6, [r0, #16]
 801830e:	b003      	add	sp, #12
 8018310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018314:	f843 2b04 	str.w	r2, [r3], #4
 8018318:	e7e3      	b.n	80182e2 <__multiply+0x42>
 801831a:	f8b2 b000 	ldrh.w	fp, [r2]
 801831e:	f1bb 0f00 	cmp.w	fp, #0
 8018322:	d023      	beq.n	801836c <__multiply+0xcc>
 8018324:	4689      	mov	r9, r1
 8018326:	46ac      	mov	ip, r5
 8018328:	f04f 0800 	mov.w	r8, #0
 801832c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018330:	f8dc a000 	ldr.w	sl, [ip]
 8018334:	b2a3      	uxth	r3, r4
 8018336:	fa1f fa8a 	uxth.w	sl, sl
 801833a:	fb0b a303 	mla	r3, fp, r3, sl
 801833e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018342:	f8dc 4000 	ldr.w	r4, [ip]
 8018346:	4443      	add	r3, r8
 8018348:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801834c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018350:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018354:	46e2      	mov	sl, ip
 8018356:	b29b      	uxth	r3, r3
 8018358:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801835c:	454f      	cmp	r7, r9
 801835e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018362:	f84a 3b04 	str.w	r3, [sl], #4
 8018366:	d82b      	bhi.n	80183c0 <__multiply+0x120>
 8018368:	f8cc 8004 	str.w	r8, [ip, #4]
 801836c:	9b01      	ldr	r3, [sp, #4]
 801836e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018372:	3204      	adds	r2, #4
 8018374:	f1ba 0f00 	cmp.w	sl, #0
 8018378:	d020      	beq.n	80183bc <__multiply+0x11c>
 801837a:	682b      	ldr	r3, [r5, #0]
 801837c:	4689      	mov	r9, r1
 801837e:	46a8      	mov	r8, r5
 8018380:	f04f 0b00 	mov.w	fp, #0
 8018384:	f8b9 c000 	ldrh.w	ip, [r9]
 8018388:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801838c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018390:	445c      	add	r4, fp
 8018392:	46c4      	mov	ip, r8
 8018394:	b29b      	uxth	r3, r3
 8018396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801839a:	f84c 3b04 	str.w	r3, [ip], #4
 801839e:	f859 3b04 	ldr.w	r3, [r9], #4
 80183a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80183a6:	0c1b      	lsrs	r3, r3, #16
 80183a8:	fb0a b303 	mla	r3, sl, r3, fp
 80183ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80183b0:	454f      	cmp	r7, r9
 80183b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80183b6:	d805      	bhi.n	80183c4 <__multiply+0x124>
 80183b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80183bc:	3504      	adds	r5, #4
 80183be:	e79b      	b.n	80182f8 <__multiply+0x58>
 80183c0:	46d4      	mov	ip, sl
 80183c2:	e7b3      	b.n	801832c <__multiply+0x8c>
 80183c4:	46e0      	mov	r8, ip
 80183c6:	e7dd      	b.n	8018384 <__multiply+0xe4>
 80183c8:	3e01      	subs	r6, #1
 80183ca:	e799      	b.n	8018300 <__multiply+0x60>

080183cc <__pow5mult>:
 80183cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183d0:	4615      	mov	r5, r2
 80183d2:	f012 0203 	ands.w	r2, r2, #3
 80183d6:	4606      	mov	r6, r0
 80183d8:	460f      	mov	r7, r1
 80183da:	d007      	beq.n	80183ec <__pow5mult+0x20>
 80183dc:	3a01      	subs	r2, #1
 80183de:	4c21      	ldr	r4, [pc, #132]	; (8018464 <__pow5mult+0x98>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80183e6:	f7ff fe8b 	bl	8018100 <__multadd>
 80183ea:	4607      	mov	r7, r0
 80183ec:	10ad      	asrs	r5, r5, #2
 80183ee:	d035      	beq.n	801845c <__pow5mult+0x90>
 80183f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80183f2:	b93c      	cbnz	r4, 8018404 <__pow5mult+0x38>
 80183f4:	2010      	movs	r0, #16
 80183f6:	f7ff fe13 	bl	8018020 <malloc>
 80183fa:	6270      	str	r0, [r6, #36]	; 0x24
 80183fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018400:	6004      	str	r4, [r0, #0]
 8018402:	60c4      	str	r4, [r0, #12]
 8018404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801840c:	b94c      	cbnz	r4, 8018422 <__pow5mult+0x56>
 801840e:	f240 2171 	movw	r1, #625	; 0x271
 8018412:	4630      	mov	r0, r6
 8018414:	f7ff ff3b 	bl	801828e <__i2b>
 8018418:	2300      	movs	r3, #0
 801841a:	f8c8 0008 	str.w	r0, [r8, #8]
 801841e:	4604      	mov	r4, r0
 8018420:	6003      	str	r3, [r0, #0]
 8018422:	f04f 0800 	mov.w	r8, #0
 8018426:	07eb      	lsls	r3, r5, #31
 8018428:	d50a      	bpl.n	8018440 <__pow5mult+0x74>
 801842a:	4639      	mov	r1, r7
 801842c:	4622      	mov	r2, r4
 801842e:	4630      	mov	r0, r6
 8018430:	f7ff ff36 	bl	80182a0 <__multiply>
 8018434:	4639      	mov	r1, r7
 8018436:	4681      	mov	r9, r0
 8018438:	4630      	mov	r0, r6
 801843a:	f7ff fe4a 	bl	80180d2 <_Bfree>
 801843e:	464f      	mov	r7, r9
 8018440:	106d      	asrs	r5, r5, #1
 8018442:	d00b      	beq.n	801845c <__pow5mult+0x90>
 8018444:	6820      	ldr	r0, [r4, #0]
 8018446:	b938      	cbnz	r0, 8018458 <__pow5mult+0x8c>
 8018448:	4622      	mov	r2, r4
 801844a:	4621      	mov	r1, r4
 801844c:	4630      	mov	r0, r6
 801844e:	f7ff ff27 	bl	80182a0 <__multiply>
 8018452:	6020      	str	r0, [r4, #0]
 8018454:	f8c0 8000 	str.w	r8, [r0]
 8018458:	4604      	mov	r4, r0
 801845a:	e7e4      	b.n	8018426 <__pow5mult+0x5a>
 801845c:	4638      	mov	r0, r7
 801845e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018462:	bf00      	nop
 8018464:	08019dd8 	.word	0x08019dd8

08018468 <__lshift>:
 8018468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801846c:	460c      	mov	r4, r1
 801846e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018472:	6923      	ldr	r3, [r4, #16]
 8018474:	6849      	ldr	r1, [r1, #4]
 8018476:	eb0a 0903 	add.w	r9, sl, r3
 801847a:	68a3      	ldr	r3, [r4, #8]
 801847c:	4607      	mov	r7, r0
 801847e:	4616      	mov	r6, r2
 8018480:	f109 0501 	add.w	r5, r9, #1
 8018484:	42ab      	cmp	r3, r5
 8018486:	db32      	blt.n	80184ee <__lshift+0x86>
 8018488:	4638      	mov	r0, r7
 801848a:	f7ff fdee 	bl	801806a <_Balloc>
 801848e:	2300      	movs	r3, #0
 8018490:	4680      	mov	r8, r0
 8018492:	f100 0114 	add.w	r1, r0, #20
 8018496:	461a      	mov	r2, r3
 8018498:	4553      	cmp	r3, sl
 801849a:	db2b      	blt.n	80184f4 <__lshift+0x8c>
 801849c:	6920      	ldr	r0, [r4, #16]
 801849e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80184a2:	f104 0314 	add.w	r3, r4, #20
 80184a6:	f016 021f 	ands.w	r2, r6, #31
 80184aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80184ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80184b2:	d025      	beq.n	8018500 <__lshift+0x98>
 80184b4:	f1c2 0e20 	rsb	lr, r2, #32
 80184b8:	2000      	movs	r0, #0
 80184ba:	681e      	ldr	r6, [r3, #0]
 80184bc:	468a      	mov	sl, r1
 80184be:	4096      	lsls	r6, r2
 80184c0:	4330      	orrs	r0, r6
 80184c2:	f84a 0b04 	str.w	r0, [sl], #4
 80184c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80184ca:	459c      	cmp	ip, r3
 80184cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80184d0:	d814      	bhi.n	80184fc <__lshift+0x94>
 80184d2:	6048      	str	r0, [r1, #4]
 80184d4:	b108      	cbz	r0, 80184da <__lshift+0x72>
 80184d6:	f109 0502 	add.w	r5, r9, #2
 80184da:	3d01      	subs	r5, #1
 80184dc:	4638      	mov	r0, r7
 80184de:	f8c8 5010 	str.w	r5, [r8, #16]
 80184e2:	4621      	mov	r1, r4
 80184e4:	f7ff fdf5 	bl	80180d2 <_Bfree>
 80184e8:	4640      	mov	r0, r8
 80184ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ee:	3101      	adds	r1, #1
 80184f0:	005b      	lsls	r3, r3, #1
 80184f2:	e7c7      	b.n	8018484 <__lshift+0x1c>
 80184f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80184f8:	3301      	adds	r3, #1
 80184fa:	e7cd      	b.n	8018498 <__lshift+0x30>
 80184fc:	4651      	mov	r1, sl
 80184fe:	e7dc      	b.n	80184ba <__lshift+0x52>
 8018500:	3904      	subs	r1, #4
 8018502:	f853 2b04 	ldr.w	r2, [r3], #4
 8018506:	f841 2f04 	str.w	r2, [r1, #4]!
 801850a:	459c      	cmp	ip, r3
 801850c:	d8f9      	bhi.n	8018502 <__lshift+0x9a>
 801850e:	e7e4      	b.n	80184da <__lshift+0x72>

08018510 <__mcmp>:
 8018510:	6903      	ldr	r3, [r0, #16]
 8018512:	690a      	ldr	r2, [r1, #16]
 8018514:	1a9b      	subs	r3, r3, r2
 8018516:	b530      	push	{r4, r5, lr}
 8018518:	d10c      	bne.n	8018534 <__mcmp+0x24>
 801851a:	0092      	lsls	r2, r2, #2
 801851c:	3014      	adds	r0, #20
 801851e:	3114      	adds	r1, #20
 8018520:	1884      	adds	r4, r0, r2
 8018522:	4411      	add	r1, r2
 8018524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801852c:	4295      	cmp	r5, r2
 801852e:	d003      	beq.n	8018538 <__mcmp+0x28>
 8018530:	d305      	bcc.n	801853e <__mcmp+0x2e>
 8018532:	2301      	movs	r3, #1
 8018534:	4618      	mov	r0, r3
 8018536:	bd30      	pop	{r4, r5, pc}
 8018538:	42a0      	cmp	r0, r4
 801853a:	d3f3      	bcc.n	8018524 <__mcmp+0x14>
 801853c:	e7fa      	b.n	8018534 <__mcmp+0x24>
 801853e:	f04f 33ff 	mov.w	r3, #4294967295
 8018542:	e7f7      	b.n	8018534 <__mcmp+0x24>

08018544 <__mdiff>:
 8018544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018548:	460d      	mov	r5, r1
 801854a:	4607      	mov	r7, r0
 801854c:	4611      	mov	r1, r2
 801854e:	4628      	mov	r0, r5
 8018550:	4614      	mov	r4, r2
 8018552:	f7ff ffdd 	bl	8018510 <__mcmp>
 8018556:	1e06      	subs	r6, r0, #0
 8018558:	d108      	bne.n	801856c <__mdiff+0x28>
 801855a:	4631      	mov	r1, r6
 801855c:	4638      	mov	r0, r7
 801855e:	f7ff fd84 	bl	801806a <_Balloc>
 8018562:	2301      	movs	r3, #1
 8018564:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801856c:	bfa4      	itt	ge
 801856e:	4623      	movge	r3, r4
 8018570:	462c      	movge	r4, r5
 8018572:	4638      	mov	r0, r7
 8018574:	6861      	ldr	r1, [r4, #4]
 8018576:	bfa6      	itte	ge
 8018578:	461d      	movge	r5, r3
 801857a:	2600      	movge	r6, #0
 801857c:	2601      	movlt	r6, #1
 801857e:	f7ff fd74 	bl	801806a <_Balloc>
 8018582:	692b      	ldr	r3, [r5, #16]
 8018584:	60c6      	str	r6, [r0, #12]
 8018586:	6926      	ldr	r6, [r4, #16]
 8018588:	f105 0914 	add.w	r9, r5, #20
 801858c:	f104 0214 	add.w	r2, r4, #20
 8018590:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018594:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018598:	f100 0514 	add.w	r5, r0, #20
 801859c:	f04f 0e00 	mov.w	lr, #0
 80185a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80185a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80185a8:	fa1e f18a 	uxtah	r1, lr, sl
 80185ac:	b2a3      	uxth	r3, r4
 80185ae:	1ac9      	subs	r1, r1, r3
 80185b0:	0c23      	lsrs	r3, r4, #16
 80185b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80185b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80185ba:	b289      	uxth	r1, r1
 80185bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80185c0:	45c8      	cmp	r8, r9
 80185c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80185c6:	4694      	mov	ip, r2
 80185c8:	f845 3b04 	str.w	r3, [r5], #4
 80185cc:	d8e8      	bhi.n	80185a0 <__mdiff+0x5c>
 80185ce:	45bc      	cmp	ip, r7
 80185d0:	d304      	bcc.n	80185dc <__mdiff+0x98>
 80185d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80185d6:	b183      	cbz	r3, 80185fa <__mdiff+0xb6>
 80185d8:	6106      	str	r6, [r0, #16]
 80185da:	e7c5      	b.n	8018568 <__mdiff+0x24>
 80185dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80185e0:	fa1e f381 	uxtah	r3, lr, r1
 80185e4:	141a      	asrs	r2, r3, #16
 80185e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80185f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80185f4:	f845 3b04 	str.w	r3, [r5], #4
 80185f8:	e7e9      	b.n	80185ce <__mdiff+0x8a>
 80185fa:	3e01      	subs	r6, #1
 80185fc:	e7e9      	b.n	80185d2 <__mdiff+0x8e>
	...

08018600 <__ulp>:
 8018600:	4b12      	ldr	r3, [pc, #72]	; (801864c <__ulp+0x4c>)
 8018602:	ee10 2a90 	vmov	r2, s1
 8018606:	401a      	ands	r2, r3
 8018608:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801860c:	2b00      	cmp	r3, #0
 801860e:	dd04      	ble.n	801861a <__ulp+0x1a>
 8018610:	2000      	movs	r0, #0
 8018612:	4619      	mov	r1, r3
 8018614:	ec41 0b10 	vmov	d0, r0, r1
 8018618:	4770      	bx	lr
 801861a:	425b      	negs	r3, r3
 801861c:	151b      	asrs	r3, r3, #20
 801861e:	2b13      	cmp	r3, #19
 8018620:	f04f 0000 	mov.w	r0, #0
 8018624:	f04f 0100 	mov.w	r1, #0
 8018628:	dc04      	bgt.n	8018634 <__ulp+0x34>
 801862a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801862e:	fa42 f103 	asr.w	r1, r2, r3
 8018632:	e7ef      	b.n	8018614 <__ulp+0x14>
 8018634:	3b14      	subs	r3, #20
 8018636:	2b1e      	cmp	r3, #30
 8018638:	f04f 0201 	mov.w	r2, #1
 801863c:	bfda      	itte	le
 801863e:	f1c3 031f 	rsble	r3, r3, #31
 8018642:	fa02 f303 	lslle.w	r3, r2, r3
 8018646:	4613      	movgt	r3, r2
 8018648:	4618      	mov	r0, r3
 801864a:	e7e3      	b.n	8018614 <__ulp+0x14>
 801864c:	7ff00000 	.word	0x7ff00000

08018650 <__b2d>:
 8018650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018652:	6905      	ldr	r5, [r0, #16]
 8018654:	f100 0714 	add.w	r7, r0, #20
 8018658:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801865c:	1f2e      	subs	r6, r5, #4
 801865e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018662:	4620      	mov	r0, r4
 8018664:	f7ff fdc5 	bl	80181f2 <__hi0bits>
 8018668:	f1c0 0320 	rsb	r3, r0, #32
 801866c:	280a      	cmp	r0, #10
 801866e:	600b      	str	r3, [r1, #0]
 8018670:	f8df c074 	ldr.w	ip, [pc, #116]	; 80186e8 <__b2d+0x98>
 8018674:	dc14      	bgt.n	80186a0 <__b2d+0x50>
 8018676:	f1c0 0e0b 	rsb	lr, r0, #11
 801867a:	fa24 f10e 	lsr.w	r1, r4, lr
 801867e:	42b7      	cmp	r7, r6
 8018680:	ea41 030c 	orr.w	r3, r1, ip
 8018684:	bf34      	ite	cc
 8018686:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801868a:	2100      	movcs	r1, #0
 801868c:	3015      	adds	r0, #21
 801868e:	fa04 f000 	lsl.w	r0, r4, r0
 8018692:	fa21 f10e 	lsr.w	r1, r1, lr
 8018696:	ea40 0201 	orr.w	r2, r0, r1
 801869a:	ec43 2b10 	vmov	d0, r2, r3
 801869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186a0:	42b7      	cmp	r7, r6
 80186a2:	bf3a      	itte	cc
 80186a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80186a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80186ac:	2100      	movcs	r1, #0
 80186ae:	380b      	subs	r0, #11
 80186b0:	d015      	beq.n	80186de <__b2d+0x8e>
 80186b2:	4084      	lsls	r4, r0
 80186b4:	f1c0 0520 	rsb	r5, r0, #32
 80186b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80186bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80186c0:	42be      	cmp	r6, r7
 80186c2:	fa21 fc05 	lsr.w	ip, r1, r5
 80186c6:	ea44 030c 	orr.w	r3, r4, ip
 80186ca:	bf8c      	ite	hi
 80186cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80186d0:	2400      	movls	r4, #0
 80186d2:	fa01 f000 	lsl.w	r0, r1, r0
 80186d6:	40ec      	lsrs	r4, r5
 80186d8:	ea40 0204 	orr.w	r2, r0, r4
 80186dc:	e7dd      	b.n	801869a <__b2d+0x4a>
 80186de:	ea44 030c 	orr.w	r3, r4, ip
 80186e2:	460a      	mov	r2, r1
 80186e4:	e7d9      	b.n	801869a <__b2d+0x4a>
 80186e6:	bf00      	nop
 80186e8:	3ff00000 	.word	0x3ff00000

080186ec <__d2b>:
 80186ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186f0:	460e      	mov	r6, r1
 80186f2:	2101      	movs	r1, #1
 80186f4:	ec59 8b10 	vmov	r8, r9, d0
 80186f8:	4615      	mov	r5, r2
 80186fa:	f7ff fcb6 	bl	801806a <_Balloc>
 80186fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018702:	4607      	mov	r7, r0
 8018704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018708:	bb34      	cbnz	r4, 8018758 <__d2b+0x6c>
 801870a:	9301      	str	r3, [sp, #4]
 801870c:	f1b8 0300 	subs.w	r3, r8, #0
 8018710:	d027      	beq.n	8018762 <__d2b+0x76>
 8018712:	a802      	add	r0, sp, #8
 8018714:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018718:	f7ff fd8a 	bl	8018230 <__lo0bits>
 801871c:	9900      	ldr	r1, [sp, #0]
 801871e:	b1f0      	cbz	r0, 801875e <__d2b+0x72>
 8018720:	9a01      	ldr	r2, [sp, #4]
 8018722:	f1c0 0320 	rsb	r3, r0, #32
 8018726:	fa02 f303 	lsl.w	r3, r2, r3
 801872a:	430b      	orrs	r3, r1
 801872c:	40c2      	lsrs	r2, r0
 801872e:	617b      	str	r3, [r7, #20]
 8018730:	9201      	str	r2, [sp, #4]
 8018732:	9b01      	ldr	r3, [sp, #4]
 8018734:	61bb      	str	r3, [r7, #24]
 8018736:	2b00      	cmp	r3, #0
 8018738:	bf14      	ite	ne
 801873a:	2102      	movne	r1, #2
 801873c:	2101      	moveq	r1, #1
 801873e:	6139      	str	r1, [r7, #16]
 8018740:	b1c4      	cbz	r4, 8018774 <__d2b+0x88>
 8018742:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018746:	4404      	add	r4, r0
 8018748:	6034      	str	r4, [r6, #0]
 801874a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801874e:	6028      	str	r0, [r5, #0]
 8018750:	4638      	mov	r0, r7
 8018752:	b003      	add	sp, #12
 8018754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801875c:	e7d5      	b.n	801870a <__d2b+0x1e>
 801875e:	6179      	str	r1, [r7, #20]
 8018760:	e7e7      	b.n	8018732 <__d2b+0x46>
 8018762:	a801      	add	r0, sp, #4
 8018764:	f7ff fd64 	bl	8018230 <__lo0bits>
 8018768:	9b01      	ldr	r3, [sp, #4]
 801876a:	617b      	str	r3, [r7, #20]
 801876c:	2101      	movs	r1, #1
 801876e:	6139      	str	r1, [r7, #16]
 8018770:	3020      	adds	r0, #32
 8018772:	e7e5      	b.n	8018740 <__d2b+0x54>
 8018774:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801877c:	6030      	str	r0, [r6, #0]
 801877e:	6918      	ldr	r0, [r3, #16]
 8018780:	f7ff fd37 	bl	80181f2 <__hi0bits>
 8018784:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018788:	e7e1      	b.n	801874e <__d2b+0x62>

0801878a <__ratio>:
 801878a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878e:	4688      	mov	r8, r1
 8018790:	4669      	mov	r1, sp
 8018792:	4681      	mov	r9, r0
 8018794:	f7ff ff5c 	bl	8018650 <__b2d>
 8018798:	a901      	add	r1, sp, #4
 801879a:	4640      	mov	r0, r8
 801879c:	ec57 6b10 	vmov	r6, r7, d0
 80187a0:	f7ff ff56 	bl	8018650 <__b2d>
 80187a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80187ac:	eba3 0c02 	sub.w	ip, r3, r2
 80187b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80187b4:	1a9b      	subs	r3, r3, r2
 80187b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80187ba:	ec5b ab10 	vmov	sl, fp, d0
 80187be:	2b00      	cmp	r3, #0
 80187c0:	bfce      	itee	gt
 80187c2:	463a      	movgt	r2, r7
 80187c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80187c8:	465a      	movle	r2, fp
 80187ca:	4659      	mov	r1, fp
 80187cc:	463d      	mov	r5, r7
 80187ce:	bfd4      	ite	le
 80187d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80187d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80187d8:	4630      	mov	r0, r6
 80187da:	ee10 2a10 	vmov	r2, s0
 80187de:	460b      	mov	r3, r1
 80187e0:	4629      	mov	r1, r5
 80187e2:	f7e8 f84b 	bl	800087c <__aeabi_ddiv>
 80187e6:	ec41 0b10 	vmov	d0, r0, r1
 80187ea:	b003      	add	sp, #12
 80187ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187f0 <__copybits>:
 80187f0:	3901      	subs	r1, #1
 80187f2:	b510      	push	{r4, lr}
 80187f4:	1149      	asrs	r1, r1, #5
 80187f6:	6914      	ldr	r4, [r2, #16]
 80187f8:	3101      	adds	r1, #1
 80187fa:	f102 0314 	add.w	r3, r2, #20
 80187fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018806:	42a3      	cmp	r3, r4
 8018808:	4602      	mov	r2, r0
 801880a:	d303      	bcc.n	8018814 <__copybits+0x24>
 801880c:	2300      	movs	r3, #0
 801880e:	428a      	cmp	r2, r1
 8018810:	d305      	bcc.n	801881e <__copybits+0x2e>
 8018812:	bd10      	pop	{r4, pc}
 8018814:	f853 2b04 	ldr.w	r2, [r3], #4
 8018818:	f840 2b04 	str.w	r2, [r0], #4
 801881c:	e7f3      	b.n	8018806 <__copybits+0x16>
 801881e:	f842 3b04 	str.w	r3, [r2], #4
 8018822:	e7f4      	b.n	801880e <__copybits+0x1e>

08018824 <__any_on>:
 8018824:	f100 0214 	add.w	r2, r0, #20
 8018828:	6900      	ldr	r0, [r0, #16]
 801882a:	114b      	asrs	r3, r1, #5
 801882c:	4298      	cmp	r0, r3
 801882e:	b510      	push	{r4, lr}
 8018830:	db11      	blt.n	8018856 <__any_on+0x32>
 8018832:	dd0a      	ble.n	801884a <__any_on+0x26>
 8018834:	f011 011f 	ands.w	r1, r1, #31
 8018838:	d007      	beq.n	801884a <__any_on+0x26>
 801883a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801883e:	fa24 f001 	lsr.w	r0, r4, r1
 8018842:	fa00 f101 	lsl.w	r1, r0, r1
 8018846:	428c      	cmp	r4, r1
 8018848:	d10b      	bne.n	8018862 <__any_on+0x3e>
 801884a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801884e:	4293      	cmp	r3, r2
 8018850:	d803      	bhi.n	801885a <__any_on+0x36>
 8018852:	2000      	movs	r0, #0
 8018854:	bd10      	pop	{r4, pc}
 8018856:	4603      	mov	r3, r0
 8018858:	e7f7      	b.n	801884a <__any_on+0x26>
 801885a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801885e:	2900      	cmp	r1, #0
 8018860:	d0f5      	beq.n	801884e <__any_on+0x2a>
 8018862:	2001      	movs	r0, #1
 8018864:	e7f6      	b.n	8018854 <__any_on+0x30>

08018866 <_calloc_r>:
 8018866:	b538      	push	{r3, r4, r5, lr}
 8018868:	fb02 f401 	mul.w	r4, r2, r1
 801886c:	4621      	mov	r1, r4
 801886e:	f000 f857 	bl	8018920 <_malloc_r>
 8018872:	4605      	mov	r5, r0
 8018874:	b118      	cbz	r0, 801887e <_calloc_r+0x18>
 8018876:	4622      	mov	r2, r4
 8018878:	2100      	movs	r1, #0
 801887a:	f7fc fca1 	bl	80151c0 <memset>
 801887e:	4628      	mov	r0, r5
 8018880:	bd38      	pop	{r3, r4, r5, pc}
	...

08018884 <_free_r>:
 8018884:	b538      	push	{r3, r4, r5, lr}
 8018886:	4605      	mov	r5, r0
 8018888:	2900      	cmp	r1, #0
 801888a:	d045      	beq.n	8018918 <_free_r+0x94>
 801888c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018890:	1f0c      	subs	r4, r1, #4
 8018892:	2b00      	cmp	r3, #0
 8018894:	bfb8      	it	lt
 8018896:	18e4      	addlt	r4, r4, r3
 8018898:	f000 fe30 	bl	80194fc <__malloc_lock>
 801889c:	4a1f      	ldr	r2, [pc, #124]	; (801891c <_free_r+0x98>)
 801889e:	6813      	ldr	r3, [r2, #0]
 80188a0:	4610      	mov	r0, r2
 80188a2:	b933      	cbnz	r3, 80188b2 <_free_r+0x2e>
 80188a4:	6063      	str	r3, [r4, #4]
 80188a6:	6014      	str	r4, [r2, #0]
 80188a8:	4628      	mov	r0, r5
 80188aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188ae:	f000 be26 	b.w	80194fe <__malloc_unlock>
 80188b2:	42a3      	cmp	r3, r4
 80188b4:	d90c      	bls.n	80188d0 <_free_r+0x4c>
 80188b6:	6821      	ldr	r1, [r4, #0]
 80188b8:	1862      	adds	r2, r4, r1
 80188ba:	4293      	cmp	r3, r2
 80188bc:	bf04      	itt	eq
 80188be:	681a      	ldreq	r2, [r3, #0]
 80188c0:	685b      	ldreq	r3, [r3, #4]
 80188c2:	6063      	str	r3, [r4, #4]
 80188c4:	bf04      	itt	eq
 80188c6:	1852      	addeq	r2, r2, r1
 80188c8:	6022      	streq	r2, [r4, #0]
 80188ca:	6004      	str	r4, [r0, #0]
 80188cc:	e7ec      	b.n	80188a8 <_free_r+0x24>
 80188ce:	4613      	mov	r3, r2
 80188d0:	685a      	ldr	r2, [r3, #4]
 80188d2:	b10a      	cbz	r2, 80188d8 <_free_r+0x54>
 80188d4:	42a2      	cmp	r2, r4
 80188d6:	d9fa      	bls.n	80188ce <_free_r+0x4a>
 80188d8:	6819      	ldr	r1, [r3, #0]
 80188da:	1858      	adds	r0, r3, r1
 80188dc:	42a0      	cmp	r0, r4
 80188de:	d10b      	bne.n	80188f8 <_free_r+0x74>
 80188e0:	6820      	ldr	r0, [r4, #0]
 80188e2:	4401      	add	r1, r0
 80188e4:	1858      	adds	r0, r3, r1
 80188e6:	4282      	cmp	r2, r0
 80188e8:	6019      	str	r1, [r3, #0]
 80188ea:	d1dd      	bne.n	80188a8 <_free_r+0x24>
 80188ec:	6810      	ldr	r0, [r2, #0]
 80188ee:	6852      	ldr	r2, [r2, #4]
 80188f0:	605a      	str	r2, [r3, #4]
 80188f2:	4401      	add	r1, r0
 80188f4:	6019      	str	r1, [r3, #0]
 80188f6:	e7d7      	b.n	80188a8 <_free_r+0x24>
 80188f8:	d902      	bls.n	8018900 <_free_r+0x7c>
 80188fa:	230c      	movs	r3, #12
 80188fc:	602b      	str	r3, [r5, #0]
 80188fe:	e7d3      	b.n	80188a8 <_free_r+0x24>
 8018900:	6820      	ldr	r0, [r4, #0]
 8018902:	1821      	adds	r1, r4, r0
 8018904:	428a      	cmp	r2, r1
 8018906:	bf04      	itt	eq
 8018908:	6811      	ldreq	r1, [r2, #0]
 801890a:	6852      	ldreq	r2, [r2, #4]
 801890c:	6062      	str	r2, [r4, #4]
 801890e:	bf04      	itt	eq
 8018910:	1809      	addeq	r1, r1, r0
 8018912:	6021      	streq	r1, [r4, #0]
 8018914:	605c      	str	r4, [r3, #4]
 8018916:	e7c7      	b.n	80188a8 <_free_r+0x24>
 8018918:	bd38      	pop	{r3, r4, r5, pc}
 801891a:	bf00      	nop
 801891c:	200422e8 	.word	0x200422e8

08018920 <_malloc_r>:
 8018920:	b570      	push	{r4, r5, r6, lr}
 8018922:	1ccd      	adds	r5, r1, #3
 8018924:	f025 0503 	bic.w	r5, r5, #3
 8018928:	3508      	adds	r5, #8
 801892a:	2d0c      	cmp	r5, #12
 801892c:	bf38      	it	cc
 801892e:	250c      	movcc	r5, #12
 8018930:	2d00      	cmp	r5, #0
 8018932:	4606      	mov	r6, r0
 8018934:	db01      	blt.n	801893a <_malloc_r+0x1a>
 8018936:	42a9      	cmp	r1, r5
 8018938:	d903      	bls.n	8018942 <_malloc_r+0x22>
 801893a:	230c      	movs	r3, #12
 801893c:	6033      	str	r3, [r6, #0]
 801893e:	2000      	movs	r0, #0
 8018940:	bd70      	pop	{r4, r5, r6, pc}
 8018942:	f000 fddb 	bl	80194fc <__malloc_lock>
 8018946:	4a21      	ldr	r2, [pc, #132]	; (80189cc <_malloc_r+0xac>)
 8018948:	6814      	ldr	r4, [r2, #0]
 801894a:	4621      	mov	r1, r4
 801894c:	b991      	cbnz	r1, 8018974 <_malloc_r+0x54>
 801894e:	4c20      	ldr	r4, [pc, #128]	; (80189d0 <_malloc_r+0xb0>)
 8018950:	6823      	ldr	r3, [r4, #0]
 8018952:	b91b      	cbnz	r3, 801895c <_malloc_r+0x3c>
 8018954:	4630      	mov	r0, r6
 8018956:	f000 fc91 	bl	801927c <_sbrk_r>
 801895a:	6020      	str	r0, [r4, #0]
 801895c:	4629      	mov	r1, r5
 801895e:	4630      	mov	r0, r6
 8018960:	f000 fc8c 	bl	801927c <_sbrk_r>
 8018964:	1c43      	adds	r3, r0, #1
 8018966:	d124      	bne.n	80189b2 <_malloc_r+0x92>
 8018968:	230c      	movs	r3, #12
 801896a:	6033      	str	r3, [r6, #0]
 801896c:	4630      	mov	r0, r6
 801896e:	f000 fdc6 	bl	80194fe <__malloc_unlock>
 8018972:	e7e4      	b.n	801893e <_malloc_r+0x1e>
 8018974:	680b      	ldr	r3, [r1, #0]
 8018976:	1b5b      	subs	r3, r3, r5
 8018978:	d418      	bmi.n	80189ac <_malloc_r+0x8c>
 801897a:	2b0b      	cmp	r3, #11
 801897c:	d90f      	bls.n	801899e <_malloc_r+0x7e>
 801897e:	600b      	str	r3, [r1, #0]
 8018980:	50cd      	str	r5, [r1, r3]
 8018982:	18cc      	adds	r4, r1, r3
 8018984:	4630      	mov	r0, r6
 8018986:	f000 fdba 	bl	80194fe <__malloc_unlock>
 801898a:	f104 000b 	add.w	r0, r4, #11
 801898e:	1d23      	adds	r3, r4, #4
 8018990:	f020 0007 	bic.w	r0, r0, #7
 8018994:	1ac3      	subs	r3, r0, r3
 8018996:	d0d3      	beq.n	8018940 <_malloc_r+0x20>
 8018998:	425a      	negs	r2, r3
 801899a:	50e2      	str	r2, [r4, r3]
 801899c:	e7d0      	b.n	8018940 <_malloc_r+0x20>
 801899e:	428c      	cmp	r4, r1
 80189a0:	684b      	ldr	r3, [r1, #4]
 80189a2:	bf16      	itet	ne
 80189a4:	6063      	strne	r3, [r4, #4]
 80189a6:	6013      	streq	r3, [r2, #0]
 80189a8:	460c      	movne	r4, r1
 80189aa:	e7eb      	b.n	8018984 <_malloc_r+0x64>
 80189ac:	460c      	mov	r4, r1
 80189ae:	6849      	ldr	r1, [r1, #4]
 80189b0:	e7cc      	b.n	801894c <_malloc_r+0x2c>
 80189b2:	1cc4      	adds	r4, r0, #3
 80189b4:	f024 0403 	bic.w	r4, r4, #3
 80189b8:	42a0      	cmp	r0, r4
 80189ba:	d005      	beq.n	80189c8 <_malloc_r+0xa8>
 80189bc:	1a21      	subs	r1, r4, r0
 80189be:	4630      	mov	r0, r6
 80189c0:	f000 fc5c 	bl	801927c <_sbrk_r>
 80189c4:	3001      	adds	r0, #1
 80189c6:	d0cf      	beq.n	8018968 <_malloc_r+0x48>
 80189c8:	6025      	str	r5, [r4, #0]
 80189ca:	e7db      	b.n	8018984 <_malloc_r+0x64>
 80189cc:	200422e8 	.word	0x200422e8
 80189d0:	200422ec 	.word	0x200422ec

080189d4 <__ssputs_r>:
 80189d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189d8:	688e      	ldr	r6, [r1, #8]
 80189da:	429e      	cmp	r6, r3
 80189dc:	4682      	mov	sl, r0
 80189de:	460c      	mov	r4, r1
 80189e0:	4690      	mov	r8, r2
 80189e2:	4699      	mov	r9, r3
 80189e4:	d837      	bhi.n	8018a56 <__ssputs_r+0x82>
 80189e6:	898a      	ldrh	r2, [r1, #12]
 80189e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80189ec:	d031      	beq.n	8018a52 <__ssputs_r+0x7e>
 80189ee:	6825      	ldr	r5, [r4, #0]
 80189f0:	6909      	ldr	r1, [r1, #16]
 80189f2:	1a6f      	subs	r7, r5, r1
 80189f4:	6965      	ldr	r5, [r4, #20]
 80189f6:	2302      	movs	r3, #2
 80189f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8018a00:	f109 0301 	add.w	r3, r9, #1
 8018a04:	443b      	add	r3, r7
 8018a06:	429d      	cmp	r5, r3
 8018a08:	bf38      	it	cc
 8018a0a:	461d      	movcc	r5, r3
 8018a0c:	0553      	lsls	r3, r2, #21
 8018a0e:	d530      	bpl.n	8018a72 <__ssputs_r+0x9e>
 8018a10:	4629      	mov	r1, r5
 8018a12:	f7ff ff85 	bl	8018920 <_malloc_r>
 8018a16:	4606      	mov	r6, r0
 8018a18:	b950      	cbnz	r0, 8018a30 <__ssputs_r+0x5c>
 8018a1a:	230c      	movs	r3, #12
 8018a1c:	f8ca 3000 	str.w	r3, [sl]
 8018a20:	89a3      	ldrh	r3, [r4, #12]
 8018a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a26:	81a3      	strh	r3, [r4, #12]
 8018a28:	f04f 30ff 	mov.w	r0, #4294967295
 8018a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a30:	463a      	mov	r2, r7
 8018a32:	6921      	ldr	r1, [r4, #16]
 8018a34:	f7ff fb0e 	bl	8018054 <memcpy>
 8018a38:	89a3      	ldrh	r3, [r4, #12]
 8018a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a42:	81a3      	strh	r3, [r4, #12]
 8018a44:	6126      	str	r6, [r4, #16]
 8018a46:	6165      	str	r5, [r4, #20]
 8018a48:	443e      	add	r6, r7
 8018a4a:	1bed      	subs	r5, r5, r7
 8018a4c:	6026      	str	r6, [r4, #0]
 8018a4e:	60a5      	str	r5, [r4, #8]
 8018a50:	464e      	mov	r6, r9
 8018a52:	454e      	cmp	r6, r9
 8018a54:	d900      	bls.n	8018a58 <__ssputs_r+0x84>
 8018a56:	464e      	mov	r6, r9
 8018a58:	4632      	mov	r2, r6
 8018a5a:	4641      	mov	r1, r8
 8018a5c:	6820      	ldr	r0, [r4, #0]
 8018a5e:	f000 fd34 	bl	80194ca <memmove>
 8018a62:	68a3      	ldr	r3, [r4, #8]
 8018a64:	1b9b      	subs	r3, r3, r6
 8018a66:	60a3      	str	r3, [r4, #8]
 8018a68:	6823      	ldr	r3, [r4, #0]
 8018a6a:	441e      	add	r6, r3
 8018a6c:	6026      	str	r6, [r4, #0]
 8018a6e:	2000      	movs	r0, #0
 8018a70:	e7dc      	b.n	8018a2c <__ssputs_r+0x58>
 8018a72:	462a      	mov	r2, r5
 8018a74:	f000 fd44 	bl	8019500 <_realloc_r>
 8018a78:	4606      	mov	r6, r0
 8018a7a:	2800      	cmp	r0, #0
 8018a7c:	d1e2      	bne.n	8018a44 <__ssputs_r+0x70>
 8018a7e:	6921      	ldr	r1, [r4, #16]
 8018a80:	4650      	mov	r0, sl
 8018a82:	f7ff feff 	bl	8018884 <_free_r>
 8018a86:	e7c8      	b.n	8018a1a <__ssputs_r+0x46>

08018a88 <_svfiprintf_r>:
 8018a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a8c:	461d      	mov	r5, r3
 8018a8e:	898b      	ldrh	r3, [r1, #12]
 8018a90:	061f      	lsls	r7, r3, #24
 8018a92:	b09d      	sub	sp, #116	; 0x74
 8018a94:	4680      	mov	r8, r0
 8018a96:	460c      	mov	r4, r1
 8018a98:	4616      	mov	r6, r2
 8018a9a:	d50f      	bpl.n	8018abc <_svfiprintf_r+0x34>
 8018a9c:	690b      	ldr	r3, [r1, #16]
 8018a9e:	b96b      	cbnz	r3, 8018abc <_svfiprintf_r+0x34>
 8018aa0:	2140      	movs	r1, #64	; 0x40
 8018aa2:	f7ff ff3d 	bl	8018920 <_malloc_r>
 8018aa6:	6020      	str	r0, [r4, #0]
 8018aa8:	6120      	str	r0, [r4, #16]
 8018aaa:	b928      	cbnz	r0, 8018ab8 <_svfiprintf_r+0x30>
 8018aac:	230c      	movs	r3, #12
 8018aae:	f8c8 3000 	str.w	r3, [r8]
 8018ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ab6:	e0c8      	b.n	8018c4a <_svfiprintf_r+0x1c2>
 8018ab8:	2340      	movs	r3, #64	; 0x40
 8018aba:	6163      	str	r3, [r4, #20]
 8018abc:	2300      	movs	r3, #0
 8018abe:	9309      	str	r3, [sp, #36]	; 0x24
 8018ac0:	2320      	movs	r3, #32
 8018ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ac6:	2330      	movs	r3, #48	; 0x30
 8018ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018acc:	9503      	str	r5, [sp, #12]
 8018ace:	f04f 0b01 	mov.w	fp, #1
 8018ad2:	4637      	mov	r7, r6
 8018ad4:	463d      	mov	r5, r7
 8018ad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018ada:	b10b      	cbz	r3, 8018ae0 <_svfiprintf_r+0x58>
 8018adc:	2b25      	cmp	r3, #37	; 0x25
 8018ade:	d13e      	bne.n	8018b5e <_svfiprintf_r+0xd6>
 8018ae0:	ebb7 0a06 	subs.w	sl, r7, r6
 8018ae4:	d00b      	beq.n	8018afe <_svfiprintf_r+0x76>
 8018ae6:	4653      	mov	r3, sl
 8018ae8:	4632      	mov	r2, r6
 8018aea:	4621      	mov	r1, r4
 8018aec:	4640      	mov	r0, r8
 8018aee:	f7ff ff71 	bl	80189d4 <__ssputs_r>
 8018af2:	3001      	adds	r0, #1
 8018af4:	f000 80a4 	beq.w	8018c40 <_svfiprintf_r+0x1b8>
 8018af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018afa:	4453      	add	r3, sl
 8018afc:	9309      	str	r3, [sp, #36]	; 0x24
 8018afe:	783b      	ldrb	r3, [r7, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	f000 809d 	beq.w	8018c40 <_svfiprintf_r+0x1b8>
 8018b06:	2300      	movs	r3, #0
 8018b08:	f04f 32ff 	mov.w	r2, #4294967295
 8018b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b10:	9304      	str	r3, [sp, #16]
 8018b12:	9307      	str	r3, [sp, #28]
 8018b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b18:	931a      	str	r3, [sp, #104]	; 0x68
 8018b1a:	462f      	mov	r7, r5
 8018b1c:	2205      	movs	r2, #5
 8018b1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018b22:	4850      	ldr	r0, [pc, #320]	; (8018c64 <_svfiprintf_r+0x1dc>)
 8018b24:	f7e7 fb74 	bl	8000210 <memchr>
 8018b28:	9b04      	ldr	r3, [sp, #16]
 8018b2a:	b9d0      	cbnz	r0, 8018b62 <_svfiprintf_r+0xda>
 8018b2c:	06d9      	lsls	r1, r3, #27
 8018b2e:	bf44      	itt	mi
 8018b30:	2220      	movmi	r2, #32
 8018b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018b36:	071a      	lsls	r2, r3, #28
 8018b38:	bf44      	itt	mi
 8018b3a:	222b      	movmi	r2, #43	; 0x2b
 8018b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018b40:	782a      	ldrb	r2, [r5, #0]
 8018b42:	2a2a      	cmp	r2, #42	; 0x2a
 8018b44:	d015      	beq.n	8018b72 <_svfiprintf_r+0xea>
 8018b46:	9a07      	ldr	r2, [sp, #28]
 8018b48:	462f      	mov	r7, r5
 8018b4a:	2000      	movs	r0, #0
 8018b4c:	250a      	movs	r5, #10
 8018b4e:	4639      	mov	r1, r7
 8018b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b54:	3b30      	subs	r3, #48	; 0x30
 8018b56:	2b09      	cmp	r3, #9
 8018b58:	d94d      	bls.n	8018bf6 <_svfiprintf_r+0x16e>
 8018b5a:	b1b8      	cbz	r0, 8018b8c <_svfiprintf_r+0x104>
 8018b5c:	e00f      	b.n	8018b7e <_svfiprintf_r+0xf6>
 8018b5e:	462f      	mov	r7, r5
 8018b60:	e7b8      	b.n	8018ad4 <_svfiprintf_r+0x4c>
 8018b62:	4a40      	ldr	r2, [pc, #256]	; (8018c64 <_svfiprintf_r+0x1dc>)
 8018b64:	1a80      	subs	r0, r0, r2
 8018b66:	fa0b f000 	lsl.w	r0, fp, r0
 8018b6a:	4318      	orrs	r0, r3
 8018b6c:	9004      	str	r0, [sp, #16]
 8018b6e:	463d      	mov	r5, r7
 8018b70:	e7d3      	b.n	8018b1a <_svfiprintf_r+0x92>
 8018b72:	9a03      	ldr	r2, [sp, #12]
 8018b74:	1d11      	adds	r1, r2, #4
 8018b76:	6812      	ldr	r2, [r2, #0]
 8018b78:	9103      	str	r1, [sp, #12]
 8018b7a:	2a00      	cmp	r2, #0
 8018b7c:	db01      	blt.n	8018b82 <_svfiprintf_r+0xfa>
 8018b7e:	9207      	str	r2, [sp, #28]
 8018b80:	e004      	b.n	8018b8c <_svfiprintf_r+0x104>
 8018b82:	4252      	negs	r2, r2
 8018b84:	f043 0302 	orr.w	r3, r3, #2
 8018b88:	9207      	str	r2, [sp, #28]
 8018b8a:	9304      	str	r3, [sp, #16]
 8018b8c:	783b      	ldrb	r3, [r7, #0]
 8018b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8018b90:	d10c      	bne.n	8018bac <_svfiprintf_r+0x124>
 8018b92:	787b      	ldrb	r3, [r7, #1]
 8018b94:	2b2a      	cmp	r3, #42	; 0x2a
 8018b96:	d133      	bne.n	8018c00 <_svfiprintf_r+0x178>
 8018b98:	9b03      	ldr	r3, [sp, #12]
 8018b9a:	1d1a      	adds	r2, r3, #4
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	9203      	str	r2, [sp, #12]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	bfb8      	it	lt
 8018ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ba8:	3702      	adds	r7, #2
 8018baa:	9305      	str	r3, [sp, #20]
 8018bac:	4d2e      	ldr	r5, [pc, #184]	; (8018c68 <_svfiprintf_r+0x1e0>)
 8018bae:	7839      	ldrb	r1, [r7, #0]
 8018bb0:	2203      	movs	r2, #3
 8018bb2:	4628      	mov	r0, r5
 8018bb4:	f7e7 fb2c 	bl	8000210 <memchr>
 8018bb8:	b138      	cbz	r0, 8018bca <_svfiprintf_r+0x142>
 8018bba:	2340      	movs	r3, #64	; 0x40
 8018bbc:	1b40      	subs	r0, r0, r5
 8018bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8018bc2:	9b04      	ldr	r3, [sp, #16]
 8018bc4:	4303      	orrs	r3, r0
 8018bc6:	3701      	adds	r7, #1
 8018bc8:	9304      	str	r3, [sp, #16]
 8018bca:	7839      	ldrb	r1, [r7, #0]
 8018bcc:	4827      	ldr	r0, [pc, #156]	; (8018c6c <_svfiprintf_r+0x1e4>)
 8018bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bd2:	2206      	movs	r2, #6
 8018bd4:	1c7e      	adds	r6, r7, #1
 8018bd6:	f7e7 fb1b 	bl	8000210 <memchr>
 8018bda:	2800      	cmp	r0, #0
 8018bdc:	d038      	beq.n	8018c50 <_svfiprintf_r+0x1c8>
 8018bde:	4b24      	ldr	r3, [pc, #144]	; (8018c70 <_svfiprintf_r+0x1e8>)
 8018be0:	bb13      	cbnz	r3, 8018c28 <_svfiprintf_r+0x1a0>
 8018be2:	9b03      	ldr	r3, [sp, #12]
 8018be4:	3307      	adds	r3, #7
 8018be6:	f023 0307 	bic.w	r3, r3, #7
 8018bea:	3308      	adds	r3, #8
 8018bec:	9303      	str	r3, [sp, #12]
 8018bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bf0:	444b      	add	r3, r9
 8018bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8018bf4:	e76d      	b.n	8018ad2 <_svfiprintf_r+0x4a>
 8018bf6:	fb05 3202 	mla	r2, r5, r2, r3
 8018bfa:	2001      	movs	r0, #1
 8018bfc:	460f      	mov	r7, r1
 8018bfe:	e7a6      	b.n	8018b4e <_svfiprintf_r+0xc6>
 8018c00:	2300      	movs	r3, #0
 8018c02:	3701      	adds	r7, #1
 8018c04:	9305      	str	r3, [sp, #20]
 8018c06:	4619      	mov	r1, r3
 8018c08:	250a      	movs	r5, #10
 8018c0a:	4638      	mov	r0, r7
 8018c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c10:	3a30      	subs	r2, #48	; 0x30
 8018c12:	2a09      	cmp	r2, #9
 8018c14:	d903      	bls.n	8018c1e <_svfiprintf_r+0x196>
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d0c8      	beq.n	8018bac <_svfiprintf_r+0x124>
 8018c1a:	9105      	str	r1, [sp, #20]
 8018c1c:	e7c6      	b.n	8018bac <_svfiprintf_r+0x124>
 8018c1e:	fb05 2101 	mla	r1, r5, r1, r2
 8018c22:	2301      	movs	r3, #1
 8018c24:	4607      	mov	r7, r0
 8018c26:	e7f0      	b.n	8018c0a <_svfiprintf_r+0x182>
 8018c28:	ab03      	add	r3, sp, #12
 8018c2a:	9300      	str	r3, [sp, #0]
 8018c2c:	4622      	mov	r2, r4
 8018c2e:	4b11      	ldr	r3, [pc, #68]	; (8018c74 <_svfiprintf_r+0x1ec>)
 8018c30:	a904      	add	r1, sp, #16
 8018c32:	4640      	mov	r0, r8
 8018c34:	f7fc fb60 	bl	80152f8 <_printf_float>
 8018c38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018c3c:	4681      	mov	r9, r0
 8018c3e:	d1d6      	bne.n	8018bee <_svfiprintf_r+0x166>
 8018c40:	89a3      	ldrh	r3, [r4, #12]
 8018c42:	065b      	lsls	r3, r3, #25
 8018c44:	f53f af35 	bmi.w	8018ab2 <_svfiprintf_r+0x2a>
 8018c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c4a:	b01d      	add	sp, #116	; 0x74
 8018c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c50:	ab03      	add	r3, sp, #12
 8018c52:	9300      	str	r3, [sp, #0]
 8018c54:	4622      	mov	r2, r4
 8018c56:	4b07      	ldr	r3, [pc, #28]	; (8018c74 <_svfiprintf_r+0x1ec>)
 8018c58:	a904      	add	r1, sp, #16
 8018c5a:	4640      	mov	r0, r8
 8018c5c:	f7fc fe02 	bl	8015864 <_printf_i>
 8018c60:	e7ea      	b.n	8018c38 <_svfiprintf_r+0x1b0>
 8018c62:	bf00      	nop
 8018c64:	08019de4 	.word	0x08019de4
 8018c68:	08019dea 	.word	0x08019dea
 8018c6c:	08019dee 	.word	0x08019dee
 8018c70:	080152f9 	.word	0x080152f9
 8018c74:	080189d5 	.word	0x080189d5

08018c78 <_sungetc_r>:
 8018c78:	b538      	push	{r3, r4, r5, lr}
 8018c7a:	1c4b      	adds	r3, r1, #1
 8018c7c:	4614      	mov	r4, r2
 8018c7e:	d103      	bne.n	8018c88 <_sungetc_r+0x10>
 8018c80:	f04f 35ff 	mov.w	r5, #4294967295
 8018c84:	4628      	mov	r0, r5
 8018c86:	bd38      	pop	{r3, r4, r5, pc}
 8018c88:	8993      	ldrh	r3, [r2, #12]
 8018c8a:	f023 0320 	bic.w	r3, r3, #32
 8018c8e:	8193      	strh	r3, [r2, #12]
 8018c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c92:	6852      	ldr	r2, [r2, #4]
 8018c94:	b2cd      	uxtb	r5, r1
 8018c96:	b18b      	cbz	r3, 8018cbc <_sungetc_r+0x44>
 8018c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	dd08      	ble.n	8018cb0 <_sungetc_r+0x38>
 8018c9e:	6823      	ldr	r3, [r4, #0]
 8018ca0:	1e5a      	subs	r2, r3, #1
 8018ca2:	6022      	str	r2, [r4, #0]
 8018ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018ca8:	6863      	ldr	r3, [r4, #4]
 8018caa:	3301      	adds	r3, #1
 8018cac:	6063      	str	r3, [r4, #4]
 8018cae:	e7e9      	b.n	8018c84 <_sungetc_r+0xc>
 8018cb0:	4621      	mov	r1, r4
 8018cb2:	f000 fbc3 	bl	801943c <__submore>
 8018cb6:	2800      	cmp	r0, #0
 8018cb8:	d0f1      	beq.n	8018c9e <_sungetc_r+0x26>
 8018cba:	e7e1      	b.n	8018c80 <_sungetc_r+0x8>
 8018cbc:	6921      	ldr	r1, [r4, #16]
 8018cbe:	6823      	ldr	r3, [r4, #0]
 8018cc0:	b151      	cbz	r1, 8018cd8 <_sungetc_r+0x60>
 8018cc2:	4299      	cmp	r1, r3
 8018cc4:	d208      	bcs.n	8018cd8 <_sungetc_r+0x60>
 8018cc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018cca:	42a9      	cmp	r1, r5
 8018ccc:	d104      	bne.n	8018cd8 <_sungetc_r+0x60>
 8018cce:	3b01      	subs	r3, #1
 8018cd0:	3201      	adds	r2, #1
 8018cd2:	6023      	str	r3, [r4, #0]
 8018cd4:	6062      	str	r2, [r4, #4]
 8018cd6:	e7d5      	b.n	8018c84 <_sungetc_r+0xc>
 8018cd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8018ce2:	2303      	movs	r3, #3
 8018ce4:	63a3      	str	r3, [r4, #56]	; 0x38
 8018ce6:	4623      	mov	r3, r4
 8018ce8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018cec:	6023      	str	r3, [r4, #0]
 8018cee:	2301      	movs	r3, #1
 8018cf0:	e7dc      	b.n	8018cac <_sungetc_r+0x34>

08018cf2 <__ssrefill_r>:
 8018cf2:	b510      	push	{r4, lr}
 8018cf4:	460c      	mov	r4, r1
 8018cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018cf8:	b169      	cbz	r1, 8018d16 <__ssrefill_r+0x24>
 8018cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018cfe:	4299      	cmp	r1, r3
 8018d00:	d001      	beq.n	8018d06 <__ssrefill_r+0x14>
 8018d02:	f7ff fdbf 	bl	8018884 <_free_r>
 8018d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d08:	6063      	str	r3, [r4, #4]
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8018d0e:	b113      	cbz	r3, 8018d16 <__ssrefill_r+0x24>
 8018d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018d12:	6023      	str	r3, [r4, #0]
 8018d14:	bd10      	pop	{r4, pc}
 8018d16:	6923      	ldr	r3, [r4, #16]
 8018d18:	6023      	str	r3, [r4, #0]
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	6063      	str	r3, [r4, #4]
 8018d1e:	89a3      	ldrh	r3, [r4, #12]
 8018d20:	f043 0320 	orr.w	r3, r3, #32
 8018d24:	81a3      	strh	r3, [r4, #12]
 8018d26:	f04f 30ff 	mov.w	r0, #4294967295
 8018d2a:	e7f3      	b.n	8018d14 <__ssrefill_r+0x22>

08018d2c <__ssvfiscanf_r>:
 8018d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d30:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018d34:	460c      	mov	r4, r1
 8018d36:	2100      	movs	r1, #0
 8018d38:	9144      	str	r1, [sp, #272]	; 0x110
 8018d3a:	9145      	str	r1, [sp, #276]	; 0x114
 8018d3c:	499f      	ldr	r1, [pc, #636]	; (8018fbc <__ssvfiscanf_r+0x290>)
 8018d3e:	91a0      	str	r1, [sp, #640]	; 0x280
 8018d40:	f10d 0804 	add.w	r8, sp, #4
 8018d44:	499e      	ldr	r1, [pc, #632]	; (8018fc0 <__ssvfiscanf_r+0x294>)
 8018d46:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018fc4 <__ssvfiscanf_r+0x298>
 8018d4a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018d4e:	4606      	mov	r6, r0
 8018d50:	4692      	mov	sl, r2
 8018d52:	91a1      	str	r1, [sp, #644]	; 0x284
 8018d54:	9300      	str	r3, [sp, #0]
 8018d56:	270a      	movs	r7, #10
 8018d58:	f89a 3000 	ldrb.w	r3, [sl]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	f000 812a 	beq.w	8018fb6 <__ssvfiscanf_r+0x28a>
 8018d62:	4655      	mov	r5, sl
 8018d64:	f7ff f93e 	bl	8017fe4 <__locale_ctype_ptr>
 8018d68:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018d6c:	4458      	add	r0, fp
 8018d6e:	7843      	ldrb	r3, [r0, #1]
 8018d70:	f013 0308 	ands.w	r3, r3, #8
 8018d74:	d01c      	beq.n	8018db0 <__ssvfiscanf_r+0x84>
 8018d76:	6863      	ldr	r3, [r4, #4]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	dd12      	ble.n	8018da2 <__ssvfiscanf_r+0x76>
 8018d7c:	f7ff f932 	bl	8017fe4 <__locale_ctype_ptr>
 8018d80:	6823      	ldr	r3, [r4, #0]
 8018d82:	781a      	ldrb	r2, [r3, #0]
 8018d84:	4410      	add	r0, r2
 8018d86:	7842      	ldrb	r2, [r0, #1]
 8018d88:	0712      	lsls	r2, r2, #28
 8018d8a:	d401      	bmi.n	8018d90 <__ssvfiscanf_r+0x64>
 8018d8c:	46aa      	mov	sl, r5
 8018d8e:	e7e3      	b.n	8018d58 <__ssvfiscanf_r+0x2c>
 8018d90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018d92:	3201      	adds	r2, #1
 8018d94:	9245      	str	r2, [sp, #276]	; 0x114
 8018d96:	6862      	ldr	r2, [r4, #4]
 8018d98:	3301      	adds	r3, #1
 8018d9a:	3a01      	subs	r2, #1
 8018d9c:	6062      	str	r2, [r4, #4]
 8018d9e:	6023      	str	r3, [r4, #0]
 8018da0:	e7e9      	b.n	8018d76 <__ssvfiscanf_r+0x4a>
 8018da2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018da4:	4621      	mov	r1, r4
 8018da6:	4630      	mov	r0, r6
 8018da8:	4798      	blx	r3
 8018daa:	2800      	cmp	r0, #0
 8018dac:	d0e6      	beq.n	8018d7c <__ssvfiscanf_r+0x50>
 8018dae:	e7ed      	b.n	8018d8c <__ssvfiscanf_r+0x60>
 8018db0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018db4:	f040 8082 	bne.w	8018ebc <__ssvfiscanf_r+0x190>
 8018db8:	9343      	str	r3, [sp, #268]	; 0x10c
 8018dba:	9341      	str	r3, [sp, #260]	; 0x104
 8018dbc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8018dc2:	d103      	bne.n	8018dcc <__ssvfiscanf_r+0xa0>
 8018dc4:	2310      	movs	r3, #16
 8018dc6:	9341      	str	r3, [sp, #260]	; 0x104
 8018dc8:	f10a 0502 	add.w	r5, sl, #2
 8018dcc:	46aa      	mov	sl, r5
 8018dce:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018dd2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018dd6:	2a09      	cmp	r2, #9
 8018dd8:	d922      	bls.n	8018e20 <__ssvfiscanf_r+0xf4>
 8018dda:	2203      	movs	r2, #3
 8018ddc:	4879      	ldr	r0, [pc, #484]	; (8018fc4 <__ssvfiscanf_r+0x298>)
 8018dde:	f7e7 fa17 	bl	8000210 <memchr>
 8018de2:	b138      	cbz	r0, 8018df4 <__ssvfiscanf_r+0xc8>
 8018de4:	eba0 0309 	sub.w	r3, r0, r9
 8018de8:	2001      	movs	r0, #1
 8018dea:	4098      	lsls	r0, r3
 8018dec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018dee:	4318      	orrs	r0, r3
 8018df0:	9041      	str	r0, [sp, #260]	; 0x104
 8018df2:	46aa      	mov	sl, r5
 8018df4:	f89a 3000 	ldrb.w	r3, [sl]
 8018df8:	2b67      	cmp	r3, #103	; 0x67
 8018dfa:	f10a 0501 	add.w	r5, sl, #1
 8018dfe:	d82b      	bhi.n	8018e58 <__ssvfiscanf_r+0x12c>
 8018e00:	2b65      	cmp	r3, #101	; 0x65
 8018e02:	f080 809f 	bcs.w	8018f44 <__ssvfiscanf_r+0x218>
 8018e06:	2b47      	cmp	r3, #71	; 0x47
 8018e08:	d810      	bhi.n	8018e2c <__ssvfiscanf_r+0x100>
 8018e0a:	2b45      	cmp	r3, #69	; 0x45
 8018e0c:	f080 809a 	bcs.w	8018f44 <__ssvfiscanf_r+0x218>
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d06c      	beq.n	8018eee <__ssvfiscanf_r+0x1c2>
 8018e14:	2b25      	cmp	r3, #37	; 0x25
 8018e16:	d051      	beq.n	8018ebc <__ssvfiscanf_r+0x190>
 8018e18:	2303      	movs	r3, #3
 8018e1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8018e1c:	9742      	str	r7, [sp, #264]	; 0x108
 8018e1e:	e027      	b.n	8018e70 <__ssvfiscanf_r+0x144>
 8018e20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018e22:	fb07 1303 	mla	r3, r7, r3, r1
 8018e26:	3b30      	subs	r3, #48	; 0x30
 8018e28:	9343      	str	r3, [sp, #268]	; 0x10c
 8018e2a:	e7cf      	b.n	8018dcc <__ssvfiscanf_r+0xa0>
 8018e2c:	2b5b      	cmp	r3, #91	; 0x5b
 8018e2e:	d06a      	beq.n	8018f06 <__ssvfiscanf_r+0x1da>
 8018e30:	d80c      	bhi.n	8018e4c <__ssvfiscanf_r+0x120>
 8018e32:	2b58      	cmp	r3, #88	; 0x58
 8018e34:	d1f0      	bne.n	8018e18 <__ssvfiscanf_r+0xec>
 8018e36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e3c:	9241      	str	r2, [sp, #260]	; 0x104
 8018e3e:	2210      	movs	r2, #16
 8018e40:	9242      	str	r2, [sp, #264]	; 0x108
 8018e42:	2b6e      	cmp	r3, #110	; 0x6e
 8018e44:	bf8c      	ite	hi
 8018e46:	2304      	movhi	r3, #4
 8018e48:	2303      	movls	r3, #3
 8018e4a:	e010      	b.n	8018e6e <__ssvfiscanf_r+0x142>
 8018e4c:	2b63      	cmp	r3, #99	; 0x63
 8018e4e:	d065      	beq.n	8018f1c <__ssvfiscanf_r+0x1f0>
 8018e50:	2b64      	cmp	r3, #100	; 0x64
 8018e52:	d1e1      	bne.n	8018e18 <__ssvfiscanf_r+0xec>
 8018e54:	9742      	str	r7, [sp, #264]	; 0x108
 8018e56:	e7f4      	b.n	8018e42 <__ssvfiscanf_r+0x116>
 8018e58:	2b70      	cmp	r3, #112	; 0x70
 8018e5a:	d04b      	beq.n	8018ef4 <__ssvfiscanf_r+0x1c8>
 8018e5c:	d826      	bhi.n	8018eac <__ssvfiscanf_r+0x180>
 8018e5e:	2b6e      	cmp	r3, #110	; 0x6e
 8018e60:	d062      	beq.n	8018f28 <__ssvfiscanf_r+0x1fc>
 8018e62:	d84c      	bhi.n	8018efe <__ssvfiscanf_r+0x1d2>
 8018e64:	2b69      	cmp	r3, #105	; 0x69
 8018e66:	d1d7      	bne.n	8018e18 <__ssvfiscanf_r+0xec>
 8018e68:	2300      	movs	r3, #0
 8018e6a:	9342      	str	r3, [sp, #264]	; 0x108
 8018e6c:	2303      	movs	r3, #3
 8018e6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018e70:	6863      	ldr	r3, [r4, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	dd68      	ble.n	8018f48 <__ssvfiscanf_r+0x21c>
 8018e76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e78:	0659      	lsls	r1, r3, #25
 8018e7a:	d407      	bmi.n	8018e8c <__ssvfiscanf_r+0x160>
 8018e7c:	f7ff f8b2 	bl	8017fe4 <__locale_ctype_ptr>
 8018e80:	6823      	ldr	r3, [r4, #0]
 8018e82:	781a      	ldrb	r2, [r3, #0]
 8018e84:	4410      	add	r0, r2
 8018e86:	7842      	ldrb	r2, [r0, #1]
 8018e88:	0712      	lsls	r2, r2, #28
 8018e8a:	d464      	bmi.n	8018f56 <__ssvfiscanf_r+0x22a>
 8018e8c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018e8e:	2b02      	cmp	r3, #2
 8018e90:	dc73      	bgt.n	8018f7a <__ssvfiscanf_r+0x24e>
 8018e92:	466b      	mov	r3, sp
 8018e94:	4622      	mov	r2, r4
 8018e96:	a941      	add	r1, sp, #260	; 0x104
 8018e98:	4630      	mov	r0, r6
 8018e9a:	f000 f897 	bl	8018fcc <_scanf_chars>
 8018e9e:	2801      	cmp	r0, #1
 8018ea0:	f000 8089 	beq.w	8018fb6 <__ssvfiscanf_r+0x28a>
 8018ea4:	2802      	cmp	r0, #2
 8018ea6:	f47f af71 	bne.w	8018d8c <__ssvfiscanf_r+0x60>
 8018eaa:	e01d      	b.n	8018ee8 <__ssvfiscanf_r+0x1bc>
 8018eac:	2b75      	cmp	r3, #117	; 0x75
 8018eae:	d0d1      	beq.n	8018e54 <__ssvfiscanf_r+0x128>
 8018eb0:	2b78      	cmp	r3, #120	; 0x78
 8018eb2:	d0c0      	beq.n	8018e36 <__ssvfiscanf_r+0x10a>
 8018eb4:	2b73      	cmp	r3, #115	; 0x73
 8018eb6:	d1af      	bne.n	8018e18 <__ssvfiscanf_r+0xec>
 8018eb8:	2302      	movs	r3, #2
 8018eba:	e7d8      	b.n	8018e6e <__ssvfiscanf_r+0x142>
 8018ebc:	6863      	ldr	r3, [r4, #4]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	dd0c      	ble.n	8018edc <__ssvfiscanf_r+0x1b0>
 8018ec2:	6823      	ldr	r3, [r4, #0]
 8018ec4:	781a      	ldrb	r2, [r3, #0]
 8018ec6:	455a      	cmp	r2, fp
 8018ec8:	d175      	bne.n	8018fb6 <__ssvfiscanf_r+0x28a>
 8018eca:	3301      	adds	r3, #1
 8018ecc:	6862      	ldr	r2, [r4, #4]
 8018ece:	6023      	str	r3, [r4, #0]
 8018ed0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018ed2:	3a01      	subs	r2, #1
 8018ed4:	3301      	adds	r3, #1
 8018ed6:	6062      	str	r2, [r4, #4]
 8018ed8:	9345      	str	r3, [sp, #276]	; 0x114
 8018eda:	e757      	b.n	8018d8c <__ssvfiscanf_r+0x60>
 8018edc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ede:	4621      	mov	r1, r4
 8018ee0:	4630      	mov	r0, r6
 8018ee2:	4798      	blx	r3
 8018ee4:	2800      	cmp	r0, #0
 8018ee6:	d0ec      	beq.n	8018ec2 <__ssvfiscanf_r+0x196>
 8018ee8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018eea:	2800      	cmp	r0, #0
 8018eec:	d159      	bne.n	8018fa2 <__ssvfiscanf_r+0x276>
 8018eee:	f04f 30ff 	mov.w	r0, #4294967295
 8018ef2:	e05c      	b.n	8018fae <__ssvfiscanf_r+0x282>
 8018ef4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018ef6:	f042 0220 	orr.w	r2, r2, #32
 8018efa:	9241      	str	r2, [sp, #260]	; 0x104
 8018efc:	e79b      	b.n	8018e36 <__ssvfiscanf_r+0x10a>
 8018efe:	2308      	movs	r3, #8
 8018f00:	9342      	str	r3, [sp, #264]	; 0x108
 8018f02:	2304      	movs	r3, #4
 8018f04:	e7b3      	b.n	8018e6e <__ssvfiscanf_r+0x142>
 8018f06:	4629      	mov	r1, r5
 8018f08:	4640      	mov	r0, r8
 8018f0a:	f000 f9c7 	bl	801929c <__sccl>
 8018f0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f14:	9341      	str	r3, [sp, #260]	; 0x104
 8018f16:	4605      	mov	r5, r0
 8018f18:	2301      	movs	r3, #1
 8018f1a:	e7a8      	b.n	8018e6e <__ssvfiscanf_r+0x142>
 8018f1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f22:	9341      	str	r3, [sp, #260]	; 0x104
 8018f24:	2300      	movs	r3, #0
 8018f26:	e7a2      	b.n	8018e6e <__ssvfiscanf_r+0x142>
 8018f28:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018f2a:	06c3      	lsls	r3, r0, #27
 8018f2c:	f53f af2e 	bmi.w	8018d8c <__ssvfiscanf_r+0x60>
 8018f30:	9b00      	ldr	r3, [sp, #0]
 8018f32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018f34:	1d19      	adds	r1, r3, #4
 8018f36:	9100      	str	r1, [sp, #0]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	07c0      	lsls	r0, r0, #31
 8018f3c:	bf4c      	ite	mi
 8018f3e:	801a      	strhmi	r2, [r3, #0]
 8018f40:	601a      	strpl	r2, [r3, #0]
 8018f42:	e723      	b.n	8018d8c <__ssvfiscanf_r+0x60>
 8018f44:	2305      	movs	r3, #5
 8018f46:	e792      	b.n	8018e6e <__ssvfiscanf_r+0x142>
 8018f48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f4a:	4621      	mov	r1, r4
 8018f4c:	4630      	mov	r0, r6
 8018f4e:	4798      	blx	r3
 8018f50:	2800      	cmp	r0, #0
 8018f52:	d090      	beq.n	8018e76 <__ssvfiscanf_r+0x14a>
 8018f54:	e7c8      	b.n	8018ee8 <__ssvfiscanf_r+0x1bc>
 8018f56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018f58:	3201      	adds	r2, #1
 8018f5a:	9245      	str	r2, [sp, #276]	; 0x114
 8018f5c:	6862      	ldr	r2, [r4, #4]
 8018f5e:	3a01      	subs	r2, #1
 8018f60:	2a00      	cmp	r2, #0
 8018f62:	6062      	str	r2, [r4, #4]
 8018f64:	dd02      	ble.n	8018f6c <__ssvfiscanf_r+0x240>
 8018f66:	3301      	adds	r3, #1
 8018f68:	6023      	str	r3, [r4, #0]
 8018f6a:	e787      	b.n	8018e7c <__ssvfiscanf_r+0x150>
 8018f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f6e:	4621      	mov	r1, r4
 8018f70:	4630      	mov	r0, r6
 8018f72:	4798      	blx	r3
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d081      	beq.n	8018e7c <__ssvfiscanf_r+0x150>
 8018f78:	e7b6      	b.n	8018ee8 <__ssvfiscanf_r+0x1bc>
 8018f7a:	2b04      	cmp	r3, #4
 8018f7c:	dc06      	bgt.n	8018f8c <__ssvfiscanf_r+0x260>
 8018f7e:	466b      	mov	r3, sp
 8018f80:	4622      	mov	r2, r4
 8018f82:	a941      	add	r1, sp, #260	; 0x104
 8018f84:	4630      	mov	r0, r6
 8018f86:	f000 f885 	bl	8019094 <_scanf_i>
 8018f8a:	e788      	b.n	8018e9e <__ssvfiscanf_r+0x172>
 8018f8c:	4b0e      	ldr	r3, [pc, #56]	; (8018fc8 <__ssvfiscanf_r+0x29c>)
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	f43f aefc 	beq.w	8018d8c <__ssvfiscanf_r+0x60>
 8018f94:	466b      	mov	r3, sp
 8018f96:	4622      	mov	r2, r4
 8018f98:	a941      	add	r1, sp, #260	; 0x104
 8018f9a:	4630      	mov	r0, r6
 8018f9c:	f7fc fd74 	bl	8015a88 <_scanf_float>
 8018fa0:	e77d      	b.n	8018e9e <__ssvfiscanf_r+0x172>
 8018fa2:	89a3      	ldrh	r3, [r4, #12]
 8018fa4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018fa8:	bf18      	it	ne
 8018faa:	f04f 30ff 	movne.w	r0, #4294967295
 8018fae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018fb8:	e7f9      	b.n	8018fae <__ssvfiscanf_r+0x282>
 8018fba:	bf00      	nop
 8018fbc:	08018c79 	.word	0x08018c79
 8018fc0:	08018cf3 	.word	0x08018cf3
 8018fc4:	08019dea 	.word	0x08019dea
 8018fc8:	08015a89 	.word	0x08015a89

08018fcc <_scanf_chars>:
 8018fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fd0:	4615      	mov	r5, r2
 8018fd2:	688a      	ldr	r2, [r1, #8]
 8018fd4:	4680      	mov	r8, r0
 8018fd6:	460c      	mov	r4, r1
 8018fd8:	b932      	cbnz	r2, 8018fe8 <_scanf_chars+0x1c>
 8018fda:	698a      	ldr	r2, [r1, #24]
 8018fdc:	2a00      	cmp	r2, #0
 8018fde:	bf14      	ite	ne
 8018fe0:	f04f 32ff 	movne.w	r2, #4294967295
 8018fe4:	2201      	moveq	r2, #1
 8018fe6:	608a      	str	r2, [r1, #8]
 8018fe8:	6822      	ldr	r2, [r4, #0]
 8018fea:	06d1      	lsls	r1, r2, #27
 8018fec:	bf5f      	itttt	pl
 8018fee:	681a      	ldrpl	r2, [r3, #0]
 8018ff0:	1d11      	addpl	r1, r2, #4
 8018ff2:	6019      	strpl	r1, [r3, #0]
 8018ff4:	6817      	ldrpl	r7, [r2, #0]
 8018ff6:	2600      	movs	r6, #0
 8018ff8:	69a3      	ldr	r3, [r4, #24]
 8018ffa:	b1db      	cbz	r3, 8019034 <_scanf_chars+0x68>
 8018ffc:	2b01      	cmp	r3, #1
 8018ffe:	d107      	bne.n	8019010 <_scanf_chars+0x44>
 8019000:	682b      	ldr	r3, [r5, #0]
 8019002:	6962      	ldr	r2, [r4, #20]
 8019004:	781b      	ldrb	r3, [r3, #0]
 8019006:	5cd3      	ldrb	r3, [r2, r3]
 8019008:	b9a3      	cbnz	r3, 8019034 <_scanf_chars+0x68>
 801900a:	2e00      	cmp	r6, #0
 801900c:	d132      	bne.n	8019074 <_scanf_chars+0xa8>
 801900e:	e006      	b.n	801901e <_scanf_chars+0x52>
 8019010:	2b02      	cmp	r3, #2
 8019012:	d007      	beq.n	8019024 <_scanf_chars+0x58>
 8019014:	2e00      	cmp	r6, #0
 8019016:	d12d      	bne.n	8019074 <_scanf_chars+0xa8>
 8019018:	69a3      	ldr	r3, [r4, #24]
 801901a:	2b01      	cmp	r3, #1
 801901c:	d12a      	bne.n	8019074 <_scanf_chars+0xa8>
 801901e:	2001      	movs	r0, #1
 8019020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019024:	f7fe ffde 	bl	8017fe4 <__locale_ctype_ptr>
 8019028:	682b      	ldr	r3, [r5, #0]
 801902a:	781b      	ldrb	r3, [r3, #0]
 801902c:	4418      	add	r0, r3
 801902e:	7843      	ldrb	r3, [r0, #1]
 8019030:	071b      	lsls	r3, r3, #28
 8019032:	d4ef      	bmi.n	8019014 <_scanf_chars+0x48>
 8019034:	6823      	ldr	r3, [r4, #0]
 8019036:	06da      	lsls	r2, r3, #27
 8019038:	bf5e      	ittt	pl
 801903a:	682b      	ldrpl	r3, [r5, #0]
 801903c:	781b      	ldrbpl	r3, [r3, #0]
 801903e:	703b      	strbpl	r3, [r7, #0]
 8019040:	682a      	ldr	r2, [r5, #0]
 8019042:	686b      	ldr	r3, [r5, #4]
 8019044:	f102 0201 	add.w	r2, r2, #1
 8019048:	602a      	str	r2, [r5, #0]
 801904a:	68a2      	ldr	r2, [r4, #8]
 801904c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019050:	f102 32ff 	add.w	r2, r2, #4294967295
 8019054:	606b      	str	r3, [r5, #4]
 8019056:	f106 0601 	add.w	r6, r6, #1
 801905a:	bf58      	it	pl
 801905c:	3701      	addpl	r7, #1
 801905e:	60a2      	str	r2, [r4, #8]
 8019060:	b142      	cbz	r2, 8019074 <_scanf_chars+0xa8>
 8019062:	2b00      	cmp	r3, #0
 8019064:	dcc8      	bgt.n	8018ff8 <_scanf_chars+0x2c>
 8019066:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801906a:	4629      	mov	r1, r5
 801906c:	4640      	mov	r0, r8
 801906e:	4798      	blx	r3
 8019070:	2800      	cmp	r0, #0
 8019072:	d0c1      	beq.n	8018ff8 <_scanf_chars+0x2c>
 8019074:	6823      	ldr	r3, [r4, #0]
 8019076:	f013 0310 	ands.w	r3, r3, #16
 801907a:	d105      	bne.n	8019088 <_scanf_chars+0xbc>
 801907c:	68e2      	ldr	r2, [r4, #12]
 801907e:	3201      	adds	r2, #1
 8019080:	60e2      	str	r2, [r4, #12]
 8019082:	69a2      	ldr	r2, [r4, #24]
 8019084:	b102      	cbz	r2, 8019088 <_scanf_chars+0xbc>
 8019086:	703b      	strb	r3, [r7, #0]
 8019088:	6923      	ldr	r3, [r4, #16]
 801908a:	441e      	add	r6, r3
 801908c:	6126      	str	r6, [r4, #16]
 801908e:	2000      	movs	r0, #0
 8019090:	e7c6      	b.n	8019020 <_scanf_chars+0x54>
	...

08019094 <_scanf_i>:
 8019094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019098:	469a      	mov	sl, r3
 801909a:	4b74      	ldr	r3, [pc, #464]	; (801926c <_scanf_i+0x1d8>)
 801909c:	460c      	mov	r4, r1
 801909e:	4683      	mov	fp, r0
 80190a0:	4616      	mov	r6, r2
 80190a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80190a6:	b087      	sub	sp, #28
 80190a8:	ab03      	add	r3, sp, #12
 80190aa:	68a7      	ldr	r7, [r4, #8]
 80190ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80190b0:	4b6f      	ldr	r3, [pc, #444]	; (8019270 <_scanf_i+0x1dc>)
 80190b2:	69a1      	ldr	r1, [r4, #24]
 80190b4:	4a6f      	ldr	r2, [pc, #444]	; (8019274 <_scanf_i+0x1e0>)
 80190b6:	2903      	cmp	r1, #3
 80190b8:	bf08      	it	eq
 80190ba:	461a      	moveq	r2, r3
 80190bc:	1e7b      	subs	r3, r7, #1
 80190be:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80190c2:	bf84      	itt	hi
 80190c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80190c8:	60a3      	strhi	r3, [r4, #8]
 80190ca:	6823      	ldr	r3, [r4, #0]
 80190cc:	9200      	str	r2, [sp, #0]
 80190ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80190d2:	bf88      	it	hi
 80190d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80190d8:	f104 091c 	add.w	r9, r4, #28
 80190dc:	6023      	str	r3, [r4, #0]
 80190de:	bf8c      	ite	hi
 80190e0:	197f      	addhi	r7, r7, r5
 80190e2:	2700      	movls	r7, #0
 80190e4:	464b      	mov	r3, r9
 80190e6:	f04f 0800 	mov.w	r8, #0
 80190ea:	9301      	str	r3, [sp, #4]
 80190ec:	6831      	ldr	r1, [r6, #0]
 80190ee:	ab03      	add	r3, sp, #12
 80190f0:	2202      	movs	r2, #2
 80190f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80190f6:	7809      	ldrb	r1, [r1, #0]
 80190f8:	f7e7 f88a 	bl	8000210 <memchr>
 80190fc:	9b01      	ldr	r3, [sp, #4]
 80190fe:	b330      	cbz	r0, 801914e <_scanf_i+0xba>
 8019100:	f1b8 0f01 	cmp.w	r8, #1
 8019104:	d15a      	bne.n	80191bc <_scanf_i+0x128>
 8019106:	6862      	ldr	r2, [r4, #4]
 8019108:	b92a      	cbnz	r2, 8019116 <_scanf_i+0x82>
 801910a:	6822      	ldr	r2, [r4, #0]
 801910c:	2108      	movs	r1, #8
 801910e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019112:	6061      	str	r1, [r4, #4]
 8019114:	6022      	str	r2, [r4, #0]
 8019116:	6822      	ldr	r2, [r4, #0]
 8019118:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801911c:	6022      	str	r2, [r4, #0]
 801911e:	68a2      	ldr	r2, [r4, #8]
 8019120:	1e51      	subs	r1, r2, #1
 8019122:	60a1      	str	r1, [r4, #8]
 8019124:	b19a      	cbz	r2, 801914e <_scanf_i+0xba>
 8019126:	6832      	ldr	r2, [r6, #0]
 8019128:	1c51      	adds	r1, r2, #1
 801912a:	6031      	str	r1, [r6, #0]
 801912c:	7812      	ldrb	r2, [r2, #0]
 801912e:	701a      	strb	r2, [r3, #0]
 8019130:	1c5d      	adds	r5, r3, #1
 8019132:	6873      	ldr	r3, [r6, #4]
 8019134:	3b01      	subs	r3, #1
 8019136:	2b00      	cmp	r3, #0
 8019138:	6073      	str	r3, [r6, #4]
 801913a:	dc07      	bgt.n	801914c <_scanf_i+0xb8>
 801913c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019140:	4631      	mov	r1, r6
 8019142:	4658      	mov	r0, fp
 8019144:	4798      	blx	r3
 8019146:	2800      	cmp	r0, #0
 8019148:	f040 8086 	bne.w	8019258 <_scanf_i+0x1c4>
 801914c:	462b      	mov	r3, r5
 801914e:	f108 0801 	add.w	r8, r8, #1
 8019152:	f1b8 0f03 	cmp.w	r8, #3
 8019156:	d1c8      	bne.n	80190ea <_scanf_i+0x56>
 8019158:	6862      	ldr	r2, [r4, #4]
 801915a:	b90a      	cbnz	r2, 8019160 <_scanf_i+0xcc>
 801915c:	220a      	movs	r2, #10
 801915e:	6062      	str	r2, [r4, #4]
 8019160:	6862      	ldr	r2, [r4, #4]
 8019162:	4945      	ldr	r1, [pc, #276]	; (8019278 <_scanf_i+0x1e4>)
 8019164:	6960      	ldr	r0, [r4, #20]
 8019166:	9301      	str	r3, [sp, #4]
 8019168:	1a89      	subs	r1, r1, r2
 801916a:	f000 f897 	bl	801929c <__sccl>
 801916e:	9b01      	ldr	r3, [sp, #4]
 8019170:	f04f 0800 	mov.w	r8, #0
 8019174:	461d      	mov	r5, r3
 8019176:	68a3      	ldr	r3, [r4, #8]
 8019178:	6822      	ldr	r2, [r4, #0]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d03a      	beq.n	80191f4 <_scanf_i+0x160>
 801917e:	6831      	ldr	r1, [r6, #0]
 8019180:	6960      	ldr	r0, [r4, #20]
 8019182:	f891 c000 	ldrb.w	ip, [r1]
 8019186:	f810 000c 	ldrb.w	r0, [r0, ip]
 801918a:	2800      	cmp	r0, #0
 801918c:	d032      	beq.n	80191f4 <_scanf_i+0x160>
 801918e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019192:	d121      	bne.n	80191d8 <_scanf_i+0x144>
 8019194:	0510      	lsls	r0, r2, #20
 8019196:	d51f      	bpl.n	80191d8 <_scanf_i+0x144>
 8019198:	f108 0801 	add.w	r8, r8, #1
 801919c:	b117      	cbz	r7, 80191a4 <_scanf_i+0x110>
 801919e:	3301      	adds	r3, #1
 80191a0:	3f01      	subs	r7, #1
 80191a2:	60a3      	str	r3, [r4, #8]
 80191a4:	6873      	ldr	r3, [r6, #4]
 80191a6:	3b01      	subs	r3, #1
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	6073      	str	r3, [r6, #4]
 80191ac:	dd1b      	ble.n	80191e6 <_scanf_i+0x152>
 80191ae:	6833      	ldr	r3, [r6, #0]
 80191b0:	3301      	adds	r3, #1
 80191b2:	6033      	str	r3, [r6, #0]
 80191b4:	68a3      	ldr	r3, [r4, #8]
 80191b6:	3b01      	subs	r3, #1
 80191b8:	60a3      	str	r3, [r4, #8]
 80191ba:	e7dc      	b.n	8019176 <_scanf_i+0xe2>
 80191bc:	f1b8 0f02 	cmp.w	r8, #2
 80191c0:	d1ad      	bne.n	801911e <_scanf_i+0x8a>
 80191c2:	6822      	ldr	r2, [r4, #0]
 80191c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80191c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80191cc:	d1bf      	bne.n	801914e <_scanf_i+0xba>
 80191ce:	2110      	movs	r1, #16
 80191d0:	6061      	str	r1, [r4, #4]
 80191d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80191d6:	e7a1      	b.n	801911c <_scanf_i+0x88>
 80191d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80191dc:	6022      	str	r2, [r4, #0]
 80191de:	780b      	ldrb	r3, [r1, #0]
 80191e0:	702b      	strb	r3, [r5, #0]
 80191e2:	3501      	adds	r5, #1
 80191e4:	e7de      	b.n	80191a4 <_scanf_i+0x110>
 80191e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80191ea:	4631      	mov	r1, r6
 80191ec:	4658      	mov	r0, fp
 80191ee:	4798      	blx	r3
 80191f0:	2800      	cmp	r0, #0
 80191f2:	d0df      	beq.n	80191b4 <_scanf_i+0x120>
 80191f4:	6823      	ldr	r3, [r4, #0]
 80191f6:	05d9      	lsls	r1, r3, #23
 80191f8:	d50c      	bpl.n	8019214 <_scanf_i+0x180>
 80191fa:	454d      	cmp	r5, r9
 80191fc:	d908      	bls.n	8019210 <_scanf_i+0x17c>
 80191fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019206:	4632      	mov	r2, r6
 8019208:	4658      	mov	r0, fp
 801920a:	4798      	blx	r3
 801920c:	1e6f      	subs	r7, r5, #1
 801920e:	463d      	mov	r5, r7
 8019210:	454d      	cmp	r5, r9
 8019212:	d029      	beq.n	8019268 <_scanf_i+0x1d4>
 8019214:	6822      	ldr	r2, [r4, #0]
 8019216:	f012 0210 	ands.w	r2, r2, #16
 801921a:	d113      	bne.n	8019244 <_scanf_i+0x1b0>
 801921c:	702a      	strb	r2, [r5, #0]
 801921e:	6863      	ldr	r3, [r4, #4]
 8019220:	9e00      	ldr	r6, [sp, #0]
 8019222:	4649      	mov	r1, r9
 8019224:	4658      	mov	r0, fp
 8019226:	47b0      	blx	r6
 8019228:	f8da 3000 	ldr.w	r3, [sl]
 801922c:	6821      	ldr	r1, [r4, #0]
 801922e:	1d1a      	adds	r2, r3, #4
 8019230:	f8ca 2000 	str.w	r2, [sl]
 8019234:	f011 0f20 	tst.w	r1, #32
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	d010      	beq.n	801925e <_scanf_i+0x1ca>
 801923c:	6018      	str	r0, [r3, #0]
 801923e:	68e3      	ldr	r3, [r4, #12]
 8019240:	3301      	adds	r3, #1
 8019242:	60e3      	str	r3, [r4, #12]
 8019244:	eba5 0509 	sub.w	r5, r5, r9
 8019248:	44a8      	add	r8, r5
 801924a:	6925      	ldr	r5, [r4, #16]
 801924c:	4445      	add	r5, r8
 801924e:	6125      	str	r5, [r4, #16]
 8019250:	2000      	movs	r0, #0
 8019252:	b007      	add	sp, #28
 8019254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019258:	f04f 0800 	mov.w	r8, #0
 801925c:	e7ca      	b.n	80191f4 <_scanf_i+0x160>
 801925e:	07ca      	lsls	r2, r1, #31
 8019260:	bf4c      	ite	mi
 8019262:	8018      	strhmi	r0, [r3, #0]
 8019264:	6018      	strpl	r0, [r3, #0]
 8019266:	e7ea      	b.n	801923e <_scanf_i+0x1aa>
 8019268:	2001      	movs	r0, #1
 801926a:	e7f2      	b.n	8019252 <_scanf_i+0x1be>
 801926c:	080199ac 	.word	0x080199ac
 8019270:	08016ca1 	.word	0x08016ca1
 8019274:	08019419 	.word	0x08019419
 8019278:	08019e05 	.word	0x08019e05

0801927c <_sbrk_r>:
 801927c:	b538      	push	{r3, r4, r5, lr}
 801927e:	4c06      	ldr	r4, [pc, #24]	; (8019298 <_sbrk_r+0x1c>)
 8019280:	2300      	movs	r3, #0
 8019282:	4605      	mov	r5, r0
 8019284:	4608      	mov	r0, r1
 8019286:	6023      	str	r3, [r4, #0]
 8019288:	f7ed ffde 	bl	8007248 <_sbrk>
 801928c:	1c43      	adds	r3, r0, #1
 801928e:	d102      	bne.n	8019296 <_sbrk_r+0x1a>
 8019290:	6823      	ldr	r3, [r4, #0]
 8019292:	b103      	cbz	r3, 8019296 <_sbrk_r+0x1a>
 8019294:	602b      	str	r3, [r5, #0]
 8019296:	bd38      	pop	{r3, r4, r5, pc}
 8019298:	20046c84 	.word	0x20046c84

0801929c <__sccl>:
 801929c:	b570      	push	{r4, r5, r6, lr}
 801929e:	780b      	ldrb	r3, [r1, #0]
 80192a0:	2b5e      	cmp	r3, #94	; 0x5e
 80192a2:	bf13      	iteet	ne
 80192a4:	1c4a      	addne	r2, r1, #1
 80192a6:	1c8a      	addeq	r2, r1, #2
 80192a8:	784b      	ldrbeq	r3, [r1, #1]
 80192aa:	2100      	movne	r1, #0
 80192ac:	bf08      	it	eq
 80192ae:	2101      	moveq	r1, #1
 80192b0:	1e44      	subs	r4, r0, #1
 80192b2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80192b6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80192ba:	42ac      	cmp	r4, r5
 80192bc:	d1fb      	bne.n	80192b6 <__sccl+0x1a>
 80192be:	b913      	cbnz	r3, 80192c6 <__sccl+0x2a>
 80192c0:	3a01      	subs	r2, #1
 80192c2:	4610      	mov	r0, r2
 80192c4:	bd70      	pop	{r4, r5, r6, pc}
 80192c6:	f081 0401 	eor.w	r4, r1, #1
 80192ca:	54c4      	strb	r4, [r0, r3]
 80192cc:	1c51      	adds	r1, r2, #1
 80192ce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80192d2:	2d2d      	cmp	r5, #45	; 0x2d
 80192d4:	f101 36ff 	add.w	r6, r1, #4294967295
 80192d8:	460a      	mov	r2, r1
 80192da:	d006      	beq.n	80192ea <__sccl+0x4e>
 80192dc:	2d5d      	cmp	r5, #93	; 0x5d
 80192de:	d0f0      	beq.n	80192c2 <__sccl+0x26>
 80192e0:	b90d      	cbnz	r5, 80192e6 <__sccl+0x4a>
 80192e2:	4632      	mov	r2, r6
 80192e4:	e7ed      	b.n	80192c2 <__sccl+0x26>
 80192e6:	462b      	mov	r3, r5
 80192e8:	e7ef      	b.n	80192ca <__sccl+0x2e>
 80192ea:	780e      	ldrb	r6, [r1, #0]
 80192ec:	2e5d      	cmp	r6, #93	; 0x5d
 80192ee:	d0fa      	beq.n	80192e6 <__sccl+0x4a>
 80192f0:	42b3      	cmp	r3, r6
 80192f2:	dcf8      	bgt.n	80192e6 <__sccl+0x4a>
 80192f4:	3301      	adds	r3, #1
 80192f6:	429e      	cmp	r6, r3
 80192f8:	54c4      	strb	r4, [r0, r3]
 80192fa:	dcfb      	bgt.n	80192f4 <__sccl+0x58>
 80192fc:	3102      	adds	r1, #2
 80192fe:	e7e6      	b.n	80192ce <__sccl+0x32>

08019300 <strncmp>:
 8019300:	b510      	push	{r4, lr}
 8019302:	b16a      	cbz	r2, 8019320 <strncmp+0x20>
 8019304:	3901      	subs	r1, #1
 8019306:	1884      	adds	r4, r0, r2
 8019308:	f810 3b01 	ldrb.w	r3, [r0], #1
 801930c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019310:	4293      	cmp	r3, r2
 8019312:	d103      	bne.n	801931c <strncmp+0x1c>
 8019314:	42a0      	cmp	r0, r4
 8019316:	d001      	beq.n	801931c <strncmp+0x1c>
 8019318:	2b00      	cmp	r3, #0
 801931a:	d1f5      	bne.n	8019308 <strncmp+0x8>
 801931c:	1a98      	subs	r0, r3, r2
 801931e:	bd10      	pop	{r4, pc}
 8019320:	4610      	mov	r0, r2
 8019322:	e7fc      	b.n	801931e <strncmp+0x1e>

08019324 <_strtoul_l.isra.0>:
 8019324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019328:	4680      	mov	r8, r0
 801932a:	4689      	mov	r9, r1
 801932c:	4692      	mov	sl, r2
 801932e:	461e      	mov	r6, r3
 8019330:	460f      	mov	r7, r1
 8019332:	463d      	mov	r5, r7
 8019334:	9808      	ldr	r0, [sp, #32]
 8019336:	f815 4b01 	ldrb.w	r4, [r5], #1
 801933a:	f7fe fe4f 	bl	8017fdc <__locale_ctype_ptr_l>
 801933e:	4420      	add	r0, r4
 8019340:	7843      	ldrb	r3, [r0, #1]
 8019342:	f013 0308 	ands.w	r3, r3, #8
 8019346:	d130      	bne.n	80193aa <_strtoul_l.isra.0+0x86>
 8019348:	2c2d      	cmp	r4, #45	; 0x2d
 801934a:	d130      	bne.n	80193ae <_strtoul_l.isra.0+0x8a>
 801934c:	787c      	ldrb	r4, [r7, #1]
 801934e:	1cbd      	adds	r5, r7, #2
 8019350:	2101      	movs	r1, #1
 8019352:	2e00      	cmp	r6, #0
 8019354:	d05c      	beq.n	8019410 <_strtoul_l.isra.0+0xec>
 8019356:	2e10      	cmp	r6, #16
 8019358:	d109      	bne.n	801936e <_strtoul_l.isra.0+0x4a>
 801935a:	2c30      	cmp	r4, #48	; 0x30
 801935c:	d107      	bne.n	801936e <_strtoul_l.isra.0+0x4a>
 801935e:	782b      	ldrb	r3, [r5, #0]
 8019360:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019364:	2b58      	cmp	r3, #88	; 0x58
 8019366:	d14e      	bne.n	8019406 <_strtoul_l.isra.0+0xe2>
 8019368:	786c      	ldrb	r4, [r5, #1]
 801936a:	2610      	movs	r6, #16
 801936c:	3502      	adds	r5, #2
 801936e:	f04f 32ff 	mov.w	r2, #4294967295
 8019372:	2300      	movs	r3, #0
 8019374:	fbb2 f2f6 	udiv	r2, r2, r6
 8019378:	fb06 fc02 	mul.w	ip, r6, r2
 801937c:	ea6f 0c0c 	mvn.w	ip, ip
 8019380:	4618      	mov	r0, r3
 8019382:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019386:	2f09      	cmp	r7, #9
 8019388:	d817      	bhi.n	80193ba <_strtoul_l.isra.0+0x96>
 801938a:	463c      	mov	r4, r7
 801938c:	42a6      	cmp	r6, r4
 801938e:	dd23      	ble.n	80193d8 <_strtoul_l.isra.0+0xb4>
 8019390:	2b00      	cmp	r3, #0
 8019392:	db1e      	blt.n	80193d2 <_strtoul_l.isra.0+0xae>
 8019394:	4282      	cmp	r2, r0
 8019396:	d31c      	bcc.n	80193d2 <_strtoul_l.isra.0+0xae>
 8019398:	d101      	bne.n	801939e <_strtoul_l.isra.0+0x7a>
 801939a:	45a4      	cmp	ip, r4
 801939c:	db19      	blt.n	80193d2 <_strtoul_l.isra.0+0xae>
 801939e:	fb00 4006 	mla	r0, r0, r6, r4
 80193a2:	2301      	movs	r3, #1
 80193a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193a8:	e7eb      	b.n	8019382 <_strtoul_l.isra.0+0x5e>
 80193aa:	462f      	mov	r7, r5
 80193ac:	e7c1      	b.n	8019332 <_strtoul_l.isra.0+0xe>
 80193ae:	2c2b      	cmp	r4, #43	; 0x2b
 80193b0:	bf04      	itt	eq
 80193b2:	1cbd      	addeq	r5, r7, #2
 80193b4:	787c      	ldrbeq	r4, [r7, #1]
 80193b6:	4619      	mov	r1, r3
 80193b8:	e7cb      	b.n	8019352 <_strtoul_l.isra.0+0x2e>
 80193ba:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80193be:	2f19      	cmp	r7, #25
 80193c0:	d801      	bhi.n	80193c6 <_strtoul_l.isra.0+0xa2>
 80193c2:	3c37      	subs	r4, #55	; 0x37
 80193c4:	e7e2      	b.n	801938c <_strtoul_l.isra.0+0x68>
 80193c6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80193ca:	2f19      	cmp	r7, #25
 80193cc:	d804      	bhi.n	80193d8 <_strtoul_l.isra.0+0xb4>
 80193ce:	3c57      	subs	r4, #87	; 0x57
 80193d0:	e7dc      	b.n	801938c <_strtoul_l.isra.0+0x68>
 80193d2:	f04f 33ff 	mov.w	r3, #4294967295
 80193d6:	e7e5      	b.n	80193a4 <_strtoul_l.isra.0+0x80>
 80193d8:	2b00      	cmp	r3, #0
 80193da:	da09      	bge.n	80193f0 <_strtoul_l.isra.0+0xcc>
 80193dc:	2322      	movs	r3, #34	; 0x22
 80193de:	f8c8 3000 	str.w	r3, [r8]
 80193e2:	f04f 30ff 	mov.w	r0, #4294967295
 80193e6:	f1ba 0f00 	cmp.w	sl, #0
 80193ea:	d107      	bne.n	80193fc <_strtoul_l.isra.0+0xd8>
 80193ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f0:	b101      	cbz	r1, 80193f4 <_strtoul_l.isra.0+0xd0>
 80193f2:	4240      	negs	r0, r0
 80193f4:	f1ba 0f00 	cmp.w	sl, #0
 80193f8:	d0f8      	beq.n	80193ec <_strtoul_l.isra.0+0xc8>
 80193fa:	b10b      	cbz	r3, 8019400 <_strtoul_l.isra.0+0xdc>
 80193fc:	f105 39ff 	add.w	r9, r5, #4294967295
 8019400:	f8ca 9000 	str.w	r9, [sl]
 8019404:	e7f2      	b.n	80193ec <_strtoul_l.isra.0+0xc8>
 8019406:	2430      	movs	r4, #48	; 0x30
 8019408:	2e00      	cmp	r6, #0
 801940a:	d1b0      	bne.n	801936e <_strtoul_l.isra.0+0x4a>
 801940c:	2608      	movs	r6, #8
 801940e:	e7ae      	b.n	801936e <_strtoul_l.isra.0+0x4a>
 8019410:	2c30      	cmp	r4, #48	; 0x30
 8019412:	d0a4      	beq.n	801935e <_strtoul_l.isra.0+0x3a>
 8019414:	260a      	movs	r6, #10
 8019416:	e7aa      	b.n	801936e <_strtoul_l.isra.0+0x4a>

08019418 <_strtoul_r>:
 8019418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801941a:	4c06      	ldr	r4, [pc, #24]	; (8019434 <_strtoul_r+0x1c>)
 801941c:	4d06      	ldr	r5, [pc, #24]	; (8019438 <_strtoul_r+0x20>)
 801941e:	6824      	ldr	r4, [r4, #0]
 8019420:	6a24      	ldr	r4, [r4, #32]
 8019422:	2c00      	cmp	r4, #0
 8019424:	bf08      	it	eq
 8019426:	462c      	moveq	r4, r5
 8019428:	9400      	str	r4, [sp, #0]
 801942a:	f7ff ff7b 	bl	8019324 <_strtoul_l.isra.0>
 801942e:	b003      	add	sp, #12
 8019430:	bd30      	pop	{r4, r5, pc}
 8019432:	bf00      	nop
 8019434:	2000000c 	.word	0x2000000c
 8019438:	20000070 	.word	0x20000070

0801943c <__submore>:
 801943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019440:	460c      	mov	r4, r1
 8019442:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019448:	4299      	cmp	r1, r3
 801944a:	d11d      	bne.n	8019488 <__submore+0x4c>
 801944c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019450:	f7ff fa66 	bl	8018920 <_malloc_r>
 8019454:	b918      	cbnz	r0, 801945e <__submore+0x22>
 8019456:	f04f 30ff 	mov.w	r0, #4294967295
 801945a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801945e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019462:	63a3      	str	r3, [r4, #56]	; 0x38
 8019464:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019468:	6360      	str	r0, [r4, #52]	; 0x34
 801946a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801946e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019472:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019476:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801947a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801947e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019482:	6020      	str	r0, [r4, #0]
 8019484:	2000      	movs	r0, #0
 8019486:	e7e8      	b.n	801945a <__submore+0x1e>
 8019488:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801948a:	0077      	lsls	r7, r6, #1
 801948c:	463a      	mov	r2, r7
 801948e:	f000 f837 	bl	8019500 <_realloc_r>
 8019492:	4605      	mov	r5, r0
 8019494:	2800      	cmp	r0, #0
 8019496:	d0de      	beq.n	8019456 <__submore+0x1a>
 8019498:	eb00 0806 	add.w	r8, r0, r6
 801949c:	4601      	mov	r1, r0
 801949e:	4632      	mov	r2, r6
 80194a0:	4640      	mov	r0, r8
 80194a2:	f7fe fdd7 	bl	8018054 <memcpy>
 80194a6:	f8c4 8000 	str.w	r8, [r4]
 80194aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80194ae:	e7e9      	b.n	8019484 <__submore+0x48>

080194b0 <__ascii_wctomb>:
 80194b0:	b149      	cbz	r1, 80194c6 <__ascii_wctomb+0x16>
 80194b2:	2aff      	cmp	r2, #255	; 0xff
 80194b4:	bf85      	ittet	hi
 80194b6:	238a      	movhi	r3, #138	; 0x8a
 80194b8:	6003      	strhi	r3, [r0, #0]
 80194ba:	700a      	strbls	r2, [r1, #0]
 80194bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80194c0:	bf98      	it	ls
 80194c2:	2001      	movls	r0, #1
 80194c4:	4770      	bx	lr
 80194c6:	4608      	mov	r0, r1
 80194c8:	4770      	bx	lr

080194ca <memmove>:
 80194ca:	4288      	cmp	r0, r1
 80194cc:	b510      	push	{r4, lr}
 80194ce:	eb01 0302 	add.w	r3, r1, r2
 80194d2:	d807      	bhi.n	80194e4 <memmove+0x1a>
 80194d4:	1e42      	subs	r2, r0, #1
 80194d6:	4299      	cmp	r1, r3
 80194d8:	d00a      	beq.n	80194f0 <memmove+0x26>
 80194da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80194e2:	e7f8      	b.n	80194d6 <memmove+0xc>
 80194e4:	4283      	cmp	r3, r0
 80194e6:	d9f5      	bls.n	80194d4 <memmove+0xa>
 80194e8:	1881      	adds	r1, r0, r2
 80194ea:	1ad2      	subs	r2, r2, r3
 80194ec:	42d3      	cmn	r3, r2
 80194ee:	d100      	bne.n	80194f2 <memmove+0x28>
 80194f0:	bd10      	pop	{r4, pc}
 80194f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80194f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80194fa:	e7f7      	b.n	80194ec <memmove+0x22>

080194fc <__malloc_lock>:
 80194fc:	4770      	bx	lr

080194fe <__malloc_unlock>:
 80194fe:	4770      	bx	lr

08019500 <_realloc_r>:
 8019500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019502:	4607      	mov	r7, r0
 8019504:	4614      	mov	r4, r2
 8019506:	460e      	mov	r6, r1
 8019508:	b921      	cbnz	r1, 8019514 <_realloc_r+0x14>
 801950a:	4611      	mov	r1, r2
 801950c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019510:	f7ff ba06 	b.w	8018920 <_malloc_r>
 8019514:	b922      	cbnz	r2, 8019520 <_realloc_r+0x20>
 8019516:	f7ff f9b5 	bl	8018884 <_free_r>
 801951a:	4625      	mov	r5, r4
 801951c:	4628      	mov	r0, r5
 801951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019520:	f000 f814 	bl	801954c <_malloc_usable_size_r>
 8019524:	42a0      	cmp	r0, r4
 8019526:	d20f      	bcs.n	8019548 <_realloc_r+0x48>
 8019528:	4621      	mov	r1, r4
 801952a:	4638      	mov	r0, r7
 801952c:	f7ff f9f8 	bl	8018920 <_malloc_r>
 8019530:	4605      	mov	r5, r0
 8019532:	2800      	cmp	r0, #0
 8019534:	d0f2      	beq.n	801951c <_realloc_r+0x1c>
 8019536:	4631      	mov	r1, r6
 8019538:	4622      	mov	r2, r4
 801953a:	f7fe fd8b 	bl	8018054 <memcpy>
 801953e:	4631      	mov	r1, r6
 8019540:	4638      	mov	r0, r7
 8019542:	f7ff f99f 	bl	8018884 <_free_r>
 8019546:	e7e9      	b.n	801951c <_realloc_r+0x1c>
 8019548:	4635      	mov	r5, r6
 801954a:	e7e7      	b.n	801951c <_realloc_r+0x1c>

0801954c <_malloc_usable_size_r>:
 801954c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019550:	1f18      	subs	r0, r3, #4
 8019552:	2b00      	cmp	r3, #0
 8019554:	bfbc      	itt	lt
 8019556:	580b      	ldrlt	r3, [r1, r0]
 8019558:	18c0      	addlt	r0, r0, r3
 801955a:	4770      	bx	lr

0801955c <_init>:
 801955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801955e:	bf00      	nop
 8019560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019562:	bc08      	pop	{r3}
 8019564:	469e      	mov	lr, r3
 8019566:	4770      	bx	lr

08019568 <_fini>:
 8019568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801956a:	bf00      	nop
 801956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801956e:	bc08      	pop	{r3}
 8019570:	469e      	mov	lr, r3
 8019572:	4770      	bx	lr
