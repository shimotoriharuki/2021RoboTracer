
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b08  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  08019cc8  08019cc8  00029cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a904  0801a904  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a904  0801a904  0002a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a90c  0801a90c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a90c  0801a90c  0002a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a914  0801a914  0002a914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a918  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045b58  200001e0  0801aaf4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20045d38  0801aaf4  00035d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aef1  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ba9  00000000  00000000  0006b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002338  00000000  00000000  00072ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  00074fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003682d  00000000  00000000  00077048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026680  00000000  00000000  000ad875  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111612  00000000  00000000  000d3ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  001e5507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7b0  00000000  00000000  001e55d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019cb0 	.word	0x08019cb0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019cb0 	.word	0x08019cb0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a f90e 	bl	800b1f8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20043830 	.word	0x20043830

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f8f6 	bl	800b1f8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20043830 	.word	0x20043830

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 ff97 	bl	800af54 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fcfe 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fcf8 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fcf2 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fcec 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fce6 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fce0 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fcda 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fcd4 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fcce 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fcc8 	bl	8009a28 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fcbc 	bl	8009a28 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fcb6 	bl	8009a28 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f995 	bl	8017458 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ECUC1Ev>:
 */

#include "ECU.hpp"
#include "G_variables.h"

ECU::ECU()
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
{
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <_ZN3ECUC1Ev+0x34>)
 8001160:	f00d fe12 	bl	800ed88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001164:	2104      	movs	r1, #4
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <_ZN3ECUC1Ev+0x34>)
 8001168:	f00d fe0e 	bl	800ed88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800116c:	2100      	movs	r1, #0
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <_ZN3ECUC1Ev+0x38>)
 8001170:	f00d fe0a 	bl	800ed88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001174:	2100      	movs	r1, #0
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <_ZN3ECUC1Ev+0x3c>)
 8001178:	f00d fe06 	bl	800ed88 <HAL_TIM_PWM_Start>
}
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2004391c 	.word	0x2004391c
 800118c:	20043884 	.word	0x20043884
 8001190:	200439a4 	.word	0x200439a4

08001194 <_ZN3ECU2onEv>:

void ECU::on()
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <_ZN3ECU2onEv+0x20>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2004391c 	.word	0x2004391c

080011b8 <_ZN3ECU3offEv>:

void ECU::off()
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <_ZN3ECU3offEv+0x20>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2004391c 	.word	0x2004391c

080011dc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800123c:	213c      	movs	r1, #60	; 0x3c
 800123e:	4809      	ldr	r0, [pc, #36]	; (8001264 <_ZN7Encoder4initEv+0x30>)
 8001240:	f00d fe72 	bl	800ef28 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001244:	213c      	movs	r1, #60	; 0x3c
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <_ZN7Encoder4initEv+0x34>)
 8001248:	f00d fe6e 	bl	800ef28 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <_ZN7Encoder4initEv+0x38>)
 800124e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <_ZN7Encoder4initEv+0x3c>)
 8001256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20043a84 	.word	0x20043a84
 8001268:	20043768 	.word	0x20043768
 800126c:	40010000 	.word	0x40010000
 8001270:	40010400 	.word	0x40010400
 8001274:	00000000 	.word	0x00000000

08001278 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001280:	4b69      	ldr	r3, [pc, #420]	; (8001428 <_ZN7Encoder6updateEv+0x1b0>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800142c <_ZN7Encoder6updateEv+0x1b4>
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001430 <_ZN7Encoder6updateEv+0x1b8>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80012a0:	4b64      	ldr	r3, [pc, #400]	; (8001434 <_ZN7Encoder6updateEv+0x1bc>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ac:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800142c <_ZN7Encoder6updateEv+0x1b4>
 80012b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012b4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001430 <_ZN7Encoder6updateEv+0x1b8>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4a5d      	ldr	r2, [pc, #372]	; (8001438 <_ZN7Encoder6updateEv+0x1c0>)
 80012c4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f955 	bl	8000578 <__aeabi_f2d>
 80012ce:	a350      	add	r3, pc, #320	; (adr r3, 8001410 <_ZN7Encoder6updateEv+0x198>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f9a8 	bl	8000628 <__aeabi_dmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	460c      	mov	r4, r1
 80012dc:	4625      	mov	r5, r4
 80012de:	461c      	mov	r4, r3
 80012e0:	4b56      	ldr	r3, [pc, #344]	; (800143c <_ZN7Encoder6updateEv+0x1c4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f947 	bl	8000578 <__aeabi_f2d>
 80012ea:	a34b      	add	r3, pc, #300	; (adr r3, 8001418 <_ZN7Encoder6updateEv+0x1a0>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f99a 	bl	8000628 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffde 	bl	80002bc <__adddf3>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4618      	mov	r0, r3
 8001306:	4621      	mov	r1, r4
 8001308:	f7ff fc86 	bl	8000c18 <__aeabi_d2f>
 800130c:	4602      	mov	r2, r0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f92f 	bl	8000578 <__aeabi_f2d>
 800131a:	a33d      	add	r3, pc, #244	; (adr r3, 8001410 <_ZN7Encoder6updateEv+0x198>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f982 	bl	8000628 <__aeabi_dmul>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4625      	mov	r5, r4
 800132a:	461c      	mov	r4, r3
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <_ZN7Encoder6updateEv+0x1c8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f921 	bl	8000578 <__aeabi_f2d>
 8001336:	a338      	add	r3, pc, #224	; (adr r3, 8001418 <_ZN7Encoder6updateEv+0x1a0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f974 	bl	8000628 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7fe ffb8 	bl	80002bc <__adddf3>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f7ff fc60 	bl	8000c18 <__aeabi_d2f>
 8001358:	4602      	mov	r2, r0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a38      	ldr	r2, [pc, #224]	; (8001444 <_ZN7Encoder6updateEv+0x1cc>)
 8001364:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a34      	ldr	r2, [pc, #208]	; (800143c <_ZN7Encoder6updateEv+0x1c4>)
 800136c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a33      	ldr	r2, [pc, #204]	; (8001440 <_ZN7Encoder6updateEv+0x1c8>)
 8001374:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001386:	ee17 0a90 	vmov	r0, s15
 800138a:	f7ff f8f5 	bl	8000578 <__aeabi_f2d>
 800138e:	a324      	add	r3, pc, #144	; (adr r3, 8001420 <_ZN7Encoder6updateEv+0x1a8>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f948 	bl	8000628 <__aeabi_dmul>
 8001398:	4603      	mov	r3, r0
 800139a:	460c      	mov	r4, r1
 800139c:	4618      	mov	r0, r3
 800139e:	4621      	mov	r1, r4
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a8:	f7ff fa68 	bl	800087c <__aeabi_ddiv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	4618      	mov	r0, r3
 80013b2:	4621      	mov	r1, r4
 80013b4:	f7ff fc30 	bl	8000c18 <__aeabi_d2f>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ed93 7a07 	vldr	s14, [r3, #28]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <_ZN7Encoder6updateEv+0x1d0>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	9999999a 	.word	0x9999999a
 8001414:	3fa99999 	.word	0x3fa99999
 8001418:	66666666 	.word	0x66666666
 800141c:	3fee6666 	.word	0x3fee6666
 8001420:	ce73a049 	.word	0xce73a049
 8001424:	3f77a3f6 	.word	0x3f77a3f6
 8001428:	40010000 	.word	0x40010000
 800142c:	47000000 	.word	0x47000000
 8001430:	3f912547 	.word	0x3f912547
 8001434:	40010400 	.word	0x40010400
 8001438:	20000200 	.word	0x20000200
 800143c:	20000208 	.word	0x20000208
 8001440:	2000020c 	.word	0x2000020c
 8001444:	20000204 	.word	0x20000204
 8001448:	200001fc 	.word	0x200001fc

0800144c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_ZN7Encoder5clearEv+0x3c>)
 8001466:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <_ZN7Encoder5clearEv+0x40>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40010000 	.word	0x40010000
 800148c:	40010400 	.word	0x40010400

08001490 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	return distance_;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	ee07 3a90 	vmov	s15, r3
}
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	ee07 3a90 	vmov	s15, r3
}
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	619a      	str	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	ee07 3a90 	vmov	s15, r3
}
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f900 	bl	80017c0 <create_path>

	if(state == OVER_WRITE){
 80015c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d108      	bne.n	80015da <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80015c8:	4822      	ldr	r0, [pc, #136]	; (8001654 <sd_write_array_float+0xb0>)
 80015ca:	f012 fa31 	bl	8013a30 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80015ce:	4822      	ldr	r0, [pc, #136]	; (8001658 <sd_write_array_float+0xb4>)
 80015d0:	f012 fc9c 	bl	8013f0c <f_unlink>
		f_chdir("..");
 80015d4:	4821      	ldr	r0, [pc, #132]	; (800165c <sd_write_array_float+0xb8>)
 80015d6:	f012 fa2b 	bl	8013a30 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015da:	f000 f907 	bl	80017ec <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015de:	2300      	movs	r3, #0
 80015e0:	82fb      	strh	r3, [r7, #22]
 80015e2:	e028      	b.n	8001636 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffc1 	bl	8000578 <__aeabi_f2d>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	e9cd 3400 	strd	r3, r4, [sp]
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <sd_write_array_float+0xbc>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	4818      	ldr	r0, [pc, #96]	; (8001664 <sd_write_array_float+0xc0>)
 8001604:	f014 ffdc 	bl	80165c0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <sd_write_array_float+0xc4>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4619      	mov	r1, r3
 800160e:	4816      	ldr	r0, [pc, #88]	; (8001668 <sd_write_array_float+0xc4>)
 8001610:	f012 fa58 	bl	8013ac4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <sd_write_array_float+0xc0>)
 8001616:	f7fe fdf3 	bl	8000200 <strlen>
 800161a:	4602      	mov	r2, r0
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <sd_write_array_float+0xc8>)
 800161e:	4911      	ldr	r1, [pc, #68]	; (8001664 <sd_write_array_float+0xc0>)
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <sd_write_array_float+0xc4>)
 8001622:	f011 ffc6 	bl	80135b2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001626:	f000 f8fb 	bl	8001820 <bufclear>
	for(short i = 0 ; i < size; i++){
 800162a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162e:	b29b      	uxth	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	b29b      	uxth	r3, r3
 8001634:	82fb      	strh	r3, [r7, #22]
 8001636:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	429a      	cmp	r2, r3
 8001640:	dbd0      	blt.n	80015e4 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <sd_write_array_float+0xc4>)
 8001644:	f012 f9ca 	bl	80139dc <f_close>

	return ret;
 8001648:	7d7b      	ldrb	r3, [r7, #21]
}
 800164a:	4618      	mov	r0, r3
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	200424e4 	.word	0x200424e4
 8001658:	200413a4 	.word	0x200413a4
 800165c:	08019ce4 	.word	0x08019ce4
 8001660:	08019cc8 	.word	0x08019cc8
 8001664:	200425e4 	.word	0x200425e4
 8001668:	20042674 	.word	0x20042674
 800166c:	20042664 	.word	0x20042664

08001670 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f898 	bl	80017c0 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001690:	f000 f8ac 	bl	80017ec <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001694:	e019      	b.n	80016ca <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 8001696:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4913      	ldr	r1, [pc, #76]	; (80016f0 <sd_read_array_float+0x80>)
 80016a4:	4813      	ldr	r0, [pc, #76]	; (80016f4 <sd_read_array_float+0x84>)
 80016a6:	f014 ffdf 	bl	8016668 <siscanf>
		i++;
 80016aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	429a      	cmp	r2, r3
 80016c0:	db03      	blt.n	80016ca <sd_read_array_float+0x5a>
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <sd_read_array_float+0x88>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <sd_read_array_float+0x84>)
 80016d0:	f012 fdfa 	bl	80142c8 <f_gets>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1dd      	bne.n	8001696 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016da:	f000 f8a1 	bl	8001820 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <sd_read_array_float+0x88>)
 80016e0:	f012 f97c 	bl	80139dc <f_close>

	return ret;
 80016e4:	7d7b      	ldrb	r3, [r7, #21]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	08019cd4 	.word	0x08019cd4
 80016f4:	200425e4 	.word	0x200425e4
 80016f8:	20042674 	.word	0x20042674

080016fc <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f852 	bl	80017c0 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800171c:	f000 f866 	bl	80017ec <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001720:	e019      	b.n	8001756 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001722:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4913      	ldr	r1, [pc, #76]	; (800177c <sd_read_array_double+0x80>)
 8001730:	4813      	ldr	r0, [pc, #76]	; (8001780 <sd_read_array_double+0x84>)
 8001732:	f014 ff99 	bl	8016668 <siscanf>
		i++;
 8001736:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173a:	b29b      	uxth	r3, r3
 800173c:	3301      	adds	r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001742:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	429a      	cmp	r2, r3
 800174c:	db03      	blt.n	8001756 <sd_read_array_double+0x5a>
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	3b01      	subs	r3, #1
 8001752:	b29b      	uxth	r3, r3
 8001754:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <sd_read_array_double+0x88>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <sd_read_array_double+0x84>)
 800175c:	f012 fdb4 	bl	80142c8 <f_gets>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1dd      	bne.n	8001722 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001766:	f000 f85b 	bl	8001820 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <sd_read_array_double+0x88>)
 800176c:	f012 f936 	bl	80139dc <f_close>

	return ret;
 8001770:	7d7b      	ldrb	r3, [r7, #21]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08019ce0 	.word	0x08019ce0
 8001780:	200425e4 	.word	0x200425e4
 8001784:	20042674 	.word	0x20042674

08001788 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001792:	2201      	movs	r2, #1
 8001794:	4908      	ldr	r1, [pc, #32]	; (80017b8 <sd_mount+0x30>)
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <sd_mount+0x34>)
 8001798:	f011 fb98 	bl	8012ecc <f_mount>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <sd_mount+0x20>
 80017a2:	2301      	movs	r3, #1
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	e001      	b.n	80017ac <sd_mount+0x24>
	else ret = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08019cf0 	.word	0x08019cf0
 80017bc:	200414a4 	.word	0x200414a4

080017c0 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <create_path+0x24>)
 80017ce:	f014 ff77 	bl	80166c0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <create_path+0x28>)
 80017d6:	f014 ff73 	bl	80166c0 <strcpy>

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200424e4 	.word	0x200424e4
 80017e8:	200413a4 	.word	0x200413a4

080017ec <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017f0:	4807      	ldr	r0, [pc, #28]	; (8001810 <fopen_folder_and_file+0x24>)
 80017f2:	f012 fc4d 	bl	8014090 <f_mkdir>

	f_chdir(dirpath);
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <fopen_folder_and_file+0x24>)
 80017f8:	f012 f91a 	bl	8013a30 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017fc:	2213      	movs	r2, #19
 80017fe:	4905      	ldr	r1, [pc, #20]	; (8001814 <fopen_folder_and_file+0x28>)
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <fopen_folder_and_file+0x2c>)
 8001802:	f011 fba9 	bl	8012f58 <f_open>

	f_chdir("..");
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <fopen_folder_and_file+0x30>)
 8001808:	f012 f912 	bl	8013a30 <f_chdir>


}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200424e4 	.word	0x200424e4
 8001814:	200413a4 	.word	0x200413a4
 8001818:	20042674 	.word	0x20042674
 800181c:	08019ce4 	.word	0x08019ce4

08001820 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e007      	b.n	800183c <bufclear+0x1c>
		buffer[i] = '\0';
 800182c:	4a08      	ldr	r2, [pc, #32]	; (8001850 <bufclear+0x30>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b7f      	cmp	r3, #127	; 0x7f
 8001840:	ddf4      	ble.n	800182c <bufclear+0xc>
	}
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200425e4 	.word	0x200425e4

08001854 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001864:	b2db      	uxtb	r3, r3
 8001866:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <read_byte+0x54>)
 8001870:	f009 fb70 	bl	800af54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001874:	f107 010f 	add.w	r1, r7, #15
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	2201      	movs	r2, #1
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <read_byte+0x58>)
 800187e:	f00c fd19 	bl	800e2b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001882:	f107 010e 	add.w	r1, r7, #14
 8001886:	2364      	movs	r3, #100	; 0x64
 8001888:	2201      	movs	r2, #1
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <read_byte+0x58>)
 800188c:	f00c fe46 	bl	800e51c <HAL_SPI_Receive>
	CS_SET;
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <read_byte+0x54>)
 8001898:	f009 fb5c 	bl	800af54 <HAL_GPIO_WritePin>

	return val;
 800189c:	7bbb      	ldrb	r3, [r7, #14]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40020400 	.word	0x40020400
 80018ac:	20043710 	.word	0x20043710

080018b0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	4613      	mov	r3, r2
 80018be:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <write_byte+0x54>)
 80018d2:	f009 fb3f 	bl	800af54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d6:	f107 010f 	add.w	r1, r7, #15
 80018da:	2364      	movs	r3, #100	; 0x64
 80018dc:	2201      	movs	r2, #1
 80018de:	480a      	ldr	r0, [pc, #40]	; (8001908 <write_byte+0x58>)
 80018e0:	f00c fce8 	bl	800e2b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018e4:	1db9      	adds	r1, r7, #6
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <write_byte+0x58>)
 80018ec:	f00c fce2 	bl	800e2b4 <HAL_SPI_Transmit>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <write_byte+0x54>)
 80018f8:	f009 fb2c 	bl	800af54 <HAL_GPIO_WritePin>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40020400 	.word	0x40020400
 8001908:	20043710 	.word	0x20043710

0800190c <IMU_init>:

uint16_t IMU_init() {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff ff9c 	bl	8001854 <read_byte>
 800191c:	4603      	mov	r3, r0
 800191e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	2be0      	cmp	r3, #224	; 0xe0
 8001924:	d119      	bne.n	800195a <IMU_init+0x4e>
		ret = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800192a:	2101      	movs	r1, #1
 800192c:	2006      	movs	r0, #6
 800192e:	f7ff ffbf 	bl	80018b0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001932:	2110      	movs	r1, #16
 8001934:	2003      	movs	r0, #3
 8001936:	f7ff ffbb 	bl	80018b0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800193a:	2120      	movs	r1, #32
 800193c:	207f      	movs	r0, #127	; 0x7f
 800193e:	f7ff ffb7 	bl	80018b0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001942:	2106      	movs	r1, #6
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff ffb3 	bl	80018b0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800194a:	2106      	movs	r1, #6
 800194c:	2014      	movs	r0, #20
 800194e:	f7ff ffaf 	bl	80018b0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001952:	2100      	movs	r1, #0
 8001954:	207f      	movs	r0, #127	; 0x7f
 8001956:	f7ff ffab 	bl	80018b0 <write_byte>
	}
	return ret;
 800195a:	88fb      	ldrh	r3, [r7, #6]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <read_gyro_data>:

void read_gyro_data() {
 8001964:	b598      	push	{r3, r4, r7, lr}
 8001966:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001968:	2033      	movs	r0, #51	; 0x33
 800196a:	f7ff ff73 	bl	8001854 <read_byte>
 800196e:	4603      	mov	r3, r0
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b21c      	sxth	r4, r3
 8001974:	2034      	movs	r0, #52	; 0x34
 8001976:	f7ff ff6d 	bl	8001854 <read_byte>
 800197a:	4603      	mov	r3, r0
 800197c:	b21b      	sxth	r3, r3
 800197e:	4323      	orrs	r3, r4
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <read_gyro_data+0x64>)
 8001984:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001986:	2035      	movs	r0, #53	; 0x35
 8001988:	f7ff ff64 	bl	8001854 <read_byte>
 800198c:	4603      	mov	r3, r0
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21c      	sxth	r4, r3
 8001992:	2036      	movs	r0, #54	; 0x36
 8001994:	f7ff ff5e 	bl	8001854 <read_byte>
 8001998:	4603      	mov	r3, r0
 800199a:	b21b      	sxth	r3, r3
 800199c:	4323      	orrs	r3, r4
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <read_gyro_data+0x68>)
 80019a2:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019a4:	2037      	movs	r0, #55	; 0x37
 80019a6:	f7ff ff55 	bl	8001854 <read_byte>
 80019aa:	4603      	mov	r3, r0
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b21c      	sxth	r4, r3
 80019b0:	2038      	movs	r0, #56	; 0x38
 80019b2:	f7ff ff4f 	bl	8001854 <read_byte>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	4323      	orrs	r3, r4
 80019bc:	b21a      	sxth	r2, r3
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <read_gyro_data+0x6c>)
 80019c0:	801a      	strh	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	bd98      	pop	{r3, r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200436ac 	.word	0x200436ac
 80019cc:	200436aa 	.word	0x200436aa
 80019d0:	200436a4 	.word	0x200436a4

080019d4 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	805a      	strh	r2, [r3, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	809a      	strh	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	80da      	strh	r2, [r3, #6]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	811a      	strh	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	815a      	strh	r2, [r3, #10]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
{

}
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a20:	f7ff ff74 	bl	800190c <IMU_init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a28:	f7ff fb3a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fb46 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <_ZN3IMU4initEv+0x44>)
 8001a36:	f7ff fb6d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fb3f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <_ZN3IMU4initEv+0x48>)
 8001a48:	f7ff fb64 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a50:	f007 ffea 	bl	8009a28 <HAL_Delay>

}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	08019cf4 	.word	0x08019cf4
 8001a60:	08019d00 	.word	0x08019d00
 8001a64:	00000000 	.word	0x00000000

08001a68 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a70:	f7ff ff78 	bl	8001964 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <_ZN3IMU12updateValuesEv+0xa4>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd5b 	bl	8000554 <__aeabi_i2d>
 8001a9e:	a316      	add	r3, pc, #88	; (adr r3, 8001af8 <_ZN3IMU12updateValuesEv+0x90>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fdc0 	bl	8000628 <__aeabi_dmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4625      	mov	r5, r4
 8001aae:	461c      	mov	r4, r3
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <_ZN3IMU12updateValuesEv+0xac>)
 8001ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd4c 	bl	8000554 <__aeabi_i2d>
 8001abc:	a310      	add	r3, pc, #64	; (adr r3, 8001b00 <_ZN3IMU12updateValuesEv+0x98>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fdb1 	bl	8000628 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fbf5 	bl	80002bc <__adddf3>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4621      	mov	r1, r4
 8001ada:	f7ff f855 	bl	8000b88 <__aeabi_d2iz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <_ZN3IMU12updateValuesEv+0xac>)
 8001aee:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdb0      	pop	{r4, r5, r7, pc}
 8001af8:	eb851eb8 	.word	0xeb851eb8
 8001afc:	3f9eb851 	.word	0x3f9eb851
 8001b00:	70a3d70a 	.word	0x70a3d70a
 8001b04:	3fef0a3d 	.word	0x3fef0a3d
 8001b08:	200436ac 	.word	0x200436ac
 8001b0c:	200436aa 	.word	0x200436aa
 8001b10:	200436a4 	.word	0x200436a4
 8001b14:	20000210 	.word	0x20000210

08001b18 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7fe fd1b 	bl	8000578 <__aeabi_f2d>
 8001b42:	a316      	add	r3, pc, #88	; (adr r3, 8001b9c <_ZN3IMU8getOmegaEv+0x84>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe98 	bl	800087c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b56:	a313      	add	r3, pc, #76	; (adr r3, 8001ba4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fd62 	bl	8000628 <__aeabi_dmul>
 8001b64:	4603      	mov	r3, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <_ZN3IMU8getOmegaEv+0x80>)
 8001b72:	f7fe fe83 	bl	800087c <__aeabi_ddiv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	f7ff f84b 	bl	8000c18 <__aeabi_d2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	ee07 3a90 	vmov	s15, r3
}
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	40668000 	.word	0x40668000
 8001b9c:	66666666 	.word	0x66666666
 8001ba0:	40306666 	.word	0x40306666
 8001ba4:	54411744 	.word	0x54411744
 8001ba8:	400921fb 	.word	0x400921fb

08001bac <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bb4:	466b      	mov	r3, sp
 8001bb6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bbc:	f007 ff34 	bl	8009a28 <HAL_Delay>
	lcd_clear();
 8001bc0:	f7ff fa6e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fa7a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001bcc:	4840      	ldr	r0, [pc, #256]	; (8001cd0 <_ZN3IMU11calibrationEv+0x124>)
 8001bce:	f7ff faa1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fa73 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bda:	483e      	ldr	r0, [pc, #248]	; (8001cd4 <_ZN3IMU11calibrationEv+0x128>)
 8001bdc:	f7ff fa9a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001be0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001be4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001be6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bea:	1e5d      	subs	r5, r3, #1
 8001bec:	61bd      	str	r5, [r7, #24]
 8001bee:	462b      	mov	r3, r5
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	f04f 0400 	mov.w	r4, #0
 8001c00:	0154      	lsls	r4, r2, #5
 8001c02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c06:	014b      	lsls	r3, r1, #5
 8001c08:	462b      	mov	r3, r5
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f04f 0400 	mov.w	r4, #0
 8001c1a:	0154      	lsls	r4, r2, #5
 8001c1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c20:	014b      	lsls	r3, r1, #5
 8001c22:	462b      	mov	r3, r5
 8001c24:	3301      	adds	r3, #1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	3303      	adds	r3, #3
 8001c2a:	3307      	adds	r3, #7
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	ebad 0d03 	sub.w	sp, sp, r3
 8001c34:	466b      	mov	r3, sp
 8001c36:	3303      	adds	r3, #3
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	83fb      	strh	r3, [r7, #30]
 8001c42:	8bfa      	ldrh	r2, [r7, #30]
 8001c44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	da13      	bge.n	8001c74 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c52:	8bfb      	ldrh	r3, [r7, #30]
 8001c54:	ee07 2a90 	vmov	s15, r2
 8001c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f007 fede 	bl	8009a28 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c6c:	8bfb      	ldrh	r3, [r7, #30]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	83fb      	strh	r3, [r7, #30]
 8001c72:	e7e6      	b.n	8001c42 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d00e      	beq.n	8001caa <_ZN3IMU11calibrationEv+0xfe>
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e7ec      	b.n	8001c84 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001caa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001cc4:	46b5      	mov	sp, r6
}
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	08019d04 	.word	0x08019d04
 8001cd4:	08019d10 	.word	0x08019d10

08001cd8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	b299      	uxth	r1, r3
 8001cec:	1dfa      	adds	r2, r7, #7
 8001cee:	2364      	movs	r3, #100	; 0x64
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <INA260_read+0x50>)
 8001cf6:	f009 fa7f 	bl	800b1f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	f107 020c 	add.w	r2, r7, #12
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	4807      	ldr	r0, [pc, #28]	; (8001d28 <INA260_read+0x50>)
 8001d0a:	f009 fb73 	bl	800b3f4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d0e:	7b3b      	ldrb	r3, [r7, #12]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7b7b      	ldrb	r3, [r7, #13]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d1e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200438c4 	.word	0x200438c4

08001d2c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4604      	mov	r4, r0
 8001d34:	4608      	mov	r0, r1
 8001d36:	4611      	mov	r1, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71bb      	strb	r3, [r7, #6]
 8001d42:	460b      	mov	r3, r1
 8001d44:	717b      	strb	r3, [r7, #5]
 8001d46:	4613      	mov	r3, r2
 8001d48:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	733b      	strb	r3, [r7, #12]
 8001d4e:	79bb      	ldrb	r3, [r7, #6]
 8001d50:	737b      	strb	r3, [r7, #13]
 8001d52:	797b      	ldrb	r3, [r7, #5]
 8001d54:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d56:	793b      	ldrb	r3, [r7, #4]
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	f107 020c 	add.w	r2, r7, #12
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2303      	movs	r3, #3
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <INA260_write+0x48>)
 8001d66:	f009 fa47 	bl	800b1f8 <HAL_I2C_Master_Transmit>
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200438c4 	.word	0x200438c4

08001d78 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	460b      	mov	r3, r1
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	4613      	mov	r3, r2
 8001d88:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	79ba      	ldrb	r2, [r7, #6]
 8001d8e:	79f9      	ldrb	r1, [r7, #7]
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff ffcb 	bl	8001d2c <INA260_write>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	461a      	mov	r2, r3
 8001dac:	21df      	movs	r1, #223	; 0xdf
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff ffe2 	bl	8001d78 <setConfig>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
{

}
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de4:	482a      	ldr	r0, [pc, #168]	; (8001e90 <_ZN8JoyStick8getValueEv+0xbc>)
 8001de6:	f009 f89d 	bl	800af24 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <_ZN8JoyStick8getValueEv+0x2e>
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e02:	2101      	movs	r1, #1
 8001e04:	4823      	ldr	r0, [pc, #140]	; (8001e94 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e06:	f009 f88d 	bl	800af24 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <_ZN8JoyStick8getValueEv+0x4e>
 8001e1a:	89fb      	ldrh	r3, [r7, #14]
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e26:	481a      	ldr	r0, [pc, #104]	; (8001e90 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e28:	f009 f87c 	bl	800af24 <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <_ZN8JoyStick8getValueEv+0x70>
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e44:	2104      	movs	r1, #4
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e48:	f009 f86c 	bl	800af24 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <_ZN8JoyStick8getValueEv+0x90>
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e68:	f009 f85c 	bl	800af24 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <_ZN8JoyStick8getValueEv+0xb0>
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e84:	89fb      	ldrh	r3, [r7, #14]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40020400 	.word	0x40020400

08001e9c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	2b52      	cmp	r3, #82	; 0x52
 8001eac:	d112      	bne.n	8001ed4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb4:	4856      	ldr	r0, [pc, #344]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001eb6:	f009 f84d 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec0:	4853      	ldr	r0, [pc, #332]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001ec2:	f009 f847 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ecc:	4850      	ldr	r0, [pc, #320]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001ece:	f009 f841 	bl	800af54 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001ed2:	e098      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b47      	cmp	r3, #71	; 0x47
 8001ed8:	d112      	bne.n	8001f00 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee0:	484b      	ldr	r0, [pc, #300]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001ee2:	f009 f837 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eec:	4848      	ldr	r0, [pc, #288]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001eee:	f009 f831 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef8:	4845      	ldr	r0, [pc, #276]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001efa:	f009 f82b 	bl	800af54 <HAL_GPIO_WritePin>
}
 8001efe:	e082      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b42      	cmp	r3, #66	; 0x42
 8001f04:	d112      	bne.n	8001f2c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0c:	4840      	ldr	r0, [pc, #256]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f0e:	f009 f821 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f18:	483d      	ldr	r0, [pc, #244]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f1a:	f009 f81b 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f24:	483a      	ldr	r0, [pc, #232]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f26:	f009 f815 	bl	800af54 <HAL_GPIO_WritePin>
}
 8001f2a:	e06c      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	2b43      	cmp	r3, #67	; 0x43
 8001f30:	d112      	bne.n	8001f58 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f38:	4835      	ldr	r0, [pc, #212]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f3a:	f009 f80b 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f44:	4832      	ldr	r0, [pc, #200]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f46:	f009 f805 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f50:	482f      	ldr	r0, [pc, #188]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f52:	f008 ffff 	bl	800af54 <HAL_GPIO_WritePin>
}
 8001f56:	e056      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f5c:	d112      	bne.n	8001f84 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	482a      	ldr	r0, [pc, #168]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f008 fff5 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f70:	4827      	ldr	r0, [pc, #156]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f72:	f008 ffef 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7c:	4824      	ldr	r0, [pc, #144]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f7e:	f008 ffe9 	bl	800af54 <HAL_GPIO_WritePin>
}
 8001f82:	e040      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	2b59      	cmp	r3, #89	; 0x59
 8001f88:	d112      	bne.n	8001fb0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f90:	481f      	ldr	r0, [pc, #124]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f008 ffdf 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001f9e:	f008 ffd9 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa8:	4819      	ldr	r0, [pc, #100]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001faa:	f008 ffd3 	bl	800af54 <HAL_GPIO_WritePin>
}
 8001fae:	e02a      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b57      	cmp	r3, #87	; 0x57
 8001fb4:	d112      	bne.n	8001fdc <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f008 ffc9 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc8:	4811      	ldr	r0, [pc, #68]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001fca:	f008 ffc3 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd4:	480e      	ldr	r0, [pc, #56]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001fd6:	f008 ffbd 	bl	800af54 <HAL_GPIO_WritePin>
}
 8001fda:	e014      	b.n	8002006 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b7e      	cmp	r3, #126	; 0x7e
 8001fe0:	d111      	bne.n	8002006 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f008 ffb3 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff4:	4806      	ldr	r0, [pc, #24]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8001ff6:	f008 ffad 	bl	800af54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <_ZN3LED9fullColorEc+0x174>)
 8002002:	f008 ffa7 	bl	800af54 <HAL_GPIO_WritePin>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40020000 	.word	0x40020000

08002014 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
 8002020:	4613      	mov	r3, r2
 8002022:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002032:	4813      	ldr	r0, [pc, #76]	; (8002080 <_ZN3LED2LREaa+0x6c>)
 8002034:	f008 ff8e 	bl	800af54 <HAL_GPIO_WritePin>
 8002038:	e009      	b.n	800204e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800203a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <_ZN3LED2LREaa+0x6c>)
 800204a:	f008 ff83 	bl	800af54 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800204e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d106      	bne.n	8002064 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <_ZN3LED2LREaa+0x6c>)
 800205e:	f008 ff79 	bl	800af54 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002062:	e009      	b.n	8002078 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002064:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002072:	4803      	ldr	r0, [pc, #12]	; (8002080 <_ZN3LED2LREaa+0x6c>)
 8002074:	f008 ff6e 	bl	800af54 <HAL_GPIO_WritePin>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40020000 	.word	0x40020000

08002084 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002084:	b580      	push	{r7, lr}
 8002086:	b092      	sub	sp, #72	; 0x48
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe92 	bl	8001dbc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	647b      	str	r3, [r7, #68]	; 0x44
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	331c      	adds	r3, #28
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
 80020a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d008      	beq.n	80020c0 <_ZN10LineSensorC1Ev+0x3c>
 80020ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	2200      	movs	r2, #0
 80020b6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	3302      	adds	r3, #2
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
 80020be:	e7f2      	b.n	80020a6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d009      	beq.n	80020ee <_ZN10LineSensorC1Ev+0x6a>
 80020da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020dc:	623b      	str	r3, [r7, #32]
		s = 0;
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e8:	3304      	adds	r3, #4
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
 80020ec:	e7f1      	b.n	80020d2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3338      	adds	r3, #56	; 0x38
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d009      	beq.n	800211c <_ZN10LineSensorC1Ev+0x98>
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	617b      	str	r3, [r7, #20]
		m = 0;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	3304      	adds	r3, #4
 8002118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211a:	e7f1      	b.n	8002100 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	3338      	adds	r3, #56	; 0x38
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	429a      	cmp	r2, r3
 8002134:	d009      	beq.n	800214a <_ZN10LineSensorC1Ev+0xc6>
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	60bb      	str	r3, [r7, #8]
		s = 1;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002140:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002144:	3304      	adds	r3, #4
 8002146:	63bb      	str	r3, [r7, #56]	; 0x38
 8002148:	e7f1      	b.n	800212e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	3748      	adds	r7, #72	; 0x48
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	220e      	movs	r2, #14
 8002160:	4619      	mov	r1, r3
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002164:	f007 fcc6 	bl	8009af4 <HAL_ADC_Start_DMA>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200437e8 	.word	0x200437e8

08002174 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b0d      	cmp	r3, #13
 8002184:	dc2f      	bgt.n	80021e6 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3392      	adds	r3, #146	; 0x92
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	33a0      	adds	r3, #160	; 0xa0
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4619      	mov	r1, r3
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a5b      	subs	r3, r3, r1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	440b      	add	r3, r1
 80021d2:	3306      	adds	r3, #6
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e7cc      	b.n	8002180 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f0:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	d902      	bls.n	8002200 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]


}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	2000021c 	.word	0x2000021c

08002210 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800221e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002222:	2b0d      	cmp	r3, #13
 8002224:	f200 80b8 	bhi.w	8002398 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800222e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002232:	2b09      	cmp	r3, #9
 8002234:	d81c      	bhi.n	8002270 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002236:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800223a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800223e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4423      	add	r3, r4
 800224e:	3306      	adds	r3, #6
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4403      	add	r3, r0
 8002254:	3304      	adds	r3, #4
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	008b      	lsls	r3, r1, #2
 800225a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800225e:	440b      	add	r3, r1
 8002260:	3b30      	subs	r3, #48	; 0x30
 8002262:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002264:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002268:	3301      	adds	r3, #1
 800226a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800226e:	e7de      	b.n	800222e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002270:	2300      	movs	r3, #0
 8002272:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227a:	2b09      	cmp	r3, #9
 800227c:	d84d      	bhi.n	800231a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800227e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002282:	3301      	adds	r3, #1
 8002284:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002288:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800228c:	2b09      	cmp	r3, #9
 800228e:	d83e      	bhi.n	800230e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002290:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800229a:	4413      	add	r3, r2
 800229c:	3b30      	subs	r3, #48	; 0x30
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ac:	4413      	add	r3, r2
 80022ae:	3b30      	subs	r3, #48	; 0x30
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022bc:	d521      	bpl.n	8002302 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c8:	4413      	add	r3, r2
 80022ca:	3b30      	subs	r3, #48	; 0x30
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022d0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022de:	440a      	add	r2, r1
 80022e0:	3a30      	subs	r2, #48	; 0x30
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ea:	440b      	add	r3, r1
 80022ec:	3b30      	subs	r3, #48	; 0x30
 80022ee:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002300:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	3301      	adds	r3, #1
 8002308:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800230c:	e7bc      	b.n	8002288 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800230e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002312:	3301      	adds	r3, #1
 8002314:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002318:	e7ad      	b.n	8002276 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f92b 	bl	8000578 <__aeabi_f2d>
 8002322:	a32a      	add	r3, pc, #168	; (adr r3, 80023cc <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f97e 	bl	8000628 <__aeabi_dmul>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
 8002330:	4625      	mov	r5, r4
 8002332:	461c      	mov	r4, r3
 8002334:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002338:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f919 	bl	8000578 <__aeabi_f2d>
 8002346:	a31c      	add	r3, pc, #112	; (adr r3, 80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f96c 	bl	8000628 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f7fd ffb0 	bl	80002bc <__adddf3>
 800235c:	4603      	mov	r3, r0
 800235e:	460c      	mov	r4, r1
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fc54 	bl	8000c18 <__aeabi_d2f>
 8002370:	4601      	mov	r1, r0
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 800237e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800238c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002390:	3301      	adds	r3, #1
 8002392:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002396:	e742      	b.n	800221e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023a0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3738      	adds	r7, #56	; 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdb0      	pop	{r4, r5, r7, pc}
 80023b4:	f3af 8000 	nop.w
 80023b8:	66666666 	.word	0x66666666
 80023bc:	3fee6666 	.word	0x3fee6666
 80023c0:	20000220 	.word	0x20000220
 80023c4:	20000214 	.word	0x20000214
 80023c8:	20000218 	.word	0x20000218
 80023cc:	9999999a 	.word	0x9999999a
 80023d0:	3fa99999 	.word	0x3fa99999

080023d4 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0a0      	sub	sp, #128	; 0x80
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023dc:	2064      	movs	r0, #100	; 0x64
 80023de:	f007 fb23 	bl	8009a28 <HAL_Delay>

	lcd_clear();
 80023e2:	f7fe fe5d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023e6:	2100      	movs	r1, #0
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fe69 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023ee:	4886      	ldr	r0, [pc, #536]	; (8002608 <_ZN10LineSensor11calibrationEv+0x234>)
 80023f0:	f7fe fe90 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fe62 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023fc:	4883      	ldr	r0, [pc, #524]	; (800260c <_ZN10LineSensor11calibrationEv+0x238>)
 80023fe:	f7fe fe89 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002402:	2300      	movs	r3, #0
 8002404:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002408:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800240c:	2b0d      	cmp	r3, #13
 800240e:	d823      	bhi.n	8002458 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002410:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002414:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	32b0      	adds	r2, #176	; 0xb0
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	440a      	add	r2, r1
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002428:	440b      	add	r3, r1
 800242a:	3b40      	subs	r3, #64	; 0x40
 800242c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800242e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002432:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	32b0      	adds	r2, #176	; 0xb0
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	440a      	add	r2, r1
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002446:	440b      	add	r3, r1
 8002448:	3b78      	subs	r3, #120	; 0x78
 800244a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800244c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002450:	3301      	adds	r3, #1
 8002452:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002456:	e7d7      	b.n	8002408 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fcb8 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8002464:	4603      	mov	r3, r0
 8002466:	2b02      	cmp	r3, #2
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d079      	beq.n	8002568 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002474:	2300      	movs	r3, #0
 8002476:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800247a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800247e:	2b0d      	cmp	r3, #13
 8002480:	d850      	bhi.n	8002524 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002482:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800248c:	4413      	add	r3, r2
 800248e:	3b40      	subs	r3, #64	; 0x40
 8002490:	ed93 7a00 	vldr	s14, [r3]
 8002494:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	33b0      	adds	r3, #176	; 0xb0
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	d50f      	bpl.n	80024ce <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024ae:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024b2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	32b0      	adds	r2, #176	; 0xb0
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	440a      	add	r2, r1
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024c6:	440b      	add	r3, r1
 80024c8:	3b40      	subs	r3, #64	; 0x40
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e024      	b.n	8002518 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024ce:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024d8:	4413      	add	r3, r2
 80024da:	3b78      	subs	r3, #120	; 0x78
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	33b0      	adds	r3, #176	; 0xb0
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	dd0e      	ble.n	8002518 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024fa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024fe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	32b0      	adds	r2, #176	; 0xb0
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	440a      	add	r2, r1
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002512:	440b      	add	r3, r1
 8002514:	3b78      	subs	r3, #120	; 0x78
 8002516:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002518:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800251c:	3301      	adds	r3, #1
 800251e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002522:	e7aa      	b.n	800247a <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800252a:	4618      	mov	r0, r3
 800252c:	f002 ff12 	bl	8005354 <_ZN12RotarySwitch8getValueEv>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002546:	2201      	movs	r2, #1
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fd61 	bl	8002014 <_ZN3LED2LREaa>
 8002552:	e781      	b.n	8002458 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800255a:	2200      	movs	r2, #0
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fd57 	bl	8002014 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 8002566:	e777      	b.n	8002458 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002568:	2300      	movs	r3, #0
 800256a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800256e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002572:	2b0d      	cmp	r3, #13
 8002574:	d826      	bhi.n	80025c4 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002576:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002580:	4413      	add	r3, r2
 8002582:	3b40      	subs	r3, #64	; 0x40
 8002584:	ed93 7a00 	vldr	s14, [r3]
 8002588:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002592:	4413      	add	r3, r2
 8002594:	3b78      	subs	r3, #120	; 0x78
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800259e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025a2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002610 <_ZN10LineSensor11calibrationEv+0x23c>
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	3392      	adds	r3, #146	; 0x92
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	3304      	adds	r3, #4
 80025b4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025b8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025bc:	3301      	adds	r3, #1
 80025be:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025c2:	e7d4      	b.n	800256e <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025ce:	2b0d      	cmp	r3, #13
 80025d0:	d815      	bhi.n	80025fe <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80025d2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80025d6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025e0:	440a      	add	r2, r1
 80025e2:	3a78      	subs	r2, #120	; 0x78
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	33a0      	adds	r3, #160	; 0xa0
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3304      	adds	r3, #4
 80025f0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025f2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025f6:	3301      	adds	r3, #1
 80025f8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025fc:	e7e5      	b.n	80025ca <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80025fe:	bf00      	nop
 8002600:	3780      	adds	r7, #128	; 0x80
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	08019d1c 	.word	0x08019d1c
 800260c:	08019d28 	.word	0x08019d28
 8002610:	447a0000 	.word	0x447a0000

08002614 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3338      	adds	r3, #56	; 0x38
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	429a      	cmp	r2, r3
 8002638:	d012      	beq.n	8002660 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026b4 <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	db02      	blt.n	8002658 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002652:	8bfb      	ldrh	r3, [r7, #30]
 8002654:	3301      	adds	r3, #1
 8002656:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	3304      	adds	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e7e8      	b.n	8002632 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002660:	8bfb      	ldrh	r3, [r7, #30]
 8002662:	2b0d      	cmp	r3, #13
 8002664:	d906      	bls.n	8002674 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	e002      	b.n	800267a <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b31      	cmp	r3, #49	; 0x31
 8002680:	d903      	bls.n	800268a <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e002      	b.n	8002690 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	f242 720f 	movw	r2, #9999	; 0x270f
 8002698:	4293      	cmp	r3, r2
 800269a:	d903      	bls.n	80026a4 <_ZN10LineSensor13emergencyStopEv+0x90>
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800269e:	f242 7210 	movw	r2, #10000	; 0x2710
 80026a2:	801a      	strh	r2, [r3, #0]

	return flag;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026a6:	781b      	ldrb	r3, [r3, #0]

}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3724      	adds	r7, #36	; 0x24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	442f0000 	.word	0x442f0000
 80026b8:	20000258 	.word	0x20000258
 80026bc:	2000025a 	.word	0x2000025a

080026c0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ce:	eef0 7ae7 	vabs.f32	s15, s15
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	635a      	str	r2, [r3, #52]	; 0x34
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	64da      	str	r2, [r3, #76]	; 0x4c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800278e:	3314      	adds	r3, #20
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800279c:	3358      	adds	r3, #88	; 0x58
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027a8:	335a      	adds	r3, #90	; 0x5a
 80027aa:	2200      	movs	r2, #0
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027b4:	335c      	adds	r3, #92	; 0x5c
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027c0:	3330      	adds	r3, #48	; 0x30
 80027c2:	2200      	movs	r2, #0
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027cc:	3332      	adds	r3, #50	; 0x32
 80027ce:	2200      	movs	r2, #0
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027d8:	3334      	adds	r3, #52	; 0x34
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027e4:	3336      	adds	r3, #54	; 0x36
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027f0:	3337      	adds	r3, #55	; 0x37
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027fc:	3338      	adds	r3, #56	; 0x38
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002808:	333c      	adds	r3, #60	; 0x3c
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002816:	3340      	adds	r3, #64	; 0x40
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002824:	3344      	adds	r3, #68	; 0x44
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002832:	3348      	adds	r3, #72	; 0x48
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002840:	334c      	adds	r3, #76	; 0x4c
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800284c:	334e      	adds	r3, #78	; 0x4e
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002874:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002880:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	82fb      	strh	r3, [r7, #22]
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	f241 726f 	movw	r2, #5999	; 0x176f
 800288c:	4293      	cmp	r3, r2
 800288e:	d80d      	bhi.n	80028ac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1cc>
		velocity_table_[i] = 0;
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002898:	3306      	adds	r3, #6
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028a4:	8afb      	ldrh	r3, [r7, #22]
 80028a6:	3301      	adds	r3, #1
 80028a8:	82fb      	strh	r3, [r7, #22]
 80028aa:	e7ec      	b.n	8002886 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028ac:	2300      	movs	r3, #0
 80028ae:	82bb      	strh	r3, [r7, #20]
 80028b0:	8abb      	ldrh	r3, [r7, #20]
 80028b2:	2b63      	cmp	r3, #99	; 0x63
 80028b4:	d80d      	bhi.n	80028d2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f2>
		crossline_distance_[i] = 0;
 80028b6:	8abb      	ldrh	r3, [r7, #20]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028be:	3318      	adds	r3, #24
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028ca:	8abb      	ldrh	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	82bb      	strh	r3, [r7, #20]
 80028d0:	e7ee      	b.n	80028b0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028d2:	2300      	movs	r3, #0
 80028d4:	827b      	strh	r3, [r7, #18]
 80028d6:	8a7b      	ldrh	r3, [r7, #18]
 80028d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028dc:	d20d      	bcs.n	80028fa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21a>
		sideline_distance_[i] = 0;
 80028de:	8a7b      	ldrh	r3, [r7, #18]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028e6:	333c      	adds	r3, #60	; 0x3c
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	3301      	adds	r3, #1
 80028f6:	827b      	strh	r3, [r7, #18]
 80028f8:	e7ed      	b.n	80028d6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028fa:	2300      	movs	r3, #0
 80028fc:	823b      	strh	r3, [r7, #16]
 80028fe:	8a3b      	ldrh	r3, [r7, #16]
 8002900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002904:	d20d      	bcs.n	8002922 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x242>
		all_sideline_distance_[i] = 0;
 8002906:	8a3b      	ldrh	r3, [r7, #16]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800291a:	8a3b      	ldrh	r3, [r7, #16]
 800291c:	3301      	adds	r3, #1
 800291e:	823b      	strh	r3, [r7, #16]
 8002920:	e7ed      	b.n	80028fe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21e>
	}
}
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4618      	mov	r0, r3
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_ZN9LineTrace9calcAngleEv>:
	return diff;

}

float LineTrace::calcAngle()
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b094      	sub	sp, #80	; 0x50
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	getSensorValues();
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f86d 	bl	8002a18 <_ZN9LineTrace15getSensorValuesEv>

	float den = 0;
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
	float num = 0;
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
	float angle_list[SENSOR_NUM] = {-1.02, -0.85, -0.68, -0.51, -0.34, -0.17, 0, 0.17, 0.34, 0.51, 0.68, 0.85, 1.02};
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <_ZN9LineTrace9calcAngleEv+0xe0>)
 800294c:	f107 040c 	add.w	r4, r7, #12
 8002950:	461d      	mov	r5, r3
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295e:	682b      	ldr	r3, [r5, #0]
 8002960:	6023      	str	r3, [r4, #0]

	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 8002962:	2300      	movs	r3, #0
 8002964:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002968:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d82e      	bhi.n	80029ce <_ZN9LineTrace9calcAngleEv+0x9e>


		num += angle_list[i] * sensor_digital_values_[i];
 8002970:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800297a:	4413      	add	r3, r2
 800297c:	3b44      	subs	r3, #68	; 0x44
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	3320      	adds	r3, #32
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002998:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		den += sensor_digital_values_[i];
 80029a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	3320      	adds	r3, #32
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 80029c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029c6:	3301      	adds	r3, #1
 80029c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029cc:	e7cc      	b.n	8002968 <_ZN9LineTrace9calcAngleEv+0x38>
		num += angle_list[i] * sensor_values_[i];
		den += sensor_values_[i];
		*/
	}

	float angle = 0;
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40
	if(den != 0) angle = num / den;
 80029d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80029d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	d008      	beq.n	80029f4 <_ZN9LineTrace9calcAngleEv+0xc4>
 80029e2:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80029e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80029f2:	e002      	b.n	80029fa <_ZN9LineTrace9calcAngleEv+0xca>
	else angle = 0;
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	643b      	str	r3, [r7, #64]	; 0x40

	mon_steer_angle = angle;
 80029fa:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <_ZN9LineTrace9calcAngleEv+0xe4>)
 80029fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fe:	6013      	str	r3, [r2, #0]

	return angle;
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	ee07 3a90 	vmov	s15, r3
}
 8002a06:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0a:	3750      	adds	r7, #80	; 0x50
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a10:	08019d6c 	.word	0x08019d6c
 8002a14:	2000025c 	.word	0x2000025c

08002a18 <_ZN9LineTrace15getSensorValuesEv>:

void LineTrace::getSensorValues()
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	sensor_values_[0] = 1000 - line_sensor_->sensor[0];
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002a28:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	sensor_values_[1] = 1000 - line_sensor_->sensor[1];
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002a3e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	sensor_values_[2] = 1000 - line_sensor_->sensor[2];
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002a54:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	sensor_values_[3] = 1000 - line_sensor_->sensor[3];
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002a6a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	sensor_values_[4] = 1000 - line_sensor_->sensor[4];
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002a80:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	sensor_values_[5] = 1000 - line_sensor_->sensor[5];
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002a96:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	sensor_values_[6] = 1000 - (line_sensor_->sensor[6] + line_sensor_->sensor[7]) / 2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8002ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sensor_values_[7] = 1000 - line_sensor_->sensor[8];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002ad6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	sensor_values_[8] = 1000 - line_sensor_->sensor[9];
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002aec:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	sensor_values_[9] = 1000 - line_sensor_->sensor[10];
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002b02:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	sensor_values_[10] = 1000 - line_sensor_->sensor[11];
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002b18:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	sensor_values_[11] = 1000 - line_sensor_->sensor[12];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002b2e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	sensor_values_[12] = 1000 - line_sensor_->sensor[13];
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002b44:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002c34 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	for(uint16_t i = 0; i < 12; i++){
 8002b52:	2300      	movs	r3, #0
 8002b54:	81fb      	strh	r3, [r7, #14]
 8002b56:	89fb      	ldrh	r3, [r7, #14]
 8002b58:	2b0b      	cmp	r3, #11
 8002b5a:	d824      	bhi.n	8002ba6 <_ZN9LineTrace15getSensorValuesEv+0x18e>
		if(sensor_values_[i] >= 500) sensor_digital_values_[i] = 1;
 8002b5c:	89fb      	ldrh	r3, [r7, #14]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	3314      	adds	r3, #20
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002c38 <_ZN9LineTrace15getSensorValuesEv+0x220>
 8002b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	db09      	blt.n	8002b8c <_ZN9LineTrace15getSensorValuesEv+0x174>
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	3320      	adds	r3, #32
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	3304      	adds	r3, #4
 8002b84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e008      	b.n	8002b9e <_ZN9LineTrace15getSensorValuesEv+0x186>
		else sensor_digital_values_[i] = 0;
 8002b8c:	89fb      	ldrh	r3, [r7, #14]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	3320      	adds	r3, #32
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < 12; i++){
 8002b9e:	89fb      	ldrh	r3, [r7, #14]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	81fb      	strh	r3, [r7, #14]
 8002ba4:	e7d7      	b.n	8002b56 <_ZN9LineTrace15getSensorValuesEv+0x13e>
	}

	mon_sens0 = sensor_digital_values_[0];
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <_ZN9LineTrace15getSensorValuesEv+0x224>)
 8002bae:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor_digital_values_[1];
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <_ZN9LineTrace15getSensorValuesEv+0x228>)
 8002bb8:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor_digital_values_[2];
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <_ZN9LineTrace15getSensorValuesEv+0x22c>)
 8002bc2:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor_digital_values_[3];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <_ZN9LineTrace15getSensorValuesEv+0x230>)
 8002bcc:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor_digital_values_[4];
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <_ZN9LineTrace15getSensorValuesEv+0x234>)
 8002bd6:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor_digital_values_[5];
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <_ZN9LineTrace15getSensorValuesEv+0x238>)
 8002be0:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor_digital_values_[6];
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <_ZN9LineTrace15getSensorValuesEv+0x23c>)
 8002bea:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor_digital_values_[7];
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <_ZN9LineTrace15getSensorValuesEv+0x240>)
 8002bf4:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor_digital_values_[8];
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <_ZN9LineTrace15getSensorValuesEv+0x244>)
 8002bfe:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor_digital_values_[9];
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <_ZN9LineTrace15getSensorValuesEv+0x248>)
 8002c08:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor_digital_values_[10];
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <_ZN9LineTrace15getSensorValuesEv+0x24c>)
 8002c12:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor_digital_values_[11];
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <_ZN9LineTrace15getSensorValuesEv+0x250>)
 8002c1c:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor_digital_values_[12];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <_ZN9LineTrace15getSensorValuesEv+0x254>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	447a0000 	.word	0x447a0000
 8002c38:	43fa0000 	.word	0x43fa0000
 8002c3c:	20000260 	.word	0x20000260
 8002c40:	20000264 	.word	0x20000264
 8002c44:	20000268 	.word	0x20000268
 8002c48:	2000026c 	.word	0x2000026c
 8002c4c:	20000270 	.word	0x20000270
 8002c50:	20000274 	.word	0x20000274
 8002c54:	20000278 	.word	0x20000278
 8002c58:	2000027c 	.word	0x2000027c
 8002c5c:	20000280 	.word	0x20000280
 8002c60:	20000284 	.word	0x20000284
 8002c64:	20000288 	.word	0x20000288
 8002c68:	2000028c 	.word	0x2000028c
 8002c6c:	20000290 	.word	0x20000290

08002c70 <_ZN9LineTrace18steeringAngleTraceEv>:
	pre_diff = diff;

}

void LineTrace::steeringAngleTrace()
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	float steering_angle = calcAngle();
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe59 	bl	8002930 <_ZN9LineTrace9calcAngleEv>
 8002c7e:	ed87 0a03 	vstr	s0, [r7, #12]

	float r = 0;
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
	float current_velocity = velocity_ctrl_->getCurrentVelocity();
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 ffeb 	bl	8005c68 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8002c92:	ed87 0a02 	vstr	s0, [r7, #8]
	//float current_velocity = 0.1;
	float target_omega = 0;
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]

	if(steering_angle != 0){
 8002c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d022      	beq.n	8002cf0 <_ZN9LineTrace18steeringAngleTraceEv+0x80>
		r = CENTER_OF_ROTATION_TO_CENTER_OF_SENSOR / tan(steering_angle);
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7fd fc64 	bl	8000578 <__aeabi_f2d>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	ec44 3b10 	vmov	d0, r3, r4
 8002cb8:	f011 fc36 	bl	8014528 <tan>
 8002cbc:	ec54 3b10 	vmov	r3, r4, d0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	a11c      	add	r1, pc, #112	; (adr r1, 8002d38 <_ZN9LineTrace18steeringAngleTraceEv+0xc8>)
 8002cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cca:	f7fd fdd7 	bl	800087c <__aeabi_ddiv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f7fd ff9f 	bl	8000c18 <__aeabi_d2f>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	617b      	str	r3, [r7, #20]
		target_omega = current_velocity / r;
 8002cde:	edd7 6a02 	vldr	s13, [r7, #8]
 8002ce2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cea:	edc7 7a04 	vstr	s15, [r7, #16]
 8002cee:	e002      	b.n	8002cf6 <_ZN9LineTrace18steeringAngleTraceEv+0x86>
	}
	else target_omega = 0;
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002d00:	edd7 0a04 	vldr	s1, [r7, #16]
 8002d04:	eeb0 0a67 	vmov.f32	s0, s15
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f002 ff11 	bl	8005b30 <_ZN12VelocityCtrl11setVelocityEff>
	target_omega_ = target_omega;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	monitor_target_omega = target_omega;
 8002d16:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <_ZN9LineTrace18steeringAngleTraceEv+0xc0>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6013      	str	r3, [r2, #0]
	monitor_r = r;
 8002d1c:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <_ZN9LineTrace18steeringAngleTraceEv+0xc4>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6013      	str	r3, [r2, #0]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	f3af 8000 	nop.w
 8002d30:	20000294 	.word	0x20000294
 8002d34:	20000298 	.word	0x20000298
 8002d38:	eb851eb8 	.word	0xeb851eb8
 8002d3c:	3faeb851 	.word	0x3faeb851

08002d40 <_ZN9LineTrace11loggerStartEv>:

void LineTrace::loggerStart()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fbef 	bl	8001530 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 f9be 	bl	80050d8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fee9 	bl	8004b38 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f001 ff4d 	bl	8004c22 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dc8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002df8:	4a40      	ldr	r2, [pc, #256]	; (8002efc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d044      	beq.n	8002e9c <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e16:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002f08 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e22:	d50f      	bpl.n	8002e44 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002e24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e28:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002f08 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	d506      	bpl.n	8002e44 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002e44:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d94d      	bls.n	8002eee <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e6a:	3338      	adds	r3, #56	; 0x38
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f001 faff 	bl	8004484 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002e86:	e032      	b.n	8002eee <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 fba1 	bl	80045d0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e94:	334c      	adds	r3, #76	; 0x4c
 8002e96:	2200      	movs	r2, #0
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	e028      	b.n	8002eee <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f14 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	dd0f      	ble.n	8002ece <_ZN9LineTrace11isCrossLineEv+0x136>
 8002eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002f14 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	dd06      	ble.n	8002ece <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	e002      	b.n	8002ed4 <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d908      	bls.n	8002eee <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200002a0 	.word	0x200002a0
 8002f00:	200002a4 	.word	0x200002a4
 8002f04:	200002bb 	.word	0x200002bb
 8002f08:	44160000 	.word	0x44160000
 8002f0c:	200002b8 	.word	0x200002b8
 8002f10:	200002ba 	.word	0x200002ba
 8002f14:	43fa0000 	.word	0x43fa0000

08002f18 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d143      	bne.n	8002fbc <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002f34:	edd7 7a00 	vldr	s15, [r7]
 8002f38:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003054 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	d504      	bpl.n	8002f50 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e076      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002f50:	edd7 7a00 	vldr	s15, [r7]
 8002f54:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003058 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	d502      	bpl.n	8002f68 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002f62:	4b3e      	ldr	r3, [pc, #248]	; (800305c <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e06a      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002f68:	edd7 7a00 	vldr	s15, [r7]
 8002f6c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003060 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d503      	bpl.n	8002f82 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e05d      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002f82:	edd7 7a00 	vldr	s15, [r7]
 8002f86:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003064 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	d502      	bpl.n	8002f9a <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e051      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002f9a:	edd7 7a00 	vldr	s15, [r7]
 8002f9e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800306c <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	d502      	bpl.n	8002fb2 <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e045      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e040      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fc2:	335c      	adds	r3, #92	; 0x5c
 8002fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d136      	bne.n	800303a <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002fcc:	edd7 7a00 	vldr	s15, [r7]
 8002fd0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003054 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fdc:	d504      	bpl.n	8002fe8 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e02a      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8002fe8:	edd7 7a00 	vldr	s15, [r7]
 8002fec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003064 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	d502      	bpl.n	8003000 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e01e      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800306c <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d502      	bpl.n	8003018 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e012      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003018:	edd7 7a00 	vldr	s15, [r7]
 800301c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003078 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	d502      	bpl.n	8003030 <_ZN9LineTrace15radius2VelocityEf+0x118>
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <_ZN9LineTrace15radius2VelocityEf+0x164>)
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e006      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e001      	b.n	800303e <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 800303c:	60fb      	str	r3, [r7, #12]

	return velocity;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	ee07 3a90 	vmov	s15, r3
}
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	43960000 	.word	0x43960000
 8003058:	44480000 	.word	0x44480000
 800305c:	3fd9999a 	.word	0x3fd9999a
 8003060:	447a0000 	.word	0x447a0000
 8003064:	44bb8000 	.word	0x44bb8000
 8003068:	40133333 	.word	0x40133333
 800306c:	44fa0000 	.word	0x44fa0000
 8003070:	40200000 	.word	0x40200000
 8003074:	40066666 	.word	0x40066666
 8003078:	451c4000 	.word	0x451c4000
 800307c:	40400000 	.word	0x40400000
 8003080:	3fa66666 	.word	0x3fa66666

08003084 <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b08b      	sub	sp, #44	; 0x2c
 8003088:	af02      	add	r7, sp, #8
 800308a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fca7 	bl	80049e4 <_ZN6Logger23getDistanceArrayPointerEv>
 8003096:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	4618      	mov	r0, r3
 800309e:	f001 fcae 	bl	80049fe <_ZN6Logger20getThetaArrayPointerEv>
 80030a2:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030a4:	2300      	movs	r3, #0
 80030a6:	837b      	strh	r3, [r7, #26]
 80030a8:	8b7b      	ldrh	r3, [r7, #26]
 80030aa:	f241 726f 	movw	r2, #5999	; 0x176f
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d84b      	bhi.n	800314a <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80030b2:	8b7b      	ldrh	r3, [r7, #26]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80030be:	8b7b      	ldrh	r3, [r7, #26]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80030ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	d101      	bne.n	80030dc <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80030da:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80030dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80030e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80030e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030e8:	eeb0 0a66 	vmov.f32	s0, s13
 80030ec:	f7ff fae8 	bl	80026c0 <_ZSt3absf>
 80030f0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003210 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80030fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	db01      	blt.n	800310a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8003106:	4b43      	ldr	r3, [pc, #268]	; (8003214 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8003108:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800310a:	8b7c      	ldrh	r4, [r7, #26]
 800310c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff01 	bl	8002f18 <_ZN9LineTrace15radius2VelocityEf>
 8003116:	eef0 7a40 	vmov.f32	s15, s0
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003120:	3306      	adds	r3, #6
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800312a:	8b7b      	ldrh	r3, [r7, #26]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	441a      	add	r2, r3
 8003132:	8b7b      	ldrh	r3, [r7, #26]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	3334      	adds	r3, #52	; 0x34
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3304      	adds	r3, #4
 8003140:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003142:	8b7b      	ldrh	r3, [r7, #26]
 8003144:	3301      	adds	r3, #1
 8003146:	837b      	strh	r3, [r7, #26]
 8003148:	e7ae      	b.n	80030a8 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003150:	335c      	adds	r3, #92	; 0x5c
 8003152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d120      	bne.n	800319c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003166:	3318      	adds	r3, #24
 8003168:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003170:	3340      	adds	r3, #64	; 0x40
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	6939      	ldr	r1, [r7, #16]
 8003178:	eeb0 0a67 	vmov.f32	s0, s15
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f93f 	bl	8003400 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003188:	333c      	adds	r3, #60	; 0x3c
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	6939      	ldr	r1, [r7, #16]
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f9d7 	bl	8003548 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800319a:	e027      	b.n	80031ec <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031a2:	335c      	adds	r3, #92	; 0x5c
 80031a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d11f      	bne.n	80031ec <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80031b8:	3318      	adds	r3, #24
 80031ba:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031c2:	3348      	adds	r3, #72	; 0x48
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	6939      	ldr	r1, [r7, #16]
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f916 	bl	8003400 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031da:	3344      	adds	r3, #68	; 0x44
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	6939      	ldr	r1, [r7, #16]
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9ae 	bl	8003548 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80031f2:	3318      	adds	r3, #24
 80031f4:	2200      	movs	r2, #0
 80031f6:	9200      	str	r2, [sp, #0]
 80031f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80031fc:	4906      	ldr	r1, [pc, #24]	; (8003218 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80031fe:	4807      	ldr	r0, [pc, #28]	; (800321c <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8003200:	f7fe f9d0 	bl	80015a4 <sd_write_array_float>

}
 8003204:	bf00      	nop
 8003206:	3724      	adds	r7, #36	; 0x24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	3727c5ac 	.word	0x3727c5ac
 8003210:	459c4000 	.word	0x459c4000
 8003214:	459c4000 	.word	0x459c4000
 8003218:	08019da0 	.word	0x08019da0
 800321c:	08019db0 	.word	0x08019db0

08003220 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69d8      	ldr	r0, [r3, #28]
 800322c:	4b6b      	ldr	r3, [pc, #428]	; (80033dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800322e:	4a6c      	ldr	r2, [pc, #432]	; (80033e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8003230:	496c      	ldr	r1, [pc, #432]	; (80033e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003232:	f001 fc63 	bl	8004afc <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	2264      	movs	r2, #100	; 0x64
 8003240:	4969      	ldr	r1, [pc, #420]	; (80033e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8003242:	4868      	ldr	r0, [pc, #416]	; (80033e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003244:	f7fe fa14 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800324e:	33f0      	adds	r3, #240	; 0xf0
 8003250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003254:	4965      	ldr	r1, [pc, #404]	; (80033ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8003256:	4863      	ldr	r0, [pc, #396]	; (80033e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003258:	f7fe fa0a 	bl	8001670 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4618      	mov	r0, r3
 8003262:	f001 fbbf 	bl	80049e4 <_ZN6Logger23getDistanceArrayPointerEv>
 8003266:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fbc6 	bl	80049fe <_ZN6Logger20getThetaArrayPointerEv>
 8003272:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003274:	2300      	movs	r3, #0
 8003276:	837b      	strh	r3, [r7, #26]
 8003278:	8b7b      	ldrh	r3, [r7, #26]
 800327a:	f241 726f 	movw	r2, #5999	; 0x176f
 800327e:	4293      	cmp	r3, r2
 8003280:	d84b      	bhi.n	800331a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8003282:	8b7b      	ldrh	r3, [r7, #26]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800328e:	8b7b      	ldrh	r3, [r7, #26]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800329a:	edd7 7a07 	vldr	s15, [r7, #28]
 800329e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d101      	bne.n	80032ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80032a8:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80032aa:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80032ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80032b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80032b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032b8:	eeb0 0a66 	vmov.f32	s0, s13
 80032bc:	f7ff fa00 	bl	80026c0 <_ZSt3absf>
 80032c0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80032c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80033f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80032cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	db01      	blt.n	80032da <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80032d6:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80032d8:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80032da:	8b7c      	ldrh	r4, [r7, #26]
 80032dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fe19 	bl	8002f18 <_ZN9LineTrace15radius2VelocityEf>
 80032e6:	eef0 7a40 	vmov.f32	s15, s0
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80032f0:	3306      	adds	r3, #6
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80032fa:	8b7b      	ldrh	r3, [r7, #26]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	441a      	add	r2, r3
 8003302:	8b7b      	ldrh	r3, [r7, #26]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	3334      	adds	r3, #52	; 0x34
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3304      	adds	r3, #4
 8003310:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003312:	8b7b      	ldrh	r3, [r7, #26]
 8003314:	3301      	adds	r3, #1
 8003316:	837b      	strh	r3, [r7, #26]
 8003318:	e7ae      	b.n	8003278 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003320:	335c      	adds	r3, #92	; 0x5c
 8003322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d120      	bne.n	800336c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003336:	3318      	adds	r3, #24
 8003338:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003340:	3340      	adds	r3, #64	; 0x40
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	6939      	ldr	r1, [r7, #16]
 8003348:	eeb0 0a67 	vmov.f32	s0, s15
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f857 	bl	8003400 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003358:	333c      	adds	r3, #60	; 0x3c
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	6939      	ldr	r1, [r7, #16]
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8ef 	bl	8003548 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800336a:	e027      	b.n	80033bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003372:	335c      	adds	r3, #92	; 0x5c
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d11f      	bne.n	80033bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003388:	3318      	adds	r3, #24
 800338a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003392:	3348      	adds	r3, #72	; 0x48
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	6939      	ldr	r1, [r7, #16]
 800339a:	eeb0 0a67 	vmov.f32	s0, s15
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f82e 	bl	8003400 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80033aa:	3344      	adds	r3, #68	; 0x44
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	6939      	ldr	r1, [r7, #16]
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8c6 	bl	8003548 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80033c2:	3318      	adds	r3, #24
 80033c4:	2200      	movs	r2, #0
 80033c6:	9200      	str	r2, [sp, #0]
 80033c8:	f241 7270 	movw	r2, #6000	; 0x1770
 80033cc:	490b      	ldr	r1, [pc, #44]	; (80033fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80033ce:	4805      	ldr	r0, [pc, #20]	; (80033e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80033d0:	f7fe f8e8 	bl	80015a4 <sd_write_array_float>

}
 80033d4:	bf00      	nop
 80033d6:	3724      	adds	r7, #36	; 0x24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}
 80033dc:	08019dbc 	.word	0x08019dbc
 80033e0:	08019dc8 	.word	0x08019dc8
 80033e4:	08019db0 	.word	0x08019db0
 80033e8:	08019dd8 	.word	0x08019dd8
 80033ec:	08019de8 	.word	0x08019de8
 80033f0:	3727c5ac 	.word	0x3727c5ac
 80033f4:	459c4000 	.word	0x459c4000
 80033f8:	459c4000 	.word	0x459c4000
 80033fc:	08019da0 	.word	0x08019da0

08003400 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	ed87 0a02 	vstr	s0, [r7, #8]
 800340c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800340e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003412:	83fb      	strh	r3, [r7, #30]
 8003414:	8bfb      	ldrh	r3, [r7, #30]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 808d 	beq.w	8003536 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800341c:	8bfb      	ldrh	r3, [r7, #30]
 800341e:	3b01      	subs	r3, #1
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003426:	3306      	adds	r3, #6
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	ed93 7a00 	vldr	s14, [r3]
 8003430:	8bfb      	ldrh	r3, [r7, #30]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003438:	3306      	adds	r3, #6
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003446:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800344a:	edd7 7a06 	vldr	s15, [r7, #24]
 800344e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	dd6a      	ble.n	800352e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f888 	bl	8000578 <__aeabi_f2d>
 8003468:	a335      	add	r3, pc, #212	; (adr r3, 8003540 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f7fd f8db 	bl	8000628 <__aeabi_dmul>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	4625      	mov	r5, r4
 8003478:	461c      	mov	r4, r3
 800347a:	69b8      	ldr	r0, [r7, #24]
 800347c:	f7fd f87c 	bl	8000578 <__aeabi_f2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	f7fd f9f8 	bl	800087c <__aeabi_ddiv>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4618      	mov	r0, r3
 8003492:	4621      	mov	r1, r4
 8003494:	f7fd fbc0 	bl	8000c18 <__aeabi_d2f>
 8003498:	4603      	mov	r3, r0
 800349a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800349c:	edd7 6a06 	vldr	s13, [r7, #24]
 80034a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80034a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80034b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	dd37      	ble.n	800352e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034be:	8bfb      	ldrh	r3, [r7, #30]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034c6:	3306      	adds	r3, #6
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f852 	bl	8000578 <__aeabi_f2d>
 80034d4:	4604      	mov	r4, r0
 80034d6:	460d      	mov	r5, r1
 80034d8:	8bfb      	ldrh	r3, [r7, #30]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	ee17 0a90 	vmov	r0, s15
 80034f0:	f7fd f842 	bl	8000578 <__aeabi_f2d>
 80034f4:	a312      	add	r3, pc, #72	; (adr r3, 8003540 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f7fd f895 	bl	8000628 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4620      	mov	r0, r4
 8003504:	4629      	mov	r1, r5
 8003506:	f7fc fed9 	bl	80002bc <__adddf3>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	4619      	mov	r1, r3
 8003510:	4622      	mov	r2, r4
 8003512:	8bfb      	ldrh	r3, [r7, #30]
 8003514:	1e5c      	subs	r4, r3, #1
 8003516:	4608      	mov	r0, r1
 8003518:	4611      	mov	r1, r2
 800351a:	f7fd fb7d 	bl	8000c18 <__aeabi_d2f>
 800351e:	4601      	mov	r1, r0
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003526:	3306      	adds	r3, #6
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800352e:	8bfb      	ldrh	r3, [r7, #30]
 8003530:	3b01      	subs	r3, #1
 8003532:	83fb      	strh	r3, [r7, #30]
 8003534:	e76e      	b.n	8003414 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003536:	bf00      	nop
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bdb0      	pop	{r4, r5, r7, pc}
 800353e:	bf00      	nop
 8003540:	d2f1a9fc 	.word	0xd2f1a9fc
 8003544:	3f50624d 	.word	0x3f50624d

08003548 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003548:	b5b0      	push	{r4, r5, r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	ed87 0a02 	vstr	s0, [r7, #8]
 8003554:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003556:	2300      	movs	r3, #0
 8003558:	83fb      	strh	r3, [r7, #30]
 800355a:	8bfb      	ldrh	r3, [r7, #30]
 800355c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003560:	4293      	cmp	r3, r2
 8003562:	f200 808d 	bhi.w	8003680 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003566:	8bfb      	ldrh	r3, [r7, #30]
 8003568:	3301      	adds	r3, #1
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003570:	3306      	adds	r3, #6
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	ed93 7a00 	vldr	s14, [r3]
 800357a:	8bfb      	ldrh	r3, [r7, #30]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003582:	3306      	adds	r3, #6
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003590:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003594:	edd7 7a06 	vldr	s15, [r7, #24]
 8003598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a0:	dd6a      	ble.n	8003678 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035a2:	8bfb      	ldrh	r3, [r7, #30]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ffe3 	bl	8000578 <__aeabi_f2d>
 80035b2:	a335      	add	r3, pc, #212	; (adr r3, 8003688 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f7fd f836 	bl	8000628 <__aeabi_dmul>
 80035bc:	4603      	mov	r3, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	4625      	mov	r5, r4
 80035c2:	461c      	mov	r4, r3
 80035c4:	69b8      	ldr	r0, [r7, #24]
 80035c6:	f7fc ffd7 	bl	8000578 <__aeabi_f2d>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4620      	mov	r0, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	f7fd f953 	bl	800087c <__aeabi_ddiv>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	4618      	mov	r0, r3
 80035dc:	4621      	mov	r1, r4
 80035de:	f7fd fb1b 	bl	8000c18 <__aeabi_d2f>
 80035e2:	4603      	mov	r3, r0
 80035e4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80035e6:	edd7 6a06 	vldr	s13, [r7, #24]
 80035ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80035ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f2:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80035f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80035fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80035fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	dd37      	ble.n	8003678 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003608:	8bfb      	ldrh	r3, [r7, #30]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003610:	3306      	adds	r3, #6
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ffad 	bl	8000578 <__aeabi_f2d>
 800361e:	4604      	mov	r4, r0
 8003620:	460d      	mov	r5, r1
 8003622:	8bfb      	ldrh	r3, [r7, #30]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	ed93 7a00 	vldr	s14, [r3]
 800362e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	ee17 0a90 	vmov	r0, s15
 800363a:	f7fc ff9d 	bl	8000578 <__aeabi_f2d>
 800363e:	a312      	add	r3, pc, #72	; (adr r3, 8003688 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	f7fc fff0 	bl	8000628 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4620      	mov	r0, r4
 800364e:	4629      	mov	r1, r5
 8003650:	f7fc fe34 	bl	80002bc <__adddf3>
 8003654:	4603      	mov	r3, r0
 8003656:	460c      	mov	r4, r1
 8003658:	4619      	mov	r1, r3
 800365a:	4622      	mov	r2, r4
 800365c:	8bfb      	ldrh	r3, [r7, #30]
 800365e:	1c5c      	adds	r4, r3, #1
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	f7fd fad8 	bl	8000c18 <__aeabi_d2f>
 8003668:	4601      	mov	r1, r0
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003670:	3306      	adds	r3, #6
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003678:	8bfb      	ldrh	r3, [r7, #30]
 800367a:	3301      	adds	r3, #1
 800367c:	83fb      	strh	r3, [r7, #30]
 800367e:	e76c      	b.n	800355a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003680:	bf00      	nop
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bdb0      	pop	{r4, r5, r7, pc}
 8003688:	d2f1a9fc 	.word	0xd2f1a9fc
 800368c:	3f50624d 	.word	0x3f50624d

08003690 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800369e:	3358      	adds	r3, #88	; 0x58
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8086 	beq.w	80037b4 <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd ff21 	bl	80014f4 <_ZN7Encoder16getTotalDistanceEv>
 80036b2:	eeb0 7a40 	vmov.f32	s14, s0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036bc:	3314      	adds	r3, #20
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	bfac      	ite	ge
 80036cc:	2301      	movge	r3, #1
 80036ce:	2300      	movlt	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d026      	beq.n	8003724 <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036dc:	3314      	adds	r3, #20
 80036de:	ed93 7a00 	vldr	s14, [r3]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e8:	335a      	adds	r3, #90	; 0x5a
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	3334      	adds	r3, #52	; 0x34
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003704:	3314      	adds	r3, #20
 8003706:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003710:	335a      	adds	r3, #90	; 0x5a
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800371e:	335a      	adds	r3, #90	; 0x5a
 8003720:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003722:	e7c1      	b.n	80036a8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800372a:	335a      	adds	r3, #90	; 0x5a
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003732:	4293      	cmp	r3, r2
 8003734:	d906      	bls.n	8003744 <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800373c:	335a      	adds	r3, #90	; 0x5a
 800373e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003742:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800374a:	3314      	adds	r3, #20
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003750:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fecc 	bl	80014f4 <_ZN7Encoder16getTotalDistanceEv>
 800375c:	eef0 7a40 	vmov.f32	s15, s0
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003762:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800376c:	335a      	adds	r3, #90	; 0x5a
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003772:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800377a:	335a      	adds	r3, #90	; 0x5a
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003784:	3306      	adds	r3, #6
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	eeb0 0a67 	vmov.f32	s0, s15
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa06 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800379e:	335a      	adds	r3, #90	; 0x5a
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037a8:	3306      	adds	r3, #6
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80037b2:	6013      	str	r3, [r2, #0]

	}
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200002a8 	.word	0x200002a8
 80037c0:	200002ac 	.word	0x200002ac
 80037c4:	200002b0 	.word	0x200002b0
 80037c8:	200002b4 	.word	0x200002b4

080037cc <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fe7a 	bl	80014d6 <_ZN7Encoder15getDistance10mmEv>
 80037e2:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fc63 	bl	80050b6 <_ZN8Odometry8getThetaEv>
 80037f0:	ec54 3b10 	vmov	r3, r4, d0
 80037f4:	4618      	mov	r0, r3
 80037f6:	4621      	mov	r1, r4
 80037f8:	f7fd fa0e 	bl	8000c18 <__aeabi_d2f>
 80037fc:	4603      	mov	r3, r0
 80037fe:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003800:	edd7 7a04 	vldr	s15, [r7, #16]
 8003804:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	d101      	bne.n	8003812 <_ZN9LineTrace8isStableEv+0x46>
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <_ZN9LineTrace8isStableEv+0xd0>)
 8003810:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003812:	ed97 7a02 	vldr	s14, [r7, #8]
 8003816:	edd7 7a04 	vldr	s15, [r7, #16]
 800381a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800381e:	eeb0 0a66 	vmov.f32	s0, s13
 8003822:	f7fe ff4d 	bl	80026c0 <_ZSt3absf>
 8003826:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800382a:	edd7 7a03 	vldr	s15, [r7, #12]
 800382e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038a0 <_ZN9LineTrace8isStableEv+0xd4>
 8003832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	db01      	blt.n	8003840 <_ZN9LineTrace8isStableEv+0x74>
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <_ZN9LineTrace8isStableEv+0xd8>)
 800383e:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003846:	3338      	adds	r3, #56	; 0x38
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003850:	2200      	movs	r2, #0
 8003852:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800385a:	3338      	adds	r3, #56	; 0x38
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003860:	edd7 7a03 	vldr	s15, [r7, #12]
 8003864:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80038ac <_ZN9LineTrace8isStableEv+0xe0>
 8003868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	db06      	blt.n	8003880 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <_ZN9LineTrace8isStableEv+0xdc>)
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	e002      	b.n	8003886 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003882:	2200      	movs	r2, #0
 8003884:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2b16      	cmp	r3, #22
 800388c:	d901      	bls.n	8003892 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
}
 8003894:	4618      	mov	r0, r3
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	3727c5ac 	.word	0x3727c5ac
 80038a0:	459c4000 	.word	0x459c4000
 80038a4:	459c4000 	.word	0x459c4000
 80038a8:	200002bc 	.word	0x200002bc
 80038ac:	44fa0000 	.word	0x44fa0000

080038b0 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b092      	sub	sp, #72	; 0x48
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80038b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038bc:	2201      	movs	r2, #1
 80038be:	4963      	ldr	r1, [pc, #396]	; (8003a4c <_ZN9LineTrace4initEv+0x19c>)
 80038c0:	4863      	ldr	r0, [pc, #396]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 80038c2:	f7fd fed5 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80038c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038ca:	2201      	movs	r2, #1
 80038cc:	4961      	ldr	r1, [pc, #388]	; (8003a54 <_ZN9LineTrace4initEv+0x1a4>)
 80038ce:	4860      	ldr	r0, [pc, #384]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 80038d0:	f7fd fece 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80038d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038d8:	2201      	movs	r2, #1
 80038da:	495f      	ldr	r1, [pc, #380]	; (8003a58 <_ZN9LineTrace4initEv+0x1a8>)
 80038dc:	485c      	ldr	r0, [pc, #368]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 80038de:	f7fd fec7 	bl	8001670 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80038e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80038ea:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80038ee:	eeb0 1a66 	vmov.f32	s2, s13
 80038f2:	eef0 0a47 	vmov.f32	s1, s14
 80038f6:	eeb0 0a67 	vmov.f32	s0, s15
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8c6 	bl	8003a8c <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 8003900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003904:	2201      	movs	r2, #1
 8003906:	4955      	ldr	r1, [pc, #340]	; (8003a5c <_ZN9LineTrace4initEv+0x1ac>)
 8003908:	4851      	ldr	r0, [pc, #324]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 800390a:	f7fd feb1 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 800390e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003912:	2201      	movs	r2, #1
 8003914:	4952      	ldr	r1, [pc, #328]	; (8003a60 <_ZN9LineTrace4initEv+0x1b0>)
 8003916:	484e      	ldr	r0, [pc, #312]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 8003918:	f7fd feaa 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 800391c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003920:	2201      	movs	r2, #1
 8003922:	4950      	ldr	r1, [pc, #320]	; (8003a64 <_ZN9LineTrace4initEv+0x1b4>)
 8003924:	484a      	ldr	r0, [pc, #296]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 8003926:	f7fd fea3 	bl	8001670 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 800392a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800392e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003932:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003936:	eeb0 1a66 	vmov.f32	s2, s13
 800393a:	eef0 0a47 	vmov.f32	s1, s14
 800393e:	eeb0 0a67 	vmov.f32	s0, s15
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8bb 	bl	8003abe <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394c:	2201      	movs	r2, #1
 800394e:	4946      	ldr	r1, [pc, #280]	; (8003a68 <_ZN9LineTrace4initEv+0x1b8>)
 8003950:	483f      	ldr	r0, [pc, #252]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 8003952:	f7fd fe8d 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800395a:	2201      	movs	r2, #1
 800395c:	4943      	ldr	r1, [pc, #268]	; (8003a6c <_ZN9LineTrace4initEv+0x1bc>)
 800395e:	483c      	ldr	r0, [pc, #240]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 8003960:	f7fd fe86 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003968:	2201      	movs	r2, #1
 800396a:	4941      	ldr	r1, [pc, #260]	; (8003a70 <_ZN9LineTrace4initEv+0x1c0>)
 800396c:	4838      	ldr	r0, [pc, #224]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 800396e:	f7fd fe7f 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003972:	f107 0320 	add.w	r3, r7, #32
 8003976:	2201      	movs	r2, #1
 8003978:	493e      	ldr	r1, [pc, #248]	; (8003a74 <_ZN9LineTrace4initEv+0x1c4>)
 800397a:	4835      	ldr	r0, [pc, #212]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 800397c:	f7fd fe78 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	2201      	movs	r2, #1
 8003986:	493c      	ldr	r1, [pc, #240]	; (8003a78 <_ZN9LineTrace4initEv+0x1c8>)
 8003988:	4831      	ldr	r0, [pc, #196]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 800398a:	f7fd fe71 	bl	8001670 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800398e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f904 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 800399c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039a0:	eeb0 0a67 	vmov.f32	s0, s15
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f90d 	bl	8003bc4 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80039aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f916 	bl	8003be4 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80039b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80039bc:	eeb0 0a67 	vmov.f32	s0, s15
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f91f 	bl	8003c04 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80039c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80039ca:	eeb0 0a67 	vmov.f32	s0, s15
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f928 	bl	8003c24 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 80039d4:	f107 0318 	add.w	r3, r7, #24
 80039d8:	2201      	movs	r2, #1
 80039da:	4928      	ldr	r1, [pc, #160]	; (8003a7c <_ZN9LineTrace4initEv+0x1cc>)
 80039dc:	481c      	ldr	r0, [pc, #112]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 80039de:	f7fd fe47 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	2201      	movs	r2, #1
 80039e8:	4925      	ldr	r1, [pc, #148]	; (8003a80 <_ZN9LineTrace4initEv+0x1d0>)
 80039ea:	4819      	ldr	r0, [pc, #100]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 80039ec:	f7fd fe40 	bl	8001670 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80039f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80039f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80039f8:	eef0 0a47 	vmov.f32	s1, s14
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f96f 	bl	8003ce4 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	2201      	movs	r2, #1
 8003a18:	491a      	ldr	r1, [pc, #104]	; (8003a84 <_ZN9LineTrace4initEv+0x1d4>)
 8003a1a:	480d      	ldr	r0, [pc, #52]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 8003a1c:	f7fd fe28 	bl	8001670 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	2201      	movs	r2, #1
 8003a26:	4918      	ldr	r1, [pc, #96]	; (8003a88 <_ZN9LineTrace4initEv+0x1d8>)
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <_ZN9LineTrace4initEv+0x1a0>)
 8003a2a:	f7fd fe21 	bl	8001670 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003a2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a32:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a36:	eef0 0a47 	vmov.f32	s1, s14
 8003a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f96a 	bl	8003d18 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003a44:	bf00      	nop
 8003a46:	3748      	adds	r7, #72	; 0x48
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	08019df4 	.word	0x08019df4
 8003a50:	08019dfc 	.word	0x08019dfc
 8003a54:	08019e04 	.word	0x08019e04
 8003a58:	08019e0c 	.word	0x08019e0c
 8003a5c:	08019e14 	.word	0x08019e14
 8003a60:	08019e20 	.word	0x08019e20
 8003a64:	08019e2c 	.word	0x08019e2c
 8003a68:	08019e38 	.word	0x08019e38
 8003a6c:	08019e44 	.word	0x08019e44
 8003a70:	08019e50 	.word	0x08019e50
 8003a74:	08019e5c 	.word	0x08019e5c
 8003a78:	08019e68 	.word	0x08019e68
 8003a7c:	08019e74 	.word	0x08019e74
 8003a80:	08019e7c 	.word	0x08019e7c
 8003a84:	08019e84 	.word	0x08019e84
 8003a88:	08019e90 	.word	0x08019e90

08003a8c <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a98:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a9c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	ed87 0a02 	vstr	s0, [r7, #8]
 8003aca:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ace:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	return kp_;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	ee07 3a90 	vmov	s15, r3
}
 8003b00:	eeb0 0a67 	vmov.f32	s0, s15
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	ee07 3a90 	vmov	s15, r3
}
 8003b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	return kd_;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	ee07 3a90 	vmov	s15, r3
}
 8003b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	ee07 3a90 	vmov	s15, r3
}
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	ee07 3a90 	vmov	s15, r3
}
 8003b78:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	ee07 3a90 	vmov	s15, r3
}
 8003b96:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c52:	ee07 3a90 	vmov	s15, r3
}
 8003c56:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c72:	ee07 3a90 	vmov	s15, r3
}
 8003c76:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c92:	ee07 3a90 	vmov	s15, r3
}
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003cb2:	ee07 3a90 	vmov	s15, r3
}
 8003cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003cd2:	ee07 3a90 	vmov	s15, r3
}
 8003cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cf0:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cfa:	333c      	adds	r3, #60	; 0x3c
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d06:	3340      	adds	r3, #64	; 0x40
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d24:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d2e:	3344      	adds	r3, #68	; 0x44
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d3a:	3348      	adds	r3, #72	; 0x48
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d5a:	333c      	adds	r3, #60	; 0x3c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	ee07 3a90 	vmov	s15, r3
}
 8003d62:	eeb0 0a67 	vmov.f32	s0, s15
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d7e:	3348      	adds	r3, #72	; 0x48
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	ee07 3a90 	vmov	s15, r3
}
 8003d86:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003da2:	3344      	adds	r3, #68	; 0x44
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	ee07 3a90 	vmov	s15, r3
}
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dc6:	3340      	adds	r3, #64	; 0x40
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	ee07 3a90 	vmov	s15, r3
}
 8003dce:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 815d 	beq.w	80040aa <_ZN9LineTrace4flipEv+0x2ce>
		// ---- line following processing -----//
		//pidTrace();
		//pidAngularVelocityTrace();
		steeringAngleTrace();
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fe ff3d 	bl	8002c70 <_ZN9LineTrace18steeringAngleTraceEv>


		if(isTargetDistance(10) == true){
 8003df6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fb20 	bl	8004440 <_ZN9LineTrace16isTargetDistanceEf>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d042      	beq.n	8003e8c <_ZN9LineTrace4flipEv+0xb0>
			// ---- Store Logs ------//
			storeLogs();
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa6e 	bl	80042e8 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69dc      	ldr	r4, [r3, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd fe7f 	bl	8001b18 <_ZN3IMU8getOmegaEv>
 8003e1a:	eef0 7a40 	vmov.f32	s15, s0
 8003e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e22:	4620      	mov	r0, r4
 8003e24:	f000 fcd2 	bl	80047cc <_ZN6Logger8storeLogEf>
			logger_->storeLog2(getTargetOmega());
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69dc      	ldr	r4, [r3, #28]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fab5 	bl	800439c <_ZN9LineTrace14getTargetOmegaEv>
 8003e32:	eef0 7a40 	vmov.f32	s15, s0
 8003e36:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 fd03 	bl	8004846 <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fcc3 	bl	80037cc <_ZN9LineTrace8isStableEv>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00c      	beq.n	8003e66 <_ZN9LineTrace4flipEv+0x8a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 fbcf 	bl	80055f4 <_ZN10SideSensor9getStatusEv>
 8003e56:	4603      	mov	r3, r0
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d101      	bne.n	8003e66 <_ZN9LineTrace4flipEv+0x8a>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <_ZN9LineTrace4flipEv+0x8c>
 8003e66:	2300      	movs	r3, #0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <_ZN9LineTrace4flipEv+0x9c>
#endif
				stable_flag_ = true;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e72:	3337      	adds	r3, #55	; 0x37
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fb57 	bl	8001530 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 f926 	bl	80050d8 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fbff 	bl	8003690 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe ff80 	bl	8002d98 <_ZN9LineTrace11isCrossLineEv>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <_ZN9LineTrace4flipEv+0xd6>
			side_sensor_->enableIgnore();
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fbce 	bl	8005644 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fd fb6a 	bl	8001586 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fbde 	bl	8005678 <_ZN10SideSensor13getIgnoreFlagEv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00f      	beq.n	8003ee2 <_ZN9LineTrace4flipEv+0x106>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fb4e 	bl	8001568 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8003ed0:	eddf 7a78 	vldr	s15, [pc, #480]	; 80040b4 <_ZN9LineTrace4flipEv+0x2d8>
 8003ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	db01      	blt.n	8003ee2 <_ZN9LineTrace4flipEv+0x106>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <_ZN9LineTrace4flipEv+0x108>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <_ZN9LineTrace4flipEv+0x116>
			side_sensor_->disableIgnore();
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fbb6 	bl	800565e <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ef8:	3337      	adds	r3, #55	; 0x37
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <_ZN9LineTrace4flipEv+0x13c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fb75 	bl	80055f4 <_ZN10SideSensor9getStatusEv>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d101      	bne.n	8003f18 <_ZN9LineTrace4flipEv+0x13c>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <_ZN9LineTrace4flipEv+0x13e>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <_ZN9LineTrace4flipEv+0x184>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f24:	335c      	adds	r3, #92	; 0x5c
 8003f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <_ZN9LineTrace4flipEv+0x15a>
				storeSideLineDistance();
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fade 	bl	80044f0 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f34:	e008      	b.n	8003f48 <_ZN9LineTrace4flipEv+0x16c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb80 	bl	800463c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	2200      	movs	r2, #0
 8003f46:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f4e:	3337      	adds	r3, #55	; 0x37
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f5a:	3338      	adds	r3, #56	; 0x38
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f66:	3337      	adds	r3, #55	; 0x37
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <_ZN9LineTrace4flipEv+0x1a4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	330c      	adds	r3, #12
 8003f72:	2201      	movs	r2, #1
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe f84b 	bl	8002014 <_ZN3LED2LREaa>
 8003f7e:	e007      	b.n	8003f90 <_ZN9LineTrace4flipEv+0x1b4>
		else led_.LR(-1, 0);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	330c      	adds	r3, #12
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe f842 	bl	8002014 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f96:	334e      	adds	r3, #78	; 0x4e
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f083 0301 	eor.w	r3, r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <_ZN9LineTrace4flipEv+0x1e0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fb23 	bl	80055f4 <_ZN10SideSensor9getStatusEv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d101      	bne.n	8003fbc <_ZN9LineTrace4flipEv+0x1e0>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <_ZN9LineTrace4flipEv+0x1e2>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d011      	beq.n	8003fe6 <_ZN9LineTrace4flipEv+0x20a>
#endif
			all_sideline_flag_ = true;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fc8:	334e      	adds	r3, #78	; 0x4e
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fd4:	335c      	adds	r3, #92	; 0x5c
 8003fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d120      	bne.n	8004020 <_ZN9LineTrace4flipEv+0x244>
				storeAllSideLineDistance();
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fabe 	bl	8004560 <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003fe4:	e01c      	b.n	8004020 <_ZN9LineTrace4flipEv+0x244>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fec:	334e      	adds	r3, #78	; 0x4e
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00c      	beq.n	800400e <_ZN9LineTrace4flipEv+0x232>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 fafb 	bl	80055f4 <_ZN10SideSensor9getStatusEv>
 8003ffe:	4603      	mov	r3, r0
 8004000:	43db      	mvns	r3, r3
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d101      	bne.n	800400e <_ZN9LineTrace4flipEv+0x232>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <_ZN9LineTrace4flipEv+0x234>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <_ZN9LineTrace4flipEv+0x244>
#endif
			all_sideline_flag_ = false;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800401a:	334e      	adds	r3, #78	; 0x4e
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe faf5 	bl	8002614 <_ZN10LineSensor13emergencyStopEv>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <_ZN9LineTrace4flipEv+0x266>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	eddf 0a20 	vldr	s1, [pc, #128]	; 80040b8 <_ZN9LineTrace4flipEv+0x2dc>
 8004038:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80040b8 <_ZN9LineTrace4flipEv+0x2dc>
 800403c:	4618      	mov	r0, r3
 800403e:	f001 fd8b 	bl	8005b58 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004048:	334c      	adds	r3, #76	; 0x4c
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	3301      	adds	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004056:	334c      	adds	r3, #76	; 0x4c
 8004058:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004060:	334c      	adds	r3, #76	; 0x4c
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f242 720f 	movw	r2, #9999	; 0x270f
 8004068:	4293      	cmp	r3, r2
 800406a:	d906      	bls.n	800407a <_ZN9LineTrace4flipEv+0x29e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004072:	334c      	adds	r3, #76	; 0x4c
 8004074:	f242 7210 	movw	r2, #10000	; 0x2710
 8004078:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004080:	334c      	adds	r3, #76	; 0x4c
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	2b50      	cmp	r3, #80	; 0x50
 8004086:	d808      	bhi.n	800409a <_ZN9LineTrace4flipEv+0x2be>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	330c      	adds	r3, #12
 800408c:	2201      	movs	r2, #1
 800408e:	f04f 31ff 	mov.w	r1, #4294967295
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd ffbe 	bl	8002014 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8004098:	e007      	b.n	80040aa <_ZN9LineTrace4flipEv+0x2ce>
		else led_.LR(-1, 0);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	330c      	adds	r3, #12
 800409e:	2200      	movs	r2, #0
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd ffb5 	bl	8002014 <_ZN3LED2LREaa>
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd90      	pop	{r4, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	43480000 	.word	0x43480000
 80040b8:	00000000 	.word	0x00000000

080040bc <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fd96 	bl	8005c0a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fa9e 	bl	8005624 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040ee:	3330      	adds	r3, #48	; 0x30
 80040f0:	2200      	movs	r2, #0
 80040f2:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040fa:	3332      	adds	r3, #50	; 0x32
 80040fc:	2200      	movs	r2, #0
 80040fe:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004106:	3334      	adds	r3, #52	; 0x34
 8004108:	2200      	movs	r2, #0
 800410a:	801a      	strh	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af02      	add	r7, sp, #8
 800411a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fd81 	bl	8005c30 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	330c      	adds	r3, #12
 8004132:	2201      	movs	r2, #1
 8004134:	f04f 31ff 	mov.w	r1, #4294967295
 8004138:	4618      	mov	r0, r3
 800413a:	f7fd ff6b 	bl	8002014 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004144:	335c      	adds	r3, #92	; 0x5c
 8004146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69d8      	ldr	r0, [r3, #28]
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <_ZN9LineTrace4stopEv+0xcc>)
 8004154:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <_ZN9LineTrace4stopEv+0xd0>)
 8004156:	4924      	ldr	r1, [pc, #144]	; (80041e8 <_ZN9LineTrace4stopEv+0xd4>)
 8004158:	f000 fc89 	bl	8004a6e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 800415c:	e006      	b.n	800416c <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69d8      	ldr	r0, [r3, #28]
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <_ZN9LineTrace4stopEv+0xd8>)
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <_ZN9LineTrace4stopEv+0xdc>)
 8004166:	4920      	ldr	r1, [pc, #128]	; (80041e8 <_ZN9LineTrace4stopEv+0xd4>)
 8004168:	f000 fca4 	bl	8004ab4 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004172:	3360      	adds	r3, #96	; 0x60
 8004174:	2200      	movs	r2, #0
 8004176:	9200      	str	r2, [sp, #0]
 8004178:	2264      	movs	r2, #100	; 0x64
 800417a:	491e      	ldr	r1, [pc, #120]	; (80041f4 <_ZN9LineTrace4stopEv+0xe0>)
 800417c:	481a      	ldr	r0, [pc, #104]	; (80041e8 <_ZN9LineTrace4stopEv+0xd4>)
 800417e:	f7fd fa11 	bl	80015a4 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004188:	33f0      	adds	r3, #240	; 0xf0
 800418a:	2200      	movs	r2, #0
 800418c:	9200      	str	r2, [sp, #0]
 800418e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004192:	4919      	ldr	r1, [pc, #100]	; (80041f8 <_ZN9LineTrace4stopEv+0xe4>)
 8004194:	4814      	ldr	r0, [pc, #80]	; (80041e8 <_ZN9LineTrace4stopEv+0xd4>)
 8004196:	f7fd fa05 	bl	80015a4 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041a0:	3390      	adds	r3, #144	; 0x90
 80041a2:	2200      	movs	r2, #0
 80041a4:	9200      	str	r2, [sp, #0]
 80041a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041aa:	4914      	ldr	r1, [pc, #80]	; (80041fc <_ZN9LineTrace4stopEv+0xe8>)
 80041ac:	480e      	ldr	r0, [pc, #56]	; (80041e8 <_ZN9LineTrace4stopEv+0xd4>)
 80041ae:	f7fd f9f9 	bl	80015a4 <sd_write_array_float>

	led_.LR(-1, 0);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	330c      	adds	r3, #12
 80041b6:	2200      	movs	r2, #0
 80041b8:	f04f 31ff 	mov.w	r1, #4294967295
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd ff29 	bl	8002014 <_ZN3LED2LREaa>

	logger_->resetIdx();
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fd02 	bl	8004bd0 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fcb1 	bl	8004b38 <_ZN6Logger10resetLogs2Ev>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	08019dbc 	.word	0x08019dbc
 80041e4:	08019dc8 	.word	0x08019dc8
 80041e8:	08019db0 	.word	0x08019db0
 80041ec:	08019e9c 	.word	0x08019e9c
 80041f0:	08019ea8 	.word	0x08019ea8
 80041f4:	08019dd8 	.word	0x08019dd8
 80041f8:	08019de8 	.word	0x08019de8
 80041fc:	08019eb8 	.word	0x08019eb8

08004200 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 800420c:	2300      	movs	r3, #0
 800420e:	737b      	strb	r3, [r7, #13]
	start();
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff53 	bl	80040bc <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d15b      	bne.n	80042d4 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <_ZN9LineTrace7runningEv+0x28>
 8004222:	2b0a      	cmp	r3, #10
 8004224:	d030      	beq.n	8004288 <_ZN9LineTrace7runningEv+0x88>
 8004226:	e054      	b.n	80042d2 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	4618      	mov	r0, r3
 800422e:	f001 f9ed 	bl	800560c <_ZN10SideSensor16getWhiteLineCntREv>
 8004232:	4603      	mov	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d044      	beq.n	80042cc <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fe fd7c 	bl	8002d40 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800424e:	335c      	adds	r3, #92	; 0x5c
 8004250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8af 	bl	80043bc <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd f98f 	bl	8001586 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fd f96d 	bl	800154c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	330c      	adds	r3, #12
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd fec9 	bl	8002014 <_ZN3LED2LREaa>
				stage = 10;
 8004282:	230a      	movs	r3, #10
 8004284:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004286:	e021      	b.n	80042cc <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f9bd 	bl	800560c <_ZN10SideSensor16getWhiteLineCntREv>
 8004292:	4603      	mov	r3, r0
 8004294:	2b02      	cmp	r3, #2
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe fd67 	bl	8002d76 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f89a 	bl	80043e2 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80042ae:	2064      	movs	r0, #100	; 0x64
 80042b0:	f005 fbba 	bl	8009a28 <HAL_Delay>

				setTargetVelocity(0);
 80042b4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80042e4 <_ZN9LineTrace7runningEv+0xe4>
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fc73 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80042be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042c2:	f005 fbb1 	bl	8009a28 <HAL_Delay>

				goal_flag = true;
 80042c6:	2301      	movs	r3, #1
 80042c8:	737b      	strb	r3, [r7, #13]

			}

			break;
 80042ca:	e001      	b.n	80042d0 <_ZN9LineTrace7runningEv+0xd0>
			break;
 80042cc:	bf00      	nop
 80042ce:	e7a2      	b.n	8004216 <_ZN9LineTrace7runningEv+0x16>
			break;
 80042d0:	bf00      	nop
	while(goal_flag == false){
 80042d2:	e7a0      	b.n	8004216 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff1d 	bl	8004114 <_ZN9LineTrace4stopEv>
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	00000000 	.word	0x00000000

080042e8 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	ed2d 8b02 	vpush	{d8}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d046      	beq.n	800438c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004304:	335c      	adds	r3, #92	; 0x5c
 8004306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11c      	bne.n	8004348 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69dc      	ldr	r4, [r3, #28]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd f8dd 	bl	80014d6 <_ZN7Encoder15getDistance10mmEv>
 800431c:	eeb0 8a40 	vmov.f32	s16, s0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fec6 	bl	80050b6 <_ZN8Odometry8getThetaEv>
 800432a:	ec53 2b10 	vmov	r2, r3, d0
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	f7fc fc71 	bl	8000c18 <__aeabi_d2f>
 8004336:	4603      	mov	r3, r0
 8004338:	ee00 3a90 	vmov	s1, r3
 800433c:	eeb0 0a48 	vmov.f32	s0, s16
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fabf 	bl	80048c4 <_ZN6Logger21storeDistanceAndThetaEff>
 8004346:	e01b      	b.n	8004380 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69dc      	ldr	r4, [r3, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4618      	mov	r0, r3
 8004352:	f001 fc89 	bl	8005c68 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8004356:	eeb0 8a40 	vmov.f32	s16, s0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fea9 	bl	80050b6 <_ZN8Odometry8getThetaEv>
 8004364:	ec53 2b10 	vmov	r2, r3, d0
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc fc54 	bl	8000c18 <__aeabi_d2f>
 8004370:	4603      	mov	r3, r0
 8004372:	ee00 3a90 	vmov	s1, r3
 8004376:	eeb0 0a48 	vmov.f32	s0, s16
 800437a:	4620      	mov	r0, r4
 800437c:	f000 faea 	bl	8004954 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800438a:	801a      	strh	r2, [r3, #0]
	}
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	ecbd 8b02 	vpop	{d8}
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	2000029c 	.word	0x2000029c

0800439c <_ZN9LineTrace14getTargetOmegaEv>:

float LineTrace::getTargetOmega()
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	return target_omega_;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043aa:	ee07 3a90 	vmov	s15, r3
}
 80043ae:	eeb0 0a67 	vmov.f32	s0, s15
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fd f8bf 	bl	800154c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043d4:	3358      	adds	r3, #88	; 0x58
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043f0:	3358      	adds	r3, #88	; 0x58
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043fc:	335a      	adds	r3, #90	; 0x5a
 80043fe:	2200      	movs	r2, #0
 8004400:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004408:	3314      	adds	r3, #20
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800442e:	335c      	adds	r3, #92	; 0x5c
 8004430:	887a      	ldrh	r2, [r7, #2]
 8004432:	801a      	strh	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd f83e 	bl	80014d6 <_ZN7Encoder15getDistance10mmEv>
 800445a:	eeb0 7a40 	vmov.f32	s14, s0
 800445e:	edd7 7a00 	vldr	s15, [r7]
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	bf94      	ite	ls
 800446c:	2301      	movls	r3, #1
 800446e:	2300      	movhi	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004496:	3330      	adds	r3, #48	; 0x30
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	461c      	mov	r4, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7fd f829 	bl	80014f4 <_ZN7Encoder16getTotalDistanceEv>
 80044a2:	eef0 7a40 	vmov.f32	s15, s0
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80044ac:	3318      	adds	r3, #24
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044bc:	3330      	adds	r3, #48	; 0x30
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044ca:	3330      	adds	r3, #48	; 0x30
 80044cc:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044d4:	3330      	adds	r3, #48	; 0x30
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	2b63      	cmp	r3, #99	; 0x63
 80044da:	d905      	bls.n	80044e8 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044e2:	3330      	adds	r3, #48	; 0x30
 80044e4:	2263      	movs	r2, #99	; 0x63
 80044e6:	801a      	strh	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004502:	3332      	adds	r3, #50	; 0x32
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	461c      	mov	r4, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fc fff3 	bl	80014f4 <_ZN7Encoder16getTotalDistanceEv>
 800450e:	eef0 7a40 	vmov.f32	s15, s0
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004518:	333c      	adds	r3, #60	; 0x3c
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004528:	3332      	adds	r3, #50	; 0x32
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004548:	d306      	bcc.n	8004558 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004556:	801a      	strh	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}

08004560 <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695a      	ldr	r2, [r3, #20]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004572:	3334      	adds	r3, #52	; 0x34
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	461c      	mov	r4, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f7fc ffbb 	bl	80014f4 <_ZN7Encoder16getTotalDistanceEv>
 800457e:	eef0 7a40 	vmov.f32	s15, s0
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 8004588:	3324      	adds	r3, #36	; 0x24
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004598:	3334      	adds	r3, #52	; 0x34
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045a6:	3334      	adds	r3, #52	; 0x34
 80045a8:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045b0:	3334      	adds	r3, #52	; 0x34
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b8:	d306      	bcc.n	80045c8 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045c0:	3334      	adds	r3, #52	; 0x34
 80045c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045c6:	801a      	strh	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}

080045d0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6959      	ldr	r1, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045e2:	3330      	adds	r3, #48	; 0x30
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80045ec:	3318      	adds	r3, #24
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	eeb0 0a67 	vmov.f32	s0, s15
 80045fa:	4608      	mov	r0, r1
 80045fc:	f7fc ff89 	bl	8001512 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004606:	3330      	adds	r3, #48	; 0x30
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004614:	3330      	adds	r3, #48	; 0x30
 8004616:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800461e:	3330      	adds	r3, #48	; 0x30
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	2b63      	cmp	r3, #99	; 0x63
 8004624:	d905      	bls.n	8004632 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800462c:	3330      	adds	r3, #48	; 0x30
 800462e:	2263      	movs	r2, #99	; 0x63
 8004630:	801a      	strh	r2, [r3, #0]

}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004644:	2300      	movs	r3, #0
 8004646:	82fb      	strh	r3, [r7, #22]
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464e:	d237      	bcs.n	80046c0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004658:	333c      	adds	r3, #60	; 0x3c
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc ff44 	bl	80014f4 <_ZN7Encoder16getTotalDistanceEv>
 800466c:	eeb0 7a40 	vmov.f32	s14, s0
 8004670:	edd7 7a04 	vldr	s15, [r7, #16]
 8004674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004678:	eeb0 0a67 	vmov.f32	s0, s15
 800467c:	f7fe f820 	bl	80026c0 <_ZSt3absf>
 8004680:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8004684:	edd7 7a03 	vldr	s15, [r7, #12]
 8004688:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80046e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 800468c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004694:	d810      	bhi.n	80046b8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6959      	ldr	r1, [r3, #20]
 800469a:	8afb      	ldrh	r3, [r7, #22]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80046a2:	333c      	adds	r3, #60	; 0x3c
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	eeb0 0a67 	vmov.f32	s0, s15
 80046b0:	4608      	mov	r0, r1
 80046b2:	f7fc ff2e 	bl	8001512 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80046b6:	e003      	b.n	80046c0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80046b8:	8afb      	ldrh	r3, [r7, #22]
 80046ba:	3301      	adds	r3, #1
 80046bc:	82fb      	strh	r3, [r7, #22]
 80046be:	e7c3      	b.n	8004648 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80046c6:	3332      	adds	r3, #50	; 0x32
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ce:	d306      	bcc.n	80046de <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80046d6:	3332      	adds	r3, #50	; 0x32
 80046d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046dc:	801a      	strh	r2, [r3, #0]

}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	42a00000 	.word	0x42a00000

080046ec <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004708:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800470c:	2200      	movs	r2, #0
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004716:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800471a:	2200      	movs	r2, #0
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004724:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004728:	2200      	movs	r2, #0
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004748:	f7fd f81e 	bl	8001788 <sd_mount>
 800474c:	4603      	mov	r3, r0
 800474e:	2b01      	cmp	r3, #1
 8004750:	bf0c      	ite	eq
 8004752:	2301      	moveq	r3, #1
 8004754:	2300      	movne	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d016      	beq.n	800478a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800475c:	f7fc fca0 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004760:	2100      	movs	r1, #0
 8004762:	2000      	movs	r0, #0
 8004764:	f7fc fcac 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004768:	4815      	ldr	r0, [pc, #84]	; (80047c0 <_ZN6Logger10sdCardInitEv+0x84>)
 800476a:	f7fc fcd3 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800476e:	2101      	movs	r1, #1
 8004770:	2000      	movs	r0, #0
 8004772:	f7fc fca5 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004776:	4813      	ldr	r0, [pc, #76]	; (80047c4 <_ZN6Logger10sdCardInitEv+0x88>)
 8004778:	f7fc fccc 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800477c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004780:	f005 f952 	bl	8009a28 <HAL_Delay>

	  ret = true;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e015      	b.n	80047b6 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800478a:	f7fc fc89 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800478e:	2100      	movs	r1, #0
 8004790:	2000      	movs	r0, #0
 8004792:	f7fc fc95 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004796:	480a      	ldr	r0, [pc, #40]	; (80047c0 <_ZN6Logger10sdCardInitEv+0x84>)
 8004798:	f7fc fcbc 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800479c:	2101      	movs	r1, #1
 800479e:	2000      	movs	r0, #0
 80047a0:	f7fc fc8e 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047a4:	4808      	ldr	r0, [pc, #32]	; (80047c8 <_ZN6Logger10sdCardInitEv+0x8c>)
 80047a6:	f7fc fcb5 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ae:	f005 f93b 	bl	8009a28 <HAL_Delay>

	  ret = false;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	08019ec8 	.word	0x08019ec8
 80047c4:	08019ed4 	.word	0x08019ed4
 80047c8:	08019edc 	.word	0x08019edc

080047cc <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d028      	beq.n	800483a <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047ee:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004804:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004814:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004818:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004820:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800482a:	d306      	bcc.n	800483a <_ZN6Logger8storeLogEf+0x6e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004832:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004836:	2200      	movs	r2, #0
 8004838:	801a      	strh	r2, [r3, #0]
	}
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004858:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02a      	beq.n	80048b8 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004868:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004882:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004892:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004896:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800489e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048a8:	d306      	bcc.n	80048b8 <_ZN6Logger9storeLog2Ef+0x72>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048b0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048b4:	2200      	movs	r2, #0
 80048b6:	801a      	strh	r2, [r3, #0]
	}
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80048d0:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048da:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048f4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004900:	3310      	adds	r3, #16
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004910:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004920:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004924:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800492c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	f241 726f 	movw	r2, #5999	; 0x176f
 8004936:	4293      	cmp	r3, r2
 8004938:	d906      	bls.n	8004948 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004940:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004944:	2200      	movs	r2, #0
 8004946:	801a      	strh	r2, [r3, #0]
	//}
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004960:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800496a:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004984:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 8004990:	3370      	adds	r3, #112	; 0x70
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049a0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049b0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049b4:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049bc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	f241 726f 	movw	r2, #5999	; 0x176f
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d906      	bls.n	80049d8 <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049d0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049d4:	2200      	movs	r2, #0
 80049d6:	801a      	strh	r2, [r3, #0]
	//}
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a0c:	3340      	adds	r3, #64	; 0x40
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af02      	add	r7, sp, #8
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68b8      	ldr	r0, [r7, #8]
 8004a36:	f7fc fdb5 	bl	80015a4 <sd_write_array_float>
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af02      	add	r7, sp, #8
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	68b8      	ldr	r0, [r7, #8]
 8004a62:	f7fc fd9f 	bl	80015a4 <sd_write_array_float>
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004a82:	2300      	movs	r3, #0
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	68b8      	ldr	r0, [r7, #8]
 8004a90:	f7fc fd88 	bl	80015a4 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a9a:	3340      	adds	r3, #64	; 0x40
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	9200      	str	r2, [sp, #0]
 8004aa0:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f7fc fd7c 	bl	80015a4 <sd_write_array_float>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68b8      	ldr	r0, [r7, #8]
 8004ad6:	f7fc fd65 	bl	80015a4 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004ae0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	9200      	str	r2, [sp, #0]
 8004ae8:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f7fc fd58 	bl	80015a4 <sd_write_array_float>
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004b10:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	68b8      	ldr	r0, [r7, #8]
 8004b18:	f7fc fdaa 	bl	8001670 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004b22:	3340      	adds	r3, #64	; 0x40
 8004b24:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f7fc fda0 	bl	8001670 <sd_read_array_float>
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b08b      	sub	sp, #44	; 0x2c
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b52:	3340      	adds	r3, #64	; 0x40
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d009      	beq.n	8004b72 <_ZN6Logger10resetLogs2Ev+0x3a>
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b70:	e7f1      	b.n	8004b56 <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004b78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b88:	3340      	adds	r3, #64	; 0x40
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d009      	beq.n	8004ba8 <_ZN6Logger10resetLogs2Ev+0x70>
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	e7f1      	b.n	8004b8c <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bae:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bbc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	801a      	strh	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	372c      	adds	r7, #44	; 0x2c
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bde:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004be2:	2200      	movs	r2, #0
 8004be4:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bec:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	801a      	strh	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	805a      	strh	r2, [r3, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c70:	2108      	movs	r1, #8
 8004c72:	4805      	ldr	r0, [pc, #20]	; (8004c88 <_ZN5Motor4initEv+0x20>)
 8004c74:	f00a f888 	bl	800ed88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004c78:	210c      	movs	r1, #12
 8004c7a:	4803      	ldr	r0, [pc, #12]	; (8004c88 <_ZN5Motor4initEv+0x20>)
 8004c7c:	f00a f884 	bl	800ed88 <HAL_TIM_PWM_Start>

}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200437a8 	.word	0x200437a8

08004c8c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da0d      	bge.n	8004cba <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ca4:	481f      	ldr	r0, [pc, #124]	; (8004d24 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ca6:	f006 f955 	bl	800af54 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	81fb      	strh	r3, [r7, #14]
 8004cb8:	e00a      	b.n	8004cd0 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cc0:	4818      	ldr	r0, [pc, #96]	; (8004d24 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cc2:	f006 f947 	bl	800af54 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da0d      	bge.n	8004cf6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce0:	4810      	ldr	r0, [pc, #64]	; (8004d24 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ce2:	f006 f937 	bl	800af54 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	425b      	negs	r3, r3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	81bb      	strh	r3, [r7, #12]
 8004cf4:	e00a      	b.n	8004d0c <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cfc:	4809      	ldr	r0, [pc, #36]	; (8004d24 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cfe:	f006 f929 	bl	800af54 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004d0c:	89fa      	ldrh	r2, [r7, #14]
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004d14:	89ba      	ldrh	r2, [r7, #12]
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	200437a8 	.word	0x200437a8

08004d2c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6178      	str	r0, [r7, #20]
 8004d34:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d38:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d46:	f7fb feff 	bl	8000b48 <__aeabi_dcmpgt>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <_ZN5Motor8setRatioEdd+0x30>
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	4c2b      	ldr	r4, [pc, #172]	; (8004e04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d56:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004d5a:	e00e      	b.n	8004d7a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d66:	f7fb fed1 	bl	8000b0c <__aeabi_dcmplt>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <_ZN5Motor8setRatioEdd+0x4e>
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	4c24      	ldr	r4, [pc, #144]	; (8004e08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d76:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d84:	f7fb fee0 	bl	8000b48 <__aeabi_dcmpgt>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <_ZN5Motor8setRatioEdd+0x6e>
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	4c1c      	ldr	r4, [pc, #112]	; (8004e04 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d94:	e9c7 3400 	strd	r3, r4, [r7]
 8004d98:	e00e      	b.n	8004db8 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da4:	f7fb feb2 	bl	8000b0c <__aeabi_dcmplt>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <_ZN5Motor8setRatioEdd+0x8c>
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	4c15      	ldr	r4, [pc, #84]	; (8004e08 <_ZN5Motor8setRatioEdd+0xdc>)
 8004db4:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <_ZN5Motor8setRatioEdd+0xe0>)
 8004dbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dc2:	f7fb fc31 	bl	8000628 <__aeabi_dmul>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460c      	mov	r4, r1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	4621      	mov	r1, r4
 8004dce:	f7fb fedb 	bl	8000b88 <__aeabi_d2iz>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <_ZN5Motor8setRatioEdd+0xe0>)
 8004de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de4:	f7fb fc20 	bl	8000628 <__aeabi_dmul>
 8004de8:	4603      	mov	r3, r0
 8004dea:	460c      	mov	r4, r1
 8004dec:	4618      	mov	r0, r3
 8004dee:	4621      	mov	r1, r4
 8004df0:	f7fb feca 	bl	8000b88 <__aeabi_d2iz>
 8004df4:	4603      	mov	r3, r0
 8004df6:	b21a      	sxth	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	805a      	strh	r2, [r3, #2]

}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd90      	pop	{r4, r7, pc}
 8004e04:	3ff00000 	.word	0x3ff00000
 8004e08:	bff00000 	.word	0xbff00000
 8004e0c:	409c2000 	.word	0x409c2000

08004e10 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e10:	b490      	push	{r4, r7}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	f04f 0400 	mov.w	r4, #0
 8004e36:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	f04f 0400 	mov.w	r4, #0
 8004e44:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f04f 0400 	mov.w	r4, #0
 8004e60:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	609a      	str	r2, [r3, #8]
}
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc90      	pop	{r4, r7}
 8004e80:	4770      	bx	lr
 8004e82:	0000      	movs	r0, r0
 8004e84:	0000      	movs	r0, r0
	...

08004e88 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc fe3e 	bl	8001b18 <_ZN3IMU8getOmegaEv>
 8004e9c:	ee10 3a10 	vmov	r3, s0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb fb69 	bl	8000578 <__aeabi_f2d>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fc fb00 	bl	80014b8 <_ZN7Encoder11getDistanceEv>
 8004eb8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004ebc:	a376      	add	r3, pc, #472	; (adr r3, 8005098 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ec6:	f7fb fbaf 	bl	8000628 <__aeabi_dmul>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7fb fb4c 	bl	8000578 <__aeabi_f2d>
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	468b      	mov	fp, r1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ef8:	f7fb fcc0 	bl	800087c <__aeabi_ddiv>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb f9da 	bl	80002bc <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	ec43 2b17 	vmov	d7, r2, r3
 8004f10:	eeb0 0a47 	vmov.f32	s0, s14
 8004f14:	eef0 0a67 	vmov.f32	s1, s15
 8004f18:	f00f fa7a 	bl	8014410 <cos>
 8004f1c:	ec53 2b10 	vmov	r2, r3, d0
 8004f20:	4650      	mov	r0, sl
 8004f22:	4659      	mov	r1, fp
 8004f24:	f7fb fb80 	bl	8000628 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb f9c4 	bl	80002bc <__adddf3>
 8004f34:	4603      	mov	r3, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7fb fb17 	bl	8000578 <__aeabi_f2d>
 8004f4a:	4682      	mov	sl, r0
 8004f4c:	468b      	mov	fp, r1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f62:	f7fb fc8b 	bl	800087c <__aeabi_ddiv>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	f7fb f9a5 	bl	80002bc <__adddf3>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	ec43 2b17 	vmov	d7, r2, r3
 8004f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f7e:	eef0 0a67 	vmov.f32	s1, s15
 8004f82:	f00f fa89 	bl	8014498 <sin>
 8004f86:	ec53 2b10 	vmov	r2, r3, d0
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	f7fb fb4b 	bl	8000628 <__aeabi_dmul>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb f98f 	bl	80002bc <__adddf3>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	f7fb f980 	bl	80002bc <__adddf3>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fd6:	eef0 0a67 	vmov.f32	s1, s15
 8004fda:	f00f fa19 	bl	8014410 <cos>
 8004fde:	ec51 0b10 	vmov	r0, r1, d0
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	4b28      	ldr	r3, [pc, #160]	; (8005088 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004fe8:	f7fb fb1e 	bl	8000628 <__aeabi_dmul>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f7fb f962 	bl	80002bc <__adddf3>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	ed93 7b08 	vldr	d7, [r3, #32]
 800500e:	eeb0 0a47 	vmov.f32	s0, s14
 8005012:	eef0 0a67 	vmov.f32	s1, s15
 8005016:	f00f fa3f 	bl	8014498 <sin>
 800501a:	ec51 0b10 	vmov	r0, r1, d0
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	4b19      	ldr	r3, [pc, #100]	; (8005088 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005024:	f7fb fb00 	bl	8000628 <__aeabi_dmul>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb f944 	bl	80002bc <__adddf3>
 8005034:	4603      	mov	r3, r0
 8005036:	460c      	mov	r4, r1
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005044:	4618      	mov	r0, r3
 8005046:	4621      	mov	r1, r4
 8005048:	f7fb fde6 	bl	8000c18 <__aeabi_d2f>
 800504c:	4602      	mov	r2, r0
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005050:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005058:	4618      	mov	r0, r3
 800505a:	4621      	mov	r1, r4
 800505c:	f7fb fddc 	bl	8000c18 <__aeabi_d2f>
 8005060:	4602      	mov	r2, r0
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005064:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800506c:	4618      	mov	r0, r3
 800506e:	4621      	mov	r1, r4
 8005070:	f7fb fdd2 	bl	8000c18 <__aeabi_d2f>
 8005074:	4602      	mov	r2, r0
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005078:	601a      	str	r2, [r3, #0]
}
 800507a:	bf00      	nop
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005084:	f3af 8000 	nop.w
 8005088:	405b8000 	.word	0x405b8000
 800508c:	200002c0 	.word	0x200002c0
 8005090:	200002c4 	.word	0x200002c4
 8005094:	200002c8 	.word	0x200002c8
 8005098:	d2f1a9fc 	.word	0xd2f1a9fc
 800509c:	3f50624d 	.word	0x3f50624d

080050a0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	calcPotition();
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff feed 	bl	8004e88 <_ZN8Odometry12calcPotitionEv>
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80050b6:	b490      	push	{r4, r7}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
	return theta_;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050c4:	ec44 3b17 	vmov	d7, r3, r4
}
 80050c8:	eeb0 0a47 	vmov.f32	s0, s14
 80050cc:	eef0 0a67 	vmov.f32	s1, s15
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc90      	pop	{r4, r7}
 80050d6:	4770      	bx	lr

080050d8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80050d8:	b490      	push	{r4, r7}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	f04f 0400 	mov.w	r4, #0
 80050ea:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	f04f 0400 	mov.w	r4, #0
 8005106:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bc90      	pop	{r4, r7}
 8005112:	4770      	bx	lr

08005114 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005114:	b490      	push	{r4, r7}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	f04f 0400 	mov.w	r4, #0
 800513a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005152:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005156:	2200      	movs	r2, #0
 8005158:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800515a:	4a29      	ldr	r2, [pc, #164]	; (8005200 <_ZN13PathFollowingC1Ev+0xec>)
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005168:	4a25      	ldr	r2, [pc, #148]	; (8005200 <_ZN13PathFollowingC1Ev+0xec>)
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	f04f 0400 	mov.w	r4, #0
 8005172:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <_ZN13PathFollowingC1Ev+0xec>)
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	f04f 0400 	mov.w	r4, #0
 8005180:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <_ZN13PathFollowingC1Ev+0xf0>)
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <_ZN13PathFollowingC1Ev+0xf0>)
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	f04f 0400 	mov.w	r4, #0
 800519c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80051a0:	4a18      	ldr	r2, [pc, #96]	; (8005204 <_ZN13PathFollowingC1Ev+0xf0>)
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f04f 0400 	mov.w	r4, #0
 80051aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <_ZN13PathFollowingC1Ev+0xf0>)
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f04f 0400 	mov.w	r4, #0
 80051b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051bc:	4a11      	ldr	r2, [pc, #68]	; (8005204 <_ZN13PathFollowingC1Ev+0xf0>)
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	f04f 0400 	mov.w	r4, #0
 80051c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <_ZN13PathFollowingC1Ev+0xf0>)
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051d8:	4a0b      	ldr	r2, [pc, #44]	; (8005208 <_ZN13PathFollowingC1Ev+0xf4>)
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	f04f 0400 	mov.w	r4, #0
 80051e2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <_ZN13PathFollowingC1Ev+0xf4>)
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc90      	pop	{r4, r7}
 80051fe:	4770      	bx	lr
 8005200:	20043ca8 	.word	0x20043ca8
 8005204:	20043c38 	.word	0x20043c38
 8005208:	20043c98 	.word	0x20043c98

0800520c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005214:	f001 fcb2 	bl	8006b7c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005218:	f107 0318 	add.w	r3, r7, #24
 800521c:	2201      	movs	r2, #1
 800521e:	4915      	ldr	r1, [pc, #84]	; (8005274 <_ZN13PathFollowing4initEv+0x68>)
 8005220:	4815      	ldr	r0, [pc, #84]	; (8005278 <_ZN13PathFollowing4initEv+0x6c>)
 8005222:	f7fc fa6b 	bl	80016fc <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005226:	f107 0310 	add.w	r3, r7, #16
 800522a:	2201      	movs	r2, #1
 800522c:	4913      	ldr	r1, [pc, #76]	; (800527c <_ZN13PathFollowing4initEv+0x70>)
 800522e:	4812      	ldr	r0, [pc, #72]	; (8005278 <_ZN13PathFollowing4initEv+0x6c>)
 8005230:	f7fc fa64 	bl	80016fc <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	2201      	movs	r2, #1
 800523a:	4911      	ldr	r1, [pc, #68]	; (8005280 <_ZN13PathFollowing4initEv+0x74>)
 800523c:	480e      	ldr	r0, [pc, #56]	; (8005278 <_ZN13PathFollowing4initEv+0x6c>)
 800523e:	f7fc fa5d 	bl	80016fc <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005242:	ed97 7b06 	vldr	d7, [r7, #24]
 8005246:	ed97 6b04 	vldr	d6, [r7, #16]
 800524a:	ed97 5b02 	vldr	d5, [r7, #8]
 800524e:	eeb0 2a45 	vmov.f32	s4, s10
 8005252:	eef0 2a65 	vmov.f32	s5, s11
 8005256:	eeb0 1a46 	vmov.f32	s2, s12
 800525a:	eef0 1a66 	vmov.f32	s3, s13
 800525e:	eeb0 0a47 	vmov.f32	s0, s14
 8005262:	eef0 0a67 	vmov.f32	s1, s15
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f80c 	bl	8005284 <_ZN13PathFollowing7setGainEddd>
}
 800526c:	bf00      	nop
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	08019ee4 	.word	0x08019ee4
 8005278:	08019eec 	.word	0x08019eec
 800527c:	08019ef4 	.word	0x08019ef4
 8005280:	08019efc 	.word	0x08019efc

08005284 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005284:	b490      	push	{r4, r7}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	61f8      	str	r0, [r7, #28]
 800528c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005290:	ed87 1b02 	vstr	d1, [r7, #8]
 8005294:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800529a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800529e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80052a2:	4a07      	ldr	r2, [pc, #28]	; (80052c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052b6:	bf00      	nop
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc90      	pop	{r4, r7}
 80052be:	4770      	bx	lr
 80052c0:	20043ca8 	.word	0x20043ca8

080052c4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052cc:	2088      	movs	r0, #136	; 0x88
 80052ce:	f7fc fd66 	bl	8001d9e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052d2:	2080      	movs	r0, #128	; 0x80
 80052d4:	f7fc fd63 	bl	8001d9e <INA260_init>
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80052e8:	2188      	movs	r1, #136	; 0x88
 80052ea:	2002      	movs	r0, #2
 80052ec:	f7fc fcf4 	bl	8001cd8 <INA260_read>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fb f92e 	bl	8000554 <__aeabi_i2d>
 80052f8:	a30c      	add	r3, pc, #48	; (adr r3, 800532c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f993 	bl	8000628 <__aeabi_dmul>
 8005302:	4603      	mov	r3, r0
 8005304:	460c      	mov	r4, r1
 8005306:	4618      	mov	r0, r3
 8005308:	4621      	mov	r1, r4
 800530a:	f7fb fc85 	bl	8000c18 <__aeabi_d2f>
 800530e:	4602      	mov	r2, r0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a03      	ldr	r2, [pc, #12]	; (8005328 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bd90      	pop	{r4, r7, pc}
 8005324:	f3af 8000 	nop.w
 8005328:	200002cc 	.word	0x200002cc
 800532c:	47ae147b 	.word	0x47ae147b
 8005330:	3f547ae1 	.word	0x3f547ae1

08005334 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	ee07 3a90 	vmov	s15, r3

}
 8005344:	eeb0 0a67 	vmov.f32	s0, s15
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005360:	2102      	movs	r1, #2
 8005362:	4822      	ldr	r0, [pc, #136]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005364:	f005 fdde 	bl	800af24 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005380:	2108      	movs	r1, #8
 8005382:	481a      	ldr	r0, [pc, #104]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005384:	f005 fdce 	bl	800af24 <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053a0:	2110      	movs	r1, #16
 80053a2:	4812      	ldr	r0, [pc, #72]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80053a4:	f005 fdbe 	bl	800af24 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	480a      	ldr	r0, [pc, #40]	; (80053ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80053c4:	f005 fdae 	bl	800af24 <HAL_GPIO_ReadPin>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	f043 0308 	orr.w	r3, r3, #8
 80053de:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053e0:	89fb      	ldrh	r3, [r7, #14]

}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40020c00 	.word	0x40020c00

080053f0 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	805a      	strh	r2, [r3, #2]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	809a      	strh	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	719a      	strb	r2, [r3, #6]
{

}
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	799b      	ldrb	r3, [r3, #6]
 800542c:	f083 0301 	eor.w	r3, r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80c7 	beq.w	80055c6 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005438:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f083 0301 	eor.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d027      	beq.n	8005496 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005446:	2104      	movs	r1, #4
 8005448:	4862      	ldr	r0, [pc, #392]	; (80055d4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800544a:	f005 fd6b 	bl	800af24 <HAL_GPIO_ReadPin>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800545e:	4b5e      	ldr	r3, [pc, #376]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e002      	b.n	8005472 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 800546c:	4b5a      	ldr	r3, [pc, #360]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800546e:	2200      	movs	r2, #0
 8005470:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d93f      	bls.n	80054fa <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8005488:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800548e:	4b52      	ldr	r3, [pc, #328]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005490:	2200      	movs	r2, #0
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e031      	b.n	80054fa <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8005496:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02d      	beq.n	80054fa <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800549e:	2104      	movs	r1, #4
 80054a0:	484c      	ldr	r0, [pc, #304]	; (80055d4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80054a2:	f005 fd3f 	bl	800af24 <HAL_GPIO_ReadPin>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80054b6:	4b48      	ldr	r3, [pc, #288]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	4b46      	ldr	r3, [pc, #280]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80054c4:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054ca:	4b43      	ldr	r3, [pc, #268]	; (80055d8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d913      	bls.n	80054fa <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80054e0:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	889b      	ldrh	r3, [r3, #4]
 80054ea:	3301      	adds	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	889a      	ldrh	r2, [r3, #4]
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <_ZN10SideSensor12updateStatusEv+0x1bc>)
 80054f8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80054fa:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f083 0301 	eor.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d027      	beq.n	8005558 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800550c:	4835      	ldr	r0, [pc, #212]	; (80055e4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800550e:	f005 fd09 	bl	800af24 <HAL_GPIO_ReadPin>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8005522:	4b31      	ldr	r3, [pc, #196]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	4b2f      	ldr	r3, [pc, #188]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e002      	b.n	8005536 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005530:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005532:	2200      	movs	r2, #0
 8005534:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005536:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d90c      	bls.n	8005558 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005552:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005554:	2200      	movs	r2, #0
 8005556:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02e      	beq.n	80055be <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005564:	481f      	ldr	r0, [pc, #124]	; (80055e4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005566:	f005 fcdd 	bl	800af24 <HAL_GPIO_ReadPin>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d006      	beq.n	8005588 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	e002      	b.n	800558e <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8005588:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800558a:	2200      	movs	r2, #0
 800558c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d913      	bls.n	80055be <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	f083 0302 	eor.w	r3, r3, #2
 800559e:	b29a      	uxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	885b      	ldrh	r3, [r3, #2]
 80055ae:	3301      	adds	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	885a      	ldrh	r2, [r3, #2]
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80055bc:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80055c4:	801a      	strh	r2, [r3, #0]
	}

}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200002d6 	.word	0x200002d6
 80055d4:	40021000 	.word	0x40021000
 80055d8:	200002da 	.word	0x200002da
 80055dc:	200002d4 	.word	0x200002d4
 80055e0:	200002d7 	.word	0x200002d7
 80055e4:	40020c00 	.word	0x40020c00
 80055e8:	200002d8 	.word	0x200002d8
 80055ec:	200002d2 	.word	0x200002d2
 80055f0:	200002d0 	.word	0x200002d0

080055f4 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	return status_;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	881b      	ldrh	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	889b      	ldrh	r3, [r3, #4]
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	809a      	strh	r2, [r3, #4]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	719a      	strb	r2, [r3, #6]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	719a      	strb	r2, [r3, #6]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	799b      	ldrb	r3, [r3, #6]
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80056a0:	3308      	adds	r3, #8
 80056a2:	4611      	mov	r1, r2
 80056a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f010 f931 	bl	8015910 <memcpy>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	08019f20 	.word	0x08019f20

080056e4 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	ed97 0a00 	vldr	s0, [r7]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff f862 	bl	80047cc <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005712:	eeb0 0a67 	vmov.f32	s0, s15
 8005716:	4610      	mov	r0, r2
 8005718:	f7ff f895 	bl	8004846 <_ZN6Logger9storeLog2Ef>
	}

}
 800571c:	bf00      	nop
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005732:	2b00      	cmp	r3, #0
 8005734:	d046      	beq.n	80057c4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3204      	adds	r2, #4
 8005748:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005764:	3301      	adds	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005774:	4a15      	ldr	r2, [pc, #84]	; (80057cc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005776:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800577e:	2bf9      	cmp	r3, #249	; 0xf9
 8005780:	d903      	bls.n	800578a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	22fa      	movs	r2, #250	; 0xfa
 8005786:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685c      	ldr	r4, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005794:	4618      	mov	r0, r3
 8005796:	f7fa feef 	bl	8000578 <__aeabi_f2d>
 800579a:	4605      	mov	r5, r0
 800579c:	460e      	mov	r6, r1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80057a4:	eef1 7a67 	vneg.f32	s15, s15
 80057a8:	ee17 3a90 	vmov	r3, s15
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fa fee3 	bl	8000578 <__aeabi_f2d>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	ec43 2b11 	vmov	d1, r2, r3
 80057ba:	ec46 5b10 	vmov	d0, r5, r6
 80057be:	4620      	mov	r0, r4
 80057c0:	f7ff fab4 	bl	8004d2c <_ZN5Motor8setRatioEdd>

	}

}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057cc:	200002dc 	.word	0x200002dc

080057d0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	615a      	str	r2, [r3, #20]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	619a      	str	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	621a      	str	r2, [r3, #32]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005874:	f107 020c 	add.w	r2, r7, #12
 8005878:	f107 0110 	add.w	r1, r7, #16
 800587c:	4618      	mov	r0, r3
 800587e:	f7fb fe07 	bl	8001490 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005882:	ed97 7a04 	vldr	s14, [r7, #16]
 8005886:	edd7 7a03 	vldr	s15, [r7, #12]
 800588a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800588e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005896:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800589a:	6978      	ldr	r0, [r7, #20]
 800589c:	f7fa fe6c 	bl	8000578 <__aeabi_f2d>
 80058a0:	a30b      	add	r3, pc, #44	; (adr r3, 80058d0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fa febf 	bl	8000628 <__aeabi_dmul>
 80058aa:	4603      	mov	r3, r0
 80058ac:	460c      	mov	r4, r1
 80058ae:	4618      	mov	r0, r3
 80058b0:	4621      	mov	r1, r4
 80058b2:	f7fb f9b1 	bl	8000c18 <__aeabi_d2f>
 80058b6:	4602      	mov	r2, r0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	ee07 3a90 	vmov	s15, r3
}
 80058c4:	eeb0 0a67 	vmov.f32	s0, s15
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	1ab1d998 	.word	0x1ab1d998
 80058d4:	3f7830b5 	.word	0x3f7830b5

080058d8 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 80058d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058da:	ed2d 8b02 	vpush	{d8}
 80058de:	b08d      	sub	sp, #52	; 0x34
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	ed93 7a00 	vldr	s14, [r3]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80058f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	ed93 8a01 	vldr	s16, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	4618      	mov	r0, r3
 8005904:	f7fc f908 	bl	8001b18 <_ZN3IMU8getOmegaEv>
 8005908:	eef0 7a40 	vmov.f32	s15, s0
 800590c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005910:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	if(i_reset_flag_ == true){
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <_ZN12VelocityCtrl3pidEv+0x5e>
		v_i = o_i = 0;
 800591e:	4b80      	ldr	r3, [pc, #512]	; (8005b20 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a7e      	ldr	r2, [pc, #504]	; (8005b24 <_ZN12VelocityCtrl3pidEv+0x24c>)
 800592c:	6013      	str	r3, [r2, #0]
		i_reset_flag_ = false;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	edd3 7a04 	vldr	s15, [r3, #16]
 800593c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005944:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 8005948:	4b76      	ldr	r3, [pc, #472]	; (8005b24 <_ZN12VelocityCtrl3pidEv+0x24c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7fa fe13 	bl	8000578 <__aeabi_f2d>
 8005952:	4604      	mov	r4, r0
 8005954:	460d      	mov	r5, r1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	ed93 7a06 	vldr	s14, [r3, #24]
 800595c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005964:	ee17 0a90 	vmov	r0, s15
 8005968:	f7fa fe06 	bl	8000578 <__aeabi_f2d>
 800596c:	a36a      	add	r3, pc, #424	; (adr r3, 8005b18 <_ZN12VelocityCtrl3pidEv+0x240>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fe59 	bl	8000628 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fa fc9d 	bl	80002bc <__adddf3>
 8005982:	4603      	mov	r3, r0
 8005984:	460c      	mov	r4, r1
 8005986:	4618      	mov	r0, r3
 8005988:	4621      	mov	r1, r4
 800598a:	f7fb f945 	bl	8000c18 <__aeabi_d2f>
 800598e:	4602      	mov	r2, r0
 8005990:	4b64      	ldr	r3, [pc, #400]	; (8005b24 <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005992:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	ed93 7a05 	vldr	s14, [r3, #20]
 800599a:	4b63      	ldr	r3, [pc, #396]	; (8005b28 <_ZN12VelocityCtrl3pidEv+0x250>)
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80059a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80059a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ac:	ee17 0a90 	vmov	r0, s15
 80059b0:	f7fa fde2 	bl	8000578 <__aeabi_f2d>
 80059b4:	a358      	add	r3, pc, #352	; (adr r3, 8005b18 <_ZN12VelocityCtrl3pidEv+0x240>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa ff5f 	bl	800087c <__aeabi_ddiv>
 80059be:	4603      	mov	r3, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	4618      	mov	r0, r3
 80059c4:	4621      	mov	r1, r4
 80059c6:	f7fb f927 	bl	8000c18 <__aeabi_d2f>
 80059ca:	4603      	mov	r3, r0
 80059cc:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80059d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80059d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059dc:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 80059e0:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <_ZN12VelocityCtrl3pidEv+0x248>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fa fdc7 	bl	8000578 <__aeabi_f2d>
 80059ea:	4604      	mov	r4, r0
 80059ec:	460d      	mov	r5, r1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80059f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	ee17 0a90 	vmov	r0, s15
 8005a00:	f7fa fdba 	bl	8000578 <__aeabi_f2d>
 8005a04:	a344      	add	r3, pc, #272	; (adr r3, 8005b18 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f7fa fe0d 	bl	8000628 <__aeabi_dmul>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa fc51 	bl	80002bc <__adddf3>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	4621      	mov	r1, r4
 8005a22:	f7fb f8f9 	bl	8000c18 <__aeabi_d2f>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b3d      	ldr	r3, [pc, #244]	; (8005b20 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005a2a:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) / DELTA_T;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8005a32:	4b3e      	ldr	r3, [pc, #248]	; (8005b2c <_ZN12VelocityCtrl3pidEv+0x254>)
 8005a34:	edd3 7a00 	vldr	s15, [r3]
 8005a38:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005a3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a44:	ee17 0a90 	vmov	r0, s15
 8005a48:	f7fa fd96 	bl	8000578 <__aeabi_f2d>
 8005a4c:	a332      	add	r3, pc, #200	; (adr r3, 8005b18 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f7fa ff13 	bl	800087c <__aeabi_ddiv>
 8005a56:	4603      	mov	r3, r0
 8005a58:	460c      	mov	r4, r1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f7fb f8db 	bl	8000c18 <__aeabi_d2f>
 8005a62:	4603      	mov	r3, r0
 8005a64:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8005a66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005a6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a72:	4b2c      	ldr	r3, [pc, #176]	; (8005b24 <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005a74:	edd3 7a00 	vldr	s15, [r3]
 8005a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a7c:	edc7 7a05 	vstr	s15, [r7, #20]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 8005a84:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a88:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a90:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a9a:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8005a9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005aac:	edd3 7a00 	vldr	s15, [r3]
 8005ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab4:	eef1 7a67 	vneg.f32	s15, s15
 8005ab8:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005ac0:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005acc:	ee17 0a90 	vmov	r0, s15
 8005ad0:	f7fa fd52 	bl	8000578 <__aeabi_f2d>
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae4:	ee17 0a90 	vmov	r0, s15
 8005ae8:	f7fa fd46 	bl	8000578 <__aeabi_f2d>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	ec43 2b11 	vmov	d1, r2, r3
 8005af4:	ec46 5b10 	vmov	d0, r5, r6
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff f917 	bl	8004d2c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <_ZN12VelocityCtrl3pidEv+0x250>)
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8005b04:	4a09      	ldr	r2, [pc, #36]	; (8005b2c <_ZN12VelocityCtrl3pidEv+0x254>)
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	3734      	adds	r7, #52	; 0x34
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	ecbd 8b02 	vpop	{d8}
 8005b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b16:	bf00      	nop
 8005b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b1c:	3f50624d 	.word	0x3f50624d
 8005b20:	200002ec 	.word	0x200002ec
 8005b24:	200002e8 	.word	0x200002e8
 8005b28:	200002e0 	.word	0x200002e0
 8005b2c:	200002e4 	.word	0x200002e4

08005b30 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b3c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b64:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005b90:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	615a      	str	r2, [r3, #20]
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bbe:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bc2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fe3b 	bl	8005868 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff fe6b 	bl	80058d8 <_ZN12VelocityCtrl3pidEv>
		//pidTranslationOnly();
	}


}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005c60 <_ZN12VelocityCtrl4stopEv+0x30>
 8005c48:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005c60 <_ZN12VelocityCtrl4stopEv+0x30>
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff f86d 	bl	8004d2c <_ZN5Motor8setRatioEdd>

}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	f3af 8000 	nop.w
	...

08005c68 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	ee07 3a90 	vmov	s15, r3
}
 8005c78:	eeb0 0a67 	vmov.f32	s0, s15
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10e      	bne.n	8005cb8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005c9a:	f001 fe27 	bl	80078ec <cppFlip100ns>

		tim7_timer++;
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ca6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d902      	bls.n	8005cb8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005cb2:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005cc2:	f001 fdc9 	bl	8007858 <cppFlip1ms>

		tim6_timer++;
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005cce:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005cd0:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d902      	bls.n	8005ce0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005cda:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0f      	ldr	r2, [pc, #60]	; (8005d24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10e      	bne.n	8005d08 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005cea:	f001 fe09 	bl	8007900 <cppFlip10ms>

		tim13_timer++;
 8005cee:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005cf6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a06      	ldr	r2, [pc, #24]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d902      	bls.n	8005d08 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
	}

}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40001400 	.word	0x40001400
 8005d14:	2004395c 	.word	0x2004395c
 8005d18:	0001869f 	.word	0x0001869f
 8005d1c:	40001000 	.word	0x40001000
 8005d20:	20043918 	.word	0x20043918
 8005d24:	40001c00 	.word	0x40001c00
 8005d28:	20043960 	.word	0x20043960

08005d2c <init>:

void init()
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005d30:	2201      	movs	r2, #1
 8005d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d36:	4808      	ldr	r0, [pc, #32]	; (8005d58 <init+0x2c>)
 8005d38:	f005 f90c 	bl	800af54 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005d3c:	4807      	ldr	r0, [pc, #28]	; (8005d5c <init+0x30>)
 8005d3e:	f008 ffd4 	bl	800ecea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005d42:	4807      	ldr	r0, [pc, #28]	; (8005d60 <init+0x34>)
 8005d44:	f008 ffd1 	bl	800ecea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005d48:	4806      	ldr	r0, [pc, #24]	; (8005d64 <init+0x38>)
 8005d4a:	f008 ffce 	bl	800ecea <HAL_TIM_Base_Start_IT>

	cppInit();
 8005d4e:	f001 fce3 	bl	8007718 <cppInit>

	//path_following_initialize();

}
 8005d52:	bf00      	nop
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	20043a44 	.word	0x20043a44
 8005d60:	20043be8 	.word	0x20043be8
 8005d64:	20043964 	.word	0x20043964

08005d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d6c:	f003 fdea 	bl	8009944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d70:	f000 f82a 	bl	8005dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d74:	f000 fdbc 	bl	80068f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005d78:	f000 fd8a 	bl	8006890 <MX_DMA_Init>
  MX_I2C2_Init();
 8005d7c:	f000 f9e8 	bl	8006150 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005d80:	f000 fa14 	bl	80061ac <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005d84:	f000 fa32 	bl	80061ec <MX_SPI2_Init>
  MX_TIM1_Init();
 8005d88:	f000 fa66 	bl	8006258 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005d8c:	f000 fb70 	bl	8006470 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005d90:	f000 fc3c 	bl	800660c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005d94:	f000 fd52 	bl	800683c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005d98:	f00a ff7a 	bl	8010c90 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005d9c:	f000 fbcc 	bl	8006538 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005da0:	f000 f9a8 	bl	80060f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005da4:	f000 fb00 	bl	80063a8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005da8:	f000 fc88 	bl	80066bc <MX_TIM10_Init>
  MX_TIM11_Init();
 8005dac:	f000 fcd4 	bl	8006758 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005db0:	f000 f898 	bl	8005ee4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005db4:	f000 fbf6 	bl	80065a4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005db8:	f000 fd1c 	bl	80067f4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005dbc:	f7ff ffb6 	bl	8005d2c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005dc0:	f001 fdb6 	bl	8007930 <cppLoop>
 8005dc4:	e7fc      	b.n	8005dc0 <main+0x58>
	...

08005dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b0a4      	sub	sp, #144	; 0x90
 8005dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005dd2:	2234      	movs	r2, #52	; 0x34
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f00f fda5 	bl	8015926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ddc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dec:	f107 030c 	add.w	r3, r7, #12
 8005df0:	223c      	movs	r2, #60	; 0x3c
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f00f fd96 	bl	8015926 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	4b37      	ldr	r3, [pc, #220]	; (8005edc <SystemClock_Config+0x114>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	4a36      	ldr	r2, [pc, #216]	; (8005edc <SystemClock_Config+0x114>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <SystemClock_Config+0x114>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	60bb      	str	r3, [r7, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <SystemClock_Config+0x118>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a30      	ldr	r2, [pc, #192]	; (8005ee0 <SystemClock_Config+0x118>)
 8005e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <SystemClock_Config+0x118>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e32:	2301      	movs	r3, #1
 8005e34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e44:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005e46:	2308      	movs	r3, #8
 8005e48:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005e4a:	23b4      	movs	r3, #180	; 0xb4
 8005e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e50:	2302      	movs	r3, #2
 8005e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005e56:	2308      	movs	r3, #8
 8005e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e66:	4618      	mov	r0, r3
 8005e68:	f006 fc96 	bl	800c798 <HAL_RCC_OscConfig>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005e72:	f000 fe7f 	bl	8006b74 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005e76:	f006 f811 	bl	800be9c <HAL_PWREx_EnableOverDrive>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005e80:	f000 fe78 	bl	8006b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e84:	230f      	movs	r3, #15
 8005e86:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ea0:	2105      	movs	r1, #5
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f006 f84a 	bl	800bf3c <HAL_RCC_ClockConfig>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005eae:	f000 fe61 	bl	8006b74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005eb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005eb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f006 fa29 	bl	800c31c <HAL_RCCEx_PeriphCLKConfig>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005ed0:	f000 fe50 	bl	8006b74 <Error_Handler>
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3790      	adds	r7, #144	; 0x90
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40007000 	.word	0x40007000

08005ee4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005eea:	463b      	mov	r3, r7
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005ef6:	4b7c      	ldr	r3, [pc, #496]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005ef8:	4a7c      	ldr	r2, [pc, #496]	; (80060ec <MX_ADC2_Init+0x208>)
 8005efa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005efc:	4b7a      	ldr	r3, [pc, #488]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005efe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f02:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f04:	4b78      	ldr	r3, [pc, #480]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005f0a:	4b77      	ldr	r3, [pc, #476]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005f10:	4b75      	ldr	r3, [pc, #468]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005f16:	4b74      	ldr	r3, [pc, #464]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f1e:	4b72      	ldr	r3, [pc, #456]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f24:	4b70      	ldr	r3, [pc, #448]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f26:	4a72      	ldr	r2, [pc, #456]	; (80060f0 <MX_ADC2_Init+0x20c>)
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f2a:	4b6f      	ldr	r3, [pc, #444]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005f30:	4b6d      	ldr	r3, [pc, #436]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f32:	220e      	movs	r2, #14
 8005f34:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005f36:	4b6c      	ldr	r3, [pc, #432]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f3e:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005f44:	4868      	ldr	r0, [pc, #416]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f46:	f003 fd91 	bl	8009a6c <HAL_ADC_Init>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005f50:	f000 fe10 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005f54:	230a      	movs	r3, #10
 8005f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f60:	463b      	mov	r3, r7
 8005f62:	4619      	mov	r1, r3
 8005f64:	4860      	ldr	r0, [pc, #384]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f66:	f003 fed5 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005f70:	f000 fe00 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005f74:	230b      	movs	r3, #11
 8005f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4859      	ldr	r0, [pc, #356]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f82:	f003 fec7 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005f8c:	f000 fdf2 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005f90:	230c      	movs	r3, #12
 8005f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005f94:	2303      	movs	r3, #3
 8005f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4852      	ldr	r0, [pc, #328]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005f9e:	f003 feb9 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005fa8:	f000 fde4 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005fac:	230d      	movs	r3, #13
 8005fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	484b      	ldr	r0, [pc, #300]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005fba:	f003 feab 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005fc4:	f000 fdd6 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005fcc:	2305      	movs	r3, #5
 8005fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4844      	ldr	r0, [pc, #272]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005fd6:	f003 fe9d 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005fe0:	f000 fdc8 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005fe8:	2306      	movs	r3, #6
 8005fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fec:	463b      	mov	r3, r7
 8005fee:	4619      	mov	r1, r3
 8005ff0:	483d      	ldr	r0, [pc, #244]	; (80060e8 <MX_ADC2_Init+0x204>)
 8005ff2:	f003 fe8f 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005ffc:	f000 fdba 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006000:	2302      	movs	r3, #2
 8006002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006004:	2307      	movs	r3, #7
 8006006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006008:	463b      	mov	r3, r7
 800600a:	4619      	mov	r1, r3
 800600c:	4836      	ldr	r0, [pc, #216]	; (80060e8 <MX_ADC2_Init+0x204>)
 800600e:	f003 fe81 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006018:	f000 fdac 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800601c:	2303      	movs	r3, #3
 800601e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006020:	2308      	movs	r3, #8
 8006022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006024:	463b      	mov	r3, r7
 8006026:	4619      	mov	r1, r3
 8006028:	482f      	ldr	r0, [pc, #188]	; (80060e8 <MX_ADC2_Init+0x204>)
 800602a:	f003 fe73 	bl	8009d14 <HAL_ADC_ConfigChannel>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006034:	f000 fd9e 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006038:	2304      	movs	r3, #4
 800603a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800603c:	2309      	movs	r3, #9
 800603e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006040:	463b      	mov	r3, r7
 8006042:	4619      	mov	r1, r3
 8006044:	4828      	ldr	r0, [pc, #160]	; (80060e8 <MX_ADC2_Init+0x204>)
 8006046:	f003 fe65 	bl	8009d14 <HAL_ADC_ConfigChannel>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006050:	f000 fd90 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006054:	2305      	movs	r3, #5
 8006056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006058:	230a      	movs	r3, #10
 800605a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800605c:	463b      	mov	r3, r7
 800605e:	4619      	mov	r1, r3
 8006060:	4821      	ldr	r0, [pc, #132]	; (80060e8 <MX_ADC2_Init+0x204>)
 8006062:	f003 fe57 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800606c:	f000 fd82 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006070:	2306      	movs	r3, #6
 8006072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006074:	230b      	movs	r3, #11
 8006076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006078:	463b      	mov	r3, r7
 800607a:	4619      	mov	r1, r3
 800607c:	481a      	ldr	r0, [pc, #104]	; (80060e8 <MX_ADC2_Init+0x204>)
 800607e:	f003 fe49 	bl	8009d14 <HAL_ADC_ConfigChannel>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006088:	f000 fd74 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800608c:	2307      	movs	r3, #7
 800608e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006090:	230c      	movs	r3, #12
 8006092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006094:	463b      	mov	r3, r7
 8006096:	4619      	mov	r1, r3
 8006098:	4813      	ldr	r0, [pc, #76]	; (80060e8 <MX_ADC2_Init+0x204>)
 800609a:	f003 fe3b 	bl	8009d14 <HAL_ADC_ConfigChannel>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80060a4:	f000 fd66 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80060a8:	2308      	movs	r3, #8
 80060aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80060ac:	230d      	movs	r3, #13
 80060ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060b0:	463b      	mov	r3, r7
 80060b2:	4619      	mov	r1, r3
 80060b4:	480c      	ldr	r0, [pc, #48]	; (80060e8 <MX_ADC2_Init+0x204>)
 80060b6:	f003 fe2d 	bl	8009d14 <HAL_ADC_ConfigChannel>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80060c0:	f000 fd58 	bl	8006b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80060c4:	2309      	movs	r3, #9
 80060c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80060c8:	230e      	movs	r3, #14
 80060ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060cc:	463b      	mov	r3, r7
 80060ce:	4619      	mov	r1, r3
 80060d0:	4805      	ldr	r0, [pc, #20]	; (80060e8 <MX_ADC2_Init+0x204>)
 80060d2:	f003 fe1f 	bl	8009d14 <HAL_ADC_ConfigChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80060dc:	f000 fd4a 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	200437e8 	.word	0x200437e8
 80060ec:	40012100 	.word	0x40012100
 80060f0:	0f000001 	.word	0x0f000001

080060f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <MX_I2C1_Init+0x50>)
 80060fa:	4a13      	ldr	r2, [pc, #76]	; (8006148 <MX_I2C1_Init+0x54>)
 80060fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <MX_I2C1_Init+0x50>)
 8006100:	4a12      	ldr	r2, [pc, #72]	; (800614c <MX_I2C1_Init+0x58>)
 8006102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <MX_I2C1_Init+0x50>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800610a:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <MX_I2C1_Init+0x50>)
 800610c:	2200      	movs	r2, #0
 800610e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <MX_I2C1_Init+0x50>)
 8006112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <MX_I2C1_Init+0x50>)
 800611a:	2200      	movs	r2, #0
 800611c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <MX_I2C1_Init+0x50>)
 8006120:	2200      	movs	r2, #0
 8006122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <MX_I2C1_Init+0x50>)
 8006126:	2200      	movs	r2, #0
 8006128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <MX_I2C1_Init+0x50>)
 800612c:	2280      	movs	r2, #128	; 0x80
 800612e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006130:	4804      	ldr	r0, [pc, #16]	; (8006144 <MX_I2C1_Init+0x50>)
 8006132:	f004 ff29 	bl	800af88 <HAL_I2C_Init>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800613c:	f000 fd1a 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006140:	bf00      	nop
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20043830 	.word	0x20043830
 8006148:	40005400 	.word	0x40005400
 800614c:	000186a0 	.word	0x000186a0

08006150 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <MX_I2C2_Init+0x50>)
 8006156:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <MX_I2C2_Init+0x54>)
 8006158:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <MX_I2C2_Init+0x50>)
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <MX_I2C2_Init+0x58>)
 800615e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <MX_I2C2_Init+0x50>)
 8006162:	2200      	movs	r2, #0
 8006164:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <MX_I2C2_Init+0x50>)
 8006168:	2200      	movs	r2, #0
 800616a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <MX_I2C2_Init+0x50>)
 800616e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006172:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <MX_I2C2_Init+0x50>)
 8006176:	2200      	movs	r2, #0
 8006178:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <MX_I2C2_Init+0x50>)
 800617c:	2200      	movs	r2, #0
 800617e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <MX_I2C2_Init+0x50>)
 8006182:	2200      	movs	r2, #0
 8006184:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <MX_I2C2_Init+0x50>)
 8006188:	2280      	movs	r2, #128	; 0x80
 800618a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800618c:	4804      	ldr	r0, [pc, #16]	; (80061a0 <MX_I2C2_Init+0x50>)
 800618e:	f004 fefb 	bl	800af88 <HAL_I2C_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006198:	f000 fcec 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200438c4 	.word	0x200438c4
 80061a4:	40005800 	.word	0x40005800
 80061a8:	000186a0 	.word	0x000186a0

080061ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061b2:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <MX_SDIO_SD_Init+0x3c>)
 80061b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <MX_SDIO_SD_Init+0x38>)
 80061d6:	2202      	movs	r2, #2
 80061d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	20043ac4 	.word	0x20043ac4
 80061e8:	40012c00 	.word	0x40012c00

080061ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80061f0:	4b17      	ldr	r3, [pc, #92]	; (8006250 <MX_SPI2_Init+0x64>)
 80061f2:	4a18      	ldr	r2, [pc, #96]	; (8006254 <MX_SPI2_Init+0x68>)
 80061f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80061f6:	4b16      	ldr	r3, [pc, #88]	; (8006250 <MX_SPI2_Init+0x64>)
 80061f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <MX_SPI2_Init+0x64>)
 8006200:	2200      	movs	r2, #0
 8006202:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <MX_SPI2_Init+0x64>)
 8006206:	2200      	movs	r2, #0
 8006208:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <MX_SPI2_Init+0x64>)
 800620c:	2202      	movs	r2, #2
 800620e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <MX_SPI2_Init+0x64>)
 8006212:	2201      	movs	r2, #1
 8006214:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006216:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <MX_SPI2_Init+0x64>)
 8006218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <MX_SPI2_Init+0x64>)
 8006220:	2228      	movs	r2, #40	; 0x28
 8006222:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <MX_SPI2_Init+0x64>)
 8006226:	2200      	movs	r2, #0
 8006228:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <MX_SPI2_Init+0x64>)
 800622c:	2200      	movs	r2, #0
 800622e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <MX_SPI2_Init+0x64>)
 8006232:	2200      	movs	r2, #0
 8006234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <MX_SPI2_Init+0x64>)
 8006238:	220a      	movs	r2, #10
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800623c:	4804      	ldr	r0, [pc, #16]	; (8006250 <MX_SPI2_Init+0x64>)
 800623e:	f007 ffd5 	bl	800e1ec <HAL_SPI_Init>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006248:	f000 fc94 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800624c:	bf00      	nop
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20043710 	.word	0x20043710
 8006254:	40003800 	.word	0x40003800

08006258 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b09a      	sub	sp, #104	; 0x68
 800625c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800625e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f00f fb5d 	bl	8015926 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800626c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006276:	f107 0320 	add.w	r3, r7, #32
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	60da      	str	r2, [r3, #12]
 8006284:	611a      	str	r2, [r3, #16]
 8006286:	615a      	str	r2, [r3, #20]
 8006288:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800628a:	463b      	mov	r3, r7
 800628c:	2220      	movs	r2, #32
 800628e:	2100      	movs	r1, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f00f fb48 	bl	8015926 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006296:	4b42      	ldr	r3, [pc, #264]	; (80063a0 <MX_TIM1_Init+0x148>)
 8006298:	4a42      	ldr	r2, [pc, #264]	; (80063a4 <MX_TIM1_Init+0x14c>)
 800629a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800629c:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <MX_TIM1_Init+0x148>)
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a2:	4b3f      	ldr	r3, [pc, #252]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80062a8:	4b3d      	ldr	r3, [pc, #244]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b0:	4b3b      	ldr	r3, [pc, #236]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80062b6:	4b3a      	ldr	r3, [pc, #232]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062bc:	4b38      	ldr	r3, [pc, #224]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80062c2:	4837      	ldr	r0, [pc, #220]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062c4:	f008 fd35 	bl	800ed32 <HAL_TIM_PWM_Init>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80062ce:	f000 fc51 	bl	8006b74 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80062d2:	2303      	movs	r3, #3
 80062d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80062d6:	2300      	movs	r3, #0
 80062d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80062da:	2301      	movs	r3, #1
 80062dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80062de:	2300      	movs	r3, #0
 80062e0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80062e6:	2300      	movs	r3, #0
 80062e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80062ea:	2301      	movs	r3, #1
 80062ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80062ee:	2300      	movs	r3, #0
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80062f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062fa:	4619      	mov	r1, r3
 80062fc:	4828      	ldr	r0, [pc, #160]	; (80063a0 <MX_TIM1_Init+0x148>)
 80062fe:	f008 fd81 	bl	800ee04 <HAL_TIM_Encoder_Init>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006308:	f000 fc34 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006310:	2300      	movs	r3, #0
 8006312:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006318:	4619      	mov	r1, r3
 800631a:	4821      	ldr	r0, [pc, #132]	; (80063a0 <MX_TIM1_Init+0x148>)
 800631c:	f009 faa8 	bl	800f870 <HAL_TIMEx_MasterConfigSynchronization>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006326:	f000 fc25 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800632a:	2360      	movs	r3, #96	; 0x60
 800632c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006332:	2300      	movs	r3, #0
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006336:	2300      	movs	r3, #0
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800633a:	2300      	movs	r3, #0
 800633c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006342:	2300      	movs	r3, #0
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006346:	f107 0320 	add.w	r3, r7, #32
 800634a:	2208      	movs	r2, #8
 800634c:	4619      	mov	r1, r3
 800634e:	4814      	ldr	r0, [pc, #80]	; (80063a0 <MX_TIM1_Init+0x148>)
 8006350:	f008 ff2a 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800635a:	f000 fc0b 	bl	8006b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800635e:	2300      	movs	r3, #0
 8006360:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800637c:	463b      	mov	r3, r7
 800637e:	4619      	mov	r1, r3
 8006380:	4807      	ldr	r0, [pc, #28]	; (80063a0 <MX_TIM1_Init+0x148>)
 8006382:	f009 faf1 	bl	800f968 <HAL_TIMEx_ConfigBreakDeadTime>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800638c:	f000 fbf2 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006390:	4803      	ldr	r0, [pc, #12]	; (80063a0 <MX_TIM1_Init+0x148>)
 8006392:	f000 ffdf 	bl	8007354 <HAL_TIM_MspPostInit>

}
 8006396:	bf00      	nop
 8006398:	3768      	adds	r7, #104	; 0x68
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20043a84 	.word	0x20043a84
 80063a4:	40010000 	.word	0x40010000

080063a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063ae:	f107 0320 	add.w	r3, r7, #32
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	609a      	str	r2, [r3, #8]
 80063c2:	60da      	str	r2, [r3, #12]
 80063c4:	611a      	str	r2, [r3, #16]
 80063c6:	615a      	str	r2, [r3, #20]
 80063c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80063ca:	4b27      	ldr	r3, [pc, #156]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063cc:	4a27      	ldr	r2, [pc, #156]	; (800646c <MX_TIM3_Init+0xc4>)
 80063ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 80063d0:	4b25      	ldr	r3, [pc, #148]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063d2:	2259      	movs	r2, #89	; 0x59
 80063d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063d8:	2200      	movs	r2, #0
 80063da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80063dc:	4b22      	ldr	r3, [pc, #136]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80063e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063e4:	4b20      	ldr	r3, [pc, #128]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063ea:	4b1f      	ldr	r3, [pc, #124]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80063f0:	481d      	ldr	r0, [pc, #116]	; (8006468 <MX_TIM3_Init+0xc0>)
 80063f2:	f008 fc9e 	bl	800ed32 <HAL_TIM_PWM_Init>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80063fc:	f000 fbba 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006400:	2300      	movs	r3, #0
 8006402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006404:	2300      	movs	r3, #0
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006408:	f107 0320 	add.w	r3, r7, #32
 800640c:	4619      	mov	r1, r3
 800640e:	4816      	ldr	r0, [pc, #88]	; (8006468 <MX_TIM3_Init+0xc0>)
 8006410:	f009 fa2e 	bl	800f870 <HAL_TIMEx_MasterConfigSynchronization>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800641a:	f000 fbab 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800641e:	2360      	movs	r3, #96	; 0x60
 8006420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	2200      	movs	r2, #0
 8006432:	4619      	mov	r1, r3
 8006434:	480c      	ldr	r0, [pc, #48]	; (8006468 <MX_TIM3_Init+0xc0>)
 8006436:	f008 feb7 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006440:	f000 fb98 	bl	8006b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	2204      	movs	r2, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4807      	ldr	r0, [pc, #28]	; (8006468 <MX_TIM3_Init+0xc0>)
 800644c:	f008 feac 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006456:	f000 fb8d 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800645a:	4803      	ldr	r0, [pc, #12]	; (8006468 <MX_TIM3_Init+0xc0>)
 800645c:	f000 ff7a 	bl	8007354 <HAL_TIM_MspPostInit>

}
 8006460:	bf00      	nop
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	2004391c 	.word	0x2004391c
 800646c:	40000400 	.word	0x40000400

08006470 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006476:	f107 0320 	add.w	r3, r7, #32
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	609a      	str	r2, [r3, #8]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	611a      	str	r2, [r3, #16]
 800648e:	615a      	str	r2, [r3, #20]
 8006490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006492:	4b27      	ldr	r3, [pc, #156]	; (8006530 <MX_TIM4_Init+0xc0>)
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <MX_TIM4_Init+0xc4>)
 8006496:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <MX_TIM4_Init+0xc0>)
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800649e:	4b24      	ldr	r3, [pc, #144]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80064a4:	4b22      	ldr	r3, [pc, #136]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064a6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80064aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064ac:	4b20      	ldr	r3, [pc, #128]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064b2:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80064b8:	481d      	ldr	r0, [pc, #116]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064ba:	f008 fc3a 	bl	800ed32 <HAL_TIM_PWM_Init>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80064c4:	f000 fb56 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064c8:	2300      	movs	r3, #0
 80064ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80064d0:	f107 0320 	add.w	r3, r7, #32
 80064d4:	4619      	mov	r1, r3
 80064d6:	4816      	ldr	r0, [pc, #88]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064d8:	f009 f9ca 	bl	800f870 <HAL_TIMEx_MasterConfigSynchronization>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80064e2:	f000 fb47 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064e6:	2360      	movs	r3, #96	; 0x60
 80064e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	2208      	movs	r2, #8
 80064fa:	4619      	mov	r1, r3
 80064fc:	480c      	ldr	r0, [pc, #48]	; (8006530 <MX_TIM4_Init+0xc0>)
 80064fe:	f008 fe53 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006508:	f000 fb34 	bl	8006b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	220c      	movs	r2, #12
 8006510:	4619      	mov	r1, r3
 8006512:	4807      	ldr	r0, [pc, #28]	; (8006530 <MX_TIM4_Init+0xc0>)
 8006514:	f008 fe48 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800651e:	f000 fb29 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006522:	4803      	ldr	r0, [pc, #12]	; (8006530 <MX_TIM4_Init+0xc0>)
 8006524:	f000 ff16 	bl	8007354 <HAL_TIM_MspPostInit>

}
 8006528:	bf00      	nop
 800652a:	3728      	adds	r7, #40	; 0x28
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	200437a8 	.word	0x200437a8
 8006534:	40000800 	.word	0x40000800

08006538 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800653e:	463b      	mov	r3, r7
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006546:	4b15      	ldr	r3, [pc, #84]	; (800659c <MX_TIM6_Init+0x64>)
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <MX_TIM6_Init+0x68>)
 800654a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800654c:	4b13      	ldr	r3, [pc, #76]	; (800659c <MX_TIM6_Init+0x64>)
 800654e:	2259      	movs	r2, #89	; 0x59
 8006550:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <MX_TIM6_Init+0x64>)
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006558:	4b10      	ldr	r3, [pc, #64]	; (800659c <MX_TIM6_Init+0x64>)
 800655a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800655e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <MX_TIM6_Init+0x64>)
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006566:	480d      	ldr	r0, [pc, #52]	; (800659c <MX_TIM6_Init+0x64>)
 8006568:	f008 fb94 	bl	800ec94 <HAL_TIM_Base_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006572:	f000 faff 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800657a:	2300      	movs	r3, #0
 800657c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800657e:	463b      	mov	r3, r7
 8006580:	4619      	mov	r1, r3
 8006582:	4806      	ldr	r0, [pc, #24]	; (800659c <MX_TIM6_Init+0x64>)
 8006584:	f009 f974 	bl	800f870 <HAL_TIMEx_MasterConfigSynchronization>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800658e:	f000 faf1 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20043a44 	.word	0x20043a44
 80065a0:	40001000 	.word	0x40001000

080065a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065aa:	463b      	mov	r3, r7
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80065b2:	4b14      	ldr	r3, [pc, #80]	; (8006604 <MX_TIM7_Init+0x60>)
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <MX_TIM7_Init+0x64>)
 80065b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <MX_TIM7_Init+0x60>)
 80065ba:	22b3      	movs	r2, #179	; 0xb3
 80065bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065be:	4b11      	ldr	r3, [pc, #68]	; (8006604 <MX_TIM7_Init+0x60>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <MX_TIM7_Init+0x60>)
 80065c6:	2231      	movs	r2, #49	; 0x31
 80065c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80065ca:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <MX_TIM7_Init+0x60>)
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80065d0:	480c      	ldr	r0, [pc, #48]	; (8006604 <MX_TIM7_Init+0x60>)
 80065d2:	f008 fb5f 	bl	800ec94 <HAL_TIM_Base_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80065dc:	f000 faca 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065e0:	2300      	movs	r3, #0
 80065e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80065e8:	463b      	mov	r3, r7
 80065ea:	4619      	mov	r1, r3
 80065ec:	4805      	ldr	r0, [pc, #20]	; (8006604 <MX_TIM7_Init+0x60>)
 80065ee:	f009 f93f 	bl	800f870 <HAL_TIMEx_MasterConfigSynchronization>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80065f8:	f000 fabc 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20043be8 	.word	0x20043be8
 8006608:	40001400 	.word	0x40001400

0800660c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006612:	f107 030c 	add.w	r3, r7, #12
 8006616:	2224      	movs	r2, #36	; 0x24
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f00f f983 	bl	8015926 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006620:	1d3b      	adds	r3, r7, #4
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006628:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <MX_TIM8_Init+0xa8>)
 800662a:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <MX_TIM8_Init+0xac>)
 800662c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800662e:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <MX_TIM8_Init+0xa8>)
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <MX_TIM8_Init+0xa8>)
 8006636:	2210      	movs	r2, #16
 8006638:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800663a:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <MX_TIM8_Init+0xa8>)
 800663c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006640:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <MX_TIM8_Init+0xa8>)
 8006644:	2200      	movs	r2, #0
 8006646:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <MX_TIM8_Init+0xa8>)
 800664a:	2200      	movs	r2, #0
 800664c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <MX_TIM8_Init+0xa8>)
 8006650:	2200      	movs	r2, #0
 8006652:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006654:	2303      	movs	r3, #3
 8006656:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006668:	2300      	movs	r3, #0
 800666a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800666c:	2301      	movs	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006670:	2300      	movs	r3, #0
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	4619      	mov	r1, r3
 800667e:	480d      	ldr	r0, [pc, #52]	; (80066b4 <MX_TIM8_Init+0xa8>)
 8006680:	f008 fbc0 	bl	800ee04 <HAL_TIM_Encoder_Init>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800668a:	f000 fa73 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800668e:	2300      	movs	r3, #0
 8006690:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4806      	ldr	r0, [pc, #24]	; (80066b4 <MX_TIM8_Init+0xa8>)
 800669c:	f009 f8e8 	bl	800f870 <HAL_TIMEx_MasterConfigSynchronization>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80066a6:	f000 fa65 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80066aa:	bf00      	nop
 80066ac:	3730      	adds	r7, #48	; 0x30
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20043768 	.word	0x20043768
 80066b8:	40010400 	.word	0x40010400

080066bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	609a      	str	r2, [r3, #8]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	611a      	str	r2, [r3, #16]
 80066d0:	615a      	str	r2, [r3, #20]
 80066d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80066d4:	4b1e      	ldr	r3, [pc, #120]	; (8006750 <MX_TIM10_Init+0x94>)
 80066d6:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <MX_TIM10_Init+0x98>)
 80066d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 89;
 80066da:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <MX_TIM10_Init+0x94>)
 80066dc:	2259      	movs	r2, #89	; 0x59
 80066de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066e0:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <MX_TIM10_Init+0x94>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1999;
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <MX_TIM10_Init+0x94>)
 80066e8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80066ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066ee:	4b18      	ldr	r3, [pc, #96]	; (8006750 <MX_TIM10_Init+0x94>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <MX_TIM10_Init+0x94>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80066fa:	4815      	ldr	r0, [pc, #84]	; (8006750 <MX_TIM10_Init+0x94>)
 80066fc:	f008 faca 	bl	800ec94 <HAL_TIM_Base_Init>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006706:	f000 fa35 	bl	8006b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800670a:	4811      	ldr	r0, [pc, #68]	; (8006750 <MX_TIM10_Init+0x94>)
 800670c:	f008 fb11 	bl	800ed32 <HAL_TIM_PWM_Init>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006716:	f000 fa2d 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800671a:	2360      	movs	r3, #96	; 0x60
 800671c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	2200      	movs	r2, #0
 800672e:	4619      	mov	r1, r3
 8006730:	4807      	ldr	r0, [pc, #28]	; (8006750 <MX_TIM10_Init+0x94>)
 8006732:	f008 fd39 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800673c:	f000 fa1a 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006740:	4803      	ldr	r0, [pc, #12]	; (8006750 <MX_TIM10_Init+0x94>)
 8006742:	f000 fe07 	bl	8007354 <HAL_TIM_MspPostInit>

}
 8006746:	bf00      	nop
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20043884 	.word	0x20043884
 8006754:	40014400 	.word	0x40014400

08006758 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800675e:	1d3b      	adds	r3, r7, #4
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	611a      	str	r2, [r3, #16]
 800676c:	615a      	str	r2, [r3, #20]
 800676e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <MX_TIM11_Init+0x94>)
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <MX_TIM11_Init+0x98>)
 8006774:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 89;
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <MX_TIM11_Init+0x94>)
 8006778:	2259      	movs	r2, #89	; 0x59
 800677a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <MX_TIM11_Init+0x94>)
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1999;
 8006782:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <MX_TIM11_Init+0x94>)
 8006784:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8006788:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800678a:	4b18      	ldr	r3, [pc, #96]	; (80067ec <MX_TIM11_Init+0x94>)
 800678c:	2200      	movs	r2, #0
 800678e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006790:	4b16      	ldr	r3, [pc, #88]	; (80067ec <MX_TIM11_Init+0x94>)
 8006792:	2200      	movs	r2, #0
 8006794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006796:	4815      	ldr	r0, [pc, #84]	; (80067ec <MX_TIM11_Init+0x94>)
 8006798:	f008 fa7c 	bl	800ec94 <HAL_TIM_Base_Init>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80067a2:	f000 f9e7 	bl	8006b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80067a6:	4811      	ldr	r0, [pc, #68]	; (80067ec <MX_TIM11_Init+0x94>)
 80067a8:	f008 fac3 	bl	800ed32 <HAL_TIM_PWM_Init>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80067b2:	f000 f9df 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067b6:	2360      	movs	r3, #96	; 0x60
 80067b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	2200      	movs	r2, #0
 80067ca:	4619      	mov	r1, r3
 80067cc:	4807      	ldr	r0, [pc, #28]	; (80067ec <MX_TIM11_Init+0x94>)
 80067ce:	f008 fceb 	bl	800f1a8 <HAL_TIM_PWM_ConfigChannel>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80067d8:	f000 f9cc 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80067dc:	4803      	ldr	r0, [pc, #12]	; (80067ec <MX_TIM11_Init+0x94>)
 80067de:	f000 fdb9 	bl	8007354 <HAL_TIM_MspPostInit>

}
 80067e2:	bf00      	nop
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200439a4 	.word	0x200439a4
 80067f0:	40014800 	.word	0x40014800

080067f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <MX_TIM13_Init+0x40>)
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <MX_TIM13_Init+0x44>)
 80067fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <MX_TIM13_Init+0x40>)
 8006800:	2259      	movs	r2, #89	; 0x59
 8006802:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <MX_TIM13_Init+0x40>)
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <MX_TIM13_Init+0x40>)
 800680c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006810:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <MX_TIM13_Init+0x40>)
 8006814:	2200      	movs	r2, #0
 8006816:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <MX_TIM13_Init+0x40>)
 800681a:	2280      	movs	r2, #128	; 0x80
 800681c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800681e:	4805      	ldr	r0, [pc, #20]	; (8006834 <MX_TIM13_Init+0x40>)
 8006820:	f008 fa38 	bl	800ec94 <HAL_TIM_Base_Init>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800682a:	f000 f9a3 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800682e:	bf00      	nop
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20043964 	.word	0x20043964
 8006838:	40001c00 	.word	0x40001c00

0800683c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006842:	4a12      	ldr	r2, [pc, #72]	; (800688c <MX_USART2_UART_Init+0x50>)
 8006844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006846:	4b10      	ldr	r3, [pc, #64]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800684c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006856:	2200      	movs	r2, #0
 8006858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 800685c:	2200      	movs	r2, #0
 800685e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006862:	220c      	movs	r2, #12
 8006864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006866:	4b08      	ldr	r3, [pc, #32]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006868:	2200      	movs	r2, #0
 800686a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 800686e:	2200      	movs	r2, #0
 8006870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006872:	4805      	ldr	r0, [pc, #20]	; (8006888 <MX_USART2_UART_Init+0x4c>)
 8006874:	f009 f8de 	bl	800fa34 <HAL_UART_Init>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800687e:	f000 f979 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006882:	bf00      	nop
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20043b48 	.word	0x20043b48
 800688c:	40004400 	.word	0x40004400

08006890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <MX_DMA_Init+0x5c>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	4a13      	ldr	r2, [pc, #76]	; (80068ec <MX_DMA_Init+0x5c>)
 80068a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068a4:	6313      	str	r3, [r2, #48]	; 0x30
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <MX_DMA_Init+0x5c>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ae:	607b      	str	r3, [r7, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2100      	movs	r1, #0
 80068b6:	203a      	movs	r0, #58	; 0x3a
 80068b8:	f003 fdb7 	bl	800a42a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80068bc:	203a      	movs	r0, #58	; 0x3a
 80068be:	f003 fdd0 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	203b      	movs	r0, #59	; 0x3b
 80068c8:	f003 fdaf 	bl	800a42a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80068cc:	203b      	movs	r0, #59	; 0x3b
 80068ce:	f003 fdc8 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80068d2:	2200      	movs	r2, #0
 80068d4:	2100      	movs	r1, #0
 80068d6:	2045      	movs	r0, #69	; 0x45
 80068d8:	f003 fda7 	bl	800a42a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80068dc:	2045      	movs	r0, #69	; 0x45
 80068de:	f003 fdc0 	bl	800a462 <HAL_NVIC_EnableIRQ>

}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800

080068f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08c      	sub	sp, #48	; 0x30
 80068f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f6:	f107 031c 	add.w	r3, r7, #28
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	609a      	str	r2, [r3, #8]
 8006902:	60da      	str	r2, [r3, #12]
 8006904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	4b94      	ldr	r3, [pc, #592]	; (8006b5c <MX_GPIO_Init+0x26c>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	4a93      	ldr	r2, [pc, #588]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006910:	f043 0310 	orr.w	r3, r3, #16
 8006914:	6313      	str	r3, [r2, #48]	; 0x30
 8006916:	4b91      	ldr	r3, [pc, #580]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	4a8c      	ldr	r2, [pc, #560]	; (8006b5c <MX_GPIO_Init+0x26c>)
 800692c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006930:	6313      	str	r3, [r2, #48]	; 0x30
 8006932:	4b8a      	ldr	r3, [pc, #552]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	4b86      	ldr	r3, [pc, #536]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	4a85      	ldr	r2, [pc, #532]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006948:	f043 0304 	orr.w	r3, r3, #4
 800694c:	6313      	str	r3, [r2, #48]	; 0x30
 800694e:	4b83      	ldr	r3, [pc, #524]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	4b7f      	ldr	r3, [pc, #508]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	4a7e      	ldr	r2, [pc, #504]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006964:	f043 0301 	orr.w	r3, r3, #1
 8006968:	6313      	str	r3, [r2, #48]	; 0x30
 800696a:	4b7c      	ldr	r3, [pc, #496]	; (8006b5c <MX_GPIO_Init+0x26c>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	4b78      	ldr	r3, [pc, #480]	; (8006b5c <MX_GPIO_Init+0x26c>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	4a77      	ldr	r2, [pc, #476]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006980:	f043 0302 	orr.w	r3, r3, #2
 8006984:	6313      	str	r3, [r2, #48]	; 0x30
 8006986:	4b75      	ldr	r3, [pc, #468]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]
 8006996:	4b71      	ldr	r3, [pc, #452]	; (8006b5c <MX_GPIO_Init+0x26c>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	4a70      	ldr	r2, [pc, #448]	; (8006b5c <MX_GPIO_Init+0x26c>)
 800699c:	f043 0308 	orr.w	r3, r3, #8
 80069a0:	6313      	str	r3, [r2, #48]	; 0x30
 80069a2:	4b6e      	ldr	r3, [pc, #440]	; (8006b5c <MX_GPIO_Init+0x26c>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	607b      	str	r3, [r7, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80069ae:	2200      	movs	r2, #0
 80069b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069b4:	486a      	ldr	r0, [pc, #424]	; (8006b60 <MX_GPIO_Init+0x270>)
 80069b6:	f004 facd 	bl	800af54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80069ba:	2200      	movs	r2, #0
 80069bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069c0:	4868      	ldr	r0, [pc, #416]	; (8006b64 <MX_GPIO_Init+0x274>)
 80069c2:	f004 fac7 	bl	800af54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80069c6:	2200      	movs	r2, #0
 80069c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069cc:	4866      	ldr	r0, [pc, #408]	; (8006b68 <MX_GPIO_Init+0x278>)
 80069ce:	f004 fac1 	bl	800af54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80069d2:	2200      	movs	r2, #0
 80069d4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80069d8:	4864      	ldr	r0, [pc, #400]	; (8006b6c <MX_GPIO_Init+0x27c>)
 80069da:	f004 fabb 	bl	800af54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80069de:	2304      	movs	r3, #4
 80069e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069e2:	2300      	movs	r3, #0
 80069e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069ea:	f107 031c 	add.w	r3, r7, #28
 80069ee:	4619      	mov	r1, r3
 80069f0:	485b      	ldr	r0, [pc, #364]	; (8006b60 <MX_GPIO_Init+0x270>)
 80069f2:	f004 f8ed 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80069f6:	230f      	movs	r3, #15
 80069f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069fa:	2303      	movs	r3, #3
 80069fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a02:	f107 031c 	add.w	r3, r7, #28
 8006a06:	4619      	mov	r1, r3
 8006a08:	4859      	ldr	r0, [pc, #356]	; (8006b70 <MX_GPIO_Init+0x280>)
 8006a0a:	f004 f8e1 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006a0e:	23e1      	movs	r3, #225	; 0xe1
 8006a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a12:	2303      	movs	r3, #3
 8006a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a1a:	f107 031c 	add.w	r3, r7, #28
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4852      	ldr	r0, [pc, #328]	; (8006b6c <MX_GPIO_Init+0x27c>)
 8006a22:	f004 f8d5 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a26:	2303      	movs	r3, #3
 8006a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a32:	f107 031c 	add.w	r3, r7, #28
 8006a36:	4619      	mov	r1, r3
 8006a38:	484a      	ldr	r0, [pc, #296]	; (8006b64 <MX_GPIO_Init+0x274>)
 8006a3a:	f004 f8c9 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a3e:	2304      	movs	r3, #4
 8006a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a46:	2301      	movs	r3, #1
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a4a:	f107 031c 	add.w	r3, r7, #28
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4844      	ldr	r0, [pc, #272]	; (8006b64 <MX_GPIO_Init+0x274>)
 8006a52:	f004 f8bd 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006a56:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a60:	2301      	movs	r3, #1
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a64:	f107 031c 	add.w	r3, r7, #28
 8006a68:	4619      	mov	r1, r3
 8006a6a:	483d      	ldr	r0, [pc, #244]	; (8006b60 <MX_GPIO_Init+0x270>)
 8006a6c:	f004 f8b0 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a76:	2301      	movs	r3, #1
 8006a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a82:	f107 031c 	add.w	r3, r7, #28
 8006a86:	4619      	mov	r1, r3
 8006a88:	4835      	ldr	r0, [pc, #212]	; (8006b60 <MX_GPIO_Init+0x270>)
 8006a8a:	f004 f8a1 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a94:	2301      	movs	r3, #1
 8006a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aa0:	f107 031c 	add.w	r3, r7, #28
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	482f      	ldr	r0, [pc, #188]	; (8006b64 <MX_GPIO_Init+0x274>)
 8006aa8:	f004 f892 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006aba:	f107 031c 	add.w	r3, r7, #28
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4829      	ldr	r0, [pc, #164]	; (8006b68 <MX_GPIO_Init+0x278>)
 8006ac2:	f004 f885 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006acc:	2301      	movs	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ad8:	f107 031c 	add.w	r3, r7, #28
 8006adc:	4619      	mov	r1, r3
 8006ade:	4822      	ldr	r0, [pc, #136]	; (8006b68 <MX_GPIO_Init+0x278>)
 8006ae0:	f004 f876 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aea:	2301      	movs	r3, #1
 8006aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006aee:	2301      	movs	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006af6:	f107 031c 	add.w	r3, r7, #28
 8006afa:	4619      	mov	r1, r3
 8006afc:	481a      	ldr	r0, [pc, #104]	; (8006b68 <MX_GPIO_Init+0x278>)
 8006afe:	f004 f867 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b02:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006b06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b14:	f107 031c 	add.w	r3, r7, #28
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4814      	ldr	r0, [pc, #80]	; (8006b6c <MX_GPIO_Init+0x27c>)
 8006b1c:	f004 f858 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b26:	2300      	movs	r3, #0
 8006b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b2e:	f107 031c 	add.w	r3, r7, #28
 8006b32:	4619      	mov	r1, r3
 8006b34:	480d      	ldr	r0, [pc, #52]	; (8006b6c <MX_GPIO_Init+0x27c>)
 8006b36:	f004 f84b 	bl	800abd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006b3a:	239b      	movs	r3, #155	; 0x9b
 8006b3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b42:	2301      	movs	r3, #1
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b46:	f107 031c 	add.w	r3, r7, #28
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4806      	ldr	r0, [pc, #24]	; (8006b68 <MX_GPIO_Init+0x278>)
 8006b4e:	f004 f83f 	bl	800abd0 <HAL_GPIO_Init>

}
 8006b52:	bf00      	nop
 8006b54:	3730      	adds	r7, #48	; 0x30
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40020400 	.word	0x40020400
 8006b68:	40020c00 	.word	0x40020c00
 8006b6c:	40020000 	.word	0x40020000
 8006b70:	40020800 	.word	0x40020800

08006b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b7a:	e7fe      	b.n	8006b7a <Error_Handler+0x6>

08006b7c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <HAL_MspInit+0x4c>)
 8006b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <HAL_MspInit+0x4c>)
 8006b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <HAL_MspInit+0x4c>)
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006baa:	607b      	str	r3, [r7, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bae:	2300      	movs	r3, #0
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <HAL_MspInit+0x4c>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <HAL_MspInit+0x4c>)
 8006bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_MspInit+0x4c>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800

08006bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08c      	sub	sp, #48	; 0x30
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be4:	f107 031c 	add.w	r3, r7, #28
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a4a      	ldr	r2, [pc, #296]	; (8006d24 <HAL_ADC_MspInit+0x148>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	f040 808e 	bne.w	8006d1c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	4b48      	ldr	r3, [pc, #288]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	4a47      	ldr	r2, [pc, #284]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006c10:	4b45      	ldr	r3, [pc, #276]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	4b41      	ldr	r3, [pc, #260]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c24:	4a40      	ldr	r2, [pc, #256]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c26:	f043 0304 	orr.w	r3, r3, #4
 8006c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2c:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c38:	2300      	movs	r3, #0
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	4b3a      	ldr	r3, [pc, #232]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	4a39      	ldr	r2, [pc, #228]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	6313      	str	r3, [r2, #48]	; 0x30
 8006c48:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	4b33      	ldr	r3, [pc, #204]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	4a32      	ldr	r2, [pc, #200]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c5e:	f043 0302 	orr.w	r3, r3, #2
 8006c62:	6313      	str	r3, [r2, #48]	; 0x30
 8006c64:	4b30      	ldr	r3, [pc, #192]	; (8006d28 <HAL_ADC_MspInit+0x14c>)
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006c70:	230f      	movs	r3, #15
 8006c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c74:	2303      	movs	r3, #3
 8006c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c7c:	f107 031c 	add.w	r3, r7, #28
 8006c80:	4619      	mov	r1, r3
 8006c82:	482a      	ldr	r0, [pc, #168]	; (8006d2c <HAL_ADC_MspInit+0x150>)
 8006c84:	f003 ffa4 	bl	800abd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006c88:	23ff      	movs	r3, #255	; 0xff
 8006c8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c94:	f107 031c 	add.w	r3, r7, #28
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4825      	ldr	r0, [pc, #148]	; (8006d30 <HAL_ADC_MspInit+0x154>)
 8006c9c:	f003 ff98 	bl	800abd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cac:	f107 031c 	add.w	r3, r7, #28
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4820      	ldr	r0, [pc, #128]	; (8006d34 <HAL_ADC_MspInit+0x158>)
 8006cb4:	f003 ff8c 	bl	800abd0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cba:	4a20      	ldr	r2, [pc, #128]	; (8006d3c <HAL_ADC_MspInit+0x160>)
 8006cbc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cc4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cc6:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cd8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006cda:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006ce2:	4b15      	ldr	r3, [pc, #84]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ce8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006cea:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006cf2:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cf8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006d00:	480d      	ldr	r0, [pc, #52]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006d02:	f003 fbc9 	bl	800a498 <HAL_DMA_Init>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006d0c:	f7ff ff32 	bl	8006b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
 8006d16:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <HAL_ADC_MspInit+0x15c>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006d1c:	bf00      	nop
 8006d1e:	3730      	adds	r7, #48	; 0x30
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40012100 	.word	0x40012100
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	40020800 	.word	0x40020800
 8006d30:	40020000 	.word	0x40020000
 8006d34:	40020400 	.word	0x40020400
 8006d38:	20043b88 	.word	0x20043b88
 8006d3c:	40026440 	.word	0x40026440

08006d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08c      	sub	sp, #48	; 0x30
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d48:	f107 031c 	add.w	r3, r7, #28
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	60da      	str	r2, [r3, #12]
 8006d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a32      	ldr	r2, [pc, #200]	; (8006e28 <HAL_I2C_MspInit+0xe8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d12c      	bne.n	8006dbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	4a30      	ldr	r2, [pc, #192]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	6313      	str	r3, [r2, #48]	; 0x30
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d7e:	23c0      	movs	r3, #192	; 0xc0
 8006d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d82:	2312      	movs	r3, #18
 8006d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d86:	2301      	movs	r3, #1
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006d8e:	2304      	movs	r3, #4
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d92:	f107 031c 	add.w	r3, r7, #28
 8006d96:	4619      	mov	r1, r3
 8006d98:	4825      	ldr	r0, [pc, #148]	; (8006e30 <HAL_I2C_MspInit+0xf0>)
 8006d9a:	f003 ff19 	bl	800abd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	4a21      	ldr	r2, [pc, #132]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dac:	6413      	str	r3, [r2, #64]	; 0x40
 8006dae:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006dba:	e031      	b.n	8006e20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1c      	ldr	r2, [pc, #112]	; (8006e34 <HAL_I2C_MspInit+0xf4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d12c      	bne.n	8006e20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dce:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd6:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006de2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006de8:	2312      	movs	r3, #18
 8006dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dec:	2301      	movs	r3, #1
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df0:	2303      	movs	r3, #3
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006df4:	2304      	movs	r3, #4
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006df8:	f107 031c 	add.w	r3, r7, #28
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	480c      	ldr	r0, [pc, #48]	; (8006e30 <HAL_I2C_MspInit+0xf0>)
 8006e00:	f003 fee6 	bl	800abd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	4a07      	ldr	r2, [pc, #28]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e12:	6413      	str	r3, [r2, #64]	; 0x40
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <HAL_I2C_MspInit+0xec>)
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	bf00      	nop
 8006e22:	3730      	adds	r7, #48	; 0x30
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40005400 	.word	0x40005400
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	40020400 	.word	0x40020400
 8006e34:	40005800 	.word	0x40005800

08006e38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	; 0x28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	609a      	str	r2, [r3, #8]
 8006e4c:	60da      	str	r2, [r3, #12]
 8006e4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a69      	ldr	r2, [pc, #420]	; (8006ffc <HAL_SD_MspInit+0x1c4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	f040 80cb 	bne.w	8006ff2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	4b67      	ldr	r3, [pc, #412]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e64:	4a66      	ldr	r2, [pc, #408]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8006e6c:	4b64      	ldr	r3, [pc, #400]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	4b60      	ldr	r3, [pc, #384]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	4a5f      	ldr	r2, [pc, #380]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e82:	f043 0304 	orr.w	r3, r3, #4
 8006e86:	6313      	str	r3, [r2, #48]	; 0x30
 8006e88:	4b5d      	ldr	r3, [pc, #372]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e94:	2300      	movs	r3, #0
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	4b59      	ldr	r3, [pc, #356]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	4a58      	ldr	r2, [pc, #352]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006e9e:	f043 0308 	orr.w	r3, r3, #8
 8006ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea4:	4b56      	ldr	r3, [pc, #344]	; (8007000 <HAL_SD_MspInit+0x1c8>)
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006eb0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006eb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ec6:	f107 0314 	add.w	r3, r7, #20
 8006eca:	4619      	mov	r1, r3
 8006ecc:	484d      	ldr	r0, [pc, #308]	; (8007004 <HAL_SD_MspInit+0x1cc>)
 8006ece:	f003 fe7f 	bl	800abd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ee6:	f107 0314 	add.w	r3, r7, #20
 8006eea:	4619      	mov	r1, r3
 8006eec:	4846      	ldr	r0, [pc, #280]	; (8007008 <HAL_SD_MspInit+0x1d0>)
 8006eee:	f003 fe6f 	bl	800abd0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006ef2:	4b46      	ldr	r3, [pc, #280]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006ef4:	4a46      	ldr	r2, [pc, #280]	; (8007010 <HAL_SD_MspInit+0x1d8>)
 8006ef6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006ef8:	4b44      	ldr	r3, [pc, #272]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006efe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f00:	4b42      	ldr	r3, [pc, #264]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f06:	4b41      	ldr	r3, [pc, #260]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f0c:	4b3f      	ldr	r3, [pc, #252]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f12:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f14:	4b3d      	ldr	r3, [pc, #244]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f1a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f1c:	4b3b      	ldr	r3, [pc, #236]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f22:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006f24:	4b39      	ldr	r3, [pc, #228]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f26:	2220      	movs	r2, #32
 8006f28:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006f2a:	4b38      	ldr	r3, [pc, #224]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006f30:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f32:	4b36      	ldr	r3, [pc, #216]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f34:	2204      	movs	r2, #4
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006f38:	4b34      	ldr	r3, [pc, #208]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f3a:	2203      	movs	r2, #3
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006f3e:	4b33      	ldr	r3, [pc, #204]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f40:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006f46:	4b31      	ldr	r3, [pc, #196]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006f4e:	482f      	ldr	r0, [pc, #188]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f50:	f003 faa2 	bl	800a498 <HAL_DMA_Init>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006f5a:	f7ff fe0b 	bl	8006b74 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2a      	ldr	r2, [pc, #168]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
 8006f64:	4a29      	ldr	r2, [pc, #164]	; (800700c <HAL_SD_MspInit+0x1d4>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006f6a:	4b2a      	ldr	r3, [pc, #168]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <HAL_SD_MspInit+0x1e0>)
 8006f6e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006f70:	4b28      	ldr	r3, [pc, #160]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f76:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f78:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f7a:	2240      	movs	r2, #64	; 0x40
 8006f7c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f7e:	4b25      	ldr	r3, [pc, #148]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f84:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f8a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f92:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f94:	4b1f      	ldr	r3, [pc, #124]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f9a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006f9c:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fa4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006fa8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006faa:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fac:	2204      	movs	r2, #4
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006fb0:	4b18      	ldr	r3, [pc, #96]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006fb6:	4b17      	ldr	r3, [pc, #92]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006fbe:	4b15      	ldr	r3, [pc, #84]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006fc6:	4813      	ldr	r0, [pc, #76]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fc8:	f003 fa66 	bl	800a498 <HAL_DMA_Init>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006fd2:	f7ff fdcf 	bl	8006b74 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a0e      	ldr	r2, [pc, #56]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8006fdc:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <HAL_SD_MspInit+0x1dc>)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	2031      	movs	r0, #49	; 0x31
 8006fe8:	f003 fa1f 	bl	800a42a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006fec:	2031      	movs	r0, #49	; 0x31
 8006fee:	f003 fa38 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006ff2:	bf00      	nop
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40023800 	.word	0x40023800
 8007004:	40020800 	.word	0x40020800
 8007008:	40020c00 	.word	0x40020c00
 800700c:	200436b0 	.word	0x200436b0
 8007010:	40026458 	.word	0x40026458
 8007014:	200439e4 	.word	0x200439e4
 8007018:	400264a0 	.word	0x400264a0

0800701c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007024:	f107 0314 	add.w	r3, r7, #20
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	609a      	str	r2, [r3, #8]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <HAL_SPI_MspInit+0x84>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d12c      	bne.n	8007098 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <HAL_SPI_MspInit+0x88>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <HAL_SPI_MspInit+0x88>)
 8007048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800704c:	6413      	str	r3, [r2, #64]	; 0x40
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <HAL_SPI_MspInit+0x88>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <HAL_SPI_MspInit+0x88>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <HAL_SPI_MspInit+0x88>)
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	6313      	str	r3, [r2, #48]	; 0x30
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <HAL_SPI_MspInit+0x88>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007076:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800707a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800707c:	2302      	movs	r3, #2
 800707e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007084:	2303      	movs	r3, #3
 8007086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007088:	2305      	movs	r3, #5
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	4619      	mov	r1, r3
 8007092:	4805      	ldr	r0, [pc, #20]	; (80070a8 <HAL_SPI_MspInit+0x8c>)
 8007094:	f003 fd9c 	bl	800abd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007098:	bf00      	nop
 800709a:	3728      	adds	r7, #40	; 0x28
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40003800 	.word	0x40003800
 80070a4:	40023800 	.word	0x40023800
 80070a8:	40020400 	.word	0x40020400

080070ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b4:	f107 031c 	add.w	r3, r7, #28
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a2d      	ldr	r2, [pc, #180]	; (8007180 <HAL_TIM_PWM_MspInit+0xd4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d12d      	bne.n	800712a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80070ce:	2300      	movs	r3, #0
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	4a2b      	ldr	r2, [pc, #172]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 80070d8:	f043 0301 	orr.w	r3, r3, #1
 80070dc:	6453      	str	r3, [r2, #68]	; 0x44
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	4a24      	ldr	r2, [pc, #144]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 80070f4:	f043 0310 	orr.w	r3, r3, #16
 80070f8:	6313      	str	r3, [r2, #48]	; 0x30
 80070fa:	4b22      	ldr	r3, [pc, #136]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007106:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800710a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710c:	2302      	movs	r3, #2
 800710e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007110:	2300      	movs	r3, #0
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007114:	2300      	movs	r3, #0
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007118:	2301      	movs	r3, #1
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800711c:	f107 031c 	add.w	r3, r7, #28
 8007120:	4619      	mov	r1, r3
 8007122:	4819      	ldr	r0, [pc, #100]	; (8007188 <HAL_TIM_PWM_MspInit+0xdc>)
 8007124:	f003 fd54 	bl	800abd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007128:	e026      	b.n	8007178 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a17      	ldr	r2, [pc, #92]	; (800718c <HAL_TIM_PWM_MspInit+0xe0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d10e      	bne.n	8007152 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007134:	2300      	movs	r3, #0
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	4b12      	ldr	r3, [pc, #72]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 800713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713c:	4a11      	ldr	r2, [pc, #68]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 800713e:	f043 0302 	orr.w	r3, r3, #2
 8007142:	6413      	str	r3, [r2, #64]	; 0x40
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	693b      	ldr	r3, [r7, #16]
}
 8007150:	e012      	b.n	8007178 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a0e      	ldr	r2, [pc, #56]	; (8007190 <HAL_TIM_PWM_MspInit+0xe4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10d      	bne.n	8007178 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	4b08      	ldr	r3, [pc, #32]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	4a07      	ldr	r2, [pc, #28]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 8007166:	f043 0304 	orr.w	r3, r3, #4
 800716a:	6413      	str	r3, [r2, #64]	; 0x40
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_TIM_PWM_MspInit+0xd8>)
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
}
 8007178:	bf00      	nop
 800717a:	3730      	adds	r7, #48	; 0x30
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40010000 	.word	0x40010000
 8007184:	40023800 	.word	0x40023800
 8007188:	40021000 	.word	0x40021000
 800718c:	40000400 	.word	0x40000400
 8007190:	40000800 	.word	0x40000800

08007194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a3e      	ldr	r2, [pc, #248]	; (800729c <HAL_TIM_Base_MspInit+0x108>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d116      	bne.n	80071d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	4b3d      	ldr	r3, [pc, #244]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	4a3c      	ldr	r2, [pc, #240]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 80071b0:	f043 0310 	orr.w	r3, r3, #16
 80071b4:	6413      	str	r3, [r2, #64]	; 0x40
 80071b6:	4b3a      	ldr	r3, [pc, #232]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80071c2:	2200      	movs	r2, #0
 80071c4:	2101      	movs	r1, #1
 80071c6:	2036      	movs	r0, #54	; 0x36
 80071c8:	f003 f92f 	bl	800a42a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80071cc:	2036      	movs	r0, #54	; 0x36
 80071ce:	f003 f948 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80071d2:	e05e      	b.n	8007292 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a32      	ldr	r2, [pc, #200]	; (80072a4 <HAL_TIM_Base_MspInit+0x110>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d116      	bne.n	800720c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	4b2f      	ldr	r3, [pc, #188]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a2e      	ldr	r2, [pc, #184]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	2037      	movs	r0, #55	; 0x37
 8007200:	f003 f913 	bl	800a42a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007204:	2037      	movs	r0, #55	; 0x37
 8007206:	f003 f92c 	bl	800a462 <HAL_NVIC_EnableIRQ>
}
 800720a:	e042      	b.n	8007292 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a25      	ldr	r2, [pc, #148]	; (80072a8 <HAL_TIM_Base_MspInit+0x114>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d10e      	bne.n	8007234 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	4b21      	ldr	r3, [pc, #132]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	4a20      	ldr	r2, [pc, #128]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007224:	6453      	str	r3, [r2, #68]	; 0x44
 8007226:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	e02e      	b.n	8007292 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <HAL_TIM_Base_MspInit+0x118>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d10e      	bne.n	800725c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007246:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800724c:	6453      	str	r3, [r2, #68]	; 0x44
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	693b      	ldr	r3, [r7, #16]
}
 800725a:	e01a      	b.n	8007292 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <HAL_TIM_Base_MspInit+0x11c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d115      	bne.n	8007292 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007274:	6413      	str	r3, [r2, #64]	; 0x40
 8007276:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007282:	2200      	movs	r2, #0
 8007284:	2100      	movs	r1, #0
 8007286:	202c      	movs	r0, #44	; 0x2c
 8007288:	f003 f8cf 	bl	800a42a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800728c:	202c      	movs	r0, #44	; 0x2c
 800728e:	f003 f8e8 	bl	800a462 <HAL_NVIC_EnableIRQ>
}
 8007292:	bf00      	nop
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40001000 	.word	0x40001000
 80072a0:	40023800 	.word	0x40023800
 80072a4:	40001400 	.word	0x40001400
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	40001c00 	.word	0x40001c00

080072b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08a      	sub	sp, #40	; 0x28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	609a      	str	r2, [r3, #8]
 80072c8:	60da      	str	r2, [r3, #12]
 80072ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1d      	ldr	r2, [pc, #116]	; (8007348 <HAL_TIM_Encoder_MspInit+0x94>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d133      	bne.n	800733e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80072d6:	2300      	movs	r3, #0
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	4b1c      	ldr	r3, [pc, #112]	; (800734c <HAL_TIM_Encoder_MspInit+0x98>)
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	4a1b      	ldr	r2, [pc, #108]	; (800734c <HAL_TIM_Encoder_MspInit+0x98>)
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	6453      	str	r3, [r2, #68]	; 0x44
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <HAL_TIM_Encoder_MspInit+0x98>)
 80072e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	613b      	str	r3, [r7, #16]
 80072f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <HAL_TIM_Encoder_MspInit+0x98>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	4a14      	ldr	r2, [pc, #80]	; (800734c <HAL_TIM_Encoder_MspInit+0x98>)
 80072fc:	f043 0304 	orr.w	r3, r3, #4
 8007300:	6313      	str	r3, [r2, #48]	; 0x30
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <HAL_TIM_Encoder_MspInit+0x98>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800730e:	23c0      	movs	r3, #192	; 0xc0
 8007310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007312:	2302      	movs	r3, #2
 8007314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731a:	2300      	movs	r3, #0
 800731c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800731e:	2303      	movs	r3, #3
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007322:	f107 0314 	add.w	r3, r7, #20
 8007326:	4619      	mov	r1, r3
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <HAL_TIM_Encoder_MspInit+0x9c>)
 800732a:	f003 fc51 	bl	800abd0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	202c      	movs	r0, #44	; 0x2c
 8007334:	f003 f879 	bl	800a42a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007338:	202c      	movs	r0, #44	; 0x2c
 800733a:	f003 f892 	bl	800a462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800733e:	bf00      	nop
 8007340:	3728      	adds	r7, #40	; 0x28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40010400 	.word	0x40010400
 800734c:	40023800 	.word	0x40023800
 8007350:	40020800 	.word	0x40020800

08007354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735c:	f107 031c 	add.w	r3, r7, #28
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a5c      	ldr	r2, [pc, #368]	; (80074e4 <HAL_TIM_MspPostInit+0x190>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d11f      	bne.n	80073b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	4b5b      	ldr	r3, [pc, #364]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	4a5a      	ldr	r2, [pc, #360]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 8007380:	f043 0310 	orr.w	r3, r3, #16
 8007384:	6313      	str	r3, [r2, #48]	; 0x30
 8007386:	4b58      	ldr	r3, [pc, #352]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007398:	2302      	movs	r3, #2
 800739a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800739c:	2300      	movs	r3, #0
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80073a4:	2301      	movs	r3, #1
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073a8:	f107 031c 	add.w	r3, r7, #28
 80073ac:	4619      	mov	r1, r3
 80073ae:	484f      	ldr	r0, [pc, #316]	; (80074ec <HAL_TIM_MspPostInit+0x198>)
 80073b0:	f003 fc0e 	bl	800abd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80073b4:	e091      	b.n	80074da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a4d      	ldr	r2, [pc, #308]	; (80074f0 <HAL_TIM_MspPostInit+0x19c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d11e      	bne.n	80073fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	4b48      	ldr	r3, [pc, #288]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	4a47      	ldr	r2, [pc, #284]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 80073ca:	f043 0302 	orr.w	r3, r3, #2
 80073ce:	6313      	str	r3, [r2, #48]	; 0x30
 80073d0:	4b45      	ldr	r3, [pc, #276]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80073dc:	2330      	movs	r3, #48	; 0x30
 80073de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e0:	2302      	movs	r3, #2
 80073e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073e8:	2300      	movs	r3, #0
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80073ec:	2302      	movs	r3, #2
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073f0:	f107 031c 	add.w	r3, r7, #28
 80073f4:	4619      	mov	r1, r3
 80073f6:	483f      	ldr	r0, [pc, #252]	; (80074f4 <HAL_TIM_MspPostInit+0x1a0>)
 80073f8:	f003 fbea 	bl	800abd0 <HAL_GPIO_Init>
}
 80073fc:	e06d      	b.n	80074da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3d      	ldr	r2, [pc, #244]	; (80074f8 <HAL_TIM_MspPostInit+0x1a4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d11f      	bne.n	8007448 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	4a35      	ldr	r2, [pc, #212]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 8007412:	f043 0308 	orr.w	r3, r3, #8
 8007416:	6313      	str	r3, [r2, #48]	; 0x30
 8007418:	4b33      	ldr	r3, [pc, #204]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800742a:	2302      	movs	r3, #2
 800742c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007432:	2300      	movs	r3, #0
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007436:	2302      	movs	r3, #2
 8007438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800743a:	f107 031c 	add.w	r3, r7, #28
 800743e:	4619      	mov	r1, r3
 8007440:	482e      	ldr	r0, [pc, #184]	; (80074fc <HAL_TIM_MspPostInit+0x1a8>)
 8007442:	f003 fbc5 	bl	800abd0 <HAL_GPIO_Init>
}
 8007446:	e048      	b.n	80074da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2c      	ldr	r2, [pc, #176]	; (8007500 <HAL_TIM_MspPostInit+0x1ac>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d11f      	bne.n	8007492 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	4a23      	ldr	r2, [pc, #140]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 800745c:	f043 0302 	orr.w	r3, r3, #2
 8007460:	6313      	str	r3, [r2, #48]	; 0x30
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800746e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007474:	2302      	movs	r3, #2
 8007476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007478:	2300      	movs	r3, #0
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800747c:	2300      	movs	r3, #0
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007480:	2303      	movs	r3, #3
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007484:	f107 031c 	add.w	r3, r7, #28
 8007488:	4619      	mov	r1, r3
 800748a:	481a      	ldr	r0, [pc, #104]	; (80074f4 <HAL_TIM_MspPostInit+0x1a0>)
 800748c:	f003 fba0 	bl	800abd0 <HAL_GPIO_Init>
}
 8007490:	e023      	b.n	80074da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <HAL_TIM_MspPostInit+0x1b0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d11e      	bne.n	80074da <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800749c:	2300      	movs	r3, #0
 800749e:	60bb      	str	r3, [r7, #8]
 80074a0:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	4a10      	ldr	r2, [pc, #64]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 80074a6:	f043 0302 	orr.w	r3, r3, #2
 80074aa:	6313      	str	r3, [r2, #48]	; 0x30
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <HAL_TIM_MspPostInit+0x194>)
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074be:	2302      	movs	r3, #2
 80074c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074c6:	2300      	movs	r3, #0
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80074ca:	2303      	movs	r3, #3
 80074cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ce:	f107 031c 	add.w	r3, r7, #28
 80074d2:	4619      	mov	r1, r3
 80074d4:	4807      	ldr	r0, [pc, #28]	; (80074f4 <HAL_TIM_MspPostInit+0x1a0>)
 80074d6:	f003 fb7b 	bl	800abd0 <HAL_GPIO_Init>
}
 80074da:	bf00      	nop
 80074dc:	3730      	adds	r7, #48	; 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40023800 	.word	0x40023800
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40020400 	.word	0x40020400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40020c00 	.word	0x40020c00
 8007500:	40014400 	.word	0x40014400
 8007504:	40014800 	.word	0x40014800

08007508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	609a      	str	r2, [r3, #8]
 800751c:	60da      	str	r2, [r3, #12]
 800751e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a19      	ldr	r2, [pc, #100]	; (800758c <HAL_UART_MspInit+0x84>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d12b      	bne.n	8007582 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <HAL_UART_MspInit+0x88>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	4a17      	ldr	r2, [pc, #92]	; (8007590 <HAL_UART_MspInit+0x88>)
 8007534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007538:	6413      	str	r3, [r2, #64]	; 0x40
 800753a:	4b15      	ldr	r3, [pc, #84]	; (8007590 <HAL_UART_MspInit+0x88>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <HAL_UART_MspInit+0x88>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4a10      	ldr	r2, [pc, #64]	; (8007590 <HAL_UART_MspInit+0x88>)
 8007550:	f043 0308 	orr.w	r3, r3, #8
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <HAL_UART_MspInit+0x88>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007562:	2360      	movs	r3, #96	; 0x60
 8007564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007566:	2302      	movs	r3, #2
 8007568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800756e:	2303      	movs	r3, #3
 8007570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007572:	2307      	movs	r3, #7
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007576:	f107 0314 	add.w	r3, r7, #20
 800757a:	4619      	mov	r1, r3
 800757c:	4805      	ldr	r0, [pc, #20]	; (8007594 <HAL_UART_MspInit+0x8c>)
 800757e:	f003 fb27 	bl	800abd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007582:	bf00      	nop
 8007584:	3728      	adds	r7, #40	; 0x28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40004400 	.word	0x40004400
 8007590:	40023800 	.word	0x40023800
 8007594:	40020c00 	.word	0x40020c00

08007598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800759c:	e7fe      	b.n	800759c <NMI_Handler+0x4>

0800759e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800759e:	b480      	push	{r7}
 80075a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075a2:	e7fe      	b.n	80075a2 <HardFault_Handler+0x4>

080075a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075a8:	e7fe      	b.n	80075a8 <MemManage_Handler+0x4>

080075aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075aa:	b480      	push	{r7}
 80075ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075ae:	e7fe      	b.n	80075ae <BusFault_Handler+0x4>

080075b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075b4:	e7fe      	b.n	80075b4 <UsageFault_Handler+0x4>

080075b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075b6:	b480      	push	{r7}
 80075b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075ba:	bf00      	nop
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075c8:	bf00      	nop
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075d2:	b480      	push	{r7}
 80075d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80075d6:	bf00      	nop
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075e4:	f002 fa00 	bl	80099e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075e8:	bf00      	nop
 80075ea:	bd80      	pop	{r7, pc}

080075ec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80075f0:	4803      	ldr	r0, [pc, #12]	; (8007600 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80075f2:	f007 fcd0 	bl	800ef96 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80075f6:	4803      	ldr	r0, [pc, #12]	; (8007604 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80075f8:	f007 fccd 	bl	800ef96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80075fc:	bf00      	nop
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20043768 	.word	0x20043768
 8007604:	20043964 	.word	0x20043964

08007608 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800760c:	4802      	ldr	r0, [pc, #8]	; (8007618 <SDIO_IRQHandler+0x10>)
 800760e:	f005 fd69 	bl	800d0e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20043ac4 	.word	0x20043ac4

0800761c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007620:	4802      	ldr	r0, [pc, #8]	; (800762c <TIM6_DAC_IRQHandler+0x10>)
 8007622:	f007 fcb8 	bl	800ef96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007626:	bf00      	nop
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20043a44 	.word	0x20043a44

08007630 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007634:	4802      	ldr	r0, [pc, #8]	; (8007640 <TIM7_IRQHandler+0x10>)
 8007636:	f007 fcae 	bl	800ef96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800763a:	bf00      	nop
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20043be8 	.word	0x20043be8

08007644 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007648:	4802      	ldr	r0, [pc, #8]	; (8007654 <DMA2_Stream2_IRQHandler+0x10>)
 800764a:	f003 f84d 	bl	800a6e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800764e:	bf00      	nop
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20043b88 	.word	0x20043b88

08007658 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800765c:	4802      	ldr	r0, [pc, #8]	; (8007668 <DMA2_Stream3_IRQHandler+0x10>)
 800765e:	f003 f843 	bl	800a6e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007662:	bf00      	nop
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	200436b0 	.word	0x200436b0

0800766c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007670:	4802      	ldr	r0, [pc, #8]	; (800767c <DMA2_Stream6_IRQHandler+0x10>)
 8007672:	f003 f839 	bl	800a6e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007676:	bf00      	nop
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	200439e4 	.word	0x200439e4

08007680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007688:	4a14      	ldr	r2, [pc, #80]	; (80076dc <_sbrk+0x5c>)
 800768a:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <_sbrk+0x60>)
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <_sbrk+0x64>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800769c:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <_sbrk+0x64>)
 800769e:	4a12      	ldr	r2, [pc, #72]	; (80076e8 <_sbrk+0x68>)
 80076a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <_sbrk+0x64>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4413      	add	r3, r2
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d207      	bcs.n	80076c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076b0:	f00e f904 	bl	80158bc <__errno>
 80076b4:	4603      	mov	r3, r0
 80076b6:	220c      	movs	r2, #12
 80076b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076ba:	f04f 33ff 	mov.w	r3, #4294967295
 80076be:	e009      	b.n	80076d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076c0:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <_sbrk+0x64>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <_sbrk+0x64>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <_sbrk+0x64>)
 80076d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076d2:	68fb      	ldr	r3, [r7, #12]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20050000 	.word	0x20050000
 80076e0:	00000800 	.word	0x00000800
 80076e4:	200002f0 	.word	0x200002f0
 80076e8:	20045d38 	.word	0x20045d38

080076ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <SystemInit+0x28>)
 80076f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f6:	4a07      	ldr	r2, [pc, #28]	; (8007714 <SystemInit+0x28>)
 80076f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <SystemInit+0x28>)
 8007702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007706:	609a      	str	r2, [r3, #8]
#endif
}
 8007708:	bf00      	nop
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	e000ed00 	.word	0xe000ed00

08007718 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007718:	b598      	push	{r3, r4, r7, lr}
 800771a:	af00      	add	r7, sp, #0
	lcd_init();
 800771c:	f7f9 fc7c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007720:	483a      	ldr	r0, [pc, #232]	; (800780c <cppInit+0xf4>)
 8007722:	f7fd fdcf 	bl	80052c4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007726:	2064      	movs	r0, #100	; 0x64
 8007728:	f002 f97e 	bl	8009a28 <HAL_Delay>
	power_sensor.updateValues();
 800772c:	4837      	ldr	r0, [pc, #220]	; (800780c <cppInit+0xf4>)
 800772e:	f7fd fdd7 	bl	80052e0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007732:	f7f9 fcb5 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007736:	2100      	movs	r1, #0
 8007738:	2000      	movs	r0, #0
 800773a:	f7f9 fcc1 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800773e:	4834      	ldr	r0, [pc, #208]	; (8007810 <cppInit+0xf8>)
 8007740:	f7f9 fce8 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007744:	2101      	movs	r1, #1
 8007746:	2000      	movs	r0, #0
 8007748:	f7f9 fcba 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800774c:	482f      	ldr	r0, [pc, #188]	; (800780c <cppInit+0xf4>)
 800774e:	f7fd fdf1 	bl	8005334 <_ZN11PowerSensor17getButteryVoltageEv>
 8007752:	ee10 3a10 	vmov	r3, s0
 8007756:	4618      	mov	r0, r3
 8007758:	f7f8 ff0e 	bl	8000578 <__aeabi_f2d>
 800775c:	4603      	mov	r3, r0
 800775e:	460c      	mov	r4, r1
 8007760:	461a      	mov	r2, r3
 8007762:	4623      	mov	r3, r4
 8007764:	482b      	ldr	r0, [pc, #172]	; (8007814 <cppInit+0xfc>)
 8007766:	f7f9 fcd5 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800776a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800776e:	f002 f95b 	bl	8009a28 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007772:	4829      	ldr	r0, [pc, #164]	; (8007818 <cppInit+0x100>)
 8007774:	f7fc ffe2 	bl	800473c <_ZN6Logger10sdCardInitEv>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <cppInit+0x76>
		led.fullColor('G');
 800777e:	2147      	movs	r1, #71	; 0x47
 8007780:	4826      	ldr	r0, [pc, #152]	; (800781c <cppInit+0x104>)
 8007782:	f7fa fb8b 	bl	8001e9c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007786:	2064      	movs	r0, #100	; 0x64
 8007788:	f002 f94e 	bl	8009a28 <HAL_Delay>
 800778c:	e006      	b.n	800779c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800778e:	2152      	movs	r1, #82	; 0x52
 8007790:	4822      	ldr	r0, [pc, #136]	; (800781c <cppInit+0x104>)
 8007792:	f7fa fb83 	bl	8001e9c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007796:	2064      	movs	r0, #100	; 0x64
 8007798:	f002 f946 	bl	8009a28 <HAL_Delay>
	}

	line_sensor.ADCStart();
 800779c:	4820      	ldr	r0, [pc, #128]	; (8007820 <cppInit+0x108>)
 800779e:	f7fa fcd9 	bl	8002154 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80077a2:	4820      	ldr	r0, [pc, #128]	; (8007824 <cppInit+0x10c>)
 80077a4:	f7fd fa60 	bl	8004c68 <_ZN5Motor4initEv>
	encoder.init();
 80077a8:	481f      	ldr	r0, [pc, #124]	; (8007828 <cppInit+0x110>)
 80077aa:	f7f9 fd43 	bl	8001234 <_ZN7Encoder4initEv>
	imu.init();
 80077ae:	481f      	ldr	r0, [pc, #124]	; (800782c <cppInit+0x114>)
 80077b0:	f7fa f932 	bl	8001a18 <_ZN3IMU4initEv>
	line_trace.init();
 80077b4:	481e      	ldr	r0, [pc, #120]	; (8007830 <cppInit+0x118>)
 80077b6:	f7fc f87b 	bl	80038b0 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80077ba:	4819      	ldr	r0, [pc, #100]	; (8007820 <cppInit+0x108>)
 80077bc:	f7fa fe0a 	bl	80023d4 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80077c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077c4:	f002 f930 	bl	8009a28 <HAL_Delay>

	led.fullColor('M');
 80077c8:	214d      	movs	r1, #77	; 0x4d
 80077ca:	4814      	ldr	r0, [pc, #80]	; (800781c <cppInit+0x104>)
 80077cc:	f7fa fb66 	bl	8001e9c <_ZN3LED9fullColorEc>
	imu.calibration();
 80077d0:	4816      	ldr	r0, [pc, #88]	; (800782c <cppInit+0x114>)
 80077d2:	f7fa f9eb 	bl	8001bac <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80077d6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007834 <cppInit+0x11c>
 80077da:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007838 <cppInit+0x120>
 80077de:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800783c <cppInit+0x124>
 80077e2:	4817      	ldr	r0, [pc, #92]	; (8007840 <cppInit+0x128>)
 80077e4:	f7fe f9cc 	bl	8005b80 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 80077e8:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8007844 <cppInit+0x12c>
 80077ec:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007848 <cppInit+0x130>
 80077f0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800784c <cppInit+0x134>
 80077f4:	4812      	ldr	r0, [pc, #72]	; (8007840 <cppInit+0x128>)
 80077f6:	f7fe f9dc 	bl	8005bb2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80077fa:	4815      	ldr	r0, [pc, #84]	; (8007850 <cppInit+0x138>)
 80077fc:	f7fd fc6c 	bl	80050d8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007800:	4814      	ldr	r0, [pc, #80]	; (8007854 <cppInit+0x13c>)
 8007802:	f7fd fd03 	bl	800520c <_ZN13PathFollowing4initEv>

}
 8007806:	bf00      	nop
 8007808:	bd98      	pop	{r3, r4, r7, pc}
 800780a:	bf00      	nop
 800780c:	20000604 	.word	0x20000604
 8007810:	0801a144 	.word	0x0801a144
 8007814:	0801a14c 	.word	0x0801a14c
 8007818:	20000624 	.word	0x20000624
 800781c:	20000600 	.word	0x20000600
 8007820:	200002f4 	.word	0x200002f4
 8007824:	200005fc 	.word	0x200005fc
 8007828:	2001bbac 	.word	0x2001bbac
 800782c:	20000610 	.word	0x20000610
 8007830:	2001bc48 	.word	0x2001bc48
 8007834:	3cceca68 	.word	0x3cceca68
 8007838:	4180f06f 	.word	0x4180f06f
 800783c:	3fea2d0e 	.word	0x3fea2d0e
 8007840:	2001bbcc 	.word	0x2001bbcc
 8007844:	00000000 	.word	0x00000000
 8007848:	3f5e3fbc 	.word	0x3f5e3fbc
 800784c:	3d75c28f 	.word	0x3d75c28f
 8007850:	2001bc08 	.word	0x2001bc08
 8007854:	20029ba8 	.word	0x20029ba8

08007858 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800785c:	4819      	ldr	r0, [pc, #100]	; (80078c4 <cppFlip1ms+0x6c>)
 800785e:	f7fa fcd7 	bl	8002210 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007862:	4819      	ldr	r0, [pc, #100]	; (80078c8 <cppFlip1ms+0x70>)
 8007864:	f7fa f900 	bl	8001a68 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007868:	4818      	ldr	r0, [pc, #96]	; (80078cc <cppFlip1ms+0x74>)
 800786a:	f7f9 fd05 	bl	8001278 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800786e:	4818      	ldr	r0, [pc, #96]	; (80078d0 <cppFlip1ms+0x78>)
 8007870:	f7fc fab4 	bl	8003ddc <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007874:	4817      	ldr	r0, [pc, #92]	; (80078d4 <cppFlip1ms+0x7c>)
 8007876:	f7fe f9b5 	bl	8005be4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800787a:	4817      	ldr	r0, [pc, #92]	; (80078d8 <cppFlip1ms+0x80>)
 800787c:	f7fd fc10 	bl	80050a0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007880:	4816      	ldr	r0, [pc, #88]	; (80078dc <cppFlip1ms+0x84>)
 8007882:	f7fd fdcd 	bl	8005420 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007886:	4816      	ldr	r0, [pc, #88]	; (80078e0 <cppFlip1ms+0x88>)
 8007888:	f7fd fa00 	bl	8004c8c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800788c:	4b15      	ldr	r3, [pc, #84]	; (80078e4 <cppFlip1ms+0x8c>)
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <cppFlip1ms+0x8c>)
 8007896:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <cppFlip1ms+0x8c>)
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d90c      	bls.n	80078ba <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80078a0:	4809      	ldr	r0, [pc, #36]	; (80078c8 <cppFlip1ms+0x70>)
 80078a2:	f7fa f939 	bl	8001b18 <_ZN3IMU8getOmegaEv>
 80078a6:	eef0 7a40 	vmov.f32	s15, s0
 80078aa:	eeb0 0a67 	vmov.f32	s0, s15
 80078ae:	480e      	ldr	r0, [pc, #56]	; (80078e8 <cppFlip1ms+0x90>)
 80078b0:	f7fd ff18 	bl	80056e4 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80078b4:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <cppFlip1ms+0x8c>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80078ba:	4804      	ldr	r0, [pc, #16]	; (80078cc <cppFlip1ms+0x74>)
 80078bc:	f7f9 fdc6 	bl	800144c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80078c0:	bf00      	nop
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	200002f4 	.word	0x200002f4
 80078c8:	20000610 	.word	0x20000610
 80078cc:	2001bbac 	.word	0x2001bbac
 80078d0:	2001bc48 	.word	0x2001bc48
 80078d4:	2001bbcc 	.word	0x2001bbcc
 80078d8:	2001bc08 	.word	0x2001bc08
 80078dc:	200005ec 	.word	0x200005ec
 80078e0:	200005fc 	.word	0x200005fc
 80078e4:	200412d2 	.word	0x200412d2
 80078e8:	20029998 	.word	0x20029998

080078ec <cppFlip100ns>:

void cppFlip100ns(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80078f0:	4802      	ldr	r0, [pc, #8]	; (80078fc <cppFlip100ns+0x10>)
 80078f2:	f7fa fc3f 	bl	8002174 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200002f4 	.word	0x200002f4

08007900 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007904:	4b08      	ldr	r3, [pc, #32]	; (8007928 <cppFlip10ms+0x28>)
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <cppFlip10ms+0x28>)
 800790e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <cppFlip10ms+0x28>)
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	2b06      	cmp	r3, #6
 8007916:	d905      	bls.n	8007924 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007918:	4804      	ldr	r0, [pc, #16]	; (800792c <cppFlip10ms+0x2c>)
 800791a:	f7fd ff03 	bl	8005724 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800791e:	4b02      	ldr	r3, [pc, #8]	; (8007928 <cppFlip10ms+0x28>)
 8007920:	2200      	movs	r2, #0
 8007922:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007924:	bf00      	nop
 8007926:	bd80      	pop	{r7, pc}
 8007928:	200412d4 	.word	0x200412d4
 800792c:	20029998 	.word	0x20029998

08007930 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007932:	b083      	sub	sp, #12
 8007934:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 8007936:	4baf      	ldr	r3, [pc, #700]	; (8007bf4 <cppLoop+0x2c4>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f3bf 8f5b 	dmb	ish
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d015      	beq.n	800797e <cppLoop+0x4e>
 8007952:	48a8      	ldr	r0, [pc, #672]	; (8007bf4 <cppLoop+0x2c4>)
 8007954:	f00c fd4d 	bl	80143f2 <__cxa_guard_acquire>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <cppLoop+0x4e>
 8007968:	48a3      	ldr	r0, [pc, #652]	; (8007bf8 <cppLoop+0x2c8>)
 800796a:	f7fc f8c1 	bl	8003af0 <_ZN9LineTrace5getKpEv>
 800796e:	eef0 7a40 	vmov.f32	s15, s0
 8007972:	4ba2      	ldr	r3, [pc, #648]	; (8007bfc <cppLoop+0x2cc>)
 8007974:	edc3 7a00 	vstr	s15, [r3]
 8007978:	489e      	ldr	r0, [pc, #632]	; (8007bf4 <cppLoop+0x2c4>)
 800797a:	f00c fd46 	bl	801440a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800797e:	4ba0      	ldr	r3, [pc, #640]	; (8007c00 <cppLoop+0x2d0>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f3bf 8f5b 	dmb	ish
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	bf0c      	ite	eq
 8007990:	2301      	moveq	r3, #1
 8007992:	2300      	movne	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <cppLoop+0x96>
 800799a:	4899      	ldr	r0, [pc, #612]	; (8007c00 <cppLoop+0x2d0>)
 800799c:	f00c fd29 	bl	80143f2 <__cxa_guard_acquire>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <cppLoop+0x96>
 80079b0:	4891      	ldr	r0, [pc, #580]	; (8007bf8 <cppLoop+0x2c8>)
 80079b2:	f7fc f8ac 	bl	8003b0e <_ZN9LineTrace5getKiEv>
 80079b6:	eef0 7a40 	vmov.f32	s15, s0
 80079ba:	4b92      	ldr	r3, [pc, #584]	; (8007c04 <cppLoop+0x2d4>)
 80079bc:	edc3 7a00 	vstr	s15, [r3]
 80079c0:	488f      	ldr	r0, [pc, #572]	; (8007c00 <cppLoop+0x2d0>)
 80079c2:	f00c fd22 	bl	801440a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80079c6:	4b90      	ldr	r3, [pc, #576]	; (8007c08 <cppLoop+0x2d8>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	f3bf 8f5b 	dmb	ish
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d015      	beq.n	8007a0e <cppLoop+0xde>
 80079e2:	4889      	ldr	r0, [pc, #548]	; (8007c08 <cppLoop+0x2d8>)
 80079e4:	f00c fd05 	bl	80143f2 <__cxa_guard_acquire>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <cppLoop+0xde>
 80079f8:	487f      	ldr	r0, [pc, #508]	; (8007bf8 <cppLoop+0x2c8>)
 80079fa:	f7fc f897 	bl	8003b2c <_ZN9LineTrace5getKdEv>
 80079fe:	eef0 7a40 	vmov.f32	s15, s0
 8007a02:	4b82      	ldr	r3, [pc, #520]	; (8007c0c <cppLoop+0x2dc>)
 8007a04:	edc3 7a00 	vstr	s15, [r3]
 8007a08:	487f      	ldr	r0, [pc, #508]	; (8007c08 <cppLoop+0x2d8>)
 8007a0a:	f00c fcfe 	bl	801440a <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 8007a0e:	4b80      	ldr	r3, [pc, #512]	; (8007c10 <cppLoop+0x2e0>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f3bf 8f5b 	dmb	ish
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <cppLoop+0x126>
 8007a2a:	4879      	ldr	r0, [pc, #484]	; (8007c10 <cppLoop+0x2e0>)
 8007a2c:	f00c fce1 	bl	80143f2 <__cxa_guard_acquire>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <cppLoop+0x126>
 8007a40:	486d      	ldr	r0, [pc, #436]	; (8007bf8 <cppLoop+0x2c8>)
 8007a42:	f7fc f882 	bl	8003b4a <_ZN9LineTrace9getKpFastEv>
 8007a46:	eef0 7a40 	vmov.f32	s15, s0
 8007a4a:	4b72      	ldr	r3, [pc, #456]	; (8007c14 <cppLoop+0x2e4>)
 8007a4c:	edc3 7a00 	vstr	s15, [r3]
 8007a50:	486f      	ldr	r0, [pc, #444]	; (8007c10 <cppLoop+0x2e0>)
 8007a52:	f00c fcda 	bl	801440a <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 8007a56:	4b70      	ldr	r3, [pc, #448]	; (8007c18 <cppLoop+0x2e8>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f3bf 8f5b 	dmb	ish
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d015      	beq.n	8007a9e <cppLoop+0x16e>
 8007a72:	4869      	ldr	r0, [pc, #420]	; (8007c18 <cppLoop+0x2e8>)
 8007a74:	f00c fcbd 	bl	80143f2 <__cxa_guard_acquire>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bf14      	ite	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	2300      	moveq	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <cppLoop+0x16e>
 8007a88:	485b      	ldr	r0, [pc, #364]	; (8007bf8 <cppLoop+0x2c8>)
 8007a8a:	f7fc f86d 	bl	8003b68 <_ZN9LineTrace9getKiFastEv>
 8007a8e:	eef0 7a40 	vmov.f32	s15, s0
 8007a92:	4b62      	ldr	r3, [pc, #392]	; (8007c1c <cppLoop+0x2ec>)
 8007a94:	edc3 7a00 	vstr	s15, [r3]
 8007a98:	485f      	ldr	r0, [pc, #380]	; (8007c18 <cppLoop+0x2e8>)
 8007a9a:	f00c fcb6 	bl	801440a <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 8007a9e:	4b60      	ldr	r3, [pc, #384]	; (8007c20 <cppLoop+0x2f0>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f3bf 8f5b 	dmb	ish
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d015      	beq.n	8007ae6 <cppLoop+0x1b6>
 8007aba:	4859      	ldr	r0, [pc, #356]	; (8007c20 <cppLoop+0x2f0>)
 8007abc:	f00c fc99 	bl	80143f2 <__cxa_guard_acquire>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <cppLoop+0x1b6>
 8007ad0:	4849      	ldr	r0, [pc, #292]	; (8007bf8 <cppLoop+0x2c8>)
 8007ad2:	f7fc f858 	bl	8003b86 <_ZN9LineTrace9getKdFastEv>
 8007ad6:	eef0 7a40 	vmov.f32	s15, s0
 8007ada:	4b52      	ldr	r3, [pc, #328]	; (8007c24 <cppLoop+0x2f4>)
 8007adc:	edc3 7a00 	vstr	s15, [r3]
 8007ae0:	484f      	ldr	r0, [pc, #316]	; (8007c20 <cppLoop+0x2f0>)
 8007ae2:	f00c fc92 	bl	801440a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007ae6:	4b50      	ldr	r3, [pc, #320]	; (8007c28 <cppLoop+0x2f8>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f3bf 8f5b 	dmb	ish
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d015      	beq.n	8007b2e <cppLoop+0x1fe>
 8007b02:	4849      	ldr	r0, [pc, #292]	; (8007c28 <cppLoop+0x2f8>)
 8007b04:	f00c fc75 	bl	80143f2 <__cxa_guard_acquire>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bf14      	ite	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	2300      	moveq	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00a      	beq.n	8007b2e <cppLoop+0x1fe>
 8007b18:	4837      	ldr	r0, [pc, #220]	; (8007bf8 <cppLoop+0x2c8>)
 8007b1a:	f7fc f893 	bl	8003c44 <_ZN9LineTrace17getTargetVelocityEv>
 8007b1e:	eef0 7a40 	vmov.f32	s15, s0
 8007b22:	4b42      	ldr	r3, [pc, #264]	; (8007c2c <cppLoop+0x2fc>)
 8007b24:	edc3 7a00 	vstr	s15, [r3]
 8007b28:	483f      	ldr	r0, [pc, #252]	; (8007c28 <cppLoop+0x2f8>)
 8007b2a:	f00c fc6e 	bl	801440a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007b2e:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <cppLoop+0x300>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f3bf 8f5b 	dmb	ish
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bf0c      	ite	eq
 8007b40:	2301      	moveq	r3, #1
 8007b42:	2300      	movne	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d015      	beq.n	8007b76 <cppLoop+0x246>
 8007b4a:	4839      	ldr	r0, [pc, #228]	; (8007c30 <cppLoop+0x300>)
 8007b4c:	f00c fc51 	bl	80143f2 <__cxa_guard_acquire>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf14      	ite	ne
 8007b56:	2301      	movne	r3, #1
 8007b58:	2300      	moveq	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <cppLoop+0x246>
 8007b60:	4825      	ldr	r0, [pc, #148]	; (8007bf8 <cppLoop+0x2c8>)
 8007b62:	f7fc f87f 	bl	8003c64 <_ZN9LineTrace14getMaxVelocityEv>
 8007b66:	eef0 7a40 	vmov.f32	s15, s0
 8007b6a:	4b32      	ldr	r3, [pc, #200]	; (8007c34 <cppLoop+0x304>)
 8007b6c:	edc3 7a00 	vstr	s15, [r3]
 8007b70:	482f      	ldr	r0, [pc, #188]	; (8007c30 <cppLoop+0x300>)
 8007b72:	f00c fc4a 	bl	801440a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007b76:	4b30      	ldr	r3, [pc, #192]	; (8007c38 <cppLoop+0x308>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	f3bf 8f5b 	dmb	ish
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d015      	beq.n	8007bbe <cppLoop+0x28e>
 8007b92:	4829      	ldr	r0, [pc, #164]	; (8007c38 <cppLoop+0x308>)
 8007b94:	f00c fc2d 	bl	80143f2 <__cxa_guard_acquire>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bf14      	ite	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	2300      	moveq	r3, #0
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <cppLoop+0x28e>
 8007ba8:	4813      	ldr	r0, [pc, #76]	; (8007bf8 <cppLoop+0x2c8>)
 8007baa:	f7fc f86b 	bl	8003c84 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007bae:	eef0 7a40 	vmov.f32	s15, s0
 8007bb2:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <cppLoop+0x30c>)
 8007bb4:	edc3 7a00 	vstr	s15, [r3]
 8007bb8:	481f      	ldr	r0, [pc, #124]	; (8007c38 <cppLoop+0x308>)
 8007bba:	f00c fc26 	bl	801440a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007bbe:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <cppLoop+0x310>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f3bf 8f5b 	dmb	ish
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d03f      	beq.n	8007c5a <cppLoop+0x32a>
 8007bda:	4819      	ldr	r0, [pc, #100]	; (8007c40 <cppLoop+0x310>)
 8007bdc:	f00c fc09 	bl	80143f2 <__cxa_guard_acquire>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d034      	beq.n	8007c5a <cppLoop+0x32a>
 8007bf0:	e028      	b.n	8007c44 <cppLoop+0x314>
 8007bf2:	bf00      	nop
 8007bf4:	200412e8 	.word	0x200412e8
 8007bf8:	2001bc48 	.word	0x2001bc48
 8007bfc:	200412e4 	.word	0x200412e4
 8007c00:	200412f0 	.word	0x200412f0
 8007c04:	200412ec 	.word	0x200412ec
 8007c08:	200412f8 	.word	0x200412f8
 8007c0c:	200412f4 	.word	0x200412f4
 8007c10:	20041300 	.word	0x20041300
 8007c14:	200412fc 	.word	0x200412fc
 8007c18:	20041308 	.word	0x20041308
 8007c1c:	20041304 	.word	0x20041304
 8007c20:	20041310 	.word	0x20041310
 8007c24:	2004130c 	.word	0x2004130c
 8007c28:	20041318 	.word	0x20041318
 8007c2c:	20041314 	.word	0x20041314
 8007c30:	20041320 	.word	0x20041320
 8007c34:	2004131c 	.word	0x2004131c
 8007c38:	20041328 	.word	0x20041328
 8007c3c:	20041324 	.word	0x20041324
 8007c40:	20041330 	.word	0x20041330
 8007c44:	48af      	ldr	r0, [pc, #700]	; (8007f04 <cppLoop+0x5d4>)
 8007c46:	f7fc f82d 	bl	8003ca4 <_ZN9LineTrace14getMinVelocityEv>
 8007c4a:	eef0 7a40 	vmov.f32	s15, s0
 8007c4e:	4bae      	ldr	r3, [pc, #696]	; (8007f08 <cppLoop+0x5d8>)
 8007c50:	edc3 7a00 	vstr	s15, [r3]
 8007c54:	48ad      	ldr	r0, [pc, #692]	; (8007f0c <cppLoop+0x5dc>)
 8007c56:	f00c fbd8 	bl	801440a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007c5a:	4bad      	ldr	r3, [pc, #692]	; (8007f10 <cppLoop+0x5e0>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f3bf 8f5b 	dmb	ish
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d015      	beq.n	8007ca2 <cppLoop+0x372>
 8007c76:	48a6      	ldr	r0, [pc, #664]	; (8007f10 <cppLoop+0x5e0>)
 8007c78:	f00c fbbb 	bl	80143f2 <__cxa_guard_acquire>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <cppLoop+0x372>
 8007c8c:	489d      	ldr	r0, [pc, #628]	; (8007f04 <cppLoop+0x5d4>)
 8007c8e:	f7fc f819 	bl	8003cc4 <_ZN9LineTrace15getMinVelocity2Ev>
 8007c92:	eef0 7a40 	vmov.f32	s15, s0
 8007c96:	4b9f      	ldr	r3, [pc, #636]	; (8007f14 <cppLoop+0x5e4>)
 8007c98:	edc3 7a00 	vstr	s15, [r3]
 8007c9c:	489c      	ldr	r0, [pc, #624]	; (8007f10 <cppLoop+0x5e0>)
 8007c9e:	f00c fbb4 	bl	801440a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007ca2:	4b9d      	ldr	r3, [pc, #628]	; (8007f18 <cppLoop+0x5e8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f3bf 8f5b 	dmb	ish
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bf0c      	ite	eq
 8007cb4:	2301      	moveq	r3, #1
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d015      	beq.n	8007cea <cppLoop+0x3ba>
 8007cbe:	4896      	ldr	r0, [pc, #600]	; (8007f18 <cppLoop+0x5e8>)
 8007cc0:	f00c fb97 	bl	80143f2 <__cxa_guard_acquire>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bf14      	ite	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	2300      	moveq	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <cppLoop+0x3ba>
 8007cd4:	488b      	ldr	r0, [pc, #556]	; (8007f04 <cppLoop+0x5d4>)
 8007cd6:	f7fc f839 	bl	8003d4c <_ZN9LineTrace9getMaxAccEv>
 8007cda:	eef0 7a40 	vmov.f32	s15, s0
 8007cde:	4b8f      	ldr	r3, [pc, #572]	; (8007f1c <cppLoop+0x5ec>)
 8007ce0:	edc3 7a00 	vstr	s15, [r3]
 8007ce4:	488c      	ldr	r0, [pc, #560]	; (8007f18 <cppLoop+0x5e8>)
 8007ce6:	f00c fb90 	bl	801440a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007cea:	4b8d      	ldr	r3, [pc, #564]	; (8007f20 <cppLoop+0x5f0>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f3bf 8f5b 	dmb	ish
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2300      	movne	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d015      	beq.n	8007d32 <cppLoop+0x402>
 8007d06:	4886      	ldr	r0, [pc, #536]	; (8007f20 <cppLoop+0x5f0>)
 8007d08:	f00c fb73 	bl	80143f2 <__cxa_guard_acquire>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bf14      	ite	ne
 8007d12:	2301      	movne	r3, #1
 8007d14:	2300      	moveq	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <cppLoop+0x402>
 8007d1c:	4879      	ldr	r0, [pc, #484]	; (8007f04 <cppLoop+0x5d4>)
 8007d1e:	f7fc f84b 	bl	8003db8 <_ZN9LineTrace9getMaxDecEv>
 8007d22:	eef0 7a40 	vmov.f32	s15, s0
 8007d26:	4b7f      	ldr	r3, [pc, #508]	; (8007f24 <cppLoop+0x5f4>)
 8007d28:	edc3 7a00 	vstr	s15, [r3]
 8007d2c:	487c      	ldr	r0, [pc, #496]	; (8007f20 <cppLoop+0x5f0>)
 8007d2e:	f00c fb6c 	bl	801440a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007d32:	4b7d      	ldr	r3, [pc, #500]	; (8007f28 <cppLoop+0x5f8>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f3bf 8f5b 	dmb	ish
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bf0c      	ite	eq
 8007d44:	2301      	moveq	r3, #1
 8007d46:	2300      	movne	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d015      	beq.n	8007d7a <cppLoop+0x44a>
 8007d4e:	4876      	ldr	r0, [pc, #472]	; (8007f28 <cppLoop+0x5f8>)
 8007d50:	f00c fb4f 	bl	80143f2 <__cxa_guard_acquire>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bf14      	ite	ne
 8007d5a:	2301      	movne	r3, #1
 8007d5c:	2300      	moveq	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <cppLoop+0x44a>
 8007d64:	4867      	ldr	r0, [pc, #412]	; (8007f04 <cppLoop+0x5d4>)
 8007d66:	f7fc f815 	bl	8003d94 <_ZN9LineTrace10getMaxAcc2Ev>
 8007d6a:	eef0 7a40 	vmov.f32	s15, s0
 8007d6e:	4b6f      	ldr	r3, [pc, #444]	; (8007f2c <cppLoop+0x5fc>)
 8007d70:	edc3 7a00 	vstr	s15, [r3]
 8007d74:	486c      	ldr	r0, [pc, #432]	; (8007f28 <cppLoop+0x5f8>)
 8007d76:	f00c fb48 	bl	801440a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007d7a:	4b6d      	ldr	r3, [pc, #436]	; (8007f30 <cppLoop+0x600>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f3bf 8f5b 	dmb	ish
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf0c      	ite	eq
 8007d8c:	2301      	moveq	r3, #1
 8007d8e:	2300      	movne	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d015      	beq.n	8007dc2 <cppLoop+0x492>
 8007d96:	4866      	ldr	r0, [pc, #408]	; (8007f30 <cppLoop+0x600>)
 8007d98:	f00c fb2b 	bl	80143f2 <__cxa_guard_acquire>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bf14      	ite	ne
 8007da2:	2301      	movne	r3, #1
 8007da4:	2300      	moveq	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <cppLoop+0x492>
 8007dac:	4855      	ldr	r0, [pc, #340]	; (8007f04 <cppLoop+0x5d4>)
 8007dae:	f7fb ffdf 	bl	8003d70 <_ZN9LineTrace10getMaxDec2Ev>
 8007db2:	eef0 7a40 	vmov.f32	s15, s0
 8007db6:	4b5f      	ldr	r3, [pc, #380]	; (8007f34 <cppLoop+0x604>)
 8007db8:	edc3 7a00 	vstr	s15, [r3]
 8007dbc:	485c      	ldr	r0, [pc, #368]	; (8007f30 <cppLoop+0x600>)
 8007dbe:	f00c fb24 	bl	801440a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007dc2:	485d      	ldr	r0, [pc, #372]	; (8007f38 <cppLoop+0x608>)
 8007dc4:	f7fd fac6 	bl	8005354 <_ZN12RotarySwitch8getValueEv>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	f201 84e3 	bhi.w	8009796 <cppLoop+0x1e66>
 8007dd0:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <cppLoop+0x4a8>)
 8007dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd6:	bf00      	nop
 8007dd8:	08007e19 	.word	0x08007e19
 8007ddc:	08008205 	.word	0x08008205
 8007de0:	08008299 	.word	0x08008299
 8007de4:	080083eb 	.word	0x080083eb
 8007de8:	080084f1 	.word	0x080084f1
 8007dec:	08008775 	.word	0x08008775
 8007df0:	08008841 	.word	0x08008841
 8007df4:	08008ac1 	.word	0x08008ac1
 8007df8:	08008d55 	.word	0x08008d55
 8007dfc:	08008fd5 	.word	0x08008fd5
 8007e00:	0800935f 	.word	0x0800935f
 8007e04:	080093ff 	.word	0x080093ff
 8007e08:	08009475 	.word	0x08009475
 8007e0c:	0800950f 	.word	0x0800950f
 8007e10:	08009629 	.word	0x08009629
 8007e14:	080096e1 	.word	0x080096e1
	case 0:
		led.fullColor('W');
 8007e18:	2157      	movs	r1, #87	; 0x57
 8007e1a:	4848      	ldr	r0, [pc, #288]	; (8007f3c <cppLoop+0x60c>)
 8007e1c:	f7fa f83e 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e20:	f7f9 f93e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e24:	2100      	movs	r1, #0
 8007e26:	2000      	movs	r0, #0
 8007e28:	f7f9 f94a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007e2c:	4835      	ldr	r0, [pc, #212]	; (8007f04 <cppLoop+0x5d4>)
 8007e2e:	f7fb fe5f 	bl	8003af0 <_ZN9LineTrace5getKpEv>
 8007e32:	eeb0 7a40 	vmov.f32	s14, s0
 8007e36:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007f40 <cppLoop+0x610>
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	ee17 0a90 	vmov	r0, s15
 8007e42:	f7f8 fb99 	bl	8000578 <__aeabi_f2d>
 8007e46:	4603      	mov	r3, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	483d      	ldr	r0, [pc, #244]	; (8007f44 <cppLoop+0x614>)
 8007e50:	f7f9 f960 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e54:	2101      	movs	r1, #1
 8007e56:	2000      	movs	r0, #0
 8007e58:	f7f9 f932 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007e5c:	4829      	ldr	r0, [pc, #164]	; (8007f04 <cppLoop+0x5d4>)
 8007e5e:	f7fb fe56 	bl	8003b0e <_ZN9LineTrace5getKiEv>
 8007e62:	eeb0 7a40 	vmov.f32	s14, s0
 8007e66:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007f48 <cppLoop+0x618>
 8007e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6e:	ee17 0a90 	vmov	r0, s15
 8007e72:	f7f8 fb81 	bl	8000578 <__aeabi_f2d>
 8007e76:	4605      	mov	r5, r0
 8007e78:	460e      	mov	r6, r1
 8007e7a:	4822      	ldr	r0, [pc, #136]	; (8007f04 <cppLoop+0x5d4>)
 8007e7c:	f7fb fe56 	bl	8003b2c <_ZN9LineTrace5getKdEv>
 8007e80:	eeb0 7a40 	vmov.f32	s14, s0
 8007e84:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007f4c <cppLoop+0x61c>
 8007e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8c:	ee17 0a90 	vmov	r0, s15
 8007e90:	f7f8 fb72 	bl	8000578 <__aeabi_f2d>
 8007e94:	4603      	mov	r3, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	e9cd 3400 	strd	r3, r4, [sp]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4633      	mov	r3, r6
 8007ea0:	482b      	ldr	r0, [pc, #172]	; (8007f50 <cppLoop+0x620>)
 8007ea2:	f7f9 f937 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007ea6:	482b      	ldr	r0, [pc, #172]	; (8007f54 <cppLoop+0x624>)
 8007ea8:	f7f9 ff94 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	bf0c      	ite	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	2300      	movne	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d04f      	beq.n	8007f5c <cppLoop+0x62c>
			led.LR(-1, 1);
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec2:	481e      	ldr	r0, [pc, #120]	; (8007f3c <cppLoop+0x60c>)
 8007ec4:	f7fa f8a6 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ec8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ecc:	f001 fdac 	bl	8009a28 <HAL_Delay>

			selector++;
 8007ed0:	4b21      	ldr	r3, [pc, #132]	; (8007f58 <cppLoop+0x628>)
 8007ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	3301      	adds	r3, #1
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	b21a      	sxth	r2, r3
 8007ede:	4b1e      	ldr	r3, [pc, #120]	; (8007f58 <cppLoop+0x628>)
 8007ee0:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007ee2:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <cppLoop+0x628>)
 8007ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	dd02      	ble.n	8007ef2 <cppLoop+0x5c2>
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <cppLoop+0x628>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef8:	4810      	ldr	r0, [pc, #64]	; (8007f3c <cppLoop+0x60c>)
 8007efa:	f7fa f88b 	bl	8002014 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007efe:	f001 bc4c 	b.w	800979a <cppLoop+0x1e6a>
 8007f02:	bf00      	nop
 8007f04:	2001bc48 	.word	0x2001bc48
 8007f08:	2004132c 	.word	0x2004132c
 8007f0c:	20041330 	.word	0x20041330
 8007f10:	20041338 	.word	0x20041338
 8007f14:	20041334 	.word	0x20041334
 8007f18:	20041340 	.word	0x20041340
 8007f1c:	2004133c 	.word	0x2004133c
 8007f20:	20041348 	.word	0x20041348
 8007f24:	20041344 	.word	0x20041344
 8007f28:	20041350 	.word	0x20041350
 8007f2c:	2004134c 	.word	0x2004134c
 8007f30:	20041358 	.word	0x20041358
 8007f34:	20041354 	.word	0x20041354
 8007f38:	200005f8 	.word	0x200005f8
 8007f3c:	20000600 	.word	0x20000600
 8007f40:	447a0000 	.word	0x447a0000
 8007f44:	0801a150 	.word	0x0801a150
 8007f48:	42c80000 	.word	0x42c80000
 8007f4c:	461c4000 	.word	0x461c4000
 8007f50:	0801a15c 	.word	0x0801a15c
 8007f54:	200005f4 	.word	0x200005f4
 8007f58:	200412d6 	.word	0x200412d6
		else if(joy_stick.getValue() == JOY_R){
 8007f5c:	489e      	ldr	r0, [pc, #632]	; (80081d8 <cppLoop+0x8a8>)
 8007f5e:	f7f9 ff39 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d059      	beq.n	8008026 <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007f72:	2201      	movs	r2, #1
 8007f74:	f04f 31ff 	mov.w	r1, #4294967295
 8007f78:	4898      	ldr	r0, [pc, #608]	; (80081dc <cppLoop+0x8ac>)
 8007f7a:	f7fa f84b 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f7e:	2064      	movs	r0, #100	; 0x64
 8007f80:	f001 fd52 	bl	8009a28 <HAL_Delay>
			if(selector == 0){
 8007f84:	4b96      	ldr	r3, [pc, #600]	; (80081e0 <cppLoop+0x8b0>)
 8007f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d113      	bne.n	8007fb6 <cppLoop+0x686>
				adj_kp = adj_kp + 0.00001;
 8007f8e:	4b95      	ldr	r3, [pc, #596]	; (80081e4 <cppLoop+0x8b4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7f8 faf0 	bl	8000578 <__aeabi_f2d>
 8007f98:	a389      	add	r3, pc, #548	; (adr r3, 80081c0 <cppLoop+0x890>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f98d 	bl	80002bc <__adddf3>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f7f8 fe35 	bl	8000c18 <__aeabi_d2f>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b8c      	ldr	r3, [pc, #560]	; (80081e4 <cppLoop+0x8b4>)
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e02b      	b.n	800800e <cppLoop+0x6de>
			else if(selector == 1){
 8007fb6:	4b8a      	ldr	r3, [pc, #552]	; (80081e0 <cppLoop+0x8b0>)
 8007fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d113      	bne.n	8007fe8 <cppLoop+0x6b8>
				adj_ki = adj_ki + 0.0001;
 8007fc0:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <cppLoop+0x8b8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 fad7 	bl	8000578 <__aeabi_f2d>
 8007fca:	a37f      	add	r3, pc, #508	; (adr r3, 80081c8 <cppLoop+0x898>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f974 	bl	80002bc <__adddf3>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4618      	mov	r0, r3
 8007fda:	4621      	mov	r1, r4
 8007fdc:	f7f8 fe1c 	bl	8000c18 <__aeabi_d2f>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	4b81      	ldr	r3, [pc, #516]	; (80081e8 <cppLoop+0x8b8>)
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e012      	b.n	800800e <cppLoop+0x6de>
				adj_kd = adj_kd + 0.000001;
 8007fe8:	4b80      	ldr	r3, [pc, #512]	; (80081ec <cppLoop+0x8bc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f8 fac3 	bl	8000578 <__aeabi_f2d>
 8007ff2:	a377      	add	r3, pc, #476	; (adr r3, 80081d0 <cppLoop+0x8a0>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 f960 	bl	80002bc <__adddf3>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	4618      	mov	r0, r3
 8008002:	4621      	mov	r1, r4
 8008004:	f7f8 fe08 	bl	8000c18 <__aeabi_d2f>
 8008008:	4602      	mov	r2, r0
 800800a:	4b78      	ldr	r3, [pc, #480]	; (80081ec <cppLoop+0x8bc>)
 800800c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800800e:	2152      	movs	r1, #82	; 0x52
 8008010:	4872      	ldr	r0, [pc, #456]	; (80081dc <cppLoop+0x8ac>)
 8008012:	f7f9 ff43 	bl	8001e9c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008016:	2200      	movs	r2, #0
 8008018:	f04f 31ff 	mov.w	r1, #4294967295
 800801c:	486f      	ldr	r0, [pc, #444]	; (80081dc <cppLoop+0x8ac>)
 800801e:	f7f9 fff9 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008022:	f001 bbba 	b.w	800979a <cppLoop+0x1e6a>
		else if(joy_stick.getValue() == JOY_L){
 8008026:	486c      	ldr	r0, [pc, #432]	; (80081d8 <cppLoop+0x8a8>)
 8008028:	f7f9 fed4 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800802c:	4603      	mov	r3, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	bf0c      	ite	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	2300      	movne	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d059      	beq.n	80080f0 <cppLoop+0x7c0>
			led.LR(-1, 1);
 800803c:	2201      	movs	r2, #1
 800803e:	f04f 31ff 	mov.w	r1, #4294967295
 8008042:	4866      	ldr	r0, [pc, #408]	; (80081dc <cppLoop+0x8ac>)
 8008044:	f7f9 ffe6 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008048:	2064      	movs	r0, #100	; 0x64
 800804a:	f001 fced 	bl	8009a28 <HAL_Delay>
			if(selector == 0){
 800804e:	4b64      	ldr	r3, [pc, #400]	; (80081e0 <cppLoop+0x8b0>)
 8008050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d113      	bne.n	8008080 <cppLoop+0x750>
				adj_kp = adj_kp - 0.00001;
 8008058:	4b62      	ldr	r3, [pc, #392]	; (80081e4 <cppLoop+0x8b4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f7f8 fa8b 	bl	8000578 <__aeabi_f2d>
 8008062:	a357      	add	r3, pc, #348	; (adr r3, 80081c0 <cppLoop+0x890>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 f926 	bl	80002b8 <__aeabi_dsub>
 800806c:	4603      	mov	r3, r0
 800806e:	460c      	mov	r4, r1
 8008070:	4618      	mov	r0, r3
 8008072:	4621      	mov	r1, r4
 8008074:	f7f8 fdd0 	bl	8000c18 <__aeabi_d2f>
 8008078:	4602      	mov	r2, r0
 800807a:	4b5a      	ldr	r3, [pc, #360]	; (80081e4 <cppLoop+0x8b4>)
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e02b      	b.n	80080d8 <cppLoop+0x7a8>
			else if(selector == 1){
 8008080:	4b57      	ldr	r3, [pc, #348]	; (80081e0 <cppLoop+0x8b0>)
 8008082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d113      	bne.n	80080b2 <cppLoop+0x782>
				adj_ki = adj_ki - 0.0001;
 800808a:	4b57      	ldr	r3, [pc, #348]	; (80081e8 <cppLoop+0x8b8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f7f8 fa72 	bl	8000578 <__aeabi_f2d>
 8008094:	a34c      	add	r3, pc, #304	; (adr r3, 80081c8 <cppLoop+0x898>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f90d 	bl	80002b8 <__aeabi_dsub>
 800809e:	4603      	mov	r3, r0
 80080a0:	460c      	mov	r4, r1
 80080a2:	4618      	mov	r0, r3
 80080a4:	4621      	mov	r1, r4
 80080a6:	f7f8 fdb7 	bl	8000c18 <__aeabi_d2f>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b4e      	ldr	r3, [pc, #312]	; (80081e8 <cppLoop+0x8b8>)
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	e012      	b.n	80080d8 <cppLoop+0x7a8>
				adj_kd = adj_kd - 0.000001;
 80080b2:	4b4e      	ldr	r3, [pc, #312]	; (80081ec <cppLoop+0x8bc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f8 fa5e 	bl	8000578 <__aeabi_f2d>
 80080bc:	a344      	add	r3, pc, #272	; (adr r3, 80081d0 <cppLoop+0x8a0>)
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	f7f8 f8f9 	bl	80002b8 <__aeabi_dsub>
 80080c6:	4603      	mov	r3, r0
 80080c8:	460c      	mov	r4, r1
 80080ca:	4618      	mov	r0, r3
 80080cc:	4621      	mov	r1, r4
 80080ce:	f7f8 fda3 	bl	8000c18 <__aeabi_d2f>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4b45      	ldr	r3, [pc, #276]	; (80081ec <cppLoop+0x8bc>)
 80080d6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80080d8:	2152      	movs	r1, #82	; 0x52
 80080da:	4840      	ldr	r0, [pc, #256]	; (80081dc <cppLoop+0x8ac>)
 80080dc:	f7f9 fede 	bl	8001e9c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	f04f 31ff 	mov.w	r1, #4294967295
 80080e6:	483d      	ldr	r0, [pc, #244]	; (80081dc <cppLoop+0x8ac>)
 80080e8:	f7f9 ff94 	bl	8002014 <_ZN3LED2LREaa>
		break;
 80080ec:	f001 bb55 	b.w	800979a <cppLoop+0x1e6a>
		else if(joy_stick.getValue() == JOY_D){
 80080f0:	4839      	ldr	r0, [pc, #228]	; (80081d8 <cppLoop+0x8a8>)
 80080f2:	f7f9 fe6f 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	bf0c      	ite	eq
 80080fc:	2301      	moveq	r3, #1
 80080fe:	2300      	movne	r3, #0
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d011      	beq.n	800812a <cppLoop+0x7fa>
			led.LR(-1, 1);
 8008106:	2201      	movs	r2, #1
 8008108:	f04f 31ff 	mov.w	r1, #4294967295
 800810c:	4833      	ldr	r0, [pc, #204]	; (80081dc <cppLoop+0x8ac>)
 800810e:	f7f9 ff81 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008112:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008116:	f001 fc87 	bl	8009a28 <HAL_Delay>
			led.LR(-1, 0);
 800811a:	2200      	movs	r2, #0
 800811c:	f04f 31ff 	mov.w	r1, #4294967295
 8008120:	482e      	ldr	r0, [pc, #184]	; (80081dc <cppLoop+0x8ac>)
 8008122:	f7f9 ff77 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008126:	f001 bb38 	b.w	800979a <cppLoop+0x1e6a>
		else if(joy_stick.getValue() == JOY_C){
 800812a:	482b      	ldr	r0, [pc, #172]	; (80081d8 <cppLoop+0x8a8>)
 800812c:	f7f9 fe52 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008130:	4603      	mov	r3, r0
 8008132:	2b02      	cmp	r3, #2
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	f001 832c 	beq.w	800979a <cppLoop+0x1e6a>
			led.LR(-1, 1);
 8008142:	2201      	movs	r2, #1
 8008144:	f04f 31ff 	mov.w	r1, #4294967295
 8008148:	4824      	ldr	r0, [pc, #144]	; (80081dc <cppLoop+0x8ac>)
 800814a:	f7f9 ff63 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800814e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008152:	f001 fc69 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8008156:	2300      	movs	r3, #0
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	4b22      	ldr	r3, [pc, #136]	; (80081e4 <cppLoop+0x8b4>)
 800815c:	2201      	movs	r2, #1
 800815e:	4924      	ldr	r1, [pc, #144]	; (80081f0 <cppLoop+0x8c0>)
 8008160:	4824      	ldr	r0, [pc, #144]	; (80081f4 <cppLoop+0x8c4>)
 8008162:	f7f9 fa1f 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8008166:	2300      	movs	r3, #0
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <cppLoop+0x8b8>)
 800816c:	2201      	movs	r2, #1
 800816e:	4922      	ldr	r1, [pc, #136]	; (80081f8 <cppLoop+0x8c8>)
 8008170:	4820      	ldr	r0, [pc, #128]	; (80081f4 <cppLoop+0x8c4>)
 8008172:	f7f9 fa17 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8008176:	2300      	movs	r3, #0
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <cppLoop+0x8bc>)
 800817c:	2201      	movs	r2, #1
 800817e:	491f      	ldr	r1, [pc, #124]	; (80081fc <cppLoop+0x8cc>)
 8008180:	481c      	ldr	r0, [pc, #112]	; (80081f4 <cppLoop+0x8c4>)
 8008182:	f7f9 fa0f 	bl	80015a4 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008186:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <cppLoop+0x8b4>)
 8008188:	edd3 7a00 	vldr	s15, [r3]
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <cppLoop+0x8b8>)
 800818e:	ed93 7a00 	vldr	s14, [r3]
 8008192:	4b16      	ldr	r3, [pc, #88]	; (80081ec <cppLoop+0x8bc>)
 8008194:	edd3 6a00 	vldr	s13, [r3]
 8008198:	eeb0 1a66 	vmov.f32	s2, s13
 800819c:	eef0 0a47 	vmov.f32	s1, s14
 80081a0:	eeb0 0a67 	vmov.f32	s0, s15
 80081a4:	4816      	ldr	r0, [pc, #88]	; (8008200 <cppLoop+0x8d0>)
 80081a6:	f7fb fc71 	bl	8003a8c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80081aa:	2200      	movs	r2, #0
 80081ac:	f04f 31ff 	mov.w	r1, #4294967295
 80081b0:	480a      	ldr	r0, [pc, #40]	; (80081dc <cppLoop+0x8ac>)
 80081b2:	f7f9 ff2f 	bl	8002014 <_ZN3LED2LREaa>
		break;
 80081b6:	f001 baf0 	b.w	800979a <cppLoop+0x1e6a>
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w
 80081c0:	88e368f1 	.word	0x88e368f1
 80081c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80081c8:	eb1c432d 	.word	0xeb1c432d
 80081cc:	3f1a36e2 	.word	0x3f1a36e2
 80081d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80081d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80081d8:	200005f4 	.word	0x200005f4
 80081dc:	20000600 	.word	0x20000600
 80081e0:	200412d6 	.word	0x200412d6
 80081e4:	200412e4 	.word	0x200412e4
 80081e8:	200412ec 	.word	0x200412ec
 80081ec:	200412f4 	.word	0x200412f4
 80081f0:	0801a16c 	.word	0x0801a16c
 80081f4:	0801a174 	.word	0x0801a174
 80081f8:	0801a17c 	.word	0x0801a17c
 80081fc:	0801a184 	.word	0x0801a184
 8008200:	2001bc48 	.word	0x2001bc48

	case 1:
		led.fullColor('C');
 8008204:	2143      	movs	r1, #67	; 0x43
 8008206:	48ae      	ldr	r0, [pc, #696]	; (80084c0 <cppLoop+0xb90>)
 8008208:	f7f9 fe48 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 800820c:	f7f8 ff48 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008210:	2100      	movs	r1, #0
 8008212:	2000      	movs	r0, #0
 8008214:	f7f8 ff54 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008218:	48aa      	ldr	r0, [pc, #680]	; (80084c4 <cppLoop+0xb94>)
 800821a:	f7f8 ff7b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800821e:	2101      	movs	r1, #1
 8008220:	2000      	movs	r0, #0
 8008222:	f7f8 ff4d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008226:	4ba8      	ldr	r3, [pc, #672]	; (80084c8 <cppLoop+0xb98>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7f8 f9a4 	bl	8000578 <__aeabi_f2d>
 8008230:	4603      	mov	r3, r0
 8008232:	460c      	mov	r4, r1
 8008234:	461a      	mov	r2, r3
 8008236:	4623      	mov	r3, r4
 8008238:	48a4      	ldr	r0, [pc, #656]	; (80084cc <cppLoop+0xb9c>)
 800823a:	f7f8 ff6b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800823e:	48a4      	ldr	r0, [pc, #656]	; (80084d0 <cppLoop+0xba0>)
 8008240:	f7f9 fdc8 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008244:	4603      	mov	r3, r0
 8008246:	2b02      	cmp	r3, #2
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	f001 82a4 	beq.w	800979e <cppLoop+0x1e6e>
			HAL_Delay(500);
 8008256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800825a:	f001 fbe5 	bl	8009a28 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800825e:	4b9a      	ldr	r3, [pc, #616]	; (80084c8 <cppLoop+0xb98>)
 8008260:	edd3 7a00 	vldr	s15, [r3]
 8008264:	eeb0 0a67 	vmov.f32	s0, s15
 8008268:	489a      	ldr	r0, [pc, #616]	; (80084d4 <cppLoop+0xba4>)
 800826a:	f7fb fc9b 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	2101      	movs	r1, #1
 8008274:	4892      	ldr	r0, [pc, #584]	; (80084c0 <cppLoop+0xb90>)
 8008276:	f7f9 fecd 	bl	8002014 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 800827a:	2100      	movs	r1, #0
 800827c:	4895      	ldr	r0, [pc, #596]	; (80084d4 <cppLoop+0xba4>)
 800827e:	f7fc f8cd 	bl	800441c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008282:	4894      	ldr	r0, [pc, #592]	; (80084d4 <cppLoop+0xba4>)
 8008284:	f7fb ffbc 	bl	8004200 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008288:	f04f 32ff 	mov.w	r2, #4294967295
 800828c:	2100      	movs	r1, #0
 800828e:	488c      	ldr	r0, [pc, #560]	; (80084c0 <cppLoop+0xb90>)
 8008290:	f7f9 fec0 	bl	8002014 <_ZN3LED2LREaa>
		}

		break;
 8008294:	f001 ba83 	b.w	800979e <cppLoop+0x1e6e>

	case 2:
		led.fullColor('B');
 8008298:	2142      	movs	r1, #66	; 0x42
 800829a:	4889      	ldr	r0, [pc, #548]	; (80084c0 <cppLoop+0xb90>)
 800829c:	f7f9 fdfe 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 80082a0:	f7f8 fefe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082a4:	2100      	movs	r1, #0
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7f8 ff0a 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80082ac:	4885      	ldr	r0, [pc, #532]	; (80084c4 <cppLoop+0xb94>)
 80082ae:	f7f8 ff31 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082b2:	2101      	movs	r1, #1
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7f8 ff03 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80082ba:	4b83      	ldr	r3, [pc, #524]	; (80084c8 <cppLoop+0xb98>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7f8 f95a 	bl	8000578 <__aeabi_f2d>
 80082c4:	4603      	mov	r3, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	461a      	mov	r2, r3
 80082ca:	4623      	mov	r3, r4
 80082cc:	4882      	ldr	r0, [pc, #520]	; (80084d8 <cppLoop+0xba8>)
 80082ce:	f7f8 ff21 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80082d2:	487f      	ldr	r0, [pc, #508]	; (80084d0 <cppLoop+0xba0>)
 80082d4:	f7f9 fd7e 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b10      	cmp	r3, #16
 80082dc:	bf0c      	ite	eq
 80082de:	2301      	moveq	r3, #1
 80082e0:	2300      	movne	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d023      	beq.n	8008330 <cppLoop+0xa00>
			led.LR(-1, 1);
 80082e8:	2201      	movs	r2, #1
 80082ea:	f04f 31ff 	mov.w	r1, #4294967295
 80082ee:	4874      	ldr	r0, [pc, #464]	; (80084c0 <cppLoop+0xb90>)
 80082f0:	f7f9 fe90 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082f4:	2064      	movs	r0, #100	; 0x64
 80082f6:	f001 fb97 	bl	8009a28 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80082fa:	4b73      	ldr	r3, [pc, #460]	; (80084c8 <cppLoop+0xb98>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7f8 f93a 	bl	8000578 <__aeabi_f2d>
 8008304:	a36c      	add	r3, pc, #432	; (adr r3, 80084b8 <cppLoop+0xb88>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffd7 	bl	80002bc <__adddf3>
 800830e:	4603      	mov	r3, r0
 8008310:	460c      	mov	r4, r1
 8008312:	4618      	mov	r0, r3
 8008314:	4621      	mov	r1, r4
 8008316:	f7f8 fc7f 	bl	8000c18 <__aeabi_d2f>
 800831a:	4602      	mov	r2, r0
 800831c:	4b6a      	ldr	r3, [pc, #424]	; (80084c8 <cppLoop+0xb98>)
 800831e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008320:	2200      	movs	r2, #0
 8008322:	f04f 31ff 	mov.w	r1, #4294967295
 8008326:	4866      	ldr	r0, [pc, #408]	; (80084c0 <cppLoop+0xb90>)
 8008328:	f7f9 fe74 	bl	8002014 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800832c:	f001 ba39 	b.w	80097a2 <cppLoop+0x1e72>
		else if(joy_stick.getValue() == JOY_L){
 8008330:	4867      	ldr	r0, [pc, #412]	; (80084d0 <cppLoop+0xba0>)
 8008332:	f7f9 fd4f 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008336:	4603      	mov	r3, r0
 8008338:	2b01      	cmp	r3, #1
 800833a:	bf0c      	ite	eq
 800833c:	2301      	moveq	r3, #1
 800833e:	2300      	movne	r3, #0
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d023      	beq.n	800838e <cppLoop+0xa5e>
			led.LR(-1, 1);
 8008346:	2201      	movs	r2, #1
 8008348:	f04f 31ff 	mov.w	r1, #4294967295
 800834c:	485c      	ldr	r0, [pc, #368]	; (80084c0 <cppLoop+0xb90>)
 800834e:	f7f9 fe61 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008352:	2064      	movs	r0, #100	; 0x64
 8008354:	f001 fb68 	bl	8009a28 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008358:	4b5b      	ldr	r3, [pc, #364]	; (80084c8 <cppLoop+0xb98>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	f7f8 f90b 	bl	8000578 <__aeabi_f2d>
 8008362:	a355      	add	r3, pc, #340	; (adr r3, 80084b8 <cppLoop+0xb88>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f7 ffa6 	bl	80002b8 <__aeabi_dsub>
 800836c:	4603      	mov	r3, r0
 800836e:	460c      	mov	r4, r1
 8008370:	4618      	mov	r0, r3
 8008372:	4621      	mov	r1, r4
 8008374:	f7f8 fc50 	bl	8000c18 <__aeabi_d2f>
 8008378:	4602      	mov	r2, r0
 800837a:	4b53      	ldr	r3, [pc, #332]	; (80084c8 <cppLoop+0xb98>)
 800837c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800837e:	2200      	movs	r2, #0
 8008380:	f04f 31ff 	mov.w	r1, #4294967295
 8008384:	484e      	ldr	r0, [pc, #312]	; (80084c0 <cppLoop+0xb90>)
 8008386:	f7f9 fe45 	bl	8002014 <_ZN3LED2LREaa>
		break;
 800838a:	f001 ba0a 	b.w	80097a2 <cppLoop+0x1e72>
		else if(joy_stick.getValue() == JOY_C){
 800838e:	4850      	ldr	r0, [pc, #320]	; (80084d0 <cppLoop+0xba0>)
 8008390:	f7f9 fd20 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008394:	4603      	mov	r3, r0
 8008396:	2b02      	cmp	r3, #2
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f001 81fe 	beq.w	80097a2 <cppLoop+0x1e72>
			led.LR(-1, 1);
 80083a6:	2201      	movs	r2, #1
 80083a8:	f04f 31ff 	mov.w	r1, #4294967295
 80083ac:	4844      	ldr	r0, [pc, #272]	; (80084c0 <cppLoop+0xb90>)
 80083ae:	f7f9 fe31 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083b6:	f001 fb37 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80083ba:	2300      	movs	r3, #0
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <cppLoop+0xb98>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	4946      	ldr	r1, [pc, #280]	; (80084dc <cppLoop+0xbac>)
 80083c4:	4846      	ldr	r0, [pc, #280]	; (80084e0 <cppLoop+0xbb0>)
 80083c6:	f7f9 f8ed 	bl	80015a4 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80083ca:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <cppLoop+0xb98>)
 80083cc:	edd3 7a00 	vldr	s15, [r3]
 80083d0:	eeb0 0a67 	vmov.f32	s0, s15
 80083d4:	483f      	ldr	r0, [pc, #252]	; (80084d4 <cppLoop+0xba4>)
 80083d6:	f7fb fbe5 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80083da:	2200      	movs	r2, #0
 80083dc:	f04f 31ff 	mov.w	r1, #4294967295
 80083e0:	4837      	ldr	r0, [pc, #220]	; (80084c0 <cppLoop+0xb90>)
 80083e2:	f7f9 fe17 	bl	8002014 <_ZN3LED2LREaa>
		break;
 80083e6:	f001 b9dc 	b.w	80097a2 <cppLoop+0x1e72>

	case 3:
		led.fullColor('Y');
 80083ea:	2159      	movs	r1, #89	; 0x59
 80083ec:	4834      	ldr	r0, [pc, #208]	; (80084c0 <cppLoop+0xb90>)
 80083ee:	f7f9 fd55 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 80083f2:	f7f8 fe55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083f6:	2100      	movs	r1, #0
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7f8 fe61 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80083fe:	4b39      	ldr	r3, [pc, #228]	; (80084e4 <cppLoop+0xbb4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7f8 f8b8 	bl	8000578 <__aeabi_f2d>
 8008408:	4603      	mov	r3, r0
 800840a:	460c      	mov	r4, r1
 800840c:	461a      	mov	r2, r3
 800840e:	4623      	mov	r3, r4
 8008410:	4835      	ldr	r0, [pc, #212]	; (80084e8 <cppLoop+0xbb8>)
 8008412:	f7f8 fe7f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008416:	2101      	movs	r1, #1
 8008418:	2000      	movs	r0, #0
 800841a:	f7f8 fe51 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800841e:	4b33      	ldr	r3, [pc, #204]	; (80084ec <cppLoop+0xbbc>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 f8a8 	bl	8000578 <__aeabi_f2d>
 8008428:	4603      	mov	r3, r0
 800842a:	460c      	mov	r4, r1
 800842c:	461a      	mov	r2, r3
 800842e:	4623      	mov	r3, r4
 8008430:	4826      	ldr	r0, [pc, #152]	; (80084cc <cppLoop+0xb9c>)
 8008432:	f7f8 fe6f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008436:	4826      	ldr	r0, [pc, #152]	; (80084d0 <cppLoop+0xba0>)
 8008438:	f7f9 fccc 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800843c:	4603      	mov	r3, r0
 800843e:	2b02      	cmp	r3, #2
 8008440:	bf0c      	ite	eq
 8008442:	2301      	moveq	r3, #1
 8008444:	2300      	movne	r3, #0
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	f001 81ac 	beq.w	80097a6 <cppLoop+0x1e76>
			HAL_Delay(500);
 800844e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008452:	f001 fae9 	bl	8009a28 <HAL_Delay>

			led.LR(1, -1);
 8008456:	f04f 32ff 	mov.w	r2, #4294967295
 800845a:	2101      	movs	r1, #1
 800845c:	4818      	ldr	r0, [pc, #96]	; (80084c0 <cppLoop+0xb90>)
 800845e:	f7f9 fdd9 	bl	8002014 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008462:	2101      	movs	r1, #1
 8008464:	481b      	ldr	r0, [pc, #108]	; (80084d4 <cppLoop+0xba4>)
 8008466:	f7fb ffd9 	bl	800441c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800846a:	4b20      	ldr	r3, [pc, #128]	; (80084ec <cppLoop+0xbbc>)
 800846c:	edd3 7a00 	vldr	s15, [r3]
 8008470:	eeb0 0a67 	vmov.f32	s0, s15
 8008474:	4817      	ldr	r0, [pc, #92]	; (80084d4 <cppLoop+0xba4>)
 8008476:	f7fb fb95 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800847a:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <cppLoop+0xbb4>)
 800847c:	edd3 7a00 	vldr	s15, [r3]
 8008480:	eeb0 0a67 	vmov.f32	s0, s15
 8008484:	4813      	ldr	r0, [pc, #76]	; (80084d4 <cppLoop+0xba4>)
 8008486:	f7fb fb9d 	bl	8003bc4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800848a:	4b18      	ldr	r3, [pc, #96]	; (80084ec <cppLoop+0xbbc>)
 800848c:	edd3 7a00 	vldr	s15, [r3]
 8008490:	eeb0 0a67 	vmov.f32	s0, s15
 8008494:	480f      	ldr	r0, [pc, #60]	; (80084d4 <cppLoop+0xba4>)
 8008496:	f7fb fbb5 	bl	8003c04 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 800849a:	480e      	ldr	r0, [pc, #56]	; (80084d4 <cppLoop+0xba4>)
 800849c:	f7fa fdf2 	bl	8003084 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80084a0:	480c      	ldr	r0, [pc, #48]	; (80084d4 <cppLoop+0xba4>)
 80084a2:	f7fb fead 	bl	8004200 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295
 80084aa:	2100      	movs	r1, #0
 80084ac:	4804      	ldr	r0, [pc, #16]	; (80084c0 <cppLoop+0xb90>)
 80084ae:	f7f9 fdb1 	bl	8002014 <_ZN3LED2LREaa>
		}

		break;
 80084b2:	f001 b978 	b.w	80097a6 <cppLoop+0x1e76>
 80084b6:	bf00      	nop
 80084b8:	9999999a 	.word	0x9999999a
 80084bc:	3fb99999 	.word	0x3fb99999
 80084c0:	20000600 	.word	0x20000600
 80084c4:	0801a18c 	.word	0x0801a18c
 80084c8:	20041314 	.word	0x20041314
 80084cc:	0801a198 	.word	0x0801a198
 80084d0:	200005f4 	.word	0x200005f4
 80084d4:	2001bc48 	.word	0x2001bc48
 80084d8:	0801a1a4 	.word	0x0801a1a4
 80084dc:	0801a1b0 	.word	0x0801a1b0
 80084e0:	0801a174 	.word	0x0801a174
 80084e4:	2004131c 	.word	0x2004131c
 80084e8:	0801a1bc 	.word	0x0801a1bc
 80084ec:	2004132c 	.word	0x2004132c

	case 4:
		led.fullColor('G');
 80084f0:	2147      	movs	r1, #71	; 0x47
 80084f2:	4895      	ldr	r0, [pc, #596]	; (8008748 <cppLoop+0xe18>)
 80084f4:	f7f9 fcd2 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 80084f8:	f7f8 fdd2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084fc:	2100      	movs	r1, #0
 80084fe:	2000      	movs	r0, #0
 8008500:	f7f8 fdde 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008504:	4891      	ldr	r0, [pc, #580]	; (800874c <cppLoop+0xe1c>)
 8008506:	f7fb fbad 	bl	8003c64 <_ZN9LineTrace14getMaxVelocityEv>
 800850a:	ee10 3a10 	vmov	r3, s0
 800850e:	4618      	mov	r0, r3
 8008510:	f7f8 f832 	bl	8000578 <__aeabi_f2d>
 8008514:	4603      	mov	r3, r0
 8008516:	460c      	mov	r4, r1
 8008518:	461a      	mov	r2, r3
 800851a:	4623      	mov	r3, r4
 800851c:	488c      	ldr	r0, [pc, #560]	; (8008750 <cppLoop+0xe20>)
 800851e:	f7f8 fdf9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008522:	2101      	movs	r1, #1
 8008524:	2000      	movs	r0, #0
 8008526:	f7f8 fdcb 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800852a:	4888      	ldr	r0, [pc, #544]	; (800874c <cppLoop+0xe1c>)
 800852c:	f7fb fbba 	bl	8003ca4 <_ZN9LineTrace14getMinVelocityEv>
 8008530:	ee10 3a10 	vmov	r3, s0
 8008534:	4618      	mov	r0, r3
 8008536:	f7f8 f81f 	bl	8000578 <__aeabi_f2d>
 800853a:	4603      	mov	r3, r0
 800853c:	460c      	mov	r4, r1
 800853e:	461a      	mov	r2, r3
 8008540:	4623      	mov	r3, r4
 8008542:	4884      	ldr	r0, [pc, #528]	; (8008754 <cppLoop+0xe24>)
 8008544:	f7f8 fde6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008548:	4883      	ldr	r0, [pc, #524]	; (8008758 <cppLoop+0xe28>)
 800854a:	f7f9 fc43 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800854e:	4603      	mov	r3, r0
 8008550:	2b08      	cmp	r3, #8
 8008552:	bf0c      	ite	eq
 8008554:	2301      	moveq	r3, #1
 8008556:	2300      	movne	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d022      	beq.n	80085a4 <cppLoop+0xc74>
			led.LR(-1, 1);
 800855e:	2201      	movs	r2, #1
 8008560:	f04f 31ff 	mov.w	r1, #4294967295
 8008564:	4878      	ldr	r0, [pc, #480]	; (8008748 <cppLoop+0xe18>)
 8008566:	f7f9 fd55 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800856a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800856e:	f001 fa5b 	bl	8009a28 <HAL_Delay>

			selector_vel++;
 8008572:	4b7a      	ldr	r3, [pc, #488]	; (800875c <cppLoop+0xe2c>)
 8008574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008578:	b29b      	uxth	r3, r3
 800857a:	3301      	adds	r3, #1
 800857c:	b29b      	uxth	r3, r3
 800857e:	b21a      	sxth	r2, r3
 8008580:	4b76      	ldr	r3, [pc, #472]	; (800875c <cppLoop+0xe2c>)
 8008582:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008584:	4b75      	ldr	r3, [pc, #468]	; (800875c <cppLoop+0xe2c>)
 8008586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800858a:	2b01      	cmp	r3, #1
 800858c:	dd02      	ble.n	8008594 <cppLoop+0xc64>
 800858e:	4b73      	ldr	r3, [pc, #460]	; (800875c <cppLoop+0xe2c>)
 8008590:	2200      	movs	r2, #0
 8008592:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008594:	2200      	movs	r2, #0
 8008596:	f04f 31ff 	mov.w	r1, #4294967295
 800859a:	486b      	ldr	r0, [pc, #428]	; (8008748 <cppLoop+0xe18>)
 800859c:	f7f9 fd3a 	bl	8002014 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80085a0:	f001 b903 	b.w	80097aa <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_R){
 80085a4:	486c      	ldr	r0, [pc, #432]	; (8008758 <cppLoop+0xe28>)
 80085a6:	f7f9 fc15 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b10      	cmp	r3, #16
 80085ae:	bf0c      	ite	eq
 80085b0:	2301      	moveq	r3, #1
 80085b2:	2300      	movne	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d03c      	beq.n	8008634 <cppLoop+0xd04>
			led.LR(-1, 1);
 80085ba:	2201      	movs	r2, #1
 80085bc:	f04f 31ff 	mov.w	r1, #4294967295
 80085c0:	4861      	ldr	r0, [pc, #388]	; (8008748 <cppLoop+0xe18>)
 80085c2:	f7f9 fd27 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085c6:	2064      	movs	r0, #100	; 0x64
 80085c8:	f001 fa2e 	bl	8009a28 <HAL_Delay>
			if(selector_vel == 0)
 80085cc:	4b63      	ldr	r3, [pc, #396]	; (800875c <cppLoop+0xe2c>)
 80085ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d113      	bne.n	80085fe <cppLoop+0xcce>
				adj_max_velocity = adj_max_velocity + 0.1;
 80085d6:	4b62      	ldr	r3, [pc, #392]	; (8008760 <cppLoop+0xe30>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f7 ffcc 	bl	8000578 <__aeabi_f2d>
 80085e0:	a357      	add	r3, pc, #348	; (adr r3, 8008740 <cppLoop+0xe10>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f7 fe69 	bl	80002bc <__adddf3>
 80085ea:	4603      	mov	r3, r0
 80085ec:	460c      	mov	r4, r1
 80085ee:	4618      	mov	r0, r3
 80085f0:	4621      	mov	r1, r4
 80085f2:	f7f8 fb11 	bl	8000c18 <__aeabi_d2f>
 80085f6:	4602      	mov	r2, r0
 80085f8:	4b59      	ldr	r3, [pc, #356]	; (8008760 <cppLoop+0xe30>)
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e012      	b.n	8008624 <cppLoop+0xcf4>
				adj_min_velocity = adj_min_velocity + 0.1;
 80085fe:	4b59      	ldr	r3, [pc, #356]	; (8008764 <cppLoop+0xe34>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 ffb8 	bl	8000578 <__aeabi_f2d>
 8008608:	a34d      	add	r3, pc, #308	; (adr r3, 8008740 <cppLoop+0xe10>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f7 fe55 	bl	80002bc <__adddf3>
 8008612:	4603      	mov	r3, r0
 8008614:	460c      	mov	r4, r1
 8008616:	4618      	mov	r0, r3
 8008618:	4621      	mov	r1, r4
 800861a:	f7f8 fafd 	bl	8000c18 <__aeabi_d2f>
 800861e:	4602      	mov	r2, r0
 8008620:	4b50      	ldr	r3, [pc, #320]	; (8008764 <cppLoop+0xe34>)
 8008622:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008624:	2200      	movs	r2, #0
 8008626:	f04f 31ff 	mov.w	r1, #4294967295
 800862a:	4847      	ldr	r0, [pc, #284]	; (8008748 <cppLoop+0xe18>)
 800862c:	f7f9 fcf2 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008630:	f001 b8bb 	b.w	80097aa <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_L){
 8008634:	4848      	ldr	r0, [pc, #288]	; (8008758 <cppLoop+0xe28>)
 8008636:	f7f9 fbcd 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800863a:	4603      	mov	r3, r0
 800863c:	2b01      	cmp	r3, #1
 800863e:	bf0c      	ite	eq
 8008640:	2301      	moveq	r3, #1
 8008642:	2300      	movne	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d03c      	beq.n	80086c4 <cppLoop+0xd94>
			led.LR(-1, 1);
 800864a:	2201      	movs	r2, #1
 800864c:	f04f 31ff 	mov.w	r1, #4294967295
 8008650:	483d      	ldr	r0, [pc, #244]	; (8008748 <cppLoop+0xe18>)
 8008652:	f7f9 fcdf 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008656:	2064      	movs	r0, #100	; 0x64
 8008658:	f001 f9e6 	bl	8009a28 <HAL_Delay>
			if(selector_vel == 0)
 800865c:	4b3f      	ldr	r3, [pc, #252]	; (800875c <cppLoop+0xe2c>)
 800865e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d113      	bne.n	800868e <cppLoop+0xd5e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008666:	4b3e      	ldr	r3, [pc, #248]	; (8008760 <cppLoop+0xe30>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f7f7 ff84 	bl	8000578 <__aeabi_f2d>
 8008670:	a333      	add	r3, pc, #204	; (adr r3, 8008740 <cppLoop+0xe10>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 fe1f 	bl	80002b8 <__aeabi_dsub>
 800867a:	4603      	mov	r3, r0
 800867c:	460c      	mov	r4, r1
 800867e:	4618      	mov	r0, r3
 8008680:	4621      	mov	r1, r4
 8008682:	f7f8 fac9 	bl	8000c18 <__aeabi_d2f>
 8008686:	4602      	mov	r2, r0
 8008688:	4b35      	ldr	r3, [pc, #212]	; (8008760 <cppLoop+0xe30>)
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	e012      	b.n	80086b4 <cppLoop+0xd84>
				adj_min_velocity = adj_min_velocity - 0.1;
 800868e:	4b35      	ldr	r3, [pc, #212]	; (8008764 <cppLoop+0xe34>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f7f7 ff70 	bl	8000578 <__aeabi_f2d>
 8008698:	a329      	add	r3, pc, #164	; (adr r3, 8008740 <cppLoop+0xe10>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 fe0b 	bl	80002b8 <__aeabi_dsub>
 80086a2:	4603      	mov	r3, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	4618      	mov	r0, r3
 80086a8:	4621      	mov	r1, r4
 80086aa:	f7f8 fab5 	bl	8000c18 <__aeabi_d2f>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b2c      	ldr	r3, [pc, #176]	; (8008764 <cppLoop+0xe34>)
 80086b2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80086b4:	2200      	movs	r2, #0
 80086b6:	f04f 31ff 	mov.w	r1, #4294967295
 80086ba:	4823      	ldr	r0, [pc, #140]	; (8008748 <cppLoop+0xe18>)
 80086bc:	f7f9 fcaa 	bl	8002014 <_ZN3LED2LREaa>
		break;
 80086c0:	f001 b873 	b.w	80097aa <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_C){
 80086c4:	4824      	ldr	r0, [pc, #144]	; (8008758 <cppLoop+0xe28>)
 80086c6:	f7f9 fb85 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	bf0c      	ite	eq
 80086d0:	2301      	moveq	r3, #1
 80086d2:	2300      	movne	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f001 8067 	beq.w	80097aa <cppLoop+0x1e7a>
			led.LR(-1, 1);
 80086dc:	2201      	movs	r2, #1
 80086de:	f04f 31ff 	mov.w	r1, #4294967295
 80086e2:	4819      	ldr	r0, [pc, #100]	; (8008748 <cppLoop+0xe18>)
 80086e4:	f7f9 fc96 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80086e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80086ec:	f001 f99c 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80086f0:	2300      	movs	r3, #0
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <cppLoop+0xe30>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	491b      	ldr	r1, [pc, #108]	; (8008768 <cppLoop+0xe38>)
 80086fa:	481c      	ldr	r0, [pc, #112]	; (800876c <cppLoop+0xe3c>)
 80086fc:	f7f8 ff52 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008700:	2300      	movs	r3, #0
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	4b17      	ldr	r3, [pc, #92]	; (8008764 <cppLoop+0xe34>)
 8008706:	2201      	movs	r2, #1
 8008708:	4919      	ldr	r1, [pc, #100]	; (8008770 <cppLoop+0xe40>)
 800870a:	4818      	ldr	r0, [pc, #96]	; (800876c <cppLoop+0xe3c>)
 800870c:	f7f8 ff4a 	bl	80015a4 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008710:	4b13      	ldr	r3, [pc, #76]	; (8008760 <cppLoop+0xe30>)
 8008712:	edd3 7a00 	vldr	s15, [r3]
 8008716:	eeb0 0a67 	vmov.f32	s0, s15
 800871a:	480c      	ldr	r0, [pc, #48]	; (800874c <cppLoop+0xe1c>)
 800871c:	f7fb fa52 	bl	8003bc4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008720:	4b10      	ldr	r3, [pc, #64]	; (8008764 <cppLoop+0xe34>)
 8008722:	edd3 7a00 	vldr	s15, [r3]
 8008726:	eeb0 0a67 	vmov.f32	s0, s15
 800872a:	4808      	ldr	r0, [pc, #32]	; (800874c <cppLoop+0xe1c>)
 800872c:	f7fb fa6a 	bl	8003c04 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008730:	2200      	movs	r2, #0
 8008732:	f04f 31ff 	mov.w	r1, #4294967295
 8008736:	4804      	ldr	r0, [pc, #16]	; (8008748 <cppLoop+0xe18>)
 8008738:	f7f9 fc6c 	bl	8002014 <_ZN3LED2LREaa>
		break;
 800873c:	f001 b835 	b.w	80097aa <cppLoop+0x1e7a>
 8008740:	9999999a 	.word	0x9999999a
 8008744:	3fb99999 	.word	0x3fb99999
 8008748:	20000600 	.word	0x20000600
 800874c:	2001bc48 	.word	0x2001bc48
 8008750:	0801a1bc 	.word	0x0801a1bc
 8008754:	0801a1a4 	.word	0x0801a1a4
 8008758:	200005f4 	.word	0x200005f4
 800875c:	200412dc 	.word	0x200412dc
 8008760:	2004131c 	.word	0x2004131c
 8008764:	2004132c 	.word	0x2004132c
 8008768:	0801a1c8 	.word	0x0801a1c8
 800876c:	0801a174 	.word	0x0801a174
 8008770:	0801a1d4 	.word	0x0801a1d4

	case 5:
		led.fullColor('M');
 8008774:	214d      	movs	r1, #77	; 0x4d
 8008776:	48aa      	ldr	r0, [pc, #680]	; (8008a20 <cppLoop+0x10f0>)
 8008778:	f7f9 fb90 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 800877c:	f7f8 fc90 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008780:	2100      	movs	r1, #0
 8008782:	2000      	movs	r0, #0
 8008784:	f7f8 fc9c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008788:	4ba6      	ldr	r3, [pc, #664]	; (8008a24 <cppLoop+0x10f4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f7f7 fef3 	bl	8000578 <__aeabi_f2d>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
 8008796:	461a      	mov	r2, r3
 8008798:	4623      	mov	r3, r4
 800879a:	48a3      	ldr	r0, [pc, #652]	; (8008a28 <cppLoop+0x10f8>)
 800879c:	f7f8 fcba 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087a0:	2101      	movs	r1, #1
 80087a2:	2000      	movs	r0, #0
 80087a4:	f7f8 fc8c 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80087a8:	4ba0      	ldr	r3, [pc, #640]	; (8008a2c <cppLoop+0x10fc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f7 fee3 	bl	8000578 <__aeabi_f2d>
 80087b2:	4603      	mov	r3, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	461a      	mov	r2, r3
 80087b8:	4623      	mov	r3, r4
 80087ba:	489d      	ldr	r0, [pc, #628]	; (8008a30 <cppLoop+0x1100>)
 80087bc:	f7f8 fcaa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087c0:	489c      	ldr	r0, [pc, #624]	; (8008a34 <cppLoop+0x1104>)
 80087c2:	f7f9 fb07 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	bf0c      	ite	eq
 80087cc:	2301      	moveq	r3, #1
 80087ce:	2300      	movne	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 87eb 	beq.w	80097ae <cppLoop+0x1e7e>
			HAL_Delay(500);
 80087d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087dc:	f001 f924 	bl	8009a28 <HAL_Delay>

			led.LR(1, -1);
 80087e0:	f04f 32ff 	mov.w	r2, #4294967295
 80087e4:	2101      	movs	r1, #1
 80087e6:	488e      	ldr	r0, [pc, #568]	; (8008a20 <cppLoop+0x10f0>)
 80087e8:	f7f9 fc14 	bl	8002014 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80087ec:	2102      	movs	r1, #2
 80087ee:	4892      	ldr	r0, [pc, #584]	; (8008a38 <cppLoop+0x1108>)
 80087f0:	f7fb fe14 	bl	800441c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80087f4:	4b8d      	ldr	r3, [pc, #564]	; (8008a2c <cppLoop+0x10fc>)
 80087f6:	edd3 7a00 	vldr	s15, [r3]
 80087fa:	eeb0 0a67 	vmov.f32	s0, s15
 80087fe:	488e      	ldr	r0, [pc, #568]	; (8008a38 <cppLoop+0x1108>)
 8008800:	f7fb f9d0 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008804:	4b87      	ldr	r3, [pc, #540]	; (8008a24 <cppLoop+0x10f4>)
 8008806:	edd3 7a00 	vldr	s15, [r3]
 800880a:	eeb0 0a67 	vmov.f32	s0, s15
 800880e:	488a      	ldr	r0, [pc, #552]	; (8008a38 <cppLoop+0x1108>)
 8008810:	f7fb f9e8 	bl	8003be4 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008814:	4b85      	ldr	r3, [pc, #532]	; (8008a2c <cppLoop+0x10fc>)
 8008816:	edd3 7a00 	vldr	s15, [r3]
 800881a:	eeb0 0a67 	vmov.f32	s0, s15
 800881e:	4886      	ldr	r0, [pc, #536]	; (8008a38 <cppLoop+0x1108>)
 8008820:	f7fb fa00 	bl	8003c24 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008824:	4884      	ldr	r0, [pc, #528]	; (8008a38 <cppLoop+0x1108>)
 8008826:	f7fa fc2d 	bl	8003084 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800882a:	4883      	ldr	r0, [pc, #524]	; (8008a38 <cppLoop+0x1108>)
 800882c:	f7fb fce8 	bl	8004200 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008830:	f04f 32ff 	mov.w	r2, #4294967295
 8008834:	2100      	movs	r1, #0
 8008836:	487a      	ldr	r0, [pc, #488]	; (8008a20 <cppLoop+0x10f0>)
 8008838:	f7f9 fbec 	bl	8002014 <_ZN3LED2LREaa>
		}

		break;
 800883c:	f000 bfb7 	b.w	80097ae <cppLoop+0x1e7e>

	case 6:
		led.fullColor('R');
 8008840:	2152      	movs	r1, #82	; 0x52
 8008842:	4877      	ldr	r0, [pc, #476]	; (8008a20 <cppLoop+0x10f0>)
 8008844:	f7f9 fb2a 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008848:	f7f8 fc2a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800884c:	2100      	movs	r1, #0
 800884e:	2000      	movs	r0, #0
 8008850:	f7f8 fc36 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008854:	4878      	ldr	r0, [pc, #480]	; (8008a38 <cppLoop+0x1108>)
 8008856:	f7fb fa15 	bl	8003c84 <_ZN9LineTrace15getMaxVelocity2Ev>
 800885a:	ee10 3a10 	vmov	r3, s0
 800885e:	4618      	mov	r0, r3
 8008860:	f7f7 fe8a 	bl	8000578 <__aeabi_f2d>
 8008864:	4603      	mov	r3, r0
 8008866:	460c      	mov	r4, r1
 8008868:	461a      	mov	r2, r3
 800886a:	4623      	mov	r3, r4
 800886c:	486e      	ldr	r0, [pc, #440]	; (8008a28 <cppLoop+0x10f8>)
 800886e:	f7f8 fc51 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008872:	2101      	movs	r1, #1
 8008874:	2000      	movs	r0, #0
 8008876:	f7f8 fc23 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800887a:	486f      	ldr	r0, [pc, #444]	; (8008a38 <cppLoop+0x1108>)
 800887c:	f7fb fa22 	bl	8003cc4 <_ZN9LineTrace15getMinVelocity2Ev>
 8008880:	ee10 3a10 	vmov	r3, s0
 8008884:	4618      	mov	r0, r3
 8008886:	f7f7 fe77 	bl	8000578 <__aeabi_f2d>
 800888a:	4603      	mov	r3, r0
 800888c:	460c      	mov	r4, r1
 800888e:	461a      	mov	r2, r3
 8008890:	4623      	mov	r3, r4
 8008892:	486a      	ldr	r0, [pc, #424]	; (8008a3c <cppLoop+0x110c>)
 8008894:	f7f8 fc3e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008898:	4866      	ldr	r0, [pc, #408]	; (8008a34 <cppLoop+0x1104>)
 800889a:	f7f9 fa9b 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d022      	beq.n	80088f4 <cppLoop+0xfc4>
			led.LR(-1, 1);
 80088ae:	2201      	movs	r2, #1
 80088b0:	f04f 31ff 	mov.w	r1, #4294967295
 80088b4:	485a      	ldr	r0, [pc, #360]	; (8008a20 <cppLoop+0x10f0>)
 80088b6:	f7f9 fbad 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088be:	f001 f8b3 	bl	8009a28 <HAL_Delay>

			selector_vel2++;
 80088c2:	4b5f      	ldr	r3, [pc, #380]	; (8008a40 <cppLoop+0x1110>)
 80088c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3301      	adds	r3, #1
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	b21a      	sxth	r2, r3
 80088d0:	4b5b      	ldr	r3, [pc, #364]	; (8008a40 <cppLoop+0x1110>)
 80088d2:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80088d4:	4b5a      	ldr	r3, [pc, #360]	; (8008a40 <cppLoop+0x1110>)
 80088d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	dd02      	ble.n	80088e4 <cppLoop+0xfb4>
 80088de:	4b58      	ldr	r3, [pc, #352]	; (8008a40 <cppLoop+0x1110>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80088e4:	2200      	movs	r2, #0
 80088e6:	f04f 31ff 	mov.w	r1, #4294967295
 80088ea:	484d      	ldr	r0, [pc, #308]	; (8008a20 <cppLoop+0x10f0>)
 80088ec:	f7f9 fb92 	bl	8002014 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80088f0:	f000 bf5f 	b.w	80097b2 <cppLoop+0x1e82>
		else if(joy_stick.getValue() == JOY_R){
 80088f4:	484f      	ldr	r0, [pc, #316]	; (8008a34 <cppLoop+0x1104>)
 80088f6:	f7f9 fa6d 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b10      	cmp	r3, #16
 80088fe:	bf0c      	ite	eq
 8008900:	2301      	moveq	r3, #1
 8008902:	2300      	movne	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d03c      	beq.n	8008984 <cppLoop+0x1054>
			led.LR(-1, 1);
 800890a:	2201      	movs	r2, #1
 800890c:	f04f 31ff 	mov.w	r1, #4294967295
 8008910:	4843      	ldr	r0, [pc, #268]	; (8008a20 <cppLoop+0x10f0>)
 8008912:	f7f9 fb7f 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008916:	2064      	movs	r0, #100	; 0x64
 8008918:	f001 f886 	bl	8009a28 <HAL_Delay>
			if(selector_vel2 == 0)
 800891c:	4b48      	ldr	r3, [pc, #288]	; (8008a40 <cppLoop+0x1110>)
 800891e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d113      	bne.n	800894e <cppLoop+0x101e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008926:	4b3f      	ldr	r3, [pc, #252]	; (8008a24 <cppLoop+0x10f4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f7f7 fe24 	bl	8000578 <__aeabi_f2d>
 8008930:	a339      	add	r3, pc, #228	; (adr r3, 8008a18 <cppLoop+0x10e8>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fcc1 	bl	80002bc <__adddf3>
 800893a:	4603      	mov	r3, r0
 800893c:	460c      	mov	r4, r1
 800893e:	4618      	mov	r0, r3
 8008940:	4621      	mov	r1, r4
 8008942:	f7f8 f969 	bl	8000c18 <__aeabi_d2f>
 8008946:	4602      	mov	r2, r0
 8008948:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <cppLoop+0x10f4>)
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e012      	b.n	8008974 <cppLoop+0x1044>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <cppLoop+0x10fc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f7f7 fe10 	bl	8000578 <__aeabi_f2d>
 8008958:	a32f      	add	r3, pc, #188	; (adr r3, 8008a18 <cppLoop+0x10e8>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fcad 	bl	80002bc <__adddf3>
 8008962:	4603      	mov	r3, r0
 8008964:	460c      	mov	r4, r1
 8008966:	4618      	mov	r0, r3
 8008968:	4621      	mov	r1, r4
 800896a:	f7f8 f955 	bl	8000c18 <__aeabi_d2f>
 800896e:	4602      	mov	r2, r0
 8008970:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <cppLoop+0x10fc>)
 8008972:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008974:	2200      	movs	r2, #0
 8008976:	f04f 31ff 	mov.w	r1, #4294967295
 800897a:	4829      	ldr	r0, [pc, #164]	; (8008a20 <cppLoop+0x10f0>)
 800897c:	f7f9 fb4a 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008980:	f000 bf17 	b.w	80097b2 <cppLoop+0x1e82>
		else if(joy_stick.getValue() == JOY_L){
 8008984:	482b      	ldr	r0, [pc, #172]	; (8008a34 <cppLoop+0x1104>)
 8008986:	f7f9 fa25 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800898a:	4603      	mov	r3, r0
 800898c:	2b01      	cmp	r3, #1
 800898e:	bf0c      	ite	eq
 8008990:	2301      	moveq	r3, #1
 8008992:	2300      	movne	r3, #0
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d054      	beq.n	8008a44 <cppLoop+0x1114>
			led.LR(-1, 1);
 800899a:	2201      	movs	r2, #1
 800899c:	f04f 31ff 	mov.w	r1, #4294967295
 80089a0:	481f      	ldr	r0, [pc, #124]	; (8008a20 <cppLoop+0x10f0>)
 80089a2:	f7f9 fb37 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089a6:	2064      	movs	r0, #100	; 0x64
 80089a8:	f001 f83e 	bl	8009a28 <HAL_Delay>
			if(selector_vel2 == 0)
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <cppLoop+0x1110>)
 80089ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d113      	bne.n	80089de <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80089b6:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <cppLoop+0x10f4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f7 fddc 	bl	8000578 <__aeabi_f2d>
 80089c0:	a315      	add	r3, pc, #84	; (adr r3, 8008a18 <cppLoop+0x10e8>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f7 fc77 	bl	80002b8 <__aeabi_dsub>
 80089ca:	4603      	mov	r3, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	4618      	mov	r0, r3
 80089d0:	4621      	mov	r1, r4
 80089d2:	f7f8 f921 	bl	8000c18 <__aeabi_d2f>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <cppLoop+0x10f4>)
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	e012      	b.n	8008a04 <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <cppLoop+0x10fc>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f7 fdc8 	bl	8000578 <__aeabi_f2d>
 80089e8:	a30b      	add	r3, pc, #44	; (adr r3, 8008a18 <cppLoop+0x10e8>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fc63 	bl	80002b8 <__aeabi_dsub>
 80089f2:	4603      	mov	r3, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	4618      	mov	r0, r3
 80089f8:	4621      	mov	r1, r4
 80089fa:	f7f8 f90d 	bl	8000c18 <__aeabi_d2f>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <cppLoop+0x10fc>)
 8008a02:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a04:	2200      	movs	r2, #0
 8008a06:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0a:	4805      	ldr	r0, [pc, #20]	; (8008a20 <cppLoop+0x10f0>)
 8008a0c:	f7f9 fb02 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008a10:	f000 becf 	b.w	80097b2 <cppLoop+0x1e82>
 8008a14:	f3af 8000 	nop.w
 8008a18:	9999999a 	.word	0x9999999a
 8008a1c:	3fb99999 	.word	0x3fb99999
 8008a20:	20000600 	.word	0x20000600
 8008a24:	20041324 	.word	0x20041324
 8008a28:	0801a1e0 	.word	0x0801a1e0
 8008a2c:	20041334 	.word	0x20041334
 8008a30:	0801a198 	.word	0x0801a198
 8008a34:	200005f4 	.word	0x200005f4
 8008a38:	2001bc48 	.word	0x2001bc48
 8008a3c:	0801a1a4 	.word	0x0801a1a4
 8008a40:	200412de 	.word	0x200412de
		else if(joy_stick.getValue() == JOY_C){
 8008a44:	48b4      	ldr	r0, [pc, #720]	; (8008d18 <cppLoop+0x13e8>)
 8008a46:	f7f9 f9c5 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	bf0c      	ite	eq
 8008a50:	2301      	moveq	r3, #1
 8008a52:	2300      	movne	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 86ab 	beq.w	80097b2 <cppLoop+0x1e82>
			led.LR(-1, 1);
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a62:	48ae      	ldr	r0, [pc, #696]	; (8008d1c <cppLoop+0x13ec>)
 8008a64:	f7f9 fad6 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a6c:	f000 ffdc 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008a70:	2300      	movs	r3, #0
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	4baa      	ldr	r3, [pc, #680]	; (8008d20 <cppLoop+0x13f0>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	49aa      	ldr	r1, [pc, #680]	; (8008d24 <cppLoop+0x13f4>)
 8008a7a:	48ab      	ldr	r0, [pc, #684]	; (8008d28 <cppLoop+0x13f8>)
 8008a7c:	f7f8 fd92 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008a80:	2300      	movs	r3, #0
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4ba9      	ldr	r3, [pc, #676]	; (8008d2c <cppLoop+0x13fc>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	49a9      	ldr	r1, [pc, #676]	; (8008d30 <cppLoop+0x1400>)
 8008a8a:	48a7      	ldr	r0, [pc, #668]	; (8008d28 <cppLoop+0x13f8>)
 8008a8c:	f7f8 fd8a 	bl	80015a4 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008a90:	4ba3      	ldr	r3, [pc, #652]	; (8008d20 <cppLoop+0x13f0>)
 8008a92:	edd3 7a00 	vldr	s15, [r3]
 8008a96:	eeb0 0a67 	vmov.f32	s0, s15
 8008a9a:	48a6      	ldr	r0, [pc, #664]	; (8008d34 <cppLoop+0x1404>)
 8008a9c:	f7fb f8a2 	bl	8003be4 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008aa0:	4ba2      	ldr	r3, [pc, #648]	; (8008d2c <cppLoop+0x13fc>)
 8008aa2:	edd3 7a00 	vldr	s15, [r3]
 8008aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aaa:	48a2      	ldr	r0, [pc, #648]	; (8008d34 <cppLoop+0x1404>)
 8008aac:	f7fb f8ba 	bl	8003c24 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab6:	4899      	ldr	r0, [pc, #612]	; (8008d1c <cppLoop+0x13ec>)
 8008ab8:	f7f9 faac 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008abc:	f000 be79 	b.w	80097b2 <cppLoop+0x1e82>

	case 7:
		led.fullColor('W');
 8008ac0:	2157      	movs	r1, #87	; 0x57
 8008ac2:	4896      	ldr	r0, [pc, #600]	; (8008d1c <cppLoop+0x13ec>)
 8008ac4:	f7f9 f9ea 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ac8:	f7f8 faea 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008acc:	2100      	movs	r1, #0
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f7f8 faf6 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008ad4:	4897      	ldr	r0, [pc, #604]	; (8008d34 <cppLoop+0x1404>)
 8008ad6:	f7fb f939 	bl	8003d4c <_ZN9LineTrace9getMaxAccEv>
 8008ada:	ee10 3a10 	vmov	r3, s0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f7 fd4a 	bl	8000578 <__aeabi_f2d>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4623      	mov	r3, r4
 8008aec:	4892      	ldr	r0, [pc, #584]	; (8008d38 <cppLoop+0x1408>)
 8008aee:	f7f8 fb11 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008af2:	2101      	movs	r1, #1
 8008af4:	2000      	movs	r0, #0
 8008af6:	f7f8 fae3 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008afa:	488e      	ldr	r0, [pc, #568]	; (8008d34 <cppLoop+0x1404>)
 8008afc:	f7fb f95c 	bl	8003db8 <_ZN9LineTrace9getMaxDecEv>
 8008b00:	ee10 3a10 	vmov	r3, s0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f7 fd37 	bl	8000578 <__aeabi_f2d>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4623      	mov	r3, r4
 8008b12:	488a      	ldr	r0, [pc, #552]	; (8008d3c <cppLoop+0x140c>)
 8008b14:	f7f8 fafe 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b18:	487f      	ldr	r0, [pc, #508]	; (8008d18 <cppLoop+0x13e8>)
 8008b1a:	f7f9 f95b 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d022      	beq.n	8008b74 <cppLoop+0x1244>
			led.LR(-1, 1);
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f04f 31ff 	mov.w	r1, #4294967295
 8008b34:	4879      	ldr	r0, [pc, #484]	; (8008d1c <cppLoop+0x13ec>)
 8008b36:	f7f9 fa6d 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b3e:	f000 ff73 	bl	8009a28 <HAL_Delay>

			selector_acc++;
 8008b42:	4b7f      	ldr	r3, [pc, #508]	; (8008d40 <cppLoop+0x1410>)
 8008b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	b21a      	sxth	r2, r3
 8008b50:	4b7b      	ldr	r3, [pc, #492]	; (8008d40 <cppLoop+0x1410>)
 8008b52:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008b54:	4b7a      	ldr	r3, [pc, #488]	; (8008d40 <cppLoop+0x1410>)
 8008b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	dd02      	ble.n	8008b64 <cppLoop+0x1234>
 8008b5e:	4b78      	ldr	r3, [pc, #480]	; (8008d40 <cppLoop+0x1410>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b64:	2200      	movs	r2, #0
 8008b66:	f04f 31ff 	mov.w	r1, #4294967295
 8008b6a:	486c      	ldr	r0, [pc, #432]	; (8008d1c <cppLoop+0x13ec>)
 8008b6c:	f7f9 fa52 	bl	8002014 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008b70:	f000 be21 	b.w	80097b6 <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_R){
 8008b74:	4868      	ldr	r0, [pc, #416]	; (8008d18 <cppLoop+0x13e8>)
 8008b76:	f7f9 f92d 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b10      	cmp	r3, #16
 8008b7e:	bf0c      	ite	eq
 8008b80:	2301      	moveq	r3, #1
 8008b82:	2300      	movne	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d03c      	beq.n	8008c04 <cppLoop+0x12d4>
			led.LR(-1, 1);
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b90:	4862      	ldr	r0, [pc, #392]	; (8008d1c <cppLoop+0x13ec>)
 8008b92:	f7f9 fa3f 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b96:	2064      	movs	r0, #100	; 0x64
 8008b98:	f000 ff46 	bl	8009a28 <HAL_Delay>
			if(selector_acc == 0){
 8008b9c:	4b68      	ldr	r3, [pc, #416]	; (8008d40 <cppLoop+0x1410>)
 8008b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d113      	bne.n	8008bce <cppLoop+0x129e>
				adj_acc = adj_acc + 0.1;
 8008ba6:	4b67      	ldr	r3, [pc, #412]	; (8008d44 <cppLoop+0x1414>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f7 fce4 	bl	8000578 <__aeabi_f2d>
 8008bb0:	a357      	add	r3, pc, #348	; (adr r3, 8008d10 <cppLoop+0x13e0>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb81 	bl	80002bc <__adddf3>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	f7f8 f829 	bl	8000c18 <__aeabi_d2f>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4b5e      	ldr	r3, [pc, #376]	; (8008d44 <cppLoop+0x1414>)
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e012      	b.n	8008bf4 <cppLoop+0x12c4>
				adj_dec = adj_dec + 0.1;
 8008bce:	4b5e      	ldr	r3, [pc, #376]	; (8008d48 <cppLoop+0x1418>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7f7 fcd0 	bl	8000578 <__aeabi_f2d>
 8008bd8:	a34d      	add	r3, pc, #308	; (adr r3, 8008d10 <cppLoop+0x13e0>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb6d 	bl	80002bc <__adddf3>
 8008be2:	4603      	mov	r3, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	4618      	mov	r0, r3
 8008be8:	4621      	mov	r1, r4
 8008bea:	f7f8 f815 	bl	8000c18 <__aeabi_d2f>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	4b55      	ldr	r3, [pc, #340]	; (8008d48 <cppLoop+0x1418>)
 8008bf2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bfa:	4848      	ldr	r0, [pc, #288]	; (8008d1c <cppLoop+0x13ec>)
 8008bfc:	f7f9 fa0a 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008c00:	f000 bdd9 	b.w	80097b6 <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_L){
 8008c04:	4844      	ldr	r0, [pc, #272]	; (8008d18 <cppLoop+0x13e8>)
 8008c06:	f7f9 f8e5 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	bf0c      	ite	eq
 8008c10:	2301      	moveq	r3, #1
 8008c12:	2300      	movne	r3, #0
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d03c      	beq.n	8008c94 <cppLoop+0x1364>
			led.LR(-1, 1);
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c20:	483e      	ldr	r0, [pc, #248]	; (8008d1c <cppLoop+0x13ec>)
 8008c22:	f7f9 f9f7 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c26:	2064      	movs	r0, #100	; 0x64
 8008c28:	f000 fefe 	bl	8009a28 <HAL_Delay>
			if(selector_acc == 0){
 8008c2c:	4b44      	ldr	r3, [pc, #272]	; (8008d40 <cppLoop+0x1410>)
 8008c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d113      	bne.n	8008c5e <cppLoop+0x132e>
				adj_acc = adj_acc - 0.1;
 8008c36:	4b43      	ldr	r3, [pc, #268]	; (8008d44 <cppLoop+0x1414>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f7 fc9c 	bl	8000578 <__aeabi_f2d>
 8008c40:	a333      	add	r3, pc, #204	; (adr r3, 8008d10 <cppLoop+0x13e0>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f7 fb37 	bl	80002b8 <__aeabi_dsub>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	4618      	mov	r0, r3
 8008c50:	4621      	mov	r1, r4
 8008c52:	f7f7 ffe1 	bl	8000c18 <__aeabi_d2f>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b3a      	ldr	r3, [pc, #232]	; (8008d44 <cppLoop+0x1414>)
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	e012      	b.n	8008c84 <cppLoop+0x1354>
				adj_dec = adj_dec - 0.1;
 8008c5e:	4b3a      	ldr	r3, [pc, #232]	; (8008d48 <cppLoop+0x1418>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f7 fc88 	bl	8000578 <__aeabi_f2d>
 8008c68:	a329      	add	r3, pc, #164	; (adr r3, 8008d10 <cppLoop+0x13e0>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fb23 	bl	80002b8 <__aeabi_dsub>
 8008c72:	4603      	mov	r3, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	4618      	mov	r0, r3
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7f7 ffcd 	bl	8000c18 <__aeabi_d2f>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	4b31      	ldr	r3, [pc, #196]	; (8008d48 <cppLoop+0x1418>)
 8008c82:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c84:	2200      	movs	r2, #0
 8008c86:	f04f 31ff 	mov.w	r1, #4294967295
 8008c8a:	4824      	ldr	r0, [pc, #144]	; (8008d1c <cppLoop+0x13ec>)
 8008c8c:	f7f9 f9c2 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008c90:	f000 bd91 	b.w	80097b6 <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_C){
 8008c94:	4820      	ldr	r0, [pc, #128]	; (8008d18 <cppLoop+0x13e8>)
 8008c96:	f7f9 f89d 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8585 	beq.w	80097b6 <cppLoop+0x1e86>
			led.LR(-1, 1);
 8008cac:	2201      	movs	r2, #1
 8008cae:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb2:	481a      	ldr	r0, [pc, #104]	; (8008d1c <cppLoop+0x13ec>)
 8008cb4:	f7f9 f9ae 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cbc:	f000 feb4 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4b1f      	ldr	r3, [pc, #124]	; (8008d44 <cppLoop+0x1414>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4920      	ldr	r1, [pc, #128]	; (8008d4c <cppLoop+0x141c>)
 8008cca:	4817      	ldr	r0, [pc, #92]	; (8008d28 <cppLoop+0x13f8>)
 8008ccc:	f7f8 fc6a 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	4b1c      	ldr	r3, [pc, #112]	; (8008d48 <cppLoop+0x1418>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	491d      	ldr	r1, [pc, #116]	; (8008d50 <cppLoop+0x1420>)
 8008cda:	4813      	ldr	r0, [pc, #76]	; (8008d28 <cppLoop+0x13f8>)
 8008cdc:	f7f8 fc62 	bl	80015a4 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008ce0:	4b18      	ldr	r3, [pc, #96]	; (8008d44 <cppLoop+0x1414>)
 8008ce2:	edd3 7a00 	vldr	s15, [r3]
 8008ce6:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <cppLoop+0x1418>)
 8008ce8:	ed93 7a00 	vldr	s14, [r3]
 8008cec:	eef0 0a47 	vmov.f32	s1, s14
 8008cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8008cf4:	480f      	ldr	r0, [pc, #60]	; (8008d34 <cppLoop+0x1404>)
 8008cf6:	f7fa fff5 	bl	8003ce4 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8008d00:	4806      	ldr	r0, [pc, #24]	; (8008d1c <cppLoop+0x13ec>)
 8008d02:	f7f9 f987 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008d06:	f000 bd56 	b.w	80097b6 <cppLoop+0x1e86>
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w
 8008d10:	9999999a 	.word	0x9999999a
 8008d14:	3fb99999 	.word	0x3fb99999
 8008d18:	200005f4 	.word	0x200005f4
 8008d1c:	20000600 	.word	0x20000600
 8008d20:	20041324 	.word	0x20041324
 8008d24:	0801a1ec 	.word	0x0801a1ec
 8008d28:	0801a174 	.word	0x0801a174
 8008d2c:	20041334 	.word	0x20041334
 8008d30:	0801a1f8 	.word	0x0801a1f8
 8008d34:	2001bc48 	.word	0x2001bc48
 8008d38:	0801a204 	.word	0x0801a204
 8008d3c:	0801a210 	.word	0x0801a210
 8008d40:	200412d8 	.word	0x200412d8
 8008d44:	2004133c 	.word	0x2004133c
 8008d48:	20041344 	.word	0x20041344
 8008d4c:	0801a21c 	.word	0x0801a21c
 8008d50:	0801a224 	.word	0x0801a224

	case 8:
		led.fullColor('W');
 8008d54:	2157      	movs	r1, #87	; 0x57
 8008d56:	4894      	ldr	r0, [pc, #592]	; (8008fa8 <cppLoop+0x1678>)
 8008d58:	f7f9 f8a0 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d5c:	f7f8 f9a0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d60:	2100      	movs	r1, #0
 8008d62:	2000      	movs	r0, #0
 8008d64:	f7f8 f9ac 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008d68:	4890      	ldr	r0, [pc, #576]	; (8008fac <cppLoop+0x167c>)
 8008d6a:	f7fb f813 	bl	8003d94 <_ZN9LineTrace10getMaxAcc2Ev>
 8008d6e:	ee10 3a10 	vmov	r3, s0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f7 fc00 	bl	8000578 <__aeabi_f2d>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4623      	mov	r3, r4
 8008d80:	488b      	ldr	r0, [pc, #556]	; (8008fb0 <cppLoop+0x1680>)
 8008d82:	f7f8 f9c7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d86:	2101      	movs	r1, #1
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f7f8 f999 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008d8e:	4887      	ldr	r0, [pc, #540]	; (8008fac <cppLoop+0x167c>)
 8008d90:	f7fa ffee 	bl	8003d70 <_ZN9LineTrace10getMaxDec2Ev>
 8008d94:	ee10 3a10 	vmov	r3, s0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7f7 fbed 	bl	8000578 <__aeabi_f2d>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	461a      	mov	r2, r3
 8008da4:	4623      	mov	r3, r4
 8008da6:	4883      	ldr	r0, [pc, #524]	; (8008fb4 <cppLoop+0x1684>)
 8008da8:	f7f8 f9b4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008dac:	4882      	ldr	r0, [pc, #520]	; (8008fb8 <cppLoop+0x1688>)
 8008dae:	f7f9 f811 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b08      	cmp	r3, #8
 8008db6:	bf0c      	ite	eq
 8008db8:	2301      	moveq	r3, #1
 8008dba:	2300      	movne	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d022      	beq.n	8008e08 <cppLoop+0x14d8>
			led.LR(-1, 1);
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8008dc8:	4877      	ldr	r0, [pc, #476]	; (8008fa8 <cppLoop+0x1678>)
 8008dca:	f7f9 f923 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008dce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008dd2:	f000 fe29 	bl	8009a28 <HAL_Delay>

			selector_acc2++;
 8008dd6:	4b79      	ldr	r3, [pc, #484]	; (8008fbc <cppLoop+0x168c>)
 8008dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3301      	adds	r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	b21a      	sxth	r2, r3
 8008de4:	4b75      	ldr	r3, [pc, #468]	; (8008fbc <cppLoop+0x168c>)
 8008de6:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008de8:	4b74      	ldr	r3, [pc, #464]	; (8008fbc <cppLoop+0x168c>)
 8008dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	dd02      	ble.n	8008df8 <cppLoop+0x14c8>
 8008df2:	4b72      	ldr	r3, [pc, #456]	; (8008fbc <cppLoop+0x168c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8008dfe:	486a      	ldr	r0, [pc, #424]	; (8008fa8 <cppLoop+0x1678>)
 8008e00:	f7f9 f908 	bl	8002014 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008e04:	f000 bcd9 	b.w	80097ba <cppLoop+0x1e8a>
		else if(joy_stick.getValue() == JOY_R){
 8008e08:	486b      	ldr	r0, [pc, #428]	; (8008fb8 <cppLoop+0x1688>)
 8008e0a:	f7f8 ffe3 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b10      	cmp	r3, #16
 8008e12:	bf0c      	ite	eq
 8008e14:	2301      	moveq	r3, #1
 8008e16:	2300      	movne	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d03c      	beq.n	8008e98 <cppLoop+0x1568>
			led.LR(-1, 1);
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f04f 31ff 	mov.w	r1, #4294967295
 8008e24:	4860      	ldr	r0, [pc, #384]	; (8008fa8 <cppLoop+0x1678>)
 8008e26:	f7f9 f8f5 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e2a:	2064      	movs	r0, #100	; 0x64
 8008e2c:	f000 fdfc 	bl	8009a28 <HAL_Delay>
			if(selector_acc2 == 0){
 8008e30:	4b62      	ldr	r3, [pc, #392]	; (8008fbc <cppLoop+0x168c>)
 8008e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d113      	bne.n	8008e62 <cppLoop+0x1532>
				adj_acc2 = adj_acc2 + 0.1;
 8008e3a:	4b61      	ldr	r3, [pc, #388]	; (8008fc0 <cppLoop+0x1690>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f7 fb9a 	bl	8000578 <__aeabi_f2d>
 8008e44:	a356      	add	r3, pc, #344	; (adr r3, 8008fa0 <cppLoop+0x1670>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 fa37 	bl	80002bc <__adddf3>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	4618      	mov	r0, r3
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7f7 fedf 	bl	8000c18 <__aeabi_d2f>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b58      	ldr	r3, [pc, #352]	; (8008fc0 <cppLoop+0x1690>)
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	e012      	b.n	8008e88 <cppLoop+0x1558>
				adj_dec2 = adj_dec2 + 0.1;
 8008e62:	4b58      	ldr	r3, [pc, #352]	; (8008fc4 <cppLoop+0x1694>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7f7 fb86 	bl	8000578 <__aeabi_f2d>
 8008e6c:	a34c      	add	r3, pc, #304	; (adr r3, 8008fa0 <cppLoop+0x1670>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fa23 	bl	80002bc <__adddf3>
 8008e76:	4603      	mov	r3, r0
 8008e78:	460c      	mov	r4, r1
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	f7f7 fecb 	bl	8000c18 <__aeabi_d2f>
 8008e82:	4602      	mov	r2, r0
 8008e84:	4b4f      	ldr	r3, [pc, #316]	; (8008fc4 <cppLoop+0x1694>)
 8008e86:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8e:	4846      	ldr	r0, [pc, #280]	; (8008fa8 <cppLoop+0x1678>)
 8008e90:	f7f9 f8c0 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008e94:	f000 bc91 	b.w	80097ba <cppLoop+0x1e8a>
		else if(joy_stick.getValue() == JOY_L){
 8008e98:	4847      	ldr	r0, [pc, #284]	; (8008fb8 <cppLoop+0x1688>)
 8008e9a:	f7f8 ff9b 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2301      	moveq	r3, #1
 8008ea6:	2300      	movne	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d03c      	beq.n	8008f28 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008eb4:	483c      	ldr	r0, [pc, #240]	; (8008fa8 <cppLoop+0x1678>)
 8008eb6:	f7f9 f8ad 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008eba:	2064      	movs	r0, #100	; 0x64
 8008ebc:	f000 fdb4 	bl	8009a28 <HAL_Delay>
			if(selector_acc2 == 0){
 8008ec0:	4b3e      	ldr	r3, [pc, #248]	; (8008fbc <cppLoop+0x168c>)
 8008ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d113      	bne.n	8008ef2 <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 - 0.1;
 8008eca:	4b3d      	ldr	r3, [pc, #244]	; (8008fc0 <cppLoop+0x1690>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f7 fb52 	bl	8000578 <__aeabi_f2d>
 8008ed4:	a332      	add	r3, pc, #200	; (adr r3, 8008fa0 <cppLoop+0x1670>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f9ed 	bl	80002b8 <__aeabi_dsub>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7f7 fe97 	bl	8000c18 <__aeabi_d2f>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b34      	ldr	r3, [pc, #208]	; (8008fc0 <cppLoop+0x1690>)
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	e012      	b.n	8008f18 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 - 0.1;
 8008ef2:	4b34      	ldr	r3, [pc, #208]	; (8008fc4 <cppLoop+0x1694>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f7 fb3e 	bl	8000578 <__aeabi_f2d>
 8008efc:	a328      	add	r3, pc, #160	; (adr r3, 8008fa0 <cppLoop+0x1670>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 f9d9 	bl	80002b8 <__aeabi_dsub>
 8008f06:	4603      	mov	r3, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	f7f7 fe83 	bl	8000c18 <__aeabi_d2f>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b2b      	ldr	r3, [pc, #172]	; (8008fc4 <cppLoop+0x1694>)
 8008f16:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f1e:	4822      	ldr	r0, [pc, #136]	; (8008fa8 <cppLoop+0x1678>)
 8008f20:	f7f9 f878 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008f24:	f000 bc49 	b.w	80097ba <cppLoop+0x1e8a>
		else if(joy_stick.getValue() == JOY_C){
 8008f28:	4823      	ldr	r0, [pc, #140]	; (8008fb8 <cppLoop+0x1688>)
 8008f2a:	f7f8 ff53 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	bf0c      	ite	eq
 8008f34:	2301      	moveq	r3, #1
 8008f36:	2300      	movne	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 843d 	beq.w	80097ba <cppLoop+0x1e8a>
			led.LR(-1, 1);
 8008f40:	2201      	movs	r2, #1
 8008f42:	f04f 31ff 	mov.w	r1, #4294967295
 8008f46:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <cppLoop+0x1678>)
 8008f48:	f7f9 f864 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f50:	f000 fd6a 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <cppLoop+0x1690>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	491a      	ldr	r1, [pc, #104]	; (8008fc8 <cppLoop+0x1698>)
 8008f5e:	481b      	ldr	r0, [pc, #108]	; (8008fcc <cppLoop+0x169c>)
 8008f60:	f7f8 fb20 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008f64:	2300      	movs	r3, #0
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <cppLoop+0x1694>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	4918      	ldr	r1, [pc, #96]	; (8008fd0 <cppLoop+0x16a0>)
 8008f6e:	4817      	ldr	r0, [pc, #92]	; (8008fcc <cppLoop+0x169c>)
 8008f70:	f7f8 fb18 	bl	80015a4 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008f74:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <cppLoop+0x1690>)
 8008f76:	edd3 7a00 	vldr	s15, [r3]
 8008f7a:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <cppLoop+0x1694>)
 8008f7c:	ed93 7a00 	vldr	s14, [r3]
 8008f80:	eef0 0a47 	vmov.f32	s1, s14
 8008f84:	eeb0 0a67 	vmov.f32	s0, s15
 8008f88:	4808      	ldr	r0, [pc, #32]	; (8008fac <cppLoop+0x167c>)
 8008f8a:	f7fa fec5 	bl	8003d18 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f04f 31ff 	mov.w	r1, #4294967295
 8008f94:	4804      	ldr	r0, [pc, #16]	; (8008fa8 <cppLoop+0x1678>)
 8008f96:	f7f9 f83d 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8008f9a:	f000 bc0e 	b.w	80097ba <cppLoop+0x1e8a>
 8008f9e:	bf00      	nop
 8008fa0:	9999999a 	.word	0x9999999a
 8008fa4:	3fb99999 	.word	0x3fb99999
 8008fa8:	20000600 	.word	0x20000600
 8008fac:	2001bc48 	.word	0x2001bc48
 8008fb0:	0801a22c 	.word	0x0801a22c
 8008fb4:	0801a238 	.word	0x0801a238
 8008fb8:	200005f4 	.word	0x200005f4
 8008fbc:	200412da 	.word	0x200412da
 8008fc0:	2004134c 	.word	0x2004134c
 8008fc4:	20041354 	.word	0x20041354
 8008fc8:	0801a244 	.word	0x0801a244
 8008fcc:	0801a174 	.word	0x0801a174
 8008fd0:	0801a250 	.word	0x0801a250

	case 9:
		led.fullColor('W');
 8008fd4:	2157      	movs	r1, #87	; 0x57
 8008fd6:	48b2      	ldr	r0, [pc, #712]	; (80092a0 <cppLoop+0x1970>)
 8008fd8:	f7f8 ff60 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fdc:	f7f8 f860 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f7f8 f86c 	bl	80010c0 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008fe8:	48ae      	ldr	r0, [pc, #696]	; (80092a4 <cppLoop+0x1974>)
 8008fea:	f7fa fdae 	bl	8003b4a <_ZN9LineTrace9getKpFastEv>
 8008fee:	eeb0 7a40 	vmov.f32	s14, s0
 8008ff2:	eddf 7aad 	vldr	s15, [pc, #692]	; 80092a8 <cppLoop+0x1978>
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	ee17 0a90 	vmov	r0, s15
 8008ffe:	f7f7 fabb 	bl	8000578 <__aeabi_f2d>
 8009002:	4603      	mov	r3, r0
 8009004:	460c      	mov	r4, r1
 8009006:	461a      	mov	r2, r3
 8009008:	4623      	mov	r3, r4
 800900a:	48a8      	ldr	r0, [pc, #672]	; (80092ac <cppLoop+0x197c>)
 800900c:	f7f8 f882 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009010:	2101      	movs	r1, #1
 8009012:	2000      	movs	r0, #0
 8009014:	f7f8 f854 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8009018:	48a2      	ldr	r0, [pc, #648]	; (80092a4 <cppLoop+0x1974>)
 800901a:	f7fa fda5 	bl	8003b68 <_ZN9LineTrace9getKiFastEv>
 800901e:	eeb0 7a40 	vmov.f32	s14, s0
 8009022:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80092b0 <cppLoop+0x1980>
 8009026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902a:	ee17 0a90 	vmov	r0, s15
 800902e:	f7f7 faa3 	bl	8000578 <__aeabi_f2d>
 8009032:	4605      	mov	r5, r0
 8009034:	460e      	mov	r6, r1
 8009036:	489b      	ldr	r0, [pc, #620]	; (80092a4 <cppLoop+0x1974>)
 8009038:	f7fa fda5 	bl	8003b86 <_ZN9LineTrace9getKdFastEv>
 800903c:	eeb0 7a40 	vmov.f32	s14, s0
 8009040:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80092b4 <cppLoop+0x1984>
 8009044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009048:	ee17 0a90 	vmov	r0, s15
 800904c:	f7f7 fa94 	bl	8000578 <__aeabi_f2d>
 8009050:	4603      	mov	r3, r0
 8009052:	460c      	mov	r4, r1
 8009054:	e9cd 3400 	strd	r3, r4, [sp]
 8009058:	462a      	mov	r2, r5
 800905a:	4633      	mov	r3, r6
 800905c:	4896      	ldr	r0, [pc, #600]	; (80092b8 <cppLoop+0x1988>)
 800905e:	f7f8 f859 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009062:	4896      	ldr	r0, [pc, #600]	; (80092bc <cppLoop+0x198c>)
 8009064:	f7f8 feb6 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8009068:	4603      	mov	r3, r0
 800906a:	2b08      	cmp	r3, #8
 800906c:	bf0c      	ite	eq
 800906e:	2301      	moveq	r3, #1
 8009070:	2300      	movne	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d021      	beq.n	80090bc <cppLoop+0x178c>
			led.LR(-1, 1);
 8009078:	2201      	movs	r2, #1
 800907a:	f04f 31ff 	mov.w	r1, #4294967295
 800907e:	4888      	ldr	r0, [pc, #544]	; (80092a0 <cppLoop+0x1970>)
 8009080:	f7f8 ffc8 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009084:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009088:	f000 fcce 	bl	8009a28 <HAL_Delay>

			selector_fast++;
 800908c:	4b8c      	ldr	r3, [pc, #560]	; (80092c0 <cppLoop+0x1990>)
 800908e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009092:	b29b      	uxth	r3, r3
 8009094:	3301      	adds	r3, #1
 8009096:	b29b      	uxth	r3, r3
 8009098:	b21a      	sxth	r2, r3
 800909a:	4b89      	ldr	r3, [pc, #548]	; (80092c0 <cppLoop+0x1990>)
 800909c:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 800909e:	4b88      	ldr	r3, [pc, #544]	; (80092c0 <cppLoop+0x1990>)
 80090a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	dd02      	ble.n	80090ae <cppLoop+0x177e>
 80090a8:	4b85      	ldr	r3, [pc, #532]	; (80092c0 <cppLoop+0x1990>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80090ae:	2200      	movs	r2, #0
 80090b0:	f04f 31ff 	mov.w	r1, #4294967295
 80090b4:	487a      	ldr	r0, [pc, #488]	; (80092a0 <cppLoop+0x1970>)
 80090b6:	f7f8 ffad 	bl	8002014 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 80090ba:	e380      	b.n	80097be <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_R){
 80090bc:	487f      	ldr	r0, [pc, #508]	; (80092bc <cppLoop+0x198c>)
 80090be:	f7f8 fe89 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	bf0c      	ite	eq
 80090c8:	2301      	moveq	r3, #1
 80090ca:	2300      	movne	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d058      	beq.n	8009184 <cppLoop+0x1854>
			led.LR(-1, 1);
 80090d2:	2201      	movs	r2, #1
 80090d4:	f04f 31ff 	mov.w	r1, #4294967295
 80090d8:	4871      	ldr	r0, [pc, #452]	; (80092a0 <cppLoop+0x1970>)
 80090da:	f7f8 ff9b 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090de:	2064      	movs	r0, #100	; 0x64
 80090e0:	f000 fca2 	bl	8009a28 <HAL_Delay>
			if(selector_fast == 0){
 80090e4:	4b76      	ldr	r3, [pc, #472]	; (80092c0 <cppLoop+0x1990>)
 80090e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d113      	bne.n	8009116 <cppLoop+0x17e6>
				adj_kp_fast = adj_kp_fast + 0.00001;
 80090ee:	4b75      	ldr	r3, [pc, #468]	; (80092c4 <cppLoop+0x1994>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f7 fa40 	bl	8000578 <__aeabi_f2d>
 80090f8:	a363      	add	r3, pc, #396	; (adr r3, 8009288 <cppLoop+0x1958>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f8dd 	bl	80002bc <__adddf3>
 8009102:	4603      	mov	r3, r0
 8009104:	460c      	mov	r4, r1
 8009106:	4618      	mov	r0, r3
 8009108:	4621      	mov	r1, r4
 800910a:	f7f7 fd85 	bl	8000c18 <__aeabi_d2f>
 800910e:	4602      	mov	r2, r0
 8009110:	4b6c      	ldr	r3, [pc, #432]	; (80092c4 <cppLoop+0x1994>)
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	e02b      	b.n	800916e <cppLoop+0x183e>
			else if(selector_fast == 1){
 8009116:	4b6a      	ldr	r3, [pc, #424]	; (80092c0 <cppLoop+0x1990>)
 8009118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d113      	bne.n	8009148 <cppLoop+0x1818>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8009120:	4b69      	ldr	r3, [pc, #420]	; (80092c8 <cppLoop+0x1998>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f7f7 fa27 	bl	8000578 <__aeabi_f2d>
 800912a:	a359      	add	r3, pc, #356	; (adr r3, 8009290 <cppLoop+0x1960>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f8c4 	bl	80002bc <__adddf3>
 8009134:	4603      	mov	r3, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4618      	mov	r0, r3
 800913a:	4621      	mov	r1, r4
 800913c:	f7f7 fd6c 	bl	8000c18 <__aeabi_d2f>
 8009140:	4602      	mov	r2, r0
 8009142:	4b61      	ldr	r3, [pc, #388]	; (80092c8 <cppLoop+0x1998>)
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	e012      	b.n	800916e <cppLoop+0x183e>
				adj_kd_fast = adj_kd_fast + 0.000001;
 8009148:	4b60      	ldr	r3, [pc, #384]	; (80092cc <cppLoop+0x199c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4618      	mov	r0, r3
 800914e:	f7f7 fa13 	bl	8000578 <__aeabi_f2d>
 8009152:	a351      	add	r3, pc, #324	; (adr r3, 8009298 <cppLoop+0x1968>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 f8b0 	bl	80002bc <__adddf3>
 800915c:	4603      	mov	r3, r0
 800915e:	460c      	mov	r4, r1
 8009160:	4618      	mov	r0, r3
 8009162:	4621      	mov	r1, r4
 8009164:	f7f7 fd58 	bl	8000c18 <__aeabi_d2f>
 8009168:	4602      	mov	r2, r0
 800916a:	4b58      	ldr	r3, [pc, #352]	; (80092cc <cppLoop+0x199c>)
 800916c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800916e:	2152      	movs	r1, #82	; 0x52
 8009170:	484b      	ldr	r0, [pc, #300]	; (80092a0 <cppLoop+0x1970>)
 8009172:	f7f8 fe93 	bl	8001e9c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009176:	2200      	movs	r2, #0
 8009178:	f04f 31ff 	mov.w	r1, #4294967295
 800917c:	4848      	ldr	r0, [pc, #288]	; (80092a0 <cppLoop+0x1970>)
 800917e:	f7f8 ff49 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8009182:	e31c      	b.n	80097be <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_L){
 8009184:	484d      	ldr	r0, [pc, #308]	; (80092bc <cppLoop+0x198c>)
 8009186:	f7f8 fe25 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800918a:	4603      	mov	r3, r0
 800918c:	2b01      	cmp	r3, #1
 800918e:	bf0c      	ite	eq
 8009190:	2301      	moveq	r3, #1
 8009192:	2300      	movne	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d058      	beq.n	800924c <cppLoop+0x191c>
			led.LR(-1, 1);
 800919a:	2201      	movs	r2, #1
 800919c:	f04f 31ff 	mov.w	r1, #4294967295
 80091a0:	483f      	ldr	r0, [pc, #252]	; (80092a0 <cppLoop+0x1970>)
 80091a2:	f7f8 ff37 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80091a6:	2064      	movs	r0, #100	; 0x64
 80091a8:	f000 fc3e 	bl	8009a28 <HAL_Delay>
			if(selector_fast == 0){
 80091ac:	4b44      	ldr	r3, [pc, #272]	; (80092c0 <cppLoop+0x1990>)
 80091ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d113      	bne.n	80091de <cppLoop+0x18ae>
				adj_kp_fast = adj_kp_fast - 0.00001;
 80091b6:	4b43      	ldr	r3, [pc, #268]	; (80092c4 <cppLoop+0x1994>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7f7 f9dc 	bl	8000578 <__aeabi_f2d>
 80091c0:	a331      	add	r3, pc, #196	; (adr r3, 8009288 <cppLoop+0x1958>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 f877 	bl	80002b8 <__aeabi_dsub>
 80091ca:	4603      	mov	r3, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	4618      	mov	r0, r3
 80091d0:	4621      	mov	r1, r4
 80091d2:	f7f7 fd21 	bl	8000c18 <__aeabi_d2f>
 80091d6:	4602      	mov	r2, r0
 80091d8:	4b3a      	ldr	r3, [pc, #232]	; (80092c4 <cppLoop+0x1994>)
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e02b      	b.n	8009236 <cppLoop+0x1906>
			else if(selector_fast == 1){
 80091de:	4b38      	ldr	r3, [pc, #224]	; (80092c0 <cppLoop+0x1990>)
 80091e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d113      	bne.n	8009210 <cppLoop+0x18e0>
				adj_ki_fast = adj_ki_fast - 0.0001;
 80091e8:	4b37      	ldr	r3, [pc, #220]	; (80092c8 <cppLoop+0x1998>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7f7 f9c3 	bl	8000578 <__aeabi_f2d>
 80091f2:	a327      	add	r3, pc, #156	; (adr r3, 8009290 <cppLoop+0x1960>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f85e 	bl	80002b8 <__aeabi_dsub>
 80091fc:	4603      	mov	r3, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	4618      	mov	r0, r3
 8009202:	4621      	mov	r1, r4
 8009204:	f7f7 fd08 	bl	8000c18 <__aeabi_d2f>
 8009208:	4602      	mov	r2, r0
 800920a:	4b2f      	ldr	r3, [pc, #188]	; (80092c8 <cppLoop+0x1998>)
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	e012      	b.n	8009236 <cppLoop+0x1906>
				adj_kd_fast = adj_kd_fast - 0.000001;
 8009210:	4b2e      	ldr	r3, [pc, #184]	; (80092cc <cppLoop+0x199c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f7f7 f9af 	bl	8000578 <__aeabi_f2d>
 800921a:	a31f      	add	r3, pc, #124	; (adr r3, 8009298 <cppLoop+0x1968>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	f7f7 f84a 	bl	80002b8 <__aeabi_dsub>
 8009224:	4603      	mov	r3, r0
 8009226:	460c      	mov	r4, r1
 8009228:	4618      	mov	r0, r3
 800922a:	4621      	mov	r1, r4
 800922c:	f7f7 fcf4 	bl	8000c18 <__aeabi_d2f>
 8009230:	4602      	mov	r2, r0
 8009232:	4b26      	ldr	r3, [pc, #152]	; (80092cc <cppLoop+0x199c>)
 8009234:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009236:	2152      	movs	r1, #82	; 0x52
 8009238:	4819      	ldr	r0, [pc, #100]	; (80092a0 <cppLoop+0x1970>)
 800923a:	f7f8 fe2f 	bl	8001e9c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800923e:	2200      	movs	r2, #0
 8009240:	f04f 31ff 	mov.w	r1, #4294967295
 8009244:	4816      	ldr	r0, [pc, #88]	; (80092a0 <cppLoop+0x1970>)
 8009246:	f7f8 fee5 	bl	8002014 <_ZN3LED2LREaa>
		break;
 800924a:	e2b8      	b.n	80097be <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_D){
 800924c:	481b      	ldr	r0, [pc, #108]	; (80092bc <cppLoop+0x198c>)
 800924e:	f7f8 fdc1 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8009252:	4603      	mov	r3, r0
 8009254:	2b04      	cmp	r3, #4
 8009256:	bf0c      	ite	eq
 8009258:	2301      	moveq	r3, #1
 800925a:	2300      	movne	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d036      	beq.n	80092d0 <cppLoop+0x19a0>
			led.LR(-1, 1);
 8009262:	2201      	movs	r2, #1
 8009264:	f04f 31ff 	mov.w	r1, #4294967295
 8009268:	480d      	ldr	r0, [pc, #52]	; (80092a0 <cppLoop+0x1970>)
 800926a:	f7f8 fed3 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800926e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009272:	f000 fbd9 	bl	8009a28 <HAL_Delay>
			led.LR(-1, 0);
 8009276:	2200      	movs	r2, #0
 8009278:	f04f 31ff 	mov.w	r1, #4294967295
 800927c:	4808      	ldr	r0, [pc, #32]	; (80092a0 <cppLoop+0x1970>)
 800927e:	f7f8 fec9 	bl	8002014 <_ZN3LED2LREaa>
		break;
 8009282:	e29c      	b.n	80097be <cppLoop+0x1e8e>
 8009284:	f3af 8000 	nop.w
 8009288:	88e368f1 	.word	0x88e368f1
 800928c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009290:	eb1c432d 	.word	0xeb1c432d
 8009294:	3f1a36e2 	.word	0x3f1a36e2
 8009298:	a0b5ed8d 	.word	0xa0b5ed8d
 800929c:	3eb0c6f7 	.word	0x3eb0c6f7
 80092a0:	20000600 	.word	0x20000600
 80092a4:	2001bc48 	.word	0x2001bc48
 80092a8:	447a0000 	.word	0x447a0000
 80092ac:	0801a25c 	.word	0x0801a25c
 80092b0:	42c80000 	.word	0x42c80000
 80092b4:	461c4000 	.word	0x461c4000
 80092b8:	0801a15c 	.word	0x0801a15c
 80092bc:	200005f4 	.word	0x200005f4
 80092c0:	200412e0 	.word	0x200412e0
 80092c4:	200412fc 	.word	0x200412fc
 80092c8:	20041304 	.word	0x20041304
 80092cc:	2004130c 	.word	0x2004130c
		else if(joy_stick.getValue() == JOY_C){
 80092d0:	48b7      	ldr	r0, [pc, #732]	; (80095b0 <cppLoop+0x1c80>)
 80092d2:	f7f8 fd7f 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b02      	cmp	r3, #2
 80092da:	bf0c      	ite	eq
 80092dc:	2301      	moveq	r3, #1
 80092de:	2300      	movne	r3, #0
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 826b 	beq.w	80097be <cppLoop+0x1e8e>
			led.LR(-1, 1);
 80092e8:	2201      	movs	r2, #1
 80092ea:	f04f 31ff 	mov.w	r1, #4294967295
 80092ee:	48b1      	ldr	r0, [pc, #708]	; (80095b4 <cppLoop+0x1c84>)
 80092f0:	f7f8 fe90 	bl	8002014 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092f8:	f000 fb96 	bl	8009a28 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 80092fc:	2300      	movs	r3, #0
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4bad      	ldr	r3, [pc, #692]	; (80095b8 <cppLoop+0x1c88>)
 8009302:	2201      	movs	r2, #1
 8009304:	49ad      	ldr	r1, [pc, #692]	; (80095bc <cppLoop+0x1c8c>)
 8009306:	48ae      	ldr	r0, [pc, #696]	; (80095c0 <cppLoop+0x1c90>)
 8009308:	f7f8 f94c 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 800930c:	2300      	movs	r3, #0
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4bac      	ldr	r3, [pc, #688]	; (80095c4 <cppLoop+0x1c94>)
 8009312:	2201      	movs	r2, #1
 8009314:	49ac      	ldr	r1, [pc, #688]	; (80095c8 <cppLoop+0x1c98>)
 8009316:	48aa      	ldr	r0, [pc, #680]	; (80095c0 <cppLoop+0x1c90>)
 8009318:	f7f8 f944 	bl	80015a4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	4baa      	ldr	r3, [pc, #680]	; (80095cc <cppLoop+0x1c9c>)
 8009322:	2201      	movs	r2, #1
 8009324:	49aa      	ldr	r1, [pc, #680]	; (80095d0 <cppLoop+0x1ca0>)
 8009326:	48a6      	ldr	r0, [pc, #664]	; (80095c0 <cppLoop+0x1c90>)
 8009328:	f7f8 f93c 	bl	80015a4 <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 800932c:	4ba2      	ldr	r3, [pc, #648]	; (80095b8 <cppLoop+0x1c88>)
 800932e:	edd3 7a00 	vldr	s15, [r3]
 8009332:	4ba4      	ldr	r3, [pc, #656]	; (80095c4 <cppLoop+0x1c94>)
 8009334:	ed93 7a00 	vldr	s14, [r3]
 8009338:	4ba4      	ldr	r3, [pc, #656]	; (80095cc <cppLoop+0x1c9c>)
 800933a:	edd3 6a00 	vldr	s13, [r3]
 800933e:	eeb0 1a66 	vmov.f32	s2, s13
 8009342:	eef0 0a47 	vmov.f32	s1, s14
 8009346:	eeb0 0a67 	vmov.f32	s0, s15
 800934a:	48a2      	ldr	r0, [pc, #648]	; (80095d4 <cppLoop+0x1ca4>)
 800934c:	f7fa fbb7 	bl	8003abe <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009350:	2200      	movs	r2, #0
 8009352:	f04f 31ff 	mov.w	r1, #4294967295
 8009356:	4897      	ldr	r0, [pc, #604]	; (80095b4 <cppLoop+0x1c84>)
 8009358:	f7f8 fe5c 	bl	8002014 <_ZN3LED2LREaa>
		break;
 800935c:	e22f      	b.n	80097be <cppLoop+0x1e8e>

	case 10:
		led.fullColor('~');
 800935e:	217e      	movs	r1, #126	; 0x7e
 8009360:	4894      	ldr	r0, [pc, #592]	; (80095b4 <cppLoop+0x1c84>)
 8009362:	f7f8 fd9b 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009366:	f7f7 fe9b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800936a:	2100      	movs	r1, #0
 800936c:	2000      	movs	r0, #0
 800936e:	f7f7 fea7 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009372:	4899      	ldr	r0, [pc, #612]	; (80095d8 <cppLoop+0x1ca8>)
 8009374:	f7f7 fece 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009378:	2101      	movs	r1, #1
 800937a:	2000      	movs	r0, #0
 800937c:	f7f7 fea0 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009380:	4896      	ldr	r0, [pc, #600]	; (80095dc <cppLoop+0x1cac>)
 8009382:	f7f7 fec7 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009386:	488a      	ldr	r0, [pc, #552]	; (80095b0 <cppLoop+0x1c80>)
 8009388:	f7f8 fd24 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800938c:	4603      	mov	r3, r0
 800938e:	2b02      	cmp	r3, #2
 8009390:	bf0c      	ite	eq
 8009392:	2301      	moveq	r3, #1
 8009394:	2300      	movne	r3, #0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8212 	beq.w	80097c2 <cppLoop+0x1e92>
			HAL_Delay(500);
 800939e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80093a2:	f000 fb41 	bl	8009a28 <HAL_Delay>
			led.LR(-1, 1);
 80093a6:	2201      	movs	r2, #1
 80093a8:	f04f 31ff 	mov.w	r1, #4294967295
 80093ac:	4881      	ldr	r0, [pc, #516]	; (80095b4 <cppLoop+0x1c84>)
 80093ae:	f7f8 fe31 	bl	8002014 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80093b2:	2102      	movs	r1, #2
 80093b4:	4887      	ldr	r0, [pc, #540]	; (80095d4 <cppLoop+0x1ca4>)
 80093b6:	f7fb f831 	bl	800441c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80093ba:	4b89      	ldr	r3, [pc, #548]	; (80095e0 <cppLoop+0x1cb0>)
 80093bc:	edd3 7a00 	vldr	s15, [r3]
 80093c0:	eeb0 0a67 	vmov.f32	s0, s15
 80093c4:	4883      	ldr	r0, [pc, #524]	; (80095d4 <cppLoop+0x1ca4>)
 80093c6:	f7fa fbed 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80093ca:	4b85      	ldr	r3, [pc, #532]	; (80095e0 <cppLoop+0x1cb0>)
 80093cc:	edd3 7a00 	vldr	s15, [r3]
 80093d0:	eeb0 0a67 	vmov.f32	s0, s15
 80093d4:	487f      	ldr	r0, [pc, #508]	; (80095d4 <cppLoop+0x1ca4>)
 80093d6:	f7fa fbf5 	bl	8003bc4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80093da:	4b81      	ldr	r3, [pc, #516]	; (80095e0 <cppLoop+0x1cb0>)
 80093dc:	edd3 7a00 	vldr	s15, [r3]
 80093e0:	eeb0 0a67 	vmov.f32	s0, s15
 80093e4:	487b      	ldr	r0, [pc, #492]	; (80095d4 <cppLoop+0x1ca4>)
 80093e6:	f7fa fc0d 	bl	8003c04 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80093ea:	487a      	ldr	r0, [pc, #488]	; (80095d4 <cppLoop+0x1ca4>)
 80093ec:	f7f9 ff18 	bl	8003220 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80093f0:	2200      	movs	r2, #0
 80093f2:	f04f 31ff 	mov.w	r1, #4294967295
 80093f6:	486f      	ldr	r0, [pc, #444]	; (80095b4 <cppLoop+0x1c84>)
 80093f8:	f7f8 fe0c 	bl	8002014 <_ZN3LED2LREaa>
		}

		break;
 80093fc:	e1e1      	b.n	80097c2 <cppLoop+0x1e92>

	case 11:
		led.fullColor('~');
 80093fe:	217e      	movs	r1, #126	; 0x7e
 8009400:	486c      	ldr	r0, [pc, #432]	; (80095b4 <cppLoop+0x1c84>)
 8009402:	f7f8 fd4b 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009406:	f7f7 fe4b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800940a:	2100      	movs	r1, #0
 800940c:	2000      	movs	r0, #0
 800940e:	f7f7 fe57 	bl	80010c0 <lcd_locate>
		lcd_printf("ECU");
 8009412:	4874      	ldr	r0, [pc, #464]	; (80095e4 <cppLoop+0x1cb4>)
 8009414:	f7f7 fe7e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009418:	2101      	movs	r1, #1
 800941a:	2000      	movs	r0, #0
 800941c:	f7f7 fe50 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009420:	4871      	ldr	r0, [pc, #452]	; (80095e8 <cppLoop+0x1cb8>)
 8009422:	f7f7 fe77 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009426:	4862      	ldr	r0, [pc, #392]	; (80095b0 <cppLoop+0x1c80>)
 8009428:	f7f8 fcd4 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800942c:	4603      	mov	r3, r0
 800942e:	2b02      	cmp	r3, #2
 8009430:	bf0c      	ite	eq
 8009432:	2301      	moveq	r3, #1
 8009434:	2300      	movne	r3, #0
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 81c4 	beq.w	80097c6 <cppLoop+0x1e96>
			HAL_Delay(1000);
 800943e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009442:	f000 faf1 	bl	8009a28 <HAL_Delay>
			led.LR(-1, 1);
 8009446:	2201      	movs	r2, #1
 8009448:	f04f 31ff 	mov.w	r1, #4294967295
 800944c:	4859      	ldr	r0, [pc, #356]	; (80095b4 <cppLoop+0x1c84>)
 800944e:	f7f8 fde1 	bl	8002014 <_ZN3LED2LREaa>

			ecu.on();
 8009452:	4866      	ldr	r0, [pc, #408]	; (80095ec <cppLoop+0x1cbc>)
 8009454:	f7f7 fe9e 	bl	8001194 <_ZN3ECU2onEv>
			HAL_Delay(1000);
 8009458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800945c:	f000 fae4 	bl	8009a28 <HAL_Delay>
			ecu.off();
 8009460:	4862      	ldr	r0, [pc, #392]	; (80095ec <cppLoop+0x1cbc>)
 8009462:	f7f7 fea9 	bl	80011b8 <_ZN3ECU3offEv>

			led.LR(-1, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	f04f 31ff 	mov.w	r1, #4294967295
 800946c:	4851      	ldr	r0, [pc, #324]	; (80095b4 <cppLoop+0x1c84>)
 800946e:	f7f8 fdd1 	bl	8002014 <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 8009472:	e1a8      	b.n	80097c6 <cppLoop+0x1e96>

	case 12:
		led.fullColor('~');
 8009474:	217e      	movs	r1, #126	; 0x7e
 8009476:	484f      	ldr	r0, [pc, #316]	; (80095b4 <cppLoop+0x1c84>)
 8009478:	f7f8 fd10 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 800947c:	f7f7 fe10 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009480:	2100      	movs	r1, #0
 8009482:	2000      	movs	r0, #0
 8009484:	f7f7 fe1c 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009488:	4859      	ldr	r0, [pc, #356]	; (80095f0 <cppLoop+0x1cc0>)
 800948a:	f7f7 fe43 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800948e:	2101      	movs	r1, #1
 8009490:	2000      	movs	r0, #0
 8009492:	f7f7 fe15 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009496:	4857      	ldr	r0, [pc, #348]	; (80095f4 <cppLoop+0x1cc4>)
 8009498:	f7f7 fe3c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800949c:	4844      	ldr	r0, [pc, #272]	; (80095b0 <cppLoop+0x1c80>)
 800949e:	f7f8 fc99 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	bf0c      	ite	eq
 80094a8:	2301      	moveq	r3, #1
 80094aa:	2300      	movne	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 818b 	beq.w	80097ca <cppLoop+0x1e9a>
			HAL_Delay(1500);
 80094b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80094b8:	f000 fab6 	bl	8009a28 <HAL_Delay>
			led.LR(-1, 1);
 80094bc:	2201      	movs	r2, #1
 80094be:	f04f 31ff 	mov.w	r1, #4294967295
 80094c2:	483c      	ldr	r0, [pc, #240]	; (80095b4 <cppLoop+0x1c84>)
 80094c4:	f7f8 fda6 	bl	8002014 <_ZN3LED2LREaa>

			logger.start();
 80094c8:	484b      	ldr	r0, [pc, #300]	; (80095f8 <cppLoop+0x1cc8>)
 80094ca:	f7fb fb99 	bl	8004c00 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80094ce:	484b      	ldr	r0, [pc, #300]	; (80095fc <cppLoop+0x1ccc>)
 80094d0:	f7fc fb9b 	bl	8005c0a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 80094d4:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8009600 <cppLoop+0x1cd0>
 80094d8:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8009604 <cppLoop+0x1cd4>
 80094dc:	4847      	ldr	r0, [pc, #284]	; (80095fc <cppLoop+0x1ccc>)
 80094de:	f7fc fb27 	bl	8005b30 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80094e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094e6:	f000 fa9f 	bl	8009a28 <HAL_Delay>

			logger.stop();
 80094ea:	4843      	ldr	r0, [pc, #268]	; (80095f8 <cppLoop+0x1cc8>)
 80094ec:	f7fb fb99 	bl	8004c22 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80094f0:	4842      	ldr	r0, [pc, #264]	; (80095fc <cppLoop+0x1ccc>)
 80094f2:	f7fc fb9d 	bl	8005c30 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80094f6:	4a44      	ldr	r2, [pc, #272]	; (8009608 <cppLoop+0x1cd8>)
 80094f8:	4944      	ldr	r1, [pc, #272]	; (800960c <cppLoop+0x1cdc>)
 80094fa:	483f      	ldr	r0, [pc, #252]	; (80095f8 <cppLoop+0x1cc8>)
 80094fc:	f7fb fa8d 	bl	8004a1a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009500:	2200      	movs	r2, #0
 8009502:	f04f 31ff 	mov.w	r1, #4294967295
 8009506:	482b      	ldr	r0, [pc, #172]	; (80095b4 <cppLoop+0x1c84>)
 8009508:	f7f8 fd84 	bl	8002014 <_ZN3LED2LREaa>
		}
		break;
 800950c:	e15d      	b.n	80097ca <cppLoop+0x1e9a>

	case 13:

		led.fullColor('~');
 800950e:	217e      	movs	r1, #126	; 0x7e
 8009510:	4828      	ldr	r0, [pc, #160]	; (80095b4 <cppLoop+0x1c84>)
 8009512:	f7f8 fcc3 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009516:	f7f7 fdc3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800951a:	2100      	movs	r1, #0
 800951c:	2000      	movs	r0, #0
 800951e:	f7f7 fdcf 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8009522:	483b      	ldr	r0, [pc, #236]	; (8009610 <cppLoop+0x1ce0>)
 8009524:	f7f7 fdf6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009528:	2101      	movs	r1, #1
 800952a:	2000      	movs	r0, #0
 800952c:	f7f7 fdc8 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8009530:	4838      	ldr	r0, [pc, #224]	; (8009614 <cppLoop+0x1ce4>)
 8009532:	f7f7 fdef 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009536:	481e      	ldr	r0, [pc, #120]	; (80095b0 <cppLoop+0x1c80>)
 8009538:	f7f8 fc4c 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 800953c:	4603      	mov	r3, r0
 800953e:	2b02      	cmp	r3, #2
 8009540:	bf0c      	ite	eq
 8009542:	2301      	moveq	r3, #1
 8009544:	2300      	movne	r3, #0
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 8140 	beq.w	80097ce <cppLoop+0x1e9e>
			HAL_Delay(500);
 800954e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009552:	f000 fa69 	bl	8009a28 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 8009556:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009618 <cppLoop+0x1ce8>
 800955a:	481e      	ldr	r0, [pc, #120]	; (80095d4 <cppLoop+0x1ca4>)
 800955c:	f7fa fb22 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8009560:	f04f 32ff 	mov.w	r2, #4294967295
 8009564:	2101      	movs	r1, #1
 8009566:	4813      	ldr	r0, [pc, #76]	; (80095b4 <cppLoop+0x1c84>)
 8009568:	f7f8 fd54 	bl	8002014 <_ZN3LED2LREaa>

			logger.resetIdx();
 800956c:	4822      	ldr	r0, [pc, #136]	; (80095f8 <cppLoop+0x1cc8>)
 800956e:	f7fb fb2f 	bl	8004bd0 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 8009572:	2100      	movs	r1, #0
 8009574:	4817      	ldr	r0, [pc, #92]	; (80095d4 <cppLoop+0x1ca4>)
 8009576:	f7fa ff51 	bl	800441c <_ZN9LineTrace7setModeEs>
			logger.start();
 800957a:	481f      	ldr	r0, [pc, #124]	; (80095f8 <cppLoop+0x1cc8>)
 800957c:	f7fb fb40 	bl	8004c00 <_ZN6Logger5startEv>
			line_trace.running();
 8009580:	4814      	ldr	r0, [pc, #80]	; (80095d4 <cppLoop+0x1ca4>)
 8009582:	f7fa fe3d 	bl	8004200 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009586:	481c      	ldr	r0, [pc, #112]	; (80095f8 <cppLoop+0x1cc8>)
 8009588:	f7fb fb4b 	bl	8004c22 <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 800958c:	4a23      	ldr	r2, [pc, #140]	; (800961c <cppLoop+0x1cec>)
 800958e:	4924      	ldr	r1, [pc, #144]	; (8009620 <cppLoop+0x1cf0>)
 8009590:	4819      	ldr	r0, [pc, #100]	; (80095f8 <cppLoop+0x1cc8>)
 8009592:	f7fb fa42 	bl	8004a1a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 8009596:	4a23      	ldr	r2, [pc, #140]	; (8009624 <cppLoop+0x1cf4>)
 8009598:	4921      	ldr	r1, [pc, #132]	; (8009620 <cppLoop+0x1cf0>)
 800959a:	4817      	ldr	r0, [pc, #92]	; (80095f8 <cppLoop+0x1cc8>)
 800959c:	f7fb fa51 	bl	8004a42 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80095a0:	f04f 32ff 	mov.w	r2, #4294967295
 80095a4:	2100      	movs	r1, #0
 80095a6:	4803      	ldr	r0, [pc, #12]	; (80095b4 <cppLoop+0x1c84>)
 80095a8:	f7f8 fd34 	bl	8002014 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80095ac:	e10f      	b.n	80097ce <cppLoop+0x1e9e>
 80095ae:	bf00      	nop
 80095b0:	200005f4 	.word	0x200005f4
 80095b4:	20000600 	.word	0x20000600
 80095b8:	200412fc 	.word	0x200412fc
 80095bc:	0801a268 	.word	0x0801a268
 80095c0:	0801a174 	.word	0x0801a174
 80095c4:	20041304 	.word	0x20041304
 80095c8:	0801a274 	.word	0x0801a274
 80095cc:	2004130c 	.word	0x2004130c
 80095d0:	0801a280 	.word	0x0801a280
 80095d4:	2001bc48 	.word	0x2001bc48
 80095d8:	0801a28c 	.word	0x0801a28c
 80095dc:	0801a298 	.word	0x0801a298
 80095e0:	20041324 	.word	0x20041324
 80095e4:	0801a2a4 	.word	0x0801a2a4
 80095e8:	0801a2a8 	.word	0x0801a2a8
 80095ec:	200412d0 	.word	0x200412d0
 80095f0:	0801a2b0 	.word	0x0801a2b0
 80095f4:	0801a2b4 	.word	0x0801a2b4
 80095f8:	20000624 	.word	0x20000624
 80095fc:	2001bbcc 	.word	0x2001bbcc
 8009600:	4048f5c3 	.word	0x4048f5c3
 8009604:	00000000 	.word	0x00000000
 8009608:	0801a2c0 	.word	0x0801a2c0
 800960c:	0801a2cc 	.word	0x0801a2cc
 8009610:	0801a2d8 	.word	0x0801a2d8
 8009614:	0801a2e0 	.word	0x0801a2e0
 8009618:	3e99999a 	.word	0x3e99999a
 800961c:	0801a2e8 	.word	0x0801a2e8
 8009620:	0801a2f4 	.word	0x0801a2f4
 8009624:	0801a300 	.word	0x0801a300

	case 14:
		led.fullColor('W');
 8009628:	2157      	movs	r1, #87	; 0x57
 800962a:	486f      	ldr	r0, [pc, #444]	; (80097e8 <cppLoop+0x1eb8>)
 800962c:	f7f8 fc36 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009630:	f7f7 fd36 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009634:	2100      	movs	r1, #0
 8009636:	2000      	movs	r0, #0
 8009638:	f7f7 fd42 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 800963c:	486b      	ldr	r0, [pc, #428]	; (80097ec <cppLoop+0x1ebc>)
 800963e:	f7f7 fd69 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009642:	2101      	movs	r1, #1
 8009644:	2000      	movs	r0, #0
 8009646:	f7f7 fd3b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800964a:	4b69      	ldr	r3, [pc, #420]	; (80097f0 <cppLoop+0x1ec0>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f7f6 ff92 	bl	8000578 <__aeabi_f2d>
 8009654:	4603      	mov	r3, r0
 8009656:	460c      	mov	r4, r1
 8009658:	461a      	mov	r2, r3
 800965a:	4623      	mov	r3, r4
 800965c:	4865      	ldr	r0, [pc, #404]	; (80097f4 <cppLoop+0x1ec4>)
 800965e:	f7f7 fd59 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009662:	4865      	ldr	r0, [pc, #404]	; (80097f8 <cppLoop+0x1ec8>)
 8009664:	f7f8 fbb6 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8009668:	4603      	mov	r3, r0
 800966a:	2b02      	cmp	r3, #2
 800966c:	bf0c      	ite	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	2300      	movne	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80ac 	beq.w	80097d2 <cppLoop+0x1ea2>
			HAL_Delay(500);
 800967a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800967e:	f000 f9d3 	bl	8009a28 <HAL_Delay>

			led.LR(1, -1);
 8009682:	f04f 32ff 	mov.w	r2, #4294967295
 8009686:	2101      	movs	r1, #1
 8009688:	4857      	ldr	r0, [pc, #348]	; (80097e8 <cppLoop+0x1eb8>)
 800968a:	f7f8 fcc3 	bl	8002014 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800968e:	2102      	movs	r1, #2
 8009690:	485a      	ldr	r0, [pc, #360]	; (80097fc <cppLoop+0x1ecc>)
 8009692:	f7fa fec3 	bl	800441c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009696:	4b5a      	ldr	r3, [pc, #360]	; (8009800 <cppLoop+0x1ed0>)
 8009698:	edd3 7a00 	vldr	s15, [r3]
 800969c:	eeb0 0a67 	vmov.f32	s0, s15
 80096a0:	4856      	ldr	r0, [pc, #344]	; (80097fc <cppLoop+0x1ecc>)
 80096a2:	f7fa fa7f 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80096a6:	4b52      	ldr	r3, [pc, #328]	; (80097f0 <cppLoop+0x1ec0>)
 80096a8:	edd3 7a00 	vldr	s15, [r3]
 80096ac:	eeb0 0a67 	vmov.f32	s0, s15
 80096b0:	4852      	ldr	r0, [pc, #328]	; (80097fc <cppLoop+0x1ecc>)
 80096b2:	f7fa fa87 	bl	8003bc4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80096b6:	4b4e      	ldr	r3, [pc, #312]	; (80097f0 <cppLoop+0x1ec0>)
 80096b8:	edd3 7a00 	vldr	s15, [r3]
 80096bc:	eeb0 0a67 	vmov.f32	s0, s15
 80096c0:	484e      	ldr	r0, [pc, #312]	; (80097fc <cppLoop+0x1ecc>)
 80096c2:	f7fa fa9f 	bl	8003c04 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096c6:	484d      	ldr	r0, [pc, #308]	; (80097fc <cppLoop+0x1ecc>)
 80096c8:	f7f9 fdaa 	bl	8003220 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80096cc:	484b      	ldr	r0, [pc, #300]	; (80097fc <cppLoop+0x1ecc>)
 80096ce:	f7fa fd97 	bl	8004200 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80096d2:	f04f 32ff 	mov.w	r2, #4294967295
 80096d6:	2100      	movs	r1, #0
 80096d8:	4843      	ldr	r0, [pc, #268]	; (80097e8 <cppLoop+0x1eb8>)
 80096da:	f7f8 fc9b 	bl	8002014 <_ZN3LED2LREaa>
		}

		break;
 80096de:	e078      	b.n	80097d2 <cppLoop+0x1ea2>

	case 15:
		led.fullColor('W');
 80096e0:	2157      	movs	r1, #87	; 0x57
 80096e2:	4841      	ldr	r0, [pc, #260]	; (80097e8 <cppLoop+0x1eb8>)
 80096e4:	f7f8 fbda 	bl	8001e9c <_ZN3LED9fullColorEc>

		lcd_clear();
 80096e8:	f7f7 fcda 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096ec:	2100      	movs	r1, #0
 80096ee:	2000      	movs	r0, #0
 80096f0:	f7f7 fce6 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80096f4:	4843      	ldr	r0, [pc, #268]	; (8009804 <cppLoop+0x1ed4>)
 80096f6:	f7f7 fd0d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80096fa:	2101      	movs	r1, #1
 80096fc:	2000      	movs	r0, #0
 80096fe:	f7f7 fcdf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009702:	4b41      	ldr	r3, [pc, #260]	; (8009808 <cppLoop+0x1ed8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7f6 ff36 	bl	8000578 <__aeabi_f2d>
 800970c:	4603      	mov	r3, r0
 800970e:	460c      	mov	r4, r1
 8009710:	461a      	mov	r2, r3
 8009712:	4623      	mov	r3, r4
 8009714:	4837      	ldr	r0, [pc, #220]	; (80097f4 <cppLoop+0x1ec4>)
 8009716:	f7f7 fcfd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800971a:	4837      	ldr	r0, [pc, #220]	; (80097f8 <cppLoop+0x1ec8>)
 800971c:	f7f8 fb5a 	bl	8001dd4 <_ZN8JoyStick8getValueEv>
 8009720:	4603      	mov	r3, r0
 8009722:	2b02      	cmp	r3, #2
 8009724:	bf0c      	ite	eq
 8009726:	2301      	moveq	r3, #1
 8009728:	2300      	movne	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d052      	beq.n	80097d6 <cppLoop+0x1ea6>
			HAL_Delay(500);
 8009730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009734:	f000 f978 	bl	8009a28 <HAL_Delay>

			led.LR(1, -1);
 8009738:	f04f 32ff 	mov.w	r2, #4294967295
 800973c:	2101      	movs	r1, #1
 800973e:	482a      	ldr	r0, [pc, #168]	; (80097e8 <cppLoop+0x1eb8>)
 8009740:	f7f8 fc68 	bl	8002014 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009744:	2101      	movs	r1, #1
 8009746:	482d      	ldr	r0, [pc, #180]	; (80097fc <cppLoop+0x1ecc>)
 8009748:	f7fa fe68 	bl	800441c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800974c:	4b2f      	ldr	r3, [pc, #188]	; (800980c <cppLoop+0x1edc>)
 800974e:	edd3 7a00 	vldr	s15, [r3]
 8009752:	eeb0 0a67 	vmov.f32	s0, s15
 8009756:	4829      	ldr	r0, [pc, #164]	; (80097fc <cppLoop+0x1ecc>)
 8009758:	f7fa fa24 	bl	8003ba4 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800975c:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <cppLoop+0x1ed8>)
 800975e:	edd3 7a00 	vldr	s15, [r3]
 8009762:	eeb0 0a67 	vmov.f32	s0, s15
 8009766:	4825      	ldr	r0, [pc, #148]	; (80097fc <cppLoop+0x1ecc>)
 8009768:	f7fa fa2c 	bl	8003bc4 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800976c:	4b27      	ldr	r3, [pc, #156]	; (800980c <cppLoop+0x1edc>)
 800976e:	edd3 7a00 	vldr	s15, [r3]
 8009772:	eeb0 0a67 	vmov.f32	s0, s15
 8009776:	4821      	ldr	r0, [pc, #132]	; (80097fc <cppLoop+0x1ecc>)
 8009778:	f7fa fa44 	bl	8003c04 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800977c:	481f      	ldr	r0, [pc, #124]	; (80097fc <cppLoop+0x1ecc>)
 800977e:	f7f9 fd4f 	bl	8003220 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009782:	481e      	ldr	r0, [pc, #120]	; (80097fc <cppLoop+0x1ecc>)
 8009784:	f7fa fd3c 	bl	8004200 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009788:	f04f 32ff 	mov.w	r2, #4294967295
 800978c:	2100      	movs	r1, #0
 800978e:	4816      	ldr	r0, [pc, #88]	; (80097e8 <cppLoop+0x1eb8>)
 8009790:	f7f8 fc40 	bl	8002014 <_ZN3LED2LREaa>
		}
		break;
 8009794:	e01f      	b.n	80097d6 <cppLoop+0x1ea6>

	default:
		break;
 8009796:	bf00      	nop
 8009798:	e01e      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 800979a:	bf00      	nop
 800979c:	e01c      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 800979e:	bf00      	nop
 80097a0:	e01a      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097a2:	bf00      	nop
 80097a4:	e018      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097a6:	bf00      	nop
 80097a8:	e016      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097aa:	bf00      	nop
 80097ac:	e014      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097ae:	bf00      	nop
 80097b0:	e012      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097b2:	bf00      	nop
 80097b4:	e010      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097b6:	bf00      	nop
 80097b8:	e00e      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097ba:	bf00      	nop
 80097bc:	e00c      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097be:	bf00      	nop
 80097c0:	e00a      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097c2:	bf00      	nop
 80097c4:	e008      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097c6:	bf00      	nop
 80097c8:	e006      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097ca:	bf00      	nop
 80097cc:	e004      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097ce:	bf00      	nop
 80097d0:	e002      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097d2:	bf00      	nop
 80097d4:	e000      	b.n	80097d8 <cppLoop+0x1ea8>
		break;
 80097d6:	bf00      	nop

	}

	HAL_Delay(30);
 80097d8:	201e      	movs	r0, #30
 80097da:	f000 f925 	bl	8009a28 <HAL_Delay>

}
 80097de:	bf00      	nop
 80097e0:	3704      	adds	r7, #4
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20000600 	.word	0x20000600
 80097ec:	0801a30c 	.word	0x0801a30c
 80097f0:	20041324 	.word	0x20041324
 80097f4:	0801a198 	.word	0x0801a198
 80097f8:	200005f4 	.word	0x200005f4
 80097fc:	2001bc48 	.word	0x2001bc48
 8009800:	20041334 	.word	0x20041334
 8009804:	0801a318 	.word	0x0801a318
 8009808:	2004131c 	.word	0x2004131c
 800980c:	2004132c 	.word	0x2004132c

08009810 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af06      	add	r7, sp, #24
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d140      	bne.n	80098a2 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009826:	4293      	cmp	r3, r2
 8009828:	d13b      	bne.n	80098a2 <_Z41__static_initialization_and_destruction_0ii+0x92>
LineSensor line_sensor;
 800982a:	4820      	ldr	r0, [pc, #128]	; (80098ac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800982c:	f7f8 fc2a 	bl	8002084 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009830:	481f      	ldr	r0, [pc, #124]	; (80098b0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009832:	f7fb fddd 	bl	80053f0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009836:	481f      	ldr	r0, [pc, #124]	; (80098b4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009838:	f7f8 fac0 	bl	8001dbc <_ZN8JoyStickC1Ev>
Motor motor;
 800983c:	481e      	ldr	r0, [pc, #120]	; (80098b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800983e:	f7fb fa01 	bl	8004c44 <_ZN5MotorC1Ev>
IMU imu;
 8009842:	481e      	ldr	r0, [pc, #120]	; (80098bc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009844:	f7f8 f8c6 	bl	80019d4 <_ZN3IMUC1Ev>
Logger logger;
 8009848:	481d      	ldr	r0, [pc, #116]	; (80098c0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800984a:	f7fa ff4f 	bl	80046ec <_ZN6LoggerC1Ev>
Encoder encoder;
 800984e:	481d      	ldr	r0, [pc, #116]	; (80098c4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009850:	f7f7 fcc4 	bl	80011dc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009854:	4b19      	ldr	r3, [pc, #100]	; (80098bc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009856:	4a1b      	ldr	r2, [pc, #108]	; (80098c4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009858:	4917      	ldr	r1, [pc, #92]	; (80098b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800985a:	481b      	ldr	r0, [pc, #108]	; (80098c8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800985c:	f7fb ffb8 	bl	80057d0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009860:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009862:	4a16      	ldr	r2, [pc, #88]	; (80098bc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009864:	4917      	ldr	r1, [pc, #92]	; (80098c4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009866:	4819      	ldr	r0, [pc, #100]	; (80098cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009868:	f7fb fad2 	bl	8004e10 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 800986c:	4b13      	ldr	r3, [pc, #76]	; (80098bc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	4b15      	ldr	r3, [pc, #84]	; (80098cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009876:	9302      	str	r3, [sp, #8]
 8009878:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009882:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009884:	490c      	ldr	r1, [pc, #48]	; (80098b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009886:	4812      	ldr	r0, [pc, #72]	; (80098d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009888:	f7f8 ff2a 	bl	80026e0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 800988c:	4a0a      	ldr	r2, [pc, #40]	; (80098b8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800988e:	490c      	ldr	r1, [pc, #48]	; (80098c0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009890:	4810      	ldr	r0, [pc, #64]	; (80098d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009892:	f7fb fefd 	bl	8005690 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009896:	4810      	ldr	r0, [pc, #64]	; (80098d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009898:	f7fb fc3c 	bl	8005114 <_ZN13PathFollowingC1Ev>
ECU ecu;
 800989c:	480f      	ldr	r0, [pc, #60]	; (80098dc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800989e:	f7f7 fc59 	bl	8001154 <_ZN3ECUC1Ev>
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	200002f4 	.word	0x200002f4
 80098b0:	200005ec 	.word	0x200005ec
 80098b4:	200005f4 	.word	0x200005f4
 80098b8:	200005fc 	.word	0x200005fc
 80098bc:	20000610 	.word	0x20000610
 80098c0:	20000624 	.word	0x20000624
 80098c4:	2001bbac 	.word	0x2001bbac
 80098c8:	2001bbcc 	.word	0x2001bbcc
 80098cc:	2001bc08 	.word	0x2001bc08
 80098d0:	2001bc48 	.word	0x2001bc48
 80098d4:	20029998 	.word	0x20029998
 80098d8:	20029ba8 	.word	0x20029ba8
 80098dc:	200412d0 	.word	0x200412d0

080098e0 <_GLOBAL__sub_I_line_sensor>:
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7ff ff91 	bl	8009810 <_Z41__static_initialization_and_destruction_0ii>
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80098f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009928 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80098f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80098f6:	e003      	b.n	8009900 <LoopCopyDataInit>

080098f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80098fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80098fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80098fe:	3104      	adds	r1, #4

08009900 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009900:	480b      	ldr	r0, [pc, #44]	; (8009930 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009904:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009906:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009908:	d3f6      	bcc.n	80098f8 <CopyDataInit>
  ldr  r2, =_sbss
 800990a:	4a0b      	ldr	r2, [pc, #44]	; (8009938 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800990c:	e002      	b.n	8009914 <LoopFillZerobss>

0800990e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800990e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009910:	f842 3b04 	str.w	r3, [r2], #4

08009914 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009916:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009918:	d3f9      	bcc.n	800990e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800991a:	f7fd fee7 	bl	80076ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800991e:	f00b ffd3 	bl	80158c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009922:	f7fc fa21 	bl	8005d68 <main>
  bx  lr    
 8009926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009928:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800992c:	0801a918 	.word	0x0801a918
  ldr  r0, =_sdata
 8009930:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009934:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009938:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800993c:	20045d38 	.word	0x20045d38

08009940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009940:	e7fe      	b.n	8009940 <ADC_IRQHandler>
	...

08009944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009948:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <HAL_Init+0x40>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <HAL_Init+0x40>)
 800994e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009954:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <HAL_Init+0x40>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <HAL_Init+0x40>)
 800995a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800995e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009960:	4b08      	ldr	r3, [pc, #32]	; (8009984 <HAL_Init+0x40>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a07      	ldr	r2, [pc, #28]	; (8009984 <HAL_Init+0x40>)
 8009966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800996a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800996c:	2003      	movs	r0, #3
 800996e:	f000 fd51 	bl	800a414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009972:	2000      	movs	r0, #0
 8009974:	f000 f808 	bl	8009988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009978:	f7fd f908 	bl	8006b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40023c00 	.word	0x40023c00

08009988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009990:	4b12      	ldr	r3, [pc, #72]	; (80099dc <HAL_InitTick+0x54>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <HAL_InitTick+0x58>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4619      	mov	r1, r3
 800999a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800999e:	fbb3 f3f1 	udiv	r3, r3, r1
 80099a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fd69 	bl	800a47e <HAL_SYSTICK_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e00e      	b.n	80099d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b0f      	cmp	r3, #15
 80099ba:	d80a      	bhi.n	80099d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80099bc:	2200      	movs	r2, #0
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	f000 fd31 	bl	800a42a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80099c8:	4a06      	ldr	r2, [pc, #24]	; (80099e4 <HAL_InitTick+0x5c>)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e000      	b.n	80099d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000000 	.word	0x20000000
 80099e0:	20000008 	.word	0x20000008
 80099e4:	20000004 	.word	0x20000004

080099e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <HAL_IncTick+0x20>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <HAL_IncTick+0x24>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4413      	add	r3, r2
 80099f8:	4a04      	ldr	r2, [pc, #16]	; (8009a0c <HAL_IncTick+0x24>)
 80099fa:	6013      	str	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	20000008 	.word	0x20000008
 8009a0c:	20043cc0 	.word	0x20043cc0

08009a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  return uwTick;
 8009a14:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <HAL_GetTick+0x14>)
 8009a16:	681b      	ldr	r3, [r3, #0]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	20043cc0 	.word	0x20043cc0

08009a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a30:	f7ff ffee 	bl	8009a10 <HAL_GetTick>
 8009a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a40:	d005      	beq.n	8009a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a42:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <HAL_Delay+0x40>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009a4e:	bf00      	nop
 8009a50:	f7ff ffde 	bl	8009a10 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d8f7      	bhi.n	8009a50 <HAL_Delay+0x28>
  {
  }
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000008 	.word	0x20000008

08009a6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e033      	b.n	8009aea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d109      	bne.n	8009a9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fd f8a6 	bl	8006bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d118      	bne.n	8009adc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009ab2:	f023 0302 	bic.w	r3, r3, #2
 8009ab6:	f043 0202 	orr.w	r2, r3, #2
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa5a 	bl	8009f78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	f043 0201 	orr.w	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8009ada:	e001      	b.n	8009ae0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d101      	bne.n	8009b12 <HAL_ADC_Start_DMA+0x1e>
 8009b0e:	2302      	movs	r3, #2
 8009b10:	e0cc      	b.n	8009cac <HAL_ADC_Start_DMA+0x1b8>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d018      	beq.n	8009b5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009b38:	4b5e      	ldr	r3, [pc, #376]	; (8009cb4 <HAL_ADC_Start_DMA+0x1c0>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a5e      	ldr	r2, [pc, #376]	; (8009cb8 <HAL_ADC_Start_DMA+0x1c4>)
 8009b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b42:	0c9a      	lsrs	r2, r3, #18
 8009b44:	4613      	mov	r3, r2
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	4413      	add	r3, r2
 8009b4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009b4c:	e002      	b.n	8009b54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1f9      	bne.n	8009b4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	f040 80a0 	bne.w	8009caa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d007      	beq.n	8009b9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009b94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba8:	d106      	bne.n	8009bb8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bae:	f023 0206 	bic.w	r2, r3, #6
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44
 8009bb6:	e002      	b.n	8009bbe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009bc6:	4b3d      	ldr	r3, [pc, #244]	; (8009cbc <HAL_ADC_Start_DMA+0x1c8>)
 8009bc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bce:	4a3c      	ldr	r2, [pc, #240]	; (8009cc0 <HAL_ADC_Start_DMA+0x1cc>)
 8009bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd6:	4a3b      	ldr	r2, [pc, #236]	; (8009cc4 <HAL_ADC_Start_DMA+0x1d0>)
 8009bd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	4a3a      	ldr	r2, [pc, #232]	; (8009cc8 <HAL_ADC_Start_DMA+0x1d4>)
 8009be0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009bea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009bfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	334c      	adds	r3, #76	; 0x4c
 8009c16:	4619      	mov	r1, r3
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f000 fcea 	bl	800a5f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d12a      	bne.n	8009c82 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a26      	ldr	r2, [pc, #152]	; (8009ccc <HAL_ADC_Start_DMA+0x1d8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d015      	beq.n	8009c62 <HAL_ADC_Start_DMA+0x16e>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a25      	ldr	r2, [pc, #148]	; (8009cd0 <HAL_ADC_Start_DMA+0x1dc>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d105      	bne.n	8009c4c <HAL_ADC_Start_DMA+0x158>
 8009c40:	4b1e      	ldr	r3, [pc, #120]	; (8009cbc <HAL_ADC_Start_DMA+0x1c8>)
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	f003 031f 	and.w	r3, r3, #31
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a20      	ldr	r2, [pc, #128]	; (8009cd4 <HAL_ADC_Start_DMA+0x1e0>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d129      	bne.n	8009caa <HAL_ADC_Start_DMA+0x1b6>
 8009c56:	4b19      	ldr	r3, [pc, #100]	; (8009cbc <HAL_ADC_Start_DMA+0x1c8>)
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f003 031f 	and.w	r3, r3, #31
 8009c5e:	2b0f      	cmp	r3, #15
 8009c60:	d823      	bhi.n	8009caa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11c      	bne.n	8009caa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009c7e:	609a      	str	r2, [r3, #8]
 8009c80:	e013      	b.n	8009caa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a11      	ldr	r2, [pc, #68]	; (8009ccc <HAL_ADC_Start_DMA+0x1d8>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d10e      	bne.n	8009caa <HAL_ADC_Start_DMA+0x1b6>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d107      	bne.n	8009caa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ca8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000000 	.word	0x20000000
 8009cb8:	431bde83 	.word	0x431bde83
 8009cbc:	40012300 	.word	0x40012300
 8009cc0:	0800a171 	.word	0x0800a171
 8009cc4:	0800a22b 	.word	0x0800a22b
 8009cc8:	0800a247 	.word	0x0800a247
 8009ccc:	40012000 	.word	0x40012000
 8009cd0:	40012100 	.word	0x40012100
 8009cd4:	40012200 	.word	0x40012200

08009cd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_ADC_ConfigChannel+0x1c>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e113      	b.n	8009f58 <HAL_ADC_ConfigChannel+0x244>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b09      	cmp	r3, #9
 8009d3e:	d925      	bls.n	8009d8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68d9      	ldr	r1, [r3, #12]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	4613      	mov	r3, r2
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	4413      	add	r3, r2
 8009d54:	3b1e      	subs	r3, #30
 8009d56:	2207      	movs	r2, #7
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	43da      	mvns	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	400a      	ands	r2, r1
 8009d64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68d9      	ldr	r1, [r3, #12]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	4618      	mov	r0, r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	4403      	add	r3, r0
 8009d7e:	3b1e      	subs	r3, #30
 8009d80:	409a      	lsls	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	60da      	str	r2, [r3, #12]
 8009d8a:	e022      	b.n	8009dd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6919      	ldr	r1, [r3, #16]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	2207      	movs	r2, #7
 8009da2:	fa02 f303 	lsl.w	r3, r2, r3
 8009da6:	43da      	mvns	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	400a      	ands	r2, r1
 8009dae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6919      	ldr	r1, [r3, #16]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	4403      	add	r3, r0
 8009dc8:	409a      	lsls	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	2b06      	cmp	r3, #6
 8009dd8:	d824      	bhi.n	8009e24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	4613      	mov	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	3b05      	subs	r3, #5
 8009dec:	221f      	movs	r2, #31
 8009dee:	fa02 f303 	lsl.w	r3, r2, r3
 8009df2:	43da      	mvns	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	400a      	ands	r2, r1
 8009dfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	4618      	mov	r0, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	3b05      	subs	r3, #5
 8009e16:	fa00 f203 	lsl.w	r2, r0, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	635a      	str	r2, [r3, #52]	; 0x34
 8009e22:	e04c      	b.n	8009ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b0c      	cmp	r3, #12
 8009e2a:	d824      	bhi.n	8009e76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3b23      	subs	r3, #35	; 0x23
 8009e3e:	221f      	movs	r2, #31
 8009e40:	fa02 f303 	lsl.w	r3, r2, r3
 8009e44:	43da      	mvns	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	400a      	ands	r2, r1
 8009e4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	3b23      	subs	r3, #35	; 0x23
 8009e68:	fa00 f203 	lsl.w	r2, r0, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	631a      	str	r2, [r3, #48]	; 0x30
 8009e74:	e023      	b.n	8009ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	3b41      	subs	r3, #65	; 0x41
 8009e88:	221f      	movs	r2, #31
 8009e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8e:	43da      	mvns	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	400a      	ands	r2, r1
 8009e96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	3b41      	subs	r3, #65	; 0x41
 8009eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ebe:	4b29      	ldr	r3, [pc, #164]	; (8009f64 <HAL_ADC_ConfigChannel+0x250>)
 8009ec0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a28      	ldr	r2, [pc, #160]	; (8009f68 <HAL_ADC_ConfigChannel+0x254>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d10f      	bne.n	8009eec <HAL_ADC_ConfigChannel+0x1d8>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b12      	cmp	r3, #18
 8009ed2:	d10b      	bne.n	8009eec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a1d      	ldr	r2, [pc, #116]	; (8009f68 <HAL_ADC_ConfigChannel+0x254>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d12b      	bne.n	8009f4e <HAL_ADC_ConfigChannel+0x23a>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a1c      	ldr	r2, [pc, #112]	; (8009f6c <HAL_ADC_ConfigChannel+0x258>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d003      	beq.n	8009f08 <HAL_ADC_ConfigChannel+0x1f4>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b11      	cmp	r3, #17
 8009f06:	d122      	bne.n	8009f4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a11      	ldr	r2, [pc, #68]	; (8009f6c <HAL_ADC_ConfigChannel+0x258>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d111      	bne.n	8009f4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009f2a:	4b11      	ldr	r3, [pc, #68]	; (8009f70 <HAL_ADC_ConfigChannel+0x25c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a11      	ldr	r2, [pc, #68]	; (8009f74 <HAL_ADC_ConfigChannel+0x260>)
 8009f30:	fba2 2303 	umull	r2, r3, r2, r3
 8009f34:	0c9a      	lsrs	r2, r3, #18
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009f40:	e002      	b.n	8009f48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f9      	bne.n	8009f42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	40012300 	.word	0x40012300
 8009f68:	40012000 	.word	0x40012000
 8009f6c:	10000012 	.word	0x10000012
 8009f70:	20000000 	.word	0x20000000
 8009f74:	431bde83 	.word	0x431bde83

08009f78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009f80:	4b79      	ldr	r3, [pc, #484]	; (800a168 <ADC_Init+0x1f0>)
 8009f82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6859      	ldr	r1, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	021a      	lsls	r2, r3, #8
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6859      	ldr	r1, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ff2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6899      	ldr	r1, [r3, #8]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	4a58      	ldr	r2, [pc, #352]	; (800a16c <ADC_Init+0x1f4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d022      	beq.n	800a056 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689a      	ldr	r2, [r3, #8]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a01e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6899      	ldr	r1, [r3, #8]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689a      	ldr	r2, [r3, #8]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6899      	ldr	r1, [r3, #8]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	430a      	orrs	r2, r1
 800a052:	609a      	str	r2, [r3, #8]
 800a054:	e00f      	b.n	800a076 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a074:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0202 	bic.w	r2, r2, #2
 800a084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6899      	ldr	r1, [r3, #8]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7e1b      	ldrb	r3, [r3, #24]
 800a090:	005a      	lsls	r2, r3, #1
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01b      	beq.n	800a0dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a0c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6859      	ldr	r1, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	035a      	lsls	r2, r3, #13
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	605a      	str	r2, [r3, #4]
 800a0da:	e007      	b.n	800a0ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	3b01      	subs	r3, #1
 800a108:	051a      	lsls	r2, r3, #20
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a120:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6899      	ldr	r1, [r3, #8]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a12e:	025a      	lsls	r2, r3, #9
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6899      	ldr	r1, [r3, #8]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	029a      	lsls	r2, r3, #10
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	609a      	str	r2, [r3, #8]
}
 800a15c:	bf00      	nop
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	40012300 	.word	0x40012300
 800a16c:	0f000001 	.word	0x0f000001

0800a170 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a186:	2b00      	cmp	r3, #0
 800a188:	d13c      	bne.n	800a204 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d12b      	bne.n	800a1fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d127      	bne.n	800a1fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d006      	beq.n	800a1c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d119      	bne.n	800a1fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0220 	bic.w	r2, r2, #32
 800a1d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d105      	bne.n	800a1fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f4:	f043 0201 	orr.w	r2, r3, #1
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fd6b 	bl	8009cd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a202:	e00e      	b.n	800a222 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7ff fd75 	bl	8009d00 <HAL_ADC_ErrorCallback>
}
 800a216:	e004      	b.n	800a222 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4798      	blx	r3
}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f7ff fd57 	bl	8009cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2240      	movs	r2, #64	; 0x40
 800a258:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25e:	f043 0204 	orr.w	r2, r3, #4
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff fd4a 	bl	8009d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a26c:	bf00      	nop
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a290:	4013      	ands	r3, r2
 800a292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a29c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a2a6:	4a04      	ldr	r2, [pc, #16]	; (800a2b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	60d3      	str	r3, [r2, #12]
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	e000ed00 	.word	0xe000ed00

0800a2bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <__NVIC_GetPriorityGrouping+0x18>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	f003 0307 	and.w	r3, r3, #7
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	e000ed00 	.word	0xe000ed00

0800a2d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	db0b      	blt.n	800a302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	f003 021f 	and.w	r2, r3, #31
 800a2f0:	4907      	ldr	r1, [pc, #28]	; (800a310 <__NVIC_EnableIRQ+0x38>)
 800a2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2f6:	095b      	lsrs	r3, r3, #5
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	e000e100 	.word	0xe000e100

0800a314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a324:	2b00      	cmp	r3, #0
 800a326:	db0a      	blt.n	800a33e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	490c      	ldr	r1, [pc, #48]	; (800a360 <__NVIC_SetPriority+0x4c>)
 800a32e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a332:	0112      	lsls	r2, r2, #4
 800a334:	b2d2      	uxtb	r2, r2
 800a336:	440b      	add	r3, r1
 800a338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a33c:	e00a      	b.n	800a354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	b2da      	uxtb	r2, r3
 800a342:	4908      	ldr	r1, [pc, #32]	; (800a364 <__NVIC_SetPriority+0x50>)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	3b04      	subs	r3, #4
 800a34c:	0112      	lsls	r2, r2, #4
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	440b      	add	r3, r1
 800a352:	761a      	strb	r2, [r3, #24]
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	e000e100 	.word	0xe000e100
 800a364:	e000ed00 	.word	0xe000ed00

0800a368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a368:	b480      	push	{r7}
 800a36a:	b089      	sub	sp, #36	; 0x24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	f1c3 0307 	rsb	r3, r3, #7
 800a382:	2b04      	cmp	r3, #4
 800a384:	bf28      	it	cs
 800a386:	2304      	movcs	r3, #4
 800a388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	3304      	adds	r3, #4
 800a38e:	2b06      	cmp	r3, #6
 800a390:	d902      	bls.n	800a398 <NVIC_EncodePriority+0x30>
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	3b03      	subs	r3, #3
 800a396:	e000      	b.n	800a39a <NVIC_EncodePriority+0x32>
 800a398:	2300      	movs	r3, #0
 800a39a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a39c:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	43da      	mvns	r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	401a      	ands	r2, r3
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a3b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ba:	43d9      	mvns	r1, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a3c0:	4313      	orrs	r3, r2
         );
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3724      	adds	r7, #36	; 0x24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3e0:	d301      	bcc.n	800a3e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e00f      	b.n	800a406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a3e6:	4a0a      	ldr	r2, [pc, #40]	; (800a410 <SysTick_Config+0x40>)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a3ee:	210f      	movs	r1, #15
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	f7ff ff8e 	bl	800a314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <SysTick_Config+0x40>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a3fe:	4b04      	ldr	r3, [pc, #16]	; (800a410 <SysTick_Config+0x40>)
 800a400:	2207      	movs	r2, #7
 800a402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000e010 	.word	0xe000e010

0800a414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff29 	bl	800a274 <__NVIC_SetPriorityGrouping>
}
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	4603      	mov	r3, r0
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
 800a436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a43c:	f7ff ff3e 	bl	800a2bc <__NVIC_GetPriorityGrouping>
 800a440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68b9      	ldr	r1, [r7, #8]
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f7ff ff8e 	bl	800a368 <NVIC_EncodePriority>
 800a44c:	4602      	mov	r2, r0
 800a44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff ff5d 	bl	800a314 <__NVIC_SetPriority>
}
 800a45a:	bf00      	nop
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	4603      	mov	r3, r0
 800a46a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a46c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff ff31 	bl	800a2d8 <__NVIC_EnableIRQ>
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ffa2 	bl	800a3d0 <SysTick_Config>
 800a48c:	4603      	mov	r3, r0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a4a4:	f7ff fab4 	bl	8009a10 <HAL_GetTick>
 800a4a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e099      	b.n	800a5e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0201 	bic.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a4d4:	e00f      	b.n	800a4f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a4d6:	f7ff fa9b 	bl	8009a10 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	d908      	bls.n	800a4f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e078      	b.n	800a5e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e8      	bne.n	800a4d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4b38      	ldr	r3, [pc, #224]	; (800a5f0 <HAL_DMA_Init+0x158>)
 800a510:	4013      	ands	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a52e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a53a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d107      	bne.n	800a560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	4313      	orrs	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	2b04      	cmp	r3, #4
 800a588:	d117      	bne.n	800a5ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	4313      	orrs	r3, r2
 800a592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fa9d 	bl	800aadc <DMA_CheckFifoParam>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d008      	beq.n	800a5ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2240      	movs	r2, #64	; 0x40
 800a5ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e016      	b.n	800a5e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fa54 	bl	800aa70 <DMA_CalcBaseAndBitshift>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d0:	223f      	movs	r2, #63	; 0x3f
 800a5d2:	409a      	lsls	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	f010803f 	.word	0xf010803f

0800a5f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <HAL_DMA_Start_IT+0x26>
 800a616:	2302      	movs	r3, #2
 800a618:	e040      	b.n	800a69c <HAL_DMA_Start_IT+0xa8>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d12f      	bne.n	800a68e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2202      	movs	r2, #2
 800a632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f9e6 	bl	800aa14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64c:	223f      	movs	r2, #63	; 0x3f
 800a64e:	409a      	lsls	r2, r3
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0216 	orr.w	r2, r2, #22
 800a662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f042 0208 	orr.w	r2, r2, #8
 800a67a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e005      	b.n	800a69a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a696:	2302      	movs	r3, #2
 800a698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2280      	movs	r2, #128	; 0x80
 800a6bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e00c      	b.n	800a6dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2205      	movs	r2, #5
 800a6c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 0201 	bic.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a6f4:	4b92      	ldr	r3, [pc, #584]	; (800a940 <HAL_DMA_IRQHandler+0x258>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a92      	ldr	r2, [pc, #584]	; (800a944 <HAL_DMA_IRQHandler+0x25c>)
 800a6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fe:	0a9b      	lsrs	r3, r3, #10
 800a700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a712:	2208      	movs	r2, #8
 800a714:	409a      	lsls	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4013      	ands	r3, r2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d01a      	beq.n	800a754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d013      	beq.n	800a754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0204 	bic.w	r2, r2, #4
 800a73a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a740:	2208      	movs	r2, #8
 800a742:	409a      	lsls	r2, r3
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74c:	f043 0201 	orr.w	r2, r3, #1
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a758:	2201      	movs	r2, #1
 800a75a:	409a      	lsls	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d012      	beq.n	800a78a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a776:	2201      	movs	r2, #1
 800a778:	409a      	lsls	r2, r3
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a782:	f043 0202 	orr.w	r2, r3, #2
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78e:	2204      	movs	r2, #4
 800a790:	409a      	lsls	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4013      	ands	r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d012      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00b      	beq.n	800a7c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	409a      	lsls	r2, r3
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b8:	f043 0204 	orr.w	r2, r3, #4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c4:	2210      	movs	r2, #16
 800a7c6:	409a      	lsls	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d043      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d03c      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e2:	2210      	movs	r2, #16
 800a7e4:	409a      	lsls	r2, r3
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d018      	beq.n	800a82a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d108      	bne.n	800a818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d024      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
 800a816:	e01f      	b.n	800a858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01b      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	4798      	blx	r3
 800a828:	e016      	b.n	800a858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a834:	2b00      	cmp	r3, #0
 800a836:	d107      	bne.n	800a848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0208 	bic.w	r2, r2, #8
 800a846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	2220      	movs	r2, #32
 800a85e:	409a      	lsls	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4013      	ands	r3, r2
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 808e 	beq.w	800a986 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8086 	beq.w	800a986 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87e:	2220      	movs	r2, #32
 800a880:	409a      	lsls	r2, r3
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d136      	bne.n	800a900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0216 	bic.w	r2, r2, #22
 800a8a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d103      	bne.n	800a8c2 <HAL_DMA_IRQHandler+0x1da>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d007      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0208 	bic.w	r2, r2, #8
 800a8d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d6:	223f      	movs	r2, #63	; 0x3f
 800a8d8:	409a      	lsls	r2, r3
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d07d      	beq.n	800a9f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
        }
        return;
 800a8fe:	e078      	b.n	800a9f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d01c      	beq.n	800a948 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d108      	bne.n	800a92e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a920:	2b00      	cmp	r3, #0
 800a922:	d030      	beq.n	800a986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
 800a92c:	e02b      	b.n	800a986 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	2b00      	cmp	r3, #0
 800a934:	d027      	beq.n	800a986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
 800a93e:	e022      	b.n	800a986 <HAL_DMA_IRQHandler+0x29e>
 800a940:	20000000 	.word	0x20000000
 800a944:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10f      	bne.n	800a976 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f022 0210 	bic.w	r2, r2, #16
 800a964:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d032      	beq.n	800a9f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d022      	beq.n	800a9e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2205      	movs	r2, #5
 800a99e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0201 	bic.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60bb      	str	r3, [r7, #8]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d307      	bcc.n	800a9ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f2      	bne.n	800a9b2 <HAL_DMA_IRQHandler+0x2ca>
 800a9cc:	e000      	b.n	800a9d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a9ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
 800a9f0:	e000      	b.n	800a9f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a9f2:	bf00      	nop
    }
  }
}
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop

0800a9fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	2b40      	cmp	r3, #64	; 0x40
 800aa40:	d108      	bne.n	800aa54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aa52:	e007      	b.n	800aa64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]
}
 800aa64:	bf00      	nop
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	3b10      	subs	r3, #16
 800aa80:	4a14      	ldr	r2, [pc, #80]	; (800aad4 <DMA_CalcBaseAndBitshift+0x64>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	091b      	lsrs	r3, r3, #4
 800aa88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800aa8a:	4a13      	ldr	r2, [pc, #76]	; (800aad8 <DMA_CalcBaseAndBitshift+0x68>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d909      	bls.n	800aab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aaa6:	f023 0303 	bic.w	r3, r3, #3
 800aaaa:	1d1a      	adds	r2, r3, #4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	659a      	str	r2, [r3, #88]	; 0x58
 800aab0:	e007      	b.n	800aac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aaba:	f023 0303 	bic.w	r3, r3, #3
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	aaaaaaab 	.word	0xaaaaaaab
 800aad8:	0801a358 	.word	0x0801a358

0800aadc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d11f      	bne.n	800ab36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d855      	bhi.n	800aba8 <DMA_CheckFifoParam+0xcc>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <DMA_CheckFifoParam+0x28>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab15 	.word	0x0800ab15
 800ab08:	0800ab27 	.word	0x0800ab27
 800ab0c:	0800ab15 	.word	0x0800ab15
 800ab10:	0800aba9 	.word	0x0800aba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d045      	beq.n	800abac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab24:	e042      	b.n	800abac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab2e:	d13f      	bne.n	800abb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab34:	e03c      	b.n	800abb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab3e:	d121      	bne.n	800ab84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d836      	bhi.n	800abb4 <DMA_CheckFifoParam+0xd8>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <DMA_CheckFifoParam+0x70>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ab63 	.word	0x0800ab63
 800ab54:	0800ab5d 	.word	0x0800ab5d
 800ab58:	0800ab75 	.word	0x0800ab75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab60:	e02f      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d024      	beq.n	800abb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab72:	e021      	b.n	800abb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ab7c:	d11e      	bne.n	800abbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ab82:	e01b      	b.n	800abbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d902      	bls.n	800ab90 <DMA_CheckFifoParam+0xb4>
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d003      	beq.n	800ab96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ab8e:	e018      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
      break;
 800ab94:	e015      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00e      	beq.n	800abc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	73fb      	strb	r3, [r7, #15]
      break;
 800aba6:	e00b      	b.n	800abc0 <DMA_CheckFifoParam+0xe4>
      break;
 800aba8:	bf00      	nop
 800abaa:	e00a      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      break;
 800abac:	bf00      	nop
 800abae:	e008      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      break;
 800abb0:	bf00      	nop
 800abb2:	e006      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      break;
 800abb4:	bf00      	nop
 800abb6:	e004      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      break;
 800abb8:	bf00      	nop
 800abba:	e002      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      break;   
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <DMA_CheckFifoParam+0xe6>
      break;
 800abc0:	bf00      	nop
    }
  } 
  
  return status; 
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b089      	sub	sp, #36	; 0x24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800abde:	2300      	movs	r3, #0
 800abe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abe6:	2300      	movs	r3, #0
 800abe8:	61fb      	str	r3, [r7, #28]
 800abea:	e177      	b.n	800aedc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800abec:	2201      	movs	r2, #1
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	fa02 f303 	lsl.w	r3, r2, r3
 800abf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	4013      	ands	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	f040 8166 	bne.w	800aed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d00b      	beq.n	800ac2a <HAL_GPIO_Init+0x5a>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d007      	beq.n	800ac2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ac1e:	2b11      	cmp	r3, #17
 800ac20:	d003      	beq.n	800ac2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b12      	cmp	r3, #18
 800ac28:	d130      	bne.n	800ac8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	2203      	movs	r2, #3
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	43db      	mvns	r3, r3
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ac60:	2201      	movs	r2, #1
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	fa02 f303 	lsl.w	r3, r2, r3
 800ac68:	43db      	mvns	r3, r3
 800ac6a:	69ba      	ldr	r2, [r7, #24]
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	091b      	lsrs	r3, r3, #4
 800ac76:	f003 0201 	and.w	r2, r3, #1
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	2203      	movs	r2, #3
 800ac98:	fa02 f303 	lsl.w	r3, r2, r3
 800ac9c:	43db      	mvns	r3, r3
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	4013      	ands	r3, r2
 800aca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	689a      	ldr	r2, [r3, #8]
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	fa02 f303 	lsl.w	r3, r2, r3
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d003      	beq.n	800accc <HAL_GPIO_Init+0xfc>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	2b12      	cmp	r3, #18
 800acca:	d123      	bne.n	800ad14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	08da      	lsrs	r2, r3, #3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3208      	adds	r2, #8
 800acd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	f003 0307 	and.w	r3, r3, #7
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	220f      	movs	r2, #15
 800ace4:	fa02 f303 	lsl.w	r3, r2, r3
 800ace8:	43db      	mvns	r3, r3
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	4013      	ands	r3, r2
 800acee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	691a      	ldr	r2, [r3, #16]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	08da      	lsrs	r2, r3, #3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3208      	adds	r2, #8
 800ad0e:	69b9      	ldr	r1, [r7, #24]
 800ad10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	2203      	movs	r2, #3
 800ad20:	fa02 f303 	lsl.w	r3, r2, r3
 800ad24:	43db      	mvns	r3, r3
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f003 0203 	and.w	r2, r3, #3
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3c:	69ba      	ldr	r2, [r7, #24]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 80c0 	beq.w	800aed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad56:	2300      	movs	r3, #0
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	4b65      	ldr	r3, [pc, #404]	; (800aef0 <HAL_GPIO_Init+0x320>)
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	4a64      	ldr	r2, [pc, #400]	; (800aef0 <HAL_GPIO_Init+0x320>)
 800ad60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad64:	6453      	str	r3, [r2, #68]	; 0x44
 800ad66:	4b62      	ldr	r3, [pc, #392]	; (800aef0 <HAL_GPIO_Init+0x320>)
 800ad68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad72:	4a60      	ldr	r2, [pc, #384]	; (800aef4 <HAL_GPIO_Init+0x324>)
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	089b      	lsrs	r3, r3, #2
 800ad78:	3302      	adds	r3, #2
 800ad7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	220f      	movs	r2, #15
 800ad8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8e:	43db      	mvns	r3, r3
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	4013      	ands	r3, r2
 800ad94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a57      	ldr	r2, [pc, #348]	; (800aef8 <HAL_GPIO_Init+0x328>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d037      	beq.n	800ae0e <HAL_GPIO_Init+0x23e>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a56      	ldr	r2, [pc, #344]	; (800aefc <HAL_GPIO_Init+0x32c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d031      	beq.n	800ae0a <HAL_GPIO_Init+0x23a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a55      	ldr	r2, [pc, #340]	; (800af00 <HAL_GPIO_Init+0x330>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d02b      	beq.n	800ae06 <HAL_GPIO_Init+0x236>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a54      	ldr	r2, [pc, #336]	; (800af04 <HAL_GPIO_Init+0x334>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d025      	beq.n	800ae02 <HAL_GPIO_Init+0x232>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a53      	ldr	r2, [pc, #332]	; (800af08 <HAL_GPIO_Init+0x338>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d01f      	beq.n	800adfe <HAL_GPIO_Init+0x22e>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a52      	ldr	r2, [pc, #328]	; (800af0c <HAL_GPIO_Init+0x33c>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d019      	beq.n	800adfa <HAL_GPIO_Init+0x22a>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a51      	ldr	r2, [pc, #324]	; (800af10 <HAL_GPIO_Init+0x340>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d013      	beq.n	800adf6 <HAL_GPIO_Init+0x226>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a50      	ldr	r2, [pc, #320]	; (800af14 <HAL_GPIO_Init+0x344>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d00d      	beq.n	800adf2 <HAL_GPIO_Init+0x222>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a4f      	ldr	r2, [pc, #316]	; (800af18 <HAL_GPIO_Init+0x348>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d007      	beq.n	800adee <HAL_GPIO_Init+0x21e>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a4e      	ldr	r2, [pc, #312]	; (800af1c <HAL_GPIO_Init+0x34c>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d101      	bne.n	800adea <HAL_GPIO_Init+0x21a>
 800ade6:	2309      	movs	r3, #9
 800ade8:	e012      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800adea:	230a      	movs	r3, #10
 800adec:	e010      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800adee:	2308      	movs	r3, #8
 800adf0:	e00e      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800adf2:	2307      	movs	r3, #7
 800adf4:	e00c      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800adf6:	2306      	movs	r3, #6
 800adf8:	e00a      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800adfa:	2305      	movs	r3, #5
 800adfc:	e008      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800adfe:	2304      	movs	r3, #4
 800ae00:	e006      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800ae02:	2303      	movs	r3, #3
 800ae04:	e004      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800ae06:	2302      	movs	r3, #2
 800ae08:	e002      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <HAL_GPIO_Init+0x240>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	69fa      	ldr	r2, [r7, #28]
 800ae12:	f002 0203 	and.w	r2, r2, #3
 800ae16:	0092      	lsls	r2, r2, #2
 800ae18:	4093      	lsls	r3, r2
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae20:	4934      	ldr	r1, [pc, #208]	; (800aef4 <HAL_GPIO_Init+0x324>)
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	089b      	lsrs	r3, r3, #2
 800ae26:	3302      	adds	r3, #2
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ae2e:	4b3c      	ldr	r3, [pc, #240]	; (800af20 <HAL_GPIO_Init+0x350>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	43db      	mvns	r3, r3
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ae52:	4a33      	ldr	r2, [pc, #204]	; (800af20 <HAL_GPIO_Init+0x350>)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ae58:	4b31      	ldr	r3, [pc, #196]	; (800af20 <HAL_GPIO_Init+0x350>)
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	43db      	mvns	r3, r3
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	4013      	ands	r3, r2
 800ae66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ae74:	69ba      	ldr	r2, [r7, #24]
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ae7c:	4a28      	ldr	r2, [pc, #160]	; (800af20 <HAL_GPIO_Init+0x350>)
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ae82:	4b27      	ldr	r3, [pc, #156]	; (800af20 <HAL_GPIO_Init+0x350>)
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	43db      	mvns	r3, r3
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ae9e:	69ba      	ldr	r2, [r7, #24]
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aea6:	4a1e      	ldr	r2, [pc, #120]	; (800af20 <HAL_GPIO_Init+0x350>)
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aeac:	4b1c      	ldr	r3, [pc, #112]	; (800af20 <HAL_GPIO_Init+0x350>)
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	43db      	mvns	r3, r3
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aed0:	4a13      	ldr	r2, [pc, #76]	; (800af20 <HAL_GPIO_Init+0x350>)
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	3301      	adds	r3, #1
 800aeda:	61fb      	str	r3, [r7, #28]
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	2b0f      	cmp	r3, #15
 800aee0:	f67f ae84 	bls.w	800abec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aee4:	bf00      	nop
 800aee6:	3724      	adds	r7, #36	; 0x24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	40023800 	.word	0x40023800
 800aef4:	40013800 	.word	0x40013800
 800aef8:	40020000 	.word	0x40020000
 800aefc:	40020400 	.word	0x40020400
 800af00:	40020800 	.word	0x40020800
 800af04:	40020c00 	.word	0x40020c00
 800af08:	40021000 	.word	0x40021000
 800af0c:	40021400 	.word	0x40021400
 800af10:	40021800 	.word	0x40021800
 800af14:	40021c00 	.word	0x40021c00
 800af18:	40022000 	.word	0x40022000
 800af1c:	40022400 	.word	0x40022400
 800af20:	40013c00 	.word	0x40013c00

0800af24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	887b      	ldrh	r3, [r7, #2]
 800af36:	4013      	ands	r3, r2
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800af3c:	2301      	movs	r3, #1
 800af3e:	73fb      	strb	r3, [r7, #15]
 800af40:	e001      	b.n	800af46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	807b      	strh	r3, [r7, #2]
 800af60:	4613      	mov	r3, r2
 800af62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800af64:	787b      	ldrb	r3, [r7, #1]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800af6a:	887a      	ldrh	r2, [r7, #2]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800af70:	e003      	b.n	800af7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800af72:	887b      	ldrh	r3, [r7, #2]
 800af74:	041a      	lsls	r2, r3, #16
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	619a      	str	r2, [r3, #24]
}
 800af7a:	bf00      	nop
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e11f      	b.n	800b1da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d106      	bne.n	800afb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7fb fec6 	bl	8006d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2224      	movs	r2, #36	; 0x24
 800afb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0201 	bic.w	r2, r2, #1
 800afca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800afec:	f001 f96e 	bl	800c2cc <HAL_RCC_GetPCLK1Freq>
 800aff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	4a7b      	ldr	r2, [pc, #492]	; (800b1e4 <HAL_I2C_Init+0x25c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d807      	bhi.n	800b00c <HAL_I2C_Init+0x84>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4a7a      	ldr	r2, [pc, #488]	; (800b1e8 <HAL_I2C_Init+0x260>)
 800b000:	4293      	cmp	r3, r2
 800b002:	bf94      	ite	ls
 800b004:	2301      	movls	r3, #1
 800b006:	2300      	movhi	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	e006      	b.n	800b01a <HAL_I2C_Init+0x92>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4a77      	ldr	r2, [pc, #476]	; (800b1ec <HAL_I2C_Init+0x264>)
 800b010:	4293      	cmp	r3, r2
 800b012:	bf94      	ite	ls
 800b014:	2301      	movls	r3, #1
 800b016:	2300      	movhi	r3, #0
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e0db      	b.n	800b1da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4a72      	ldr	r2, [pc, #456]	; (800b1f0 <HAL_I2C_Init+0x268>)
 800b026:	fba2 2303 	umull	r2, r3, r2, r3
 800b02a:	0c9b      	lsrs	r3, r3, #18
 800b02c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	430a      	orrs	r2, r1
 800b040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	4a64      	ldr	r2, [pc, #400]	; (800b1e4 <HAL_I2C_Init+0x25c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d802      	bhi.n	800b05c <HAL_I2C_Init+0xd4>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	3301      	adds	r3, #1
 800b05a:	e009      	b.n	800b070 <HAL_I2C_Init+0xe8>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b062:	fb02 f303 	mul.w	r3, r2, r3
 800b066:	4a63      	ldr	r2, [pc, #396]	; (800b1f4 <HAL_I2C_Init+0x26c>)
 800b068:	fba2 2303 	umull	r2, r3, r2, r3
 800b06c:	099b      	lsrs	r3, r3, #6
 800b06e:	3301      	adds	r3, #1
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6812      	ldr	r2, [r2, #0]
 800b074:	430b      	orrs	r3, r1
 800b076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b082:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	4956      	ldr	r1, [pc, #344]	; (800b1e4 <HAL_I2C_Init+0x25c>)
 800b08c:	428b      	cmp	r3, r1
 800b08e:	d80d      	bhi.n	800b0ac <HAL_I2C_Init+0x124>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	1e59      	subs	r1, r3, #1
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b09e:	3301      	adds	r3, #1
 800b0a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	bf38      	it	cc
 800b0a8:	2304      	movcc	r3, #4
 800b0aa:	e04f      	b.n	800b14c <HAL_I2C_Init+0x1c4>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d111      	bne.n	800b0d8 <HAL_I2C_Init+0x150>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	1e58      	subs	r0, r3, #1
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6859      	ldr	r1, [r3, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	005b      	lsls	r3, r3, #1
 800b0c0:	440b      	add	r3, r1
 800b0c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bf0c      	ite	eq
 800b0d0:	2301      	moveq	r3, #1
 800b0d2:	2300      	movne	r3, #0
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	e012      	b.n	800b0fe <HAL_I2C_Init+0x176>
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	1e58      	subs	r0, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6859      	ldr	r1, [r3, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	0099      	lsls	r1, r3, #2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bf0c      	ite	eq
 800b0f8:	2301      	moveq	r3, #1
 800b0fa:	2300      	movne	r3, #0
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <HAL_I2C_Init+0x17e>
 800b102:	2301      	movs	r3, #1
 800b104:	e022      	b.n	800b14c <HAL_I2C_Init+0x1c4>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10e      	bne.n	800b12c <HAL_I2C_Init+0x1a4>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	1e58      	subs	r0, r3, #1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6859      	ldr	r1, [r3, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	440b      	add	r3, r1
 800b11c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b120:	3301      	adds	r3, #1
 800b122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b12a:	e00f      	b.n	800b14c <HAL_I2C_Init+0x1c4>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	1e58      	subs	r0, r3, #1
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6859      	ldr	r1, [r3, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	0099      	lsls	r1, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b142:	3301      	adds	r3, #1
 800b144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	6809      	ldr	r1, [r1, #0]
 800b150:	4313      	orrs	r3, r2
 800b152:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	69da      	ldr	r2, [r3, #28]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	431a      	orrs	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b17a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	6911      	ldr	r1, [r2, #16]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	68d2      	ldr	r2, [r2, #12]
 800b186:	4311      	orrs	r1, r2
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6812      	ldr	r2, [r2, #0]
 800b18c:	430b      	orrs	r3, r1
 800b18e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	695a      	ldr	r2, [r3, #20]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f042 0201 	orr.w	r2, r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	000186a0 	.word	0x000186a0
 800b1e8:	001e847f 	.word	0x001e847f
 800b1ec:	003d08ff 	.word	0x003d08ff
 800b1f0:	431bde83 	.word	0x431bde83
 800b1f4:	10624dd3 	.word	0x10624dd3

0800b1f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b088      	sub	sp, #32
 800b1fc:	af02      	add	r7, sp, #8
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	607a      	str	r2, [r7, #4]
 800b202:	461a      	mov	r2, r3
 800b204:	460b      	mov	r3, r1
 800b206:	817b      	strh	r3, [r7, #10]
 800b208:	4613      	mov	r3, r2
 800b20a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b20c:	f7fe fc00 	bl	8009a10 <HAL_GetTick>
 800b210:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	f040 80e0 	bne.w	800b3e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	2319      	movs	r3, #25
 800b226:	2201      	movs	r2, #1
 800b228:	4970      	ldr	r1, [pc, #448]	; (800b3ec <HAL_I2C_Master_Transmit+0x1f4>)
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f000 fc58 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b236:	2302      	movs	r3, #2
 800b238:	e0d3      	b.n	800b3e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b240:	2b01      	cmp	r3, #1
 800b242:	d101      	bne.n	800b248 <HAL_I2C_Master_Transmit+0x50>
 800b244:	2302      	movs	r3, #2
 800b246:	e0cc      	b.n	800b3e2 <HAL_I2C_Master_Transmit+0x1ea>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d007      	beq.n	800b26e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f042 0201 	orr.w	r2, r2, #1
 800b26c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b27c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2221      	movs	r2, #33	; 0x21
 800b282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2210      	movs	r2, #16
 800b28a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	893a      	ldrh	r2, [r7, #8]
 800b29e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	4a50      	ldr	r2, [pc, #320]	; (800b3f0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b2ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b2b0:	8979      	ldrh	r1, [r7, #10]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	6a3a      	ldr	r2, [r7, #32]
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fac2 	bl	800b840 <I2C_MasterRequestWrite>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e08d      	b.n	800b3e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	613b      	str	r3, [r7, #16]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	613b      	str	r3, [r7, #16]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	613b      	str	r3, [r7, #16]
 800b2da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b2dc:	e066      	b.n	800b3ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	6a39      	ldr	r1, [r7, #32]
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fcd2 	bl	800bc8c <I2C_WaitOnTXEFlagUntilTimeout>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00d      	beq.n	800b30a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d107      	bne.n	800b306 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e06b      	b.n	800b3e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b324:	b29b      	uxth	r3, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b332:	3b01      	subs	r3, #1
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b04      	cmp	r3, #4
 800b346:	d11b      	bne.n	800b380 <HAL_I2C_Master_Transmit+0x188>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d017      	beq.n	800b380 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	781a      	ldrb	r2, [r3, #0]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	3b01      	subs	r3, #1
 800b36e:	b29a      	uxth	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b378:	3b01      	subs	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	6a39      	ldr	r1, [r7, #32]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 fcc2 	bl	800bd0e <I2C_WaitOnBTFFlagUntilTimeout>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00d      	beq.n	800b3ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	2b04      	cmp	r3, #4
 800b396:	d107      	bne.n	800b3a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e01a      	b.n	800b3e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d194      	bne.n	800b2de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e000      	b.n	800b3e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b3e0:	2302      	movs	r3, #2
  }
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	00100002 	.word	0x00100002
 800b3f0:	ffff0000 	.word	0xffff0000

0800b3f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08c      	sub	sp, #48	; 0x30
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	607a      	str	r2, [r7, #4]
 800b3fe:	461a      	mov	r2, r3
 800b400:	460b      	mov	r3, r1
 800b402:	817b      	strh	r3, [r7, #10]
 800b404:	4613      	mov	r3, r2
 800b406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b408:	f7fe fb02 	bl	8009a10 <HAL_GetTick>
 800b40c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b20      	cmp	r3, #32
 800b418:	f040 820b 	bne.w	800b832 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	2319      	movs	r3, #25
 800b422:	2201      	movs	r2, #1
 800b424:	497c      	ldr	r1, [pc, #496]	; (800b618 <HAL_I2C_Master_Receive+0x224>)
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 fb5a 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b432:	2302      	movs	r3, #2
 800b434:	e1fe      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_I2C_Master_Receive+0x50>
 800b440:	2302      	movs	r3, #2
 800b442:	e1f7      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	2b01      	cmp	r3, #1
 800b458:	d007      	beq.n	800b46a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f042 0201 	orr.w	r2, r2, #1
 800b468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2222      	movs	r2, #34	; 0x22
 800b47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2210      	movs	r2, #16
 800b486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	893a      	ldrh	r2, [r7, #8]
 800b49a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4a5c      	ldr	r2, [pc, #368]	; (800b61c <HAL_I2C_Master_Receive+0x228>)
 800b4aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4ac:	8979      	ldrh	r1, [r7, #10]
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f000 fa46 	bl	800b944 <I2C_MasterRequestRead>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e1b8      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d113      	bne.n	800b4f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	623b      	str	r3, [r7, #32]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	623b      	str	r3, [r7, #32]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	623b      	str	r3, [r7, #32]
 800b4de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	e18c      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d11b      	bne.n	800b532 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b50a:	2300      	movs	r3, #0
 800b50c:	61fb      	str	r3, [r7, #28]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	61fb      	str	r3, [r7, #28]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	e16c      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b536:	2b02      	cmp	r3, #2
 800b538:	d11b      	bne.n	800b572 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b548:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b55a:	2300      	movs	r3, #0
 800b55c:	61bb      	str	r3, [r7, #24]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	61bb      	str	r3, [r7, #24]
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	e14c      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	617b      	str	r3, [r7, #20]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	617b      	str	r3, [r7, #20]
 800b596:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b598:	e138      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	f200 80f1 	bhi.w	800b786 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d123      	bne.n	800b5f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 fbed 	bl	800bd90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e139      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	691a      	ldr	r2, [r3, #16]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5f2:	e10b      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d14e      	bne.n	800b69a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	2200      	movs	r2, #0
 800b604:	4906      	ldr	r1, [pc, #24]	; (800b620 <HAL_I2C_Master_Receive+0x22c>)
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 fa6a 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d008      	beq.n	800b624 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e10e      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
 800b616:	bf00      	nop
 800b618:	00100002 	.word	0x00100002
 800b61c:	ffff0000 	.word	0xffff0000
 800b620:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	691a      	ldr	r2, [r3, #16]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3b01      	subs	r3, #1
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	b2d2      	uxtb	r2, r2
 800b672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b682:	3b01      	subs	r3, #1
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b68e:	b29b      	uxth	r3, r3
 800b690:	3b01      	subs	r3, #1
 800b692:	b29a      	uxth	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b698:	e0b8      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4966      	ldr	r1, [pc, #408]	; (800b83c <HAL_I2C_Master_Receive+0x448>)
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fa1b 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e0bf      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	691a      	ldr	r2, [r3, #16]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	b2d2      	uxtb	r2, r2
 800b6d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	494f      	ldr	r1, [pc, #316]	; (800b83c <HAL_I2C_Master_Receive+0x448>)
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 f9ed 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e091      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b71e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691a      	ldr	r2, [r3, #16]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	b2d2      	uxtb	r2, r2
 800b72c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b73c:	3b01      	subs	r3, #1
 800b73e:	b29a      	uxth	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b748:	b29b      	uxth	r3, r3
 800b74a:	3b01      	subs	r3, #1
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	691a      	ldr	r2, [r3, #16]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	1c5a      	adds	r2, r3, #1
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b784:	e042      	b.n	800b80c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f000 fb00 	bl	800bd90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e04c      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	691a      	ldr	r2, [r3, #16]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d118      	bne.n	800b80c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	691a      	ldr	r2, [r3, #16]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	b2d2      	uxtb	r2, r2
 800b7e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ec:	1c5a      	adds	r2, r3, #1
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b802:	b29b      	uxth	r3, r3
 800b804:	3b01      	subs	r3, #1
 800b806:	b29a      	uxth	r2, r3
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b810:	2b00      	cmp	r3, #0
 800b812:	f47f aec2 	bne.w	800b59a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2220      	movs	r2, #32
 800b81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	e000      	b.n	800b834 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b832:	2302      	movs	r3, #2
  }
}
 800b834:	4618      	mov	r0, r3
 800b836:	3728      	adds	r7, #40	; 0x28
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	00010004 	.word	0x00010004

0800b840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af02      	add	r7, sp, #8
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	607a      	str	r2, [r7, #4]
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	460b      	mov	r3, r1
 800b84e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d006      	beq.n	800b86a <I2C_MasterRequestWrite+0x2a>
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d003      	beq.n	800b86a <I2C_MasterRequestWrite+0x2a>
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b868:	d108      	bne.n	800b87c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	e00b      	b.n	800b894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b880:	2b12      	cmp	r3, #18
 800b882:	d107      	bne.n	800b894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 f91d 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00d      	beq.n	800b8c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ba:	d103      	bne.n	800b8c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	e035      	b.n	800b934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8d0:	d108      	bne.n	800b8e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b8d2:	897b      	ldrh	r3, [r7, #10]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b8e0:	611a      	str	r2, [r3, #16]
 800b8e2:	e01b      	b.n	800b91c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b8e4:	897b      	ldrh	r3, [r7, #10]
 800b8e6:	11db      	asrs	r3, r3, #7
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f003 0306 	and.w	r3, r3, #6
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	f063 030f 	orn	r3, r3, #15
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	490e      	ldr	r1, [pc, #56]	; (800b93c <I2C_MasterRequestWrite+0xfc>)
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f943 	bl	800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e010      	b.n	800b934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b912:	897b      	ldrh	r3, [r7, #10]
 800b914:	b2da      	uxtb	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4907      	ldr	r1, [pc, #28]	; (800b940 <I2C_MasterRequestWrite+0x100>)
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 f933 	bl	800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	00010008 	.word	0x00010008
 800b940:	00010002 	.word	0x00010002

0800b944 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af02      	add	r7, sp, #8
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	460b      	mov	r3, r1
 800b952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b968:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d006      	beq.n	800b97e <I2C_MasterRequestRead+0x3a>
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d003      	beq.n	800b97e <I2C_MasterRequestRead+0x3a>
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b97c:	d108      	bne.n	800b990 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e00b      	b.n	800b9a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b994:	2b11      	cmp	r3, #17
 800b996:	d107      	bne.n	800b9a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 f893 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00d      	beq.n	800b9dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ce:	d103      	bne.n	800b9d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e079      	b.n	800bad0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9e4:	d108      	bne.n	800b9f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b9e6:	897b      	ldrh	r3, [r7, #10]
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	f043 0301 	orr.w	r3, r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	611a      	str	r2, [r3, #16]
 800b9f6:	e05f      	b.n	800bab8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b9f8:	897b      	ldrh	r3, [r7, #10]
 800b9fa:	11db      	asrs	r3, r3, #7
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	f003 0306 	and.w	r3, r3, #6
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f063 030f 	orn	r3, r3, #15
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	4930      	ldr	r1, [pc, #192]	; (800bad8 <I2C_MasterRequestRead+0x194>)
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 f8b9 	bl	800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e054      	b.n	800bad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ba26:	897b      	ldrh	r3, [r7, #10]
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4929      	ldr	r1, [pc, #164]	; (800badc <I2C_MasterRequestRead+0x198>)
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f000 f8a9 	bl	800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e044      	b.n	800bad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba46:	2300      	movs	r3, #0
 800ba48:	613b      	str	r3, [r7, #16]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	613b      	str	r3, [r7, #16]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	613b      	str	r3, [r7, #16]
 800ba5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 f831 	bl	800bae0 <I2C_WaitOnFlagUntilTimeout>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00d      	beq.n	800baa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba92:	d103      	bne.n	800ba9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e017      	b.n	800bad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800baa0:	897b      	ldrh	r3, [r7, #10]
 800baa2:	11db      	asrs	r3, r3, #7
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	f003 0306 	and.w	r3, r3, #6
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f063 030e 	orn	r3, r3, #14
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	4907      	ldr	r1, [pc, #28]	; (800badc <I2C_MasterRequestRead+0x198>)
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 f865 	bl	800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e000      	b.n	800bad0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	00010008 	.word	0x00010008
 800badc:	00010002 	.word	0x00010002

0800bae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	4613      	mov	r3, r2
 800baee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baf0:	e025      	b.n	800bb3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf8:	d021      	beq.n	800bb3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bafa:	f7fd ff89 	bl	8009a10 <HAL_GetTick>
 800bafe:	4602      	mov	r2, r0
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d302      	bcc.n	800bb10 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d116      	bne.n	800bb3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2a:	f043 0220 	orr.w	r2, r3, #32
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e023      	b.n	800bb86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	0c1b      	lsrs	r3, r3, #16
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d10d      	bne.n	800bb64 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	43da      	mvns	r2, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	4013      	ands	r3, r2
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bf0c      	ite	eq
 800bb5a:	2301      	moveq	r3, #1
 800bb5c:	2300      	movne	r3, #0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	461a      	mov	r2, r3
 800bb62:	e00c      	b.n	800bb7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	43da      	mvns	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4013      	ands	r3, r2
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	bf0c      	ite	eq
 800bb76:	2301      	moveq	r3, #1
 800bb78:	2300      	movne	r3, #0
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d0b6      	beq.n	800baf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b084      	sub	sp, #16
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	60b9      	str	r1, [r7, #8]
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb9c:	e051      	b.n	800bc42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbac:	d123      	bne.n	800bbf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	f043 0204 	orr.w	r2, r3, #4
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e046      	b.n	800bc84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfc:	d021      	beq.n	800bc42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbfe:	f7fd ff07 	bl	8009a10 <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d302      	bcc.n	800bc14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d116      	bne.n	800bc42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	f043 0220 	orr.w	r2, r3, #32
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e020      	b.n	800bc84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d10c      	bne.n	800bc66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	43da      	mvns	r2, r3
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	4013      	ands	r3, r2
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bf14      	ite	ne
 800bc5e:	2301      	movne	r3, #1
 800bc60:	2300      	moveq	r3, #0
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	e00b      	b.n	800bc7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	43da      	mvns	r2, r3
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	4013      	ands	r3, r2
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bf14      	ite	ne
 800bc78:	2301      	movne	r3, #1
 800bc7a:	2300      	moveq	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d18d      	bne.n	800bb9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc98:	e02d      	b.n	800bcf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 f8ce 	bl	800be3c <I2C_IsAcknowledgeFailed>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e02d      	b.n	800bd06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb0:	d021      	beq.n	800bcf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcb2:	f7fd fead 	bl	8009a10 <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d302      	bcc.n	800bcc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d116      	bne.n	800bcf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2220      	movs	r2, #32
 800bcd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	f043 0220 	orr.w	r2, r3, #32
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e007      	b.n	800bd06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd00:	2b80      	cmp	r3, #128	; 0x80
 800bd02:	d1ca      	bne.n	800bc9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	60f8      	str	r0, [r7, #12]
 800bd16:	60b9      	str	r1, [r7, #8]
 800bd18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd1a:	e02d      	b.n	800bd78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 f88d 	bl	800be3c <I2C_IsAcknowledgeFailed>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e02d      	b.n	800bd88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d021      	beq.n	800bd78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd34:	f7fd fe6c 	bl	8009a10 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d302      	bcc.n	800bd4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d116      	bne.n	800bd78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	f043 0220 	orr.w	r2, r3, #32
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	e007      	b.n	800bd88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f003 0304 	and.w	r3, r3, #4
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d1ca      	bne.n	800bd1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd9c:	e042      	b.n	800be24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	f003 0310 	and.w	r3, r3, #16
 800bda8:	2b10      	cmp	r3, #16
 800bdaa:	d119      	bne.n	800bde0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f06f 0210 	mvn.w	r2, #16
 800bdb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e029      	b.n	800be34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bde0:	f7fd fe16 	bl	8009a10 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d302      	bcc.n	800bdf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d116      	bne.n	800be24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be10:	f043 0220 	orr.w	r2, r3, #32
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e007      	b.n	800be34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2e:	2b40      	cmp	r3, #64	; 0x40
 800be30:	d1b5      	bne.n	800bd9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be52:	d11b      	bne.n	800be8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800be5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be78:	f043 0204 	orr.w	r2, r3, #4
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e000      	b.n	800be8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	370c      	adds	r7, #12
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
	...

0800be9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bea6:	2300      	movs	r3, #0
 800bea8:	603b      	str	r3, [r7, #0]
 800beaa:	4b20      	ldr	r3, [pc, #128]	; (800bf2c <HAL_PWREx_EnableOverDrive+0x90>)
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	4a1f      	ldr	r2, [pc, #124]	; (800bf2c <HAL_PWREx_EnableOverDrive+0x90>)
 800beb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beb4:	6413      	str	r3, [r2, #64]	; 0x40
 800beb6:	4b1d      	ldr	r3, [pc, #116]	; (800bf2c <HAL_PWREx_EnableOverDrive+0x90>)
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bec2:	4b1b      	ldr	r3, [pc, #108]	; (800bf30 <HAL_PWREx_EnableOverDrive+0x94>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bec8:	f7fd fda2 	bl	8009a10 <HAL_GetTick>
 800becc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bece:	e009      	b.n	800bee4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bed0:	f7fd fd9e 	bl	8009a10 <HAL_GetTick>
 800bed4:	4602      	mov	r2, r0
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bede:	d901      	bls.n	800bee4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e01f      	b.n	800bf24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bee4:	4b13      	ldr	r3, [pc, #76]	; (800bf34 <HAL_PWREx_EnableOverDrive+0x98>)
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef0:	d1ee      	bne.n	800bed0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bef2:	4b11      	ldr	r3, [pc, #68]	; (800bf38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bef4:	2201      	movs	r2, #1
 800bef6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bef8:	f7fd fd8a 	bl	8009a10 <HAL_GetTick>
 800befc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800befe:	e009      	b.n	800bf14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bf00:	f7fd fd86 	bl	8009a10 <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf0e:	d901      	bls.n	800bf14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e007      	b.n	800bf24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bf14:	4b07      	ldr	r3, [pc, #28]	; (800bf34 <HAL_PWREx_EnableOverDrive+0x98>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf20:	d1ee      	bne.n	800bf00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	40023800 	.word	0x40023800
 800bf30:	420e0040 	.word	0x420e0040
 800bf34:	40007000 	.word	0x40007000
 800bf38:	420e0044 	.word	0x420e0044

0800bf3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e0cc      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf50:	4b68      	ldr	r3, [pc, #416]	; (800c0f4 <HAL_RCC_ClockConfig+0x1b8>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d90c      	bls.n	800bf78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf5e:	4b65      	ldr	r3, [pc, #404]	; (800c0f4 <HAL_RCC_ClockConfig+0x1b8>)
 800bf60:	683a      	ldr	r2, [r7, #0]
 800bf62:	b2d2      	uxtb	r2, r2
 800bf64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf66:	4b63      	ldr	r3, [pc, #396]	; (800c0f4 <HAL_RCC_ClockConfig+0x1b8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d001      	beq.n	800bf78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e0b8      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0302 	and.w	r3, r3, #2
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d020      	beq.n	800bfc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0304 	and.w	r3, r3, #4
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf90:	4b59      	ldr	r3, [pc, #356]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	4a58      	ldr	r2, [pc, #352]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bf96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0308 	and.w	r3, r3, #8
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d005      	beq.n	800bfb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bfa8:	4b53      	ldr	r3, [pc, #332]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	4a52      	ldr	r2, [pc, #328]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bfae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bfb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfb4:	4b50      	ldr	r3, [pc, #320]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	494d      	ldr	r1, [pc, #308]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d044      	beq.n	800c05c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d107      	bne.n	800bfea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfda:	4b47      	ldr	r3, [pc, #284]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d119      	bne.n	800c01a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e07f      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d003      	beq.n	800bffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d107      	bne.n	800c00a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bffa:	4b3f      	ldr	r3, [pc, #252]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e06f      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c00a:	4b3b      	ldr	r3, [pc, #236]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0302 	and.w	r3, r3, #2
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e067      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c01a:	4b37      	ldr	r3, [pc, #220]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f023 0203 	bic.w	r2, r3, #3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	4934      	ldr	r1, [pc, #208]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c028:	4313      	orrs	r3, r2
 800c02a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c02c:	f7fd fcf0 	bl	8009a10 <HAL_GetTick>
 800c030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c032:	e00a      	b.n	800c04a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c034:	f7fd fcec 	bl	8009a10 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c042:	4293      	cmp	r3, r2
 800c044:	d901      	bls.n	800c04a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e04f      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c04a:	4b2b      	ldr	r3, [pc, #172]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f003 020c 	and.w	r2, r3, #12
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	429a      	cmp	r2, r3
 800c05a:	d1eb      	bne.n	800c034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c05c:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 030f 	and.w	r3, r3, #15
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	429a      	cmp	r2, r3
 800c068:	d20c      	bcs.n	800c084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c06a:	4b22      	ldr	r3, [pc, #136]	; (800c0f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c072:	4b20      	ldr	r3, [pc, #128]	; (800c0f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 030f 	and.w	r3, r3, #15
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d001      	beq.n	800c084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e032      	b.n	800c0ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0304 	and.w	r3, r3, #4
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d008      	beq.n	800c0a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c090:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	4916      	ldr	r1, [pc, #88]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d009      	beq.n	800c0c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	490e      	ldr	r1, [pc, #56]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c0c2:	f000 f821 	bl	800c108 <HAL_RCC_GetSysClockFreq>
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	091b      	lsrs	r3, r3, #4
 800c0ce:	f003 030f 	and.w	r3, r3, #15
 800c0d2:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <HAL_RCC_ClockConfig+0x1c0>)
 800c0d4:	5cd3      	ldrb	r3, [r2, r3]
 800c0d6:	fa21 f303 	lsr.w	r3, r1, r3
 800c0da:	4a09      	ldr	r2, [pc, #36]	; (800c100 <HAL_RCC_ClockConfig+0x1c4>)
 800c0dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <HAL_RCC_ClockConfig+0x1c8>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fd fc50 	bl	8009988 <HAL_InitTick>

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	40023c00 	.word	0x40023c00
 800c0f8:	40023800 	.word	0x40023800
 800c0fc:	0801a340 	.word	0x0801a340
 800c100:	20000000 	.word	0x20000000
 800c104:	20000004 	.word	0x20000004

0800c108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	2300      	movs	r3, #0
 800c118:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c11e:	4b63      	ldr	r3, [pc, #396]	; (800c2ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f003 030c 	and.w	r3, r3, #12
 800c126:	2b04      	cmp	r3, #4
 800c128:	d007      	beq.n	800c13a <HAL_RCC_GetSysClockFreq+0x32>
 800c12a:	2b08      	cmp	r3, #8
 800c12c:	d008      	beq.n	800c140 <HAL_RCC_GetSysClockFreq+0x38>
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f040 80b4 	bne.w	800c29c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c134:	4b5e      	ldr	r3, [pc, #376]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c136:	60bb      	str	r3, [r7, #8]
       break;
 800c138:	e0b3      	b.n	800c2a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c13a:	4b5d      	ldr	r3, [pc, #372]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c13c:	60bb      	str	r3, [r7, #8]
      break;
 800c13e:	e0b0      	b.n	800c2a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c140:	4b5a      	ldr	r3, [pc, #360]	; (800c2ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c148:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c14a:	4b58      	ldr	r3, [pc, #352]	; (800c2ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d04a      	beq.n	800c1ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c156:	4b55      	ldr	r3, [pc, #340]	; (800c2ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	099b      	lsrs	r3, r3, #6
 800c15c:	f04f 0400 	mov.w	r4, #0
 800c160:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c164:	f04f 0200 	mov.w	r2, #0
 800c168:	ea03 0501 	and.w	r5, r3, r1
 800c16c:	ea04 0602 	and.w	r6, r4, r2
 800c170:	4629      	mov	r1, r5
 800c172:	4632      	mov	r2, r6
 800c174:	f04f 0300 	mov.w	r3, #0
 800c178:	f04f 0400 	mov.w	r4, #0
 800c17c:	0154      	lsls	r4, r2, #5
 800c17e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c182:	014b      	lsls	r3, r1, #5
 800c184:	4619      	mov	r1, r3
 800c186:	4622      	mov	r2, r4
 800c188:	1b49      	subs	r1, r1, r5
 800c18a:	eb62 0206 	sbc.w	r2, r2, r6
 800c18e:	f04f 0300 	mov.w	r3, #0
 800c192:	f04f 0400 	mov.w	r4, #0
 800c196:	0194      	lsls	r4, r2, #6
 800c198:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c19c:	018b      	lsls	r3, r1, #6
 800c19e:	1a5b      	subs	r3, r3, r1
 800c1a0:	eb64 0402 	sbc.w	r4, r4, r2
 800c1a4:	f04f 0100 	mov.w	r1, #0
 800c1a8:	f04f 0200 	mov.w	r2, #0
 800c1ac:	00e2      	lsls	r2, r4, #3
 800c1ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c1b2:	00d9      	lsls	r1, r3, #3
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4614      	mov	r4, r2
 800c1b8:	195b      	adds	r3, r3, r5
 800c1ba:	eb44 0406 	adc.w	r4, r4, r6
 800c1be:	f04f 0100 	mov.w	r1, #0
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	02a2      	lsls	r2, r4, #10
 800c1c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c1cc:	0299      	lsls	r1, r3, #10
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	4614      	mov	r4, r2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f04f 0400 	mov.w	r4, #0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	4623      	mov	r3, r4
 800c1e0:	f7f4 fd6a 	bl	8000cb8 <__aeabi_uldivmod>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	60fb      	str	r3, [r7, #12]
 800c1ea:	e049      	b.n	800c280 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c1ec:	4b2f      	ldr	r3, [pc, #188]	; (800c2ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	099b      	lsrs	r3, r3, #6
 800c1f2:	f04f 0400 	mov.w	r4, #0
 800c1f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c1fa:	f04f 0200 	mov.w	r2, #0
 800c1fe:	ea03 0501 	and.w	r5, r3, r1
 800c202:	ea04 0602 	and.w	r6, r4, r2
 800c206:	4629      	mov	r1, r5
 800c208:	4632      	mov	r2, r6
 800c20a:	f04f 0300 	mov.w	r3, #0
 800c20e:	f04f 0400 	mov.w	r4, #0
 800c212:	0154      	lsls	r4, r2, #5
 800c214:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c218:	014b      	lsls	r3, r1, #5
 800c21a:	4619      	mov	r1, r3
 800c21c:	4622      	mov	r2, r4
 800c21e:	1b49      	subs	r1, r1, r5
 800c220:	eb62 0206 	sbc.w	r2, r2, r6
 800c224:	f04f 0300 	mov.w	r3, #0
 800c228:	f04f 0400 	mov.w	r4, #0
 800c22c:	0194      	lsls	r4, r2, #6
 800c22e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c232:	018b      	lsls	r3, r1, #6
 800c234:	1a5b      	subs	r3, r3, r1
 800c236:	eb64 0402 	sbc.w	r4, r4, r2
 800c23a:	f04f 0100 	mov.w	r1, #0
 800c23e:	f04f 0200 	mov.w	r2, #0
 800c242:	00e2      	lsls	r2, r4, #3
 800c244:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c248:	00d9      	lsls	r1, r3, #3
 800c24a:	460b      	mov	r3, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	195b      	adds	r3, r3, r5
 800c250:	eb44 0406 	adc.w	r4, r4, r6
 800c254:	f04f 0100 	mov.w	r1, #0
 800c258:	f04f 0200 	mov.w	r2, #0
 800c25c:	02a2      	lsls	r2, r4, #10
 800c25e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c262:	0299      	lsls	r1, r3, #10
 800c264:	460b      	mov	r3, r1
 800c266:	4614      	mov	r4, r2
 800c268:	4618      	mov	r0, r3
 800c26a:	4621      	mov	r1, r4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f04f 0400 	mov.w	r4, #0
 800c272:	461a      	mov	r2, r3
 800c274:	4623      	mov	r3, r4
 800c276:	f7f4 fd1f 	bl	8000cb8 <__aeabi_uldivmod>
 800c27a:	4603      	mov	r3, r0
 800c27c:	460c      	mov	r4, r1
 800c27e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	0c1b      	lsrs	r3, r3, #16
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	3301      	adds	r3, #1
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	fbb2 f3f3 	udiv	r3, r2, r3
 800c298:	60bb      	str	r3, [r7, #8]
      break;
 800c29a:	e002      	b.n	800c2a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c29e:	60bb      	str	r3, [r7, #8]
      break;
 800c2a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ac:	40023800 	.word	0x40023800
 800c2b0:	00f42400 	.word	0x00f42400

0800c2b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2b8:	4b03      	ldr	r3, [pc, #12]	; (800c2c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	20000000 	.word	0x20000000

0800c2cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c2d0:	f7ff fff0 	bl	800c2b4 <HAL_RCC_GetHCLKFreq>
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	4b05      	ldr	r3, [pc, #20]	; (800c2ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	0a9b      	lsrs	r3, r3, #10
 800c2dc:	f003 0307 	and.w	r3, r3, #7
 800c2e0:	4a03      	ldr	r2, [pc, #12]	; (800c2f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2e2:	5cd3      	ldrb	r3, [r2, r3]
 800c2e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	40023800 	.word	0x40023800
 800c2f0:	0801a350 	.word	0x0801a350

0800c2f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c2f8:	f7ff ffdc 	bl	800c2b4 <HAL_RCC_GetHCLKFreq>
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	4b05      	ldr	r3, [pc, #20]	; (800c314 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	0b5b      	lsrs	r3, r3, #13
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	4a03      	ldr	r2, [pc, #12]	; (800c318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c30a:	5cd3      	ldrb	r3, [r2, r3]
 800c30c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c310:	4618      	mov	r0, r3
 800c312:	bd80      	pop	{r7, pc}
 800c314:	40023800 	.word	0x40023800
 800c318:	0801a350 	.word	0x0801a350

0800c31c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c324:	2300      	movs	r3, #0
 800c326:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c344:	4b66      	ldr	r3, [pc, #408]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c352:	4963      	ldr	r1, [pc, #396]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c354:	4313      	orrs	r3, r2
 800c356:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c366:	4b5e      	ldr	r3, [pc, #376]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c36c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c374:	495a      	ldr	r1, [pc, #360]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c376:	4313      	orrs	r3, r2
 800c378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10b      	bne.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c390:	2b00      	cmp	r3, #0
 800c392:	d105      	bne.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d075      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c3a0:	4b50      	ldr	r3, [pc, #320]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3a6:	f7fd fb33 	bl	8009a10 <HAL_GetTick>
 800c3aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3ac:	e008      	b.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3ae:	f7fd fb2f 	bl	8009a10 <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d901      	bls.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e1dc      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3c0:	4b47      	ldr	r3, [pc, #284]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1f0      	bne.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d009      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	019a      	lsls	r2, r3, #6
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	071b      	lsls	r3, r3, #28
 800c3e4:	493e      	ldr	r1, [pc, #248]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0302 	and.w	r3, r3, #2
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d01f      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c3f8:	4b39      	ldr	r3, [pc, #228]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3fe:	0f1b      	lsrs	r3, r3, #28
 800c400:	f003 0307 	and.w	r3, r3, #7
 800c404:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	019a      	lsls	r2, r3, #6
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	061b      	lsls	r3, r3, #24
 800c412:	431a      	orrs	r2, r3
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	071b      	lsls	r3, r3, #28
 800c418:	4931      	ldr	r1, [pc, #196]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c420:	4b2f      	ldr	r3, [pc, #188]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c426:	f023 021f 	bic.w	r2, r3, #31
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	3b01      	subs	r3, #1
 800c430:	492b      	ldr	r1, [pc, #172]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c432:	4313      	orrs	r3, r2
 800c434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00d      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	019a      	lsls	r2, r3, #6
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	061b      	lsls	r3, r3, #24
 800c450:	431a      	orrs	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	071b      	lsls	r3, r3, #28
 800c458:	4921      	ldr	r1, [pc, #132]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c45a:	4313      	orrs	r3, r2
 800c45c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c460:	4b20      	ldr	r3, [pc, #128]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c462:	2201      	movs	r2, #1
 800c464:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c466:	f7fd fad3 	bl	8009a10 <HAL_GetTick>
 800c46a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c46c:	e008      	b.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c46e:	f7fd facf 	bl	8009a10 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d901      	bls.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c47c:	2303      	movs	r3, #3
 800c47e:	e17c      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c480:	4b17      	ldr	r3, [pc, #92]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d0f0      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d112      	bne.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10c      	bne.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f000 80ce 	beq.w	800c64e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c4b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4ba:	f040 80c8 	bne.w	800c64e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c4be:	4b0a      	ldr	r3, [pc, #40]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4c4:	f7fd faa4 	bl	8009a10 <HAL_GetTick>
 800c4c8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4ca:	e00f      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c4cc:	f7fd faa0 	bl	8009a10 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d908      	bls.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e14d      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c4de:	bf00      	nop
 800c4e0:	40023800 	.word	0x40023800
 800c4e4:	42470068 	.word	0x42470068
 800c4e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4ec:	4ba5      	ldr	r3, [pc, #660]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4f8:	d0e8      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0304 	and.w	r3, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	d02e      	beq.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c506:	4b9f      	ldr	r3, [pc, #636]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c50c:	0c1b      	lsrs	r3, r3, #16
 800c50e:	f003 0303 	and.w	r3, r3, #3
 800c512:	3301      	adds	r3, #1
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c518:	4b9a      	ldr	r3, [pc, #616]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c51e:	0f1b      	lsrs	r3, r3, #28
 800c520:	f003 0307 	and.w	r3, r3, #7
 800c524:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	019a      	lsls	r2, r3, #6
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	085b      	lsrs	r3, r3, #1
 800c530:	3b01      	subs	r3, #1
 800c532:	041b      	lsls	r3, r3, #16
 800c534:	431a      	orrs	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	061b      	lsls	r3, r3, #24
 800c53c:	431a      	orrs	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	071b      	lsls	r3, r3, #28
 800c542:	4990      	ldr	r1, [pc, #576]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c544:	4313      	orrs	r3, r2
 800c546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c54a:	4b8e      	ldr	r3, [pc, #568]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c550:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	3b01      	subs	r3, #1
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	4989      	ldr	r1, [pc, #548]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c55e:	4313      	orrs	r3, r2
 800c560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 0308 	and.w	r3, r3, #8
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d02c      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c570:	4b84      	ldr	r3, [pc, #528]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c576:	0c1b      	lsrs	r3, r3, #16
 800c578:	f003 0303 	and.w	r3, r3, #3
 800c57c:	3301      	adds	r3, #1
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c582:	4b80      	ldr	r3, [pc, #512]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c588:	0e1b      	lsrs	r3, r3, #24
 800c58a:	f003 030f 	and.w	r3, r3, #15
 800c58e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	019a      	lsls	r2, r3, #6
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	3b01      	subs	r3, #1
 800c59c:	041b      	lsls	r3, r3, #16
 800c59e:	431a      	orrs	r2, r3
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	061b      	lsls	r3, r3, #24
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	071b      	lsls	r3, r3, #28
 800c5ac:	4975      	ldr	r1, [pc, #468]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c5b4:	4b73      	ldr	r3, [pc, #460]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c2:	4970      	ldr	r1, [pc, #448]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d024      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c5da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5de:	d11f      	bne.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c5e0:	4b68      	ldr	r3, [pc, #416]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e6:	0e1b      	lsrs	r3, r3, #24
 800c5e8:	f003 030f 	and.w	r3, r3, #15
 800c5ec:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c5ee:	4b65      	ldr	r3, [pc, #404]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5f4:	0f1b      	lsrs	r3, r3, #28
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	019a      	lsls	r2, r3, #6
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	085b      	lsrs	r3, r3, #1
 800c608:	3b01      	subs	r3, #1
 800c60a:	041b      	lsls	r3, r3, #16
 800c60c:	431a      	orrs	r2, r3
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	061b      	lsls	r3, r3, #24
 800c612:	431a      	orrs	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	071b      	lsls	r3, r3, #28
 800c618:	495a      	ldr	r1, [pc, #360]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c620:	4b59      	ldr	r3, [pc, #356]	; (800c788 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c622:	2201      	movs	r2, #1
 800c624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c626:	f7fd f9f3 	bl	8009a10 <HAL_GetTick>
 800c62a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c62c:	e008      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c62e:	f7fd f9ef 	bl	8009a10 <HAL_GetTick>
 800c632:	4602      	mov	r2, r0
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d901      	bls.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c63c:	2303      	movs	r3, #3
 800c63e:	e09c      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c640:	4b50      	ldr	r3, [pc, #320]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c64c:	d1ef      	bne.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 0320 	and.w	r3, r3, #32
 800c656:	2b00      	cmp	r3, #0
 800c658:	f000 8083 	beq.w	800c762 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c65c:	2300      	movs	r3, #0
 800c65e:	60bb      	str	r3, [r7, #8]
 800c660:	4b48      	ldr	r3, [pc, #288]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c664:	4a47      	ldr	r2, [pc, #284]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c66a:	6413      	str	r3, [r2, #64]	; 0x40
 800c66c:	4b45      	ldr	r3, [pc, #276]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c674:	60bb      	str	r3, [r7, #8]
 800c676:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c678:	4b44      	ldr	r3, [pc, #272]	; (800c78c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a43      	ldr	r2, [pc, #268]	; (800c78c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c682:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c684:	f7fd f9c4 	bl	8009a10 <HAL_GetTick>
 800c688:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c68a:	e008      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c68c:	f7fd f9c0 	bl	8009a10 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	2b02      	cmp	r3, #2
 800c698:	d901      	bls.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e06d      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c69e:	4b3b      	ldr	r3, [pc, #236]	; (800c78c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0f0      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c6aa:	4b36      	ldr	r3, [pc, #216]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6b2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d02f      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6c2:	69ba      	ldr	r2, [r7, #24]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d028      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c6c8:	4b2e      	ldr	r3, [pc, #184]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6d0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c6d2:	4b2f      	ldr	r3, [pc, #188]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c6d8:	4b2d      	ldr	r3, [pc, #180]	; (800c790 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c6de:	4a29      	ldr	r2, [pc, #164]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c6e4:	4b27      	ldr	r3, [pc, #156]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d114      	bne.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c6f0:	f7fd f98e 	bl	8009a10 <HAL_GetTick>
 800c6f4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6f6:	e00a      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6f8:	f7fd f98a 	bl	8009a10 <HAL_GetTick>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	f241 3288 	movw	r2, #5000	; 0x1388
 800c706:	4293      	cmp	r3, r2
 800c708:	d901      	bls.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e035      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c70e:	4b1d      	ldr	r3, [pc, #116]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0ee      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c726:	d10d      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c73c:	4911      	ldr	r1, [pc, #68]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	608b      	str	r3, [r1, #8]
 800c742:	e005      	b.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c744:	4b0f      	ldr	r3, [pc, #60]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	4a0e      	ldr	r2, [pc, #56]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c74a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c74e:	6093      	str	r3, [r2, #8]
 800c750:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c75c:	4909      	ldr	r1, [pc, #36]	; (800c784 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 0310 	and.w	r3, r3, #16
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c774:	4b07      	ldr	r3, [pc, #28]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c776:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3720      	adds	r7, #32
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	40023800 	.word	0x40023800
 800c788:	42470070 	.word	0x42470070
 800c78c:	40007000 	.word	0x40007000
 800c790:	42470e40 	.word	0x42470e40
 800c794:	424711e0 	.word	0x424711e0

0800c798 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d075      	beq.n	800c89c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c7b0:	4ba2      	ldr	r3, [pc, #648]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	f003 030c 	and.w	r3, r3, #12
 800c7b8:	2b04      	cmp	r3, #4
 800c7ba:	d00c      	beq.n	800c7d6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7bc:	4b9f      	ldr	r3, [pc, #636]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c7c4:	2b08      	cmp	r3, #8
 800c7c6:	d112      	bne.n	800c7ee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7c8:	4b9c      	ldr	r3, [pc, #624]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7d4:	d10b      	bne.n	800c7ee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7d6:	4b99      	ldr	r3, [pc, #612]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d05b      	beq.n	800c89a <HAL_RCC_OscConfig+0x102>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d157      	bne.n	800c89a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e20b      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7f6:	d106      	bne.n	800c806 <HAL_RCC_OscConfig+0x6e>
 800c7f8:	4b90      	ldr	r3, [pc, #576]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a8f      	ldr	r2, [pc, #572]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c7fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c802:	6013      	str	r3, [r2, #0]
 800c804:	e01d      	b.n	800c842 <HAL_RCC_OscConfig+0xaa>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c80e:	d10c      	bne.n	800c82a <HAL_RCC_OscConfig+0x92>
 800c810:	4b8a      	ldr	r3, [pc, #552]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a89      	ldr	r2, [pc, #548]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	4b87      	ldr	r3, [pc, #540]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a86      	ldr	r2, [pc, #536]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	e00b      	b.n	800c842 <HAL_RCC_OscConfig+0xaa>
 800c82a:	4b84      	ldr	r3, [pc, #528]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a83      	ldr	r2, [pc, #524]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c834:	6013      	str	r3, [r2, #0]
 800c836:	4b81      	ldr	r3, [pc, #516]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a80      	ldr	r2, [pc, #512]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c83c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c840:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d013      	beq.n	800c872 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c84a:	f7fd f8e1 	bl	8009a10 <HAL_GetTick>
 800c84e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c850:	e008      	b.n	800c864 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c852:	f7fd f8dd 	bl	8009a10 <HAL_GetTick>
 800c856:	4602      	mov	r2, r0
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	2b64      	cmp	r3, #100	; 0x64
 800c85e:	d901      	bls.n	800c864 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c860:	2303      	movs	r3, #3
 800c862:	e1d0      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c864:	4b75      	ldr	r3, [pc, #468]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d0f0      	beq.n	800c852 <HAL_RCC_OscConfig+0xba>
 800c870:	e014      	b.n	800c89c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c872:	f7fd f8cd 	bl	8009a10 <HAL_GetTick>
 800c876:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c878:	e008      	b.n	800c88c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c87a:	f7fd f8c9 	bl	8009a10 <HAL_GetTick>
 800c87e:	4602      	mov	r2, r0
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	2b64      	cmp	r3, #100	; 0x64
 800c886:	d901      	bls.n	800c88c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c888:	2303      	movs	r3, #3
 800c88a:	e1bc      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c88c:	4b6b      	ldr	r3, [pc, #428]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1f0      	bne.n	800c87a <HAL_RCC_OscConfig+0xe2>
 800c898:	e000      	b.n	800c89c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c89a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0302 	and.w	r3, r3, #2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d063      	beq.n	800c970 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c8a8:	4b64      	ldr	r3, [pc, #400]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f003 030c 	and.w	r3, r3, #12
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8b4:	4b61      	ldr	r3, [pc, #388]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c8bc:	2b08      	cmp	r3, #8
 800c8be:	d11c      	bne.n	800c8fa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8c0:	4b5e      	ldr	r3, [pc, #376]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d116      	bne.n	800c8fa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8cc:	4b5b      	ldr	r3, [pc, #364]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <HAL_RCC_OscConfig+0x14c>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d001      	beq.n	800c8e4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e190      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8e4:	4b55      	ldr	r3, [pc, #340]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	00db      	lsls	r3, r3, #3
 800c8f2:	4952      	ldr	r1, [pc, #328]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8f8:	e03a      	b.n	800c970 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d020      	beq.n	800c944 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c902:	4b4f      	ldr	r3, [pc, #316]	; (800ca40 <HAL_RCC_OscConfig+0x2a8>)
 800c904:	2201      	movs	r2, #1
 800c906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c908:	f7fd f882 	bl	8009a10 <HAL_GetTick>
 800c90c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c90e:	e008      	b.n	800c922 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c910:	f7fd f87e 	bl	8009a10 <HAL_GetTick>
 800c914:	4602      	mov	r2, r0
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d901      	bls.n	800c922 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e171      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c922:	4b46      	ldr	r3, [pc, #280]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0f0      	beq.n	800c910 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c92e:	4b43      	ldr	r3, [pc, #268]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	493f      	ldr	r1, [pc, #252]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	600b      	str	r3, [r1, #0]
 800c942:	e015      	b.n	800c970 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c944:	4b3e      	ldr	r3, [pc, #248]	; (800ca40 <HAL_RCC_OscConfig+0x2a8>)
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94a:	f7fd f861 	bl	8009a10 <HAL_GetTick>
 800c94e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c950:	e008      	b.n	800c964 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c952:	f7fd f85d 	bl	8009a10 <HAL_GetTick>
 800c956:	4602      	mov	r2, r0
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d901      	bls.n	800c964 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c960:	2303      	movs	r3, #3
 800c962:	e150      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c964:	4b35      	ldr	r3, [pc, #212]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 0302 	and.w	r3, r3, #2
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1f0      	bne.n	800c952 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0308 	and.w	r3, r3, #8
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d030      	beq.n	800c9de <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d016      	beq.n	800c9b2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c984:	4b2f      	ldr	r3, [pc, #188]	; (800ca44 <HAL_RCC_OscConfig+0x2ac>)
 800c986:	2201      	movs	r2, #1
 800c988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c98a:	f7fd f841 	bl	8009a10 <HAL_GetTick>
 800c98e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c990:	e008      	b.n	800c9a4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c992:	f7fd f83d 	bl	8009a10 <HAL_GetTick>
 800c996:	4602      	mov	r2, r0
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d901      	bls.n	800c9a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e130      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9a4:	4b25      	ldr	r3, [pc, #148]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c9a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0f0      	beq.n	800c992 <HAL_RCC_OscConfig+0x1fa>
 800c9b0:	e015      	b.n	800c9de <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c9b2:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <HAL_RCC_OscConfig+0x2ac>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9b8:	f7fd f82a 	bl	8009a10 <HAL_GetTick>
 800c9bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9be:	e008      	b.n	800c9d2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c9c0:	f7fd f826 	bl	8009a10 <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d901      	bls.n	800c9d2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e119      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9d2:	4b1a      	ldr	r3, [pc, #104]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1f0      	bne.n	800c9c0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 809f 	beq.w	800cb2a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800c9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10f      	bne.n	800ca1c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	60fb      	str	r3, [r7, #12]
 800ca00:	4b0e      	ldr	r3, [pc, #56]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800ca02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca04:	4a0d      	ldr	r2, [pc, #52]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800ca06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca0a:	6413      	str	r3, [r2, #64]	; 0x40
 800ca0c:	4b0b      	ldr	r3, [pc, #44]	; (800ca3c <HAL_RCC_OscConfig+0x2a4>)
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <HAL_RCC_OscConfig+0x2b0>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d120      	bne.n	800ca6a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca28:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <HAL_RCC_OscConfig+0x2b0>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a06      	ldr	r2, [pc, #24]	; (800ca48 <HAL_RCC_OscConfig+0x2b0>)
 800ca2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca34:	f7fc ffec 	bl	8009a10 <HAL_GetTick>
 800ca38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca3a:	e010      	b.n	800ca5e <HAL_RCC_OscConfig+0x2c6>
 800ca3c:	40023800 	.word	0x40023800
 800ca40:	42470000 	.word	0x42470000
 800ca44:	42470e80 	.word	0x42470e80
 800ca48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca4c:	f7fc ffe0 	bl	8009a10 <HAL_GetTick>
 800ca50:	4602      	mov	r2, r0
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d901      	bls.n	800ca5e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800ca5a:	2303      	movs	r3, #3
 800ca5c:	e0d3      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca5e:	4b6c      	ldr	r3, [pc, #432]	; (800cc10 <HAL_RCC_OscConfig+0x478>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0f0      	beq.n	800ca4c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d106      	bne.n	800ca80 <HAL_RCC_OscConfig+0x2e8>
 800ca72:	4b68      	ldr	r3, [pc, #416]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800ca74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca76:	4a67      	ldr	r2, [pc, #412]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800ca78:	f043 0301 	orr.w	r3, r3, #1
 800ca7c:	6713      	str	r3, [r2, #112]	; 0x70
 800ca7e:	e01c      	b.n	800caba <HAL_RCC_OscConfig+0x322>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	2b05      	cmp	r3, #5
 800ca86:	d10c      	bne.n	800caa2 <HAL_RCC_OscConfig+0x30a>
 800ca88:	4b62      	ldr	r3, [pc, #392]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800ca8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8c:	4a61      	ldr	r2, [pc, #388]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800ca8e:	f043 0304 	orr.w	r3, r3, #4
 800ca92:	6713      	str	r3, [r2, #112]	; 0x70
 800ca94:	4b5f      	ldr	r3, [pc, #380]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800ca96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca98:	4a5e      	ldr	r2, [pc, #376]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800ca9a:	f043 0301 	orr.w	r3, r3, #1
 800ca9e:	6713      	str	r3, [r2, #112]	; 0x70
 800caa0:	e00b      	b.n	800caba <HAL_RCC_OscConfig+0x322>
 800caa2:	4b5c      	ldr	r3, [pc, #368]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800caa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa6:	4a5b      	ldr	r2, [pc, #364]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800caa8:	f023 0301 	bic.w	r3, r3, #1
 800caac:	6713      	str	r3, [r2, #112]	; 0x70
 800caae:	4b59      	ldr	r3, [pc, #356]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab2:	4a58      	ldr	r2, [pc, #352]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cab4:	f023 0304 	bic.w	r3, r3, #4
 800cab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d015      	beq.n	800caee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cac2:	f7fc ffa5 	bl	8009a10 <HAL_GetTick>
 800cac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cac8:	e00a      	b.n	800cae0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800caca:	f7fc ffa1 	bl	8009a10 <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cad8:	4293      	cmp	r3, r2
 800cada:	d901      	bls.n	800cae0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cadc:	2303      	movs	r3, #3
 800cade:	e092      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cae0:	4b4c      	ldr	r3, [pc, #304]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0ee      	beq.n	800caca <HAL_RCC_OscConfig+0x332>
 800caec:	e014      	b.n	800cb18 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caee:	f7fc ff8f 	bl	8009a10 <HAL_GetTick>
 800caf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800caf4:	e00a      	b.n	800cb0c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800caf6:	f7fc ff8b 	bl	8009a10 <HAL_GetTick>
 800cafa:	4602      	mov	r2, r0
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d901      	bls.n	800cb0c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	e07c      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb0c:	4b41      	ldr	r3, [pc, #260]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cb0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb10:	f003 0302 	and.w	r3, r3, #2
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1ee      	bne.n	800caf6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d105      	bne.n	800cb2a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb1e:	4b3d      	ldr	r3, [pc, #244]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb22:	4a3c      	ldr	r2, [pc, #240]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cb24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d068      	beq.n	800cc04 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb32:	4b38      	ldr	r3, [pc, #224]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f003 030c 	and.w	r3, r3, #12
 800cb3a:	2b08      	cmp	r3, #8
 800cb3c:	d060      	beq.n	800cc00 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d145      	bne.n	800cbd2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb46:	4b34      	ldr	r3, [pc, #208]	; (800cc18 <HAL_RCC_OscConfig+0x480>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4c:	f7fc ff60 	bl	8009a10 <HAL_GetTick>
 800cb50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb52:	e008      	b.n	800cb66 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb54:	f7fc ff5c 	bl	8009a10 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d901      	bls.n	800cb66 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e04f      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb66:	4b2b      	ldr	r3, [pc, #172]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1f0      	bne.n	800cb54 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	69da      	ldr	r2, [r3, #28]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	019b      	lsls	r3, r3, #6
 800cb82:	431a      	orrs	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	085b      	lsrs	r3, r3, #1
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	041b      	lsls	r3, r3, #16
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	061b      	lsls	r3, r3, #24
 800cb96:	431a      	orrs	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb9c:	071b      	lsls	r3, r3, #28
 800cb9e:	491d      	ldr	r1, [pc, #116]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cba0:	4313      	orrs	r3, r2
 800cba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cba4:	4b1c      	ldr	r3, [pc, #112]	; (800cc18 <HAL_RCC_OscConfig+0x480>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbaa:	f7fc ff31 	bl	8009a10 <HAL_GetTick>
 800cbae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbb0:	e008      	b.n	800cbc4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbb2:	f7fc ff2d 	bl	8009a10 <HAL_GetTick>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d901      	bls.n	800cbc4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	e020      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbc4:	4b13      	ldr	r3, [pc, #76]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0f0      	beq.n	800cbb2 <HAL_RCC_OscConfig+0x41a>
 800cbd0:	e018      	b.n	800cc04 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbd2:	4b11      	ldr	r3, [pc, #68]	; (800cc18 <HAL_RCC_OscConfig+0x480>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd8:	f7fc ff1a 	bl	8009a10 <HAL_GetTick>
 800cbdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbde:	e008      	b.n	800cbf2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbe0:	f7fc ff16 	bl	8009a10 <HAL_GetTick>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d901      	bls.n	800cbf2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e009      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbf2:	4b08      	ldr	r3, [pc, #32]	; (800cc14 <HAL_RCC_OscConfig+0x47c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1f0      	bne.n	800cbe0 <HAL_RCC_OscConfig+0x448>
 800cbfe:	e001      	b.n	800cc04 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e000      	b.n	800cc06 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3718      	adds	r7, #24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	40007000 	.word	0x40007000
 800cc14:	40023800 	.word	0x40023800
 800cc18:	42470060 	.word	0x42470060

0800cc1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e022      	b.n	800cc74 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d105      	bne.n	800cc46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7fa f8f9 	bl	8006e38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2203      	movs	r2, #3
 800cc4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f814 	bl	800cc7c <HAL_SD_InitCard>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e00a      	b.n	800cc74 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc7c:	b5b0      	push	{r4, r5, r7, lr}
 800cc7e:	b08e      	sub	sp, #56	; 0x38
 800cc80:	af04      	add	r7, sp, #16
 800cc82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cc84:	2300      	movs	r3, #0
 800cc86:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cc90:	2300      	movs	r3, #0
 800cc92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cc98:	2376      	movs	r3, #118	; 0x76
 800cc9a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681d      	ldr	r5, [r3, #0]
 800cca0:	466c      	mov	r4, sp
 800cca2:	f107 0314 	add.w	r3, r7, #20
 800cca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ccae:	f107 0308 	add.w	r3, r7, #8
 800ccb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f003 fa87 	bl	80101c8 <SDIO_Init>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d001      	beq.n	800cccc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e031      	b.n	800cd30 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cccc:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <HAL_SD_InitCard+0xbc>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f003 fabf 	bl	801025a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ccdc:	4b16      	ldr	r3, [pc, #88]	; (800cd38 <HAL_SD_InitCard+0xbc>)
 800ccde:	2201      	movs	r2, #1
 800cce0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 ffc6 	bl	800dc74 <SD_PowerON>
 800cce8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccfc:	6a3b      	ldr	r3, [r7, #32]
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e013      	b.n	800cd30 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fee5 	bl	800dad8 <SD_InitCard>
 800cd0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00b      	beq.n	800cd2e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	431a      	orrs	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3728      	adds	r7, #40	; 0x28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bdb0      	pop	{r4, r5, r7, pc}
 800cd38:	422580a0 	.word	0x422580a0

0800cd3c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08c      	sub	sp, #48	; 0x30
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d107      	bne.n	800cd64 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e0c7      	b.n	800cef4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	f040 80c0 	bne.w	800cef2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	441a      	add	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d907      	bls.n	800cd96 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e0ae      	b.n	800cef4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2203      	movs	r2, #3
 800cd9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2200      	movs	r2, #0
 800cda4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cdb4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdba:	4a50      	ldr	r2, [pc, #320]	; (800cefc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cdbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc2:	4a4f      	ldr	r2, [pc, #316]	; (800cf00 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cdc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	2200      	movs	r2, #0
 800cdcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3380      	adds	r3, #128	; 0x80
 800cdd8:	4619      	mov	r1, r3
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	025b      	lsls	r3, r3, #9
 800cde0:	089b      	lsrs	r3, r3, #2
 800cde2:	f7fd fc07 	bl	800a5f4 <HAL_DMA_Start_IT>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d017      	beq.n	800ce1c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cdfa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a40      	ldr	r2, [pc, #256]	; (800cf04 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ce02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e06b      	b.n	800cef4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ce1c:	4b3a      	ldr	r3, [pc, #232]	; (800cf08 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ce1e:	2201      	movs	r2, #1
 800ce20:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d002      	beq.n	800ce30 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	025b      	lsls	r3, r3, #9
 800ce2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f003 faa1 	bl	8010380 <SDMMC_CmdBlockLength>
 800ce3e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00f      	beq.n	800ce66 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a2e      	ldr	r2, [pc, #184]	; (800cf04 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ce4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	431a      	orrs	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	e046      	b.n	800cef4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce66:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	025b      	lsls	r3, r3, #9
 800ce70:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ce72:	2390      	movs	r3, #144	; 0x90
 800ce74:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ce76:	2302      	movs	r3, #2
 800ce78:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f107 0210 	add.w	r2, r7, #16
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f003 fa4b 	bl	8010328 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d90a      	bls.n	800ceae <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2282      	movs	r2, #130	; 0x82
 800ce9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cea4:	4618      	mov	r0, r3
 800cea6:	f003 faaf 	bl	8010408 <SDMMC_CmdReadMultiBlock>
 800ceaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ceac:	e009      	b.n	800cec2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2281      	movs	r2, #129	; 0x81
 800ceb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceba:	4618      	mov	r0, r3
 800cebc:	f003 fa82 	bl	80103c4 <SDMMC_CmdReadSingleBlock>
 800cec0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d012      	beq.n	800ceee <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a0d      	ldr	r2, [pc, #52]	; (800cf04 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	431a      	orrs	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2201      	movs	r2, #1
 800cee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e002      	b.n	800cef4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e000      	b.n	800cef4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cef2:	2302      	movs	r3, #2
  }
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3730      	adds	r7, #48	; 0x30
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0800d8e7 	.word	0x0800d8e7
 800cf00:	0800d959 	.word	0x0800d959
 800cf04:	004005ff 	.word	0x004005ff
 800cf08:	4225858c 	.word	0x4225858c

0800cf0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08c      	sub	sp, #48	; 0x30
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d107      	bne.n	800cf34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e0ca      	b.n	800d0ca <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	f040 80c3 	bne.w	800d0c8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	441a      	add	r2, r3
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d907      	bls.n	800cf66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e0b1      	b.n	800d0ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2203      	movs	r2, #3
 800cf6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f042 021a 	orr.w	r2, r2, #26
 800cf84:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8a:	4a52      	ldr	r2, [pc, #328]	; (800d0d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cf8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf92:	4a51      	ldr	r2, [pc, #324]	; (800d0d8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cf94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d002      	beq.n	800cfac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa8:	025b      	lsls	r3, r3, #9
 800cfaa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f003 f9e3 	bl	8010380 <SDMMC_CmdBlockLength>
 800cfba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00f      	beq.n	800cfe2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a45      	ldr	r2, [pc, #276]	; (800d0dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e073      	b.n	800d0ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d90a      	bls.n	800cffe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	22a0      	movs	r2, #160	; 0xa0
 800cfec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cff4:	4618      	mov	r0, r3
 800cff6:	f003 fa4b 	bl	8010490 <SDMMC_CmdWriteMultiBlock>
 800cffa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cffc:	e009      	b.n	800d012 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2290      	movs	r2, #144	; 0x90
 800d002:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d00a:	4618      	mov	r0, r3
 800d00c:	f003 fa1e 	bl	801044c <SDMMC_CmdWriteSingleBlock>
 800d010:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	2b00      	cmp	r3, #0
 800d016:	d012      	beq.n	800d03e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a2f      	ldr	r2, [pc, #188]	; (800d0dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d01e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	431a      	orrs	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e045      	b.n	800d0ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d03e:	4b28      	ldr	r3, [pc, #160]	; (800d0e0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d040:	2201      	movs	r2, #1
 800d042:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d048:	68b9      	ldr	r1, [r7, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3380      	adds	r3, #128	; 0x80
 800d050:	461a      	mov	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	025b      	lsls	r3, r3, #9
 800d056:	089b      	lsrs	r3, r3, #2
 800d058:	f7fd facc 	bl	800a5f4 <HAL_DMA_Start_IT>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d01a      	beq.n	800d098 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f022 021a 	bic.w	r2, r2, #26
 800d070:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a19      	ldr	r2, [pc, #100]	; (800d0dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2201      	movs	r2, #1
 800d08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e018      	b.n	800d0ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d098:	f04f 33ff 	mov.w	r3, #4294967295
 800d09c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	025b      	lsls	r3, r3, #9
 800d0a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d0a4:	2390      	movs	r3, #144	; 0x90
 800d0a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f107 0210 	add.w	r2, r7, #16
 800d0bc:	4611      	mov	r1, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f003 f932 	bl	8010328 <SDIO_ConfigData>

      return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	e000      	b.n	800d0ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d0c8:	2302      	movs	r3, #2
  }
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3730      	adds	r7, #48	; 0x30
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800d8bd 	.word	0x0800d8bd
 800d0d8:	0800d959 	.word	0x0800d959
 800d0dc:	004005ff 	.word	0x004005ff
 800d0e0:	4225858c 	.word	0x4225858c

0800d0e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d008      	beq.n	800d112 <HAL_SD_IRQHandler+0x2e>
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f003 0308 	and.w	r3, r3, #8
 800d106:	2b00      	cmp	r3, #0
 800d108:	d003      	beq.n	800d112 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 ffc8 	bl	800e0a0 <SD_Read_IT>
 800d110:	e155      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f000 808f 	beq.w	800d240 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d12a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6812      	ldr	r2, [r2, #0]
 800d136:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d13a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d13e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f022 0201 	bic.w	r2, r2, #1
 800d14e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f003 0308 	and.w	r3, r3, #8
 800d156:	2b00      	cmp	r3, #0
 800d158:	d039      	beq.n	800d1ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f003 0302 	and.w	r3, r3, #2
 800d160:	2b00      	cmp	r3, #0
 800d162:	d104      	bne.n	800d16e <HAL_SD_IRQHandler+0x8a>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f003 0320 	and.w	r3, r3, #32
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d011      	beq.n	800d192 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4618      	mov	r0, r3
 800d174:	f003 f9ae 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800d178:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d008      	beq.n	800d192 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	431a      	orrs	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f91f 	bl	800d3d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f240 523a 	movw	r2, #1338	; 0x53a
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f003 0301 	and.w	r3, r3, #1
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d104      	bne.n	800d1be <HAL_SD_IRQHandler+0xda>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f003 0302 	and.w	r3, r3, #2
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f003 fe04 	bl	8010dcc <HAL_SD_RxCpltCallback>
 800d1c4:	e0fb      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f003 fdf6 	bl	8010db8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d1cc:	e0f7      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 80f2 	beq.w	800d3be <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f003 0320 	and.w	r3, r3, #32
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d011      	beq.n	800d208 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f003 f973 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800d1ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d008      	beq.n	800d208 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f8e4 	bl	800d3d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f040 80d5 	bne.w	800d3be <HAL_SD_IRQHandler+0x2da>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f040 80cf 	bne.w	800d3be <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f022 0208 	bic.w	r2, r2, #8
 800d22e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f003 fdbd 	bl	8010db8 <HAL_SD_TxCpltCallback>
}
 800d23e:	e0be      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d008      	beq.n	800d260 <HAL_SD_IRQHandler+0x17c>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f003 0308 	and.w	r3, r3, #8
 800d254:	2b00      	cmp	r3, #0
 800d256:	d003      	beq.n	800d260 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 ff72 	bl	800e142 <SD_Write_IT>
 800d25e:	e0ae      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d266:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 80a7 	beq.w	800d3be <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d276:	f003 0302 	and.w	r3, r3, #2
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d005      	beq.n	800d28a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	f043 0202 	orr.w	r2, r3, #2
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d290:	f003 0308 	and.w	r3, r3, #8
 800d294:	2b00      	cmp	r3, #0
 800d296:	d005      	beq.n	800d2a4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29c:	f043 0208 	orr.w	r2, r3, #8
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2aa:	f003 0320 	and.w	r3, r3, #32
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d005      	beq.n	800d2be <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b6:	f043 0220 	orr.w	r2, r3, #32
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c4:	f003 0310 	and.w	r3, r3, #16
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d005      	beq.n	800d2d8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d0:	f043 0210 	orr.w	r2, r3, #16
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d2e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d2f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f003 f8ec 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d302:	431a      	orrs	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f003 0308 	and.w	r3, r3, #8
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2201      	movs	r2, #1
 800d316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f855 	bl	800d3d0 <HAL_SD_ErrorCallback>
}
 800d326:	e04a      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d045      	beq.n	800d3be <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <HAL_SD_IRQHandler+0x262>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f003 0320 	and.w	r3, r3, #32
 800d342:	2b00      	cmp	r3, #0
 800d344:	d011      	beq.n	800d36a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34a:	4a1f      	ldr	r2, [pc, #124]	; (800d3c8 <HAL_SD_IRQHandler+0x2e4>)
 800d34c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d352:	4618      	mov	r0, r3
 800d354:	f7fd f9a6 	bl	800a6a4 <HAL_DMA_Abort_IT>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d02f      	beq.n	800d3be <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	4618      	mov	r0, r3
 800d364:	f000 fb4a 	bl	800d9fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d368:	e029      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d104      	bne.n	800d37e <HAL_SD_IRQHandler+0x29a>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f003 0302 	and.w	r3, r3, #2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d011      	beq.n	800d3a2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	4a12      	ldr	r2, [pc, #72]	; (800d3cc <HAL_SD_IRQHandler+0x2e8>)
 800d384:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fd f98a 	bl	800a6a4 <HAL_DMA_Abort_IT>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d013      	beq.n	800d3be <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 fb65 	bl	800da6a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d3a0:	e00d      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f003 fcf4 	bl	8010da4 <HAL_SD_AbortCallback>
}
 800d3bc:	e7ff      	b.n	800d3be <HAL_SD_IRQHandler+0x2da>
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	0800d9fd 	.word	0x0800d9fd
 800d3cc:	0800da6b 	.word	0x0800da6b

0800d3d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3f2:	0f9b      	lsrs	r3, r3, #30
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3fe:	0e9b      	lsrs	r3, r3, #26
 800d400:	b2db      	uxtb	r3, r3
 800d402:	f003 030f 	and.w	r3, r3, #15
 800d406:	b2da      	uxtb	r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d410:	0e1b      	lsrs	r3, r3, #24
 800d412:	b2db      	uxtb	r3, r3
 800d414:	f003 0303 	and.w	r3, r3, #3
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d422:	0c1b      	lsrs	r3, r3, #16
 800d424:	b2da      	uxtb	r2, r3
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d42e:	0a1b      	lsrs	r3, r3, #8
 800d430:	b2da      	uxtb	r2, r3
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d444:	0d1b      	lsrs	r3, r3, #20
 800d446:	b29a      	uxth	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d450:	0c1b      	lsrs	r3, r3, #16
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 030f 	and.w	r3, r3, #15
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d462:	0bdb      	lsrs	r3, r3, #15
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d474:	0b9b      	lsrs	r3, r3, #14
 800d476:	b2db      	uxtb	r3, r3
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d486:	0b5b      	lsrs	r3, r3, #13
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d498:	0b1b      	lsrs	r3, r3, #12
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d163      	bne.n	800d57c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4b8:	009a      	lsls	r2, r3, #2
 800d4ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d4be:	4013      	ands	r3, r2
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d4c4:	0f92      	lsrs	r2, r2, #30
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4d0:	0edb      	lsrs	r3, r3, #27
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	f003 0307 	and.w	r3, r3, #7
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4e2:	0e1b      	lsrs	r3, r3, #24
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f4:	0d5b      	lsrs	r3, r3, #21
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	f003 0307 	and.w	r3, r3, #7
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d506:	0c9b      	lsrs	r3, r3, #18
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	f003 0307 	and.w	r3, r3, #7
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d518:	0bdb      	lsrs	r3, r3, #15
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	f003 0307 	and.w	r3, r3, #7
 800d520:	b2da      	uxtb	r2, r3
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	7e1b      	ldrb	r3, [r3, #24]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	3302      	adds	r3, #2
 800d53c:	2201      	movs	r2, #1
 800d53e:	fa02 f303 	lsl.w	r3, r2, r3
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d546:	fb02 f203 	mul.w	r2, r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	7a1b      	ldrb	r3, [r3, #8]
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f003 030f 	and.w	r3, r3, #15
 800d558:	2201      	movs	r2, #1
 800d55a:	409a      	lsls	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d568:	0a52      	lsrs	r2, r2, #9
 800d56a:	fb02 f203 	mul.w	r2, r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d578:	661a      	str	r2, [r3, #96]	; 0x60
 800d57a:	e031      	b.n	800d5e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d580:	2b01      	cmp	r3, #1
 800d582:	d11d      	bne.n	800d5c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d588:	041b      	lsls	r3, r3, #16
 800d58a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d592:	0c1b      	lsrs	r3, r3, #16
 800d594:	431a      	orrs	r2, r3
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	029a      	lsls	r2, r3, #10
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	661a      	str	r2, [r3, #96]	; 0x60
 800d5be:	e00f      	b.n	800d5e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a58      	ldr	r2, [pc, #352]	; (800d728 <HAL_SD_GetCardCSD+0x344>)
 800d5c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e09d      	b.n	800d71c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5e4:	0b9b      	lsrs	r3, r3, #14
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5f6:	09db      	lsrs	r3, r3, #7
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d618:	0fdb      	lsrs	r3, r3, #31
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d624:	0f5b      	lsrs	r3, r3, #29
 800d626:	b2db      	uxtb	r3, r3
 800d628:	f003 0303 	and.w	r3, r3, #3
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	0e9b      	lsrs	r3, r3, #26
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 0307 	and.w	r3, r3, #7
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d648:	0d9b      	lsrs	r3, r3, #22
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 030f 	and.w	r3, r3, #15
 800d650:	b2da      	uxtb	r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d65a:	0d5b      	lsrs	r3, r3, #21
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	b2da      	uxtb	r2, r3
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d676:	0c1b      	lsrs	r3, r3, #16
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	f003 0301 	and.w	r3, r3, #1
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d68a:	0bdb      	lsrs	r3, r3, #15
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	b2da      	uxtb	r2, r3
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d69e:	0b9b      	lsrs	r3, r3, #14
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b2:	0b5b      	lsrs	r3, r3, #13
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c6:	0b1b      	lsrs	r3, r3, #12
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6da:	0a9b      	lsrs	r3, r3, #10
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	f003 0303 	and.w	r3, r3, #3
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ee:	0a1b      	lsrs	r3, r3, #8
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	f003 0303 	and.w	r3, r3, #3
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d702:	085b      	lsrs	r3, r3, #1
 800d704:	b2db      	uxtb	r3, r3
 800d706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	004005ff 	.word	0x004005ff

0800d72c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d784:	b5b0      	push	{r4, r5, r7, lr}
 800d786:	b08e      	sub	sp, #56	; 0x38
 800d788:	af04      	add	r7, sp, #16
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2203      	movs	r2, #3
 800d792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d02e      	beq.n	800d7fc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7a4:	d106      	bne.n	800d7b4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	639a      	str	r2, [r3, #56]	; 0x38
 800d7b2:	e029      	b.n	800d808 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7ba:	d10a      	bne.n	800d7d2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fb0f 	bl	800dde0 <SD_WideBus_Enable>
 800d7c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	431a      	orrs	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	639a      	str	r2, [r3, #56]	; 0x38
 800d7d0:	e01a      	b.n	800d808 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10a      	bne.n	800d7ee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fb4c 	bl	800de76 <SD_WideBus_Disable>
 800d7de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38
 800d7ec:	e00c      	b.n	800d808 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7fa:	e005      	b.n	800d808 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d800:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d009      	beq.n	800d824 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a18      	ldr	r2, [pc, #96]	; (800d878 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d816:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	e024      	b.n	800d86e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681d      	ldr	r5, [r3, #0]
 800d84a:	466c      	mov	r4, sp
 800d84c:	f107 0318 	add.w	r3, r7, #24
 800d850:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d858:	f107 030c 	add.w	r3, r7, #12
 800d85c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d85e:	4628      	mov	r0, r5
 800d860:	f002 fcb2 	bl	80101c8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3728      	adds	r7, #40	; 0x28
 800d872:	46bd      	mov	sp, r7
 800d874:	bdb0      	pop	{r4, r5, r7, pc}
 800d876:	bf00      	nop
 800d878:	004005ff 	.word	0x004005ff

0800d87c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d888:	f107 030c 	add.w	r3, r7, #12
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fa7e 	bl	800dd90 <SD_SendStatus>
 800d894:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d005      	beq.n	800d8a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	431a      	orrs	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	0a5b      	lsrs	r3, r3, #9
 800d8ac:	f003 030f 	and.w	r3, r3, #15
 800d8b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d8b2:	693b      	ldr	r3, [r7, #16]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d8da:	bf00      	nop
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b084      	sub	sp, #16
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f8:	2b82      	cmp	r3, #130	; 0x82
 800d8fa:	d111      	bne.n	800d920 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4618      	mov	r0, r3
 800d902:	f002 fde7 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800d906:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d008      	beq.n	800d920 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	431a      	orrs	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f7ff fd58 	bl	800d3d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f022 0208 	bic.w	r2, r2, #8
 800d92e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f240 523a 	movw	r2, #1338	; 0x53a
 800d938:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f003 fa3f 	bl	8010dcc <HAL_SD_RxCpltCallback>
#endif
}
 800d94e:	bf00      	nop
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
	...

0800d958 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d964:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7fd f848 	bl	800a9fc <HAL_DMA_GetError>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d03e      	beq.n	800d9f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d978:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d980:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d002      	beq.n	800d98e <SD_DMAError+0x36>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d12d      	bne.n	800d9ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a19      	ldr	r2, [pc, #100]	; (800d9f8 <SD_DMAError+0xa0>)
 800d994:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d9a4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d9b2:	6978      	ldr	r0, [r7, #20]
 800d9b4:	f7ff ff62 	bl	800d87c <HAL_SD_GetCardState>
 800d9b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b06      	cmp	r3, #6
 800d9be:	d002      	beq.n	800d9c6 <SD_DMAError+0x6e>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d10a      	bne.n	800d9dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f002 fd82 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d9ea:	6978      	ldr	r0, [r7, #20]
 800d9ec:	f7ff fcf0 	bl	800d3d0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d9f0:	bf00      	nop
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	004005ff 	.word	0x004005ff

0800d9fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f240 523a 	movw	r2, #1338	; 0x53a
 800da12:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f7ff ff31 	bl	800d87c <HAL_SD_GetCardState>
 800da1a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2b06      	cmp	r3, #6
 800da2e:	d002      	beq.n	800da36 <SD_DMATxAbort+0x3a>
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	2b05      	cmp	r3, #5
 800da34:	d10a      	bne.n	800da4c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f002 fd4a 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800da40:	4602      	mov	r2, r0
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da46:	431a      	orrs	r2, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da50:	2b00      	cmp	r3, #0
 800da52:	d103      	bne.n	800da5c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f003 f9a5 	bl	8010da4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800da5a:	e002      	b.n	800da62 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f7ff fcb7 	bl	800d3d0 <HAL_SD_ErrorCallback>
}
 800da62:	bf00      	nop
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da76:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f240 523a 	movw	r2, #1338	; 0x53a
 800da80:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f7ff fefa 	bl	800d87c <HAL_SD_GetCardState>
 800da88:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2200      	movs	r2, #0
 800da96:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b06      	cmp	r3, #6
 800da9c:	d002      	beq.n	800daa4 <SD_DMARxAbort+0x3a>
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	2b05      	cmp	r3, #5
 800daa2:	d10a      	bne.n	800daba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f002 fd13 	bl	80104d4 <SDMMC_CmdStopTransfer>
 800daae:	4602      	mov	r2, r0
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab4:	431a      	orrs	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d103      	bne.n	800daca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f003 f96e 	bl	8010da4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dac8:	e002      	b.n	800dad0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f7ff fc80 	bl	800d3d0 <HAL_SD_ErrorCallback>
}
 800dad0:	bf00      	nop
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dad8:	b5b0      	push	{r4, r5, r7, lr}
 800dada:	b094      	sub	sp, #80	; 0x50
 800dadc:	af04      	add	r7, sp, #16
 800dade:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dae0:	2301      	movs	r3, #1
 800dae2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f002 fbc5 	bl	8010278 <SDIO_GetPowerState>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d102      	bne.n	800dafa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800daf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800daf8:	e0b7      	b.n	800dc6a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d02f      	beq.n	800db62 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4618      	mov	r0, r3
 800db08:	f002 fdee 	bl	80106e8 <SDMMC_CmdSendCID>
 800db0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <SD_InitCard+0x40>
    {
      return errorstate;
 800db14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db16:	e0a8      	b.n	800dc6a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2100      	movs	r1, #0
 800db1e:	4618      	mov	r0, r3
 800db20:	f002 fbef 	bl	8010302 <SDIO_GetResponse>
 800db24:	4602      	mov	r2, r0
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2104      	movs	r1, #4
 800db30:	4618      	mov	r0, r3
 800db32:	f002 fbe6 	bl	8010302 <SDIO_GetResponse>
 800db36:	4602      	mov	r2, r0
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2108      	movs	r1, #8
 800db42:	4618      	mov	r0, r3
 800db44:	f002 fbdd 	bl	8010302 <SDIO_GetResponse>
 800db48:	4602      	mov	r2, r0
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	210c      	movs	r1, #12
 800db54:	4618      	mov	r0, r3
 800db56:	f002 fbd4 	bl	8010302 <SDIO_GetResponse>
 800db5a:	4602      	mov	r2, r0
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db66:	2b03      	cmp	r3, #3
 800db68:	d00d      	beq.n	800db86 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f107 020e 	add.w	r2, r7, #14
 800db72:	4611      	mov	r1, r2
 800db74:	4618      	mov	r0, r3
 800db76:	f002 fdf4 	bl	8010762 <SDMMC_CmdSetRelAdd>
 800db7a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <SD_InitCard+0xae>
    {
      return errorstate;
 800db82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db84:	e071      	b.n	800dc6a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d036      	beq.n	800dbfc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db8e:	89fb      	ldrh	r3, [r7, #14]
 800db90:	461a      	mov	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db9e:	041b      	lsls	r3, r3, #16
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f002 fdbe 	bl	8010724 <SDMMC_CmdSendCSD>
 800dba8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb2:	e05a      	b.n	800dc6a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2100      	movs	r1, #0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f002 fba1 	bl	8010302 <SDIO_GetResponse>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2104      	movs	r1, #4
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f002 fb98 	bl	8010302 <SDIO_GetResponse>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2108      	movs	r1, #8
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f002 fb8f 	bl	8010302 <SDIO_GetResponse>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	210c      	movs	r1, #12
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f002 fb86 	bl	8010302 <SDIO_GetResponse>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2104      	movs	r1, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f002 fb7d 	bl	8010302 <SDIO_GetResponse>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	0d1a      	lsrs	r2, r3, #20
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dc10:	f107 0310 	add.w	r3, r7, #16
 800dc14:	4619      	mov	r1, r3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff fbe4 	bl	800d3e4 <HAL_SD_GetCardCSD>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc26:	e020      	b.n	800dc6a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6819      	ldr	r1, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc30:	041b      	lsls	r3, r3, #16
 800dc32:	f04f 0400 	mov.w	r4, #0
 800dc36:	461a      	mov	r2, r3
 800dc38:	4623      	mov	r3, r4
 800dc3a:	4608      	mov	r0, r1
 800dc3c:	f002 fc6c 	bl	8010518 <SDMMC_CmdSelDesel>
 800dc40:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <SD_InitCard+0x174>
  {
    return errorstate;
 800dc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4a:	e00e      	b.n	800dc6a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681d      	ldr	r5, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	466c      	mov	r4, sp
 800dc54:	f103 0210 	add.w	r2, r3, #16
 800dc58:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc5e:	3304      	adds	r3, #4
 800dc60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc62:	4628      	mov	r0, r5
 800dc64:	f002 fab0 	bl	80101c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3740      	adds	r7, #64	; 0x40
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dc74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	617b      	str	r3, [r7, #20]
 800dc84:	2300      	movs	r3, #0
 800dc86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f002 fc66 	bl	801055e <SDMMC_CmdGoIdleState>
 800dc92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	e072      	b.n	800dd84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f002 fc79 	bl	801059a <SDMMC_CmdOperCond>
 800dca8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00d      	beq.n	800dccc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f002 fc4f 	bl	801055e <SDMMC_CmdGoIdleState>
 800dcc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d004      	beq.n	800dcd2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	e05b      	b.n	800dd84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d137      	bne.n	800dd4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2100      	movs	r1, #0
 800dce0:	4618      	mov	r0, r3
 800dce2:	f002 fc79 	bl	80105d8 <SDMMC_CmdAppCommand>
 800dce6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d02d      	beq.n	800dd4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcf2:	e047      	b.n	800dd84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f002 fc6c 	bl	80105d8 <SDMMC_CmdAppCommand>
 800dd00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <SD_PowerON+0x98>
    {
      return errorstate;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	e03b      	b.n	800dd84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	491e      	ldr	r1, [pc, #120]	; (800dd8c <SD_PowerON+0x118>)
 800dd12:	4618      	mov	r0, r3
 800dd14:	f002 fc82 	bl	801061c <SDMMC_CmdAppOperCommand>
 800dd18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd24:	e02e      	b.n	800dd84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f002 fae8 	bl	8010302 <SDIO_GetResponse>
 800dd32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	0fdb      	lsrs	r3, r3, #31
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d101      	bne.n	800dd40 <SD_PowerON+0xcc>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e000      	b.n	800dd42 <SD_PowerON+0xce>
 800dd40:	2300      	movs	r3, #0
 800dd42:	613b      	str	r3, [r7, #16]

    count++;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	3301      	adds	r3, #1
 800dd48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d802      	bhi.n	800dd5a <SD_PowerON+0xe6>
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0cc      	beq.n	800dcf4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d902      	bls.n	800dd6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dd64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd68:	e00c      	b.n	800dd84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d003      	beq.n	800dd7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	645a      	str	r2, [r3, #68]	; 0x44
 800dd7a:	e002      	b.n	800dd82 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3718      	adds	r7, #24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	c1100000 	.word	0xc1100000

0800dd90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dda0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dda4:	e018      	b.n	800ddd8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddae:	041b      	lsls	r3, r3, #16
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f002 fcf6 	bl	80107a4 <SDMMC_CmdSendStatus>
 800ddb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	e009      	b.n	800ddd8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f002 fa99 	bl	8010302 <SDIO_GetResponse>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dde8:	2300      	movs	r3, #0
 800ddea:	60fb      	str	r3, [r7, #12]
 800ddec:	2300      	movs	r3, #0
 800ddee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f002 fa83 	bl	8010302 <SDIO_GetResponse>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de06:	d102      	bne.n	800de0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de0c:	e02f      	b.n	800de6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800de0e:	f107 030c 	add.w	r3, r7, #12
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f879 	bl	800df0c <SD_FindSCR>
 800de1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	e023      	b.n	800de6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01c      	beq.n	800de6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de38:	041b      	lsls	r3, r3, #16
 800de3a:	4619      	mov	r1, r3
 800de3c:	4610      	mov	r0, r2
 800de3e:	f002 fbcb 	bl	80105d8 <SDMMC_CmdAppCommand>
 800de42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	e00f      	b.n	800de6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2102      	movs	r1, #2
 800de54:	4618      	mov	r0, r3
 800de56:	f002 fc04 	bl	8010662 <SDMMC_CmdBusWidth>
 800de5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d001      	beq.n	800de66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	e003      	b.n	800de6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de66:	2300      	movs	r3, #0
 800de68:	e001      	b.n	800de6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b086      	sub	sp, #24
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800de7e:	2300      	movs	r3, #0
 800de80:	60fb      	str	r3, [r7, #12]
 800de82:	2300      	movs	r3, #0
 800de84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2100      	movs	r1, #0
 800de8c:	4618      	mov	r0, r3
 800de8e:	f002 fa38 	bl	8010302 <SDIO_GetResponse>
 800de92:	4603      	mov	r3, r0
 800de94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de9c:	d102      	bne.n	800dea4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dea2:	e02f      	b.n	800df04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dea4:	f107 030c 	add.w	r3, r7, #12
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f82e 	bl	800df0c <SD_FindSCR>
 800deb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	e023      	b.n	800df04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d01c      	beq.n	800df00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dece:	041b      	lsls	r3, r3, #16
 800ded0:	4619      	mov	r1, r3
 800ded2:	4610      	mov	r0, r2
 800ded4:	f002 fb80 	bl	80105d8 <SDMMC_CmdAppCommand>
 800ded8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d001      	beq.n	800dee4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	e00f      	b.n	800df04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2100      	movs	r1, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f002 fbb9 	bl	8010662 <SDMMC_CmdBusWidth>
 800def0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d001      	beq.n	800defc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	e003      	b.n	800df04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800defc:	2300      	movs	r3, #0
 800defe:	e001      	b.n	800df04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800df04:	4618      	mov	r0, r3
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800df0c:	b590      	push	{r4, r7, lr}
 800df0e:	b08f      	sub	sp, #60	; 0x3c
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800df16:	f7fb fd7b 	bl	8009a10 <HAL_GetTick>
 800df1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800df1c:	2300      	movs	r3, #0
 800df1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800df20:	2300      	movs	r3, #0
 800df22:	60bb      	str	r3, [r7, #8]
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2108      	movs	r1, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f002 fa24 	bl	8010380 <SDMMC_CmdBlockLength>
 800df38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <SD_FindSCR+0x38>
  {
    return errorstate;
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	e0a9      	b.n	800e098 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df4c:	041b      	lsls	r3, r3, #16
 800df4e:	4619      	mov	r1, r3
 800df50:	4610      	mov	r0, r2
 800df52:	f002 fb41 	bl	80105d8 <SDMMC_CmdAppCommand>
 800df56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <SD_FindSCR+0x56>
  {
    return errorstate;
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	e09a      	b.n	800e098 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800df62:	f04f 33ff 	mov.w	r3, #4294967295
 800df66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800df68:	2308      	movs	r3, #8
 800df6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800df6c:	2330      	movs	r3, #48	; 0x30
 800df6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800df70:	2302      	movs	r3, #2
 800df72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800df74:	2300      	movs	r3, #0
 800df76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800df78:	2301      	movs	r3, #1
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f107 0210 	add.w	r2, r7, #16
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f002 f9ce 	bl	8010328 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4618      	mov	r0, r3
 800df92:	f002 fb88 	bl	80106a6 <SDMMC_CmdSendSCR>
 800df96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d022      	beq.n	800dfe4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	e07a      	b.n	800e098 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00e      	beq.n	800dfce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	f107 0208 	add.w	r2, r7, #8
 800dfbc:	18d4      	adds	r4, r2, r3
 800dfbe:	4608      	mov	r0, r1
 800dfc0:	f002 f92d 	bl	801021e <SDIO_ReadFIFO>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	6023      	str	r3, [r4, #0]
      index++;
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfca:	3301      	adds	r3, #1
 800dfcc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dfce:	f7fb fd1f 	bl	8009a10 <HAL_GetTick>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfdc:	d102      	bne.n	800dfe4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dfde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfe2:	e059      	b.n	800e098 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfea:	f240 432a 	movw	r3, #1066	; 0x42a
 800dfee:	4013      	ands	r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0d6      	beq.n	800dfa2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffa:	f003 0308 	and.w	r3, r3, #8
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2208      	movs	r2, #8
 800e008:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e00a:	2308      	movs	r3, #8
 800e00c:	e044      	b.n	800e098 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e014:	f003 0302 	and.w	r3, r3, #2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d005      	beq.n	800e028 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2202      	movs	r2, #2
 800e022:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e024:	2302      	movs	r3, #2
 800e026:	e037      	b.n	800e098 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e02e:	f003 0320 	and.w	r3, r3, #32
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2220      	movs	r2, #32
 800e03c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e03e:	2320      	movs	r3, #32
 800e040:	e02a      	b.n	800e098 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f240 523a 	movw	r2, #1338	; 0x53a
 800e04a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	061a      	lsls	r2, r3, #24
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	021b      	lsls	r3, r3, #8
 800e054:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e058:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	0a1b      	lsrs	r3, r3, #8
 800e05e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e062:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	0e1b      	lsrs	r3, r3, #24
 800e068:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06c:	601a      	str	r2, [r3, #0]
    scr++;
 800e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e070:	3304      	adds	r3, #4
 800e072:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	061a      	lsls	r2, r3, #24
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	021b      	lsls	r3, r3, #8
 800e07c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e080:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	0a1b      	lsrs	r3, r3, #8
 800e086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e08a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	0e1b      	lsrs	r3, r3, #24
 800e090:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	373c      	adds	r7, #60	; 0x3c
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd90      	pop	{r4, r7, pc}

0800e0a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d03f      	beq.n	800e13a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	617b      	str	r3, [r7, #20]
 800e0be:	e033      	b.n	800e128 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f002 f8aa 	bl	801021e <SDIO_ReadFIFO>
 800e0ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	0a1b      	lsrs	r3, r3, #8
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	0c1b      	lsrs	r3, r3, #16
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3301      	adds	r3, #1
 800e104:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3b01      	subs	r3, #1
 800e10a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	0e1b      	lsrs	r3, r3, #24
 800e110:	b2da      	uxtb	r2, r3
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3301      	adds	r3, #1
 800e11a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	3b01      	subs	r3, #1
 800e120:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	3301      	adds	r3, #1
 800e126:	617b      	str	r3, [r7, #20]
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	2b07      	cmp	r3, #7
 800e12c:	d9c8      	bls.n	800e0c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e13a:	bf00      	nop
 800e13c:	3718      	adds	r7, #24
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b086      	sub	sp, #24
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e154:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d043      	beq.n	800e1e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e15c:	2300      	movs	r3, #0
 800e15e:	617b      	str	r3, [r7, #20]
 800e160:	e037      	b.n	800e1d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3301      	adds	r3, #1
 800e16c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	3b01      	subs	r3, #1
 800e172:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	021a      	lsls	r2, r3, #8
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	4313      	orrs	r3, r2
 800e17e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	3301      	adds	r3, #1
 800e184:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	3b01      	subs	r3, #1
 800e18a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	041a      	lsls	r2, r3, #16
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	4313      	orrs	r3, r2
 800e196:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3301      	adds	r3, #1
 800e19c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	061a      	lsls	r2, r3, #24
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f107 0208 	add.w	r2, r7, #8
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f002 f836 	bl	8010238 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	617b      	str	r3, [r7, #20]
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2b07      	cmp	r3, #7
 800e1d6:	d9c4      	bls.n	800e162 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	693a      	ldr	r2, [r7, #16]
 800e1e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e1e4:	bf00      	nop
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d101      	bne.n	800e1fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e056      	b.n	800e2ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2200      	movs	r2, #0
 800e202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d106      	bne.n	800e21e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7f8 feff 	bl	800701c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2202      	movs	r2, #2
 800e222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e234:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	431a      	orrs	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	431a      	orrs	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	695b      	ldr	r3, [r3, #20]
 800e250:	431a      	orrs	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e25a:	431a      	orrs	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	69db      	ldr	r3, [r3, #28]
 800e260:	431a      	orrs	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	ea42 0103 	orr.w	r1, r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	0c1b      	lsrs	r3, r3, #16
 800e27c:	f003 0104 	and.w	r1, r3, #4
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	430a      	orrs	r2, r1
 800e28a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	69da      	ldr	r2, [r3, #28]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e29a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b088      	sub	sp, #32
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d101      	bne.n	800e2d6 <HAL_SPI_Transmit+0x22>
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	e11e      	b.n	800e514 <HAL_SPI_Transmit+0x260>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2de:	f7fb fb97 	bl	8009a10 <HAL_GetTick>
 800e2e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e2e4:	88fb      	ldrh	r3, [r7, #6]
 800e2e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d002      	beq.n	800e2fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e2f8:	e103      	b.n	800e502 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d002      	beq.n	800e306 <HAL_SPI_Transmit+0x52>
 800e300:	88fb      	ldrh	r3, [r7, #6]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d102      	bne.n	800e30c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e30a:	e0fa      	b.n	800e502 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2203      	movs	r2, #3
 800e310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	88fa      	ldrh	r2, [r7, #6]
 800e324:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	88fa      	ldrh	r2, [r7, #6]
 800e32a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e352:	d107      	bne.n	800e364 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e362:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e36e:	2b40      	cmp	r3, #64	; 0x40
 800e370:	d007      	beq.n	800e382 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e38a:	d14b      	bne.n	800e424 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d002      	beq.n	800e39a <HAL_SPI_Transmit+0xe6>
 800e394:	8afb      	ldrh	r3, [r7, #22]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d13e      	bne.n	800e418 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e39e:	881a      	ldrh	r2, [r3, #0]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3aa:	1c9a      	adds	r2, r3, #2
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e3be:	e02b      	b.n	800e418 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d112      	bne.n	800e3f4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d2:	881a      	ldrh	r2, [r3, #0]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3de:	1c9a      	adds	r2, r3, #2
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e3f2:	e011      	b.n	800e418 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3f4:	f7fb fb0c 	bl	8009a10 <HAL_GetTick>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d803      	bhi.n	800e40c <HAL_SPI_Transmit+0x158>
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d102      	bne.n	800e412 <HAL_SPI_Transmit+0x15e>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d102      	bne.n	800e418 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e412:	2303      	movs	r3, #3
 800e414:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e416:	e074      	b.n	800e502 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1ce      	bne.n	800e3c0 <HAL_SPI_Transmit+0x10c>
 800e422:	e04c      	b.n	800e4be <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d002      	beq.n	800e432 <HAL_SPI_Transmit+0x17e>
 800e42c:	8afb      	ldrh	r3, [r7, #22]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d140      	bne.n	800e4b4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	330c      	adds	r3, #12
 800e43c:	7812      	ldrb	r2, [r2, #0]
 800e43e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e44e:	b29b      	uxth	r3, r3
 800e450:	3b01      	subs	r3, #1
 800e452:	b29a      	uxth	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e458:	e02c      	b.n	800e4b4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	f003 0302 	and.w	r3, r3, #2
 800e464:	2b02      	cmp	r3, #2
 800e466:	d113      	bne.n	800e490 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	330c      	adds	r3, #12
 800e472:	7812      	ldrb	r2, [r2, #0]
 800e474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47a:	1c5a      	adds	r2, r3, #1
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e484:	b29b      	uxth	r3, r3
 800e486:	3b01      	subs	r3, #1
 800e488:	b29a      	uxth	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e48e:	e011      	b.n	800e4b4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e490:	f7fb fabe 	bl	8009a10 <HAL_GetTick>
 800e494:	4602      	mov	r2, r0
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d803      	bhi.n	800e4a8 <HAL_SPI_Transmit+0x1f4>
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a6:	d102      	bne.n	800e4ae <HAL_SPI_Transmit+0x1fa>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e4b2:	e026      	b.n	800e502 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1cd      	bne.n	800e45a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e4be:	69ba      	ldr	r2, [r7, #24]
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 fba4 	bl	800ec10 <SPI_EndRxTxTransaction>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d002      	beq.n	800e4d4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10a      	bne.n	800e4f2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4dc:	2300      	movs	r3, #0
 800e4de:	613b      	str	r3, [r7, #16]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	613b      	str	r3, [r7, #16]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	613b      	str	r3, [r7, #16]
 800e4f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	77fb      	strb	r3, [r7, #31]
 800e4fe:	e000      	b.n	800e502 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e500:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e512:	7ffb      	ldrb	r3, [r7, #31]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b088      	sub	sp, #32
 800e520:	af02      	add	r7, sp, #8
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	603b      	str	r3, [r7, #0]
 800e528:	4613      	mov	r3, r2
 800e52a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e538:	d112      	bne.n	800e560 <HAL_SPI_Receive+0x44>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d10e      	bne.n	800e560 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2204      	movs	r2, #4
 800e546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e54a:	88fa      	ldrh	r2, [r7, #6]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	4613      	mov	r3, r2
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	68b9      	ldr	r1, [r7, #8]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 f8e9 	bl	800e72e <HAL_SPI_TransmitReceive>
 800e55c:	4603      	mov	r3, r0
 800e55e:	e0e2      	b.n	800e726 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e566:	2b01      	cmp	r3, #1
 800e568:	d101      	bne.n	800e56e <HAL_SPI_Receive+0x52>
 800e56a:	2302      	movs	r3, #2
 800e56c:	e0db      	b.n	800e726 <HAL_SPI_Receive+0x20a>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e576:	f7fb fa4b 	bl	8009a10 <HAL_GetTick>
 800e57a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b01      	cmp	r3, #1
 800e586:	d002      	beq.n	800e58e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e588:	2302      	movs	r3, #2
 800e58a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e58c:	e0c2      	b.n	800e714 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <HAL_SPI_Receive+0x7e>
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d102      	bne.n	800e5a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e59e:	e0b9      	b.n	800e714 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2204      	movs	r2, #4
 800e5a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	88fa      	ldrh	r2, [r7, #6]
 800e5b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	88fa      	ldrh	r2, [r7, #6]
 800e5be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5e6:	d107      	bne.n	800e5f8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e5f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e602:	2b40      	cmp	r3, #64	; 0x40
 800e604:	d007      	beq.n	800e616 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e614:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d162      	bne.n	800e6e4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e61e:	e02e      	b.n	800e67e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f003 0301 	and.w	r3, r3, #1
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d115      	bne.n	800e65a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f103 020c 	add.w	r2, r3, #12
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e63a:	7812      	ldrb	r2, [r2, #0]
 800e63c:	b2d2      	uxtb	r2, r2
 800e63e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e64e:	b29b      	uxth	r3, r3
 800e650:	3b01      	subs	r3, #1
 800e652:	b29a      	uxth	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e658:	e011      	b.n	800e67e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e65a:	f7fb f9d9 	bl	8009a10 <HAL_GetTick>
 800e65e:	4602      	mov	r2, r0
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	683a      	ldr	r2, [r7, #0]
 800e666:	429a      	cmp	r2, r3
 800e668:	d803      	bhi.n	800e672 <HAL_SPI_Receive+0x156>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e670:	d102      	bne.n	800e678 <HAL_SPI_Receive+0x15c>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d102      	bne.n	800e67e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e678:	2303      	movs	r3, #3
 800e67a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e67c:	e04a      	b.n	800e714 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e682:	b29b      	uxth	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1cb      	bne.n	800e620 <HAL_SPI_Receive+0x104>
 800e688:	e031      	b.n	800e6ee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	f003 0301 	and.w	r3, r3, #1
 800e694:	2b01      	cmp	r3, #1
 800e696:	d113      	bne.n	800e6c0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	68da      	ldr	r2, [r3, #12]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a2:	b292      	uxth	r2, r2
 800e6a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6aa:	1c9a      	adds	r2, r3, #2
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e6be:	e011      	b.n	800e6e4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6c0:	f7fb f9a6 	bl	8009a10 <HAL_GetTick>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d803      	bhi.n	800e6d8 <HAL_SPI_Receive+0x1bc>
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d6:	d102      	bne.n	800e6de <HAL_SPI_Receive+0x1c2>
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d102      	bne.n	800e6e4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e6de:	2303      	movs	r3, #3
 800e6e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e6e2:	e017      	b.n	800e714 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1cd      	bne.n	800e68a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f000 fa27 	bl	800eb46 <SPI_EndRxTransaction>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2220      	movs	r2, #32
 800e702:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e70c:	2301      	movs	r3, #1
 800e70e:	75fb      	strb	r3, [r7, #23]
 800e710:	e000      	b.n	800e714 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e724:	7dfb      	ldrb	r3, [r7, #23]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3718      	adds	r7, #24
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b08c      	sub	sp, #48	; 0x30
 800e732:	af00      	add	r7, sp, #0
 800e734:	60f8      	str	r0, [r7, #12]
 800e736:	60b9      	str	r1, [r7, #8]
 800e738:	607a      	str	r2, [r7, #4]
 800e73a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e73c:	2301      	movs	r3, #1
 800e73e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e740:	2300      	movs	r3, #0
 800e742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d101      	bne.n	800e754 <HAL_SPI_TransmitReceive+0x26>
 800e750:	2302      	movs	r3, #2
 800e752:	e18a      	b.n	800ea6a <HAL_SPI_TransmitReceive+0x33c>
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e75c:	f7fb f958 	bl	8009a10 <HAL_GetTick>
 800e760:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e772:	887b      	ldrh	r3, [r7, #2]
 800e774:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d00f      	beq.n	800e79e <HAL_SPI_TransmitReceive+0x70>
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e784:	d107      	bne.n	800e796 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d103      	bne.n	800e796 <HAL_SPI_TransmitReceive+0x68>
 800e78e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e792:	2b04      	cmp	r3, #4
 800e794:	d003      	beq.n	800e79e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e796:	2302      	movs	r3, #2
 800e798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e79c:	e15b      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d005      	beq.n	800e7b0 <HAL_SPI_TransmitReceive+0x82>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d002      	beq.n	800e7b0 <HAL_SPI_TransmitReceive+0x82>
 800e7aa:	887b      	ldrh	r3, [r7, #2]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d103      	bne.n	800e7b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e7b6:	e14e      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	d003      	beq.n	800e7cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2205      	movs	r2, #5
 800e7c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	887a      	ldrh	r2, [r7, #2]
 800e7dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	887a      	ldrh	r2, [r7, #2]
 800e7e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	887a      	ldrh	r2, [r7, #2]
 800e7ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	887a      	ldrh	r2, [r7, #2]
 800e7f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e80c:	2b40      	cmp	r3, #64	; 0x40
 800e80e:	d007      	beq.n	800e820 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e81e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e828:	d178      	bne.n	800e91c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d002      	beq.n	800e838 <HAL_SPI_TransmitReceive+0x10a>
 800e832:	8b7b      	ldrh	r3, [r7, #26]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d166      	bne.n	800e906 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83c:	881a      	ldrh	r2, [r3, #0]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e848:	1c9a      	adds	r2, r3, #2
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e852:	b29b      	uxth	r3, r3
 800e854:	3b01      	subs	r3, #1
 800e856:	b29a      	uxth	r2, r3
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e85c:	e053      	b.n	800e906 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	f003 0302 	and.w	r3, r3, #2
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d11b      	bne.n	800e8a4 <HAL_SPI_TransmitReceive+0x176>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e870:	b29b      	uxth	r3, r3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d016      	beq.n	800e8a4 <HAL_SPI_TransmitReceive+0x176>
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d113      	bne.n	800e8a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e880:	881a      	ldrh	r2, [r3, #0]
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88c:	1c9a      	adds	r2, r3, #2
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e896:	b29b      	uxth	r3, r3
 800e898:	3b01      	subs	r3, #1
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f003 0301 	and.w	r3, r3, #1
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d119      	bne.n	800e8e6 <HAL_SPI_TransmitReceive+0x1b8>
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d014      	beq.n	800e8e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68da      	ldr	r2, [r3, #12]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c6:	b292      	uxth	r2, r2
 800e8c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ce:	1c9a      	adds	r2, r3, #2
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e8e6:	f7fb f893 	bl	8009a10 <HAL_GetTick>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d807      	bhi.n	800e906 <HAL_SPI_TransmitReceive+0x1d8>
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fc:	d003      	beq.n	800e906 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e8fe:	2303      	movs	r3, #3
 800e900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e904:	e0a7      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1a6      	bne.n	800e85e <HAL_SPI_TransmitReceive+0x130>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e914:	b29b      	uxth	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1a1      	bne.n	800e85e <HAL_SPI_TransmitReceive+0x130>
 800e91a:	e07c      	b.n	800ea16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <HAL_SPI_TransmitReceive+0x1fc>
 800e924:	8b7b      	ldrh	r3, [r7, #26]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d16b      	bne.n	800ea02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	330c      	adds	r3, #12
 800e934:	7812      	ldrb	r2, [r2, #0]
 800e936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e946:	b29b      	uxth	r3, r3
 800e948:	3b01      	subs	r3, #1
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e950:	e057      	b.n	800ea02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f003 0302 	and.w	r3, r3, #2
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d11c      	bne.n	800e99a <HAL_SPI_TransmitReceive+0x26c>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e964:	b29b      	uxth	r3, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d017      	beq.n	800e99a <HAL_SPI_TransmitReceive+0x26c>
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d114      	bne.n	800e99a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	330c      	adds	r3, #12
 800e97a:	7812      	ldrb	r2, [r2, #0]
 800e97c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	3b01      	subs	r3, #1
 800e990:	b29a      	uxth	r2, r3
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e996:	2300      	movs	r3, #0
 800e998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d119      	bne.n	800e9dc <HAL_SPI_TransmitReceive+0x2ae>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d014      	beq.n	800e9dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	68da      	ldr	r2, [r3, #12]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9bc:	b2d2      	uxtb	r2, r2
 800e9be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c4:	1c5a      	adds	r2, r3, #1
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e9dc:	f7fb f818 	bl	8009a10 <HAL_GetTick>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d803      	bhi.n	800e9f4 <HAL_SPI_TransmitReceive+0x2c6>
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f2:	d102      	bne.n	800e9fa <HAL_SPI_TransmitReceive+0x2cc>
 800e9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d103      	bne.n	800ea02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e9fa:	2303      	movs	r3, #3
 800e9fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ea00:	e029      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1a2      	bne.n	800e952 <HAL_SPI_TransmitReceive+0x224>
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d19d      	bne.n	800e952 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f000 f8f8 	bl	800ec10 <SPI_EndRxTxTransaction>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d006      	beq.n	800ea34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2220      	movs	r2, #32
 800ea30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ea32:	e010      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d10b      	bne.n	800ea54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	617b      	str	r3, [r7, #20]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	617b      	str	r3, [r7, #20]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	617b      	str	r3, [r7, #20]
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	e000      	b.n	800ea56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ea54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3730      	adds	r7, #48	; 0x30
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b084      	sub	sp, #16
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	60f8      	str	r0, [r7, #12]
 800ea7a:	60b9      	str	r1, [r7, #8]
 800ea7c:	603b      	str	r3, [r7, #0]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea82:	e04c      	b.n	800eb1e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea8a:	d048      	beq.n	800eb1e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ea8c:	f7fa ffc0 	bl	8009a10 <HAL_GetTick>
 800ea90:	4602      	mov	r2, r0
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	683a      	ldr	r2, [r7, #0]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d902      	bls.n	800eaa2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d13d      	bne.n	800eb1e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaba:	d111      	bne.n	800eae0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eac4:	d004      	beq.n	800ead0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eace:	d107      	bne.n	800eae0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eae8:	d10f      	bne.n	800eb0a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	e00f      	b.n	800eb3e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689a      	ldr	r2, [r3, #8]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	4013      	ands	r3, r2
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	bf0c      	ite	eq
 800eb2e:	2301      	moveq	r3, #1
 800eb30:	2300      	movne	r3, #0
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	461a      	mov	r2, r3
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d1a3      	bne.n	800ea84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b086      	sub	sp, #24
 800eb4a:	af02      	add	r7, sp, #8
 800eb4c:	60f8      	str	r0, [r7, #12]
 800eb4e:	60b9      	str	r1, [r7, #8]
 800eb50:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb5a:	d111      	bne.n	800eb80 <SPI_EndRxTransaction+0x3a>
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb64:	d004      	beq.n	800eb70 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb6e:	d107      	bne.n	800eb80 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb7e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb88:	d12a      	bne.n	800ebe0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb92:	d012      	beq.n	800ebba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2180      	movs	r1, #128	; 0x80
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f7ff ff67 	bl	800ea72 <SPI_WaitFlagStateUntilTimeout>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d02d      	beq.n	800ec06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebae:	f043 0220 	orr.w	r2, r3, #32
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ebb6:	2303      	movs	r3, #3
 800ebb8:	e026      	b.n	800ec08 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	9300      	str	r3, [sp, #0]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	2101      	movs	r1, #1
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7ff ff54 	bl	800ea72 <SPI_WaitFlagStateUntilTimeout>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d01a      	beq.n	800ec06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd4:	f043 0220 	orr.w	r2, r3, #32
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ebdc:	2303      	movs	r3, #3
 800ebde:	e013      	b.n	800ec08 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2101      	movs	r1, #1
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f7ff ff41 	bl	800ea72 <SPI_WaitFlagStateUntilTimeout>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d007      	beq.n	800ec06 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebfa:	f043 0220 	orr.w	r2, r3, #32
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ec02:	2303      	movs	r3, #3
 800ec04:	e000      	b.n	800ec08 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b088      	sub	sp, #32
 800ec14:	af02      	add	r7, sp, #8
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ec1c:	4b1b      	ldr	r3, [pc, #108]	; (800ec8c <SPI_EndRxTxTransaction+0x7c>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a1b      	ldr	r2, [pc, #108]	; (800ec90 <SPI_EndRxTxTransaction+0x80>)
 800ec22:	fba2 2303 	umull	r2, r3, r2, r3
 800ec26:	0d5b      	lsrs	r3, r3, #21
 800ec28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec2c:	fb02 f303 	mul.w	r3, r2, r3
 800ec30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec3a:	d112      	bne.n	800ec62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2200      	movs	r2, #0
 800ec44:	2180      	movs	r1, #128	; 0x80
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f7ff ff13 	bl	800ea72 <SPI_WaitFlagStateUntilTimeout>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d016      	beq.n	800ec80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec56:	f043 0220 	orr.w	r2, r3, #32
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	e00f      	b.n	800ec82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00a      	beq.n	800ec7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec78:	2b80      	cmp	r3, #128	; 0x80
 800ec7a:	d0f2      	beq.n	800ec62 <SPI_EndRxTxTransaction+0x52>
 800ec7c:	e000      	b.n	800ec80 <SPI_EndRxTxTransaction+0x70>
        break;
 800ec7e:	bf00      	nop
  }

  return HAL_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20000000 	.word	0x20000000
 800ec90:	165e9f81 	.word	0x165e9f81

0800ec94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	e01d      	b.n	800ece2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7f8 fa6a 	bl	8007194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2202      	movs	r2, #2
 800ecc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	f000 fb56 	bl	800f384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68da      	ldr	r2, [r3, #12]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f042 0201 	orr.w	r2, r2, #1
 800ed00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	f003 0307 	and.w	r3, r3, #7
 800ed0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2b06      	cmp	r3, #6
 800ed12:	d007      	beq.n	800ed24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0201 	orr.w	r2, r2, #1
 800ed22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b082      	sub	sp, #8
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e01d      	b.n	800ed80 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d106      	bne.n	800ed5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7f8 f9a7 	bl	80070ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2202      	movs	r2, #2
 800ed62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4610      	mov	r0, r2
 800ed72:	f000 fb07 	bl	800f384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2201      	movs	r2, #1
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f000 fd42 	bl	800f824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a15      	ldr	r2, [pc, #84]	; (800edfc <HAL_TIM_PWM_Start+0x74>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d004      	beq.n	800edb4 <HAL_TIM_PWM_Start+0x2c>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a14      	ldr	r2, [pc, #80]	; (800ee00 <HAL_TIM_PWM_Start+0x78>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d101      	bne.n	800edb8 <HAL_TIM_PWM_Start+0x30>
 800edb4:	2301      	movs	r3, #1
 800edb6:	e000      	b.n	800edba <HAL_TIM_PWM_Start+0x32>
 800edb8:	2300      	movs	r3, #0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d007      	beq.n	800edce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800edcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	f003 0307 	and.w	r3, r3, #7
 800edd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b06      	cmp	r3, #6
 800edde:	d007      	beq.n	800edf0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f042 0201 	orr.w	r2, r2, #1
 800edee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	40010000 	.word	0x40010000
 800ee00:	40010400 	.word	0x40010400

0800ee04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d101      	bne.n	800ee18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e083      	b.n	800ef20 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d106      	bne.n	800ee32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7f8 fa41 	bl	80072b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2202      	movs	r2, #2
 800ee36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	6812      	ldr	r2, [r2, #0]
 800ee44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee48:	f023 0307 	bic.w	r3, r3, #7
 800ee4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3304      	adds	r3, #4
 800ee56:	4619      	mov	r1, r3
 800ee58:	4610      	mov	r0, r2
 800ee5a:	f000 fa93 	bl	800f384 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee86:	f023 0303 	bic.w	r3, r3, #3
 800ee8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	689a      	ldr	r2, [r3, #8]
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	021b      	lsls	r3, r3, #8
 800ee96:	4313      	orrs	r3, r2
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800eea4:	f023 030c 	bic.w	r3, r3, #12
 800eea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eeb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eeb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	68da      	ldr	r2, [r3, #12]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	69db      	ldr	r3, [r3, #28]
 800eebe:	021b      	lsls	r3, r3, #8
 800eec0:	4313      	orrs	r3, r2
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	4313      	orrs	r3, r2
 800eec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	011a      	lsls	r2, r3, #4
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	031b      	lsls	r3, r3, #12
 800eed4:	4313      	orrs	r3, r2
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	4313      	orrs	r3, r2
 800eeda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800eee2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800eeea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	011b      	lsls	r3, r3, #4
 800eef6:	4313      	orrs	r3, r2
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	697a      	ldr	r2, [r7, #20]
 800ef04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	693a      	ldr	r2, [r7, #16]
 800ef0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3718      	adds	r7, #24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d002      	beq.n	800ef3e <HAL_TIM_Encoder_Start+0x16>
 800ef38:	2b04      	cmp	r3, #4
 800ef3a:	d008      	beq.n	800ef4e <HAL_TIM_Encoder_Start+0x26>
 800ef3c:	e00f      	b.n	800ef5e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2201      	movs	r2, #1
 800ef44:	2100      	movs	r1, #0
 800ef46:	4618      	mov	r0, r3
 800ef48:	f000 fc6c 	bl	800f824 <TIM_CCxChannelCmd>
      break;
 800ef4c:	e016      	b.n	800ef7c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2201      	movs	r2, #1
 800ef54:	2104      	movs	r1, #4
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 fc64 	bl	800f824 <TIM_CCxChannelCmd>
      break;
 800ef5c:	e00e      	b.n	800ef7c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2201      	movs	r2, #1
 800ef64:	2100      	movs	r1, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 fc5c 	bl	800f824 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	2201      	movs	r2, #1
 800ef72:	2104      	movs	r1, #4
 800ef74:	4618      	mov	r0, r3
 800ef76:	f000 fc55 	bl	800f824 <TIM_CCxChannelCmd>
      break;
 800ef7a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f042 0201 	orr.w	r2, r2, #1
 800ef8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	f003 0302 	and.w	r3, r3, #2
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d122      	bne.n	800eff2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	f003 0302 	and.w	r3, r3, #2
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d11b      	bne.n	800eff2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f06f 0202 	mvn.w	r2, #2
 800efc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	699b      	ldr	r3, [r3, #24]
 800efd0:	f003 0303 	and.w	r3, r3, #3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d003      	beq.n	800efe0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 f9b5 	bl	800f348 <HAL_TIM_IC_CaptureCallback>
 800efde:	e005      	b.n	800efec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f9a7 	bl	800f334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 f9b8 	bl	800f35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	f003 0304 	and.w	r3, r3, #4
 800effc:	2b04      	cmp	r3, #4
 800effe:	d122      	bne.n	800f046 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	f003 0304 	and.w	r3, r3, #4
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	d11b      	bne.n	800f046 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f06f 0204 	mvn.w	r2, #4
 800f016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2202      	movs	r2, #2
 800f01c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d003      	beq.n	800f034 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 f98b 	bl	800f348 <HAL_TIM_IC_CaptureCallback>
 800f032:	e005      	b.n	800f040 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f97d 	bl	800f334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 f98e 	bl	800f35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	691b      	ldr	r3, [r3, #16]
 800f04c:	f003 0308 	and.w	r3, r3, #8
 800f050:	2b08      	cmp	r3, #8
 800f052:	d122      	bne.n	800f09a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	f003 0308 	and.w	r3, r3, #8
 800f05e:	2b08      	cmp	r3, #8
 800f060:	d11b      	bne.n	800f09a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f06f 0208 	mvn.w	r2, #8
 800f06a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2204      	movs	r2, #4
 800f070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	69db      	ldr	r3, [r3, #28]
 800f078:	f003 0303 	and.w	r3, r3, #3
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d003      	beq.n	800f088 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 f961 	bl	800f348 <HAL_TIM_IC_CaptureCallback>
 800f086:	e005      	b.n	800f094 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f953 	bl	800f334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f964 	bl	800f35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	f003 0310 	and.w	r3, r3, #16
 800f0a4:	2b10      	cmp	r3, #16
 800f0a6:	d122      	bne.n	800f0ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	f003 0310 	and.w	r3, r3, #16
 800f0b2:	2b10      	cmp	r3, #16
 800f0b4:	d11b      	bne.n	800f0ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f06f 0210 	mvn.w	r2, #16
 800f0be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2208      	movs	r2, #8
 800f0c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	69db      	ldr	r3, [r3, #28]
 800f0cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d003      	beq.n	800f0dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f937 	bl	800f348 <HAL_TIM_IC_CaptureCallback>
 800f0da:	e005      	b.n	800f0e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f929 	bl	800f334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 f93a 	bl	800f35c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	f003 0301 	and.w	r3, r3, #1
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d10e      	bne.n	800f11a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b01      	cmp	r3, #1
 800f108:	d107      	bne.n	800f11a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f06f 0201 	mvn.w	r2, #1
 800f112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7f6 fdb7 	bl	8005c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	691b      	ldr	r3, [r3, #16]
 800f120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f124:	2b80      	cmp	r3, #128	; 0x80
 800f126:	d10e      	bne.n	800f146 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f132:	2b80      	cmp	r3, #128	; 0x80
 800f134:	d107      	bne.n	800f146 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f13e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 fc6d 	bl	800fa20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f150:	2b40      	cmp	r3, #64	; 0x40
 800f152:	d10e      	bne.n	800f172 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f15e:	2b40      	cmp	r3, #64	; 0x40
 800f160:	d107      	bne.n	800f172 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f16a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 f8ff 	bl	800f370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	f003 0320 	and.w	r3, r3, #32
 800f17c:	2b20      	cmp	r3, #32
 800f17e:	d10e      	bne.n	800f19e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	f003 0320 	and.w	r3, r3, #32
 800f18a:	2b20      	cmp	r3, #32
 800f18c:	d107      	bne.n	800f19e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f06f 0220 	mvn.w	r2, #32
 800f196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fc37 	bl	800fa0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d101      	bne.n	800f1c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f1be:	2302      	movs	r3, #2
 800f1c0:	e0b4      	b.n	800f32c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2202      	movs	r2, #2
 800f1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b0c      	cmp	r3, #12
 800f1d6:	f200 809f 	bhi.w	800f318 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f1da:	a201      	add	r2, pc, #4	; (adr r2, 800f1e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e0:	0800f215 	.word	0x0800f215
 800f1e4:	0800f319 	.word	0x0800f319
 800f1e8:	0800f319 	.word	0x0800f319
 800f1ec:	0800f319 	.word	0x0800f319
 800f1f0:	0800f255 	.word	0x0800f255
 800f1f4:	0800f319 	.word	0x0800f319
 800f1f8:	0800f319 	.word	0x0800f319
 800f1fc:	0800f319 	.word	0x0800f319
 800f200:	0800f297 	.word	0x0800f297
 800f204:	0800f319 	.word	0x0800f319
 800f208:	0800f319 	.word	0x0800f319
 800f20c:	0800f319 	.word	0x0800f319
 800f210:	0800f2d7 	.word	0x0800f2d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	68b9      	ldr	r1, [r7, #8]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 f952 	bl	800f4c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	699a      	ldr	r2, [r3, #24]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f042 0208 	orr.w	r2, r2, #8
 800f22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	699a      	ldr	r2, [r3, #24]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f022 0204 	bic.w	r2, r2, #4
 800f23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	6999      	ldr	r1, [r3, #24]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	691a      	ldr	r2, [r3, #16]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	430a      	orrs	r2, r1
 800f250:	619a      	str	r2, [r3, #24]
      break;
 800f252:	e062      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68b9      	ldr	r1, [r7, #8]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 f9a2 	bl	800f5a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	699a      	ldr	r2, [r3, #24]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f26e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	699a      	ldr	r2, [r3, #24]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f27e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6999      	ldr	r1, [r3, #24]
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	691b      	ldr	r3, [r3, #16]
 800f28a:	021a      	lsls	r2, r3, #8
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	430a      	orrs	r2, r1
 800f292:	619a      	str	r2, [r3, #24]
      break;
 800f294:	e041      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68b9      	ldr	r1, [r7, #8]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 f9f7 	bl	800f690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	69da      	ldr	r2, [r3, #28]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f042 0208 	orr.w	r2, r2, #8
 800f2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	69da      	ldr	r2, [r3, #28]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f022 0204 	bic.w	r2, r2, #4
 800f2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	69d9      	ldr	r1, [r3, #28]
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	691a      	ldr	r2, [r3, #16]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	430a      	orrs	r2, r1
 800f2d2:	61da      	str	r2, [r3, #28]
      break;
 800f2d4:	e021      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f000 fa4b 	bl	800f778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	69da      	ldr	r2, [r3, #28]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	69da      	ldr	r2, [r3, #28]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	69d9      	ldr	r1, [r3, #28]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	021a      	lsls	r2, r3, #8
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	430a      	orrs	r2, r1
 800f314:	61da      	str	r2, [r3, #28]
      break;
 800f316:	e000      	b.n	800f31a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f318:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f32a:	2300      	movs	r3, #0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f364:	bf00      	nop
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a40      	ldr	r2, [pc, #256]	; (800f498 <TIM_Base_SetConfig+0x114>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d013      	beq.n	800f3c4 <TIM_Base_SetConfig+0x40>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3a2:	d00f      	beq.n	800f3c4 <TIM_Base_SetConfig+0x40>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a3d      	ldr	r2, [pc, #244]	; (800f49c <TIM_Base_SetConfig+0x118>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d00b      	beq.n	800f3c4 <TIM_Base_SetConfig+0x40>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4a3c      	ldr	r2, [pc, #240]	; (800f4a0 <TIM_Base_SetConfig+0x11c>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d007      	beq.n	800f3c4 <TIM_Base_SetConfig+0x40>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4a3b      	ldr	r2, [pc, #236]	; (800f4a4 <TIM_Base_SetConfig+0x120>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d003      	beq.n	800f3c4 <TIM_Base_SetConfig+0x40>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a3a      	ldr	r2, [pc, #232]	; (800f4a8 <TIM_Base_SetConfig+0x124>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d108      	bne.n	800f3d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a2f      	ldr	r2, [pc, #188]	; (800f498 <TIM_Base_SetConfig+0x114>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d02b      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3e4:	d027      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a2c      	ldr	r2, [pc, #176]	; (800f49c <TIM_Base_SetConfig+0x118>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d023      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4a2b      	ldr	r2, [pc, #172]	; (800f4a0 <TIM_Base_SetConfig+0x11c>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d01f      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	4a2a      	ldr	r2, [pc, #168]	; (800f4a4 <TIM_Base_SetConfig+0x120>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d01b      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	4a29      	ldr	r2, [pc, #164]	; (800f4a8 <TIM_Base_SetConfig+0x124>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d017      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4a28      	ldr	r2, [pc, #160]	; (800f4ac <TIM_Base_SetConfig+0x128>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d013      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4a27      	ldr	r2, [pc, #156]	; (800f4b0 <TIM_Base_SetConfig+0x12c>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d00f      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4a26      	ldr	r2, [pc, #152]	; (800f4b4 <TIM_Base_SetConfig+0x130>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d00b      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a25      	ldr	r2, [pc, #148]	; (800f4b8 <TIM_Base_SetConfig+0x134>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d007      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a24      	ldr	r2, [pc, #144]	; (800f4bc <TIM_Base_SetConfig+0x138>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d003      	beq.n	800f436 <TIM_Base_SetConfig+0xb2>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a23      	ldr	r2, [pc, #140]	; (800f4c0 <TIM_Base_SetConfig+0x13c>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d108      	bne.n	800f448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f43c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	4313      	orrs	r3, r2
 800f446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	695b      	ldr	r3, [r3, #20]
 800f452:	4313      	orrs	r3, r2
 800f454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	689a      	ldr	r2, [r3, #8]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a0a      	ldr	r2, [pc, #40]	; (800f498 <TIM_Base_SetConfig+0x114>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d003      	beq.n	800f47c <TIM_Base_SetConfig+0xf8>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a0c      	ldr	r2, [pc, #48]	; (800f4a8 <TIM_Base_SetConfig+0x124>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d103      	bne.n	800f484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	691a      	ldr	r2, [r3, #16]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2201      	movs	r2, #1
 800f488:	615a      	str	r2, [r3, #20]
}
 800f48a:	bf00      	nop
 800f48c:	3714      	adds	r7, #20
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop
 800f498:	40010000 	.word	0x40010000
 800f49c:	40000400 	.word	0x40000400
 800f4a0:	40000800 	.word	0x40000800
 800f4a4:	40000c00 	.word	0x40000c00
 800f4a8:	40010400 	.word	0x40010400
 800f4ac:	40014000 	.word	0x40014000
 800f4b0:	40014400 	.word	0x40014400
 800f4b4:	40014800 	.word	0x40014800
 800f4b8:	40001800 	.word	0x40001800
 800f4bc:	40001c00 	.word	0x40001c00
 800f4c0:	40002000 	.word	0x40002000

0800f4c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b087      	sub	sp, #28
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a1b      	ldr	r3, [r3, #32]
 800f4d2:	f023 0201 	bic.w	r2, r3, #1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f023 0303 	bic.w	r3, r3, #3
 800f4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	4313      	orrs	r3, r2
 800f504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f023 0302 	bic.w	r3, r3, #2
 800f50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	4313      	orrs	r3, r2
 800f516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a20      	ldr	r2, [pc, #128]	; (800f59c <TIM_OC1_SetConfig+0xd8>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d003      	beq.n	800f528 <TIM_OC1_SetConfig+0x64>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a1f      	ldr	r2, [pc, #124]	; (800f5a0 <TIM_OC1_SetConfig+0xdc>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d10c      	bne.n	800f542 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f023 0308 	bic.w	r3, r3, #8
 800f52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	4313      	orrs	r3, r2
 800f538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	f023 0304 	bic.w	r3, r3, #4
 800f540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a15      	ldr	r2, [pc, #84]	; (800f59c <TIM_OC1_SetConfig+0xd8>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d003      	beq.n	800f552 <TIM_OC1_SetConfig+0x8e>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a14      	ldr	r2, [pc, #80]	; (800f5a0 <TIM_OC1_SetConfig+0xdc>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d111      	bne.n	800f576 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	693a      	ldr	r2, [r7, #16]
 800f568:	4313      	orrs	r3, r2
 800f56a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	699b      	ldr	r3, [r3, #24]
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	4313      	orrs	r3, r2
 800f574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	621a      	str	r2, [r3, #32]
}
 800f590:	bf00      	nop
 800f592:	371c      	adds	r7, #28
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	40010000 	.word	0x40010000
 800f5a0:	40010400 	.word	0x40010400

0800f5a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b087      	sub	sp, #28
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	f023 0210 	bic.w	r2, r3, #16
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a1b      	ldr	r3, [r3, #32]
 800f5be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	021b      	lsls	r3, r3, #8
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	4313      	orrs	r3, r2
 800f5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f023 0320 	bic.w	r3, r3, #32
 800f5ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	011b      	lsls	r3, r3, #4
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a22      	ldr	r2, [pc, #136]	; (800f688 <TIM_OC2_SetConfig+0xe4>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d003      	beq.n	800f60c <TIM_OC2_SetConfig+0x68>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a21      	ldr	r2, [pc, #132]	; (800f68c <TIM_OC2_SetConfig+0xe8>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d10d      	bne.n	800f628 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f626:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a17      	ldr	r2, [pc, #92]	; (800f688 <TIM_OC2_SetConfig+0xe4>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d003      	beq.n	800f638 <TIM_OC2_SetConfig+0x94>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a16      	ldr	r2, [pc, #88]	; (800f68c <TIM_OC2_SetConfig+0xe8>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d113      	bne.n	800f660 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f63e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	4313      	orrs	r3, r2
 800f652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	699b      	ldr	r3, [r3, #24]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	693a      	ldr	r2, [r7, #16]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	685a      	ldr	r2, [r3, #4]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	621a      	str	r2, [r3, #32]
}
 800f67a:	bf00      	nop
 800f67c:	371c      	adds	r7, #28
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	40010000 	.word	0x40010000
 800f68c:	40010400 	.word	0x40010400

0800f690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f690:	b480      	push	{r7}
 800f692:	b087      	sub	sp, #28
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a1b      	ldr	r3, [r3, #32]
 800f69e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6a1b      	ldr	r3, [r3, #32]
 800f6aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	69db      	ldr	r3, [r3, #28]
 800f6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f023 0303 	bic.w	r3, r3, #3
 800f6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	021b      	lsls	r3, r3, #8
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a21      	ldr	r2, [pc, #132]	; (800f770 <TIM_OC3_SetConfig+0xe0>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d003      	beq.n	800f6f6 <TIM_OC3_SetConfig+0x66>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a20      	ldr	r2, [pc, #128]	; (800f774 <TIM_OC3_SetConfig+0xe4>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d10d      	bne.n	800f712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	021b      	lsls	r3, r3, #8
 800f704:	697a      	ldr	r2, [r7, #20]
 800f706:	4313      	orrs	r3, r2
 800f708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4a16      	ldr	r2, [pc, #88]	; (800f770 <TIM_OC3_SetConfig+0xe0>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d003      	beq.n	800f722 <TIM_OC3_SetConfig+0x92>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a15      	ldr	r2, [pc, #84]	; (800f774 <TIM_OC3_SetConfig+0xe4>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d113      	bne.n	800f74a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	695b      	ldr	r3, [r3, #20]
 800f736:	011b      	lsls	r3, r3, #4
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	699b      	ldr	r3, [r3, #24]
 800f742:	011b      	lsls	r3, r3, #4
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	4313      	orrs	r3, r2
 800f748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	693a      	ldr	r2, [r7, #16]
 800f74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	685a      	ldr	r2, [r3, #4]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	697a      	ldr	r2, [r7, #20]
 800f762:	621a      	str	r2, [r3, #32]
}
 800f764:	bf00      	nop
 800f766:	371c      	adds	r7, #28
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr
 800f770:	40010000 	.word	0x40010000
 800f774:	40010400 	.word	0x40010400

0800f778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f778:	b480      	push	{r7}
 800f77a:	b087      	sub	sp, #28
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6a1b      	ldr	r3, [r3, #32]
 800f792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	69db      	ldr	r3, [r3, #28]
 800f79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	021b      	lsls	r3, r3, #8
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	031b      	lsls	r3, r3, #12
 800f7ca:	693a      	ldr	r2, [r7, #16]
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4a12      	ldr	r2, [pc, #72]	; (800f81c <TIM_OC4_SetConfig+0xa4>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d003      	beq.n	800f7e0 <TIM_OC4_SetConfig+0x68>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a11      	ldr	r2, [pc, #68]	; (800f820 <TIM_OC4_SetConfig+0xa8>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d109      	bne.n	800f7f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	695b      	ldr	r3, [r3, #20]
 800f7ec:	019b      	lsls	r3, r3, #6
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	685a      	ldr	r2, [r3, #4]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	693a      	ldr	r2, [r7, #16]
 800f80c:	621a      	str	r2, [r3, #32]
}
 800f80e:	bf00      	nop
 800f810:	371c      	adds	r7, #28
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	40010000 	.word	0x40010000
 800f820:	40010400 	.word	0x40010400

0800f824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	f003 031f 	and.w	r3, r3, #31
 800f836:	2201      	movs	r2, #1
 800f838:	fa02 f303 	lsl.w	r3, r2, r3
 800f83c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a1a      	ldr	r2, [r3, #32]
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	43db      	mvns	r3, r3
 800f846:	401a      	ands	r2, r3
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6a1a      	ldr	r2, [r3, #32]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	f003 031f 	and.w	r3, r3, #31
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	fa01 f303 	lsl.w	r3, r1, r3
 800f85c:	431a      	orrs	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	621a      	str	r2, [r3, #32]
}
 800f862:	bf00      	nop
 800f864:	371c      	adds	r7, #28
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
	...

0800f870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f880:	2b01      	cmp	r3, #1
 800f882:	d101      	bne.n	800f888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f884:	2302      	movs	r3, #2
 800f886:	e05a      	b.n	800f93e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2202      	movs	r2, #2
 800f894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a21      	ldr	r2, [pc, #132]	; (800f94c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d022      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8d4:	d01d      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a1d      	ldr	r2, [pc, #116]	; (800f950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d018      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a1b      	ldr	r2, [pc, #108]	; (800f954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d013      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a1a      	ldr	r2, [pc, #104]	; (800f958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d00e      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a18      	ldr	r2, [pc, #96]	; (800f95c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d009      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a17      	ldr	r2, [pc, #92]	; (800f960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d004      	beq.n	800f912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4a15      	ldr	r2, [pc, #84]	; (800f964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d10c      	bne.n	800f92c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	4313      	orrs	r3, r2
 800f922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	40010000 	.word	0x40010000
 800f950:	40000400 	.word	0x40000400
 800f954:	40000800 	.word	0x40000800
 800f958:	40000c00 	.word	0x40000c00
 800f95c:	40010400 	.word	0x40010400
 800f960:	40014000 	.word	0x40014000
 800f964:	40001800 	.word	0x40001800

0800f968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f972:	2300      	movs	r3, #0
 800f974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d101      	bne.n	800f984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f980:	2302      	movs	r3, #2
 800f982:	e03d      	b.n	800fa00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	4313      	orrs	r3, r2
 800f998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	689b      	ldr	r3, [r3, #8]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	69db      	ldr	r3, [r3, #28]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3714      	adds	r7, #20
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d101      	bne.n	800fa46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa42:	2301      	movs	r3, #1
 800fa44:	e03f      	b.n	800fac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d106      	bne.n	800fa60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f7f7 fd54 	bl	8007508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2224      	movs	r2, #36	; 0x24
 800fa64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	68da      	ldr	r2, [r3, #12]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 f829 	bl	800fad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	691a      	ldr	r2, [r3, #16]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	695a      	ldr	r2, [r3, #20]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68da      	ldr	r2, [r3, #12]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800faac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2220      	movs	r2, #32
 800fab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2220      	movs	r2, #32
 800fac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad4:	b085      	sub	sp, #20
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	691b      	ldr	r3, [r3, #16]
 800fae0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	68da      	ldr	r2, [r3, #12]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	430a      	orrs	r2, r1
 800faee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	689a      	ldr	r2, [r3, #8]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	431a      	orrs	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	695b      	ldr	r3, [r3, #20]
 800fafe:	431a      	orrs	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	69db      	ldr	r3, [r3, #28]
 800fb04:	4313      	orrs	r3, r2
 800fb06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fb12:	f023 030c 	bic.w	r3, r3, #12
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	6812      	ldr	r2, [r2, #0]
 800fb1a:	68f9      	ldr	r1, [r7, #12]
 800fb1c:	430b      	orrs	r3, r1
 800fb1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	695b      	ldr	r3, [r3, #20]
 800fb26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	699a      	ldr	r2, [r3, #24]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	430a      	orrs	r2, r1
 800fb34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	69db      	ldr	r3, [r3, #28]
 800fb3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb3e:	f040 818b 	bne.w	800fe58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4ac1      	ldr	r2, [pc, #772]	; (800fe4c <UART_SetConfig+0x37c>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d005      	beq.n	800fb58 <UART_SetConfig+0x88>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4abf      	ldr	r2, [pc, #764]	; (800fe50 <UART_SetConfig+0x380>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	f040 80bd 	bne.w	800fcd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fb58:	f7fc fbcc 	bl	800c2f4 <HAL_RCC_GetPCLK2Freq>
 800fb5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	461d      	mov	r5, r3
 800fb62:	f04f 0600 	mov.w	r6, #0
 800fb66:	46a8      	mov	r8, r5
 800fb68:	46b1      	mov	r9, r6
 800fb6a:	eb18 0308 	adds.w	r3, r8, r8
 800fb6e:	eb49 0409 	adc.w	r4, r9, r9
 800fb72:	4698      	mov	r8, r3
 800fb74:	46a1      	mov	r9, r4
 800fb76:	eb18 0805 	adds.w	r8, r8, r5
 800fb7a:	eb49 0906 	adc.w	r9, r9, r6
 800fb7e:	f04f 0100 	mov.w	r1, #0
 800fb82:	f04f 0200 	mov.w	r2, #0
 800fb86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fb8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fb8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fb92:	4688      	mov	r8, r1
 800fb94:	4691      	mov	r9, r2
 800fb96:	eb18 0005 	adds.w	r0, r8, r5
 800fb9a:	eb49 0106 	adc.w	r1, r9, r6
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	461d      	mov	r5, r3
 800fba4:	f04f 0600 	mov.w	r6, #0
 800fba8:	196b      	adds	r3, r5, r5
 800fbaa:	eb46 0406 	adc.w	r4, r6, r6
 800fbae:	461a      	mov	r2, r3
 800fbb0:	4623      	mov	r3, r4
 800fbb2:	f7f1 f881 	bl	8000cb8 <__aeabi_uldivmod>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	460c      	mov	r4, r1
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4ba5      	ldr	r3, [pc, #660]	; (800fe54 <UART_SetConfig+0x384>)
 800fbbe:	fba3 2302 	umull	r2, r3, r3, r2
 800fbc2:	095b      	lsrs	r3, r3, #5
 800fbc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	461d      	mov	r5, r3
 800fbcc:	f04f 0600 	mov.w	r6, #0
 800fbd0:	46a9      	mov	r9, r5
 800fbd2:	46b2      	mov	sl, r6
 800fbd4:	eb19 0309 	adds.w	r3, r9, r9
 800fbd8:	eb4a 040a 	adc.w	r4, sl, sl
 800fbdc:	4699      	mov	r9, r3
 800fbde:	46a2      	mov	sl, r4
 800fbe0:	eb19 0905 	adds.w	r9, r9, r5
 800fbe4:	eb4a 0a06 	adc.w	sl, sl, r6
 800fbe8:	f04f 0100 	mov.w	r1, #0
 800fbec:	f04f 0200 	mov.w	r2, #0
 800fbf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbfc:	4689      	mov	r9, r1
 800fbfe:	4692      	mov	sl, r2
 800fc00:	eb19 0005 	adds.w	r0, r9, r5
 800fc04:	eb4a 0106 	adc.w	r1, sl, r6
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	461d      	mov	r5, r3
 800fc0e:	f04f 0600 	mov.w	r6, #0
 800fc12:	196b      	adds	r3, r5, r5
 800fc14:	eb46 0406 	adc.w	r4, r6, r6
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4623      	mov	r3, r4
 800fc1c:	f7f1 f84c 	bl	8000cb8 <__aeabi_uldivmod>
 800fc20:	4603      	mov	r3, r0
 800fc22:	460c      	mov	r4, r1
 800fc24:	461a      	mov	r2, r3
 800fc26:	4b8b      	ldr	r3, [pc, #556]	; (800fe54 <UART_SetConfig+0x384>)
 800fc28:	fba3 1302 	umull	r1, r3, r3, r2
 800fc2c:	095b      	lsrs	r3, r3, #5
 800fc2e:	2164      	movs	r1, #100	; 0x64
 800fc30:	fb01 f303 	mul.w	r3, r1, r3
 800fc34:	1ad3      	subs	r3, r2, r3
 800fc36:	00db      	lsls	r3, r3, #3
 800fc38:	3332      	adds	r3, #50	; 0x32
 800fc3a:	4a86      	ldr	r2, [pc, #536]	; (800fe54 <UART_SetConfig+0x384>)
 800fc3c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc40:	095b      	lsrs	r3, r3, #5
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fc48:	4498      	add	r8, r3
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	461d      	mov	r5, r3
 800fc4e:	f04f 0600 	mov.w	r6, #0
 800fc52:	46a9      	mov	r9, r5
 800fc54:	46b2      	mov	sl, r6
 800fc56:	eb19 0309 	adds.w	r3, r9, r9
 800fc5a:	eb4a 040a 	adc.w	r4, sl, sl
 800fc5e:	4699      	mov	r9, r3
 800fc60:	46a2      	mov	sl, r4
 800fc62:	eb19 0905 	adds.w	r9, r9, r5
 800fc66:	eb4a 0a06 	adc.w	sl, sl, r6
 800fc6a:	f04f 0100 	mov.w	r1, #0
 800fc6e:	f04f 0200 	mov.w	r2, #0
 800fc72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc7e:	4689      	mov	r9, r1
 800fc80:	4692      	mov	sl, r2
 800fc82:	eb19 0005 	adds.w	r0, r9, r5
 800fc86:	eb4a 0106 	adc.w	r1, sl, r6
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	461d      	mov	r5, r3
 800fc90:	f04f 0600 	mov.w	r6, #0
 800fc94:	196b      	adds	r3, r5, r5
 800fc96:	eb46 0406 	adc.w	r4, r6, r6
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	4623      	mov	r3, r4
 800fc9e:	f7f1 f80b 	bl	8000cb8 <__aeabi_uldivmod>
 800fca2:	4603      	mov	r3, r0
 800fca4:	460c      	mov	r4, r1
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b6a      	ldr	r3, [pc, #424]	; (800fe54 <UART_SetConfig+0x384>)
 800fcaa:	fba3 1302 	umull	r1, r3, r3, r2
 800fcae:	095b      	lsrs	r3, r3, #5
 800fcb0:	2164      	movs	r1, #100	; 0x64
 800fcb2:	fb01 f303 	mul.w	r3, r1, r3
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	00db      	lsls	r3, r3, #3
 800fcba:	3332      	adds	r3, #50	; 0x32
 800fcbc:	4a65      	ldr	r2, [pc, #404]	; (800fe54 <UART_SetConfig+0x384>)
 800fcbe:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc2:	095b      	lsrs	r3, r3, #5
 800fcc4:	f003 0207 	and.w	r2, r3, #7
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4442      	add	r2, r8
 800fcce:	609a      	str	r2, [r3, #8]
 800fcd0:	e26f      	b.n	80101b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fcd2:	f7fc fafb 	bl	800c2cc <HAL_RCC_GetPCLK1Freq>
 800fcd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	461d      	mov	r5, r3
 800fcdc:	f04f 0600 	mov.w	r6, #0
 800fce0:	46a8      	mov	r8, r5
 800fce2:	46b1      	mov	r9, r6
 800fce4:	eb18 0308 	adds.w	r3, r8, r8
 800fce8:	eb49 0409 	adc.w	r4, r9, r9
 800fcec:	4698      	mov	r8, r3
 800fcee:	46a1      	mov	r9, r4
 800fcf0:	eb18 0805 	adds.w	r8, r8, r5
 800fcf4:	eb49 0906 	adc.w	r9, r9, r6
 800fcf8:	f04f 0100 	mov.w	r1, #0
 800fcfc:	f04f 0200 	mov.w	r2, #0
 800fd00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd0c:	4688      	mov	r8, r1
 800fd0e:	4691      	mov	r9, r2
 800fd10:	eb18 0005 	adds.w	r0, r8, r5
 800fd14:	eb49 0106 	adc.w	r1, r9, r6
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	461d      	mov	r5, r3
 800fd1e:	f04f 0600 	mov.w	r6, #0
 800fd22:	196b      	adds	r3, r5, r5
 800fd24:	eb46 0406 	adc.w	r4, r6, r6
 800fd28:	461a      	mov	r2, r3
 800fd2a:	4623      	mov	r3, r4
 800fd2c:	f7f0 ffc4 	bl	8000cb8 <__aeabi_uldivmod>
 800fd30:	4603      	mov	r3, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	461a      	mov	r2, r3
 800fd36:	4b47      	ldr	r3, [pc, #284]	; (800fe54 <UART_SetConfig+0x384>)
 800fd38:	fba3 2302 	umull	r2, r3, r3, r2
 800fd3c:	095b      	lsrs	r3, r3, #5
 800fd3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	461d      	mov	r5, r3
 800fd46:	f04f 0600 	mov.w	r6, #0
 800fd4a:	46a9      	mov	r9, r5
 800fd4c:	46b2      	mov	sl, r6
 800fd4e:	eb19 0309 	adds.w	r3, r9, r9
 800fd52:	eb4a 040a 	adc.w	r4, sl, sl
 800fd56:	4699      	mov	r9, r3
 800fd58:	46a2      	mov	sl, r4
 800fd5a:	eb19 0905 	adds.w	r9, r9, r5
 800fd5e:	eb4a 0a06 	adc.w	sl, sl, r6
 800fd62:	f04f 0100 	mov.w	r1, #0
 800fd66:	f04f 0200 	mov.w	r2, #0
 800fd6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd76:	4689      	mov	r9, r1
 800fd78:	4692      	mov	sl, r2
 800fd7a:	eb19 0005 	adds.w	r0, r9, r5
 800fd7e:	eb4a 0106 	adc.w	r1, sl, r6
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	461d      	mov	r5, r3
 800fd88:	f04f 0600 	mov.w	r6, #0
 800fd8c:	196b      	adds	r3, r5, r5
 800fd8e:	eb46 0406 	adc.w	r4, r6, r6
 800fd92:	461a      	mov	r2, r3
 800fd94:	4623      	mov	r3, r4
 800fd96:	f7f0 ff8f 	bl	8000cb8 <__aeabi_uldivmod>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4b2c      	ldr	r3, [pc, #176]	; (800fe54 <UART_SetConfig+0x384>)
 800fda2:	fba3 1302 	umull	r1, r3, r3, r2
 800fda6:	095b      	lsrs	r3, r3, #5
 800fda8:	2164      	movs	r1, #100	; 0x64
 800fdaa:	fb01 f303 	mul.w	r3, r1, r3
 800fdae:	1ad3      	subs	r3, r2, r3
 800fdb0:	00db      	lsls	r3, r3, #3
 800fdb2:	3332      	adds	r3, #50	; 0x32
 800fdb4:	4a27      	ldr	r2, [pc, #156]	; (800fe54 <UART_SetConfig+0x384>)
 800fdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fdba:	095b      	lsrs	r3, r3, #5
 800fdbc:	005b      	lsls	r3, r3, #1
 800fdbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fdc2:	4498      	add	r8, r3
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	461d      	mov	r5, r3
 800fdc8:	f04f 0600 	mov.w	r6, #0
 800fdcc:	46a9      	mov	r9, r5
 800fdce:	46b2      	mov	sl, r6
 800fdd0:	eb19 0309 	adds.w	r3, r9, r9
 800fdd4:	eb4a 040a 	adc.w	r4, sl, sl
 800fdd8:	4699      	mov	r9, r3
 800fdda:	46a2      	mov	sl, r4
 800fddc:	eb19 0905 	adds.w	r9, r9, r5
 800fde0:	eb4a 0a06 	adc.w	sl, sl, r6
 800fde4:	f04f 0100 	mov.w	r1, #0
 800fde8:	f04f 0200 	mov.w	r2, #0
 800fdec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdf8:	4689      	mov	r9, r1
 800fdfa:	4692      	mov	sl, r2
 800fdfc:	eb19 0005 	adds.w	r0, r9, r5
 800fe00:	eb4a 0106 	adc.w	r1, sl, r6
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	461d      	mov	r5, r3
 800fe0a:	f04f 0600 	mov.w	r6, #0
 800fe0e:	196b      	adds	r3, r5, r5
 800fe10:	eb46 0406 	adc.w	r4, r6, r6
 800fe14:	461a      	mov	r2, r3
 800fe16:	4623      	mov	r3, r4
 800fe18:	f7f0 ff4e 	bl	8000cb8 <__aeabi_uldivmod>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	461a      	mov	r2, r3
 800fe22:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <UART_SetConfig+0x384>)
 800fe24:	fba3 1302 	umull	r1, r3, r3, r2
 800fe28:	095b      	lsrs	r3, r3, #5
 800fe2a:	2164      	movs	r1, #100	; 0x64
 800fe2c:	fb01 f303 	mul.w	r3, r1, r3
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	00db      	lsls	r3, r3, #3
 800fe34:	3332      	adds	r3, #50	; 0x32
 800fe36:	4a07      	ldr	r2, [pc, #28]	; (800fe54 <UART_SetConfig+0x384>)
 800fe38:	fba2 2303 	umull	r2, r3, r2, r3
 800fe3c:	095b      	lsrs	r3, r3, #5
 800fe3e:	f003 0207 	and.w	r2, r3, #7
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4442      	add	r2, r8
 800fe48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fe4a:	e1b2      	b.n	80101b2 <UART_SetConfig+0x6e2>
 800fe4c:	40011000 	.word	0x40011000
 800fe50:	40011400 	.word	0x40011400
 800fe54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4ad7      	ldr	r2, [pc, #860]	; (80101bc <UART_SetConfig+0x6ec>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d005      	beq.n	800fe6e <UART_SetConfig+0x39e>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4ad6      	ldr	r2, [pc, #856]	; (80101c0 <UART_SetConfig+0x6f0>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	f040 80d1 	bne.w	8010010 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe6e:	f7fc fa41 	bl	800c2f4 <HAL_RCC_GetPCLK2Freq>
 800fe72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	469a      	mov	sl, r3
 800fe78:	f04f 0b00 	mov.w	fp, #0
 800fe7c:	46d0      	mov	r8, sl
 800fe7e:	46d9      	mov	r9, fp
 800fe80:	eb18 0308 	adds.w	r3, r8, r8
 800fe84:	eb49 0409 	adc.w	r4, r9, r9
 800fe88:	4698      	mov	r8, r3
 800fe8a:	46a1      	mov	r9, r4
 800fe8c:	eb18 080a 	adds.w	r8, r8, sl
 800fe90:	eb49 090b 	adc.w	r9, r9, fp
 800fe94:	f04f 0100 	mov.w	r1, #0
 800fe98:	f04f 0200 	mov.w	r2, #0
 800fe9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fea8:	4688      	mov	r8, r1
 800feaa:	4691      	mov	r9, r2
 800feac:	eb1a 0508 	adds.w	r5, sl, r8
 800feb0:	eb4b 0609 	adc.w	r6, fp, r9
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4619      	mov	r1, r3
 800feba:	f04f 0200 	mov.w	r2, #0
 800febe:	f04f 0300 	mov.w	r3, #0
 800fec2:	f04f 0400 	mov.w	r4, #0
 800fec6:	0094      	lsls	r4, r2, #2
 800fec8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fecc:	008b      	lsls	r3, r1, #2
 800fece:	461a      	mov	r2, r3
 800fed0:	4623      	mov	r3, r4
 800fed2:	4628      	mov	r0, r5
 800fed4:	4631      	mov	r1, r6
 800fed6:	f7f0 feef 	bl	8000cb8 <__aeabi_uldivmod>
 800feda:	4603      	mov	r3, r0
 800fedc:	460c      	mov	r4, r1
 800fede:	461a      	mov	r2, r3
 800fee0:	4bb8      	ldr	r3, [pc, #736]	; (80101c4 <UART_SetConfig+0x6f4>)
 800fee2:	fba3 2302 	umull	r2, r3, r3, r2
 800fee6:	095b      	lsrs	r3, r3, #5
 800fee8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	469b      	mov	fp, r3
 800fef0:	f04f 0c00 	mov.w	ip, #0
 800fef4:	46d9      	mov	r9, fp
 800fef6:	46e2      	mov	sl, ip
 800fef8:	eb19 0309 	adds.w	r3, r9, r9
 800fefc:	eb4a 040a 	adc.w	r4, sl, sl
 800ff00:	4699      	mov	r9, r3
 800ff02:	46a2      	mov	sl, r4
 800ff04:	eb19 090b 	adds.w	r9, r9, fp
 800ff08:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ff0c:	f04f 0100 	mov.w	r1, #0
 800ff10:	f04f 0200 	mov.w	r2, #0
 800ff14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff20:	4689      	mov	r9, r1
 800ff22:	4692      	mov	sl, r2
 800ff24:	eb1b 0509 	adds.w	r5, fp, r9
 800ff28:	eb4c 060a 	adc.w	r6, ip, sl
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	4619      	mov	r1, r3
 800ff32:	f04f 0200 	mov.w	r2, #0
 800ff36:	f04f 0300 	mov.w	r3, #0
 800ff3a:	f04f 0400 	mov.w	r4, #0
 800ff3e:	0094      	lsls	r4, r2, #2
 800ff40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ff44:	008b      	lsls	r3, r1, #2
 800ff46:	461a      	mov	r2, r3
 800ff48:	4623      	mov	r3, r4
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	4631      	mov	r1, r6
 800ff4e:	f7f0 feb3 	bl	8000cb8 <__aeabi_uldivmod>
 800ff52:	4603      	mov	r3, r0
 800ff54:	460c      	mov	r4, r1
 800ff56:	461a      	mov	r2, r3
 800ff58:	4b9a      	ldr	r3, [pc, #616]	; (80101c4 <UART_SetConfig+0x6f4>)
 800ff5a:	fba3 1302 	umull	r1, r3, r3, r2
 800ff5e:	095b      	lsrs	r3, r3, #5
 800ff60:	2164      	movs	r1, #100	; 0x64
 800ff62:	fb01 f303 	mul.w	r3, r1, r3
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	011b      	lsls	r3, r3, #4
 800ff6a:	3332      	adds	r3, #50	; 0x32
 800ff6c:	4a95      	ldr	r2, [pc, #596]	; (80101c4 <UART_SetConfig+0x6f4>)
 800ff6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff72:	095b      	lsrs	r3, r3, #5
 800ff74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff78:	4498      	add	r8, r3
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	469b      	mov	fp, r3
 800ff7e:	f04f 0c00 	mov.w	ip, #0
 800ff82:	46d9      	mov	r9, fp
 800ff84:	46e2      	mov	sl, ip
 800ff86:	eb19 0309 	adds.w	r3, r9, r9
 800ff8a:	eb4a 040a 	adc.w	r4, sl, sl
 800ff8e:	4699      	mov	r9, r3
 800ff90:	46a2      	mov	sl, r4
 800ff92:	eb19 090b 	adds.w	r9, r9, fp
 800ff96:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ff9a:	f04f 0100 	mov.w	r1, #0
 800ff9e:	f04f 0200 	mov.w	r2, #0
 800ffa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffae:	4689      	mov	r9, r1
 800ffb0:	4692      	mov	sl, r2
 800ffb2:	eb1b 0509 	adds.w	r5, fp, r9
 800ffb6:	eb4c 060a 	adc.w	r6, ip, sl
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	f04f 0200 	mov.w	r2, #0
 800ffc4:	f04f 0300 	mov.w	r3, #0
 800ffc8:	f04f 0400 	mov.w	r4, #0
 800ffcc:	0094      	lsls	r4, r2, #2
 800ffce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ffd2:	008b      	lsls	r3, r1, #2
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	4623      	mov	r3, r4
 800ffd8:	4628      	mov	r0, r5
 800ffda:	4631      	mov	r1, r6
 800ffdc:	f7f0 fe6c 	bl	8000cb8 <__aeabi_uldivmod>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	460c      	mov	r4, r1
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4b77      	ldr	r3, [pc, #476]	; (80101c4 <UART_SetConfig+0x6f4>)
 800ffe8:	fba3 1302 	umull	r1, r3, r3, r2
 800ffec:	095b      	lsrs	r3, r3, #5
 800ffee:	2164      	movs	r1, #100	; 0x64
 800fff0:	fb01 f303 	mul.w	r3, r1, r3
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	011b      	lsls	r3, r3, #4
 800fff8:	3332      	adds	r3, #50	; 0x32
 800fffa:	4a72      	ldr	r2, [pc, #456]	; (80101c4 <UART_SetConfig+0x6f4>)
 800fffc:	fba2 2303 	umull	r2, r3, r2, r3
 8010000:	095b      	lsrs	r3, r3, #5
 8010002:	f003 020f 	and.w	r2, r3, #15
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4442      	add	r2, r8
 801000c:	609a      	str	r2, [r3, #8]
 801000e:	e0d0      	b.n	80101b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010010:	f7fc f95c 	bl	800c2cc <HAL_RCC_GetPCLK1Freq>
 8010014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	469a      	mov	sl, r3
 801001a:	f04f 0b00 	mov.w	fp, #0
 801001e:	46d0      	mov	r8, sl
 8010020:	46d9      	mov	r9, fp
 8010022:	eb18 0308 	adds.w	r3, r8, r8
 8010026:	eb49 0409 	adc.w	r4, r9, r9
 801002a:	4698      	mov	r8, r3
 801002c:	46a1      	mov	r9, r4
 801002e:	eb18 080a 	adds.w	r8, r8, sl
 8010032:	eb49 090b 	adc.w	r9, r9, fp
 8010036:	f04f 0100 	mov.w	r1, #0
 801003a:	f04f 0200 	mov.w	r2, #0
 801003e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801004a:	4688      	mov	r8, r1
 801004c:	4691      	mov	r9, r2
 801004e:	eb1a 0508 	adds.w	r5, sl, r8
 8010052:	eb4b 0609 	adc.w	r6, fp, r9
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	4619      	mov	r1, r3
 801005c:	f04f 0200 	mov.w	r2, #0
 8010060:	f04f 0300 	mov.w	r3, #0
 8010064:	f04f 0400 	mov.w	r4, #0
 8010068:	0094      	lsls	r4, r2, #2
 801006a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801006e:	008b      	lsls	r3, r1, #2
 8010070:	461a      	mov	r2, r3
 8010072:	4623      	mov	r3, r4
 8010074:	4628      	mov	r0, r5
 8010076:	4631      	mov	r1, r6
 8010078:	f7f0 fe1e 	bl	8000cb8 <__aeabi_uldivmod>
 801007c:	4603      	mov	r3, r0
 801007e:	460c      	mov	r4, r1
 8010080:	461a      	mov	r2, r3
 8010082:	4b50      	ldr	r3, [pc, #320]	; (80101c4 <UART_SetConfig+0x6f4>)
 8010084:	fba3 2302 	umull	r2, r3, r3, r2
 8010088:	095b      	lsrs	r3, r3, #5
 801008a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	469b      	mov	fp, r3
 8010092:	f04f 0c00 	mov.w	ip, #0
 8010096:	46d9      	mov	r9, fp
 8010098:	46e2      	mov	sl, ip
 801009a:	eb19 0309 	adds.w	r3, r9, r9
 801009e:	eb4a 040a 	adc.w	r4, sl, sl
 80100a2:	4699      	mov	r9, r3
 80100a4:	46a2      	mov	sl, r4
 80100a6:	eb19 090b 	adds.w	r9, r9, fp
 80100aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80100ae:	f04f 0100 	mov.w	r1, #0
 80100b2:	f04f 0200 	mov.w	r2, #0
 80100b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100c2:	4689      	mov	r9, r1
 80100c4:	4692      	mov	sl, r2
 80100c6:	eb1b 0509 	adds.w	r5, fp, r9
 80100ca:	eb4c 060a 	adc.w	r6, ip, sl
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	4619      	mov	r1, r3
 80100d4:	f04f 0200 	mov.w	r2, #0
 80100d8:	f04f 0300 	mov.w	r3, #0
 80100dc:	f04f 0400 	mov.w	r4, #0
 80100e0:	0094      	lsls	r4, r2, #2
 80100e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80100e6:	008b      	lsls	r3, r1, #2
 80100e8:	461a      	mov	r2, r3
 80100ea:	4623      	mov	r3, r4
 80100ec:	4628      	mov	r0, r5
 80100ee:	4631      	mov	r1, r6
 80100f0:	f7f0 fde2 	bl	8000cb8 <__aeabi_uldivmod>
 80100f4:	4603      	mov	r3, r0
 80100f6:	460c      	mov	r4, r1
 80100f8:	461a      	mov	r2, r3
 80100fa:	4b32      	ldr	r3, [pc, #200]	; (80101c4 <UART_SetConfig+0x6f4>)
 80100fc:	fba3 1302 	umull	r1, r3, r3, r2
 8010100:	095b      	lsrs	r3, r3, #5
 8010102:	2164      	movs	r1, #100	; 0x64
 8010104:	fb01 f303 	mul.w	r3, r1, r3
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	011b      	lsls	r3, r3, #4
 801010c:	3332      	adds	r3, #50	; 0x32
 801010e:	4a2d      	ldr	r2, [pc, #180]	; (80101c4 <UART_SetConfig+0x6f4>)
 8010110:	fba2 2303 	umull	r2, r3, r2, r3
 8010114:	095b      	lsrs	r3, r3, #5
 8010116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801011a:	4498      	add	r8, r3
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	469b      	mov	fp, r3
 8010120:	f04f 0c00 	mov.w	ip, #0
 8010124:	46d9      	mov	r9, fp
 8010126:	46e2      	mov	sl, ip
 8010128:	eb19 0309 	adds.w	r3, r9, r9
 801012c:	eb4a 040a 	adc.w	r4, sl, sl
 8010130:	4699      	mov	r9, r3
 8010132:	46a2      	mov	sl, r4
 8010134:	eb19 090b 	adds.w	r9, r9, fp
 8010138:	eb4a 0a0c 	adc.w	sl, sl, ip
 801013c:	f04f 0100 	mov.w	r1, #0
 8010140:	f04f 0200 	mov.w	r2, #0
 8010144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801014c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010150:	4689      	mov	r9, r1
 8010152:	4692      	mov	sl, r2
 8010154:	eb1b 0509 	adds.w	r5, fp, r9
 8010158:	eb4c 060a 	adc.w	r6, ip, sl
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	4619      	mov	r1, r3
 8010162:	f04f 0200 	mov.w	r2, #0
 8010166:	f04f 0300 	mov.w	r3, #0
 801016a:	f04f 0400 	mov.w	r4, #0
 801016e:	0094      	lsls	r4, r2, #2
 8010170:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010174:	008b      	lsls	r3, r1, #2
 8010176:	461a      	mov	r2, r3
 8010178:	4623      	mov	r3, r4
 801017a:	4628      	mov	r0, r5
 801017c:	4631      	mov	r1, r6
 801017e:	f7f0 fd9b 	bl	8000cb8 <__aeabi_uldivmod>
 8010182:	4603      	mov	r3, r0
 8010184:	460c      	mov	r4, r1
 8010186:	461a      	mov	r2, r3
 8010188:	4b0e      	ldr	r3, [pc, #56]	; (80101c4 <UART_SetConfig+0x6f4>)
 801018a:	fba3 1302 	umull	r1, r3, r3, r2
 801018e:	095b      	lsrs	r3, r3, #5
 8010190:	2164      	movs	r1, #100	; 0x64
 8010192:	fb01 f303 	mul.w	r3, r1, r3
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	011b      	lsls	r3, r3, #4
 801019a:	3332      	adds	r3, #50	; 0x32
 801019c:	4a09      	ldr	r2, [pc, #36]	; (80101c4 <UART_SetConfig+0x6f4>)
 801019e:	fba2 2303 	umull	r2, r3, r2, r3
 80101a2:	095b      	lsrs	r3, r3, #5
 80101a4:	f003 020f 	and.w	r2, r3, #15
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4442      	add	r2, r8
 80101ae:	609a      	str	r2, [r3, #8]
}
 80101b0:	e7ff      	b.n	80101b2 <UART_SetConfig+0x6e2>
 80101b2:	bf00      	nop
 80101b4:	3714      	adds	r7, #20
 80101b6:	46bd      	mov	sp, r7
 80101b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101bc:	40011000 	.word	0x40011000
 80101c0:	40011400 	.word	0x40011400
 80101c4:	51eb851f 	.word	0x51eb851f

080101c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80101c8:	b084      	sub	sp, #16
 80101ca:	b480      	push	{r7}
 80101cc:	b085      	sub	sp, #20
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	f107 001c 	add.w	r0, r7, #28
 80101d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80101da:	2300      	movs	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80101de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80101e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80101e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80101e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80101e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80101ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80101ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80101ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80101f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80101f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	4313      	orrs	r3, r2
 80101f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	431a      	orrs	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	b004      	add	sp, #16
 801021c:	4770      	bx	lr

0801021e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801021e:	b480      	push	{r7}
 8010220:	b083      	sub	sp, #12
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801022c:	4618      	mov	r0, r3
 801022e:	370c      	adds	r7, #12
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2203      	movs	r2, #3
 8010266:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010268:	2002      	movs	r0, #2
 801026a:	f7f9 fbdd 	bl	8009a28 <HAL_Delay>
  
  return HAL_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f003 0303 	and.w	r3, r3, #3
}
 8010288:	4618      	mov	r0, r3
 801028a:	370c      	adds	r7, #12
 801028c:	46bd      	mov	sp, r7
 801028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010292:	4770      	bx	lr

08010294 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801029e:	2300      	movs	r3, #0
 80102a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80102b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80102be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80102ce:	f023 030f 	bic.w	r3, r3, #15
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	431a      	orrs	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80102da:	2300      	movs	r3, #0
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	b2db      	uxtb	r3, r3
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010302:	b480      	push	{r7}
 8010304:	b085      	sub	sp, #20
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
 801030a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	3314      	adds	r3, #20
 8010310:	461a      	mov	r2, r3
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	4413      	add	r3, r2
 8010316:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
}  
 801031c:	4618      	mov	r0, r3
 801031e:	3714      	adds	r7, #20
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801034e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010354:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801035a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	4313      	orrs	r3, r2
 8010360:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010366:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	431a      	orrs	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010372:	2300      	movs	r3, #0

}
 8010374:	4618      	mov	r0, r3
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b088      	sub	sp, #32
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801038e:	2310      	movs	r3, #16
 8010390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010392:	2340      	movs	r3, #64	; 0x40
 8010394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010396:	2300      	movs	r3, #0
 8010398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801039e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103a0:	f107 0308 	add.w	r3, r7, #8
 80103a4:	4619      	mov	r1, r3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff ff74 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80103ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80103b0:	2110      	movs	r1, #16
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 fa40 	bl	8010838 <SDMMC_GetCmdResp1>
 80103b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ba:	69fb      	ldr	r3, [r7, #28]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b088      	sub	sp, #32
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80103d2:	2311      	movs	r3, #17
 80103d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103d6:	2340      	movs	r3, #64	; 0x40
 80103d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103da:	2300      	movs	r3, #0
 80103dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103e4:	f107 0308 	add.w	r3, r7, #8
 80103e8:	4619      	mov	r1, r3
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7ff ff52 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80103f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80103f4:	2111      	movs	r1, #17
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 fa1e 	bl	8010838 <SDMMC_GetCmdResp1>
 80103fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103fe:	69fb      	ldr	r3, [r7, #28]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3720      	adds	r7, #32
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b088      	sub	sp, #32
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010416:	2312      	movs	r3, #18
 8010418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801041a:	2340      	movs	r3, #64	; 0x40
 801041c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801041e:	2300      	movs	r3, #0
 8010420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010426:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010428:	f107 0308 	add.w	r3, r7, #8
 801042c:	4619      	mov	r1, r3
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f7ff ff30 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010434:	f241 3288 	movw	r2, #5000	; 0x1388
 8010438:	2112      	movs	r1, #18
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 f9fc 	bl	8010838 <SDMMC_GetCmdResp1>
 8010440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010442:	69fb      	ldr	r3, [r7, #28]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3720      	adds	r7, #32
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b088      	sub	sp, #32
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801045a:	2318      	movs	r3, #24
 801045c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801045e:	2340      	movs	r3, #64	; 0x40
 8010460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010462:	2300      	movs	r3, #0
 8010464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801046a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801046c:	f107 0308 	add.w	r3, r7, #8
 8010470:	4619      	mov	r1, r3
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff ff0e 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010478:	f241 3288 	movw	r2, #5000	; 0x1388
 801047c:	2118      	movs	r1, #24
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 f9da 	bl	8010838 <SDMMC_GetCmdResp1>
 8010484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010486:	69fb      	ldr	r3, [r7, #28]
}
 8010488:	4618      	mov	r0, r3
 801048a:	3720      	adds	r7, #32
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b088      	sub	sp, #32
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801049e:	2319      	movs	r3, #25
 80104a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104a2:	2340      	movs	r3, #64	; 0x40
 80104a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104a6:	2300      	movs	r3, #0
 80104a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104b0:	f107 0308 	add.w	r3, r7, #8
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7ff feec 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80104bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80104c0:	2119      	movs	r1, #25
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f9b8 	bl	8010838 <SDMMC_GetCmdResp1>
 80104c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ca:	69fb      	ldr	r3, [r7, #28]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3720      	adds	r7, #32
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b088      	sub	sp, #32
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80104dc:	2300      	movs	r3, #0
 80104de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80104e0:	230c      	movs	r3, #12
 80104e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104e4:	2340      	movs	r3, #64	; 0x40
 80104e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104e8:	2300      	movs	r3, #0
 80104ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104f2:	f107 0308 	add.w	r3, r7, #8
 80104f6:	4619      	mov	r1, r3
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff fecb 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80104fe:	4a05      	ldr	r2, [pc, #20]	; (8010514 <SDMMC_CmdStopTransfer+0x40>)
 8010500:	210c      	movs	r1, #12
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f998 	bl	8010838 <SDMMC_GetCmdResp1>
 8010508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801050a:	69fb      	ldr	r3, [r7, #28]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3720      	adds	r7, #32
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	05f5e100 	.word	0x05f5e100

08010518 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b08a      	sub	sp, #40	; 0x28
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010528:	2307      	movs	r3, #7
 801052a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801052c:	2340      	movs	r3, #64	; 0x40
 801052e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010530:	2300      	movs	r3, #0
 8010532:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010538:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801053a:	f107 0310 	add.w	r3, r7, #16
 801053e:	4619      	mov	r1, r3
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7ff fea7 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010546:	f241 3288 	movw	r2, #5000	; 0x1388
 801054a:	2107      	movs	r1, #7
 801054c:	68f8      	ldr	r0, [r7, #12]
 801054e:	f000 f973 	bl	8010838 <SDMMC_GetCmdResp1>
 8010552:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010556:	4618      	mov	r0, r3
 8010558:	3728      	adds	r7, #40	; 0x28
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}

0801055e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b088      	sub	sp, #32
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010566:	2300      	movs	r3, #0
 8010568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801056a:	2300      	movs	r3, #0
 801056c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801056e:	2300      	movs	r3, #0
 8010570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010572:	2300      	movs	r3, #0
 8010574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801057a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801057c:	f107 0308 	add.w	r3, r7, #8
 8010580:	4619      	mov	r1, r3
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7ff fe86 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f92d 	bl	80107e8 <SDMMC_GetCmdError>
 801058e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010590:	69fb      	ldr	r3, [r7, #28]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3720      	adds	r7, #32
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b088      	sub	sp, #32
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80105a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80105a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80105a8:	2308      	movs	r3, #8
 80105aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105ac:	2340      	movs	r3, #64	; 0x40
 80105ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105b0:	2300      	movs	r3, #0
 80105b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105ba:	f107 0308 	add.w	r3, r7, #8
 80105be:	4619      	mov	r1, r3
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff fe67 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 fb16 	bl	8010bf8 <SDMMC_GetCmdResp7>
 80105cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ce:	69fb      	ldr	r3, [r7, #28]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3720      	adds	r7, #32
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b088      	sub	sp, #32
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80105e6:	2337      	movs	r3, #55	; 0x37
 80105e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105ea:	2340      	movs	r3, #64	; 0x40
 80105ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105ee:	2300      	movs	r3, #0
 80105f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105f8:	f107 0308 	add.w	r3, r7, #8
 80105fc:	4619      	mov	r1, r3
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f7ff fe48 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010604:	f241 3288 	movw	r2, #5000	; 0x1388
 8010608:	2137      	movs	r1, #55	; 0x37
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f914 	bl	8010838 <SDMMC_GetCmdResp1>
 8010610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010612:	69fb      	ldr	r3, [r7, #28]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3720      	adds	r7, #32
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b088      	sub	sp, #32
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010632:	2329      	movs	r3, #41	; 0x29
 8010634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010636:	2340      	movs	r3, #64	; 0x40
 8010638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801063a:	2300      	movs	r3, #0
 801063c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801063e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010642:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010644:	f107 0308 	add.w	r3, r7, #8
 8010648:	4619      	mov	r1, r3
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7ff fe22 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f000 fa23 	bl	8010a9c <SDMMC_GetCmdResp3>
 8010656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010658:	69fb      	ldr	r3, [r7, #28]
}
 801065a:	4618      	mov	r0, r3
 801065c:	3720      	adds	r7, #32
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010662:	b580      	push	{r7, lr}
 8010664:	b088      	sub	sp, #32
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010670:	2306      	movs	r3, #6
 8010672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010674:	2340      	movs	r3, #64	; 0x40
 8010676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010678:	2300      	movs	r3, #0
 801067a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010680:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010682:	f107 0308 	add.w	r3, r7, #8
 8010686:	4619      	mov	r1, r3
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7ff fe03 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801068e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010692:	2106      	movs	r1, #6
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 f8cf 	bl	8010838 <SDMMC_GetCmdResp1>
 801069a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801069c:	69fb      	ldr	r3, [r7, #28]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3720      	adds	r7, #32
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b088      	sub	sp, #32
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80106ae:	2300      	movs	r3, #0
 80106b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80106b2:	2333      	movs	r3, #51	; 0x33
 80106b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106b6:	2340      	movs	r3, #64	; 0x40
 80106b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106ba:	2300      	movs	r3, #0
 80106bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106c4:	f107 0308 	add.w	r3, r7, #8
 80106c8:	4619      	mov	r1, r3
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7ff fde2 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80106d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80106d4:	2133      	movs	r1, #51	; 0x33
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 f8ae 	bl	8010838 <SDMMC_GetCmdResp1>
 80106dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106de:	69fb      	ldr	r3, [r7, #28]
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3720      	adds	r7, #32
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b088      	sub	sp, #32
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80106f0:	2300      	movs	r3, #0
 80106f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80106f4:	2302      	movs	r3, #2
 80106f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106f8:	23c0      	movs	r3, #192	; 0xc0
 80106fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106fc:	2300      	movs	r3, #0
 80106fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010704:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	4619      	mov	r1, r3
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7ff fdc1 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f97c 	bl	8010a10 <SDMMC_GetCmdResp2>
 8010718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071a:	69fb      	ldr	r3, [r7, #28]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3720      	adds	r7, #32
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010732:	2309      	movs	r3, #9
 8010734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010736:	23c0      	movs	r3, #192	; 0xc0
 8010738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801073a:	2300      	movs	r3, #0
 801073c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801073e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010744:	f107 0308 	add.w	r3, r7, #8
 8010748:	4619      	mov	r1, r3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7ff fda2 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f000 f95d 	bl	8010a10 <SDMMC_GetCmdResp2>
 8010756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010758:	69fb      	ldr	r3, [r7, #28]
}
 801075a:	4618      	mov	r0, r3
 801075c:	3720      	adds	r7, #32
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b088      	sub	sp, #32
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801076c:	2300      	movs	r3, #0
 801076e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010770:	2303      	movs	r3, #3
 8010772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010774:	2340      	movs	r3, #64	; 0x40
 8010776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010778:	2300      	movs	r3, #0
 801077a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801077c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010782:	f107 0308 	add.w	r3, r7, #8
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff fd83 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	2103      	movs	r1, #3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f000 f9bc 	bl	8010b10 <SDMMC_GetCmdResp6>
 8010798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801079a:	69fb      	ldr	r3, [r7, #28]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3720      	adds	r7, #32
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b088      	sub	sp, #32
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80107b2:	230d      	movs	r3, #13
 80107b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107b6:	2340      	movs	r3, #64	; 0x40
 80107b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107ba:	2300      	movs	r3, #0
 80107bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107c4:	f107 0308 	add.w	r3, r7, #8
 80107c8:	4619      	mov	r1, r3
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f7ff fd62 	bl	8010294 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80107d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80107d4:	210d      	movs	r1, #13
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 f82e 	bl	8010838 <SDMMC_GetCmdResp1>
 80107dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107de:	69fb      	ldr	r3, [r7, #28]
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3720      	adds	r7, #32
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80107e8:	b490      	push	{r4, r7}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107f0:	4b0f      	ldr	r3, [pc, #60]	; (8010830 <SDMMC_GetCmdError+0x48>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4a0f      	ldr	r2, [pc, #60]	; (8010834 <SDMMC_GetCmdError+0x4c>)
 80107f6:	fba2 2303 	umull	r2, r3, r2, r3
 80107fa:	0a5b      	lsrs	r3, r3, #9
 80107fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010800:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010804:	4623      	mov	r3, r4
 8010806:	1e5c      	subs	r4, r3, #1
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801080c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010810:	e009      	b.n	8010826 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801081a:	2b00      	cmp	r3, #0
 801081c:	d0f2      	beq.n	8010804 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	22c5      	movs	r2, #197	; 0xc5
 8010822:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3708      	adds	r7, #8
 801082a:	46bd      	mov	sp, r7
 801082c:	bc90      	pop	{r4, r7}
 801082e:	4770      	bx	lr
 8010830:	20000000 	.word	0x20000000
 8010834:	10624dd3 	.word	0x10624dd3

08010838 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010838:	b590      	push	{r4, r7, lr}
 801083a:	b087      	sub	sp, #28
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	460b      	mov	r3, r1
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010846:	4b6f      	ldr	r3, [pc, #444]	; (8010a04 <SDMMC_GetCmdResp1+0x1cc>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a6f      	ldr	r2, [pc, #444]	; (8010a08 <SDMMC_GetCmdResp1+0x1d0>)
 801084c:	fba2 2303 	umull	r2, r3, r2, r3
 8010850:	0a5b      	lsrs	r3, r3, #9
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010858:	4623      	mov	r3, r4
 801085a:	1e5c      	subs	r4, r3, #1
 801085c:	2b00      	cmp	r3, #0
 801085e:	d102      	bne.n	8010866 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010864:	e0c9      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801086a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010872:	2b00      	cmp	r3, #0
 8010874:	d0f0      	beq.n	8010858 <SDMMC_GetCmdResp1+0x20>
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1eb      	bne.n	8010858 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010884:	f003 0304 	and.w	r3, r3, #4
 8010888:	2b00      	cmp	r3, #0
 801088a:	d004      	beq.n	8010896 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2204      	movs	r2, #4
 8010890:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010892:	2304      	movs	r3, #4
 8010894:	e0b1      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d004      	beq.n	80108ac <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108a8:	2301      	movs	r3, #1
 80108aa:	e0a6      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	22c5      	movs	r2, #197	; 0xc5
 80108b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f7ff fd18 	bl	80102e8 <SDIO_GetCommandResponse>
 80108b8:	4603      	mov	r3, r0
 80108ba:	461a      	mov	r2, r3
 80108bc:	7afb      	ldrb	r3, [r7, #11]
 80108be:	4293      	cmp	r3, r2
 80108c0:	d001      	beq.n	80108c6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108c2:	2301      	movs	r3, #1
 80108c4:	e099      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80108c6:	2100      	movs	r1, #0
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7ff fd1a 	bl	8010302 <SDIO_GetResponse>
 80108ce:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	4b4e      	ldr	r3, [pc, #312]	; (8010a0c <SDMMC_GetCmdResp1+0x1d4>)
 80108d4:	4013      	ands	r3, r2
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d101      	bne.n	80108de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80108da:	2300      	movs	r3, #0
 80108dc:	e08d      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	da02      	bge.n	80108ea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80108e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80108e8:	e087      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d001      	beq.n	80108f8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108f4:	2340      	movs	r3, #64	; 0x40
 80108f6:	e080      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d001      	beq.n	8010906 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010902:	2380      	movs	r3, #128	; 0x80
 8010904:	e079      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010914:	e071      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010924:	e069      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010934:	e061      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010944:	e059      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010954:	e051      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010964:	e049      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010974:	e041      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010984:	e039      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010994:	e031      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80109a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80109a4:	e029      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80109b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80109b4:	e021      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80109c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80109c4:	e019      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80109d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80109d4:	e011      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80109e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80109e4:	e009      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	f003 0308 	and.w	r3, r3, #8
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80109f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80109f4:	e001      	b.n	80109fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	371c      	adds	r7, #28
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd90      	pop	{r4, r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20000000 	.word	0x20000000
 8010a08:	10624dd3 	.word	0x10624dd3
 8010a0c:	fdffe008 	.word	0xfdffe008

08010a10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010a10:	b490      	push	{r4, r7}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a18:	4b1e      	ldr	r3, [pc, #120]	; (8010a94 <SDMMC_GetCmdResp2+0x84>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a1e      	ldr	r2, [pc, #120]	; (8010a98 <SDMMC_GetCmdResp2+0x88>)
 8010a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a22:	0a5b      	lsrs	r3, r3, #9
 8010a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a2c:	4623      	mov	r3, r4
 8010a2e:	1e5c      	subs	r4, r3, #1
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d102      	bne.n	8010a3a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a38:	e026      	b.n	8010a88 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a3e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0f0      	beq.n	8010a2c <SDMMC_GetCmdResp2+0x1c>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1eb      	bne.n	8010a2c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a58:	f003 0304 	and.w	r3, r3, #4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d004      	beq.n	8010a6a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2204      	movs	r2, #4
 8010a64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a66:	2304      	movs	r3, #4
 8010a68:	e00e      	b.n	8010a88 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a6e:	f003 0301 	and.w	r3, r3, #1
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d004      	beq.n	8010a80 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2201      	movs	r2, #1
 8010a7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e003      	b.n	8010a88 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	22c5      	movs	r2, #197	; 0xc5
 8010a84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a86:	2300      	movs	r3, #0
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3710      	adds	r7, #16
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bc90      	pop	{r4, r7}
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	20000000 	.word	0x20000000
 8010a98:	10624dd3 	.word	0x10624dd3

08010a9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010a9c:	b490      	push	{r4, r7}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010aa4:	4b18      	ldr	r3, [pc, #96]	; (8010b08 <SDMMC_GetCmdResp3+0x6c>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a18      	ldr	r2, [pc, #96]	; (8010b0c <SDMMC_GetCmdResp3+0x70>)
 8010aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8010aae:	0a5b      	lsrs	r3, r3, #9
 8010ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ab4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ab8:	4623      	mov	r3, r4
 8010aba:	1e5c      	subs	r4, r3, #1
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ac4:	e01b      	b.n	8010afe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d0f0      	beq.n	8010ab8 <SDMMC_GetCmdResp3+0x1c>
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d1eb      	bne.n	8010ab8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae4:	f003 0304 	and.w	r3, r3, #4
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d004      	beq.n	8010af6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2204      	movs	r2, #4
 8010af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010af2:	2304      	movs	r3, #4
 8010af4:	e003      	b.n	8010afe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	22c5      	movs	r2, #197	; 0xc5
 8010afa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010afc:	2300      	movs	r3, #0
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bc90      	pop	{r4, r7}
 8010b06:	4770      	bx	lr
 8010b08:	20000000 	.word	0x20000000
 8010b0c:	10624dd3 	.word	0x10624dd3

08010b10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010b10:	b590      	push	{r4, r7, lr}
 8010b12:	b087      	sub	sp, #28
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	460b      	mov	r3, r1
 8010b1a:	607a      	str	r2, [r7, #4]
 8010b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b1e:	4b34      	ldr	r3, [pc, #208]	; (8010bf0 <SDMMC_GetCmdResp6+0xe0>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4a34      	ldr	r2, [pc, #208]	; (8010bf4 <SDMMC_GetCmdResp6+0xe4>)
 8010b24:	fba2 2303 	umull	r2, r3, r2, r3
 8010b28:	0a5b      	lsrs	r3, r3, #9
 8010b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b2e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b32:	4623      	mov	r3, r4
 8010b34:	1e5c      	subs	r4, r3, #1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d102      	bne.n	8010b40 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b3e:	e052      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b44:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d0f0      	beq.n	8010b32 <SDMMC_GetCmdResp6+0x22>
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d1eb      	bne.n	8010b32 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b5e:	f003 0304 	and.w	r3, r3, #4
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d004      	beq.n	8010b70 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2204      	movs	r2, #4
 8010b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b6c:	2304      	movs	r3, #4
 8010b6e:	e03a      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b74:	f003 0301 	and.w	r3, r3, #1
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d004      	beq.n	8010b86 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b82:	2301      	movs	r3, #1
 8010b84:	e02f      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f7ff fbae 	bl	80102e8 <SDIO_GetCommandResponse>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	461a      	mov	r2, r3
 8010b90:	7afb      	ldrb	r3, [r7, #11]
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d001      	beq.n	8010b9a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b96:	2301      	movs	r3, #1
 8010b98:	e025      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	22c5      	movs	r2, #197	; 0xc5
 8010b9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7ff fbad 	bl	8010302 <SDIO_GetResponse>
 8010ba8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d106      	bne.n	8010bc2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	0c1b      	lsrs	r3, r3, #16
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	e011      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bd0:	e009      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010be0:	e001      	b.n	8010be6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	371c      	adds	r7, #28
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd90      	pop	{r4, r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	20000000 	.word	0x20000000
 8010bf4:	10624dd3 	.word	0x10624dd3

08010bf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010bf8:	b490      	push	{r4, r7}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c00:	4b21      	ldr	r3, [pc, #132]	; (8010c88 <SDMMC_GetCmdResp7+0x90>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	4a21      	ldr	r2, [pc, #132]	; (8010c8c <SDMMC_GetCmdResp7+0x94>)
 8010c06:	fba2 2303 	umull	r2, r3, r2, r3
 8010c0a:	0a5b      	lsrs	r3, r3, #9
 8010c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c14:	4623      	mov	r3, r4
 8010c16:	1e5c      	subs	r4, r3, #1
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d102      	bne.n	8010c22 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c20:	e02c      	b.n	8010c7c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d0f0      	beq.n	8010c14 <SDMMC_GetCmdResp7+0x1c>
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1eb      	bne.n	8010c14 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c40:	f003 0304 	and.w	r3, r3, #4
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d004      	beq.n	8010c52 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2204      	movs	r2, #4
 8010c4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c4e:	2304      	movs	r3, #4
 8010c50:	e014      	b.n	8010c7c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d004      	beq.n	8010c68 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c64:	2301      	movs	r3, #1
 8010c66:	e009      	b.n	8010c7c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2240      	movs	r2, #64	; 0x40
 8010c78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c7a:	2300      	movs	r3, #0
  
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3710      	adds	r7, #16
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bc90      	pop	{r4, r7}
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	20000000 	.word	0x20000000
 8010c8c:	10624dd3 	.word	0x10624dd3

08010c90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c94:	4904      	ldr	r1, [pc, #16]	; (8010ca8 <MX_FATFS_Init+0x18>)
 8010c96:	4805      	ldr	r0, [pc, #20]	; (8010cac <MX_FATFS_Init+0x1c>)
 8010c98:	f003 fb9c 	bl	80143d4 <FATFS_LinkDriver>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	4b03      	ldr	r3, [pc, #12]	; (8010cb0 <MX_FATFS_Init+0x20>)
 8010ca2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ca4:	bf00      	nop
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20043cc8 	.word	0x20043cc8
 8010cac:	0801a360 	.word	0x0801a360
 8010cb0:	20043cc4 	.word	0x20043cc4

08010cb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cbe:	f000 f896 	bl	8010dee <BSP_SD_IsDetected>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d001      	beq.n	8010ccc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010cc8:	2301      	movs	r3, #1
 8010cca:	e012      	b.n	8010cf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010ccc:	480b      	ldr	r0, [pc, #44]	; (8010cfc <BSP_SD_Init+0x48>)
 8010cce:	f7fb ffa5 	bl	800cc1c <HAL_SD_Init>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010cd6:	79fb      	ldrb	r3, [r7, #7]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d109      	bne.n	8010cf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010ce0:	4806      	ldr	r0, [pc, #24]	; (8010cfc <BSP_SD_Init+0x48>)
 8010ce2:	f7fc fd4f 	bl	800d784 <HAL_SD_ConfigWideBusOperation>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010cec:	2301      	movs	r3, #1
 8010cee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	20043ac4 	.word	0x20043ac4

08010d00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b086      	sub	sp, #24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	68f9      	ldr	r1, [r7, #12]
 8010d16:	4806      	ldr	r0, [pc, #24]	; (8010d30 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010d18:	f7fc f810 	bl	800cd3c <HAL_SD_ReadBlocks_DMA>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d22:	2301      	movs	r3, #1
 8010d24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3718      	adds	r7, #24
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	20043ac4 	.word	0x20043ac4

08010d34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d40:	2300      	movs	r3, #0
 8010d42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	68ba      	ldr	r2, [r7, #8]
 8010d48:	68f9      	ldr	r1, [r7, #12]
 8010d4a:	4806      	ldr	r0, [pc, #24]	; (8010d64 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d4c:	f7fc f8de 	bl	800cf0c <HAL_SD_WriteBlocks_DMA>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d001      	beq.n	8010d5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d56:	2301      	movs	r3, #1
 8010d58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3718      	adds	r7, #24
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	20043ac4 	.word	0x20043ac4

08010d68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d6c:	4805      	ldr	r0, [pc, #20]	; (8010d84 <BSP_SD_GetCardState+0x1c>)
 8010d6e:	f7fc fd85 	bl	800d87c <HAL_SD_GetCardState>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b04      	cmp	r3, #4
 8010d76:	bf14      	ite	ne
 8010d78:	2301      	movne	r3, #1
 8010d7a:	2300      	moveq	r3, #0
 8010d7c:	b2db      	uxtb	r3, r3
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	20043ac4 	.word	0x20043ac4

08010d88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010d90:	6879      	ldr	r1, [r7, #4]
 8010d92:	4803      	ldr	r0, [pc, #12]	; (8010da0 <BSP_SD_GetCardInfo+0x18>)
 8010d94:	f7fc fcca 	bl	800d72c <HAL_SD_GetCardInfo>
}
 8010d98:	bf00      	nop
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	20043ac4 	.word	0x20043ac4

08010da4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010dac:	f000 f818 	bl	8010de0 <BSP_SD_AbortCallback>
}
 8010db0:	bf00      	nop
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010dc0:	f000 f9a8 	bl	8011114 <BSP_SD_WriteCpltCallback>
}
 8010dc4:	bf00      	nop
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010dd4:	f000 f9aa 	bl	801112c <BSP_SD_ReadCpltCallback>
}
 8010dd8:	bf00      	nop
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010de0:	b480      	push	{r7}
 8010de2:	af00      	add	r7, sp, #0

}
 8010de4:	bf00      	nop
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr

08010dee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b082      	sub	sp, #8
 8010df2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010df4:	2301      	movs	r3, #1
 8010df6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010df8:	f000 f80c 	bl	8010e14 <BSP_PlatformIsDetected>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d101      	bne.n	8010e06 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010e02:	2300      	movs	r3, #0
 8010e04:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010e06:	79fb      	ldrb	r3, [r7, #7]
 8010e08:	b2db      	uxtb	r3, r3
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3708      	adds	r7, #8
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
	...

08010e14 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010e22:	4806      	ldr	r0, [pc, #24]	; (8010e3c <BSP_PlatformIsDetected+0x28>)
 8010e24:	f7fa f87e 	bl	800af24 <HAL_GPIO_ReadPin>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d001      	beq.n	8010e32 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e32:	79fb      	ldrb	r3, [r7, #7]
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	40020000 	.word	0x40020000

08010e40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e48:	f7f8 fde2 	bl	8009a10 <HAL_GetTick>
 8010e4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e4e:	e006      	b.n	8010e5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e50:	f7ff ff8a 	bl	8010d68 <BSP_SD_GetCardState>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d101      	bne.n	8010e5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e009      	b.n	8010e72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e5e:	f7f8 fdd7 	bl	8009a10 <HAL_GetTick>
 8010e62:	4602      	mov	r2, r0
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d8f0      	bhi.n	8010e50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
	...

08010e7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	4603      	mov	r3, r0
 8010e84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e86:	4b0b      	ldr	r3, [pc, #44]	; (8010eb4 <SD_CheckStatus+0x38>)
 8010e88:	2201      	movs	r2, #1
 8010e8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e8c:	f7ff ff6c 	bl	8010d68 <BSP_SD_GetCardState>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d107      	bne.n	8010ea6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e96:	4b07      	ldr	r3, [pc, #28]	; (8010eb4 <SD_CheckStatus+0x38>)
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	f023 0301 	bic.w	r3, r3, #1
 8010ea0:	b2da      	uxtb	r2, r3
 8010ea2:	4b04      	ldr	r3, [pc, #16]	; (8010eb4 <SD_CheckStatus+0x38>)
 8010ea4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010ea6:	4b03      	ldr	r3, [pc, #12]	; (8010eb4 <SD_CheckStatus+0x38>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	b2db      	uxtb	r3, r3
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	20000009 	.word	0x20000009

08010eb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010ec2:	f7ff fef7 	bl	8010cb4 <BSP_SD_Init>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d107      	bne.n	8010edc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff ffd4 	bl	8010e7c <SD_CheckStatus>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	4b04      	ldr	r3, [pc, #16]	; (8010eec <SD_initialize+0x34>)
 8010eda:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010edc:	4b03      	ldr	r3, [pc, #12]	; (8010eec <SD_initialize+0x34>)
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	b2db      	uxtb	r3, r3
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	20000009 	.word	0x20000009

08010ef0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010efa:	79fb      	ldrb	r3, [r7, #7]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7ff ffbd 	bl	8010e7c <SD_CheckStatus>
 8010f02:	4603      	mov	r3, r0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b086      	sub	sp, #24
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60b9      	str	r1, [r7, #8]
 8010f14:	607a      	str	r2, [r7, #4]
 8010f16:	603b      	str	r3, [r7, #0]
 8010f18:	4603      	mov	r3, r0
 8010f1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f20:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f24:	f7ff ff8c 	bl	8010e40 <SD_CheckStatusWithTimeout>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	da01      	bge.n	8010f32 <SD_read+0x26>
  {
    return res;
 8010f2e:	7dfb      	ldrb	r3, [r7, #23]
 8010f30:	e03b      	b.n	8010faa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010f32:	683a      	ldr	r2, [r7, #0]
 8010f34:	6879      	ldr	r1, [r7, #4]
 8010f36:	68b8      	ldr	r0, [r7, #8]
 8010f38:	f7ff fee2 	bl	8010d00 <BSP_SD_ReadBlocks_DMA>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d132      	bne.n	8010fa8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f42:	4b1c      	ldr	r3, [pc, #112]	; (8010fb4 <SD_read+0xa8>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f48:	f7f8 fd62 	bl	8009a10 <HAL_GetTick>
 8010f4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f4e:	bf00      	nop
 8010f50:	4b18      	ldr	r3, [pc, #96]	; (8010fb4 <SD_read+0xa8>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d108      	bne.n	8010f6a <SD_read+0x5e>
 8010f58:	f7f8 fd5a 	bl	8009a10 <HAL_GetTick>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d9f2      	bls.n	8010f50 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010f6a:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <SD_read+0xa8>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d102      	bne.n	8010f78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	75fb      	strb	r3, [r7, #23]
 8010f76:	e017      	b.n	8010fa8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f78:	4b0e      	ldr	r3, [pc, #56]	; (8010fb4 <SD_read+0xa8>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f7e:	f7f8 fd47 	bl	8009a10 <HAL_GetTick>
 8010f82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f84:	e007      	b.n	8010f96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f86:	f7ff feef 	bl	8010d68 <BSP_SD_GetCardState>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d102      	bne.n	8010f96 <SD_read+0x8a>
          {
            res = RES_OK;
 8010f90:	2300      	movs	r3, #0
 8010f92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f94:	e008      	b.n	8010fa8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f96:	f7f8 fd3b 	bl	8009a10 <HAL_GetTick>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	1ad3      	subs	r3, r2, r3
 8010fa0:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d9ee      	bls.n	8010f86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3718      	adds	r7, #24
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20041360 	.word	0x20041360

08010fb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60b9      	str	r1, [r7, #8]
 8010fc0:	607a      	str	r2, [r7, #4]
 8010fc2:	603b      	str	r3, [r7, #0]
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010fcc:	4b24      	ldr	r3, [pc, #144]	; (8011060 <SD_write+0xa8>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010fd2:	f247 5030 	movw	r0, #30000	; 0x7530
 8010fd6:	f7ff ff33 	bl	8010e40 <SD_CheckStatusWithTimeout>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	da01      	bge.n	8010fe4 <SD_write+0x2c>
  {
    return res;
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
 8010fe2:	e038      	b.n	8011056 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fe4:	683a      	ldr	r2, [r7, #0]
 8010fe6:	6879      	ldr	r1, [r7, #4]
 8010fe8:	68b8      	ldr	r0, [r7, #8]
 8010fea:	f7ff fea3 	bl	8010d34 <BSP_SD_WriteBlocks_DMA>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d12f      	bne.n	8011054 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010ff4:	f7f8 fd0c 	bl	8009a10 <HAL_GetTick>
 8010ff8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010ffa:	bf00      	nop
 8010ffc:	4b18      	ldr	r3, [pc, #96]	; (8011060 <SD_write+0xa8>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d108      	bne.n	8011016 <SD_write+0x5e>
 8011004:	f7f8 fd04 	bl	8009a10 <HAL_GetTick>
 8011008:	4602      	mov	r2, r0
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	1ad3      	subs	r3, r2, r3
 801100e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011012:	4293      	cmp	r3, r2
 8011014:	d9f2      	bls.n	8010ffc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011016:	4b12      	ldr	r3, [pc, #72]	; (8011060 <SD_write+0xa8>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d102      	bne.n	8011024 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801101e:	2301      	movs	r3, #1
 8011020:	75fb      	strb	r3, [r7, #23]
 8011022:	e017      	b.n	8011054 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011024:	4b0e      	ldr	r3, [pc, #56]	; (8011060 <SD_write+0xa8>)
 8011026:	2200      	movs	r2, #0
 8011028:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801102a:	f7f8 fcf1 	bl	8009a10 <HAL_GetTick>
 801102e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011030:	e007      	b.n	8011042 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011032:	f7ff fe99 	bl	8010d68 <BSP_SD_GetCardState>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d102      	bne.n	8011042 <SD_write+0x8a>
          {
            res = RES_OK;
 801103c:	2300      	movs	r3, #0
 801103e:	75fb      	strb	r3, [r7, #23]
            break;
 8011040:	e008      	b.n	8011054 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011042:	f7f8 fce5 	bl	8009a10 <HAL_GetTick>
 8011046:	4602      	mov	r2, r0
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	1ad3      	subs	r3, r2, r3
 801104c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011050:	4293      	cmp	r3, r2
 8011052:	d9ee      	bls.n	8011032 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011054:	7dfb      	ldrb	r3, [r7, #23]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3718      	adds	r7, #24
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	2004135c 	.word	0x2004135c

08011064 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b08c      	sub	sp, #48	; 0x30
 8011068:	af00      	add	r7, sp, #0
 801106a:	4603      	mov	r3, r0
 801106c:	603a      	str	r2, [r7, #0]
 801106e:	71fb      	strb	r3, [r7, #7]
 8011070:	460b      	mov	r3, r1
 8011072:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801107a:	4b25      	ldr	r3, [pc, #148]	; (8011110 <SD_ioctl+0xac>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	b2db      	uxtb	r3, r3
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <SD_ioctl+0x28>
 8011088:	2303      	movs	r3, #3
 801108a:	e03c      	b.n	8011106 <SD_ioctl+0xa2>

  switch (cmd)
 801108c:	79bb      	ldrb	r3, [r7, #6]
 801108e:	2b03      	cmp	r3, #3
 8011090:	d834      	bhi.n	80110fc <SD_ioctl+0x98>
 8011092:	a201      	add	r2, pc, #4	; (adr r2, 8011098 <SD_ioctl+0x34>)
 8011094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011098:	080110a9 	.word	0x080110a9
 801109c:	080110b1 	.word	0x080110b1
 80110a0:	080110c9 	.word	0x080110c9
 80110a4:	080110e3 	.word	0x080110e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80110a8:	2300      	movs	r3, #0
 80110aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110ae:	e028      	b.n	8011102 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80110b0:	f107 030c 	add.w	r3, r7, #12
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff fe67 	bl	8010d88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80110ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110c0:	2300      	movs	r3, #0
 80110c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110c6:	e01c      	b.n	8011102 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110c8:	f107 030c 	add.w	r3, r7, #12
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7ff fe5b 	bl	8010d88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80110d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d4:	b29a      	uxth	r2, r3
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80110da:	2300      	movs	r3, #0
 80110dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110e0:	e00f      	b.n	8011102 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110e2:	f107 030c 	add.w	r3, r7, #12
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7ff fe4e 	bl	8010d88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	0a5a      	lsrs	r2, r3, #9
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110fa:	e002      	b.n	8011102 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110fc:	2304      	movs	r3, #4
 80110fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011106:	4618      	mov	r0, r3
 8011108:	3730      	adds	r7, #48	; 0x30
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000009 	.word	0x20000009

08011114 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011114:	b480      	push	{r7}
 8011116:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <BSP_SD_WriteCpltCallback+0x14>)
 801111a:	2201      	movs	r2, #1
 801111c:	601a      	str	r2, [r3, #0]
}
 801111e:	bf00      	nop
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	2004135c 	.word	0x2004135c

0801112c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801112c:	b480      	push	{r7}
 801112e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011130:	4b03      	ldr	r3, [pc, #12]	; (8011140 <BSP_SD_ReadCpltCallback+0x14>)
 8011132:	2201      	movs	r2, #1
 8011134:	601a      	str	r2, [r3, #0]
}
 8011136:	bf00      	nop
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	20041360 	.word	0x20041360

08011144 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	4603      	mov	r3, r0
 801114c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801114e:	79fb      	ldrb	r3, [r7, #7]
 8011150:	4a08      	ldr	r2, [pc, #32]	; (8011174 <disk_status+0x30>)
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	4413      	add	r3, r2
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	79fa      	ldrb	r2, [r7, #7]
 801115c:	4905      	ldr	r1, [pc, #20]	; (8011174 <disk_status+0x30>)
 801115e:	440a      	add	r2, r1
 8011160:	7a12      	ldrb	r2, [r2, #8]
 8011162:	4610      	mov	r0, r2
 8011164:	4798      	blx	r3
 8011166:	4603      	mov	r3, r0
 8011168:	73fb      	strb	r3, [r7, #15]
  return stat;
 801116a:	7bfb      	ldrb	r3, [r7, #15]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3710      	adds	r7, #16
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	2004138c 	.word	0x2004138c

08011178 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	4603      	mov	r3, r0
 8011180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011182:	2300      	movs	r3, #0
 8011184:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011186:	79fb      	ldrb	r3, [r7, #7]
 8011188:	4a0d      	ldr	r2, [pc, #52]	; (80111c0 <disk_initialize+0x48>)
 801118a:	5cd3      	ldrb	r3, [r2, r3]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d111      	bne.n	80111b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011190:	79fb      	ldrb	r3, [r7, #7]
 8011192:	4a0b      	ldr	r2, [pc, #44]	; (80111c0 <disk_initialize+0x48>)
 8011194:	2101      	movs	r1, #1
 8011196:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011198:	79fb      	ldrb	r3, [r7, #7]
 801119a:	4a09      	ldr	r2, [pc, #36]	; (80111c0 <disk_initialize+0x48>)
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	79fa      	ldrb	r2, [r7, #7]
 80111a6:	4906      	ldr	r1, [pc, #24]	; (80111c0 <disk_initialize+0x48>)
 80111a8:	440a      	add	r2, r1
 80111aa:	7a12      	ldrb	r2, [r2, #8]
 80111ac:	4610      	mov	r0, r2
 80111ae:	4798      	blx	r3
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	2004138c 	.word	0x2004138c

080111c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80111c4:	b590      	push	{r4, r7, lr}
 80111c6:	b087      	sub	sp, #28
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60b9      	str	r1, [r7, #8]
 80111cc:	607a      	str	r2, [r7, #4]
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	4603      	mov	r3, r0
 80111d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80111d4:	7bfb      	ldrb	r3, [r7, #15]
 80111d6:	4a0a      	ldr	r2, [pc, #40]	; (8011200 <disk_read+0x3c>)
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4413      	add	r3, r2
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	689c      	ldr	r4, [r3, #8]
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	4a07      	ldr	r2, [pc, #28]	; (8011200 <disk_read+0x3c>)
 80111e4:	4413      	add	r3, r2
 80111e6:	7a18      	ldrb	r0, [r3, #8]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	68b9      	ldr	r1, [r7, #8]
 80111ee:	47a0      	blx	r4
 80111f0:	4603      	mov	r3, r0
 80111f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80111f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	371c      	adds	r7, #28
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd90      	pop	{r4, r7, pc}
 80111fe:	bf00      	nop
 8011200:	2004138c 	.word	0x2004138c

08011204 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011204:	b590      	push	{r4, r7, lr}
 8011206:	b087      	sub	sp, #28
 8011208:	af00      	add	r7, sp, #0
 801120a:	60b9      	str	r1, [r7, #8]
 801120c:	607a      	str	r2, [r7, #4]
 801120e:	603b      	str	r3, [r7, #0]
 8011210:	4603      	mov	r3, r0
 8011212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	4a0a      	ldr	r2, [pc, #40]	; (8011240 <disk_write+0x3c>)
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	4413      	add	r3, r2
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	68dc      	ldr	r4, [r3, #12]
 8011220:	7bfb      	ldrb	r3, [r7, #15]
 8011222:	4a07      	ldr	r2, [pc, #28]	; (8011240 <disk_write+0x3c>)
 8011224:	4413      	add	r3, r2
 8011226:	7a18      	ldrb	r0, [r3, #8]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	68b9      	ldr	r1, [r7, #8]
 801122e:	47a0      	blx	r4
 8011230:	4603      	mov	r3, r0
 8011232:	75fb      	strb	r3, [r7, #23]
  return res;
 8011234:	7dfb      	ldrb	r3, [r7, #23]
}
 8011236:	4618      	mov	r0, r3
 8011238:	371c      	adds	r7, #28
 801123a:	46bd      	mov	sp, r7
 801123c:	bd90      	pop	{r4, r7, pc}
 801123e:	bf00      	nop
 8011240:	2004138c 	.word	0x2004138c

08011244 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	4603      	mov	r3, r0
 801124c:	603a      	str	r2, [r7, #0]
 801124e:	71fb      	strb	r3, [r7, #7]
 8011250:	460b      	mov	r3, r1
 8011252:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011254:	79fb      	ldrb	r3, [r7, #7]
 8011256:	4a09      	ldr	r2, [pc, #36]	; (801127c <disk_ioctl+0x38>)
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	4413      	add	r3, r2
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	79fa      	ldrb	r2, [r7, #7]
 8011262:	4906      	ldr	r1, [pc, #24]	; (801127c <disk_ioctl+0x38>)
 8011264:	440a      	add	r2, r1
 8011266:	7a10      	ldrb	r0, [r2, #8]
 8011268:	79b9      	ldrb	r1, [r7, #6]
 801126a:	683a      	ldr	r2, [r7, #0]
 801126c:	4798      	blx	r3
 801126e:	4603      	mov	r3, r0
 8011270:	73fb      	strb	r3, [r7, #15]
  return res;
 8011272:	7bfb      	ldrb	r3, [r7, #15]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	2004138c 	.word	0x2004138c

08011280 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	3301      	adds	r3, #1
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011290:	89fb      	ldrh	r3, [r7, #14]
 8011292:	021b      	lsls	r3, r3, #8
 8011294:	b21a      	sxth	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	b21b      	sxth	r3, r3
 801129c:	4313      	orrs	r3, r2
 801129e:	b21b      	sxth	r3, r3
 80112a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80112a2:	89fb      	ldrh	r3, [r7, #14]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	3303      	adds	r3, #3
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	021b      	lsls	r3, r3, #8
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	3202      	adds	r2, #2
 80112c8:	7812      	ldrb	r2, [r2, #0]
 80112ca:	4313      	orrs	r3, r2
 80112cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	021b      	lsls	r3, r3, #8
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	3201      	adds	r2, #1
 80112d6:	7812      	ldrb	r2, [r2, #0]
 80112d8:	4313      	orrs	r3, r2
 80112da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	021b      	lsls	r3, r3, #8
 80112e0:	687a      	ldr	r2, [r7, #4]
 80112e2:	7812      	ldrb	r2, [r2, #0]
 80112e4:	4313      	orrs	r3, r2
 80112e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80112e8:	68fb      	ldr	r3, [r7, #12]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3714      	adds	r7, #20
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr

080112f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80112f6:	b480      	push	{r7}
 80112f8:	b083      	sub	sp, #12
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
 80112fe:	460b      	mov	r3, r1
 8011300:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	1c5a      	adds	r2, r3, #1
 8011306:	607a      	str	r2, [r7, #4]
 8011308:	887a      	ldrh	r2, [r7, #2]
 801130a:	b2d2      	uxtb	r2, r2
 801130c:	701a      	strb	r2, [r3, #0]
 801130e:	887b      	ldrh	r3, [r7, #2]
 8011310:	0a1b      	lsrs	r3, r3, #8
 8011312:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	1c5a      	adds	r2, r3, #1
 8011318:	607a      	str	r2, [r7, #4]
 801131a:	887a      	ldrh	r2, [r7, #2]
 801131c:	b2d2      	uxtb	r2, r2
 801131e:	701a      	strb	r2, [r3, #0]
}
 8011320:	bf00      	nop
 8011322:	370c      	adds	r7, #12
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	1c5a      	adds	r2, r3, #1
 801133a:	607a      	str	r2, [r7, #4]
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	b2d2      	uxtb	r2, r2
 8011340:	701a      	strb	r2, [r3, #0]
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	0a1b      	lsrs	r3, r3, #8
 8011346:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	1c5a      	adds	r2, r3, #1
 801134c:	607a      	str	r2, [r7, #4]
 801134e:	683a      	ldr	r2, [r7, #0]
 8011350:	b2d2      	uxtb	r2, r2
 8011352:	701a      	strb	r2, [r3, #0]
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	0a1b      	lsrs	r3, r3, #8
 8011358:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	1c5a      	adds	r2, r3, #1
 801135e:	607a      	str	r2, [r7, #4]
 8011360:	683a      	ldr	r2, [r7, #0]
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	701a      	strb	r2, [r3, #0]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	0a1b      	lsrs	r3, r3, #8
 801136a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	607a      	str	r2, [r7, #4]
 8011372:	683a      	ldr	r2, [r7, #0]
 8011374:	b2d2      	uxtb	r2, r2
 8011376:	701a      	strb	r2, [r3, #0]
}
 8011378:	bf00      	nop
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011384:	b480      	push	{r7}
 8011386:	b087      	sub	sp, #28
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00d      	beq.n	80113ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801139e:	693a      	ldr	r2, [r7, #16]
 80113a0:	1c53      	adds	r3, r2, #1
 80113a2:	613b      	str	r3, [r7, #16]
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	1c59      	adds	r1, r3, #1
 80113a8:	6179      	str	r1, [r7, #20]
 80113aa:	7812      	ldrb	r2, [r2, #0]
 80113ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	607b      	str	r3, [r7, #4]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d1f1      	bne.n	801139e <mem_cpy+0x1a>
	}
}
 80113ba:	bf00      	nop
 80113bc:	371c      	adds	r7, #28
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80113c6:	b480      	push	{r7}
 80113c8:	b087      	sub	sp, #28
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	60f8      	str	r0, [r7, #12]
 80113ce:	60b9      	str	r1, [r7, #8]
 80113d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	617a      	str	r2, [r7, #20]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	b2d2      	uxtb	r2, r2
 80113e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	607b      	str	r3, [r7, #4]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1f3      	bne.n	80113d6 <mem_set+0x10>
}
 80113ee:	bf00      	nop
 80113f0:	371c      	adds	r7, #28
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr

080113fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80113fa:	b480      	push	{r7}
 80113fc:	b089      	sub	sp, #36	; 0x24
 80113fe:	af00      	add	r7, sp, #0
 8011400:	60f8      	str	r0, [r7, #12]
 8011402:	60b9      	str	r1, [r7, #8]
 8011404:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	61fb      	str	r3, [r7, #28]
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801140e:	2300      	movs	r3, #0
 8011410:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	1c5a      	adds	r2, r3, #1
 8011416:	61fa      	str	r2, [r7, #28]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	4619      	mov	r1, r3
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	61ba      	str	r2, [r7, #24]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	1acb      	subs	r3, r1, r3
 8011426:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	3b01      	subs	r3, #1
 801142c:	607b      	str	r3, [r7, #4]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d002      	beq.n	801143a <mem_cmp+0x40>
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0eb      	beq.n	8011412 <mem_cmp+0x18>

	return r;
 801143a:	697b      	ldr	r3, [r7, #20]
}
 801143c:	4618      	mov	r0, r3
 801143e:	3724      	adds	r7, #36	; 0x24
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011452:	e002      	b.n	801145a <chk_chr+0x12>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	3301      	adds	r3, #1
 8011458:	607b      	str	r3, [r7, #4]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d005      	beq.n	801146e <chk_chr+0x26>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	461a      	mov	r2, r3
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	4293      	cmp	r3, r2
 801146c:	d1f2      	bne.n	8011454 <chk_chr+0xc>
	return *str;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	781b      	ldrb	r3, [r3, #0]
}
 8011472:	4618      	mov	r0, r3
 8011474:	370c      	adds	r7, #12
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
	...

08011480 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801148a:	2300      	movs	r3, #0
 801148c:	60bb      	str	r3, [r7, #8]
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	60fb      	str	r3, [r7, #12]
 8011492:	e029      	b.n	80114e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011494:	4a27      	ldr	r2, [pc, #156]	; (8011534 <chk_lock+0xb4>)
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	011b      	lsls	r3, r3, #4
 801149a:	4413      	add	r3, r2
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d01d      	beq.n	80114de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114a2:	4a24      	ldr	r2, [pc, #144]	; (8011534 <chk_lock+0xb4>)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	4413      	add	r3, r2
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d116      	bne.n	80114e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80114b4:	4a1f      	ldr	r2, [pc, #124]	; (8011534 <chk_lock+0xb4>)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	011b      	lsls	r3, r3, #4
 80114ba:	4413      	add	r3, r2
 80114bc:	3304      	adds	r3, #4
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d10c      	bne.n	80114e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80114c8:	4a1a      	ldr	r2, [pc, #104]	; (8011534 <chk_lock+0xb4>)
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	011b      	lsls	r3, r3, #4
 80114ce:	4413      	add	r3, r2
 80114d0:	3308      	adds	r3, #8
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80114d8:	429a      	cmp	r2, r3
 80114da:	d102      	bne.n	80114e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80114dc:	e007      	b.n	80114ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80114de:	2301      	movs	r3, #1
 80114e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	3301      	adds	r3, #1
 80114e6:	60fb      	str	r3, [r7, #12]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d9d2      	bls.n	8011494 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2b02      	cmp	r3, #2
 80114f2:	d109      	bne.n	8011508 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d102      	bne.n	8011500 <chk_lock+0x80>
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d101      	bne.n	8011504 <chk_lock+0x84>
 8011500:	2300      	movs	r3, #0
 8011502:	e010      	b.n	8011526 <chk_lock+0xa6>
 8011504:	2312      	movs	r3, #18
 8011506:	e00e      	b.n	8011526 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d108      	bne.n	8011520 <chk_lock+0xa0>
 801150e:	4a09      	ldr	r2, [pc, #36]	; (8011534 <chk_lock+0xb4>)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	4413      	add	r3, r2
 8011516:	330c      	adds	r3, #12
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801151e:	d101      	bne.n	8011524 <chk_lock+0xa4>
 8011520:	2310      	movs	r3, #16
 8011522:	e000      	b.n	8011526 <chk_lock+0xa6>
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	2004136c 	.word	0x2004136c

08011538 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801153e:	2300      	movs	r3, #0
 8011540:	607b      	str	r3, [r7, #4]
 8011542:	e002      	b.n	801154a <enq_lock+0x12>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	3301      	adds	r3, #1
 8011548:	607b      	str	r3, [r7, #4]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b01      	cmp	r3, #1
 801154e:	d806      	bhi.n	801155e <enq_lock+0x26>
 8011550:	4a09      	ldr	r2, [pc, #36]	; (8011578 <enq_lock+0x40>)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	011b      	lsls	r3, r3, #4
 8011556:	4413      	add	r3, r2
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d1f2      	bne.n	8011544 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2b02      	cmp	r3, #2
 8011562:	bf14      	ite	ne
 8011564:	2301      	movne	r3, #1
 8011566:	2300      	moveq	r3, #0
 8011568:	b2db      	uxtb	r3, r3
}
 801156a:	4618      	mov	r0, r3
 801156c:	370c      	adds	r7, #12
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	2004136c 	.word	0x2004136c

0801157c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011586:	2300      	movs	r3, #0
 8011588:	60fb      	str	r3, [r7, #12]
 801158a:	e01f      	b.n	80115cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801158c:	4a41      	ldr	r2, [pc, #260]	; (8011694 <inc_lock+0x118>)
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	011b      	lsls	r3, r3, #4
 8011592:	4413      	add	r3, r2
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	429a      	cmp	r2, r3
 801159c:	d113      	bne.n	80115c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801159e:	4a3d      	ldr	r2, [pc, #244]	; (8011694 <inc_lock+0x118>)
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	011b      	lsls	r3, r3, #4
 80115a4:	4413      	add	r3, r2
 80115a6:	3304      	adds	r3, #4
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d109      	bne.n	80115c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80115b2:	4a38      	ldr	r2, [pc, #224]	; (8011694 <inc_lock+0x118>)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	011b      	lsls	r3, r3, #4
 80115b8:	4413      	add	r3, r2
 80115ba:	3308      	adds	r3, #8
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d006      	beq.n	80115d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	3301      	adds	r3, #1
 80115ca:	60fb      	str	r3, [r7, #12]
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d9dc      	bls.n	801158c <inc_lock+0x10>
 80115d2:	e000      	b.n	80115d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80115d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2b02      	cmp	r3, #2
 80115da:	d132      	bne.n	8011642 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80115dc:	2300      	movs	r3, #0
 80115de:	60fb      	str	r3, [r7, #12]
 80115e0:	e002      	b.n	80115e8 <inc_lock+0x6c>
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	3301      	adds	r3, #1
 80115e6:	60fb      	str	r3, [r7, #12]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	d806      	bhi.n	80115fc <inc_lock+0x80>
 80115ee:	4a29      	ldr	r2, [pc, #164]	; (8011694 <inc_lock+0x118>)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	011b      	lsls	r3, r3, #4
 80115f4:	4413      	add	r3, r2
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1f2      	bne.n	80115e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2b02      	cmp	r3, #2
 8011600:	d101      	bne.n	8011606 <inc_lock+0x8a>
 8011602:	2300      	movs	r3, #0
 8011604:	e040      	b.n	8011688 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	4922      	ldr	r1, [pc, #136]	; (8011694 <inc_lock+0x118>)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	011b      	lsls	r3, r3, #4
 8011610:	440b      	add	r3, r1
 8011612:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	689a      	ldr	r2, [r3, #8]
 8011618:	491e      	ldr	r1, [pc, #120]	; (8011694 <inc_lock+0x118>)
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	011b      	lsls	r3, r3, #4
 801161e:	440b      	add	r3, r1
 8011620:	3304      	adds	r3, #4
 8011622:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	695a      	ldr	r2, [r3, #20]
 8011628:	491a      	ldr	r1, [pc, #104]	; (8011694 <inc_lock+0x118>)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	011b      	lsls	r3, r3, #4
 801162e:	440b      	add	r3, r1
 8011630:	3308      	adds	r3, #8
 8011632:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011634:	4a17      	ldr	r2, [pc, #92]	; (8011694 <inc_lock+0x118>)
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	011b      	lsls	r3, r3, #4
 801163a:	4413      	add	r3, r2
 801163c:	330c      	adds	r3, #12
 801163e:	2200      	movs	r2, #0
 8011640:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d009      	beq.n	801165c <inc_lock+0xe0>
 8011648:	4a12      	ldr	r2, [pc, #72]	; (8011694 <inc_lock+0x118>)
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	011b      	lsls	r3, r3, #4
 801164e:	4413      	add	r3, r2
 8011650:	330c      	adds	r3, #12
 8011652:	881b      	ldrh	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <inc_lock+0xe0>
 8011658:	2300      	movs	r3, #0
 801165a:	e015      	b.n	8011688 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d108      	bne.n	8011674 <inc_lock+0xf8>
 8011662:	4a0c      	ldr	r2, [pc, #48]	; (8011694 <inc_lock+0x118>)
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	011b      	lsls	r3, r3, #4
 8011668:	4413      	add	r3, r2
 801166a:	330c      	adds	r3, #12
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	3301      	adds	r3, #1
 8011670:	b29a      	uxth	r2, r3
 8011672:	e001      	b.n	8011678 <inc_lock+0xfc>
 8011674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011678:	4906      	ldr	r1, [pc, #24]	; (8011694 <inc_lock+0x118>)
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	011b      	lsls	r3, r3, #4
 801167e:	440b      	add	r3, r1
 8011680:	330c      	adds	r3, #12
 8011682:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	3301      	adds	r3, #1
}
 8011688:	4618      	mov	r0, r3
 801168a:	3714      	adds	r7, #20
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr
 8011694:	2004136c 	.word	0x2004136c

08011698 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	607b      	str	r3, [r7, #4]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d825      	bhi.n	80116f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80116ac:	4a17      	ldr	r2, [pc, #92]	; (801170c <dec_lock+0x74>)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	011b      	lsls	r3, r3, #4
 80116b2:	4413      	add	r3, r2
 80116b4:	330c      	adds	r3, #12
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80116ba:	89fb      	ldrh	r3, [r7, #14]
 80116bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116c0:	d101      	bne.n	80116c6 <dec_lock+0x2e>
 80116c2:	2300      	movs	r3, #0
 80116c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80116c6:	89fb      	ldrh	r3, [r7, #14]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <dec_lock+0x3a>
 80116cc:	89fb      	ldrh	r3, [r7, #14]
 80116ce:	3b01      	subs	r3, #1
 80116d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80116d2:	4a0e      	ldr	r2, [pc, #56]	; (801170c <dec_lock+0x74>)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	011b      	lsls	r3, r3, #4
 80116d8:	4413      	add	r3, r2
 80116da:	330c      	adds	r3, #12
 80116dc:	89fa      	ldrh	r2, [r7, #14]
 80116de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80116e0:	89fb      	ldrh	r3, [r7, #14]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d105      	bne.n	80116f2 <dec_lock+0x5a>
 80116e6:	4a09      	ldr	r2, [pc, #36]	; (801170c <dec_lock+0x74>)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	011b      	lsls	r3, r3, #4
 80116ec:	4413      	add	r3, r2
 80116ee:	2200      	movs	r2, #0
 80116f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80116f2:	2300      	movs	r3, #0
 80116f4:	737b      	strb	r3, [r7, #13]
 80116f6:	e001      	b.n	80116fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80116f8:	2302      	movs	r3, #2
 80116fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80116fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3714      	adds	r7, #20
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
 801170a:	bf00      	nop
 801170c:	2004136c 	.word	0x2004136c

08011710 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011718:	2300      	movs	r3, #0
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	e010      	b.n	8011740 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801171e:	4a0d      	ldr	r2, [pc, #52]	; (8011754 <clear_lock+0x44>)
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	011b      	lsls	r3, r3, #4
 8011724:	4413      	add	r3, r2
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	429a      	cmp	r2, r3
 801172c:	d105      	bne.n	801173a <clear_lock+0x2a>
 801172e:	4a09      	ldr	r2, [pc, #36]	; (8011754 <clear_lock+0x44>)
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	011b      	lsls	r3, r3, #4
 8011734:	4413      	add	r3, r2
 8011736:	2200      	movs	r2, #0
 8011738:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3301      	adds	r3, #1
 801173e:	60fb      	str	r3, [r7, #12]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d9eb      	bls.n	801171e <clear_lock+0xe>
	}
}
 8011746:	bf00      	nop
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	2004136c 	.word	0x2004136c

08011758 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b086      	sub	sp, #24
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011760:	2300      	movs	r3, #0
 8011762:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	78db      	ldrb	r3, [r3, #3]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d034      	beq.n	80117d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011770:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	7858      	ldrb	r0, [r3, #1]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801177c:	2301      	movs	r3, #1
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	f7ff fd40 	bl	8011204 <disk_write>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d002      	beq.n	8011790 <sync_window+0x38>
			res = FR_DISK_ERR;
 801178a:	2301      	movs	r3, #1
 801178c:	73fb      	strb	r3, [r7, #15]
 801178e:	e022      	b.n	80117d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801179a:	697a      	ldr	r2, [r7, #20]
 801179c:	1ad2      	subs	r2, r2, r3
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d217      	bcs.n	80117d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	789b      	ldrb	r3, [r3, #2]
 80117aa:	613b      	str	r3, [r7, #16]
 80117ac:	e010      	b.n	80117d0 <sync_window+0x78>
					wsect += fs->fsize;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a1b      	ldr	r3, [r3, #32]
 80117b2:	697a      	ldr	r2, [r7, #20]
 80117b4:	4413      	add	r3, r2
 80117b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7858      	ldrb	r0, [r3, #1]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117c2:	2301      	movs	r3, #1
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	f7ff fd1d 	bl	8011204 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	3b01      	subs	r3, #1
 80117ce:	613b      	str	r3, [r7, #16]
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d8eb      	bhi.n	80117ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80117d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3718      	adds	r7, #24
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117f2:	683a      	ldr	r2, [r7, #0]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d01b      	beq.n	8011830 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff ffad 	bl	8011758 <sync_window>
 80117fe:	4603      	mov	r3, r0
 8011800:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011802:	7bfb      	ldrb	r3, [r7, #15]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d113      	bne.n	8011830 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	7858      	ldrb	r0, [r3, #1]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011812:	2301      	movs	r3, #1
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	f7ff fcd5 	bl	80111c4 <disk_read>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d004      	beq.n	801182a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011820:	f04f 33ff 	mov.w	r3, #4294967295
 8011824:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011826:	2301      	movs	r3, #1
 8011828:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	683a      	ldr	r2, [r7, #0]
 801182e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011830:	7bfb      	ldrb	r3, [r7, #15]
}
 8011832:	4618      	mov	r0, r3
 8011834:	3710      	adds	r7, #16
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
	...

0801183c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff ff87 	bl	8011758 <sync_window>
 801184a:	4603      	mov	r3, r0
 801184c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801184e:	7bfb      	ldrb	r3, [r7, #15]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d159      	bne.n	8011908 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b03      	cmp	r3, #3
 801185a:	d149      	bne.n	80118f0 <sync_fs+0xb4>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	791b      	ldrb	r3, [r3, #4]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d145      	bne.n	80118f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	899b      	ldrh	r3, [r3, #12]
 801186e:	461a      	mov	r2, r3
 8011870:	2100      	movs	r1, #0
 8011872:	f7ff fda8 	bl	80113c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	3338      	adds	r3, #56	; 0x38
 801187a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801187e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff fd37 	bl	80112f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	3338      	adds	r3, #56	; 0x38
 801188c:	4921      	ldr	r1, [pc, #132]	; (8011914 <sync_fs+0xd8>)
 801188e:	4618      	mov	r0, r3
 8011890:	f7ff fd4c 	bl	801132c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	3338      	adds	r3, #56	; 0x38
 8011898:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801189c:	491e      	ldr	r1, [pc, #120]	; (8011918 <sync_fs+0xdc>)
 801189e:	4618      	mov	r0, r3
 80118a0:	f7ff fd44 	bl	801132c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3338      	adds	r3, #56	; 0x38
 80118a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	695b      	ldr	r3, [r3, #20]
 80118b0:	4619      	mov	r1, r3
 80118b2:	4610      	mov	r0, r2
 80118b4:	f7ff fd3a 	bl	801132c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	3338      	adds	r3, #56	; 0x38
 80118bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	691b      	ldr	r3, [r3, #16]
 80118c4:	4619      	mov	r1, r3
 80118c6:	4610      	mov	r0, r2
 80118c8:	f7ff fd30 	bl	801132c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d0:	1c5a      	adds	r2, r3, #1
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	7858      	ldrb	r0, [r3, #1]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118e4:	2301      	movs	r3, #1
 80118e6:	f7ff fc8d 	bl	8011204 <disk_write>
			fs->fsi_flag = 0;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	785b      	ldrb	r3, [r3, #1]
 80118f4:	2200      	movs	r2, #0
 80118f6:	2100      	movs	r1, #0
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7ff fca3 	bl	8011244 <disk_ioctl>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d001      	beq.n	8011908 <sync_fs+0xcc>
 8011904:	2301      	movs	r3, #1
 8011906:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011908:	7bfb      	ldrb	r3, [r7, #15]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	41615252 	.word	0x41615252
 8011918:	61417272 	.word	0x61417272

0801191c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	3b02      	subs	r3, #2
 801192a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	69db      	ldr	r3, [r3, #28]
 8011930:	3b02      	subs	r3, #2
 8011932:	683a      	ldr	r2, [r7, #0]
 8011934:	429a      	cmp	r2, r3
 8011936:	d301      	bcc.n	801193c <clust2sect+0x20>
 8011938:	2300      	movs	r3, #0
 801193a:	e008      	b.n	801194e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	895b      	ldrh	r3, [r3, #10]
 8011940:	461a      	mov	r2, r3
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	fb03 f202 	mul.w	r2, r3, r2
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801194c:	4413      	add	r3, r2
}
 801194e:	4618      	mov	r0, r3
 8011950:	370c      	adds	r7, #12
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr

0801195a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b086      	sub	sp, #24
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
 8011962:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	2b01      	cmp	r3, #1
 801196e:	d904      	bls.n	801197a <get_fat+0x20>
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	69db      	ldr	r3, [r3, #28]
 8011974:	683a      	ldr	r2, [r7, #0]
 8011976:	429a      	cmp	r2, r3
 8011978:	d302      	bcc.n	8011980 <get_fat+0x26>
		val = 1;	/* Internal error */
 801197a:	2301      	movs	r3, #1
 801197c:	617b      	str	r3, [r7, #20]
 801197e:	e0b7      	b.n	8011af0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011980:	f04f 33ff 	mov.w	r3, #4294967295
 8011984:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	2b02      	cmp	r3, #2
 801198c:	d05a      	beq.n	8011a44 <get_fat+0xea>
 801198e:	2b03      	cmp	r3, #3
 8011990:	d07d      	beq.n	8011a8e <get_fat+0x134>
 8011992:	2b01      	cmp	r3, #1
 8011994:	f040 80a2 	bne.w	8011adc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	60fb      	str	r3, [r7, #12]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	085b      	lsrs	r3, r3, #1
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	4413      	add	r3, r2
 80119a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	899b      	ldrh	r3, [r3, #12]
 80119ae:	4619      	mov	r1, r3
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80119b6:	4413      	add	r3, r2
 80119b8:	4619      	mov	r1, r3
 80119ba:	6938      	ldr	r0, [r7, #16]
 80119bc:	f7ff ff10 	bl	80117e0 <move_window>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f040 808d 	bne.w	8011ae2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	1c5a      	adds	r2, r3, #1
 80119cc:	60fa      	str	r2, [r7, #12]
 80119ce:	693a      	ldr	r2, [r7, #16]
 80119d0:	8992      	ldrh	r2, [r2, #12]
 80119d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80119d6:	fb02 f201 	mul.w	r2, r2, r1
 80119da:	1a9b      	subs	r3, r3, r2
 80119dc:	693a      	ldr	r2, [r7, #16]
 80119de:	4413      	add	r3, r2
 80119e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80119e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	899b      	ldrh	r3, [r3, #12]
 80119ee:	4619      	mov	r1, r3
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80119f6:	4413      	add	r3, r2
 80119f8:	4619      	mov	r1, r3
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f7ff fef0 	bl	80117e0 <move_window>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d16f      	bne.n	8011ae6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	899b      	ldrh	r3, [r3, #12]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a12:	fb02 f201 	mul.w	r2, r2, r1
 8011a16:	1a9b      	subs	r3, r3, r2
 8011a18:	693a      	ldr	r2, [r7, #16]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011a20:	021b      	lsls	r3, r3, #8
 8011a22:	461a      	mov	r2, r3
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	4313      	orrs	r3, r2
 8011a28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	f003 0301 	and.w	r3, r3, #1
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <get_fat+0xe0>
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	091b      	lsrs	r3, r3, #4
 8011a38:	e002      	b.n	8011a40 <get_fat+0xe6>
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a40:	617b      	str	r3, [r7, #20]
			break;
 8011a42:	e055      	b.n	8011af0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	899b      	ldrh	r3, [r3, #12]
 8011a4c:	085b      	lsrs	r3, r3, #1
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	4619      	mov	r1, r3
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a58:	4413      	add	r3, r2
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	6938      	ldr	r0, [r7, #16]
 8011a5e:	f7ff febf 	bl	80117e0 <move_window>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d140      	bne.n	8011aea <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	005b      	lsls	r3, r3, #1
 8011a72:	693a      	ldr	r2, [r7, #16]
 8011a74:	8992      	ldrh	r2, [r2, #12]
 8011a76:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a7a:	fb02 f200 	mul.w	r2, r2, r0
 8011a7e:	1a9b      	subs	r3, r3, r2
 8011a80:	440b      	add	r3, r1
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7ff fbfc 	bl	8011280 <ld_word>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	617b      	str	r3, [r7, #20]
			break;
 8011a8c:	e030      	b.n	8011af0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	899b      	ldrh	r3, [r3, #12]
 8011a96:	089b      	lsrs	r3, r3, #2
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	6938      	ldr	r0, [r7, #16]
 8011aa8:	f7ff fe9a 	bl	80117e0 <move_window>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d11d      	bne.n	8011aee <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	693a      	ldr	r2, [r7, #16]
 8011abe:	8992      	ldrh	r2, [r2, #12]
 8011ac0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ac4:	fb02 f200 	mul.w	r2, r2, r0
 8011ac8:	1a9b      	subs	r3, r3, r2
 8011aca:	440b      	add	r3, r1
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff fbef 	bl	80112b0 <ld_dword>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011ad8:	617b      	str	r3, [r7, #20]
			break;
 8011ada:	e009      	b.n	8011af0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011adc:	2301      	movs	r3, #1
 8011ade:	617b      	str	r3, [r7, #20]
 8011ae0:	e006      	b.n	8011af0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ae2:	bf00      	nop
 8011ae4:	e004      	b.n	8011af0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ae6:	bf00      	nop
 8011ae8:	e002      	b.n	8011af0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011aea:	bf00      	nop
 8011aec:	e000      	b.n	8011af0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011aee:	bf00      	nop
		}
	}

	return val;
 8011af0:	697b      	ldr	r3, [r7, #20]
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3718      	adds	r7, #24
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011afa:	b590      	push	{r4, r7, lr}
 8011afc:	b089      	sub	sp, #36	; 0x24
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	60f8      	str	r0, [r7, #12]
 8011b02:	60b9      	str	r1, [r7, #8]
 8011b04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011b06:	2302      	movs	r3, #2
 8011b08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	f240 8106 	bls.w	8011d1e <put_fat+0x224>
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	69db      	ldr	r3, [r3, #28]
 8011b16:	68ba      	ldr	r2, [r7, #8]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	f080 8100 	bcs.w	8011d1e <put_fat+0x224>
		switch (fs->fs_type) {
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b02      	cmp	r3, #2
 8011b24:	f000 8088 	beq.w	8011c38 <put_fat+0x13e>
 8011b28:	2b03      	cmp	r3, #3
 8011b2a:	f000 80b0 	beq.w	8011c8e <put_fat+0x194>
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	f040 80f5 	bne.w	8011d1e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	61bb      	str	r3, [r7, #24]
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	085b      	lsrs	r3, r3, #1
 8011b3c:	69ba      	ldr	r2, [r7, #24]
 8011b3e:	4413      	add	r3, r2
 8011b40:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	899b      	ldrh	r3, [r3, #12]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b52:	4413      	add	r3, r2
 8011b54:	4619      	mov	r1, r3
 8011b56:	68f8      	ldr	r0, [r7, #12]
 8011b58:	f7ff fe42 	bl	80117e0 <move_window>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b60:	7ffb      	ldrb	r3, [r7, #31]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f040 80d4 	bne.w	8011d10 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	1c5a      	adds	r2, r3, #1
 8011b72:	61ba      	str	r2, [r7, #24]
 8011b74:	68fa      	ldr	r2, [r7, #12]
 8011b76:	8992      	ldrh	r2, [r2, #12]
 8011b78:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b7c:	fb02 f200 	mul.w	r2, r2, r0
 8011b80:	1a9b      	subs	r3, r3, r2
 8011b82:	440b      	add	r3, r1
 8011b84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	f003 0301 	and.w	r3, r3, #1
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00d      	beq.n	8011bac <put_fat+0xb2>
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	b25b      	sxtb	r3, r3
 8011b96:	f003 030f 	and.w	r3, r3, #15
 8011b9a:	b25a      	sxtb	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	011b      	lsls	r3, r3, #4
 8011ba2:	b25b      	sxtb	r3, r3
 8011ba4:	4313      	orrs	r3, r2
 8011ba6:	b25b      	sxtb	r3, r3
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	e001      	b.n	8011bb0 <put_fat+0xb6>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	697a      	ldr	r2, [r7, #20]
 8011bb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	899b      	ldrh	r3, [r3, #12]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bca:	4413      	add	r3, r2
 8011bcc:	4619      	mov	r1, r3
 8011bce:	68f8      	ldr	r0, [r7, #12]
 8011bd0:	f7ff fe06 	bl	80117e0 <move_window>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bd8:	7ffb      	ldrb	r3, [r7, #31]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f040 809a 	bne.w	8011d14 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	461a      	mov	r2, r3
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bf2:	fb02 f200 	mul.w	r2, r2, r0
 8011bf6:	1a9b      	subs	r3, r3, r2
 8011bf8:	440b      	add	r3, r1
 8011bfa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	f003 0301 	and.w	r3, r3, #1
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d003      	beq.n	8011c0e <put_fat+0x114>
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	091b      	lsrs	r3, r3, #4
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	e00e      	b.n	8011c2c <put_fat+0x132>
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	b25b      	sxtb	r3, r3
 8011c14:	f023 030f 	bic.w	r3, r3, #15
 8011c18:	b25a      	sxtb	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	0a1b      	lsrs	r3, r3, #8
 8011c1e:	b25b      	sxtb	r3, r3
 8011c20:	f003 030f 	and.w	r3, r3, #15
 8011c24:	b25b      	sxtb	r3, r3
 8011c26:	4313      	orrs	r3, r2
 8011c28:	b25b      	sxtb	r3, r3
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2201      	movs	r2, #1
 8011c34:	70da      	strb	r2, [r3, #3]
			break;
 8011c36:	e072      	b.n	8011d1e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	899b      	ldrh	r3, [r3, #12]
 8011c40:	085b      	lsrs	r3, r3, #1
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	4619      	mov	r1, r3
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c4c:	4413      	add	r3, r2
 8011c4e:	4619      	mov	r1, r3
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7ff fdc5 	bl	80117e0 <move_window>
 8011c56:	4603      	mov	r3, r0
 8011c58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c5a:	7ffb      	ldrb	r3, [r7, #31]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d15b      	bne.n	8011d18 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	68fa      	ldr	r2, [r7, #12]
 8011c6c:	8992      	ldrh	r2, [r2, #12]
 8011c6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c72:	fb02 f200 	mul.w	r2, r2, r0
 8011c76:	1a9b      	subs	r3, r3, r2
 8011c78:	440b      	add	r3, r1
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	b292      	uxth	r2, r2
 8011c7e:	4611      	mov	r1, r2
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7ff fb38 	bl	80112f6 <st_word>
			fs->wflag = 1;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	70da      	strb	r2, [r3, #3]
			break;
 8011c8c:	e047      	b.n	8011d1e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	899b      	ldrh	r3, [r3, #12]
 8011c96:	089b      	lsrs	r3, r3, #2
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ca2:	4413      	add	r3, r2
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7ff fd9a 	bl	80117e0 <move_window>
 8011cac:	4603      	mov	r3, r0
 8011cae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cb0:	7ffb      	ldrb	r3, [r7, #31]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d132      	bne.n	8011d1c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	8992      	ldrh	r2, [r2, #12]
 8011cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cce:	fb02 f200 	mul.w	r2, r2, r0
 8011cd2:	1a9b      	subs	r3, r3, r2
 8011cd4:	440b      	add	r3, r1
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7ff faea 	bl	80112b0 <ld_dword>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011ce2:	4323      	orrs	r3, r4
 8011ce4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	8992      	ldrh	r2, [r2, #12]
 8011cf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cf8:	fb02 f200 	mul.w	r2, r2, r0
 8011cfc:	1a9b      	subs	r3, r3, r2
 8011cfe:	440b      	add	r3, r1
 8011d00:	6879      	ldr	r1, [r7, #4]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7ff fb12 	bl	801132c <st_dword>
			fs->wflag = 1;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	70da      	strb	r2, [r3, #3]
			break;
 8011d0e:	e006      	b.n	8011d1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011d10:	bf00      	nop
 8011d12:	e004      	b.n	8011d1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011d14:	bf00      	nop
 8011d16:	e002      	b.n	8011d1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011d18:	bf00      	nop
 8011d1a:	e000      	b.n	8011d1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011d1c:	bf00      	nop
		}
	}
	return res;
 8011d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3724      	adds	r7, #36	; 0x24
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd90      	pop	{r4, r7, pc}

08011d28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b088      	sub	sp, #32
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011d34:	2300      	movs	r3, #0
 8011d36:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d904      	bls.n	8011d4e <remove_chain+0x26>
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	69db      	ldr	r3, [r3, #28]
 8011d48:	68ba      	ldr	r2, [r7, #8]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d301      	bcc.n	8011d52 <remove_chain+0x2a>
 8011d4e:	2302      	movs	r3, #2
 8011d50:	e04b      	b.n	8011dea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d00c      	beq.n	8011d72 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011d58:	f04f 32ff 	mov.w	r2, #4294967295
 8011d5c:	6879      	ldr	r1, [r7, #4]
 8011d5e:	69b8      	ldr	r0, [r7, #24]
 8011d60:	f7ff fecb 	bl	8011afa <put_fat>
 8011d64:	4603      	mov	r3, r0
 8011d66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011d68:	7ffb      	ldrb	r3, [r7, #31]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <remove_chain+0x4a>
 8011d6e:	7ffb      	ldrb	r3, [r7, #31]
 8011d70:	e03b      	b.n	8011dea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011d72:	68b9      	ldr	r1, [r7, #8]
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f7ff fdf0 	bl	801195a <get_fat>
 8011d7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d031      	beq.n	8011de6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d101      	bne.n	8011d8c <remove_chain+0x64>
 8011d88:	2302      	movs	r3, #2
 8011d8a:	e02e      	b.n	8011dea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d92:	d101      	bne.n	8011d98 <remove_chain+0x70>
 8011d94:	2301      	movs	r3, #1
 8011d96:	e028      	b.n	8011dea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011d98:	2200      	movs	r2, #0
 8011d9a:	68b9      	ldr	r1, [r7, #8]
 8011d9c:	69b8      	ldr	r0, [r7, #24]
 8011d9e:	f7ff feac 	bl	8011afa <put_fat>
 8011da2:	4603      	mov	r3, r0
 8011da4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011da6:	7ffb      	ldrb	r3, [r7, #31]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d001      	beq.n	8011db0 <remove_chain+0x88>
 8011dac:	7ffb      	ldrb	r3, [r7, #31]
 8011dae:	e01c      	b.n	8011dea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	695a      	ldr	r2, [r3, #20]
 8011db4:	69bb      	ldr	r3, [r7, #24]
 8011db6:	69db      	ldr	r3, [r3, #28]
 8011db8:	3b02      	subs	r3, #2
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d20b      	bcs.n	8011dd6 <remove_chain+0xae>
			fs->free_clst++;
 8011dbe:	69bb      	ldr	r3, [r7, #24]
 8011dc0:	695b      	ldr	r3, [r3, #20]
 8011dc2:	1c5a      	adds	r2, r3, #1
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	791b      	ldrb	r3, [r3, #4]
 8011dcc:	f043 0301 	orr.w	r3, r3, #1
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	69db      	ldr	r3, [r3, #28]
 8011dde:	68ba      	ldr	r2, [r7, #8]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d3c6      	bcc.n	8011d72 <remove_chain+0x4a>
 8011de4:	e000      	b.n	8011de8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011de6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3720      	adds	r7, #32
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b088      	sub	sp, #32
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
 8011dfa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d10d      	bne.n	8011e24 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	691b      	ldr	r3, [r3, #16]
 8011e0c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d004      	beq.n	8011e1e <create_chain+0x2c>
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	69db      	ldr	r3, [r3, #28]
 8011e18:	69ba      	ldr	r2, [r7, #24]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d31b      	bcc.n	8011e56 <create_chain+0x64>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	61bb      	str	r3, [r7, #24]
 8011e22:	e018      	b.n	8011e56 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011e24:	6839      	ldr	r1, [r7, #0]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff fd97 	bl	801195a <get_fat>
 8011e2c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d801      	bhi.n	8011e38 <create_chain+0x46>
 8011e34:	2301      	movs	r3, #1
 8011e36:	e070      	b.n	8011f1a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e3e:	d101      	bne.n	8011e44 <create_chain+0x52>
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	e06a      	b.n	8011f1a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	69db      	ldr	r3, [r3, #28]
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d201      	bcs.n	8011e52 <create_chain+0x60>
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	e063      	b.n	8011f1a <create_chain+0x128>
		scl = clst;
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	69db      	ldr	r3, [r3, #28]
 8011e64:	69fa      	ldr	r2, [r7, #28]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d307      	bcc.n	8011e7a <create_chain+0x88>
				ncl = 2;
 8011e6a:	2302      	movs	r3, #2
 8011e6c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011e6e:	69fa      	ldr	r2, [r7, #28]
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d901      	bls.n	8011e7a <create_chain+0x88>
 8011e76:	2300      	movs	r3, #0
 8011e78:	e04f      	b.n	8011f1a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011e7a:	69f9      	ldr	r1, [r7, #28]
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7ff fd6c 	bl	801195a <get_fat>
 8011e82:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d00e      	beq.n	8011ea8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d003      	beq.n	8011e98 <create_chain+0xa6>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e96:	d101      	bne.n	8011e9c <create_chain+0xaa>
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	e03e      	b.n	8011f1a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011e9c:	69fa      	ldr	r2, [r7, #28]
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d1da      	bne.n	8011e5a <create_chain+0x68>
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	e038      	b.n	8011f1a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011ea8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8011eae:	69f9      	ldr	r1, [r7, #28]
 8011eb0:	6938      	ldr	r0, [r7, #16]
 8011eb2:	f7ff fe22 	bl	8011afa <put_fat>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011eba:	7dfb      	ldrb	r3, [r7, #23]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d109      	bne.n	8011ed4 <create_chain+0xe2>
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d006      	beq.n	8011ed4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011ec6:	69fa      	ldr	r2, [r7, #28]
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	6938      	ldr	r0, [r7, #16]
 8011ecc:	f7ff fe15 	bl	8011afa <put_fat>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011ed4:	7dfb      	ldrb	r3, [r7, #23]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d116      	bne.n	8011f08 <create_chain+0x116>
		fs->last_clst = ncl;
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	69fa      	ldr	r2, [r7, #28]
 8011ede:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	695a      	ldr	r2, [r3, #20]
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	69db      	ldr	r3, [r3, #28]
 8011ee8:	3b02      	subs	r3, #2
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d804      	bhi.n	8011ef8 <create_chain+0x106>
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	695b      	ldr	r3, [r3, #20]
 8011ef2:	1e5a      	subs	r2, r3, #1
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	791b      	ldrb	r3, [r3, #4]
 8011efc:	f043 0301 	orr.w	r3, r3, #1
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	711a      	strb	r2, [r3, #4]
 8011f06:	e007      	b.n	8011f18 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d102      	bne.n	8011f14 <create_chain+0x122>
 8011f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f12:	e000      	b.n	8011f16 <create_chain+0x124>
 8011f14:	2301      	movs	r3, #1
 8011f16:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f18:	69fb      	ldr	r3, [r7, #28]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3720      	adds	r7, #32
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011f22:	b480      	push	{r7}
 8011f24:	b087      	sub	sp, #28
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
 8011f2a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f36:	3304      	adds	r3, #4
 8011f38:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	899b      	ldrh	r3, [r3, #12]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	8952      	ldrh	r2, [r2, #10]
 8011f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f4e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	1d1a      	adds	r2, r3, #4
 8011f54:	613a      	str	r2, [r7, #16]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d101      	bne.n	8011f64 <clmt_clust+0x42>
 8011f60:	2300      	movs	r3, #0
 8011f62:	e010      	b.n	8011f86 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011f64:	697a      	ldr	r2, [r7, #20]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d307      	bcc.n	8011f7c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011f6c:	697a      	ldr	r2, [r7, #20]
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	617b      	str	r3, [r7, #20]
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	3304      	adds	r3, #4
 8011f78:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f7a:	e7e9      	b.n	8011f50 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011f7c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	681a      	ldr	r2, [r3, #0]
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	4413      	add	r3, r2
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	371c      	adds	r7, #28
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr

08011f92 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b086      	sub	sp, #24
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
 8011f9a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011fa8:	d204      	bcs.n	8011fb4 <dir_sdi+0x22>
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	f003 031f 	and.w	r3, r3, #31
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d001      	beq.n	8011fb8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	e071      	b.n	801209c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	683a      	ldr	r2, [r7, #0]
 8011fbc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	689b      	ldr	r3, [r3, #8]
 8011fc2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d106      	bne.n	8011fd8 <dir_sdi+0x46>
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	2b02      	cmp	r3, #2
 8011fd0:	d902      	bls.n	8011fd8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d10c      	bne.n	8011ff8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	095b      	lsrs	r3, r3, #5
 8011fe2:	693a      	ldr	r2, [r7, #16]
 8011fe4:	8912      	ldrh	r2, [r2, #8]
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	d301      	bcc.n	8011fee <dir_sdi+0x5c>
 8011fea:	2302      	movs	r3, #2
 8011fec:	e056      	b.n	801209c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	61da      	str	r2, [r3, #28]
 8011ff6:	e02d      	b.n	8012054 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	895b      	ldrh	r3, [r3, #10]
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	899b      	ldrh	r3, [r3, #12]
 8012002:	fb03 f302 	mul.w	r3, r3, r2
 8012006:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012008:	e019      	b.n	801203e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6979      	ldr	r1, [r7, #20]
 801200e:	4618      	mov	r0, r3
 8012010:	f7ff fca3 	bl	801195a <get_fat>
 8012014:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201c:	d101      	bne.n	8012022 <dir_sdi+0x90>
 801201e:	2301      	movs	r3, #1
 8012020:	e03c      	b.n	801209c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	2b01      	cmp	r3, #1
 8012026:	d904      	bls.n	8012032 <dir_sdi+0xa0>
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	697a      	ldr	r2, [r7, #20]
 801202e:	429a      	cmp	r2, r3
 8012030:	d301      	bcc.n	8012036 <dir_sdi+0xa4>
 8012032:	2302      	movs	r3, #2
 8012034:	e032      	b.n	801209c <dir_sdi+0x10a>
			ofs -= csz;
 8012036:	683a      	ldr	r2, [r7, #0]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801203e:	683a      	ldr	r2, [r7, #0]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	429a      	cmp	r2, r3
 8012044:	d2e1      	bcs.n	801200a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012046:	6979      	ldr	r1, [r7, #20]
 8012048:	6938      	ldr	r0, [r7, #16]
 801204a:	f7ff fc67 	bl	801191c <clust2sect>
 801204e:	4602      	mov	r2, r0
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	697a      	ldr	r2, [r7, #20]
 8012058:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	69db      	ldr	r3, [r3, #28]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d101      	bne.n	8012066 <dir_sdi+0xd4>
 8012062:	2302      	movs	r3, #2
 8012064:	e01a      	b.n	801209c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	69da      	ldr	r2, [r3, #28]
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	899b      	ldrh	r3, [r3, #12]
 801206e:	4619      	mov	r1, r3
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	fbb3 f3f1 	udiv	r3, r3, r1
 8012076:	441a      	add	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	899b      	ldrh	r3, [r3, #12]
 8012086:	461a      	mov	r2, r3
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	fbb3 f0f2 	udiv	r0, r3, r2
 801208e:	fb02 f200 	mul.w	r2, r2, r0
 8012092:	1a9b      	subs	r3, r3, r2
 8012094:	18ca      	adds	r2, r1, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	695b      	ldr	r3, [r3, #20]
 80120b8:	3320      	adds	r3, #32
 80120ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	69db      	ldr	r3, [r3, #28]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d003      	beq.n	80120cc <dir_next+0x28>
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80120ca:	d301      	bcc.n	80120d0 <dir_next+0x2c>
 80120cc:	2304      	movs	r3, #4
 80120ce:	e0bb      	b.n	8012248 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	899b      	ldrh	r3, [r3, #12]
 80120d4:	461a      	mov	r2, r3
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80120dc:	fb02 f201 	mul.w	r2, r2, r1
 80120e0:	1a9b      	subs	r3, r3, r2
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	f040 809d 	bne.w	8012222 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	69db      	ldr	r3, [r3, #28]
 80120ec:	1c5a      	adds	r2, r3, #1
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	699b      	ldr	r3, [r3, #24]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d10b      	bne.n	8012112 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	095b      	lsrs	r3, r3, #5
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	8912      	ldrh	r2, [r2, #8]
 8012102:	4293      	cmp	r3, r2
 8012104:	f0c0 808d 	bcc.w	8012222 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2200      	movs	r2, #0
 801210c:	61da      	str	r2, [r3, #28]
 801210e:	2304      	movs	r3, #4
 8012110:	e09a      	b.n	8012248 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	899b      	ldrh	r3, [r3, #12]
 8012116:	461a      	mov	r2, r3
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	fbb3 f3f2 	udiv	r3, r3, r2
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	8952      	ldrh	r2, [r2, #10]
 8012122:	3a01      	subs	r2, #1
 8012124:	4013      	ands	r3, r2
 8012126:	2b00      	cmp	r3, #0
 8012128:	d17b      	bne.n	8012222 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	699b      	ldr	r3, [r3, #24]
 8012130:	4619      	mov	r1, r3
 8012132:	4610      	mov	r0, r2
 8012134:	f7ff fc11 	bl	801195a <get_fat>
 8012138:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	2b01      	cmp	r3, #1
 801213e:	d801      	bhi.n	8012144 <dir_next+0xa0>
 8012140:	2302      	movs	r3, #2
 8012142:	e081      	b.n	8012248 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801214a:	d101      	bne.n	8012150 <dir_next+0xac>
 801214c:	2301      	movs	r3, #1
 801214e:	e07b      	b.n	8012248 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	69db      	ldr	r3, [r3, #28]
 8012154:	697a      	ldr	r2, [r7, #20]
 8012156:	429a      	cmp	r2, r3
 8012158:	d359      	bcc.n	801220e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d104      	bne.n	801216a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2200      	movs	r2, #0
 8012164:	61da      	str	r2, [r3, #28]
 8012166:	2304      	movs	r3, #4
 8012168:	e06e      	b.n	8012248 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	699b      	ldr	r3, [r3, #24]
 8012170:	4619      	mov	r1, r3
 8012172:	4610      	mov	r0, r2
 8012174:	f7ff fe3d 	bl	8011df2 <create_chain>
 8012178:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d101      	bne.n	8012184 <dir_next+0xe0>
 8012180:	2307      	movs	r3, #7
 8012182:	e061      	b.n	8012248 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2b01      	cmp	r3, #1
 8012188:	d101      	bne.n	801218e <dir_next+0xea>
 801218a:	2302      	movs	r3, #2
 801218c:	e05c      	b.n	8012248 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012194:	d101      	bne.n	801219a <dir_next+0xf6>
 8012196:	2301      	movs	r3, #1
 8012198:	e056      	b.n	8012248 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801219a:	68f8      	ldr	r0, [r7, #12]
 801219c:	f7ff fadc 	bl	8011758 <sync_window>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d001      	beq.n	80121aa <dir_next+0x106>
 80121a6:	2301      	movs	r3, #1
 80121a8:	e04e      	b.n	8012248 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	899b      	ldrh	r3, [r3, #12]
 80121b4:	461a      	mov	r2, r3
 80121b6:	2100      	movs	r1, #0
 80121b8:	f7ff f905 	bl	80113c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121bc:	2300      	movs	r3, #0
 80121be:	613b      	str	r3, [r7, #16]
 80121c0:	6979      	ldr	r1, [r7, #20]
 80121c2:	68f8      	ldr	r0, [r7, #12]
 80121c4:	f7ff fbaa 	bl	801191c <clust2sect>
 80121c8:	4602      	mov	r2, r0
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	635a      	str	r2, [r3, #52]	; 0x34
 80121ce:	e012      	b.n	80121f6 <dir_next+0x152>
						fs->wflag = 1;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2201      	movs	r2, #1
 80121d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f7ff fabe 	bl	8011758 <sync_window>
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d001      	beq.n	80121e6 <dir_next+0x142>
 80121e2:	2301      	movs	r3, #1
 80121e4:	e030      	b.n	8012248 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	3301      	adds	r3, #1
 80121ea:	613b      	str	r3, [r7, #16]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121f0:	1c5a      	adds	r2, r3, #1
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	635a      	str	r2, [r3, #52]	; 0x34
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	895b      	ldrh	r3, [r3, #10]
 80121fa:	461a      	mov	r2, r3
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	4293      	cmp	r3, r2
 8012200:	d3e6      	bcc.n	80121d0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	1ad2      	subs	r2, r2, r3
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	697a      	ldr	r2, [r7, #20]
 8012212:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012214:	6979      	ldr	r1, [r7, #20]
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f7ff fb80 	bl	801191c <clust2sect>
 801221c:	4602      	mov	r2, r0
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	68ba      	ldr	r2, [r7, #8]
 8012226:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	899b      	ldrh	r3, [r3, #12]
 8012232:	461a      	mov	r2, r3
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	fbb3 f0f2 	udiv	r0, r3, r2
 801223a:	fb02 f200 	mul.w	r2, r2, r0
 801223e:	1a9b      	subs	r3, r3, r2
 8012240:	18ca      	adds	r2, r1, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012246:	2300      	movs	r3, #0
}
 8012248:	4618      	mov	r0, r3
 801224a:	3718      	adds	r7, #24
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012260:	2100      	movs	r1, #0
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7ff fe95 	bl	8011f92 <dir_sdi>
 8012268:	4603      	mov	r3, r0
 801226a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801226c:	7dfb      	ldrb	r3, [r7, #23]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d12b      	bne.n	80122ca <dir_alloc+0x7a>
		n = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	69db      	ldr	r3, [r3, #28]
 801227a:	4619      	mov	r1, r3
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f7ff faaf 	bl	80117e0 <move_window>
 8012282:	4603      	mov	r3, r0
 8012284:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012286:	7dfb      	ldrb	r3, [r7, #23]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d11d      	bne.n	80122c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6a1b      	ldr	r3, [r3, #32]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	2be5      	cmp	r3, #229	; 0xe5
 8012294:	d004      	beq.n	80122a0 <dir_alloc+0x50>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6a1b      	ldr	r3, [r3, #32]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d107      	bne.n	80122b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	3301      	adds	r3, #1
 80122a4:	613b      	str	r3, [r7, #16]
 80122a6:	693a      	ldr	r2, [r7, #16]
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d102      	bne.n	80122b4 <dir_alloc+0x64>
 80122ae:	e00c      	b.n	80122ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80122b0:	2300      	movs	r3, #0
 80122b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80122b4:	2101      	movs	r1, #1
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7ff fef4 	bl	80120a4 <dir_next>
 80122bc:	4603      	mov	r3, r0
 80122be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80122c0:	7dfb      	ldrb	r3, [r7, #23]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0d7      	beq.n	8012276 <dir_alloc+0x26>
 80122c6:	e000      	b.n	80122ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80122c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
 80122cc:	2b04      	cmp	r3, #4
 80122ce:	d101      	bne.n	80122d4 <dir_alloc+0x84>
 80122d0:	2307      	movs	r3, #7
 80122d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80122d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3718      	adds	r7, #24
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b084      	sub	sp, #16
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	331a      	adds	r3, #26
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fe ffc7 	bl	8011280 <ld_word>
 80122f2:	4603      	mov	r3, r0
 80122f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b03      	cmp	r3, #3
 80122fc:	d109      	bne.n	8012312 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	3314      	adds	r3, #20
 8012302:	4618      	mov	r0, r3
 8012304:	f7fe ffbc 	bl	8011280 <ld_word>
 8012308:	4603      	mov	r3, r0
 801230a:	041b      	lsls	r3, r3, #16
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	4313      	orrs	r3, r2
 8012310:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012312:	68fb      	ldr	r3, [r7, #12]
}
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	331a      	adds	r3, #26
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	b292      	uxth	r2, r2
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f7fe ffdf 	bl	80112f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	2b03      	cmp	r3, #3
 801233e:	d109      	bne.n	8012354 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	f103 0214 	add.w	r2, r3, #20
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	0c1b      	lsrs	r3, r3, #16
 801234a:	b29b      	uxth	r3, r3
 801234c:	4619      	mov	r1, r3
 801234e:	4610      	mov	r0, r2
 8012350:	f7fe ffd1 	bl	80112f6 <st_word>
	}
}
 8012354:	bf00      	nop
 8012356:	3710      	adds	r7, #16
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012366:	2304      	movs	r3, #4
 8012368:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012370:	e03c      	b.n	80123ec <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	69db      	ldr	r3, [r3, #28]
 8012376:	4619      	mov	r1, r3
 8012378:	6938      	ldr	r0, [r7, #16]
 801237a:	f7ff fa31 	bl	80117e0 <move_window>
 801237e:	4603      	mov	r3, r0
 8012380:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012382:	7dfb      	ldrb	r3, [r7, #23]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d136      	bne.n	80123f6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a1b      	ldr	r3, [r3, #32]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012390:	7bfb      	ldrb	r3, [r7, #15]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d102      	bne.n	801239c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012396:	2304      	movs	r3, #4
 8012398:	75fb      	strb	r3, [r7, #23]
 801239a:	e031      	b.n	8012400 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6a1b      	ldr	r3, [r3, #32]
 80123a0:	330b      	adds	r3, #11
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123a8:	73bb      	strb	r3, [r7, #14]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	7bba      	ldrb	r2, [r7, #14]
 80123ae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80123b0:	7bfb      	ldrb	r3, [r7, #15]
 80123b2:	2be5      	cmp	r3, #229	; 0xe5
 80123b4:	d011      	beq.n	80123da <dir_read+0x7e>
 80123b6:	7bfb      	ldrb	r3, [r7, #15]
 80123b8:	2b2e      	cmp	r3, #46	; 0x2e
 80123ba:	d00e      	beq.n	80123da <dir_read+0x7e>
 80123bc:	7bbb      	ldrb	r3, [r7, #14]
 80123be:	2b0f      	cmp	r3, #15
 80123c0:	d00b      	beq.n	80123da <dir_read+0x7e>
 80123c2:	7bbb      	ldrb	r3, [r7, #14]
 80123c4:	f023 0320 	bic.w	r3, r3, #32
 80123c8:	2b08      	cmp	r3, #8
 80123ca:	bf0c      	ite	eq
 80123cc:	2301      	moveq	r3, #1
 80123ce:	2300      	movne	r3, #0
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	461a      	mov	r2, r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d00f      	beq.n	80123fa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80123da:	2100      	movs	r1, #0
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff fe61 	bl	80120a4 <dir_next>
 80123e2:	4603      	mov	r3, r0
 80123e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123e6:	7dfb      	ldrb	r3, [r7, #23]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d108      	bne.n	80123fe <dir_read+0xa2>
	while (dp->sect) {
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	69db      	ldr	r3, [r3, #28]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d1be      	bne.n	8012372 <dir_read+0x16>
 80123f4:	e004      	b.n	8012400 <dir_read+0xa4>
		if (res != FR_OK) break;
 80123f6:	bf00      	nop
 80123f8:	e002      	b.n	8012400 <dir_read+0xa4>
				break;
 80123fa:	bf00      	nop
 80123fc:	e000      	b.n	8012400 <dir_read+0xa4>
		if (res != FR_OK) break;
 80123fe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012400:	7dfb      	ldrb	r3, [r7, #23]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d002      	beq.n	801240c <dir_read+0xb0>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2200      	movs	r2, #0
 801240a:	61da      	str	r2, [r3, #28]
	return res;
 801240c:	7dfb      	ldrb	r3, [r7, #23]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}

08012416 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012416:	b580      	push	{r7, lr}
 8012418:	b086      	sub	sp, #24
 801241a:	af00      	add	r7, sp, #0
 801241c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012424:	2100      	movs	r1, #0
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f7ff fdb3 	bl	8011f92 <dir_sdi>
 801242c:	4603      	mov	r3, r0
 801242e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012430:	7dfb      	ldrb	r3, [r7, #23]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d001      	beq.n	801243a <dir_find+0x24>
 8012436:	7dfb      	ldrb	r3, [r7, #23]
 8012438:	e03e      	b.n	80124b8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	69db      	ldr	r3, [r3, #28]
 801243e:	4619      	mov	r1, r3
 8012440:	6938      	ldr	r0, [r7, #16]
 8012442:	f7ff f9cd 	bl	80117e0 <move_window>
 8012446:	4603      	mov	r3, r0
 8012448:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801244a:	7dfb      	ldrb	r3, [r7, #23]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d12f      	bne.n	80124b0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a1b      	ldr	r3, [r3, #32]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012458:	7bfb      	ldrb	r3, [r7, #15]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d102      	bne.n	8012464 <dir_find+0x4e>
 801245e:	2304      	movs	r3, #4
 8012460:	75fb      	strb	r3, [r7, #23]
 8012462:	e028      	b.n	80124b6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a1b      	ldr	r3, [r3, #32]
 8012468:	330b      	adds	r3, #11
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012470:	b2da      	uxtb	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6a1b      	ldr	r3, [r3, #32]
 801247a:	330b      	adds	r3, #11
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	f003 0308 	and.w	r3, r3, #8
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10a      	bne.n	801249c <dir_find+0x86>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6a18      	ldr	r0, [r3, #32]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	3324      	adds	r3, #36	; 0x24
 801248e:	220b      	movs	r2, #11
 8012490:	4619      	mov	r1, r3
 8012492:	f7fe ffb2 	bl	80113fa <mem_cmp>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00b      	beq.n	80124b4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801249c:	2100      	movs	r1, #0
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff fe00 	bl	80120a4 <dir_next>
 80124a4:	4603      	mov	r3, r0
 80124a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80124a8:	7dfb      	ldrb	r3, [r7, #23]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d0c5      	beq.n	801243a <dir_find+0x24>
 80124ae:	e002      	b.n	80124b6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80124b0:	bf00      	nop
 80124b2:	e000      	b.n	80124b6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80124b4:	bf00      	nop

	return res;
 80124b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3718      	adds	r7, #24
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b084      	sub	sp, #16
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80124ce:	2101      	movs	r1, #1
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7ff febd 	bl	8012250 <dir_alloc>
 80124d6:	4603      	mov	r3, r0
 80124d8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80124da:	7bfb      	ldrb	r3, [r7, #15]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d11c      	bne.n	801251a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	69db      	ldr	r3, [r3, #28]
 80124e4:	4619      	mov	r1, r3
 80124e6:	68b8      	ldr	r0, [r7, #8]
 80124e8:	f7ff f97a 	bl	80117e0 <move_window>
 80124ec:	4603      	mov	r3, r0
 80124ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80124f0:	7bfb      	ldrb	r3, [r7, #15]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d111      	bne.n	801251a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6a1b      	ldr	r3, [r3, #32]
 80124fa:	2220      	movs	r2, #32
 80124fc:	2100      	movs	r1, #0
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fe ff61 	bl	80113c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6a18      	ldr	r0, [r3, #32]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	3324      	adds	r3, #36	; 0x24
 801250c:	220b      	movs	r2, #11
 801250e:	4619      	mov	r1, r3
 8012510:	f7fe ff38 	bl	8011384 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	2201      	movs	r2, #1
 8012518:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801251a:	7bfb      	ldrb	r3, [r7, #15]
}
 801251c:	4618      	mov	r0, r3
 801251e:	3710      	adds	r7, #16
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b084      	sub	sp, #16
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	4619      	mov	r1, r3
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f7ff f951 	bl	80117e0 <move_window>
 801253e:	4603      	mov	r3, r0
 8012540:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012542:	7afb      	ldrb	r3, [r7, #11]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d106      	bne.n	8012556 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6a1b      	ldr	r3, [r3, #32]
 801254c:	22e5      	movs	r2, #229	; 0xe5
 801254e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2201      	movs	r2, #1
 8012554:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012556:	7afb      	ldrb	r3, [r7, #11]
}
 8012558:	4618      	mov	r0, r3
 801255a:	3710      	adds	r7, #16
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b088      	sub	sp, #32
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	60fb      	str	r3, [r7, #12]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	3324      	adds	r3, #36	; 0x24
 8012574:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012576:	220b      	movs	r2, #11
 8012578:	2120      	movs	r1, #32
 801257a:	68b8      	ldr	r0, [r7, #8]
 801257c:	f7fe ff23 	bl	80113c6 <mem_set>
	si = i = 0; ni = 8;
 8012580:	2300      	movs	r3, #0
 8012582:	613b      	str	r3, [r7, #16]
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	617b      	str	r3, [r7, #20]
 8012588:	2308      	movs	r3, #8
 801258a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801258c:	68fa      	ldr	r2, [r7, #12]
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	4413      	add	r3, r2
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	2b2e      	cmp	r3, #46	; 0x2e
 8012596:	d12f      	bne.n	80125f8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	1c5a      	adds	r2, r3, #1
 801259c:	617a      	str	r2, [r7, #20]
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	4413      	add	r3, r2
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80125a6:	7ffb      	ldrb	r3, [r7, #31]
 80125a8:	2b2e      	cmp	r3, #46	; 0x2e
 80125aa:	d10a      	bne.n	80125c2 <create_name+0x62>
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	2b02      	cmp	r3, #2
 80125b0:	d807      	bhi.n	80125c2 <create_name+0x62>
			sfn[i++] = c;
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	1c5a      	adds	r2, r3, #1
 80125b6:	613a      	str	r2, [r7, #16]
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	4413      	add	r3, r2
 80125bc:	7ffa      	ldrb	r2, [r7, #31]
 80125be:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80125c0:	e7ea      	b.n	8012598 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80125c2:	7ffb      	ldrb	r3, [r7, #31]
 80125c4:	2b2f      	cmp	r3, #47	; 0x2f
 80125c6:	d007      	beq.n	80125d8 <create_name+0x78>
 80125c8:	7ffb      	ldrb	r3, [r7, #31]
 80125ca:	2b5c      	cmp	r3, #92	; 0x5c
 80125cc:	d004      	beq.n	80125d8 <create_name+0x78>
 80125ce:	7ffb      	ldrb	r3, [r7, #31]
 80125d0:	2b20      	cmp	r3, #32
 80125d2:	d901      	bls.n	80125d8 <create_name+0x78>
 80125d4:	2306      	movs	r3, #6
 80125d6:	e084      	b.n	80126e2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80125d8:	68fa      	ldr	r2, [r7, #12]
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	441a      	add	r2, r3
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80125e2:	7ffb      	ldrb	r3, [r7, #31]
 80125e4:	2b20      	cmp	r3, #32
 80125e6:	d801      	bhi.n	80125ec <create_name+0x8c>
 80125e8:	2224      	movs	r2, #36	; 0x24
 80125ea:	e000      	b.n	80125ee <create_name+0x8e>
 80125ec:	2220      	movs	r2, #32
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	330b      	adds	r3, #11
 80125f2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80125f4:	2300      	movs	r3, #0
 80125f6:	e074      	b.n	80126e2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	1c5a      	adds	r2, r3, #1
 80125fc:	617a      	str	r2, [r7, #20]
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	4413      	add	r3, r2
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012606:	7ffb      	ldrb	r3, [r7, #31]
 8012608:	2b20      	cmp	r3, #32
 801260a:	d94e      	bls.n	80126aa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801260c:	7ffb      	ldrb	r3, [r7, #31]
 801260e:	2b2f      	cmp	r3, #47	; 0x2f
 8012610:	d006      	beq.n	8012620 <create_name+0xc0>
 8012612:	7ffb      	ldrb	r3, [r7, #31]
 8012614:	2b5c      	cmp	r3, #92	; 0x5c
 8012616:	d110      	bne.n	801263a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012618:	e002      	b.n	8012620 <create_name+0xc0>
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	3301      	adds	r3, #1
 801261e:	617b      	str	r3, [r7, #20]
 8012620:	68fa      	ldr	r2, [r7, #12]
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	4413      	add	r3, r2
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	2b2f      	cmp	r3, #47	; 0x2f
 801262a:	d0f6      	beq.n	801261a <create_name+0xba>
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	4413      	add	r3, r2
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b5c      	cmp	r3, #92	; 0x5c
 8012636:	d0f0      	beq.n	801261a <create_name+0xba>
			break;
 8012638:	e038      	b.n	80126ac <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801263a:	7ffb      	ldrb	r3, [r7, #31]
 801263c:	2b2e      	cmp	r3, #46	; 0x2e
 801263e:	d003      	beq.n	8012648 <create_name+0xe8>
 8012640:	693a      	ldr	r2, [r7, #16]
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	429a      	cmp	r2, r3
 8012646:	d30c      	bcc.n	8012662 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	2b0b      	cmp	r3, #11
 801264c:	d002      	beq.n	8012654 <create_name+0xf4>
 801264e:	7ffb      	ldrb	r3, [r7, #31]
 8012650:	2b2e      	cmp	r3, #46	; 0x2e
 8012652:	d001      	beq.n	8012658 <create_name+0xf8>
 8012654:	2306      	movs	r3, #6
 8012656:	e044      	b.n	80126e2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012658:	2308      	movs	r3, #8
 801265a:	613b      	str	r3, [r7, #16]
 801265c:	230b      	movs	r3, #11
 801265e:	61bb      	str	r3, [r7, #24]
			continue;
 8012660:	e022      	b.n	80126a8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012662:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012666:	2b00      	cmp	r3, #0
 8012668:	da04      	bge.n	8012674 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801266a:	7ffb      	ldrb	r3, [r7, #31]
 801266c:	3b80      	subs	r3, #128	; 0x80
 801266e:	4a1f      	ldr	r2, [pc, #124]	; (80126ec <create_name+0x18c>)
 8012670:	5cd3      	ldrb	r3, [r2, r3]
 8012672:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012674:	7ffb      	ldrb	r3, [r7, #31]
 8012676:	4619      	mov	r1, r3
 8012678:	481d      	ldr	r0, [pc, #116]	; (80126f0 <create_name+0x190>)
 801267a:	f7fe fee5 	bl	8011448 <chk_chr>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d001      	beq.n	8012688 <create_name+0x128>
 8012684:	2306      	movs	r3, #6
 8012686:	e02c      	b.n	80126e2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012688:	7ffb      	ldrb	r3, [r7, #31]
 801268a:	2b60      	cmp	r3, #96	; 0x60
 801268c:	d905      	bls.n	801269a <create_name+0x13a>
 801268e:	7ffb      	ldrb	r3, [r7, #31]
 8012690:	2b7a      	cmp	r3, #122	; 0x7a
 8012692:	d802      	bhi.n	801269a <create_name+0x13a>
 8012694:	7ffb      	ldrb	r3, [r7, #31]
 8012696:	3b20      	subs	r3, #32
 8012698:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	613a      	str	r2, [r7, #16]
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	4413      	add	r3, r2
 80126a4:	7ffa      	ldrb	r2, [r7, #31]
 80126a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80126a8:	e7a6      	b.n	80125f8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80126aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80126ac:	68fa      	ldr	r2, [r7, #12]
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	441a      	add	r2, r3
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d101      	bne.n	80126c0 <create_name+0x160>
 80126bc:	2306      	movs	r3, #6
 80126be:	e010      	b.n	80126e2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2be5      	cmp	r3, #229	; 0xe5
 80126c6:	d102      	bne.n	80126ce <create_name+0x16e>
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	2205      	movs	r2, #5
 80126cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80126ce:	7ffb      	ldrb	r3, [r7, #31]
 80126d0:	2b20      	cmp	r3, #32
 80126d2:	d801      	bhi.n	80126d8 <create_name+0x178>
 80126d4:	2204      	movs	r2, #4
 80126d6:	e000      	b.n	80126da <create_name+0x17a>
 80126d8:	2200      	movs	r2, #0
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	330b      	adds	r3, #11
 80126de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80126e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3720      	adds	r7, #32
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0801a374 	.word	0x0801a374
 80126f0:	0801a324 	.word	0x0801a324

080126f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b086      	sub	sp, #24
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	2b2f      	cmp	r3, #47	; 0x2f
 801270e:	d00b      	beq.n	8012728 <follow_path+0x34>
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	2b5c      	cmp	r3, #92	; 0x5c
 8012716:	d007      	beq.n	8012728 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	699a      	ldr	r2, [r3, #24]
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	609a      	str	r2, [r3, #8]
 8012720:	e00d      	b.n	801273e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	3301      	adds	r3, #1
 8012726:	603b      	str	r3, [r7, #0]
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b2f      	cmp	r3, #47	; 0x2f
 801272e:	d0f8      	beq.n	8012722 <follow_path+0x2e>
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	2b5c      	cmp	r3, #92	; 0x5c
 8012736:	d0f4      	beq.n	8012722 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2200      	movs	r2, #0
 801273c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	2b1f      	cmp	r3, #31
 8012744:	d80a      	bhi.n	801275c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2280      	movs	r2, #128	; 0x80
 801274a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801274e:	2100      	movs	r1, #0
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7ff fc1e 	bl	8011f92 <dir_sdi>
 8012756:	4603      	mov	r3, r0
 8012758:	75fb      	strb	r3, [r7, #23]
 801275a:	e05b      	b.n	8012814 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801275c:	463b      	mov	r3, r7
 801275e:	4619      	mov	r1, r3
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff fefd 	bl	8012560 <create_name>
 8012766:	4603      	mov	r3, r0
 8012768:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801276a:	7dfb      	ldrb	r3, [r7, #23]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d14c      	bne.n	801280a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ff fe50 	bl	8012416 <dir_find>
 8012776:	4603      	mov	r3, r0
 8012778:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012780:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012782:	7dfb      	ldrb	r3, [r7, #23]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d01b      	beq.n	80127c0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012788:	7dfb      	ldrb	r3, [r7, #23]
 801278a:	2b04      	cmp	r3, #4
 801278c:	d13f      	bne.n	801280e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801278e:	7afb      	ldrb	r3, [r7, #11]
 8012790:	f003 0320 	and.w	r3, r3, #32
 8012794:	2b00      	cmp	r3, #0
 8012796:	d00b      	beq.n	80127b0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012798:	7afb      	ldrb	r3, [r7, #11]
 801279a:	f003 0304 	and.w	r3, r3, #4
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d031      	beq.n	8012806 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2280      	movs	r2, #128	; 0x80
 80127a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80127aa:	2300      	movs	r3, #0
 80127ac:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80127ae:	e02e      	b.n	801280e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80127b0:	7afb      	ldrb	r3, [r7, #11]
 80127b2:	f003 0304 	and.w	r3, r3, #4
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d129      	bne.n	801280e <follow_path+0x11a>
 80127ba:	2305      	movs	r3, #5
 80127bc:	75fb      	strb	r3, [r7, #23]
				break;
 80127be:	e026      	b.n	801280e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80127c0:	7afb      	ldrb	r3, [r7, #11]
 80127c2:	f003 0304 	and.w	r3, r3, #4
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d123      	bne.n	8012812 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	799b      	ldrb	r3, [r3, #6]
 80127ce:	f003 0310 	and.w	r3, r3, #16
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d102      	bne.n	80127dc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80127d6:	2305      	movs	r3, #5
 80127d8:	75fb      	strb	r3, [r7, #23]
 80127da:	e01b      	b.n	8012814 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	695b      	ldr	r3, [r3, #20]
 80127e6:	68fa      	ldr	r2, [r7, #12]
 80127e8:	8992      	ldrh	r2, [r2, #12]
 80127ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80127ee:	fb02 f200 	mul.w	r2, r2, r0
 80127f2:	1a9b      	subs	r3, r3, r2
 80127f4:	440b      	add	r3, r1
 80127f6:	4619      	mov	r1, r3
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f7ff fd70 	bl	80122de <ld_clust>
 80127fe:	4602      	mov	r2, r0
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	609a      	str	r2, [r3, #8]
 8012804:	e7aa      	b.n	801275c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012806:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012808:	e7a8      	b.n	801275c <follow_path+0x68>
			if (res != FR_OK) break;
 801280a:	bf00      	nop
 801280c:	e002      	b.n	8012814 <follow_path+0x120>
				break;
 801280e:	bf00      	nop
 8012810:	e000      	b.n	8012814 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012812:	bf00      	nop
			}
		}
	}

	return res;
 8012814:	7dfb      	ldrb	r3, [r7, #23]
}
 8012816:	4618      	mov	r0, r3
 8012818:	3718      	adds	r7, #24
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801281e:	b480      	push	{r7}
 8012820:	b087      	sub	sp, #28
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012826:	f04f 33ff 	mov.w	r3, #4294967295
 801282a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d031      	beq.n	8012898 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	617b      	str	r3, [r7, #20]
 801283a:	e002      	b.n	8012842 <get_ldnumber+0x24>
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	3301      	adds	r3, #1
 8012840:	617b      	str	r3, [r7, #20]
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	2b20      	cmp	r3, #32
 8012848:	d903      	bls.n	8012852 <get_ldnumber+0x34>
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	2b3a      	cmp	r3, #58	; 0x3a
 8012850:	d1f4      	bne.n	801283c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	2b3a      	cmp	r3, #58	; 0x3a
 8012858:	d11c      	bne.n	8012894 <get_ldnumber+0x76>
			tp = *path;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	60fa      	str	r2, [r7, #12]
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	3b30      	subs	r3, #48	; 0x30
 801286a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	2b09      	cmp	r3, #9
 8012870:	d80e      	bhi.n	8012890 <get_ldnumber+0x72>
 8012872:	68fa      	ldr	r2, [r7, #12]
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	429a      	cmp	r2, r3
 8012878:	d10a      	bne.n	8012890 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d107      	bne.n	8012890 <get_ldnumber+0x72>
					vol = (int)i;
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	3301      	adds	r3, #1
 8012888:	617b      	str	r3, [r7, #20]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	697a      	ldr	r2, [r7, #20]
 801288e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	e002      	b.n	801289a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012894:	2300      	movs	r3, #0
 8012896:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012898:	693b      	ldr	r3, [r7, #16]
}
 801289a:	4618      	mov	r0, r3
 801289c:	371c      	adds	r7, #28
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr
	...

080128a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	70da      	strb	r2, [r3, #3]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f04f 32ff 	mov.w	r2, #4294967295
 80128be:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80128c0:	6839      	ldr	r1, [r7, #0]
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f7fe ff8c 	bl	80117e0 <move_window>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <check_fs+0x2a>
 80128ce:	2304      	movs	r3, #4
 80128d0:	e038      	b.n	8012944 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3338      	adds	r3, #56	; 0x38
 80128d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fe fcd0 	bl	8011280 <ld_word>
 80128e0:	4603      	mov	r3, r0
 80128e2:	461a      	mov	r2, r3
 80128e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d001      	beq.n	80128f0 <check_fs+0x48>
 80128ec:	2303      	movs	r3, #3
 80128ee:	e029      	b.n	8012944 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80128f6:	2be9      	cmp	r3, #233	; 0xe9
 80128f8:	d009      	beq.n	801290e <check_fs+0x66>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012900:	2beb      	cmp	r3, #235	; 0xeb
 8012902:	d11e      	bne.n	8012942 <check_fs+0x9a>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801290a:	2b90      	cmp	r3, #144	; 0x90
 801290c:	d119      	bne.n	8012942 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	3338      	adds	r3, #56	; 0x38
 8012912:	3336      	adds	r3, #54	; 0x36
 8012914:	4618      	mov	r0, r3
 8012916:	f7fe fccb 	bl	80112b0 <ld_dword>
 801291a:	4603      	mov	r3, r0
 801291c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012920:	4a0a      	ldr	r2, [pc, #40]	; (801294c <check_fs+0xa4>)
 8012922:	4293      	cmp	r3, r2
 8012924:	d101      	bne.n	801292a <check_fs+0x82>
 8012926:	2300      	movs	r3, #0
 8012928:	e00c      	b.n	8012944 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	3338      	adds	r3, #56	; 0x38
 801292e:	3352      	adds	r3, #82	; 0x52
 8012930:	4618      	mov	r0, r3
 8012932:	f7fe fcbd 	bl	80112b0 <ld_dword>
 8012936:	4602      	mov	r2, r0
 8012938:	4b05      	ldr	r3, [pc, #20]	; (8012950 <check_fs+0xa8>)
 801293a:	429a      	cmp	r2, r3
 801293c:	d101      	bne.n	8012942 <check_fs+0x9a>
 801293e:	2300      	movs	r3, #0
 8012940:	e000      	b.n	8012944 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012942:	2302      	movs	r3, #2
}
 8012944:	4618      	mov	r0, r3
 8012946:	3708      	adds	r7, #8
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	00544146 	.word	0x00544146
 8012950:	33544146 	.word	0x33544146

08012954 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b096      	sub	sp, #88	; 0x58
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	4613      	mov	r3, r2
 8012960:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	2200      	movs	r2, #0
 8012966:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012968:	68f8      	ldr	r0, [r7, #12]
 801296a:	f7ff ff58 	bl	801281e <get_ldnumber>
 801296e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012972:	2b00      	cmp	r3, #0
 8012974:	da01      	bge.n	801297a <find_volume+0x26>
 8012976:	230b      	movs	r3, #11
 8012978:	e268      	b.n	8012e4c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801297a:	4ab0      	ldr	r2, [pc, #704]	; (8012c3c <find_volume+0x2e8>)
 801297c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012982:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012986:	2b00      	cmp	r3, #0
 8012988:	d101      	bne.n	801298e <find_volume+0x3a>
 801298a:	230c      	movs	r3, #12
 801298c:	e25e      	b.n	8012e4c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012992:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012994:	79fb      	ldrb	r3, [r7, #7]
 8012996:	f023 0301 	bic.w	r3, r3, #1
 801299a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d01a      	beq.n	80129da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	785b      	ldrb	r3, [r3, #1]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7fe fbcb 	bl	8011144 <disk_status>
 80129ae:	4603      	mov	r3, r0
 80129b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80129b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129b8:	f003 0301 	and.w	r3, r3, #1
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d10c      	bne.n	80129da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80129c0:	79fb      	ldrb	r3, [r7, #7]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d007      	beq.n	80129d6 <find_volume+0x82>
 80129c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129ca:	f003 0304 	and.w	r3, r3, #4
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80129d2:	230a      	movs	r3, #10
 80129d4:	e23a      	b.n	8012e4c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80129d6:	2300      	movs	r3, #0
 80129d8:	e238      	b.n	8012e4c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80129da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129dc:	2200      	movs	r2, #0
 80129de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80129e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129e2:	b2da      	uxtb	r2, r3
 80129e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80129e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ea:	785b      	ldrb	r3, [r3, #1]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7fe fbc3 	bl	8011178 <disk_initialize>
 80129f2:	4603      	mov	r3, r0
 80129f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80129f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129fc:	f003 0301 	and.w	r3, r3, #1
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012a04:	2303      	movs	r3, #3
 8012a06:	e221      	b.n	8012e4c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012a08:	79fb      	ldrb	r3, [r7, #7]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d007      	beq.n	8012a1e <find_volume+0xca>
 8012a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a12:	f003 0304 	and.w	r3, r3, #4
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d001      	beq.n	8012a1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012a1a:	230a      	movs	r3, #10
 8012a1c:	e216      	b.n	8012e4c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	7858      	ldrb	r0, [r3, #1]
 8012a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a24:	330c      	adds	r3, #12
 8012a26:	461a      	mov	r2, r3
 8012a28:	2102      	movs	r1, #2
 8012a2a:	f7fe fc0b 	bl	8011244 <disk_ioctl>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <find_volume+0xe4>
 8012a34:	2301      	movs	r3, #1
 8012a36:	e209      	b.n	8012e4c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3a:	899b      	ldrh	r3, [r3, #12]
 8012a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a40:	d80d      	bhi.n	8012a5e <find_volume+0x10a>
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	899b      	ldrh	r3, [r3, #12]
 8012a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a4a:	d308      	bcc.n	8012a5e <find_volume+0x10a>
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4e:	899b      	ldrh	r3, [r3, #12]
 8012a50:	461a      	mov	r2, r3
 8012a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a54:	899b      	ldrh	r3, [r3, #12]
 8012a56:	3b01      	subs	r3, #1
 8012a58:	4013      	ands	r3, r2
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d001      	beq.n	8012a62 <find_volume+0x10e>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e1f4      	b.n	8012e4c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012a66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a6a:	f7ff ff1d 	bl	80128a8 <check_fs>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a78:	2b02      	cmp	r3, #2
 8012a7a:	d14b      	bne.n	8012b14 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8012a80:	e01f      	b.n	8012ac2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8a:	011b      	lsls	r3, r3, #4
 8012a8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a90:	4413      	add	r3, r2
 8012a92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a96:	3304      	adds	r3, #4
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d006      	beq.n	8012aac <find_volume+0x158>
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	3308      	adds	r3, #8
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7fe fc04 	bl	80112b0 <ld_dword>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	e000      	b.n	8012aae <find_volume+0x15a>
 8012aac:	2200      	movs	r2, #0
 8012aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012ab6:	440b      	add	r3, r1
 8012ab8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012abe:	3301      	adds	r3, #1
 8012ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ac4:	2b03      	cmp	r3, #3
 8012ac6:	d9dc      	bls.n	8012a82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012ac8:	2300      	movs	r3, #0
 8012aca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <find_volume+0x184>
 8012ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ae6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d005      	beq.n	8012afa <find_volume+0x1a6>
 8012aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012af2:	f7ff fed9 	bl	80128a8 <check_fs>
 8012af6:	4603      	mov	r3, r0
 8012af8:	e000      	b.n	8012afc <find_volume+0x1a8>
 8012afa:	2303      	movs	r3, #3
 8012afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d905      	bls.n	8012b14 <find_volume+0x1c0>
 8012b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8012b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	d9e1      	bls.n	8012ad8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b18:	2b04      	cmp	r3, #4
 8012b1a:	d101      	bne.n	8012b20 <find_volume+0x1cc>
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e195      	b.n	8012e4c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d901      	bls.n	8012b2c <find_volume+0x1d8>
 8012b28:	230d      	movs	r3, #13
 8012b2a:	e18f      	b.n	8012e4c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2e:	3338      	adds	r3, #56	; 0x38
 8012b30:	330b      	adds	r3, #11
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fe fba4 	bl	8011280 <ld_word>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	899b      	ldrh	r3, [r3, #12]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d001      	beq.n	8012b48 <find_volume+0x1f4>
 8012b44:	230d      	movs	r3, #13
 8012b46:	e181      	b.n	8012e4c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4a:	3338      	adds	r3, #56	; 0x38
 8012b4c:	3316      	adds	r3, #22
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7fe fb96 	bl	8011280 <ld_word>
 8012b54:	4603      	mov	r3, r0
 8012b56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d106      	bne.n	8012b6c <find_volume+0x218>
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b60:	3338      	adds	r3, #56	; 0x38
 8012b62:	3324      	adds	r3, #36	; 0x24
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7fe fba3 	bl	80112b0 <ld_dword>
 8012b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b70:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	789b      	ldrb	r3, [r3, #2]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d005      	beq.n	8012b90 <find_volume+0x23c>
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	789b      	ldrb	r3, [r3, #2]
 8012b88:	2b02      	cmp	r3, #2
 8012b8a:	d001      	beq.n	8012b90 <find_volume+0x23c>
 8012b8c:	230d      	movs	r3, #13
 8012b8e:	e15d      	b.n	8012e4c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	789b      	ldrb	r3, [r3, #2]
 8012b94:	461a      	mov	r2, r3
 8012b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b98:	fb02 f303 	mul.w	r3, r2, r3
 8012b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bac:	895b      	ldrh	r3, [r3, #10]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d008      	beq.n	8012bc4 <find_volume+0x270>
 8012bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb4:	895b      	ldrh	r3, [r3, #10]
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	895b      	ldrh	r3, [r3, #10]
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d001      	beq.n	8012bc8 <find_volume+0x274>
 8012bc4:	230d      	movs	r3, #13
 8012bc6:	e141      	b.n	8012e4c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bca:	3338      	adds	r3, #56	; 0x38
 8012bcc:	3311      	adds	r3, #17
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7fe fb56 	bl	8011280 <ld_word>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bde:	891b      	ldrh	r3, [r3, #8]
 8012be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012be2:	8992      	ldrh	r2, [r2, #12]
 8012be4:	0952      	lsrs	r2, r2, #5
 8012be6:	b292      	uxth	r2, r2
 8012be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bec:	fb02 f201 	mul.w	r2, r2, r1
 8012bf0:	1a9b      	subs	r3, r3, r2
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <find_volume+0x2a8>
 8012bf8:	230d      	movs	r3, #13
 8012bfa:	e127      	b.n	8012e4c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfe:	3338      	adds	r3, #56	; 0x38
 8012c00:	3313      	adds	r3, #19
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fe fb3c 	bl	8011280 <ld_word>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d106      	bne.n	8012c20 <find_volume+0x2cc>
 8012c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c14:	3338      	adds	r3, #56	; 0x38
 8012c16:	3320      	adds	r3, #32
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe fb49 	bl	80112b0 <ld_dword>
 8012c1e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	3338      	adds	r3, #56	; 0x38
 8012c24:	330e      	adds	r3, #14
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe fb2a 	bl	8011280 <ld_word>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d104      	bne.n	8012c40 <find_volume+0x2ec>
 8012c36:	230d      	movs	r3, #13
 8012c38:	e108      	b.n	8012e4c <find_volume+0x4f8>
 8012c3a:	bf00      	nop
 8012c3c:	20041364 	.word	0x20041364

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012c40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c44:	4413      	add	r3, r2
 8012c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c48:	8911      	ldrh	r1, [r2, #8]
 8012c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c4c:	8992      	ldrh	r2, [r2, #12]
 8012c4e:	0952      	lsrs	r2, r2, #5
 8012c50:	b292      	uxth	r2, r2
 8012c52:	fbb1 f2f2 	udiv	r2, r1, r2
 8012c56:	b292      	uxth	r2, r2
 8012c58:	4413      	add	r3, r2
 8012c5a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d201      	bcs.n	8012c68 <find_volume+0x314>
 8012c64:	230d      	movs	r3, #13
 8012c66:	e0f1      	b.n	8012e4c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6c:	1ad3      	subs	r3, r2, r3
 8012c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c70:	8952      	ldrh	r2, [r2, #10]
 8012c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c76:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d101      	bne.n	8012c82 <find_volume+0x32e>
 8012c7e:	230d      	movs	r3, #13
 8012c80:	e0e4      	b.n	8012e4c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012c82:	2303      	movs	r3, #3
 8012c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d802      	bhi.n	8012c98 <find_volume+0x344>
 8012c92:	2302      	movs	r3, #2
 8012c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c9e:	4293      	cmp	r3, r2
 8012ca0:	d802      	bhi.n	8012ca8 <find_volume+0x354>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	1c9a      	adds	r2, r3, #2
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cb4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012cb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cba:	441a      	add	r2, r3
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc4:	441a      	add	r2, r3
 8012cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cce:	2b03      	cmp	r3, #3
 8012cd0:	d11e      	bne.n	8012d10 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	3338      	adds	r3, #56	; 0x38
 8012cd6:	332a      	adds	r3, #42	; 0x2a
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7fe fad1 	bl	8011280 <ld_word>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d001      	beq.n	8012ce8 <find_volume+0x394>
 8012ce4:	230d      	movs	r3, #13
 8012ce6:	e0b1      	b.n	8012e4c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	891b      	ldrh	r3, [r3, #8]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d001      	beq.n	8012cf4 <find_volume+0x3a0>
 8012cf0:	230d      	movs	r3, #13
 8012cf2:	e0ab      	b.n	8012e4c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	3338      	adds	r3, #56	; 0x38
 8012cf8:	332c      	adds	r3, #44	; 0x2c
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fad8 	bl	80112b0 <ld_dword>
 8012d00:	4602      	mov	r2, r0
 8012d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d04:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d08:	69db      	ldr	r3, [r3, #28]
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8012d0e:	e01f      	b.n	8012d50 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	891b      	ldrh	r3, [r3, #8]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d101      	bne.n	8012d1c <find_volume+0x3c8>
 8012d18:	230d      	movs	r3, #13
 8012d1a:	e097      	b.n	8012e4c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d22:	441a      	add	r2, r3
 8012d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d26:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d2c:	2b02      	cmp	r3, #2
 8012d2e:	d103      	bne.n	8012d38 <find_volume+0x3e4>
 8012d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d32:	69db      	ldr	r3, [r3, #28]
 8012d34:	005b      	lsls	r3, r3, #1
 8012d36:	e00a      	b.n	8012d4e <find_volume+0x3fa>
 8012d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3a:	69da      	ldr	r2, [r3, #28]
 8012d3c:	4613      	mov	r3, r2
 8012d3e:	005b      	lsls	r3, r3, #1
 8012d40:	4413      	add	r3, r2
 8012d42:	085a      	lsrs	r2, r3, #1
 8012d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d46:	69db      	ldr	r3, [r3, #28]
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012d4e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	6a1a      	ldr	r2, [r3, #32]
 8012d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d56:	899b      	ldrh	r3, [r3, #12]
 8012d58:	4619      	mov	r1, r3
 8012d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d5c:	440b      	add	r3, r1
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d62:	8989      	ldrh	r1, [r1, #12]
 8012d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d201      	bcs.n	8012d70 <find_volume+0x41c>
 8012d6c:	230d      	movs	r3, #13
 8012d6e:	e06d      	b.n	8012e4c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d72:	f04f 32ff 	mov.w	r2, #4294967295
 8012d76:	615a      	str	r2, [r3, #20]
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	695a      	ldr	r2, [r3, #20]
 8012d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d82:	2280      	movs	r2, #128	; 0x80
 8012d84:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d8a:	2b03      	cmp	r3, #3
 8012d8c:	d149      	bne.n	8012e22 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	3338      	adds	r3, #56	; 0x38
 8012d92:	3330      	adds	r3, #48	; 0x30
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fe fa73 	bl	8011280 <ld_word>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d140      	bne.n	8012e22 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da2:	3301      	adds	r3, #1
 8012da4:	4619      	mov	r1, r3
 8012da6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012da8:	f7fe fd1a 	bl	80117e0 <move_window>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d137      	bne.n	8012e22 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	2200      	movs	r2, #0
 8012db6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dba:	3338      	adds	r3, #56	; 0x38
 8012dbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fe fa5d 	bl	8011280 <ld_word>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	461a      	mov	r2, r3
 8012dca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d127      	bne.n	8012e22 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd4:	3338      	adds	r3, #56	; 0x38
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fe fa6a 	bl	80112b0 <ld_dword>
 8012ddc:	4602      	mov	r2, r0
 8012dde:	4b1d      	ldr	r3, [pc, #116]	; (8012e54 <find_volume+0x500>)
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d11e      	bne.n	8012e22 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	3338      	adds	r3, #56	; 0x38
 8012de8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fe fa5f 	bl	80112b0 <ld_dword>
 8012df2:	4602      	mov	r2, r0
 8012df4:	4b18      	ldr	r3, [pc, #96]	; (8012e58 <find_volume+0x504>)
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d113      	bne.n	8012e22 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfc:	3338      	adds	r3, #56	; 0x38
 8012dfe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe fa54 	bl	80112b0 <ld_dword>
 8012e08:	4602      	mov	r2, r0
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e10:	3338      	adds	r3, #56	; 0x38
 8012e12:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fe fa4a 	bl	80112b0 <ld_dword>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e20:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e24:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012e28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012e2a:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <find_volume+0x508>)
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	4b0a      	ldr	r3, [pc, #40]	; (8012e5c <find_volume+0x508>)
 8012e34:	801a      	strh	r2, [r3, #0]
 8012e36:	4b09      	ldr	r3, [pc, #36]	; (8012e5c <find_volume+0x508>)
 8012e38:	881a      	ldrh	r2, [r3, #0]
 8012e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	2200      	movs	r2, #0
 8012e42:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012e44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e46:	f7fe fc63 	bl	8011710 <clear_lock>
#endif
	return FR_OK;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3758      	adds	r7, #88	; 0x58
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	41615252 	.word	0x41615252
 8012e58:	61417272 	.word	0x61417272
 8012e5c:	20041368 	.word	0x20041368

08012e60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012e6a:	2309      	movs	r3, #9
 8012e6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d01c      	beq.n	8012eae <validate+0x4e>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d018      	beq.n	8012eae <validate+0x4e>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d013      	beq.n	8012eae <validate+0x4e>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	889a      	ldrh	r2, [r3, #4]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	88db      	ldrh	r3, [r3, #6]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d10c      	bne.n	8012eae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	785b      	ldrb	r3, [r3, #1]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe f952 	bl	8011144 <disk_status>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	f003 0301 	and.w	r3, r3, #1
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d101      	bne.n	8012eae <validate+0x4e>
			res = FR_OK;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012eae:	7bfb      	ldrb	r3, [r7, #15]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d102      	bne.n	8012eba <validate+0x5a>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	e000      	b.n	8012ebc <validate+0x5c>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	683a      	ldr	r2, [r7, #0]
 8012ebe:	6013      	str	r3, [r2, #0]
	return res;
 8012ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
	...

08012ecc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b088      	sub	sp, #32
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012ede:	f107 0310 	add.w	r3, r7, #16
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7ff fc9b 	bl	801281e <get_ldnumber>
 8012ee8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	da01      	bge.n	8012ef4 <f_mount+0x28>
 8012ef0:	230b      	movs	r3, #11
 8012ef2:	e02b      	b.n	8012f4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ef4:	4a17      	ldr	r2, [pc, #92]	; (8012f54 <f_mount+0x88>)
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012efc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d005      	beq.n	8012f10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012f04:	69b8      	ldr	r0, [r7, #24]
 8012f06:	f7fe fc03 	bl	8011710 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d002      	beq.n	8012f1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012f1c:	68fa      	ldr	r2, [r7, #12]
 8012f1e:	490d      	ldr	r1, [pc, #52]	; (8012f54 <f_mount+0x88>)
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <f_mount+0x66>
 8012f2c:	79fb      	ldrb	r3, [r7, #7]
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d001      	beq.n	8012f36 <f_mount+0x6a>
 8012f32:	2300      	movs	r3, #0
 8012f34:	e00a      	b.n	8012f4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012f36:	f107 010c 	add.w	r1, r7, #12
 8012f3a:	f107 0308 	add.w	r3, r7, #8
 8012f3e:	2200      	movs	r2, #0
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff fd07 	bl	8012954 <find_volume>
 8012f46:	4603      	mov	r3, r0
 8012f48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3720      	adds	r7, #32
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	20041364 	.word	0x20041364

08012f58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b098      	sub	sp, #96	; 0x60
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	4613      	mov	r3, r2
 8012f64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <f_open+0x18>
 8012f6c:	2309      	movs	r3, #9
 8012f6e:	e1ba      	b.n	80132e6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012f70:	79fb      	ldrb	r3, [r7, #7]
 8012f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012f78:	79fa      	ldrb	r2, [r7, #7]
 8012f7a:	f107 0110 	add.w	r1, r7, #16
 8012f7e:	f107 0308 	add.w	r3, r7, #8
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff fce6 	bl	8012954 <find_volume>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f040 819e 	bne.w	80132d4 <f_open+0x37c>
		dj.obj.fs = fs;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	f107 0314 	add.w	r3, r7, #20
 8012fa2:	4611      	mov	r1, r2
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7ff fba5 	bl	80126f4 <follow_path>
 8012faa:	4603      	mov	r3, r0
 8012fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d11a      	bne.n	8012fee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012fb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012fbc:	b25b      	sxtb	r3, r3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	da03      	bge.n	8012fca <f_open+0x72>
				res = FR_INVALID_NAME;
 8012fc2:	2306      	movs	r3, #6
 8012fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fc8:	e011      	b.n	8012fee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012fca:	79fb      	ldrb	r3, [r7, #7]
 8012fcc:	f023 0301 	bic.w	r3, r3, #1
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	bf14      	ite	ne
 8012fd4:	2301      	movne	r3, #1
 8012fd6:	2300      	moveq	r3, #0
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	461a      	mov	r2, r3
 8012fdc:	f107 0314 	add.w	r3, r7, #20
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fe fa4c 	bl	8011480 <chk_lock>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012fee:	79fb      	ldrb	r3, [r7, #7]
 8012ff0:	f003 031c 	and.w	r3, r3, #28
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d07e      	beq.n	80130f6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d017      	beq.n	8013030 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013004:	2b04      	cmp	r3, #4
 8013006:	d10e      	bne.n	8013026 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013008:	f7fe fa96 	bl	8011538 <enq_lock>
 801300c:	4603      	mov	r3, r0
 801300e:	2b00      	cmp	r3, #0
 8013010:	d006      	beq.n	8013020 <f_open+0xc8>
 8013012:	f107 0314 	add.w	r3, r7, #20
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fa52 	bl	80124c0 <dir_register>
 801301c:	4603      	mov	r3, r0
 801301e:	e000      	b.n	8013022 <f_open+0xca>
 8013020:	2312      	movs	r3, #18
 8013022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013026:	79fb      	ldrb	r3, [r7, #7]
 8013028:	f043 0308 	orr.w	r3, r3, #8
 801302c:	71fb      	strb	r3, [r7, #7]
 801302e:	e010      	b.n	8013052 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013030:	7ebb      	ldrb	r3, [r7, #26]
 8013032:	f003 0311 	and.w	r3, r3, #17
 8013036:	2b00      	cmp	r3, #0
 8013038:	d003      	beq.n	8013042 <f_open+0xea>
					res = FR_DENIED;
 801303a:	2307      	movs	r3, #7
 801303c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013040:	e007      	b.n	8013052 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013042:	79fb      	ldrb	r3, [r7, #7]
 8013044:	f003 0304 	and.w	r3, r3, #4
 8013048:	2b00      	cmp	r3, #0
 801304a:	d002      	beq.n	8013052 <f_open+0xfa>
 801304c:	2308      	movs	r3, #8
 801304e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013056:	2b00      	cmp	r3, #0
 8013058:	d167      	bne.n	801312a <f_open+0x1d2>
 801305a:	79fb      	ldrb	r3, [r7, #7]
 801305c:	f003 0308 	and.w	r3, r3, #8
 8013060:	2b00      	cmp	r3, #0
 8013062:	d062      	beq.n	801312a <f_open+0x1d2>
				dw = GET_FATTIME();
 8013064:	4ba2      	ldr	r3, [pc, #648]	; (80132f0 <f_open+0x398>)
 8013066:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801306a:	330e      	adds	r3, #14
 801306c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801306e:	4618      	mov	r0, r3
 8013070:	f7fe f95c 	bl	801132c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013076:	3316      	adds	r3, #22
 8013078:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801307a:	4618      	mov	r0, r3
 801307c:	f7fe f956 	bl	801132c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013082:	330b      	adds	r3, #11
 8013084:	2220      	movs	r2, #32
 8013086:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801308c:	4611      	mov	r1, r2
 801308e:	4618      	mov	r0, r3
 8013090:	f7ff f925 	bl	80122de <ld_clust>
 8013094:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801309a:	2200      	movs	r2, #0
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff f93d 	bl	801231c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80130a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a4:	331c      	adds	r3, #28
 80130a6:	2100      	movs	r1, #0
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7fe f93f 	bl	801132c <st_dword>
					fs->wflag = 1;
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	2201      	movs	r2, #1
 80130b2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80130b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d037      	beq.n	801312a <f_open+0x1d2>
						dw = fs->winsect;
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130be:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80130c0:	f107 0314 	add.w	r3, r7, #20
 80130c4:	2200      	movs	r2, #0
 80130c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7fe fe2d 	bl	8011d28 <remove_chain>
 80130ce:	4603      	mov	r3, r0
 80130d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80130d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d126      	bne.n	801312a <f_open+0x1d2>
							res = move_window(fs, dw);
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7fe fb7d 	bl	80117e0 <move_window>
 80130e6:	4603      	mov	r3, r0
 80130e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80130f0:	3a01      	subs	r2, #1
 80130f2:	611a      	str	r2, [r3, #16]
 80130f4:	e019      	b.n	801312a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80130f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d115      	bne.n	801312a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80130fe:	7ebb      	ldrb	r3, [r7, #26]
 8013100:	f003 0310 	and.w	r3, r3, #16
 8013104:	2b00      	cmp	r3, #0
 8013106:	d003      	beq.n	8013110 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013108:	2304      	movs	r3, #4
 801310a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801310e:	e00c      	b.n	801312a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013110:	79fb      	ldrb	r3, [r7, #7]
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d007      	beq.n	801312a <f_open+0x1d2>
 801311a:	7ebb      	ldrb	r3, [r7, #26]
 801311c:	f003 0301 	and.w	r3, r3, #1
 8013120:	2b00      	cmp	r3, #0
 8013122:	d002      	beq.n	801312a <f_open+0x1d2>
						res = FR_DENIED;
 8013124:	2307      	movs	r3, #7
 8013126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801312a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801312e:	2b00      	cmp	r3, #0
 8013130:	d128      	bne.n	8013184 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013132:	79fb      	ldrb	r3, [r7, #7]
 8013134:	f003 0308 	and.w	r3, r3, #8
 8013138:	2b00      	cmp	r3, #0
 801313a:	d003      	beq.n	8013144 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801313c:	79fb      	ldrb	r3, [r7, #7]
 801313e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013142:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801314c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	f023 0301 	bic.w	r3, r3, #1
 8013158:	2b00      	cmp	r3, #0
 801315a:	bf14      	ite	ne
 801315c:	2301      	movne	r3, #1
 801315e:	2300      	moveq	r3, #0
 8013160:	b2db      	uxtb	r3, r3
 8013162:	461a      	mov	r2, r3
 8013164:	f107 0314 	add.w	r3, r7, #20
 8013168:	4611      	mov	r1, r2
 801316a:	4618      	mov	r0, r3
 801316c:	f7fe fa06 	bl	801157c <inc_lock>
 8013170:	4602      	mov	r2, r0
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	691b      	ldr	r3, [r3, #16]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d102      	bne.n	8013184 <f_open+0x22c>
 801317e:	2302      	movs	r3, #2
 8013180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013188:	2b00      	cmp	r3, #0
 801318a:	f040 80a3 	bne.w	80132d4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013192:	4611      	mov	r1, r2
 8013194:	4618      	mov	r0, r3
 8013196:	f7ff f8a2 	bl	80122de <ld_clust>
 801319a:	4602      	mov	r2, r0
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80131a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131a2:	331c      	adds	r3, #28
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fe f883 	bl	80112b0 <ld_dword>
 80131aa:	4602      	mov	r2, r0
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	2200      	movs	r2, #0
 80131b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80131b6:	693a      	ldr	r2, [r7, #16]
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	88da      	ldrh	r2, [r3, #6]
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	79fa      	ldrb	r2, [r7, #7]
 80131c8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2200      	movs	r2, #0
 80131ce:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	2200      	movs	r2, #0
 80131d4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2200      	movs	r2, #0
 80131da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	3330      	adds	r3, #48	; 0x30
 80131e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80131e4:	2100      	movs	r1, #0
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe f8ed 	bl	80113c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80131ec:	79fb      	ldrb	r3, [r7, #7]
 80131ee:	f003 0320 	and.w	r3, r3, #32
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d06e      	beq.n	80132d4 <f_open+0x37c>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	68db      	ldr	r3, [r3, #12]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d06a      	beq.n	80132d4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	68da      	ldr	r2, [r3, #12]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	895b      	ldrh	r3, [r3, #10]
 801320a:	461a      	mov	r2, r3
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	899b      	ldrh	r3, [r3, #12]
 8013210:	fb03 f302 	mul.w	r3, r3, r2
 8013214:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	68db      	ldr	r3, [r3, #12]
 8013220:	657b      	str	r3, [r7, #84]	; 0x54
 8013222:	e016      	b.n	8013252 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013228:	4618      	mov	r0, r3
 801322a:	f7fe fb96 	bl	801195a <get_fat>
 801322e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013232:	2b01      	cmp	r3, #1
 8013234:	d802      	bhi.n	801323c <f_open+0x2e4>
 8013236:	2302      	movs	r3, #2
 8013238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801323c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013242:	d102      	bne.n	801324a <f_open+0x2f2>
 8013244:	2301      	movs	r3, #1
 8013246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801324a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801324c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801324e:	1ad3      	subs	r3, r2, r3
 8013250:	657b      	str	r3, [r7, #84]	; 0x54
 8013252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013256:	2b00      	cmp	r3, #0
 8013258:	d103      	bne.n	8013262 <f_open+0x30a>
 801325a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801325c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801325e:	429a      	cmp	r2, r3
 8013260:	d8e0      	bhi.n	8013224 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013266:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801326c:	2b00      	cmp	r3, #0
 801326e:	d131      	bne.n	80132d4 <f_open+0x37c>
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	899b      	ldrh	r3, [r3, #12]
 8013274:	461a      	mov	r2, r3
 8013276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013278:	fbb3 f1f2 	udiv	r1, r3, r2
 801327c:	fb02 f201 	mul.w	r2, r2, r1
 8013280:	1a9b      	subs	r3, r3, r2
 8013282:	2b00      	cmp	r3, #0
 8013284:	d026      	beq.n	80132d4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801328a:	4618      	mov	r0, r3
 801328c:	f7fe fb46 	bl	801191c <clust2sect>
 8013290:	6478      	str	r0, [r7, #68]	; 0x44
 8013292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013294:	2b00      	cmp	r3, #0
 8013296:	d103      	bne.n	80132a0 <f_open+0x348>
						res = FR_INT_ERR;
 8013298:	2302      	movs	r3, #2
 801329a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801329e:	e019      	b.n	80132d4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	899b      	ldrh	r3, [r3, #12]
 80132a4:	461a      	mov	r2, r3
 80132a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80132ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ae:	441a      	add	r2, r3
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	7858      	ldrb	r0, [r3, #1]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6a1a      	ldr	r2, [r3, #32]
 80132c2:	2301      	movs	r3, #1
 80132c4:	f7fd ff7e 	bl	80111c4 <disk_read>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <f_open+0x37c>
 80132ce:	2301      	movs	r3, #1
 80132d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80132d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <f_open+0x38a>
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2200      	movs	r2, #0
 80132e0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80132e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3760      	adds	r7, #96	; 0x60
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	274a0000 	.word	0x274a0000

080132f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b08e      	sub	sp, #56	; 0x38
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	2200      	movs	r2, #0
 801330a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	f107 0214 	add.w	r2, r7, #20
 8013312:	4611      	mov	r1, r2
 8013314:	4618      	mov	r0, r3
 8013316:	f7ff fda3 	bl	8012e60 <validate>
 801331a:	4603      	mov	r3, r0
 801331c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013324:	2b00      	cmp	r3, #0
 8013326:	d107      	bne.n	8013338 <f_read+0x44>
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	7d5b      	ldrb	r3, [r3, #21]
 801332c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <f_read+0x4a>
 8013338:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801333c:	e135      	b.n	80135aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	7d1b      	ldrb	r3, [r3, #20]
 8013342:	f003 0301 	and.w	r3, r3, #1
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <f_read+0x5a>
 801334a:	2307      	movs	r3, #7
 801334c:	e12d      	b.n	80135aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	68da      	ldr	r2, [r3, #12]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	699b      	ldr	r3, [r3, #24]
 8013356:	1ad3      	subs	r3, r2, r3
 8013358:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	6a3b      	ldr	r3, [r7, #32]
 801335e:	429a      	cmp	r2, r3
 8013360:	f240 811e 	bls.w	80135a0 <f_read+0x2ac>
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013368:	e11a      	b.n	80135a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	699b      	ldr	r3, [r3, #24]
 801336e:	697a      	ldr	r2, [r7, #20]
 8013370:	8992      	ldrh	r2, [r2, #12]
 8013372:	fbb3 f1f2 	udiv	r1, r3, r2
 8013376:	fb02 f201 	mul.w	r2, r2, r1
 801337a:	1a9b      	subs	r3, r3, r2
 801337c:	2b00      	cmp	r3, #0
 801337e:	f040 80d5 	bne.w	801352c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	699b      	ldr	r3, [r3, #24]
 8013386:	697a      	ldr	r2, [r7, #20]
 8013388:	8992      	ldrh	r2, [r2, #12]
 801338a:	fbb3 f3f2 	udiv	r3, r3, r2
 801338e:	697a      	ldr	r2, [r7, #20]
 8013390:	8952      	ldrh	r2, [r2, #10]
 8013392:	3a01      	subs	r2, #1
 8013394:	4013      	ands	r3, r2
 8013396:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d12f      	bne.n	80133fe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	699b      	ldr	r3, [r3, #24]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d103      	bne.n	80133ae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	689b      	ldr	r3, [r3, #8]
 80133aa:	633b      	str	r3, [r7, #48]	; 0x30
 80133ac:	e013      	b.n	80133d6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d007      	beq.n	80133c6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	4619      	mov	r1, r3
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	f7fe fdb0 	bl	8011f22 <clmt_clust>
 80133c2:	6338      	str	r0, [r7, #48]	; 0x30
 80133c4:	e007      	b.n	80133d6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80133c6:	68fa      	ldr	r2, [r7, #12]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	4619      	mov	r1, r3
 80133ce:	4610      	mov	r0, r2
 80133d0:	f7fe fac3 	bl	801195a <get_fat>
 80133d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80133d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d804      	bhi.n	80133e6 <f_read+0xf2>
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2202      	movs	r2, #2
 80133e0:	755a      	strb	r2, [r3, #21]
 80133e2:	2302      	movs	r3, #2
 80133e4:	e0e1      	b.n	80135aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ec:	d104      	bne.n	80133f8 <f_read+0x104>
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2201      	movs	r2, #1
 80133f2:	755a      	strb	r2, [r3, #21]
 80133f4:	2301      	movs	r3, #1
 80133f6:	e0d8      	b.n	80135aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80133fe:	697a      	ldr	r2, [r7, #20]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	69db      	ldr	r3, [r3, #28]
 8013404:	4619      	mov	r1, r3
 8013406:	4610      	mov	r0, r2
 8013408:	f7fe fa88 	bl	801191c <clust2sect>
 801340c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d104      	bne.n	801341e <f_read+0x12a>
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	2202      	movs	r2, #2
 8013418:	755a      	strb	r2, [r3, #21]
 801341a:	2302      	movs	r3, #2
 801341c:	e0c5      	b.n	80135aa <f_read+0x2b6>
			sect += csect;
 801341e:	69ba      	ldr	r2, [r7, #24]
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	4413      	add	r3, r2
 8013424:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	899b      	ldrh	r3, [r3, #12]
 801342a:	461a      	mov	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013432:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013436:	2b00      	cmp	r3, #0
 8013438:	d041      	beq.n	80134be <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801343a:	69fa      	ldr	r2, [r7, #28]
 801343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343e:	4413      	add	r3, r2
 8013440:	697a      	ldr	r2, [r7, #20]
 8013442:	8952      	ldrh	r2, [r2, #10]
 8013444:	4293      	cmp	r3, r2
 8013446:	d905      	bls.n	8013454 <f_read+0x160>
					cc = fs->csize - csect;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	895b      	ldrh	r3, [r3, #10]
 801344c:	461a      	mov	r2, r3
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	1ad3      	subs	r3, r2, r3
 8013452:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	7858      	ldrb	r0, [r3, #1]
 8013458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345a:	69ba      	ldr	r2, [r7, #24]
 801345c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801345e:	f7fd feb1 	bl	80111c4 <disk_read>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d004      	beq.n	8013472 <f_read+0x17e>
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2201      	movs	r2, #1
 801346c:	755a      	strb	r2, [r3, #21]
 801346e:	2301      	movs	r3, #1
 8013470:	e09b      	b.n	80135aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	7d1b      	ldrb	r3, [r3, #20]
 8013476:	b25b      	sxtb	r3, r3
 8013478:	2b00      	cmp	r3, #0
 801347a:	da18      	bge.n	80134ae <f_read+0x1ba>
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	6a1a      	ldr	r2, [r3, #32]
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	1ad3      	subs	r3, r2, r3
 8013484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013486:	429a      	cmp	r2, r3
 8013488:	d911      	bls.n	80134ae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6a1a      	ldr	r2, [r3, #32]
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	1ad3      	subs	r3, r2, r3
 8013492:	697a      	ldr	r2, [r7, #20]
 8013494:	8992      	ldrh	r2, [r2, #12]
 8013496:	fb02 f303 	mul.w	r3, r2, r3
 801349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801349c:	18d0      	adds	r0, r2, r3
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	899b      	ldrh	r3, [r3, #12]
 80134a8:	461a      	mov	r2, r3
 80134aa:	f7fd ff6b 	bl	8011384 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	899b      	ldrh	r3, [r3, #12]
 80134b2:	461a      	mov	r2, r3
 80134b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b6:	fb02 f303 	mul.w	r3, r2, r3
 80134ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80134bc:	e05c      	b.n	8013578 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6a1b      	ldr	r3, [r3, #32]
 80134c2:	69ba      	ldr	r2, [r7, #24]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d02e      	beq.n	8013526 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	7d1b      	ldrb	r3, [r3, #20]
 80134cc:	b25b      	sxtb	r3, r3
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	da18      	bge.n	8013504 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	7858      	ldrb	r0, [r3, #1]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	6a1a      	ldr	r2, [r3, #32]
 80134e0:	2301      	movs	r3, #1
 80134e2:	f7fd fe8f 	bl	8011204 <disk_write>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d004      	beq.n	80134f6 <f_read+0x202>
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2201      	movs	r2, #1
 80134f0:	755a      	strb	r2, [r3, #21]
 80134f2:	2301      	movs	r3, #1
 80134f4:	e059      	b.n	80135aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	7d1b      	ldrb	r3, [r3, #20]
 80134fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134fe:	b2da      	uxtb	r2, r3
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	7858      	ldrb	r0, [r3, #1]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801350e:	2301      	movs	r3, #1
 8013510:	69ba      	ldr	r2, [r7, #24]
 8013512:	f7fd fe57 	bl	80111c4 <disk_read>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	d004      	beq.n	8013526 <f_read+0x232>
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2201      	movs	r2, #1
 8013520:	755a      	strb	r2, [r3, #21]
 8013522:	2301      	movs	r3, #1
 8013524:	e041      	b.n	80135aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	69ba      	ldr	r2, [r7, #24]
 801352a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	899b      	ldrh	r3, [r3, #12]
 8013530:	4618      	mov	r0, r3
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	699b      	ldr	r3, [r3, #24]
 8013536:	697a      	ldr	r2, [r7, #20]
 8013538:	8992      	ldrh	r2, [r2, #12]
 801353a:	fbb3 f1f2 	udiv	r1, r3, r2
 801353e:	fb02 f201 	mul.w	r2, r2, r1
 8013542:	1a9b      	subs	r3, r3, r2
 8013544:	1ac3      	subs	r3, r0, r3
 8013546:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	429a      	cmp	r2, r3
 801354e:	d901      	bls.n	8013554 <f_read+0x260>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	699b      	ldr	r3, [r3, #24]
 801355e:	697a      	ldr	r2, [r7, #20]
 8013560:	8992      	ldrh	r2, [r2, #12]
 8013562:	fbb3 f0f2 	udiv	r0, r3, r2
 8013566:	fb02 f200 	mul.w	r2, r2, r0
 801356a:	1a9b      	subs	r3, r3, r2
 801356c:	440b      	add	r3, r1
 801356e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013570:	4619      	mov	r1, r3
 8013572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013574:	f7fd ff06 	bl	8011384 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801357c:	4413      	add	r3, r2
 801357e:	627b      	str	r3, [r7, #36]	; 0x24
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	699a      	ldr	r2, [r3, #24]
 8013584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013586:	441a      	add	r2, r3
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	619a      	str	r2, [r3, #24]
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	681a      	ldr	r2, [r3, #0]
 8013590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013592:	441a      	add	r2, r3
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	601a      	str	r2, [r3, #0]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359c:	1ad3      	subs	r3, r2, r3
 801359e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	f47f aee1 	bne.w	801336a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80135a8:	2300      	movs	r3, #0
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3738      	adds	r7, #56	; 0x38
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}

080135b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80135b2:	b580      	push	{r7, lr}
 80135b4:	b08c      	sub	sp, #48	; 0x30
 80135b6:	af00      	add	r7, sp, #0
 80135b8:	60f8      	str	r0, [r7, #12]
 80135ba:	60b9      	str	r1, [r7, #8]
 80135bc:	607a      	str	r2, [r7, #4]
 80135be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	2200      	movs	r2, #0
 80135c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	f107 0210 	add.w	r2, r7, #16
 80135d0:	4611      	mov	r1, r2
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff fc44 	bl	8012e60 <validate>
 80135d8:	4603      	mov	r3, r0
 80135da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80135de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d107      	bne.n	80135f6 <f_write+0x44>
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	7d5b      	ldrb	r3, [r3, #21]
 80135ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80135ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d002      	beq.n	80135fc <f_write+0x4a>
 80135f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135fa:	e16a      	b.n	80138d2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	7d1b      	ldrb	r3, [r3, #20]
 8013600:	f003 0302 	and.w	r3, r3, #2
 8013604:	2b00      	cmp	r3, #0
 8013606:	d101      	bne.n	801360c <f_write+0x5a>
 8013608:	2307      	movs	r3, #7
 801360a:	e162      	b.n	80138d2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	699a      	ldr	r2, [r3, #24]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	441a      	add	r2, r3
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	699b      	ldr	r3, [r3, #24]
 8013618:	429a      	cmp	r2, r3
 801361a:	f080 814c 	bcs.w	80138b6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	699b      	ldr	r3, [r3, #24]
 8013622:	43db      	mvns	r3, r3
 8013624:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013626:	e146      	b.n	80138b6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	699b      	ldr	r3, [r3, #24]
 801362c:	693a      	ldr	r2, [r7, #16]
 801362e:	8992      	ldrh	r2, [r2, #12]
 8013630:	fbb3 f1f2 	udiv	r1, r3, r2
 8013634:	fb02 f201 	mul.w	r2, r2, r1
 8013638:	1a9b      	subs	r3, r3, r2
 801363a:	2b00      	cmp	r3, #0
 801363c:	f040 80f1 	bne.w	8013822 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	699b      	ldr	r3, [r3, #24]
 8013644:	693a      	ldr	r2, [r7, #16]
 8013646:	8992      	ldrh	r2, [r2, #12]
 8013648:	fbb3 f3f2 	udiv	r3, r3, r2
 801364c:	693a      	ldr	r2, [r7, #16]
 801364e:	8952      	ldrh	r2, [r2, #10]
 8013650:	3a01      	subs	r2, #1
 8013652:	4013      	ands	r3, r2
 8013654:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d143      	bne.n	80136e4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	699b      	ldr	r3, [r3, #24]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10c      	bne.n	801367e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	689b      	ldr	r3, [r3, #8]
 8013668:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366c:	2b00      	cmp	r3, #0
 801366e:	d11a      	bne.n	80136a6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2100      	movs	r1, #0
 8013674:	4618      	mov	r0, r3
 8013676:	f7fe fbbc 	bl	8011df2 <create_chain>
 801367a:	62b8      	str	r0, [r7, #40]	; 0x28
 801367c:	e013      	b.n	80136a6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013682:	2b00      	cmp	r3, #0
 8013684:	d007      	beq.n	8013696 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	699b      	ldr	r3, [r3, #24]
 801368a:	4619      	mov	r1, r3
 801368c:	68f8      	ldr	r0, [r7, #12]
 801368e:	f7fe fc48 	bl	8011f22 <clmt_clust>
 8013692:	62b8      	str	r0, [r7, #40]	; 0x28
 8013694:	e007      	b.n	80136a6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013696:	68fa      	ldr	r2, [r7, #12]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	69db      	ldr	r3, [r3, #28]
 801369c:	4619      	mov	r1, r3
 801369e:	4610      	mov	r0, r2
 80136a0:	f7fe fba7 	bl	8011df2 <create_chain>
 80136a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80136a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f000 8109 	beq.w	80138c0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80136ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d104      	bne.n	80136be <f_write+0x10c>
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2202      	movs	r2, #2
 80136b8:	755a      	strb	r2, [r3, #21]
 80136ba:	2302      	movs	r3, #2
 80136bc:	e109      	b.n	80138d2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80136be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c4:	d104      	bne.n	80136d0 <f_write+0x11e>
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	2201      	movs	r2, #1
 80136ca:	755a      	strb	r2, [r3, #21]
 80136cc:	2301      	movs	r3, #1
 80136ce:	e100      	b.n	80138d2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	689b      	ldr	r3, [r3, #8]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d102      	bne.n	80136e4 <f_write+0x132>
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	7d1b      	ldrb	r3, [r3, #20]
 80136e8:	b25b      	sxtb	r3, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	da18      	bge.n	8013720 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	7858      	ldrb	r0, [r3, #1]
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	6a1a      	ldr	r2, [r3, #32]
 80136fc:	2301      	movs	r3, #1
 80136fe:	f7fd fd81 	bl	8011204 <disk_write>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d004      	beq.n	8013712 <f_write+0x160>
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2201      	movs	r2, #1
 801370c:	755a      	strb	r2, [r3, #21]
 801370e:	2301      	movs	r3, #1
 8013710:	e0df      	b.n	80138d2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	7d1b      	ldrb	r3, [r3, #20]
 8013716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801371a:	b2da      	uxtb	r2, r3
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013720:	693a      	ldr	r2, [r7, #16]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	69db      	ldr	r3, [r3, #28]
 8013726:	4619      	mov	r1, r3
 8013728:	4610      	mov	r0, r2
 801372a:	f7fe f8f7 	bl	801191c <clust2sect>
 801372e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d104      	bne.n	8013740 <f_write+0x18e>
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2202      	movs	r2, #2
 801373a:	755a      	strb	r2, [r3, #21]
 801373c:	2302      	movs	r3, #2
 801373e:	e0c8      	b.n	80138d2 <f_write+0x320>
			sect += csect;
 8013740:	697a      	ldr	r2, [r7, #20]
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	4413      	add	r3, r2
 8013746:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	899b      	ldrh	r3, [r3, #12]
 801374c:	461a      	mov	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	fbb3 f3f2 	udiv	r3, r3, r2
 8013754:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013756:	6a3b      	ldr	r3, [r7, #32]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d043      	beq.n	80137e4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801375c:	69ba      	ldr	r2, [r7, #24]
 801375e:	6a3b      	ldr	r3, [r7, #32]
 8013760:	4413      	add	r3, r2
 8013762:	693a      	ldr	r2, [r7, #16]
 8013764:	8952      	ldrh	r2, [r2, #10]
 8013766:	4293      	cmp	r3, r2
 8013768:	d905      	bls.n	8013776 <f_write+0x1c4>
					cc = fs->csize - csect;
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	895b      	ldrh	r3, [r3, #10]
 801376e:	461a      	mov	r2, r3
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	1ad3      	subs	r3, r2, r3
 8013774:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	7858      	ldrb	r0, [r3, #1]
 801377a:	6a3b      	ldr	r3, [r7, #32]
 801377c:	697a      	ldr	r2, [r7, #20]
 801377e:	69f9      	ldr	r1, [r7, #28]
 8013780:	f7fd fd40 	bl	8011204 <disk_write>
 8013784:	4603      	mov	r3, r0
 8013786:	2b00      	cmp	r3, #0
 8013788:	d004      	beq.n	8013794 <f_write+0x1e2>
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2201      	movs	r2, #1
 801378e:	755a      	strb	r2, [r3, #21]
 8013790:	2301      	movs	r3, #1
 8013792:	e09e      	b.n	80138d2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	6a1a      	ldr	r2, [r3, #32]
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	6a3a      	ldr	r2, [r7, #32]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d918      	bls.n	80137d4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	6a1a      	ldr	r2, [r3, #32]
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	8992      	ldrh	r2, [r2, #12]
 80137b4:	fb02 f303 	mul.w	r3, r2, r3
 80137b8:	69fa      	ldr	r2, [r7, #28]
 80137ba:	18d1      	adds	r1, r2, r3
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	899b      	ldrh	r3, [r3, #12]
 80137c0:	461a      	mov	r2, r3
 80137c2:	f7fd fddf 	bl	8011384 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	7d1b      	ldrb	r3, [r3, #20]
 80137ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137ce:	b2da      	uxtb	r2, r3
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	899b      	ldrh	r3, [r3, #12]
 80137d8:	461a      	mov	r2, r3
 80137da:	6a3b      	ldr	r3, [r7, #32]
 80137dc:	fb02 f303 	mul.w	r3, r2, r3
 80137e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80137e2:	e04b      	b.n	801387c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	6a1b      	ldr	r3, [r3, #32]
 80137e8:	697a      	ldr	r2, [r7, #20]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d016      	beq.n	801381c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	699a      	ldr	r2, [r3, #24]
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d210      	bcs.n	801381c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	7858      	ldrb	r0, [r3, #1]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013804:	2301      	movs	r3, #1
 8013806:	697a      	ldr	r2, [r7, #20]
 8013808:	f7fd fcdc 	bl	80111c4 <disk_read>
 801380c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801380e:	2b00      	cmp	r3, #0
 8013810:	d004      	beq.n	801381c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2201      	movs	r2, #1
 8013816:	755a      	strb	r2, [r3, #21]
 8013818:	2301      	movs	r3, #1
 801381a:	e05a      	b.n	80138d2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	697a      	ldr	r2, [r7, #20]
 8013820:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	899b      	ldrh	r3, [r3, #12]
 8013826:	4618      	mov	r0, r3
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	699b      	ldr	r3, [r3, #24]
 801382c:	693a      	ldr	r2, [r7, #16]
 801382e:	8992      	ldrh	r2, [r2, #12]
 8013830:	fbb3 f1f2 	udiv	r1, r3, r2
 8013834:	fb02 f201 	mul.w	r2, r2, r1
 8013838:	1a9b      	subs	r3, r3, r2
 801383a:	1ac3      	subs	r3, r0, r3
 801383c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	429a      	cmp	r2, r3
 8013844:	d901      	bls.n	801384a <f_write+0x298>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	699b      	ldr	r3, [r3, #24]
 8013854:	693a      	ldr	r2, [r7, #16]
 8013856:	8992      	ldrh	r2, [r2, #12]
 8013858:	fbb3 f0f2 	udiv	r0, r3, r2
 801385c:	fb02 f200 	mul.w	r2, r2, r0
 8013860:	1a9b      	subs	r3, r3, r2
 8013862:	440b      	add	r3, r1
 8013864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013866:	69f9      	ldr	r1, [r7, #28]
 8013868:	4618      	mov	r0, r3
 801386a:	f7fd fd8b 	bl	8011384 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	7d1b      	ldrb	r3, [r3, #20]
 8013872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013876:	b2da      	uxtb	r2, r3
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801387c:	69fa      	ldr	r2, [r7, #28]
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	4413      	add	r3, r2
 8013882:	61fb      	str	r3, [r7, #28]
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	699a      	ldr	r2, [r3, #24]
 8013888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388a:	441a      	add	r2, r3
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	619a      	str	r2, [r3, #24]
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	68da      	ldr	r2, [r3, #12]
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	699b      	ldr	r3, [r3, #24]
 8013898:	429a      	cmp	r2, r3
 801389a:	bf38      	it	cc
 801389c:	461a      	movcc	r2, r3
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	60da      	str	r2, [r3, #12]
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a8:	441a      	add	r2, r3
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	601a      	str	r2, [r3, #0]
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b2:	1ad3      	subs	r3, r2, r3
 80138b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f47f aeb5 	bne.w	8013628 <f_write+0x76>
 80138be:	e000      	b.n	80138c2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80138c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	7d1b      	ldrb	r3, [r3, #20]
 80138c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138ca:	b2da      	uxtb	r2, r3
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3730      	adds	r7, #48	; 0x30
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
	...

080138dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b086      	sub	sp, #24
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f107 0208 	add.w	r2, r7, #8
 80138ea:	4611      	mov	r1, r2
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7ff fab7 	bl	8012e60 <validate>
 80138f2:	4603      	mov	r3, r0
 80138f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80138f6:	7dfb      	ldrb	r3, [r7, #23]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d167      	bne.n	80139cc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	7d1b      	ldrb	r3, [r3, #20]
 8013900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013904:	2b00      	cmp	r3, #0
 8013906:	d061      	beq.n	80139cc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	7d1b      	ldrb	r3, [r3, #20]
 801390c:	b25b      	sxtb	r3, r3
 801390e:	2b00      	cmp	r3, #0
 8013910:	da15      	bge.n	801393e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	7858      	ldrb	r0, [r3, #1]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6a1a      	ldr	r2, [r3, #32]
 8013920:	2301      	movs	r3, #1
 8013922:	f7fd fc6f 	bl	8011204 <disk_write>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d001      	beq.n	8013930 <f_sync+0x54>
 801392c:	2301      	movs	r3, #1
 801392e:	e04e      	b.n	80139ce <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	7d1b      	ldrb	r3, [r3, #20]
 8013934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013938:	b2da      	uxtb	r2, r3
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801393e:	4b26      	ldr	r3, [pc, #152]	; (80139d8 <f_sync+0xfc>)
 8013940:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013942:	68ba      	ldr	r2, [r7, #8]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013948:	4619      	mov	r1, r3
 801394a:	4610      	mov	r0, r2
 801394c:	f7fd ff48 	bl	80117e0 <move_window>
 8013950:	4603      	mov	r3, r0
 8013952:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013954:	7dfb      	ldrb	r3, [r7, #23]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d138      	bne.n	80139cc <f_sync+0xf0>
					dir = fp->dir_ptr;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801395e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	330b      	adds	r3, #11
 8013964:	781a      	ldrb	r2, [r3, #0]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	330b      	adds	r3, #11
 801396a:	f042 0220 	orr.w	r2, r2, #32
 801396e:	b2d2      	uxtb	r2, r2
 8013970:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6818      	ldr	r0, [r3, #0]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	689b      	ldr	r3, [r3, #8]
 801397a:	461a      	mov	r2, r3
 801397c:	68f9      	ldr	r1, [r7, #12]
 801397e:	f7fe fccd 	bl	801231c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f103 021c 	add.w	r2, r3, #28
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f7fd fccc 	bl	801132c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3316      	adds	r3, #22
 8013998:	6939      	ldr	r1, [r7, #16]
 801399a:	4618      	mov	r0, r3
 801399c:	f7fd fcc6 	bl	801132c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	3312      	adds	r3, #18
 80139a4:	2100      	movs	r1, #0
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fd fca5 	bl	80112f6 <st_word>
					fs->wflag = 1;
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	2201      	movs	r2, #1
 80139b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fd ff41 	bl	801183c <sync_fs>
 80139ba:	4603      	mov	r3, r0
 80139bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	7d1b      	ldrb	r3, [r3, #20]
 80139c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80139c6:	b2da      	uxtb	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80139cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3718      	adds	r7, #24
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	274a0000 	.word	0x274a0000

080139dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f7ff ff79 	bl	80138dc <f_sync>
 80139ea:	4603      	mov	r3, r0
 80139ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80139ee:	7bfb      	ldrb	r3, [r7, #15]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d118      	bne.n	8013a26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f107 0208 	add.w	r2, r7, #8
 80139fa:	4611      	mov	r1, r2
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff fa2f 	bl	8012e60 <validate>
 8013a02:	4603      	mov	r3, r0
 8013a04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013a06:	7bfb      	ldrb	r3, [r7, #15]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d10c      	bne.n	8013a26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	691b      	ldr	r3, [r3, #16]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7fd fe41 	bl	8011698 <dec_lock>
 8013a16:	4603      	mov	r3, r0
 8013a18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013a1a:	7bfb      	ldrb	r3, [r7, #15]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d102      	bne.n	8013a26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2200      	movs	r2, #0
 8013a24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}

08013a30 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b091      	sub	sp, #68	; 0x44
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013a38:	f107 0108 	add.w	r1, r7, #8
 8013a3c:	1d3b      	adds	r3, r7, #4
 8013a3e:	2200      	movs	r2, #0
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fe ff87 	bl	8012954 <find_volume>
 8013a46:	4603      	mov	r3, r0
 8013a48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013a4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d131      	bne.n	8013ab8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	f107 030c 	add.w	r3, r7, #12
 8013a5e:	4611      	mov	r1, r2
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fe fe47 	bl	80126f4 <follow_path>
 8013a66:	4603      	mov	r3, r0
 8013a68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013a6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d11a      	bne.n	8013aaa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013a74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013a78:	b25b      	sxtb	r3, r3
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	da03      	bge.n	8013a86 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	697a      	ldr	r2, [r7, #20]
 8013a82:	619a      	str	r2, [r3, #24]
 8013a84:	e011      	b.n	8013aaa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013a86:	7cbb      	ldrb	r3, [r7, #18]
 8013a88:	f003 0310 	and.w	r3, r3, #16
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d009      	beq.n	8013aa4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a94:	68bc      	ldr	r4, [r7, #8]
 8013a96:	4611      	mov	r1, r2
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7fe fc20 	bl	80122de <ld_clust>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	61a3      	str	r3, [r4, #24]
 8013aa2:	e002      	b.n	8013aaa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013aa4:	2305      	movs	r3, #5
 8013aa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013aae:	2b04      	cmp	r3, #4
 8013ab0:	d102      	bne.n	8013ab8 <f_chdir+0x88>
 8013ab2:	2305      	movs	r3, #5
 8013ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3744      	adds	r7, #68	; 0x44
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd90      	pop	{r4, r7, pc}

08013ac4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b090      	sub	sp, #64	; 0x40
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f107 0208 	add.w	r2, r7, #8
 8013ad4:	4611      	mov	r1, r2
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7ff f9c2 	bl	8012e60 <validate>
 8013adc:	4603      	mov	r3, r0
 8013ade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013ae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d103      	bne.n	8013af2 <f_lseek+0x2e>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	7d5b      	ldrb	r3, [r3, #21]
 8013aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013af2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d002      	beq.n	8013b00 <f_lseek+0x3c>
 8013afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013afe:	e201      	b.n	8013f04 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f000 80d9 	beq.w	8013cbc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b10:	d15a      	bne.n	8013bc8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b16:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	1d1a      	adds	r2, r3, #4
 8013b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	617b      	str	r3, [r7, #20]
 8013b22:	2302      	movs	r3, #2
 8013b24:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d03a      	beq.n	8013ba8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b34:	613b      	str	r3, [r7, #16]
 8013b36:	2300      	movs	r3, #0
 8013b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3c:	3302      	adds	r3, #2
 8013b3e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b42:	60fb      	str	r3, [r7, #12]
 8013b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b46:	3301      	adds	r3, #1
 8013b48:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7fd ff03 	bl	801195a <get_fat>
 8013b54:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d804      	bhi.n	8013b66 <f_lseek+0xa2>
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2202      	movs	r2, #2
 8013b60:	755a      	strb	r2, [r3, #21]
 8013b62:	2302      	movs	r3, #2
 8013b64:	e1ce      	b.n	8013f04 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b6c:	d104      	bne.n	8013b78 <f_lseek+0xb4>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2201      	movs	r2, #1
 8013b72:	755a      	strb	r2, [r3, #21]
 8013b74:	2301      	movs	r3, #1
 8013b76:	e1c5      	b.n	8013f04 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d0de      	beq.n	8013b40 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d809      	bhi.n	8013b9e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8c:	1d1a      	adds	r2, r3, #4
 8013b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8013b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b96:	1d1a      	adds	r2, r3, #4
 8013b98:	627a      	str	r2, [r7, #36]	; 0x24
 8013b9a:	693a      	ldr	r2, [r7, #16]
 8013b9c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	69db      	ldr	r3, [r3, #28]
 8013ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d3c4      	bcc.n	8013b32 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d803      	bhi.n	8013bc0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	2200      	movs	r2, #0
 8013bbc:	601a      	str	r2, [r3, #0]
 8013bbe:	e19f      	b.n	8013f00 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013bc0:	2311      	movs	r3, #17
 8013bc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013bc6:	e19b      	b.n	8013f00 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	683a      	ldr	r2, [r7, #0]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d902      	bls.n	8013bd8 <f_lseek+0x114>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	683a      	ldr	r2, [r7, #0]
 8013bdc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f000 818d 	beq.w	8013f00 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	3b01      	subs	r3, #1
 8013bea:	4619      	mov	r1, r3
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7fe f998 	bl	8011f22 <clmt_clust>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013bf8:	68ba      	ldr	r2, [r7, #8]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	69db      	ldr	r3, [r3, #28]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4610      	mov	r0, r2
 8013c02:	f7fd fe8b 	bl	801191c <clust2sect>
 8013c06:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d104      	bne.n	8013c18 <f_lseek+0x154>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2202      	movs	r2, #2
 8013c12:	755a      	strb	r2, [r3, #21]
 8013c14:	2302      	movs	r3, #2
 8013c16:	e175      	b.n	8013f04 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	68ba      	ldr	r2, [r7, #8]
 8013c1e:	8992      	ldrh	r2, [r2, #12]
 8013c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c24:	68ba      	ldr	r2, [r7, #8]
 8013c26:	8952      	ldrh	r2, [r2, #10]
 8013c28:	3a01      	subs	r2, #1
 8013c2a:	4013      	ands	r3, r2
 8013c2c:	69ba      	ldr	r2, [r7, #24]
 8013c2e:	4413      	add	r3, r2
 8013c30:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	699b      	ldr	r3, [r3, #24]
 8013c36:	68ba      	ldr	r2, [r7, #8]
 8013c38:	8992      	ldrh	r2, [r2, #12]
 8013c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c3e:	fb02 f201 	mul.w	r2, r2, r1
 8013c42:	1a9b      	subs	r3, r3, r2
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f000 815b 	beq.w	8013f00 <f_lseek+0x43c>
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6a1b      	ldr	r3, [r3, #32]
 8013c4e:	69ba      	ldr	r2, [r7, #24]
 8013c50:	429a      	cmp	r2, r3
 8013c52:	f000 8155 	beq.w	8013f00 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	7d1b      	ldrb	r3, [r3, #20]
 8013c5a:	b25b      	sxtb	r3, r3
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	da18      	bge.n	8013c92 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	7858      	ldrb	r0, [r3, #1]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6a1a      	ldr	r2, [r3, #32]
 8013c6e:	2301      	movs	r3, #1
 8013c70:	f7fd fac8 	bl	8011204 <disk_write>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d004      	beq.n	8013c84 <f_lseek+0x1c0>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	755a      	strb	r2, [r3, #21]
 8013c80:	2301      	movs	r3, #1
 8013c82:	e13f      	b.n	8013f04 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	7d1b      	ldrb	r3, [r3, #20]
 8013c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	7858      	ldrb	r0, [r3, #1]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	69ba      	ldr	r2, [r7, #24]
 8013ca0:	f7fd fa90 	bl	80111c4 <disk_read>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d004      	beq.n	8013cb4 <f_lseek+0x1f0>
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2201      	movs	r2, #1
 8013cae:	755a      	strb	r2, [r3, #21]
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	e127      	b.n	8013f04 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	69ba      	ldr	r2, [r7, #24]
 8013cb8:	621a      	str	r2, [r3, #32]
 8013cba:	e121      	b.n	8013f00 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	683a      	ldr	r2, [r7, #0]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d908      	bls.n	8013cd8 <f_lseek+0x214>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	7d1b      	ldrb	r3, [r3, #20]
 8013cca:	f003 0302 	and.w	r3, r3, #2
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d102      	bne.n	8013cd8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	699b      	ldr	r3, [r3, #24]
 8013cdc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ce6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f000 80b5 	beq.w	8013e5a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	895b      	ldrh	r3, [r3, #10]
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	899b      	ldrh	r3, [r3, #12]
 8013cfa:	fb03 f302 	mul.w	r3, r3, r2
 8013cfe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013d00:	6a3b      	ldr	r3, [r7, #32]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d01b      	beq.n	8013d3e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	1e5a      	subs	r2, r3, #1
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013d10:	6a3b      	ldr	r3, [r7, #32]
 8013d12:	1e59      	subs	r1, r3, #1
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d30f      	bcc.n	8013d3e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013d1e:	6a3b      	ldr	r3, [r7, #32]
 8013d20:	1e5a      	subs	r2, r3, #1
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	425b      	negs	r3, r3
 8013d26:	401a      	ands	r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	699b      	ldr	r3, [r3, #24]
 8013d30:	683a      	ldr	r2, [r7, #0]
 8013d32:	1ad3      	subs	r3, r2, r3
 8013d34:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	69db      	ldr	r3, [r3, #28]
 8013d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d3c:	e022      	b.n	8013d84 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	689b      	ldr	r3, [r3, #8]
 8013d42:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d119      	bne.n	8013d7e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fe f84f 	bl	8011df2 <create_chain>
 8013d54:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d104      	bne.n	8013d66 <f_lseek+0x2a2>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2202      	movs	r2, #2
 8013d60:	755a      	strb	r2, [r3, #21]
 8013d62:	2302      	movs	r3, #2
 8013d64:	e0ce      	b.n	8013f04 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6c:	d104      	bne.n	8013d78 <f_lseek+0x2b4>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2201      	movs	r2, #1
 8013d72:	755a      	strb	r2, [r3, #21]
 8013d74:	2301      	movs	r3, #1
 8013d76:	e0c5      	b.n	8013f04 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d7c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d82:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d067      	beq.n	8013e5a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013d8a:	e03a      	b.n	8013e02 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013d8c:	683a      	ldr	r2, [r7, #0]
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	1ad3      	subs	r3, r2, r3
 8013d92:	603b      	str	r3, [r7, #0]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	699a      	ldr	r2, [r3, #24]
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	441a      	add	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	7d1b      	ldrb	r3, [r3, #20]
 8013da4:	f003 0302 	and.w	r3, r3, #2
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00b      	beq.n	8013dc4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fe f81e 	bl	8011df2 <create_chain>
 8013db6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d108      	bne.n	8013dd0 <f_lseek+0x30c>
							ofs = 0; break;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	603b      	str	r3, [r7, #0]
 8013dc2:	e022      	b.n	8013e0a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7fd fdc6 	bl	801195a <get_fat>
 8013dce:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dd6:	d104      	bne.n	8013de2 <f_lseek+0x31e>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2201      	movs	r2, #1
 8013ddc:	755a      	strb	r2, [r3, #21]
 8013dde:	2301      	movs	r3, #1
 8013de0:	e090      	b.n	8013f04 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d904      	bls.n	8013df2 <f_lseek+0x32e>
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	69db      	ldr	r3, [r3, #28]
 8013dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d304      	bcc.n	8013dfc <f_lseek+0x338>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2202      	movs	r2, #2
 8013df6:	755a      	strb	r2, [r3, #21]
 8013df8:	2302      	movs	r3, #2
 8013dfa:	e083      	b.n	8013f04 <f_lseek+0x440>
					fp->clust = clst;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e00:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013e02:	683a      	ldr	r2, [r7, #0]
 8013e04:	69fb      	ldr	r3, [r7, #28]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d8c0      	bhi.n	8013d8c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	699a      	ldr	r2, [r3, #24]
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	441a      	add	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	899b      	ldrh	r3, [r3, #12]
 8013e1a:	461a      	mov	r2, r3
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e22:	fb02 f201 	mul.w	r2, r2, r1
 8013e26:	1a9b      	subs	r3, r3, r2
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d016      	beq.n	8013e5a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fd fd73 	bl	801191c <clust2sect>
 8013e36:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d104      	bne.n	8013e48 <f_lseek+0x384>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2202      	movs	r2, #2
 8013e42:	755a      	strb	r2, [r3, #21]
 8013e44:	2302      	movs	r3, #2
 8013e46:	e05d      	b.n	8013f04 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	899b      	ldrh	r3, [r3, #12]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e56:	4413      	add	r3, r2
 8013e58:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	699a      	ldr	r2, [r3, #24]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	68db      	ldr	r3, [r3, #12]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d90a      	bls.n	8013e7c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	699a      	ldr	r2, [r3, #24]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	7d1b      	ldrb	r3, [r3, #20]
 8013e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e76:	b2da      	uxtb	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	699b      	ldr	r3, [r3, #24]
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	8992      	ldrh	r2, [r2, #12]
 8013e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e88:	fb02 f201 	mul.w	r2, r2, r1
 8013e8c:	1a9b      	subs	r3, r3, r2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d036      	beq.n	8013f00 <f_lseek+0x43c>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6a1b      	ldr	r3, [r3, #32]
 8013e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d031      	beq.n	8013f00 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ea0:	b25b      	sxtb	r3, r3
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	da18      	bge.n	8013ed8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	7858      	ldrb	r0, [r3, #1]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6a1a      	ldr	r2, [r3, #32]
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	f7fd f9a5 	bl	8011204 <disk_write>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d004      	beq.n	8013eca <f_lseek+0x406>
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	755a      	strb	r2, [r3, #21]
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e01c      	b.n	8013f04 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	7d1b      	ldrb	r3, [r3, #20]
 8013ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ed2:	b2da      	uxtb	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	7858      	ldrb	r0, [r3, #1]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ee6:	f7fd f96d 	bl	80111c4 <disk_read>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d004      	beq.n	8013efa <f_lseek+0x436>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	755a      	strb	r2, [r3, #21]
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	e004      	b.n	8013f04 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013efe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3740      	adds	r7, #64	; 0x40
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b09e      	sub	sp, #120	; 0x78
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013f14:	2300      	movs	r3, #0
 8013f16:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013f18:	f107 010c 	add.w	r1, r7, #12
 8013f1c:	1d3b      	adds	r3, r7, #4
 8013f1e:	2202      	movs	r2, #2
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fe fd17 	bl	8012954 <find_volume>
 8013f26:	4603      	mov	r3, r0
 8013f28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013f30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	f040 80a4 	bne.w	8014082 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f40:	4611      	mov	r1, r2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fe fbd6 	bl	80126f4 <follow_path>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013f4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d108      	bne.n	8013f68 <f_unlink+0x5c>
 8013f56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f5a:	f003 0320 	and.w	r3, r3, #32
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d002      	beq.n	8013f68 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013f62:	2306      	movs	r3, #6
 8013f64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013f68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d108      	bne.n	8013f82 <f_unlink+0x76>
 8013f70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f74:	2102      	movs	r1, #2
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7fd fa82 	bl	8011480 <chk_lock>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013f82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d17b      	bne.n	8014082 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f8e:	b25b      	sxtb	r3, r3
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	da03      	bge.n	8013f9c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013f94:	2306      	movs	r3, #6
 8013f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f9a:	e008      	b.n	8013fae <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013f9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d002      	beq.n	8013fae <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013fa8:	2307      	movs	r3, #7
 8013faa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013fae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d13d      	bne.n	8014032 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013fba:	4611      	mov	r1, r2
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7fe f98e 	bl	80122de <ld_clust>
 8013fc2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013fc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013fc8:	f003 0310 	and.w	r3, r3, #16
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d030      	beq.n	8014032 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d103      	bne.n	8013fe2 <f_unlink+0xd6>
						res = FR_DENIED;
 8013fda:	2307      	movs	r3, #7
 8013fdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013fe0:	e027      	b.n	8014032 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fe8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013fea:	f107 0310 	add.w	r3, r7, #16
 8013fee:	2100      	movs	r1, #0
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7fd ffce 	bl	8011f92 <dir_sdi>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013ffc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014000:	2b00      	cmp	r3, #0
 8014002:	d116      	bne.n	8014032 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014004:	f107 0310 	add.w	r3, r7, #16
 8014008:	2100      	movs	r1, #0
 801400a:	4618      	mov	r0, r3
 801400c:	f7fe f9a6 	bl	801235c <dir_read>
 8014010:	4603      	mov	r3, r0
 8014012:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014016:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801401a:	2b00      	cmp	r3, #0
 801401c:	d102      	bne.n	8014024 <f_unlink+0x118>
 801401e:	2307      	movs	r3, #7
 8014020:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014024:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014028:	2b04      	cmp	r3, #4
 801402a:	d102      	bne.n	8014032 <f_unlink+0x126>
 801402c:	2300      	movs	r3, #0
 801402e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014032:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014036:	2b00      	cmp	r3, #0
 8014038:	d123      	bne.n	8014082 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801403a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe fa70 	bl	8012524 <dir_remove>
 8014044:	4603      	mov	r3, r0
 8014046:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801404a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801404e:	2b00      	cmp	r3, #0
 8014050:	d10c      	bne.n	801406c <f_unlink+0x160>
 8014052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014054:	2b00      	cmp	r3, #0
 8014056:	d009      	beq.n	801406c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014058:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801405c:	2200      	movs	r2, #0
 801405e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014060:	4618      	mov	r0, r3
 8014062:	f7fd fe61 	bl	8011d28 <remove_chain>
 8014066:	4603      	mov	r3, r0
 8014068:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801406c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014070:	2b00      	cmp	r3, #0
 8014072:	d106      	bne.n	8014082 <f_unlink+0x176>
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	4618      	mov	r0, r3
 8014078:	f7fd fbe0 	bl	801183c <sync_fs>
 801407c:	4603      	mov	r3, r0
 801407e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014082:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014086:	4618      	mov	r0, r3
 8014088:	3778      	adds	r7, #120	; 0x78
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
	...

08014090 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b096      	sub	sp, #88	; 0x58
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014098:	f107 0108 	add.w	r1, r7, #8
 801409c:	1d3b      	adds	r3, r7, #4
 801409e:	2202      	movs	r2, #2
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fe fc57 	bl	8012954 <find_volume>
 80140a6:	4603      	mov	r3, r0
 80140a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80140b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f040 80fe 	bne.w	80142b6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	f107 030c 	add.w	r3, r7, #12
 80140c0:	4611      	mov	r1, r2
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fe fb16 	bl	80126f4 <follow_path>
 80140c8:	4603      	mov	r3, r0
 80140ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80140ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d102      	bne.n	80140dc <f_mkdir+0x4c>
 80140d6:	2308      	movs	r3, #8
 80140d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80140dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140e0:	2b04      	cmp	r3, #4
 80140e2:	d108      	bne.n	80140f6 <f_mkdir+0x66>
 80140e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80140e8:	f003 0320 	and.w	r3, r3, #32
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d002      	beq.n	80140f6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80140f0:	2306      	movs	r3, #6
 80140f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80140f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140fa:	2b04      	cmp	r3, #4
 80140fc:	f040 80db 	bne.w	80142b6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014100:	f107 030c 	add.w	r3, r7, #12
 8014104:	2100      	movs	r1, #0
 8014106:	4618      	mov	r0, r3
 8014108:	f7fd fe73 	bl	8011df2 <create_chain>
 801410c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	895b      	ldrh	r3, [r3, #10]
 8014112:	461a      	mov	r2, r3
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	899b      	ldrh	r3, [r3, #12]
 8014118:	fb03 f302 	mul.w	r3, r3, r2
 801411c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801411e:	2300      	movs	r3, #0
 8014120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014126:	2b00      	cmp	r3, #0
 8014128:	d102      	bne.n	8014130 <f_mkdir+0xa0>
 801412a:	2307      	movs	r3, #7
 801412c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014132:	2b01      	cmp	r3, #1
 8014134:	d102      	bne.n	801413c <f_mkdir+0xac>
 8014136:	2302      	movs	r3, #2
 8014138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014142:	d102      	bne.n	801414a <f_mkdir+0xba>
 8014144:	2301      	movs	r3, #1
 8014146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801414a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801414e:	2b00      	cmp	r3, #0
 8014150:	d106      	bne.n	8014160 <f_mkdir+0xd0>
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	4618      	mov	r0, r3
 8014156:	f7fd faff 	bl	8011758 <sync_window>
 801415a:	4603      	mov	r3, r0
 801415c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014160:	4b58      	ldr	r3, [pc, #352]	; (80142c4 <f_mkdir+0x234>)
 8014162:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014168:	2b00      	cmp	r3, #0
 801416a:	d16c      	bne.n	8014246 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014170:	4618      	mov	r0, r3
 8014172:	f7fd fbd3 	bl	801191c <clust2sect>
 8014176:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	3338      	adds	r3, #56	; 0x38
 801417c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	899b      	ldrh	r3, [r3, #12]
 8014182:	461a      	mov	r2, r3
 8014184:	2100      	movs	r1, #0
 8014186:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014188:	f7fd f91d 	bl	80113c6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801418c:	220b      	movs	r2, #11
 801418e:	2120      	movs	r1, #32
 8014190:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014192:	f7fd f918 	bl	80113c6 <mem_set>
					dir[DIR_Name] = '.';
 8014196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014198:	222e      	movs	r2, #46	; 0x2e
 801419a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801419e:	330b      	adds	r3, #11
 80141a0:	2210      	movs	r2, #16
 80141a2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80141a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141a6:	3316      	adds	r3, #22
 80141a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7fd f8be 	bl	801132c <st_dword>
					st_clust(fs, dir, dcl);
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80141b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7fe f8b0 	bl	801231c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80141bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141be:	3320      	adds	r3, #32
 80141c0:	2220      	movs	r2, #32
 80141c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fd f8dd 	bl	8011384 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80141ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141cc:	3321      	adds	r3, #33	; 0x21
 80141ce:	222e      	movs	r2, #46	; 0x2e
 80141d0:	701a      	strb	r2, [r3, #0]
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	781b      	ldrb	r3, [r3, #0]
 80141da:	2b03      	cmp	r3, #3
 80141dc:	d106      	bne.n	80141ec <f_mkdir+0x15c>
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d101      	bne.n	80141ec <f_mkdir+0x15c>
 80141e8:	2300      	movs	r3, #0
 80141ea:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80141ec:	68b8      	ldr	r0, [r7, #8]
 80141ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141f0:	3320      	adds	r3, #32
 80141f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141f4:	4619      	mov	r1, r3
 80141f6:	f7fe f891 	bl	801231c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	895b      	ldrh	r3, [r3, #10]
 80141fe:	653b      	str	r3, [r7, #80]	; 0x50
 8014200:	e01c      	b.n	801423c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014204:	1c5a      	adds	r2, r3, #1
 8014206:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014208:	68ba      	ldr	r2, [r7, #8]
 801420a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	2201      	movs	r2, #1
 8014210:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	4618      	mov	r0, r3
 8014216:	f7fd fa9f 	bl	8011758 <sync_window>
 801421a:	4603      	mov	r3, r0
 801421c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014224:	2b00      	cmp	r3, #0
 8014226:	d10d      	bne.n	8014244 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	899b      	ldrh	r3, [r3, #12]
 801422c:	461a      	mov	r2, r3
 801422e:	2100      	movs	r1, #0
 8014230:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014232:	f7fd f8c8 	bl	80113c6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014238:	3b01      	subs	r3, #1
 801423a:	653b      	str	r3, [r7, #80]	; 0x50
 801423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1df      	bne.n	8014202 <f_mkdir+0x172>
 8014242:	e000      	b.n	8014246 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014244:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801424a:	2b00      	cmp	r3, #0
 801424c:	d107      	bne.n	801425e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801424e:	f107 030c 	add.w	r3, r7, #12
 8014252:	4618      	mov	r0, r3
 8014254:	f7fe f934 	bl	80124c0 <dir_register>
 8014258:	4603      	mov	r3, r0
 801425a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801425e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014262:	2b00      	cmp	r3, #0
 8014264:	d120      	bne.n	80142a8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014268:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801426a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801426c:	3316      	adds	r3, #22
 801426e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014270:	4618      	mov	r0, r3
 8014272:	f7fd f85b 	bl	801132c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801427a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801427c:	4618      	mov	r0, r3
 801427e:	f7fe f84d 	bl	801231c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014284:	330b      	adds	r3, #11
 8014286:	2210      	movs	r2, #16
 8014288:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	2201      	movs	r2, #1
 801428e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014294:	2b00      	cmp	r3, #0
 8014296:	d10e      	bne.n	80142b6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	4618      	mov	r0, r3
 801429c:	f7fd face 	bl	801183c <sync_fs>
 80142a0:	4603      	mov	r3, r0
 80142a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80142a6:	e006      	b.n	80142b6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80142a8:	f107 030c 	add.w	r3, r7, #12
 80142ac:	2200      	movs	r2, #0
 80142ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fd fd39 	bl	8011d28 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80142b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3758      	adds	r7, #88	; 0x58
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	274a0000 	.word	0x274a0000

080142c8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80142d4:	2300      	movs	r3, #0
 80142d6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80142dc:	e017      	b.n	801430e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80142de:	f107 0310 	add.w	r3, r7, #16
 80142e2:	f107 0114 	add.w	r1, r7, #20
 80142e6:	2201      	movs	r2, #1
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7ff f803 	bl	80132f4 <f_read>
		if (rc != 1) break;
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d112      	bne.n	801431a <f_gets+0x52>
		c = s[0];
 80142f4:	7d3b      	ldrb	r3, [r7, #20]
 80142f6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	1c5a      	adds	r2, r3, #1
 80142fc:	61ba      	str	r2, [r7, #24]
 80142fe:	7dfa      	ldrb	r2, [r7, #23]
 8014300:	701a      	strb	r2, [r3, #0]
		n++;
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	3301      	adds	r3, #1
 8014306:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014308:	7dfb      	ldrb	r3, [r7, #23]
 801430a:	2b0a      	cmp	r3, #10
 801430c:	d007      	beq.n	801431e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	3b01      	subs	r3, #1
 8014312:	69fa      	ldr	r2, [r7, #28]
 8014314:	429a      	cmp	r2, r3
 8014316:	dbe2      	blt.n	80142de <f_gets+0x16>
 8014318:	e002      	b.n	8014320 <f_gets+0x58>
		if (rc != 1) break;
 801431a:	bf00      	nop
 801431c:	e000      	b.n	8014320 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801431e:	bf00      	nop
	}
	*p = 0;
 8014320:	69bb      	ldr	r3, [r7, #24]
 8014322:	2200      	movs	r2, #0
 8014324:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d001      	beq.n	8014330 <f_gets+0x68>
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	e000      	b.n	8014332 <f_gets+0x6a>
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3720      	adds	r7, #32
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
	...

0801433c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801433c:	b480      	push	{r7}
 801433e:	b087      	sub	sp, #28
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	4613      	mov	r3, r2
 8014348:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801434a:	2301      	movs	r3, #1
 801434c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801434e:	2300      	movs	r3, #0
 8014350:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014352:	4b1f      	ldr	r3, [pc, #124]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 8014354:	7a5b      	ldrb	r3, [r3, #9]
 8014356:	b2db      	uxtb	r3, r3
 8014358:	2b00      	cmp	r3, #0
 801435a:	d131      	bne.n	80143c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801435c:	4b1c      	ldr	r3, [pc, #112]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 801435e:	7a5b      	ldrb	r3, [r3, #9]
 8014360:	b2db      	uxtb	r3, r3
 8014362:	461a      	mov	r2, r3
 8014364:	4b1a      	ldr	r3, [pc, #104]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 8014366:	2100      	movs	r1, #0
 8014368:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801436a:	4b19      	ldr	r3, [pc, #100]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 801436c:	7a5b      	ldrb	r3, [r3, #9]
 801436e:	b2db      	uxtb	r3, r3
 8014370:	4a17      	ldr	r2, [pc, #92]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 8014372:	009b      	lsls	r3, r3, #2
 8014374:	4413      	add	r3, r2
 8014376:	68fa      	ldr	r2, [r7, #12]
 8014378:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801437a:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 801437c:	7a5b      	ldrb	r3, [r3, #9]
 801437e:	b2db      	uxtb	r3, r3
 8014380:	461a      	mov	r2, r3
 8014382:	4b13      	ldr	r3, [pc, #76]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 8014384:	4413      	add	r3, r2
 8014386:	79fa      	ldrb	r2, [r7, #7]
 8014388:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801438a:	4b11      	ldr	r3, [pc, #68]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 801438c:	7a5b      	ldrb	r3, [r3, #9]
 801438e:	b2db      	uxtb	r3, r3
 8014390:	1c5a      	adds	r2, r3, #1
 8014392:	b2d1      	uxtb	r1, r2
 8014394:	4a0e      	ldr	r2, [pc, #56]	; (80143d0 <FATFS_LinkDriverEx+0x94>)
 8014396:	7251      	strb	r1, [r2, #9]
 8014398:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801439a:	7dbb      	ldrb	r3, [r7, #22]
 801439c:	3330      	adds	r3, #48	; 0x30
 801439e:	b2da      	uxtb	r2, r3
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	3301      	adds	r3, #1
 80143a8:	223a      	movs	r2, #58	; 0x3a
 80143aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	3302      	adds	r3, #2
 80143b0:	222f      	movs	r2, #47	; 0x2f
 80143b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	3303      	adds	r3, #3
 80143b8:	2200      	movs	r2, #0
 80143ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80143bc:	2300      	movs	r3, #0
 80143be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80143c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80143c2:	4618      	mov	r0, r3
 80143c4:	371c      	adds	r7, #28
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	2004138c 	.word	0x2004138c

080143d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80143de:	2200      	movs	r2, #0
 80143e0:	6839      	ldr	r1, [r7, #0]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f7ff ffaa 	bl	801433c <FATFS_LinkDriverEx>
 80143e8:	4603      	mov	r3, r0
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3708      	adds	r7, #8
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}

080143f2 <__cxa_guard_acquire>:
 80143f2:	6803      	ldr	r3, [r0, #0]
 80143f4:	07db      	lsls	r3, r3, #31
 80143f6:	d406      	bmi.n	8014406 <__cxa_guard_acquire+0x14>
 80143f8:	7843      	ldrb	r3, [r0, #1]
 80143fa:	b103      	cbz	r3, 80143fe <__cxa_guard_acquire+0xc>
 80143fc:	deff      	udf	#255	; 0xff
 80143fe:	2301      	movs	r3, #1
 8014400:	7043      	strb	r3, [r0, #1]
 8014402:	4618      	mov	r0, r3
 8014404:	4770      	bx	lr
 8014406:	2000      	movs	r0, #0
 8014408:	4770      	bx	lr

0801440a <__cxa_guard_release>:
 801440a:	2301      	movs	r3, #1
 801440c:	6003      	str	r3, [r0, #0]
 801440e:	4770      	bx	lr

08014410 <cos>:
 8014410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014412:	ec51 0b10 	vmov	r0, r1, d0
 8014416:	4a1e      	ldr	r2, [pc, #120]	; (8014490 <cos+0x80>)
 8014418:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801441c:	4293      	cmp	r3, r2
 801441e:	dc06      	bgt.n	801442e <cos+0x1e>
 8014420:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014488 <cos+0x78>
 8014424:	f000 faa4 	bl	8014970 <__kernel_cos>
 8014428:	ec51 0b10 	vmov	r0, r1, d0
 801442c:	e007      	b.n	801443e <cos+0x2e>
 801442e:	4a19      	ldr	r2, [pc, #100]	; (8014494 <cos+0x84>)
 8014430:	4293      	cmp	r3, r2
 8014432:	dd09      	ble.n	8014448 <cos+0x38>
 8014434:	ee10 2a10 	vmov	r2, s0
 8014438:	460b      	mov	r3, r1
 801443a:	f7eb ff3d 	bl	80002b8 <__aeabi_dsub>
 801443e:	ec41 0b10 	vmov	d0, r0, r1
 8014442:	b005      	add	sp, #20
 8014444:	f85d fb04 	ldr.w	pc, [sp], #4
 8014448:	4668      	mov	r0, sp
 801444a:	f000 f89d 	bl	8014588 <__ieee754_rem_pio2>
 801444e:	f000 0003 	and.w	r0, r0, #3
 8014452:	2801      	cmp	r0, #1
 8014454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014458:	ed9d 0b00 	vldr	d0, [sp]
 801445c:	d007      	beq.n	801446e <cos+0x5e>
 801445e:	2802      	cmp	r0, #2
 8014460:	d00e      	beq.n	8014480 <cos+0x70>
 8014462:	2800      	cmp	r0, #0
 8014464:	d0de      	beq.n	8014424 <cos+0x14>
 8014466:	2001      	movs	r0, #1
 8014468:	f000 fe8a 	bl	8015180 <__kernel_sin>
 801446c:	e7dc      	b.n	8014428 <cos+0x18>
 801446e:	f000 fe87 	bl	8015180 <__kernel_sin>
 8014472:	ec53 2b10 	vmov	r2, r3, d0
 8014476:	ee10 0a10 	vmov	r0, s0
 801447a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801447e:	e7de      	b.n	801443e <cos+0x2e>
 8014480:	f000 fa76 	bl	8014970 <__kernel_cos>
 8014484:	e7f5      	b.n	8014472 <cos+0x62>
 8014486:	bf00      	nop
	...
 8014490:	3fe921fb 	.word	0x3fe921fb
 8014494:	7fefffff 	.word	0x7fefffff

08014498 <sin>:
 8014498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801449a:	ec51 0b10 	vmov	r0, r1, d0
 801449e:	4a20      	ldr	r2, [pc, #128]	; (8014520 <sin+0x88>)
 80144a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80144a4:	4293      	cmp	r3, r2
 80144a6:	dc07      	bgt.n	80144b8 <sin+0x20>
 80144a8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014518 <sin+0x80>
 80144ac:	2000      	movs	r0, #0
 80144ae:	f000 fe67 	bl	8015180 <__kernel_sin>
 80144b2:	ec51 0b10 	vmov	r0, r1, d0
 80144b6:	e007      	b.n	80144c8 <sin+0x30>
 80144b8:	4a1a      	ldr	r2, [pc, #104]	; (8014524 <sin+0x8c>)
 80144ba:	4293      	cmp	r3, r2
 80144bc:	dd09      	ble.n	80144d2 <sin+0x3a>
 80144be:	ee10 2a10 	vmov	r2, s0
 80144c2:	460b      	mov	r3, r1
 80144c4:	f7eb fef8 	bl	80002b8 <__aeabi_dsub>
 80144c8:	ec41 0b10 	vmov	d0, r0, r1
 80144cc:	b005      	add	sp, #20
 80144ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80144d2:	4668      	mov	r0, sp
 80144d4:	f000 f858 	bl	8014588 <__ieee754_rem_pio2>
 80144d8:	f000 0003 	and.w	r0, r0, #3
 80144dc:	2801      	cmp	r0, #1
 80144de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144e2:	ed9d 0b00 	vldr	d0, [sp]
 80144e6:	d004      	beq.n	80144f2 <sin+0x5a>
 80144e8:	2802      	cmp	r0, #2
 80144ea:	d005      	beq.n	80144f8 <sin+0x60>
 80144ec:	b970      	cbnz	r0, 801450c <sin+0x74>
 80144ee:	2001      	movs	r0, #1
 80144f0:	e7dd      	b.n	80144ae <sin+0x16>
 80144f2:	f000 fa3d 	bl	8014970 <__kernel_cos>
 80144f6:	e7dc      	b.n	80144b2 <sin+0x1a>
 80144f8:	2001      	movs	r0, #1
 80144fa:	f000 fe41 	bl	8015180 <__kernel_sin>
 80144fe:	ec53 2b10 	vmov	r2, r3, d0
 8014502:	ee10 0a10 	vmov	r0, s0
 8014506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801450a:	e7dd      	b.n	80144c8 <sin+0x30>
 801450c:	f000 fa30 	bl	8014970 <__kernel_cos>
 8014510:	e7f5      	b.n	80144fe <sin+0x66>
 8014512:	bf00      	nop
 8014514:	f3af 8000 	nop.w
	...
 8014520:	3fe921fb 	.word	0x3fe921fb
 8014524:	7fefffff 	.word	0x7fefffff

08014528 <tan>:
 8014528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801452a:	ec51 0b10 	vmov	r0, r1, d0
 801452e:	4a14      	ldr	r2, [pc, #80]	; (8014580 <tan+0x58>)
 8014530:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014534:	4293      	cmp	r3, r2
 8014536:	dc05      	bgt.n	8014544 <tan+0x1c>
 8014538:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8014578 <tan+0x50>
 801453c:	2001      	movs	r0, #1
 801453e:	f000 fedb 	bl	80152f8 <__kernel_tan>
 8014542:	e009      	b.n	8014558 <tan+0x30>
 8014544:	4a0f      	ldr	r2, [pc, #60]	; (8014584 <tan+0x5c>)
 8014546:	4293      	cmp	r3, r2
 8014548:	dd09      	ble.n	801455e <tan+0x36>
 801454a:	ee10 2a10 	vmov	r2, s0
 801454e:	460b      	mov	r3, r1
 8014550:	f7eb feb2 	bl	80002b8 <__aeabi_dsub>
 8014554:	ec41 0b10 	vmov	d0, r0, r1
 8014558:	b005      	add	sp, #20
 801455a:	f85d fb04 	ldr.w	pc, [sp], #4
 801455e:	4668      	mov	r0, sp
 8014560:	f000 f812 	bl	8014588 <__ieee754_rem_pio2>
 8014564:	0040      	lsls	r0, r0, #1
 8014566:	f000 0002 	and.w	r0, r0, #2
 801456a:	f1c0 0001 	rsb	r0, r0, #1
 801456e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014572:	ed9d 0b00 	vldr	d0, [sp]
 8014576:	e7e2      	b.n	801453e <tan+0x16>
	...
 8014580:	3fe921fb 	.word	0x3fe921fb
 8014584:	7fefffff 	.word	0x7fefffff

08014588 <__ieee754_rem_pio2>:
 8014588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801458c:	ec57 6b10 	vmov	r6, r7, d0
 8014590:	4bc3      	ldr	r3, [pc, #780]	; (80148a0 <__ieee754_rem_pio2+0x318>)
 8014592:	b08d      	sub	sp, #52	; 0x34
 8014594:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014598:	4598      	cmp	r8, r3
 801459a:	4604      	mov	r4, r0
 801459c:	9704      	str	r7, [sp, #16]
 801459e:	dc07      	bgt.n	80145b0 <__ieee754_rem_pio2+0x28>
 80145a0:	2200      	movs	r2, #0
 80145a2:	2300      	movs	r3, #0
 80145a4:	ed84 0b00 	vstr	d0, [r4]
 80145a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80145ac:	2500      	movs	r5, #0
 80145ae:	e027      	b.n	8014600 <__ieee754_rem_pio2+0x78>
 80145b0:	4bbc      	ldr	r3, [pc, #752]	; (80148a4 <__ieee754_rem_pio2+0x31c>)
 80145b2:	4598      	cmp	r8, r3
 80145b4:	dc75      	bgt.n	80146a2 <__ieee754_rem_pio2+0x11a>
 80145b6:	9b04      	ldr	r3, [sp, #16]
 80145b8:	4dbb      	ldr	r5, [pc, #748]	; (80148a8 <__ieee754_rem_pio2+0x320>)
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	ee10 0a10 	vmov	r0, s0
 80145c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8014868 <__ieee754_rem_pio2+0x2e0>)
 80145c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c6:	4639      	mov	r1, r7
 80145c8:	dd36      	ble.n	8014638 <__ieee754_rem_pio2+0xb0>
 80145ca:	f7eb fe75 	bl	80002b8 <__aeabi_dsub>
 80145ce:	45a8      	cmp	r8, r5
 80145d0:	4606      	mov	r6, r0
 80145d2:	460f      	mov	r7, r1
 80145d4:	d018      	beq.n	8014608 <__ieee754_rem_pio2+0x80>
 80145d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014870 <__ieee754_rem_pio2+0x2e8>)
 80145d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145dc:	f7eb fe6c 	bl	80002b8 <__aeabi_dsub>
 80145e0:	4602      	mov	r2, r0
 80145e2:	460b      	mov	r3, r1
 80145e4:	e9c4 2300 	strd	r2, r3, [r4]
 80145e8:	4630      	mov	r0, r6
 80145ea:	4639      	mov	r1, r7
 80145ec:	f7eb fe64 	bl	80002b8 <__aeabi_dsub>
 80145f0:	a39f      	add	r3, pc, #636	; (adr r3, 8014870 <__ieee754_rem_pio2+0x2e8>)
 80145f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f6:	f7eb fe5f 	bl	80002b8 <__aeabi_dsub>
 80145fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145fe:	2501      	movs	r5, #1
 8014600:	4628      	mov	r0, r5
 8014602:	b00d      	add	sp, #52	; 0x34
 8014604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014608:	a39b      	add	r3, pc, #620	; (adr r3, 8014878 <__ieee754_rem_pio2+0x2f0>)
 801460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460e:	f7eb fe53 	bl	80002b8 <__aeabi_dsub>
 8014612:	a39b      	add	r3, pc, #620	; (adr r3, 8014880 <__ieee754_rem_pio2+0x2f8>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	4606      	mov	r6, r0
 801461a:	460f      	mov	r7, r1
 801461c:	f7eb fe4c 	bl	80002b8 <__aeabi_dsub>
 8014620:	4602      	mov	r2, r0
 8014622:	460b      	mov	r3, r1
 8014624:	e9c4 2300 	strd	r2, r3, [r4]
 8014628:	4630      	mov	r0, r6
 801462a:	4639      	mov	r1, r7
 801462c:	f7eb fe44 	bl	80002b8 <__aeabi_dsub>
 8014630:	a393      	add	r3, pc, #588	; (adr r3, 8014880 <__ieee754_rem_pio2+0x2f8>)
 8014632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014636:	e7de      	b.n	80145f6 <__ieee754_rem_pio2+0x6e>
 8014638:	f7eb fe40 	bl	80002bc <__adddf3>
 801463c:	45a8      	cmp	r8, r5
 801463e:	4606      	mov	r6, r0
 8014640:	460f      	mov	r7, r1
 8014642:	d016      	beq.n	8014672 <__ieee754_rem_pio2+0xea>
 8014644:	a38a      	add	r3, pc, #552	; (adr r3, 8014870 <__ieee754_rem_pio2+0x2e8>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	f7eb fe37 	bl	80002bc <__adddf3>
 801464e:	4602      	mov	r2, r0
 8014650:	460b      	mov	r3, r1
 8014652:	e9c4 2300 	strd	r2, r3, [r4]
 8014656:	4630      	mov	r0, r6
 8014658:	4639      	mov	r1, r7
 801465a:	f7eb fe2d 	bl	80002b8 <__aeabi_dsub>
 801465e:	a384      	add	r3, pc, #528	; (adr r3, 8014870 <__ieee754_rem_pio2+0x2e8>)
 8014660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014664:	f7eb fe2a 	bl	80002bc <__adddf3>
 8014668:	f04f 35ff 	mov.w	r5, #4294967295
 801466c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014670:	e7c6      	b.n	8014600 <__ieee754_rem_pio2+0x78>
 8014672:	a381      	add	r3, pc, #516	; (adr r3, 8014878 <__ieee754_rem_pio2+0x2f0>)
 8014674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014678:	f7eb fe20 	bl	80002bc <__adddf3>
 801467c:	a380      	add	r3, pc, #512	; (adr r3, 8014880 <__ieee754_rem_pio2+0x2f8>)
 801467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014682:	4606      	mov	r6, r0
 8014684:	460f      	mov	r7, r1
 8014686:	f7eb fe19 	bl	80002bc <__adddf3>
 801468a:	4602      	mov	r2, r0
 801468c:	460b      	mov	r3, r1
 801468e:	e9c4 2300 	strd	r2, r3, [r4]
 8014692:	4630      	mov	r0, r6
 8014694:	4639      	mov	r1, r7
 8014696:	f7eb fe0f 	bl	80002b8 <__aeabi_dsub>
 801469a:	a379      	add	r3, pc, #484	; (adr r3, 8014880 <__ieee754_rem_pio2+0x2f8>)
 801469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a0:	e7e0      	b.n	8014664 <__ieee754_rem_pio2+0xdc>
 80146a2:	4b82      	ldr	r3, [pc, #520]	; (80148ac <__ieee754_rem_pio2+0x324>)
 80146a4:	4598      	cmp	r8, r3
 80146a6:	f300 80d0 	bgt.w	801484a <__ieee754_rem_pio2+0x2c2>
 80146aa:	f000 fff1 	bl	8015690 <fabs>
 80146ae:	ec57 6b10 	vmov	r6, r7, d0
 80146b2:	ee10 0a10 	vmov	r0, s0
 80146b6:	a374      	add	r3, pc, #464	; (adr r3, 8014888 <__ieee754_rem_pio2+0x300>)
 80146b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146bc:	4639      	mov	r1, r7
 80146be:	f7eb ffb3 	bl	8000628 <__aeabi_dmul>
 80146c2:	2200      	movs	r2, #0
 80146c4:	4b7a      	ldr	r3, [pc, #488]	; (80148b0 <__ieee754_rem_pio2+0x328>)
 80146c6:	f7eb fdf9 	bl	80002bc <__adddf3>
 80146ca:	f7ec fa5d 	bl	8000b88 <__aeabi_d2iz>
 80146ce:	4605      	mov	r5, r0
 80146d0:	f7eb ff40 	bl	8000554 <__aeabi_i2d>
 80146d4:	a364      	add	r3, pc, #400	; (adr r3, 8014868 <__ieee754_rem_pio2+0x2e0>)
 80146d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146de:	f7eb ffa3 	bl	8000628 <__aeabi_dmul>
 80146e2:	4602      	mov	r2, r0
 80146e4:	460b      	mov	r3, r1
 80146e6:	4630      	mov	r0, r6
 80146e8:	4639      	mov	r1, r7
 80146ea:	f7eb fde5 	bl	80002b8 <__aeabi_dsub>
 80146ee:	a360      	add	r3, pc, #384	; (adr r3, 8014870 <__ieee754_rem_pio2+0x2e8>)
 80146f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f4:	4682      	mov	sl, r0
 80146f6:	468b      	mov	fp, r1
 80146f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146fc:	f7eb ff94 	bl	8000628 <__aeabi_dmul>
 8014700:	2d1f      	cmp	r5, #31
 8014702:	4606      	mov	r6, r0
 8014704:	460f      	mov	r7, r1
 8014706:	dc0c      	bgt.n	8014722 <__ieee754_rem_pio2+0x19a>
 8014708:	1e6a      	subs	r2, r5, #1
 801470a:	4b6a      	ldr	r3, [pc, #424]	; (80148b4 <__ieee754_rem_pio2+0x32c>)
 801470c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014710:	4543      	cmp	r3, r8
 8014712:	d006      	beq.n	8014722 <__ieee754_rem_pio2+0x19a>
 8014714:	4632      	mov	r2, r6
 8014716:	463b      	mov	r3, r7
 8014718:	4650      	mov	r0, sl
 801471a:	4659      	mov	r1, fp
 801471c:	f7eb fdcc 	bl	80002b8 <__aeabi_dsub>
 8014720:	e00e      	b.n	8014740 <__ieee754_rem_pio2+0x1b8>
 8014722:	4632      	mov	r2, r6
 8014724:	463b      	mov	r3, r7
 8014726:	4650      	mov	r0, sl
 8014728:	4659      	mov	r1, fp
 801472a:	f7eb fdc5 	bl	80002b8 <__aeabi_dsub>
 801472e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014732:	9305      	str	r3, [sp, #20]
 8014734:	9a05      	ldr	r2, [sp, #20]
 8014736:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	2b10      	cmp	r3, #16
 801473e:	dc02      	bgt.n	8014746 <__ieee754_rem_pio2+0x1be>
 8014740:	e9c4 0100 	strd	r0, r1, [r4]
 8014744:	e039      	b.n	80147ba <__ieee754_rem_pio2+0x232>
 8014746:	a34c      	add	r3, pc, #304	; (adr r3, 8014878 <__ieee754_rem_pio2+0x2f0>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014750:	f7eb ff6a 	bl	8000628 <__aeabi_dmul>
 8014754:	4606      	mov	r6, r0
 8014756:	460f      	mov	r7, r1
 8014758:	4602      	mov	r2, r0
 801475a:	460b      	mov	r3, r1
 801475c:	4650      	mov	r0, sl
 801475e:	4659      	mov	r1, fp
 8014760:	f7eb fdaa 	bl	80002b8 <__aeabi_dsub>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	4680      	mov	r8, r0
 801476a:	4689      	mov	r9, r1
 801476c:	4650      	mov	r0, sl
 801476e:	4659      	mov	r1, fp
 8014770:	f7eb fda2 	bl	80002b8 <__aeabi_dsub>
 8014774:	4632      	mov	r2, r6
 8014776:	463b      	mov	r3, r7
 8014778:	f7eb fd9e 	bl	80002b8 <__aeabi_dsub>
 801477c:	a340      	add	r3, pc, #256	; (adr r3, 8014880 <__ieee754_rem_pio2+0x2f8>)
 801477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014782:	4606      	mov	r6, r0
 8014784:	460f      	mov	r7, r1
 8014786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801478a:	f7eb ff4d 	bl	8000628 <__aeabi_dmul>
 801478e:	4632      	mov	r2, r6
 8014790:	463b      	mov	r3, r7
 8014792:	f7eb fd91 	bl	80002b8 <__aeabi_dsub>
 8014796:	4602      	mov	r2, r0
 8014798:	460b      	mov	r3, r1
 801479a:	4606      	mov	r6, r0
 801479c:	460f      	mov	r7, r1
 801479e:	4640      	mov	r0, r8
 80147a0:	4649      	mov	r1, r9
 80147a2:	f7eb fd89 	bl	80002b8 <__aeabi_dsub>
 80147a6:	9a05      	ldr	r2, [sp, #20]
 80147a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	2b31      	cmp	r3, #49	; 0x31
 80147b0:	dc20      	bgt.n	80147f4 <__ieee754_rem_pio2+0x26c>
 80147b2:	e9c4 0100 	strd	r0, r1, [r4]
 80147b6:	46c2      	mov	sl, r8
 80147b8:	46cb      	mov	fp, r9
 80147ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80147be:	4650      	mov	r0, sl
 80147c0:	4642      	mov	r2, r8
 80147c2:	464b      	mov	r3, r9
 80147c4:	4659      	mov	r1, fp
 80147c6:	f7eb fd77 	bl	80002b8 <__aeabi_dsub>
 80147ca:	463b      	mov	r3, r7
 80147cc:	4632      	mov	r2, r6
 80147ce:	f7eb fd73 	bl	80002b8 <__aeabi_dsub>
 80147d2:	9b04      	ldr	r3, [sp, #16]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80147da:	f6bf af11 	bge.w	8014600 <__ieee754_rem_pio2+0x78>
 80147de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80147e2:	6063      	str	r3, [r4, #4]
 80147e4:	f8c4 8000 	str.w	r8, [r4]
 80147e8:	60a0      	str	r0, [r4, #8]
 80147ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147ee:	60e3      	str	r3, [r4, #12]
 80147f0:	426d      	negs	r5, r5
 80147f2:	e705      	b.n	8014600 <__ieee754_rem_pio2+0x78>
 80147f4:	a326      	add	r3, pc, #152	; (adr r3, 8014890 <__ieee754_rem_pio2+0x308>)
 80147f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147fe:	f7eb ff13 	bl	8000628 <__aeabi_dmul>
 8014802:	4606      	mov	r6, r0
 8014804:	460f      	mov	r7, r1
 8014806:	4602      	mov	r2, r0
 8014808:	460b      	mov	r3, r1
 801480a:	4640      	mov	r0, r8
 801480c:	4649      	mov	r1, r9
 801480e:	f7eb fd53 	bl	80002b8 <__aeabi_dsub>
 8014812:	4602      	mov	r2, r0
 8014814:	460b      	mov	r3, r1
 8014816:	4682      	mov	sl, r0
 8014818:	468b      	mov	fp, r1
 801481a:	4640      	mov	r0, r8
 801481c:	4649      	mov	r1, r9
 801481e:	f7eb fd4b 	bl	80002b8 <__aeabi_dsub>
 8014822:	4632      	mov	r2, r6
 8014824:	463b      	mov	r3, r7
 8014826:	f7eb fd47 	bl	80002b8 <__aeabi_dsub>
 801482a:	a31b      	add	r3, pc, #108	; (adr r3, 8014898 <__ieee754_rem_pio2+0x310>)
 801482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014830:	4606      	mov	r6, r0
 8014832:	460f      	mov	r7, r1
 8014834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014838:	f7eb fef6 	bl	8000628 <__aeabi_dmul>
 801483c:	4632      	mov	r2, r6
 801483e:	463b      	mov	r3, r7
 8014840:	f7eb fd3a 	bl	80002b8 <__aeabi_dsub>
 8014844:	4606      	mov	r6, r0
 8014846:	460f      	mov	r7, r1
 8014848:	e764      	b.n	8014714 <__ieee754_rem_pio2+0x18c>
 801484a:	4b1b      	ldr	r3, [pc, #108]	; (80148b8 <__ieee754_rem_pio2+0x330>)
 801484c:	4598      	cmp	r8, r3
 801484e:	dd35      	ble.n	80148bc <__ieee754_rem_pio2+0x334>
 8014850:	ee10 2a10 	vmov	r2, s0
 8014854:	463b      	mov	r3, r7
 8014856:	4630      	mov	r0, r6
 8014858:	4639      	mov	r1, r7
 801485a:	f7eb fd2d 	bl	80002b8 <__aeabi_dsub>
 801485e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014862:	e9c4 0100 	strd	r0, r1, [r4]
 8014866:	e6a1      	b.n	80145ac <__ieee754_rem_pio2+0x24>
 8014868:	54400000 	.word	0x54400000
 801486c:	3ff921fb 	.word	0x3ff921fb
 8014870:	1a626331 	.word	0x1a626331
 8014874:	3dd0b461 	.word	0x3dd0b461
 8014878:	1a600000 	.word	0x1a600000
 801487c:	3dd0b461 	.word	0x3dd0b461
 8014880:	2e037073 	.word	0x2e037073
 8014884:	3ba3198a 	.word	0x3ba3198a
 8014888:	6dc9c883 	.word	0x6dc9c883
 801488c:	3fe45f30 	.word	0x3fe45f30
 8014890:	2e000000 	.word	0x2e000000
 8014894:	3ba3198a 	.word	0x3ba3198a
 8014898:	252049c1 	.word	0x252049c1
 801489c:	397b839a 	.word	0x397b839a
 80148a0:	3fe921fb 	.word	0x3fe921fb
 80148a4:	4002d97b 	.word	0x4002d97b
 80148a8:	3ff921fb 	.word	0x3ff921fb
 80148ac:	413921fb 	.word	0x413921fb
 80148b0:	3fe00000 	.word	0x3fe00000
 80148b4:	0801a3f4 	.word	0x0801a3f4
 80148b8:	7fefffff 	.word	0x7fefffff
 80148bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80148c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80148c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80148c8:	4630      	mov	r0, r6
 80148ca:	460f      	mov	r7, r1
 80148cc:	f7ec f95c 	bl	8000b88 <__aeabi_d2iz>
 80148d0:	f7eb fe40 	bl	8000554 <__aeabi_i2d>
 80148d4:	4602      	mov	r2, r0
 80148d6:	460b      	mov	r3, r1
 80148d8:	4630      	mov	r0, r6
 80148da:	4639      	mov	r1, r7
 80148dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80148e0:	f7eb fcea 	bl	80002b8 <__aeabi_dsub>
 80148e4:	2200      	movs	r2, #0
 80148e6:	4b1f      	ldr	r3, [pc, #124]	; (8014964 <__ieee754_rem_pio2+0x3dc>)
 80148e8:	f7eb fe9e 	bl	8000628 <__aeabi_dmul>
 80148ec:	460f      	mov	r7, r1
 80148ee:	4606      	mov	r6, r0
 80148f0:	f7ec f94a 	bl	8000b88 <__aeabi_d2iz>
 80148f4:	f7eb fe2e 	bl	8000554 <__aeabi_i2d>
 80148f8:	4602      	mov	r2, r0
 80148fa:	460b      	mov	r3, r1
 80148fc:	4630      	mov	r0, r6
 80148fe:	4639      	mov	r1, r7
 8014900:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014904:	f7eb fcd8 	bl	80002b8 <__aeabi_dsub>
 8014908:	2200      	movs	r2, #0
 801490a:	4b16      	ldr	r3, [pc, #88]	; (8014964 <__ieee754_rem_pio2+0x3dc>)
 801490c:	f7eb fe8c 	bl	8000628 <__aeabi_dmul>
 8014910:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014914:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014918:	f04f 0803 	mov.w	r8, #3
 801491c:	2600      	movs	r6, #0
 801491e:	2700      	movs	r7, #0
 8014920:	4632      	mov	r2, r6
 8014922:	463b      	mov	r3, r7
 8014924:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014928:	f108 3aff 	add.w	sl, r8, #4294967295
 801492c:	f7ec f8e4 	bl	8000af8 <__aeabi_dcmpeq>
 8014930:	b9b0      	cbnz	r0, 8014960 <__ieee754_rem_pio2+0x3d8>
 8014932:	4b0d      	ldr	r3, [pc, #52]	; (8014968 <__ieee754_rem_pio2+0x3e0>)
 8014934:	9301      	str	r3, [sp, #4]
 8014936:	2302      	movs	r3, #2
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	462a      	mov	r2, r5
 801493c:	4643      	mov	r3, r8
 801493e:	4621      	mov	r1, r4
 8014940:	a806      	add	r0, sp, #24
 8014942:	f000 f8dd 	bl	8014b00 <__kernel_rem_pio2>
 8014946:	9b04      	ldr	r3, [sp, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	4605      	mov	r5, r0
 801494c:	f6bf ae58 	bge.w	8014600 <__ieee754_rem_pio2+0x78>
 8014950:	6863      	ldr	r3, [r4, #4]
 8014952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014956:	6063      	str	r3, [r4, #4]
 8014958:	68e3      	ldr	r3, [r4, #12]
 801495a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801495e:	e746      	b.n	80147ee <__ieee754_rem_pio2+0x266>
 8014960:	46d0      	mov	r8, sl
 8014962:	e7dd      	b.n	8014920 <__ieee754_rem_pio2+0x398>
 8014964:	41700000 	.word	0x41700000
 8014968:	0801a474 	.word	0x0801a474
 801496c:	00000000 	.word	0x00000000

08014970 <__kernel_cos>:
 8014970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014974:	ec59 8b10 	vmov	r8, r9, d0
 8014978:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801497c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014980:	ed2d 8b02 	vpush	{d8}
 8014984:	eeb0 8a41 	vmov.f32	s16, s2
 8014988:	eef0 8a61 	vmov.f32	s17, s3
 801498c:	da07      	bge.n	801499e <__kernel_cos+0x2e>
 801498e:	ee10 0a10 	vmov	r0, s0
 8014992:	4649      	mov	r1, r9
 8014994:	f7ec f8f8 	bl	8000b88 <__aeabi_d2iz>
 8014998:	2800      	cmp	r0, #0
 801499a:	f000 8089 	beq.w	8014ab0 <__kernel_cos+0x140>
 801499e:	4642      	mov	r2, r8
 80149a0:	464b      	mov	r3, r9
 80149a2:	4640      	mov	r0, r8
 80149a4:	4649      	mov	r1, r9
 80149a6:	f7eb fe3f 	bl	8000628 <__aeabi_dmul>
 80149aa:	2200      	movs	r2, #0
 80149ac:	4b4e      	ldr	r3, [pc, #312]	; (8014ae8 <__kernel_cos+0x178>)
 80149ae:	4604      	mov	r4, r0
 80149b0:	460d      	mov	r5, r1
 80149b2:	f7eb fe39 	bl	8000628 <__aeabi_dmul>
 80149b6:	a340      	add	r3, pc, #256	; (adr r3, 8014ab8 <__kernel_cos+0x148>)
 80149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149bc:	4682      	mov	sl, r0
 80149be:	468b      	mov	fp, r1
 80149c0:	4620      	mov	r0, r4
 80149c2:	4629      	mov	r1, r5
 80149c4:	f7eb fe30 	bl	8000628 <__aeabi_dmul>
 80149c8:	a33d      	add	r3, pc, #244	; (adr r3, 8014ac0 <__kernel_cos+0x150>)
 80149ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ce:	f7eb fc75 	bl	80002bc <__adddf3>
 80149d2:	4622      	mov	r2, r4
 80149d4:	462b      	mov	r3, r5
 80149d6:	f7eb fe27 	bl	8000628 <__aeabi_dmul>
 80149da:	a33b      	add	r3, pc, #236	; (adr r3, 8014ac8 <__kernel_cos+0x158>)
 80149dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e0:	f7eb fc6a 	bl	80002b8 <__aeabi_dsub>
 80149e4:	4622      	mov	r2, r4
 80149e6:	462b      	mov	r3, r5
 80149e8:	f7eb fe1e 	bl	8000628 <__aeabi_dmul>
 80149ec:	a338      	add	r3, pc, #224	; (adr r3, 8014ad0 <__kernel_cos+0x160>)
 80149ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f2:	f7eb fc63 	bl	80002bc <__adddf3>
 80149f6:	4622      	mov	r2, r4
 80149f8:	462b      	mov	r3, r5
 80149fa:	f7eb fe15 	bl	8000628 <__aeabi_dmul>
 80149fe:	a336      	add	r3, pc, #216	; (adr r3, 8014ad8 <__kernel_cos+0x168>)
 8014a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a04:	f7eb fc58 	bl	80002b8 <__aeabi_dsub>
 8014a08:	4622      	mov	r2, r4
 8014a0a:	462b      	mov	r3, r5
 8014a0c:	f7eb fe0c 	bl	8000628 <__aeabi_dmul>
 8014a10:	a333      	add	r3, pc, #204	; (adr r3, 8014ae0 <__kernel_cos+0x170>)
 8014a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a16:	f7eb fc51 	bl	80002bc <__adddf3>
 8014a1a:	4622      	mov	r2, r4
 8014a1c:	462b      	mov	r3, r5
 8014a1e:	f7eb fe03 	bl	8000628 <__aeabi_dmul>
 8014a22:	4622      	mov	r2, r4
 8014a24:	462b      	mov	r3, r5
 8014a26:	f7eb fdff 	bl	8000628 <__aeabi_dmul>
 8014a2a:	ec53 2b18 	vmov	r2, r3, d8
 8014a2e:	4604      	mov	r4, r0
 8014a30:	460d      	mov	r5, r1
 8014a32:	4640      	mov	r0, r8
 8014a34:	4649      	mov	r1, r9
 8014a36:	f7eb fdf7 	bl	8000628 <__aeabi_dmul>
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	4629      	mov	r1, r5
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7eb fc39 	bl	80002b8 <__aeabi_dsub>
 8014a46:	4b29      	ldr	r3, [pc, #164]	; (8014aec <__kernel_cos+0x17c>)
 8014a48:	429e      	cmp	r6, r3
 8014a4a:	4680      	mov	r8, r0
 8014a4c:	4689      	mov	r9, r1
 8014a4e:	dc11      	bgt.n	8014a74 <__kernel_cos+0x104>
 8014a50:	4602      	mov	r2, r0
 8014a52:	460b      	mov	r3, r1
 8014a54:	4650      	mov	r0, sl
 8014a56:	4659      	mov	r1, fp
 8014a58:	f7eb fc2e 	bl	80002b8 <__aeabi_dsub>
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	4924      	ldr	r1, [pc, #144]	; (8014af0 <__kernel_cos+0x180>)
 8014a60:	4602      	mov	r2, r0
 8014a62:	2000      	movs	r0, #0
 8014a64:	f7eb fc28 	bl	80002b8 <__aeabi_dsub>
 8014a68:	ecbd 8b02 	vpop	{d8}
 8014a6c:	ec41 0b10 	vmov	d0, r0, r1
 8014a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a74:	4b1f      	ldr	r3, [pc, #124]	; (8014af4 <__kernel_cos+0x184>)
 8014a76:	491e      	ldr	r1, [pc, #120]	; (8014af0 <__kernel_cos+0x180>)
 8014a78:	429e      	cmp	r6, r3
 8014a7a:	bfcc      	ite	gt
 8014a7c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014af8 <__kernel_cos+0x188>)
 8014a7e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014a82:	2400      	movs	r4, #0
 8014a84:	4622      	mov	r2, r4
 8014a86:	462b      	mov	r3, r5
 8014a88:	2000      	movs	r0, #0
 8014a8a:	f7eb fc15 	bl	80002b8 <__aeabi_dsub>
 8014a8e:	4622      	mov	r2, r4
 8014a90:	4606      	mov	r6, r0
 8014a92:	460f      	mov	r7, r1
 8014a94:	462b      	mov	r3, r5
 8014a96:	4650      	mov	r0, sl
 8014a98:	4659      	mov	r1, fp
 8014a9a:	f7eb fc0d 	bl	80002b8 <__aeabi_dsub>
 8014a9e:	4642      	mov	r2, r8
 8014aa0:	464b      	mov	r3, r9
 8014aa2:	f7eb fc09 	bl	80002b8 <__aeabi_dsub>
 8014aa6:	4602      	mov	r2, r0
 8014aa8:	460b      	mov	r3, r1
 8014aaa:	4630      	mov	r0, r6
 8014aac:	4639      	mov	r1, r7
 8014aae:	e7d9      	b.n	8014a64 <__kernel_cos+0xf4>
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	490f      	ldr	r1, [pc, #60]	; (8014af0 <__kernel_cos+0x180>)
 8014ab4:	e7d8      	b.n	8014a68 <__kernel_cos+0xf8>
 8014ab6:	bf00      	nop
 8014ab8:	be8838d4 	.word	0xbe8838d4
 8014abc:	bda8fae9 	.word	0xbda8fae9
 8014ac0:	bdb4b1c4 	.word	0xbdb4b1c4
 8014ac4:	3e21ee9e 	.word	0x3e21ee9e
 8014ac8:	809c52ad 	.word	0x809c52ad
 8014acc:	3e927e4f 	.word	0x3e927e4f
 8014ad0:	19cb1590 	.word	0x19cb1590
 8014ad4:	3efa01a0 	.word	0x3efa01a0
 8014ad8:	16c15177 	.word	0x16c15177
 8014adc:	3f56c16c 	.word	0x3f56c16c
 8014ae0:	5555554c 	.word	0x5555554c
 8014ae4:	3fa55555 	.word	0x3fa55555
 8014ae8:	3fe00000 	.word	0x3fe00000
 8014aec:	3fd33332 	.word	0x3fd33332
 8014af0:	3ff00000 	.word	0x3ff00000
 8014af4:	3fe90000 	.word	0x3fe90000
 8014af8:	3fd20000 	.word	0x3fd20000
 8014afc:	00000000 	.word	0x00000000

08014b00 <__kernel_rem_pio2>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	ed2d 8b02 	vpush	{d8}
 8014b08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014b0c:	1ed4      	subs	r4, r2, #3
 8014b0e:	9308      	str	r3, [sp, #32]
 8014b10:	9101      	str	r1, [sp, #4]
 8014b12:	4bc5      	ldr	r3, [pc, #788]	; (8014e28 <__kernel_rem_pio2+0x328>)
 8014b14:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014b16:	9009      	str	r0, [sp, #36]	; 0x24
 8014b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014b1c:	9304      	str	r3, [sp, #16]
 8014b1e:	9b08      	ldr	r3, [sp, #32]
 8014b20:	3b01      	subs	r3, #1
 8014b22:	9307      	str	r3, [sp, #28]
 8014b24:	2318      	movs	r3, #24
 8014b26:	fb94 f4f3 	sdiv	r4, r4, r3
 8014b2a:	f06f 0317 	mvn.w	r3, #23
 8014b2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014b32:	fb04 3303 	mla	r3, r4, r3, r3
 8014b36:	eb03 0a02 	add.w	sl, r3, r2
 8014b3a:	9b04      	ldr	r3, [sp, #16]
 8014b3c:	9a07      	ldr	r2, [sp, #28]
 8014b3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014e18 <__kernel_rem_pio2+0x318>
 8014b42:	eb03 0802 	add.w	r8, r3, r2
 8014b46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014b48:	1aa7      	subs	r7, r4, r2
 8014b4a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014b4e:	ae22      	add	r6, sp, #136	; 0x88
 8014b50:	2500      	movs	r5, #0
 8014b52:	4545      	cmp	r5, r8
 8014b54:	dd13      	ble.n	8014b7e <__kernel_rem_pio2+0x7e>
 8014b56:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014e18 <__kernel_rem_pio2+0x318>
 8014b5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014b5e:	2600      	movs	r6, #0
 8014b60:	9b04      	ldr	r3, [sp, #16]
 8014b62:	429e      	cmp	r6, r3
 8014b64:	dc32      	bgt.n	8014bcc <__kernel_rem_pio2+0xcc>
 8014b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b68:	9302      	str	r3, [sp, #8]
 8014b6a:	9b08      	ldr	r3, [sp, #32]
 8014b6c:	199d      	adds	r5, r3, r6
 8014b6e:	ab22      	add	r3, sp, #136	; 0x88
 8014b70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014b74:	9306      	str	r3, [sp, #24]
 8014b76:	ec59 8b18 	vmov	r8, r9, d8
 8014b7a:	2700      	movs	r7, #0
 8014b7c:	e01f      	b.n	8014bbe <__kernel_rem_pio2+0xbe>
 8014b7e:	42ef      	cmn	r7, r5
 8014b80:	d407      	bmi.n	8014b92 <__kernel_rem_pio2+0x92>
 8014b82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014b86:	f7eb fce5 	bl	8000554 <__aeabi_i2d>
 8014b8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b8e:	3501      	adds	r5, #1
 8014b90:	e7df      	b.n	8014b52 <__kernel_rem_pio2+0x52>
 8014b92:	ec51 0b18 	vmov	r0, r1, d8
 8014b96:	e7f8      	b.n	8014b8a <__kernel_rem_pio2+0x8a>
 8014b98:	9906      	ldr	r1, [sp, #24]
 8014b9a:	9d02      	ldr	r5, [sp, #8]
 8014b9c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014ba0:	9106      	str	r1, [sp, #24]
 8014ba2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014ba6:	9502      	str	r5, [sp, #8]
 8014ba8:	f7eb fd3e 	bl	8000628 <__aeabi_dmul>
 8014bac:	4602      	mov	r2, r0
 8014bae:	460b      	mov	r3, r1
 8014bb0:	4640      	mov	r0, r8
 8014bb2:	4649      	mov	r1, r9
 8014bb4:	f7eb fb82 	bl	80002bc <__adddf3>
 8014bb8:	3701      	adds	r7, #1
 8014bba:	4680      	mov	r8, r0
 8014bbc:	4689      	mov	r9, r1
 8014bbe:	9b07      	ldr	r3, [sp, #28]
 8014bc0:	429f      	cmp	r7, r3
 8014bc2:	dde9      	ble.n	8014b98 <__kernel_rem_pio2+0x98>
 8014bc4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014bc8:	3601      	adds	r6, #1
 8014bca:	e7c9      	b.n	8014b60 <__kernel_rem_pio2+0x60>
 8014bcc:	9b04      	ldr	r3, [sp, #16]
 8014bce:	aa0e      	add	r2, sp, #56	; 0x38
 8014bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8014bd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014bd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014bdc:	9c04      	ldr	r4, [sp, #16]
 8014bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8014be0:	ab9a      	add	r3, sp, #616	; 0x268
 8014be2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014be6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014bea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014bf2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014bf6:	ab9a      	add	r3, sp, #616	; 0x268
 8014bf8:	445b      	add	r3, fp
 8014bfa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014bfe:	2500      	movs	r5, #0
 8014c00:	1b63      	subs	r3, r4, r5
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	dc78      	bgt.n	8014cf8 <__kernel_rem_pio2+0x1f8>
 8014c06:	4650      	mov	r0, sl
 8014c08:	ec49 8b10 	vmov	d0, r8, r9
 8014c0c:	f000 fdd0 	bl	80157b0 <scalbn>
 8014c10:	ec57 6b10 	vmov	r6, r7, d0
 8014c14:	2200      	movs	r2, #0
 8014c16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014c1a:	ee10 0a10 	vmov	r0, s0
 8014c1e:	4639      	mov	r1, r7
 8014c20:	f7eb fd02 	bl	8000628 <__aeabi_dmul>
 8014c24:	ec41 0b10 	vmov	d0, r0, r1
 8014c28:	f000 fd3e 	bl	80156a8 <floor>
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	ec51 0b10 	vmov	r0, r1, d0
 8014c32:	4b7e      	ldr	r3, [pc, #504]	; (8014e2c <__kernel_rem_pio2+0x32c>)
 8014c34:	f7eb fcf8 	bl	8000628 <__aeabi_dmul>
 8014c38:	4602      	mov	r2, r0
 8014c3a:	460b      	mov	r3, r1
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	4639      	mov	r1, r7
 8014c40:	f7eb fb3a 	bl	80002b8 <__aeabi_dsub>
 8014c44:	460f      	mov	r7, r1
 8014c46:	4606      	mov	r6, r0
 8014c48:	f7eb ff9e 	bl	8000b88 <__aeabi_d2iz>
 8014c4c:	9006      	str	r0, [sp, #24]
 8014c4e:	f7eb fc81 	bl	8000554 <__aeabi_i2d>
 8014c52:	4602      	mov	r2, r0
 8014c54:	460b      	mov	r3, r1
 8014c56:	4630      	mov	r0, r6
 8014c58:	4639      	mov	r1, r7
 8014c5a:	f7eb fb2d 	bl	80002b8 <__aeabi_dsub>
 8014c5e:	f1ba 0f00 	cmp.w	sl, #0
 8014c62:	4606      	mov	r6, r0
 8014c64:	460f      	mov	r7, r1
 8014c66:	dd6c      	ble.n	8014d42 <__kernel_rem_pio2+0x242>
 8014c68:	1e62      	subs	r2, r4, #1
 8014c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8014c6c:	f1ca 0118 	rsb	r1, sl, #24
 8014c70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014c74:	9d06      	ldr	r5, [sp, #24]
 8014c76:	fa40 f301 	asr.w	r3, r0, r1
 8014c7a:	441d      	add	r5, r3
 8014c7c:	408b      	lsls	r3, r1
 8014c7e:	1ac0      	subs	r0, r0, r3
 8014c80:	ab0e      	add	r3, sp, #56	; 0x38
 8014c82:	9506      	str	r5, [sp, #24]
 8014c84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014c88:	f1ca 0317 	rsb	r3, sl, #23
 8014c8c:	fa40 f303 	asr.w	r3, r0, r3
 8014c90:	9302      	str	r3, [sp, #8]
 8014c92:	9b02      	ldr	r3, [sp, #8]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	dd62      	ble.n	8014d5e <__kernel_rem_pio2+0x25e>
 8014c98:	9b06      	ldr	r3, [sp, #24]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	9306      	str	r3, [sp, #24]
 8014ca0:	4615      	mov	r5, r2
 8014ca2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014ca6:	4294      	cmp	r4, r2
 8014ca8:	f300 8095 	bgt.w	8014dd6 <__kernel_rem_pio2+0x2d6>
 8014cac:	f1ba 0f00 	cmp.w	sl, #0
 8014cb0:	dd07      	ble.n	8014cc2 <__kernel_rem_pio2+0x1c2>
 8014cb2:	f1ba 0f01 	cmp.w	sl, #1
 8014cb6:	f000 80a2 	beq.w	8014dfe <__kernel_rem_pio2+0x2fe>
 8014cba:	f1ba 0f02 	cmp.w	sl, #2
 8014cbe:	f000 80c1 	beq.w	8014e44 <__kernel_rem_pio2+0x344>
 8014cc2:	9b02      	ldr	r3, [sp, #8]
 8014cc4:	2b02      	cmp	r3, #2
 8014cc6:	d14a      	bne.n	8014d5e <__kernel_rem_pio2+0x25e>
 8014cc8:	4632      	mov	r2, r6
 8014cca:	463b      	mov	r3, r7
 8014ccc:	2000      	movs	r0, #0
 8014cce:	4958      	ldr	r1, [pc, #352]	; (8014e30 <__kernel_rem_pio2+0x330>)
 8014cd0:	f7eb faf2 	bl	80002b8 <__aeabi_dsub>
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	460f      	mov	r7, r1
 8014cd8:	2d00      	cmp	r5, #0
 8014cda:	d040      	beq.n	8014d5e <__kernel_rem_pio2+0x25e>
 8014cdc:	4650      	mov	r0, sl
 8014cde:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014e20 <__kernel_rem_pio2+0x320>
 8014ce2:	f000 fd65 	bl	80157b0 <scalbn>
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	4639      	mov	r1, r7
 8014cea:	ec53 2b10 	vmov	r2, r3, d0
 8014cee:	f7eb fae3 	bl	80002b8 <__aeabi_dsub>
 8014cf2:	4606      	mov	r6, r0
 8014cf4:	460f      	mov	r7, r1
 8014cf6:	e032      	b.n	8014d5e <__kernel_rem_pio2+0x25e>
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	4b4e      	ldr	r3, [pc, #312]	; (8014e34 <__kernel_rem_pio2+0x334>)
 8014cfc:	4640      	mov	r0, r8
 8014cfe:	4649      	mov	r1, r9
 8014d00:	f7eb fc92 	bl	8000628 <__aeabi_dmul>
 8014d04:	f7eb ff40 	bl	8000b88 <__aeabi_d2iz>
 8014d08:	f7eb fc24 	bl	8000554 <__aeabi_i2d>
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	4b4a      	ldr	r3, [pc, #296]	; (8014e38 <__kernel_rem_pio2+0x338>)
 8014d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d14:	f7eb fc88 	bl	8000628 <__aeabi_dmul>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	4640      	mov	r0, r8
 8014d1e:	4649      	mov	r1, r9
 8014d20:	f7eb faca 	bl	80002b8 <__aeabi_dsub>
 8014d24:	f7eb ff30 	bl	8000b88 <__aeabi_d2iz>
 8014d28:	ab0e      	add	r3, sp, #56	; 0x38
 8014d2a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014d2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d36:	f7eb fac1 	bl	80002bc <__adddf3>
 8014d3a:	3501      	adds	r5, #1
 8014d3c:	4680      	mov	r8, r0
 8014d3e:	4689      	mov	r9, r1
 8014d40:	e75e      	b.n	8014c00 <__kernel_rem_pio2+0x100>
 8014d42:	d105      	bne.n	8014d50 <__kernel_rem_pio2+0x250>
 8014d44:	1e63      	subs	r3, r4, #1
 8014d46:	aa0e      	add	r2, sp, #56	; 0x38
 8014d48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014d4c:	15c3      	asrs	r3, r0, #23
 8014d4e:	e79f      	b.n	8014c90 <__kernel_rem_pio2+0x190>
 8014d50:	2200      	movs	r2, #0
 8014d52:	4b3a      	ldr	r3, [pc, #232]	; (8014e3c <__kernel_rem_pio2+0x33c>)
 8014d54:	f7eb feee 	bl	8000b34 <__aeabi_dcmpge>
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	d139      	bne.n	8014dd0 <__kernel_rem_pio2+0x2d0>
 8014d5c:	9002      	str	r0, [sp, #8]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	2300      	movs	r3, #0
 8014d62:	4630      	mov	r0, r6
 8014d64:	4639      	mov	r1, r7
 8014d66:	f7eb fec7 	bl	8000af8 <__aeabi_dcmpeq>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f000 80c7 	beq.w	8014efe <__kernel_rem_pio2+0x3fe>
 8014d70:	1e65      	subs	r5, r4, #1
 8014d72:	462b      	mov	r3, r5
 8014d74:	2200      	movs	r2, #0
 8014d76:	9904      	ldr	r1, [sp, #16]
 8014d78:	428b      	cmp	r3, r1
 8014d7a:	da6a      	bge.n	8014e52 <__kernel_rem_pio2+0x352>
 8014d7c:	2a00      	cmp	r2, #0
 8014d7e:	f000 8088 	beq.w	8014e92 <__kernel_rem_pio2+0x392>
 8014d82:	ab0e      	add	r3, sp, #56	; 0x38
 8014d84:	f1aa 0a18 	sub.w	sl, sl, #24
 8014d88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f000 80b4 	beq.w	8014efa <__kernel_rem_pio2+0x3fa>
 8014d92:	4650      	mov	r0, sl
 8014d94:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014e20 <__kernel_rem_pio2+0x320>
 8014d98:	f000 fd0a 	bl	80157b0 <scalbn>
 8014d9c:	00ec      	lsls	r4, r5, #3
 8014d9e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014da0:	191e      	adds	r6, r3, r4
 8014da2:	ec59 8b10 	vmov	r8, r9, d0
 8014da6:	f106 0a08 	add.w	sl, r6, #8
 8014daa:	462f      	mov	r7, r5
 8014dac:	2f00      	cmp	r7, #0
 8014dae:	f280 80df 	bge.w	8014f70 <__kernel_rem_pio2+0x470>
 8014db2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014e18 <__kernel_rem_pio2+0x318>
 8014db6:	f04f 0a00 	mov.w	sl, #0
 8014dba:	eba5 030a 	sub.w	r3, r5, sl
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	f2c0 810a 	blt.w	8014fd8 <__kernel_rem_pio2+0x4d8>
 8014dc4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014e40 <__kernel_rem_pio2+0x340>
 8014dc8:	ec59 8b18 	vmov	r8, r9, d8
 8014dcc:	2700      	movs	r7, #0
 8014dce:	e0f5      	b.n	8014fbc <__kernel_rem_pio2+0x4bc>
 8014dd0:	2302      	movs	r3, #2
 8014dd2:	9302      	str	r3, [sp, #8]
 8014dd4:	e760      	b.n	8014c98 <__kernel_rem_pio2+0x198>
 8014dd6:	ab0e      	add	r3, sp, #56	; 0x38
 8014dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ddc:	b94d      	cbnz	r5, 8014df2 <__kernel_rem_pio2+0x2f2>
 8014dde:	b12b      	cbz	r3, 8014dec <__kernel_rem_pio2+0x2ec>
 8014de0:	a80e      	add	r0, sp, #56	; 0x38
 8014de2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014de6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014dea:	2301      	movs	r3, #1
 8014dec:	3201      	adds	r2, #1
 8014dee:	461d      	mov	r5, r3
 8014df0:	e759      	b.n	8014ca6 <__kernel_rem_pio2+0x1a6>
 8014df2:	a80e      	add	r0, sp, #56	; 0x38
 8014df4:	1acb      	subs	r3, r1, r3
 8014df6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	e7f6      	b.n	8014dec <__kernel_rem_pio2+0x2ec>
 8014dfe:	1e62      	subs	r2, r4, #1
 8014e00:	ab0e      	add	r3, sp, #56	; 0x38
 8014e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014e0a:	a90e      	add	r1, sp, #56	; 0x38
 8014e0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014e10:	e757      	b.n	8014cc2 <__kernel_rem_pio2+0x1c2>
 8014e12:	bf00      	nop
 8014e14:	f3af 8000 	nop.w
	...
 8014e24:	3ff00000 	.word	0x3ff00000
 8014e28:	0801a5c0 	.word	0x0801a5c0
 8014e2c:	40200000 	.word	0x40200000
 8014e30:	3ff00000 	.word	0x3ff00000
 8014e34:	3e700000 	.word	0x3e700000
 8014e38:	41700000 	.word	0x41700000
 8014e3c:	3fe00000 	.word	0x3fe00000
 8014e40:	0801a580 	.word	0x0801a580
 8014e44:	1e62      	subs	r2, r4, #1
 8014e46:	ab0e      	add	r3, sp, #56	; 0x38
 8014e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014e50:	e7db      	b.n	8014e0a <__kernel_rem_pio2+0x30a>
 8014e52:	a90e      	add	r1, sp, #56	; 0x38
 8014e54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014e58:	3b01      	subs	r3, #1
 8014e5a:	430a      	orrs	r2, r1
 8014e5c:	e78b      	b.n	8014d76 <__kernel_rem_pio2+0x276>
 8014e5e:	3301      	adds	r3, #1
 8014e60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014e64:	2900      	cmp	r1, #0
 8014e66:	d0fa      	beq.n	8014e5e <__kernel_rem_pio2+0x35e>
 8014e68:	9a08      	ldr	r2, [sp, #32]
 8014e6a:	4422      	add	r2, r4
 8014e6c:	00d2      	lsls	r2, r2, #3
 8014e6e:	a922      	add	r1, sp, #136	; 0x88
 8014e70:	18e3      	adds	r3, r4, r3
 8014e72:	9206      	str	r2, [sp, #24]
 8014e74:	440a      	add	r2, r1
 8014e76:	9302      	str	r3, [sp, #8]
 8014e78:	f10b 0108 	add.w	r1, fp, #8
 8014e7c:	f102 0308 	add.w	r3, r2, #8
 8014e80:	1c66      	adds	r6, r4, #1
 8014e82:	910a      	str	r1, [sp, #40]	; 0x28
 8014e84:	2500      	movs	r5, #0
 8014e86:	930d      	str	r3, [sp, #52]	; 0x34
 8014e88:	9b02      	ldr	r3, [sp, #8]
 8014e8a:	42b3      	cmp	r3, r6
 8014e8c:	da04      	bge.n	8014e98 <__kernel_rem_pio2+0x398>
 8014e8e:	461c      	mov	r4, r3
 8014e90:	e6a6      	b.n	8014be0 <__kernel_rem_pio2+0xe0>
 8014e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e94:	2301      	movs	r3, #1
 8014e96:	e7e3      	b.n	8014e60 <__kernel_rem_pio2+0x360>
 8014e98:	9b06      	ldr	r3, [sp, #24]
 8014e9a:	18ef      	adds	r7, r5, r3
 8014e9c:	ab22      	add	r3, sp, #136	; 0x88
 8014e9e:	441f      	add	r7, r3
 8014ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ea2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014ea6:	f7eb fb55 	bl	8000554 <__aeabi_i2d>
 8014eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eac:	461c      	mov	r4, r3
 8014eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eb0:	e9c7 0100 	strd	r0, r1, [r7]
 8014eb4:	eb03 0b05 	add.w	fp, r3, r5
 8014eb8:	2700      	movs	r7, #0
 8014eba:	f04f 0800 	mov.w	r8, #0
 8014ebe:	f04f 0900 	mov.w	r9, #0
 8014ec2:	9b07      	ldr	r3, [sp, #28]
 8014ec4:	429f      	cmp	r7, r3
 8014ec6:	dd08      	ble.n	8014eda <__kernel_rem_pio2+0x3da>
 8014ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eca:	aa72      	add	r2, sp, #456	; 0x1c8
 8014ecc:	18eb      	adds	r3, r5, r3
 8014ece:	4413      	add	r3, r2
 8014ed0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014ed4:	3601      	adds	r6, #1
 8014ed6:	3508      	adds	r5, #8
 8014ed8:	e7d6      	b.n	8014e88 <__kernel_rem_pio2+0x388>
 8014eda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014ede:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014ee2:	f7eb fba1 	bl	8000628 <__aeabi_dmul>
 8014ee6:	4602      	mov	r2, r0
 8014ee8:	460b      	mov	r3, r1
 8014eea:	4640      	mov	r0, r8
 8014eec:	4649      	mov	r1, r9
 8014eee:	f7eb f9e5 	bl	80002bc <__adddf3>
 8014ef2:	3701      	adds	r7, #1
 8014ef4:	4680      	mov	r8, r0
 8014ef6:	4689      	mov	r9, r1
 8014ef8:	e7e3      	b.n	8014ec2 <__kernel_rem_pio2+0x3c2>
 8014efa:	3d01      	subs	r5, #1
 8014efc:	e741      	b.n	8014d82 <__kernel_rem_pio2+0x282>
 8014efe:	f1ca 0000 	rsb	r0, sl, #0
 8014f02:	ec47 6b10 	vmov	d0, r6, r7
 8014f06:	f000 fc53 	bl	80157b0 <scalbn>
 8014f0a:	ec57 6b10 	vmov	r6, r7, d0
 8014f0e:	2200      	movs	r2, #0
 8014f10:	4b99      	ldr	r3, [pc, #612]	; (8015178 <__kernel_rem_pio2+0x678>)
 8014f12:	ee10 0a10 	vmov	r0, s0
 8014f16:	4639      	mov	r1, r7
 8014f18:	f7eb fe0c 	bl	8000b34 <__aeabi_dcmpge>
 8014f1c:	b1f8      	cbz	r0, 8014f5e <__kernel_rem_pio2+0x45e>
 8014f1e:	2200      	movs	r2, #0
 8014f20:	4b96      	ldr	r3, [pc, #600]	; (801517c <__kernel_rem_pio2+0x67c>)
 8014f22:	4630      	mov	r0, r6
 8014f24:	4639      	mov	r1, r7
 8014f26:	f7eb fb7f 	bl	8000628 <__aeabi_dmul>
 8014f2a:	f7eb fe2d 	bl	8000b88 <__aeabi_d2iz>
 8014f2e:	4680      	mov	r8, r0
 8014f30:	f7eb fb10 	bl	8000554 <__aeabi_i2d>
 8014f34:	2200      	movs	r2, #0
 8014f36:	4b90      	ldr	r3, [pc, #576]	; (8015178 <__kernel_rem_pio2+0x678>)
 8014f38:	f7eb fb76 	bl	8000628 <__aeabi_dmul>
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	4602      	mov	r2, r0
 8014f40:	4639      	mov	r1, r7
 8014f42:	4630      	mov	r0, r6
 8014f44:	f7eb f9b8 	bl	80002b8 <__aeabi_dsub>
 8014f48:	f7eb fe1e 	bl	8000b88 <__aeabi_d2iz>
 8014f4c:	1c65      	adds	r5, r4, #1
 8014f4e:	ab0e      	add	r3, sp, #56	; 0x38
 8014f50:	f10a 0a18 	add.w	sl, sl, #24
 8014f54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014f5c:	e719      	b.n	8014d92 <__kernel_rem_pio2+0x292>
 8014f5e:	4630      	mov	r0, r6
 8014f60:	4639      	mov	r1, r7
 8014f62:	f7eb fe11 	bl	8000b88 <__aeabi_d2iz>
 8014f66:	ab0e      	add	r3, sp, #56	; 0x38
 8014f68:	4625      	mov	r5, r4
 8014f6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f6e:	e710      	b.n	8014d92 <__kernel_rem_pio2+0x292>
 8014f70:	ab0e      	add	r3, sp, #56	; 0x38
 8014f72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014f76:	f7eb faed 	bl	8000554 <__aeabi_i2d>
 8014f7a:	4642      	mov	r2, r8
 8014f7c:	464b      	mov	r3, r9
 8014f7e:	f7eb fb53 	bl	8000628 <__aeabi_dmul>
 8014f82:	2200      	movs	r2, #0
 8014f84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014f88:	4b7c      	ldr	r3, [pc, #496]	; (801517c <__kernel_rem_pio2+0x67c>)
 8014f8a:	4640      	mov	r0, r8
 8014f8c:	4649      	mov	r1, r9
 8014f8e:	f7eb fb4b 	bl	8000628 <__aeabi_dmul>
 8014f92:	3f01      	subs	r7, #1
 8014f94:	4680      	mov	r8, r0
 8014f96:	4689      	mov	r9, r1
 8014f98:	e708      	b.n	8014dac <__kernel_rem_pio2+0x2ac>
 8014f9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014fa6:	f7eb fb3f 	bl	8000628 <__aeabi_dmul>
 8014faa:	4602      	mov	r2, r0
 8014fac:	460b      	mov	r3, r1
 8014fae:	4640      	mov	r0, r8
 8014fb0:	4649      	mov	r1, r9
 8014fb2:	f7eb f983 	bl	80002bc <__adddf3>
 8014fb6:	3701      	adds	r7, #1
 8014fb8:	4680      	mov	r8, r0
 8014fba:	4689      	mov	r9, r1
 8014fbc:	9b04      	ldr	r3, [sp, #16]
 8014fbe:	429f      	cmp	r7, r3
 8014fc0:	dc01      	bgt.n	8014fc6 <__kernel_rem_pio2+0x4c6>
 8014fc2:	45ba      	cmp	sl, r7
 8014fc4:	dae9      	bge.n	8014f9a <__kernel_rem_pio2+0x49a>
 8014fc6:	ab4a      	add	r3, sp, #296	; 0x128
 8014fc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014fcc:	e9c3 8900 	strd	r8, r9, [r3]
 8014fd0:	f10a 0a01 	add.w	sl, sl, #1
 8014fd4:	3e08      	subs	r6, #8
 8014fd6:	e6f0      	b.n	8014dba <__kernel_rem_pio2+0x2ba>
 8014fd8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014fda:	2b03      	cmp	r3, #3
 8014fdc:	d85b      	bhi.n	8015096 <__kernel_rem_pio2+0x596>
 8014fde:	e8df f003 	tbb	[pc, r3]
 8014fe2:	264a      	.short	0x264a
 8014fe4:	0226      	.short	0x0226
 8014fe6:	ab9a      	add	r3, sp, #616	; 0x268
 8014fe8:	441c      	add	r4, r3
 8014fea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014fee:	46a2      	mov	sl, r4
 8014ff0:	46ab      	mov	fp, r5
 8014ff2:	f1bb 0f00 	cmp.w	fp, #0
 8014ff6:	dc6c      	bgt.n	80150d2 <__kernel_rem_pio2+0x5d2>
 8014ff8:	46a2      	mov	sl, r4
 8014ffa:	46ab      	mov	fp, r5
 8014ffc:	f1bb 0f01 	cmp.w	fp, #1
 8015000:	f300 8086 	bgt.w	8015110 <__kernel_rem_pio2+0x610>
 8015004:	2000      	movs	r0, #0
 8015006:	2100      	movs	r1, #0
 8015008:	2d01      	cmp	r5, #1
 801500a:	f300 80a0 	bgt.w	801514e <__kernel_rem_pio2+0x64e>
 801500e:	9b02      	ldr	r3, [sp, #8]
 8015010:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015014:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015018:	2b00      	cmp	r3, #0
 801501a:	f040 809e 	bne.w	801515a <__kernel_rem_pio2+0x65a>
 801501e:	9b01      	ldr	r3, [sp, #4]
 8015020:	e9c3 7800 	strd	r7, r8, [r3]
 8015024:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015028:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801502c:	e033      	b.n	8015096 <__kernel_rem_pio2+0x596>
 801502e:	3408      	adds	r4, #8
 8015030:	ab4a      	add	r3, sp, #296	; 0x128
 8015032:	441c      	add	r4, r3
 8015034:	462e      	mov	r6, r5
 8015036:	2000      	movs	r0, #0
 8015038:	2100      	movs	r1, #0
 801503a:	2e00      	cmp	r6, #0
 801503c:	da3a      	bge.n	80150b4 <__kernel_rem_pio2+0x5b4>
 801503e:	9b02      	ldr	r3, [sp, #8]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d03d      	beq.n	80150c0 <__kernel_rem_pio2+0x5c0>
 8015044:	4602      	mov	r2, r0
 8015046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801504a:	9c01      	ldr	r4, [sp, #4]
 801504c:	e9c4 2300 	strd	r2, r3, [r4]
 8015050:	4602      	mov	r2, r0
 8015052:	460b      	mov	r3, r1
 8015054:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015058:	f7eb f92e 	bl	80002b8 <__aeabi_dsub>
 801505c:	ae4c      	add	r6, sp, #304	; 0x130
 801505e:	2401      	movs	r4, #1
 8015060:	42a5      	cmp	r5, r4
 8015062:	da30      	bge.n	80150c6 <__kernel_rem_pio2+0x5c6>
 8015064:	9b02      	ldr	r3, [sp, #8]
 8015066:	b113      	cbz	r3, 801506e <__kernel_rem_pio2+0x56e>
 8015068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801506c:	4619      	mov	r1, r3
 801506e:	9b01      	ldr	r3, [sp, #4]
 8015070:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015074:	e00f      	b.n	8015096 <__kernel_rem_pio2+0x596>
 8015076:	ab9a      	add	r3, sp, #616	; 0x268
 8015078:	441c      	add	r4, r3
 801507a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801507e:	2000      	movs	r0, #0
 8015080:	2100      	movs	r1, #0
 8015082:	2d00      	cmp	r5, #0
 8015084:	da10      	bge.n	80150a8 <__kernel_rem_pio2+0x5a8>
 8015086:	9b02      	ldr	r3, [sp, #8]
 8015088:	b113      	cbz	r3, 8015090 <__kernel_rem_pio2+0x590>
 801508a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801508e:	4619      	mov	r1, r3
 8015090:	9b01      	ldr	r3, [sp, #4]
 8015092:	e9c3 0100 	strd	r0, r1, [r3]
 8015096:	9b06      	ldr	r3, [sp, #24]
 8015098:	f003 0007 	and.w	r0, r3, #7
 801509c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80150a0:	ecbd 8b02 	vpop	{d8}
 80150a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80150ac:	f7eb f906 	bl	80002bc <__adddf3>
 80150b0:	3d01      	subs	r5, #1
 80150b2:	e7e6      	b.n	8015082 <__kernel_rem_pio2+0x582>
 80150b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80150b8:	f7eb f900 	bl	80002bc <__adddf3>
 80150bc:	3e01      	subs	r6, #1
 80150be:	e7bc      	b.n	801503a <__kernel_rem_pio2+0x53a>
 80150c0:	4602      	mov	r2, r0
 80150c2:	460b      	mov	r3, r1
 80150c4:	e7c1      	b.n	801504a <__kernel_rem_pio2+0x54a>
 80150c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80150ca:	f7eb f8f7 	bl	80002bc <__adddf3>
 80150ce:	3401      	adds	r4, #1
 80150d0:	e7c6      	b.n	8015060 <__kernel_rem_pio2+0x560>
 80150d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80150d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80150da:	4640      	mov	r0, r8
 80150dc:	ec53 2b17 	vmov	r2, r3, d7
 80150e0:	4649      	mov	r1, r9
 80150e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80150e6:	f7eb f8e9 	bl	80002bc <__adddf3>
 80150ea:	4602      	mov	r2, r0
 80150ec:	460b      	mov	r3, r1
 80150ee:	4606      	mov	r6, r0
 80150f0:	460f      	mov	r7, r1
 80150f2:	4640      	mov	r0, r8
 80150f4:	4649      	mov	r1, r9
 80150f6:	f7eb f8df 	bl	80002b8 <__aeabi_dsub>
 80150fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150fe:	f7eb f8dd 	bl	80002bc <__adddf3>
 8015102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015106:	e9ca 0100 	strd	r0, r1, [sl]
 801510a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801510e:	e770      	b.n	8014ff2 <__kernel_rem_pio2+0x4f2>
 8015110:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015114:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015118:	4630      	mov	r0, r6
 801511a:	ec53 2b17 	vmov	r2, r3, d7
 801511e:	4639      	mov	r1, r7
 8015120:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015124:	f7eb f8ca 	bl	80002bc <__adddf3>
 8015128:	4602      	mov	r2, r0
 801512a:	460b      	mov	r3, r1
 801512c:	4680      	mov	r8, r0
 801512e:	4689      	mov	r9, r1
 8015130:	4630      	mov	r0, r6
 8015132:	4639      	mov	r1, r7
 8015134:	f7eb f8c0 	bl	80002b8 <__aeabi_dsub>
 8015138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801513c:	f7eb f8be 	bl	80002bc <__adddf3>
 8015140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015144:	e9ca 0100 	strd	r0, r1, [sl]
 8015148:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801514c:	e756      	b.n	8014ffc <__kernel_rem_pio2+0x4fc>
 801514e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015152:	f7eb f8b3 	bl	80002bc <__adddf3>
 8015156:	3d01      	subs	r5, #1
 8015158:	e756      	b.n	8015008 <__kernel_rem_pio2+0x508>
 801515a:	9b01      	ldr	r3, [sp, #4]
 801515c:	9a01      	ldr	r2, [sp, #4]
 801515e:	601f      	str	r7, [r3, #0]
 8015160:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015164:	605c      	str	r4, [r3, #4]
 8015166:	609d      	str	r5, [r3, #8]
 8015168:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801516c:	60d3      	str	r3, [r2, #12]
 801516e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015172:	6110      	str	r0, [r2, #16]
 8015174:	6153      	str	r3, [r2, #20]
 8015176:	e78e      	b.n	8015096 <__kernel_rem_pio2+0x596>
 8015178:	41700000 	.word	0x41700000
 801517c:	3e700000 	.word	0x3e700000

08015180 <__kernel_sin>:
 8015180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015184:	ec55 4b10 	vmov	r4, r5, d0
 8015188:	b085      	sub	sp, #20
 801518a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801518e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015192:	ed8d 1b00 	vstr	d1, [sp]
 8015196:	9002      	str	r0, [sp, #8]
 8015198:	da06      	bge.n	80151a8 <__kernel_sin+0x28>
 801519a:	ee10 0a10 	vmov	r0, s0
 801519e:	4629      	mov	r1, r5
 80151a0:	f7eb fcf2 	bl	8000b88 <__aeabi_d2iz>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	d051      	beq.n	801524c <__kernel_sin+0xcc>
 80151a8:	4622      	mov	r2, r4
 80151aa:	462b      	mov	r3, r5
 80151ac:	4620      	mov	r0, r4
 80151ae:	4629      	mov	r1, r5
 80151b0:	f7eb fa3a 	bl	8000628 <__aeabi_dmul>
 80151b4:	4682      	mov	sl, r0
 80151b6:	468b      	mov	fp, r1
 80151b8:	4602      	mov	r2, r0
 80151ba:	460b      	mov	r3, r1
 80151bc:	4620      	mov	r0, r4
 80151be:	4629      	mov	r1, r5
 80151c0:	f7eb fa32 	bl	8000628 <__aeabi_dmul>
 80151c4:	a341      	add	r3, pc, #260	; (adr r3, 80152cc <__kernel_sin+0x14c>)
 80151c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ca:	4680      	mov	r8, r0
 80151cc:	4689      	mov	r9, r1
 80151ce:	4650      	mov	r0, sl
 80151d0:	4659      	mov	r1, fp
 80151d2:	f7eb fa29 	bl	8000628 <__aeabi_dmul>
 80151d6:	a33f      	add	r3, pc, #252	; (adr r3, 80152d4 <__kernel_sin+0x154>)
 80151d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151dc:	f7eb f86c 	bl	80002b8 <__aeabi_dsub>
 80151e0:	4652      	mov	r2, sl
 80151e2:	465b      	mov	r3, fp
 80151e4:	f7eb fa20 	bl	8000628 <__aeabi_dmul>
 80151e8:	a33c      	add	r3, pc, #240	; (adr r3, 80152dc <__kernel_sin+0x15c>)
 80151ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ee:	f7eb f865 	bl	80002bc <__adddf3>
 80151f2:	4652      	mov	r2, sl
 80151f4:	465b      	mov	r3, fp
 80151f6:	f7eb fa17 	bl	8000628 <__aeabi_dmul>
 80151fa:	a33a      	add	r3, pc, #232	; (adr r3, 80152e4 <__kernel_sin+0x164>)
 80151fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015200:	f7eb f85a 	bl	80002b8 <__aeabi_dsub>
 8015204:	4652      	mov	r2, sl
 8015206:	465b      	mov	r3, fp
 8015208:	f7eb fa0e 	bl	8000628 <__aeabi_dmul>
 801520c:	a337      	add	r3, pc, #220	; (adr r3, 80152ec <__kernel_sin+0x16c>)
 801520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015212:	f7eb f853 	bl	80002bc <__adddf3>
 8015216:	9b02      	ldr	r3, [sp, #8]
 8015218:	4606      	mov	r6, r0
 801521a:	460f      	mov	r7, r1
 801521c:	b9db      	cbnz	r3, 8015256 <__kernel_sin+0xd6>
 801521e:	4602      	mov	r2, r0
 8015220:	460b      	mov	r3, r1
 8015222:	4650      	mov	r0, sl
 8015224:	4659      	mov	r1, fp
 8015226:	f7eb f9ff 	bl	8000628 <__aeabi_dmul>
 801522a:	a325      	add	r3, pc, #148	; (adr r3, 80152c0 <__kernel_sin+0x140>)
 801522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015230:	f7eb f842 	bl	80002b8 <__aeabi_dsub>
 8015234:	4642      	mov	r2, r8
 8015236:	464b      	mov	r3, r9
 8015238:	f7eb f9f6 	bl	8000628 <__aeabi_dmul>
 801523c:	4602      	mov	r2, r0
 801523e:	460b      	mov	r3, r1
 8015240:	4620      	mov	r0, r4
 8015242:	4629      	mov	r1, r5
 8015244:	f7eb f83a 	bl	80002bc <__adddf3>
 8015248:	4604      	mov	r4, r0
 801524a:	460d      	mov	r5, r1
 801524c:	ec45 4b10 	vmov	d0, r4, r5
 8015250:	b005      	add	sp, #20
 8015252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015256:	2200      	movs	r2, #0
 8015258:	4b1b      	ldr	r3, [pc, #108]	; (80152c8 <__kernel_sin+0x148>)
 801525a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801525e:	f7eb f9e3 	bl	8000628 <__aeabi_dmul>
 8015262:	4632      	mov	r2, r6
 8015264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015268:	463b      	mov	r3, r7
 801526a:	4640      	mov	r0, r8
 801526c:	4649      	mov	r1, r9
 801526e:	f7eb f9db 	bl	8000628 <__aeabi_dmul>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801527a:	f7eb f81d 	bl	80002b8 <__aeabi_dsub>
 801527e:	4652      	mov	r2, sl
 8015280:	465b      	mov	r3, fp
 8015282:	f7eb f9d1 	bl	8000628 <__aeabi_dmul>
 8015286:	e9dd 2300 	ldrd	r2, r3, [sp]
 801528a:	f7eb f815 	bl	80002b8 <__aeabi_dsub>
 801528e:	a30c      	add	r3, pc, #48	; (adr r3, 80152c0 <__kernel_sin+0x140>)
 8015290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015294:	4606      	mov	r6, r0
 8015296:	460f      	mov	r7, r1
 8015298:	4640      	mov	r0, r8
 801529a:	4649      	mov	r1, r9
 801529c:	f7eb f9c4 	bl	8000628 <__aeabi_dmul>
 80152a0:	4602      	mov	r2, r0
 80152a2:	460b      	mov	r3, r1
 80152a4:	4630      	mov	r0, r6
 80152a6:	4639      	mov	r1, r7
 80152a8:	f7eb f808 	bl	80002bc <__adddf3>
 80152ac:	4602      	mov	r2, r0
 80152ae:	460b      	mov	r3, r1
 80152b0:	4620      	mov	r0, r4
 80152b2:	4629      	mov	r1, r5
 80152b4:	f7eb f800 	bl	80002b8 <__aeabi_dsub>
 80152b8:	e7c6      	b.n	8015248 <__kernel_sin+0xc8>
 80152ba:	bf00      	nop
 80152bc:	f3af 8000 	nop.w
 80152c0:	55555549 	.word	0x55555549
 80152c4:	3fc55555 	.word	0x3fc55555
 80152c8:	3fe00000 	.word	0x3fe00000
 80152cc:	5acfd57c 	.word	0x5acfd57c
 80152d0:	3de5d93a 	.word	0x3de5d93a
 80152d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80152d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80152dc:	57b1fe7d 	.word	0x57b1fe7d
 80152e0:	3ec71de3 	.word	0x3ec71de3
 80152e4:	19c161d5 	.word	0x19c161d5
 80152e8:	3f2a01a0 	.word	0x3f2a01a0
 80152ec:	1110f8a6 	.word	0x1110f8a6
 80152f0:	3f811111 	.word	0x3f811111
 80152f4:	00000000 	.word	0x00000000

080152f8 <__kernel_tan>:
 80152f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152fc:	ec5b ab10 	vmov	sl, fp, d0
 8015300:	4bbf      	ldr	r3, [pc, #764]	; (8015600 <__kernel_tan+0x308>)
 8015302:	b089      	sub	sp, #36	; 0x24
 8015304:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8015308:	429f      	cmp	r7, r3
 801530a:	ec59 8b11 	vmov	r8, r9, d1
 801530e:	4606      	mov	r6, r0
 8015310:	f8cd b008 	str.w	fp, [sp, #8]
 8015314:	dc22      	bgt.n	801535c <__kernel_tan+0x64>
 8015316:	ee10 0a10 	vmov	r0, s0
 801531a:	4659      	mov	r1, fp
 801531c:	f7eb fc34 	bl	8000b88 <__aeabi_d2iz>
 8015320:	2800      	cmp	r0, #0
 8015322:	d145      	bne.n	80153b0 <__kernel_tan+0xb8>
 8015324:	1c73      	adds	r3, r6, #1
 8015326:	4652      	mov	r2, sl
 8015328:	4313      	orrs	r3, r2
 801532a:	433b      	orrs	r3, r7
 801532c:	d110      	bne.n	8015350 <__kernel_tan+0x58>
 801532e:	ec4b ab10 	vmov	d0, sl, fp
 8015332:	f000 f9ad 	bl	8015690 <fabs>
 8015336:	49b3      	ldr	r1, [pc, #716]	; (8015604 <__kernel_tan+0x30c>)
 8015338:	ec53 2b10 	vmov	r2, r3, d0
 801533c:	2000      	movs	r0, #0
 801533e:	f7eb fa9d 	bl	800087c <__aeabi_ddiv>
 8015342:	4682      	mov	sl, r0
 8015344:	468b      	mov	fp, r1
 8015346:	ec4b ab10 	vmov	d0, sl, fp
 801534a:	b009      	add	sp, #36	; 0x24
 801534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015350:	2e01      	cmp	r6, #1
 8015352:	d0f8      	beq.n	8015346 <__kernel_tan+0x4e>
 8015354:	465b      	mov	r3, fp
 8015356:	2000      	movs	r0, #0
 8015358:	49ab      	ldr	r1, [pc, #684]	; (8015608 <__kernel_tan+0x310>)
 801535a:	e7f0      	b.n	801533e <__kernel_tan+0x46>
 801535c:	4bab      	ldr	r3, [pc, #684]	; (801560c <__kernel_tan+0x314>)
 801535e:	429f      	cmp	r7, r3
 8015360:	dd26      	ble.n	80153b0 <__kernel_tan+0xb8>
 8015362:	9b02      	ldr	r3, [sp, #8]
 8015364:	2b00      	cmp	r3, #0
 8015366:	da09      	bge.n	801537c <__kernel_tan+0x84>
 8015368:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801536c:	469b      	mov	fp, r3
 801536e:	ee10 aa10 	vmov	sl, s0
 8015372:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015376:	ee11 8a10 	vmov	r8, s2
 801537a:	4699      	mov	r9, r3
 801537c:	4652      	mov	r2, sl
 801537e:	465b      	mov	r3, fp
 8015380:	a181      	add	r1, pc, #516	; (adr r1, 8015588 <__kernel_tan+0x290>)
 8015382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015386:	f7ea ff97 	bl	80002b8 <__aeabi_dsub>
 801538a:	4642      	mov	r2, r8
 801538c:	464b      	mov	r3, r9
 801538e:	4604      	mov	r4, r0
 8015390:	460d      	mov	r5, r1
 8015392:	a17f      	add	r1, pc, #508	; (adr r1, 8015590 <__kernel_tan+0x298>)
 8015394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015398:	f7ea ff8e 	bl	80002b8 <__aeabi_dsub>
 801539c:	4622      	mov	r2, r4
 801539e:	462b      	mov	r3, r5
 80153a0:	f7ea ff8c 	bl	80002bc <__adddf3>
 80153a4:	f04f 0800 	mov.w	r8, #0
 80153a8:	4682      	mov	sl, r0
 80153aa:	468b      	mov	fp, r1
 80153ac:	f04f 0900 	mov.w	r9, #0
 80153b0:	4652      	mov	r2, sl
 80153b2:	465b      	mov	r3, fp
 80153b4:	4650      	mov	r0, sl
 80153b6:	4659      	mov	r1, fp
 80153b8:	f7eb f936 	bl	8000628 <__aeabi_dmul>
 80153bc:	4602      	mov	r2, r0
 80153be:	460b      	mov	r3, r1
 80153c0:	e9cd 0100 	strd	r0, r1, [sp]
 80153c4:	f7eb f930 	bl	8000628 <__aeabi_dmul>
 80153c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153cc:	4604      	mov	r4, r0
 80153ce:	460d      	mov	r5, r1
 80153d0:	4650      	mov	r0, sl
 80153d2:	4659      	mov	r1, fp
 80153d4:	f7eb f928 	bl	8000628 <__aeabi_dmul>
 80153d8:	a36f      	add	r3, pc, #444	; (adr r3, 8015598 <__kernel_tan+0x2a0>)
 80153da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153e2:	4620      	mov	r0, r4
 80153e4:	4629      	mov	r1, r5
 80153e6:	f7eb f91f 	bl	8000628 <__aeabi_dmul>
 80153ea:	a36d      	add	r3, pc, #436	; (adr r3, 80155a0 <__kernel_tan+0x2a8>)
 80153ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f0:	f7ea ff64 	bl	80002bc <__adddf3>
 80153f4:	4622      	mov	r2, r4
 80153f6:	462b      	mov	r3, r5
 80153f8:	f7eb f916 	bl	8000628 <__aeabi_dmul>
 80153fc:	a36a      	add	r3, pc, #424	; (adr r3, 80155a8 <__kernel_tan+0x2b0>)
 80153fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015402:	f7ea ff5b 	bl	80002bc <__adddf3>
 8015406:	4622      	mov	r2, r4
 8015408:	462b      	mov	r3, r5
 801540a:	f7eb f90d 	bl	8000628 <__aeabi_dmul>
 801540e:	a368      	add	r3, pc, #416	; (adr r3, 80155b0 <__kernel_tan+0x2b8>)
 8015410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015414:	f7ea ff52 	bl	80002bc <__adddf3>
 8015418:	4622      	mov	r2, r4
 801541a:	462b      	mov	r3, r5
 801541c:	f7eb f904 	bl	8000628 <__aeabi_dmul>
 8015420:	a365      	add	r3, pc, #404	; (adr r3, 80155b8 <__kernel_tan+0x2c0>)
 8015422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015426:	f7ea ff49 	bl	80002bc <__adddf3>
 801542a:	4622      	mov	r2, r4
 801542c:	462b      	mov	r3, r5
 801542e:	f7eb f8fb 	bl	8000628 <__aeabi_dmul>
 8015432:	a363      	add	r3, pc, #396	; (adr r3, 80155c0 <__kernel_tan+0x2c8>)
 8015434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015438:	f7ea ff40 	bl	80002bc <__adddf3>
 801543c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015440:	f7eb f8f2 	bl	8000628 <__aeabi_dmul>
 8015444:	a360      	add	r3, pc, #384	; (adr r3, 80155c8 <__kernel_tan+0x2d0>)
 8015446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801544e:	4620      	mov	r0, r4
 8015450:	4629      	mov	r1, r5
 8015452:	f7eb f8e9 	bl	8000628 <__aeabi_dmul>
 8015456:	a35e      	add	r3, pc, #376	; (adr r3, 80155d0 <__kernel_tan+0x2d8>)
 8015458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801545c:	f7ea ff2e 	bl	80002bc <__adddf3>
 8015460:	4622      	mov	r2, r4
 8015462:	462b      	mov	r3, r5
 8015464:	f7eb f8e0 	bl	8000628 <__aeabi_dmul>
 8015468:	a35b      	add	r3, pc, #364	; (adr r3, 80155d8 <__kernel_tan+0x2e0>)
 801546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546e:	f7ea ff25 	bl	80002bc <__adddf3>
 8015472:	4622      	mov	r2, r4
 8015474:	462b      	mov	r3, r5
 8015476:	f7eb f8d7 	bl	8000628 <__aeabi_dmul>
 801547a:	a359      	add	r3, pc, #356	; (adr r3, 80155e0 <__kernel_tan+0x2e8>)
 801547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015480:	f7ea ff1c 	bl	80002bc <__adddf3>
 8015484:	4622      	mov	r2, r4
 8015486:	462b      	mov	r3, r5
 8015488:	f7eb f8ce 	bl	8000628 <__aeabi_dmul>
 801548c:	a356      	add	r3, pc, #344	; (adr r3, 80155e8 <__kernel_tan+0x2f0>)
 801548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015492:	f7ea ff13 	bl	80002bc <__adddf3>
 8015496:	4622      	mov	r2, r4
 8015498:	462b      	mov	r3, r5
 801549a:	f7eb f8c5 	bl	8000628 <__aeabi_dmul>
 801549e:	a354      	add	r3, pc, #336	; (adr r3, 80155f0 <__kernel_tan+0x2f8>)
 80154a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a4:	f7ea ff0a 	bl	80002bc <__adddf3>
 80154a8:	4602      	mov	r2, r0
 80154aa:	460b      	mov	r3, r1
 80154ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154b0:	f7ea ff04 	bl	80002bc <__adddf3>
 80154b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154b8:	f7eb f8b6 	bl	8000628 <__aeabi_dmul>
 80154bc:	4642      	mov	r2, r8
 80154be:	464b      	mov	r3, r9
 80154c0:	f7ea fefc 	bl	80002bc <__adddf3>
 80154c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154c8:	f7eb f8ae 	bl	8000628 <__aeabi_dmul>
 80154cc:	4642      	mov	r2, r8
 80154ce:	464b      	mov	r3, r9
 80154d0:	f7ea fef4 	bl	80002bc <__adddf3>
 80154d4:	a348      	add	r3, pc, #288	; (adr r3, 80155f8 <__kernel_tan+0x300>)
 80154d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154da:	4604      	mov	r4, r0
 80154dc:	460d      	mov	r5, r1
 80154de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154e2:	f7eb f8a1 	bl	8000628 <__aeabi_dmul>
 80154e6:	4622      	mov	r2, r4
 80154e8:	462b      	mov	r3, r5
 80154ea:	f7ea fee7 	bl	80002bc <__adddf3>
 80154ee:	e9cd 0100 	strd	r0, r1, [sp]
 80154f2:	460b      	mov	r3, r1
 80154f4:	4602      	mov	r2, r0
 80154f6:	4659      	mov	r1, fp
 80154f8:	4650      	mov	r0, sl
 80154fa:	f7ea fedf 	bl	80002bc <__adddf3>
 80154fe:	4b43      	ldr	r3, [pc, #268]	; (801560c <__kernel_tan+0x314>)
 8015500:	429f      	cmp	r7, r3
 8015502:	4604      	mov	r4, r0
 8015504:	460d      	mov	r5, r1
 8015506:	f340 8083 	ble.w	8015610 <__kernel_tan+0x318>
 801550a:	4630      	mov	r0, r6
 801550c:	f7eb f822 	bl	8000554 <__aeabi_i2d>
 8015510:	4622      	mov	r2, r4
 8015512:	4680      	mov	r8, r0
 8015514:	4689      	mov	r9, r1
 8015516:	462b      	mov	r3, r5
 8015518:	4620      	mov	r0, r4
 801551a:	4629      	mov	r1, r5
 801551c:	f7eb f884 	bl	8000628 <__aeabi_dmul>
 8015520:	4642      	mov	r2, r8
 8015522:	4606      	mov	r6, r0
 8015524:	460f      	mov	r7, r1
 8015526:	464b      	mov	r3, r9
 8015528:	4620      	mov	r0, r4
 801552a:	4629      	mov	r1, r5
 801552c:	f7ea fec6 	bl	80002bc <__adddf3>
 8015530:	4602      	mov	r2, r0
 8015532:	460b      	mov	r3, r1
 8015534:	4630      	mov	r0, r6
 8015536:	4639      	mov	r1, r7
 8015538:	f7eb f9a0 	bl	800087c <__aeabi_ddiv>
 801553c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015540:	f7ea feba 	bl	80002b8 <__aeabi_dsub>
 8015544:	4602      	mov	r2, r0
 8015546:	460b      	mov	r3, r1
 8015548:	4650      	mov	r0, sl
 801554a:	4659      	mov	r1, fp
 801554c:	f7ea feb4 	bl	80002b8 <__aeabi_dsub>
 8015550:	4602      	mov	r2, r0
 8015552:	460b      	mov	r3, r1
 8015554:	f7ea feb2 	bl	80002bc <__adddf3>
 8015558:	4602      	mov	r2, r0
 801555a:	460b      	mov	r3, r1
 801555c:	4640      	mov	r0, r8
 801555e:	4649      	mov	r1, r9
 8015560:	f7ea feaa 	bl	80002b8 <__aeabi_dsub>
 8015564:	9b02      	ldr	r3, [sp, #8]
 8015566:	4604      	mov	r4, r0
 8015568:	1798      	asrs	r0, r3, #30
 801556a:	f000 0002 	and.w	r0, r0, #2
 801556e:	f1c0 0001 	rsb	r0, r0, #1
 8015572:	460d      	mov	r5, r1
 8015574:	f7ea ffee 	bl	8000554 <__aeabi_i2d>
 8015578:	4602      	mov	r2, r0
 801557a:	460b      	mov	r3, r1
 801557c:	4620      	mov	r0, r4
 801557e:	4629      	mov	r1, r5
 8015580:	f7eb f852 	bl	8000628 <__aeabi_dmul>
 8015584:	e6dd      	b.n	8015342 <__kernel_tan+0x4a>
 8015586:	bf00      	nop
 8015588:	54442d18 	.word	0x54442d18
 801558c:	3fe921fb 	.word	0x3fe921fb
 8015590:	33145c07 	.word	0x33145c07
 8015594:	3c81a626 	.word	0x3c81a626
 8015598:	74bf7ad4 	.word	0x74bf7ad4
 801559c:	3efb2a70 	.word	0x3efb2a70
 80155a0:	32f0a7e9 	.word	0x32f0a7e9
 80155a4:	3f12b80f 	.word	0x3f12b80f
 80155a8:	1a8d1068 	.word	0x1a8d1068
 80155ac:	3f3026f7 	.word	0x3f3026f7
 80155b0:	fee08315 	.word	0xfee08315
 80155b4:	3f57dbc8 	.word	0x3f57dbc8
 80155b8:	e96e8493 	.word	0xe96e8493
 80155bc:	3f8226e3 	.word	0x3f8226e3
 80155c0:	1bb341fe 	.word	0x1bb341fe
 80155c4:	3faba1ba 	.word	0x3faba1ba
 80155c8:	db605373 	.word	0xdb605373
 80155cc:	bef375cb 	.word	0xbef375cb
 80155d0:	a03792a6 	.word	0xa03792a6
 80155d4:	3f147e88 	.word	0x3f147e88
 80155d8:	f2f26501 	.word	0xf2f26501
 80155dc:	3f4344d8 	.word	0x3f4344d8
 80155e0:	c9560328 	.word	0xc9560328
 80155e4:	3f6d6d22 	.word	0x3f6d6d22
 80155e8:	8406d637 	.word	0x8406d637
 80155ec:	3f9664f4 	.word	0x3f9664f4
 80155f0:	1110fe7a 	.word	0x1110fe7a
 80155f4:	3fc11111 	.word	0x3fc11111
 80155f8:	55555563 	.word	0x55555563
 80155fc:	3fd55555 	.word	0x3fd55555
 8015600:	3e2fffff 	.word	0x3e2fffff
 8015604:	3ff00000 	.word	0x3ff00000
 8015608:	bff00000 	.word	0xbff00000
 801560c:	3fe59427 	.word	0x3fe59427
 8015610:	2e01      	cmp	r6, #1
 8015612:	d036      	beq.n	8015682 <__kernel_tan+0x38a>
 8015614:	460f      	mov	r7, r1
 8015616:	4602      	mov	r2, r0
 8015618:	460b      	mov	r3, r1
 801561a:	2000      	movs	r0, #0
 801561c:	491a      	ldr	r1, [pc, #104]	; (8015688 <__kernel_tan+0x390>)
 801561e:	f7eb f92d 	bl	800087c <__aeabi_ddiv>
 8015622:	2600      	movs	r6, #0
 8015624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015628:	4652      	mov	r2, sl
 801562a:	465b      	mov	r3, fp
 801562c:	4630      	mov	r0, r6
 801562e:	4639      	mov	r1, r7
 8015630:	f7ea fe42 	bl	80002b8 <__aeabi_dsub>
 8015634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015638:	4602      	mov	r2, r0
 801563a:	460b      	mov	r3, r1
 801563c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015640:	f7ea fe3a 	bl	80002b8 <__aeabi_dsub>
 8015644:	4632      	mov	r2, r6
 8015646:	462b      	mov	r3, r5
 8015648:	f7ea ffee 	bl	8000628 <__aeabi_dmul>
 801564c:	4632      	mov	r2, r6
 801564e:	4682      	mov	sl, r0
 8015650:	468b      	mov	fp, r1
 8015652:	462b      	mov	r3, r5
 8015654:	4630      	mov	r0, r6
 8015656:	4639      	mov	r1, r7
 8015658:	f7ea ffe6 	bl	8000628 <__aeabi_dmul>
 801565c:	2200      	movs	r2, #0
 801565e:	4b0b      	ldr	r3, [pc, #44]	; (801568c <__kernel_tan+0x394>)
 8015660:	f7ea fe2c 	bl	80002bc <__adddf3>
 8015664:	4602      	mov	r2, r0
 8015666:	460b      	mov	r3, r1
 8015668:	4650      	mov	r0, sl
 801566a:	4659      	mov	r1, fp
 801566c:	f7ea fe26 	bl	80002bc <__adddf3>
 8015670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015674:	f7ea ffd8 	bl	8000628 <__aeabi_dmul>
 8015678:	4632      	mov	r2, r6
 801567a:	462b      	mov	r3, r5
 801567c:	f7ea fe1e 	bl	80002bc <__adddf3>
 8015680:	e65f      	b.n	8015342 <__kernel_tan+0x4a>
 8015682:	4682      	mov	sl, r0
 8015684:	468b      	mov	fp, r1
 8015686:	e65e      	b.n	8015346 <__kernel_tan+0x4e>
 8015688:	bff00000 	.word	0xbff00000
 801568c:	3ff00000 	.word	0x3ff00000

08015690 <fabs>:
 8015690:	ec51 0b10 	vmov	r0, r1, d0
 8015694:	ee10 2a10 	vmov	r2, s0
 8015698:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801569c:	ec43 2b10 	vmov	d0, r2, r3
 80156a0:	4770      	bx	lr
 80156a2:	0000      	movs	r0, r0
 80156a4:	0000      	movs	r0, r0
	...

080156a8 <floor>:
 80156a8:	ec51 0b10 	vmov	r0, r1, d0
 80156ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80156b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80156b8:	2e13      	cmp	r6, #19
 80156ba:	460c      	mov	r4, r1
 80156bc:	ee10 5a10 	vmov	r5, s0
 80156c0:	4680      	mov	r8, r0
 80156c2:	dc34      	bgt.n	801572e <floor+0x86>
 80156c4:	2e00      	cmp	r6, #0
 80156c6:	da16      	bge.n	80156f6 <floor+0x4e>
 80156c8:	a335      	add	r3, pc, #212	; (adr r3, 80157a0 <floor+0xf8>)
 80156ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ce:	f7ea fdf5 	bl	80002bc <__adddf3>
 80156d2:	2200      	movs	r2, #0
 80156d4:	2300      	movs	r3, #0
 80156d6:	f7eb fa37 	bl	8000b48 <__aeabi_dcmpgt>
 80156da:	b148      	cbz	r0, 80156f0 <floor+0x48>
 80156dc:	2c00      	cmp	r4, #0
 80156de:	da59      	bge.n	8015794 <floor+0xec>
 80156e0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80156e4:	4a30      	ldr	r2, [pc, #192]	; (80157a8 <floor+0x100>)
 80156e6:	432b      	orrs	r3, r5
 80156e8:	2500      	movs	r5, #0
 80156ea:	42ab      	cmp	r3, r5
 80156ec:	bf18      	it	ne
 80156ee:	4614      	movne	r4, r2
 80156f0:	4621      	mov	r1, r4
 80156f2:	4628      	mov	r0, r5
 80156f4:	e025      	b.n	8015742 <floor+0x9a>
 80156f6:	4f2d      	ldr	r7, [pc, #180]	; (80157ac <floor+0x104>)
 80156f8:	4137      	asrs	r7, r6
 80156fa:	ea01 0307 	and.w	r3, r1, r7
 80156fe:	4303      	orrs	r3, r0
 8015700:	d01f      	beq.n	8015742 <floor+0x9a>
 8015702:	a327      	add	r3, pc, #156	; (adr r3, 80157a0 <floor+0xf8>)
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	f7ea fdd8 	bl	80002bc <__adddf3>
 801570c:	2200      	movs	r2, #0
 801570e:	2300      	movs	r3, #0
 8015710:	f7eb fa1a 	bl	8000b48 <__aeabi_dcmpgt>
 8015714:	2800      	cmp	r0, #0
 8015716:	d0eb      	beq.n	80156f0 <floor+0x48>
 8015718:	2c00      	cmp	r4, #0
 801571a:	bfbe      	ittt	lt
 801571c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015720:	fa43 f606 	asrlt.w	r6, r3, r6
 8015724:	19a4      	addlt	r4, r4, r6
 8015726:	ea24 0407 	bic.w	r4, r4, r7
 801572a:	2500      	movs	r5, #0
 801572c:	e7e0      	b.n	80156f0 <floor+0x48>
 801572e:	2e33      	cmp	r6, #51	; 0x33
 8015730:	dd0b      	ble.n	801574a <floor+0xa2>
 8015732:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015736:	d104      	bne.n	8015742 <floor+0x9a>
 8015738:	ee10 2a10 	vmov	r2, s0
 801573c:	460b      	mov	r3, r1
 801573e:	f7ea fdbd 	bl	80002bc <__adddf3>
 8015742:	ec41 0b10 	vmov	d0, r0, r1
 8015746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801574a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801574e:	f04f 33ff 	mov.w	r3, #4294967295
 8015752:	fa23 f707 	lsr.w	r7, r3, r7
 8015756:	4207      	tst	r7, r0
 8015758:	d0f3      	beq.n	8015742 <floor+0x9a>
 801575a:	a311      	add	r3, pc, #68	; (adr r3, 80157a0 <floor+0xf8>)
 801575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015760:	f7ea fdac 	bl	80002bc <__adddf3>
 8015764:	2200      	movs	r2, #0
 8015766:	2300      	movs	r3, #0
 8015768:	f7eb f9ee 	bl	8000b48 <__aeabi_dcmpgt>
 801576c:	2800      	cmp	r0, #0
 801576e:	d0bf      	beq.n	80156f0 <floor+0x48>
 8015770:	2c00      	cmp	r4, #0
 8015772:	da02      	bge.n	801577a <floor+0xd2>
 8015774:	2e14      	cmp	r6, #20
 8015776:	d103      	bne.n	8015780 <floor+0xd8>
 8015778:	3401      	adds	r4, #1
 801577a:	ea25 0507 	bic.w	r5, r5, r7
 801577e:	e7b7      	b.n	80156f0 <floor+0x48>
 8015780:	2301      	movs	r3, #1
 8015782:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015786:	fa03 f606 	lsl.w	r6, r3, r6
 801578a:	4435      	add	r5, r6
 801578c:	4545      	cmp	r5, r8
 801578e:	bf38      	it	cc
 8015790:	18e4      	addcc	r4, r4, r3
 8015792:	e7f2      	b.n	801577a <floor+0xd2>
 8015794:	2500      	movs	r5, #0
 8015796:	462c      	mov	r4, r5
 8015798:	e7aa      	b.n	80156f0 <floor+0x48>
 801579a:	bf00      	nop
 801579c:	f3af 8000 	nop.w
 80157a0:	8800759c 	.word	0x8800759c
 80157a4:	7e37e43c 	.word	0x7e37e43c
 80157a8:	bff00000 	.word	0xbff00000
 80157ac:	000fffff 	.word	0x000fffff

080157b0 <scalbn>:
 80157b0:	b570      	push	{r4, r5, r6, lr}
 80157b2:	ec55 4b10 	vmov	r4, r5, d0
 80157b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80157ba:	4606      	mov	r6, r0
 80157bc:	462b      	mov	r3, r5
 80157be:	b9aa      	cbnz	r2, 80157ec <scalbn+0x3c>
 80157c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80157c4:	4323      	orrs	r3, r4
 80157c6:	d03b      	beq.n	8015840 <scalbn+0x90>
 80157c8:	4b31      	ldr	r3, [pc, #196]	; (8015890 <scalbn+0xe0>)
 80157ca:	4629      	mov	r1, r5
 80157cc:	2200      	movs	r2, #0
 80157ce:	ee10 0a10 	vmov	r0, s0
 80157d2:	f7ea ff29 	bl	8000628 <__aeabi_dmul>
 80157d6:	4b2f      	ldr	r3, [pc, #188]	; (8015894 <scalbn+0xe4>)
 80157d8:	429e      	cmp	r6, r3
 80157da:	4604      	mov	r4, r0
 80157dc:	460d      	mov	r5, r1
 80157de:	da12      	bge.n	8015806 <scalbn+0x56>
 80157e0:	a327      	add	r3, pc, #156	; (adr r3, 8015880 <scalbn+0xd0>)
 80157e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e6:	f7ea ff1f 	bl	8000628 <__aeabi_dmul>
 80157ea:	e009      	b.n	8015800 <scalbn+0x50>
 80157ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80157f0:	428a      	cmp	r2, r1
 80157f2:	d10c      	bne.n	801580e <scalbn+0x5e>
 80157f4:	ee10 2a10 	vmov	r2, s0
 80157f8:	4620      	mov	r0, r4
 80157fa:	4629      	mov	r1, r5
 80157fc:	f7ea fd5e 	bl	80002bc <__adddf3>
 8015800:	4604      	mov	r4, r0
 8015802:	460d      	mov	r5, r1
 8015804:	e01c      	b.n	8015840 <scalbn+0x90>
 8015806:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801580a:	460b      	mov	r3, r1
 801580c:	3a36      	subs	r2, #54	; 0x36
 801580e:	4432      	add	r2, r6
 8015810:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015814:	428a      	cmp	r2, r1
 8015816:	dd0b      	ble.n	8015830 <scalbn+0x80>
 8015818:	ec45 4b11 	vmov	d1, r4, r5
 801581c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015888 <scalbn+0xd8>
 8015820:	f000 f83c 	bl	801589c <copysign>
 8015824:	a318      	add	r3, pc, #96	; (adr r3, 8015888 <scalbn+0xd8>)
 8015826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582a:	ec51 0b10 	vmov	r0, r1, d0
 801582e:	e7da      	b.n	80157e6 <scalbn+0x36>
 8015830:	2a00      	cmp	r2, #0
 8015832:	dd08      	ble.n	8015846 <scalbn+0x96>
 8015834:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015838:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801583c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015840:	ec45 4b10 	vmov	d0, r4, r5
 8015844:	bd70      	pop	{r4, r5, r6, pc}
 8015846:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801584a:	da0d      	bge.n	8015868 <scalbn+0xb8>
 801584c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015850:	429e      	cmp	r6, r3
 8015852:	ec45 4b11 	vmov	d1, r4, r5
 8015856:	dce1      	bgt.n	801581c <scalbn+0x6c>
 8015858:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015880 <scalbn+0xd0>
 801585c:	f000 f81e 	bl	801589c <copysign>
 8015860:	a307      	add	r3, pc, #28	; (adr r3, 8015880 <scalbn+0xd0>)
 8015862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015866:	e7e0      	b.n	801582a <scalbn+0x7a>
 8015868:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801586c:	3236      	adds	r2, #54	; 0x36
 801586e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015872:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015876:	4620      	mov	r0, r4
 8015878:	4629      	mov	r1, r5
 801587a:	2200      	movs	r2, #0
 801587c:	4b06      	ldr	r3, [pc, #24]	; (8015898 <scalbn+0xe8>)
 801587e:	e7b2      	b.n	80157e6 <scalbn+0x36>
 8015880:	c2f8f359 	.word	0xc2f8f359
 8015884:	01a56e1f 	.word	0x01a56e1f
 8015888:	8800759c 	.word	0x8800759c
 801588c:	7e37e43c 	.word	0x7e37e43c
 8015890:	43500000 	.word	0x43500000
 8015894:	ffff3cb0 	.word	0xffff3cb0
 8015898:	3c900000 	.word	0x3c900000

0801589c <copysign>:
 801589c:	ec51 0b10 	vmov	r0, r1, d0
 80158a0:	ee11 0a90 	vmov	r0, s3
 80158a4:	ee10 2a10 	vmov	r2, s0
 80158a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80158ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80158b0:	ea41 0300 	orr.w	r3, r1, r0
 80158b4:	ec43 2b10 	vmov	d0, r2, r3
 80158b8:	4770      	bx	lr
	...

080158bc <__errno>:
 80158bc:	4b01      	ldr	r3, [pc, #4]	; (80158c4 <__errno+0x8>)
 80158be:	6818      	ldr	r0, [r3, #0]
 80158c0:	4770      	bx	lr
 80158c2:	bf00      	nop
 80158c4:	2000000c 	.word	0x2000000c

080158c8 <__libc_init_array>:
 80158c8:	b570      	push	{r4, r5, r6, lr}
 80158ca:	4e0d      	ldr	r6, [pc, #52]	; (8015900 <__libc_init_array+0x38>)
 80158cc:	4c0d      	ldr	r4, [pc, #52]	; (8015904 <__libc_init_array+0x3c>)
 80158ce:	1ba4      	subs	r4, r4, r6
 80158d0:	10a4      	asrs	r4, r4, #2
 80158d2:	2500      	movs	r5, #0
 80158d4:	42a5      	cmp	r5, r4
 80158d6:	d109      	bne.n	80158ec <__libc_init_array+0x24>
 80158d8:	4e0b      	ldr	r6, [pc, #44]	; (8015908 <__libc_init_array+0x40>)
 80158da:	4c0c      	ldr	r4, [pc, #48]	; (801590c <__libc_init_array+0x44>)
 80158dc:	f004 f9e8 	bl	8019cb0 <_init>
 80158e0:	1ba4      	subs	r4, r4, r6
 80158e2:	10a4      	asrs	r4, r4, #2
 80158e4:	2500      	movs	r5, #0
 80158e6:	42a5      	cmp	r5, r4
 80158e8:	d105      	bne.n	80158f6 <__libc_init_array+0x2e>
 80158ea:	bd70      	pop	{r4, r5, r6, pc}
 80158ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80158f0:	4798      	blx	r3
 80158f2:	3501      	adds	r5, #1
 80158f4:	e7ee      	b.n	80158d4 <__libc_init_array+0xc>
 80158f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80158fa:	4798      	blx	r3
 80158fc:	3501      	adds	r5, #1
 80158fe:	e7f2      	b.n	80158e6 <__libc_init_array+0x1e>
 8015900:	0801a90c 	.word	0x0801a90c
 8015904:	0801a90c 	.word	0x0801a90c
 8015908:	0801a90c 	.word	0x0801a90c
 801590c:	0801a914 	.word	0x0801a914

08015910 <memcpy>:
 8015910:	b510      	push	{r4, lr}
 8015912:	1e43      	subs	r3, r0, #1
 8015914:	440a      	add	r2, r1
 8015916:	4291      	cmp	r1, r2
 8015918:	d100      	bne.n	801591c <memcpy+0xc>
 801591a:	bd10      	pop	{r4, pc}
 801591c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015924:	e7f7      	b.n	8015916 <memcpy+0x6>

08015926 <memset>:
 8015926:	4402      	add	r2, r0
 8015928:	4603      	mov	r3, r0
 801592a:	4293      	cmp	r3, r2
 801592c:	d100      	bne.n	8015930 <memset+0xa>
 801592e:	4770      	bx	lr
 8015930:	f803 1b01 	strb.w	r1, [r3], #1
 8015934:	e7f9      	b.n	801592a <memset+0x4>

08015936 <__cvt>:
 8015936:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801593a:	ec55 4b10 	vmov	r4, r5, d0
 801593e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015940:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015944:	2d00      	cmp	r5, #0
 8015946:	460e      	mov	r6, r1
 8015948:	4691      	mov	r9, r2
 801594a:	4619      	mov	r1, r3
 801594c:	bfb8      	it	lt
 801594e:	4622      	movlt	r2, r4
 8015950:	462b      	mov	r3, r5
 8015952:	f027 0720 	bic.w	r7, r7, #32
 8015956:	bfbb      	ittet	lt
 8015958:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801595c:	461d      	movlt	r5, r3
 801595e:	2300      	movge	r3, #0
 8015960:	232d      	movlt	r3, #45	; 0x2d
 8015962:	bfb8      	it	lt
 8015964:	4614      	movlt	r4, r2
 8015966:	2f46      	cmp	r7, #70	; 0x46
 8015968:	700b      	strb	r3, [r1, #0]
 801596a:	d004      	beq.n	8015976 <__cvt+0x40>
 801596c:	2f45      	cmp	r7, #69	; 0x45
 801596e:	d100      	bne.n	8015972 <__cvt+0x3c>
 8015970:	3601      	adds	r6, #1
 8015972:	2102      	movs	r1, #2
 8015974:	e000      	b.n	8015978 <__cvt+0x42>
 8015976:	2103      	movs	r1, #3
 8015978:	ab03      	add	r3, sp, #12
 801597a:	9301      	str	r3, [sp, #4]
 801597c:	ab02      	add	r3, sp, #8
 801597e:	9300      	str	r3, [sp, #0]
 8015980:	4632      	mov	r2, r6
 8015982:	4653      	mov	r3, sl
 8015984:	ec45 4b10 	vmov	d0, r4, r5
 8015988:	f001 fdfe 	bl	8017588 <_dtoa_r>
 801598c:	2f47      	cmp	r7, #71	; 0x47
 801598e:	4680      	mov	r8, r0
 8015990:	d102      	bne.n	8015998 <__cvt+0x62>
 8015992:	f019 0f01 	tst.w	r9, #1
 8015996:	d026      	beq.n	80159e6 <__cvt+0xb0>
 8015998:	2f46      	cmp	r7, #70	; 0x46
 801599a:	eb08 0906 	add.w	r9, r8, r6
 801599e:	d111      	bne.n	80159c4 <__cvt+0x8e>
 80159a0:	f898 3000 	ldrb.w	r3, [r8]
 80159a4:	2b30      	cmp	r3, #48	; 0x30
 80159a6:	d10a      	bne.n	80159be <__cvt+0x88>
 80159a8:	2200      	movs	r2, #0
 80159aa:	2300      	movs	r3, #0
 80159ac:	4620      	mov	r0, r4
 80159ae:	4629      	mov	r1, r5
 80159b0:	f7eb f8a2 	bl	8000af8 <__aeabi_dcmpeq>
 80159b4:	b918      	cbnz	r0, 80159be <__cvt+0x88>
 80159b6:	f1c6 0601 	rsb	r6, r6, #1
 80159ba:	f8ca 6000 	str.w	r6, [sl]
 80159be:	f8da 3000 	ldr.w	r3, [sl]
 80159c2:	4499      	add	r9, r3
 80159c4:	2200      	movs	r2, #0
 80159c6:	2300      	movs	r3, #0
 80159c8:	4620      	mov	r0, r4
 80159ca:	4629      	mov	r1, r5
 80159cc:	f7eb f894 	bl	8000af8 <__aeabi_dcmpeq>
 80159d0:	b938      	cbnz	r0, 80159e2 <__cvt+0xac>
 80159d2:	2230      	movs	r2, #48	; 0x30
 80159d4:	9b03      	ldr	r3, [sp, #12]
 80159d6:	454b      	cmp	r3, r9
 80159d8:	d205      	bcs.n	80159e6 <__cvt+0xb0>
 80159da:	1c59      	adds	r1, r3, #1
 80159dc:	9103      	str	r1, [sp, #12]
 80159de:	701a      	strb	r2, [r3, #0]
 80159e0:	e7f8      	b.n	80159d4 <__cvt+0x9e>
 80159e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80159e6:	9b03      	ldr	r3, [sp, #12]
 80159e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159ea:	eba3 0308 	sub.w	r3, r3, r8
 80159ee:	4640      	mov	r0, r8
 80159f0:	6013      	str	r3, [r2, #0]
 80159f2:	b004      	add	sp, #16
 80159f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080159f8 <__exponent>:
 80159f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159fa:	2900      	cmp	r1, #0
 80159fc:	4604      	mov	r4, r0
 80159fe:	bfba      	itte	lt
 8015a00:	4249      	neglt	r1, r1
 8015a02:	232d      	movlt	r3, #45	; 0x2d
 8015a04:	232b      	movge	r3, #43	; 0x2b
 8015a06:	2909      	cmp	r1, #9
 8015a08:	f804 2b02 	strb.w	r2, [r4], #2
 8015a0c:	7043      	strb	r3, [r0, #1]
 8015a0e:	dd20      	ble.n	8015a52 <__exponent+0x5a>
 8015a10:	f10d 0307 	add.w	r3, sp, #7
 8015a14:	461f      	mov	r7, r3
 8015a16:	260a      	movs	r6, #10
 8015a18:	fb91 f5f6 	sdiv	r5, r1, r6
 8015a1c:	fb06 1115 	mls	r1, r6, r5, r1
 8015a20:	3130      	adds	r1, #48	; 0x30
 8015a22:	2d09      	cmp	r5, #9
 8015a24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015a28:	f103 32ff 	add.w	r2, r3, #4294967295
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	dc09      	bgt.n	8015a44 <__exponent+0x4c>
 8015a30:	3130      	adds	r1, #48	; 0x30
 8015a32:	3b02      	subs	r3, #2
 8015a34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015a38:	42bb      	cmp	r3, r7
 8015a3a:	4622      	mov	r2, r4
 8015a3c:	d304      	bcc.n	8015a48 <__exponent+0x50>
 8015a3e:	1a10      	subs	r0, r2, r0
 8015a40:	b003      	add	sp, #12
 8015a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a44:	4613      	mov	r3, r2
 8015a46:	e7e7      	b.n	8015a18 <__exponent+0x20>
 8015a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a4c:	f804 2b01 	strb.w	r2, [r4], #1
 8015a50:	e7f2      	b.n	8015a38 <__exponent+0x40>
 8015a52:	2330      	movs	r3, #48	; 0x30
 8015a54:	4419      	add	r1, r3
 8015a56:	7083      	strb	r3, [r0, #2]
 8015a58:	1d02      	adds	r2, r0, #4
 8015a5a:	70c1      	strb	r1, [r0, #3]
 8015a5c:	e7ef      	b.n	8015a3e <__exponent+0x46>
	...

08015a60 <_printf_float>:
 8015a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a64:	b08d      	sub	sp, #52	; 0x34
 8015a66:	460c      	mov	r4, r1
 8015a68:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015a6c:	4616      	mov	r6, r2
 8015a6e:	461f      	mov	r7, r3
 8015a70:	4605      	mov	r5, r0
 8015a72:	f002 fe7b 	bl	801876c <_localeconv_r>
 8015a76:	6803      	ldr	r3, [r0, #0]
 8015a78:	9304      	str	r3, [sp, #16]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7ea fbc0 	bl	8000200 <strlen>
 8015a80:	2300      	movs	r3, #0
 8015a82:	930a      	str	r3, [sp, #40]	; 0x28
 8015a84:	f8d8 3000 	ldr.w	r3, [r8]
 8015a88:	9005      	str	r0, [sp, #20]
 8015a8a:	3307      	adds	r3, #7
 8015a8c:	f023 0307 	bic.w	r3, r3, #7
 8015a90:	f103 0208 	add.w	r2, r3, #8
 8015a94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a98:	f8d4 b000 	ldr.w	fp, [r4]
 8015a9c:	f8c8 2000 	str.w	r2, [r8]
 8015aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015aa8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015aac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015ab0:	9307      	str	r3, [sp, #28]
 8015ab2:	f8cd 8018 	str.w	r8, [sp, #24]
 8015ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8015aba:	4ba7      	ldr	r3, [pc, #668]	; (8015d58 <_printf_float+0x2f8>)
 8015abc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ac0:	f7eb f84c 	bl	8000b5c <__aeabi_dcmpun>
 8015ac4:	bb70      	cbnz	r0, 8015b24 <_printf_float+0xc4>
 8015ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8015aca:	4ba3      	ldr	r3, [pc, #652]	; (8015d58 <_printf_float+0x2f8>)
 8015acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ad0:	f7eb f826 	bl	8000b20 <__aeabi_dcmple>
 8015ad4:	bb30      	cbnz	r0, 8015b24 <_printf_float+0xc4>
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	2300      	movs	r3, #0
 8015ada:	4640      	mov	r0, r8
 8015adc:	4649      	mov	r1, r9
 8015ade:	f7eb f815 	bl	8000b0c <__aeabi_dcmplt>
 8015ae2:	b110      	cbz	r0, 8015aea <_printf_float+0x8a>
 8015ae4:	232d      	movs	r3, #45	; 0x2d
 8015ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aea:	4a9c      	ldr	r2, [pc, #624]	; (8015d5c <_printf_float+0x2fc>)
 8015aec:	4b9c      	ldr	r3, [pc, #624]	; (8015d60 <_printf_float+0x300>)
 8015aee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015af2:	bf8c      	ite	hi
 8015af4:	4690      	movhi	r8, r2
 8015af6:	4698      	movls	r8, r3
 8015af8:	2303      	movs	r3, #3
 8015afa:	f02b 0204 	bic.w	r2, fp, #4
 8015afe:	6123      	str	r3, [r4, #16]
 8015b00:	6022      	str	r2, [r4, #0]
 8015b02:	f04f 0900 	mov.w	r9, #0
 8015b06:	9700      	str	r7, [sp, #0]
 8015b08:	4633      	mov	r3, r6
 8015b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015b0c:	4621      	mov	r1, r4
 8015b0e:	4628      	mov	r0, r5
 8015b10:	f000 f9e6 	bl	8015ee0 <_printf_common>
 8015b14:	3001      	adds	r0, #1
 8015b16:	f040 808d 	bne.w	8015c34 <_printf_float+0x1d4>
 8015b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1e:	b00d      	add	sp, #52	; 0x34
 8015b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b24:	4642      	mov	r2, r8
 8015b26:	464b      	mov	r3, r9
 8015b28:	4640      	mov	r0, r8
 8015b2a:	4649      	mov	r1, r9
 8015b2c:	f7eb f816 	bl	8000b5c <__aeabi_dcmpun>
 8015b30:	b110      	cbz	r0, 8015b38 <_printf_float+0xd8>
 8015b32:	4a8c      	ldr	r2, [pc, #560]	; (8015d64 <_printf_float+0x304>)
 8015b34:	4b8c      	ldr	r3, [pc, #560]	; (8015d68 <_printf_float+0x308>)
 8015b36:	e7da      	b.n	8015aee <_printf_float+0x8e>
 8015b38:	6861      	ldr	r1, [r4, #4]
 8015b3a:	1c4b      	adds	r3, r1, #1
 8015b3c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015b40:	a80a      	add	r0, sp, #40	; 0x28
 8015b42:	d13e      	bne.n	8015bc2 <_printf_float+0x162>
 8015b44:	2306      	movs	r3, #6
 8015b46:	6063      	str	r3, [r4, #4]
 8015b48:	2300      	movs	r3, #0
 8015b4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015b4e:	ab09      	add	r3, sp, #36	; 0x24
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	ec49 8b10 	vmov	d0, r8, r9
 8015b56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015b5a:	6022      	str	r2, [r4, #0]
 8015b5c:	f8cd a004 	str.w	sl, [sp, #4]
 8015b60:	6861      	ldr	r1, [r4, #4]
 8015b62:	4628      	mov	r0, r5
 8015b64:	f7ff fee7 	bl	8015936 <__cvt>
 8015b68:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015b6c:	2b47      	cmp	r3, #71	; 0x47
 8015b6e:	4680      	mov	r8, r0
 8015b70:	d109      	bne.n	8015b86 <_printf_float+0x126>
 8015b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b74:	1cd8      	adds	r0, r3, #3
 8015b76:	db02      	blt.n	8015b7e <_printf_float+0x11e>
 8015b78:	6862      	ldr	r2, [r4, #4]
 8015b7a:	4293      	cmp	r3, r2
 8015b7c:	dd47      	ble.n	8015c0e <_printf_float+0x1ae>
 8015b7e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015b82:	fa5f fa8a 	uxtb.w	sl, sl
 8015b86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b8c:	d824      	bhi.n	8015bd8 <_printf_float+0x178>
 8015b8e:	3901      	subs	r1, #1
 8015b90:	4652      	mov	r2, sl
 8015b92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b96:	9109      	str	r1, [sp, #36]	; 0x24
 8015b98:	f7ff ff2e 	bl	80159f8 <__exponent>
 8015b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b9e:	1813      	adds	r3, r2, r0
 8015ba0:	2a01      	cmp	r2, #1
 8015ba2:	4681      	mov	r9, r0
 8015ba4:	6123      	str	r3, [r4, #16]
 8015ba6:	dc02      	bgt.n	8015bae <_printf_float+0x14e>
 8015ba8:	6822      	ldr	r2, [r4, #0]
 8015baa:	07d1      	lsls	r1, r2, #31
 8015bac:	d501      	bpl.n	8015bb2 <_printf_float+0x152>
 8015bae:	3301      	adds	r3, #1
 8015bb0:	6123      	str	r3, [r4, #16]
 8015bb2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d0a5      	beq.n	8015b06 <_printf_float+0xa6>
 8015bba:	232d      	movs	r3, #45	; 0x2d
 8015bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bc0:	e7a1      	b.n	8015b06 <_printf_float+0xa6>
 8015bc2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015bc6:	f000 8177 	beq.w	8015eb8 <_printf_float+0x458>
 8015bca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bce:	d1bb      	bne.n	8015b48 <_printf_float+0xe8>
 8015bd0:	2900      	cmp	r1, #0
 8015bd2:	d1b9      	bne.n	8015b48 <_printf_float+0xe8>
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e7b6      	b.n	8015b46 <_printf_float+0xe6>
 8015bd8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015bdc:	d119      	bne.n	8015c12 <_printf_float+0x1b2>
 8015bde:	2900      	cmp	r1, #0
 8015be0:	6863      	ldr	r3, [r4, #4]
 8015be2:	dd0c      	ble.n	8015bfe <_printf_float+0x19e>
 8015be4:	6121      	str	r1, [r4, #16]
 8015be6:	b913      	cbnz	r3, 8015bee <_printf_float+0x18e>
 8015be8:	6822      	ldr	r2, [r4, #0]
 8015bea:	07d2      	lsls	r2, r2, #31
 8015bec:	d502      	bpl.n	8015bf4 <_printf_float+0x194>
 8015bee:	3301      	adds	r3, #1
 8015bf0:	440b      	add	r3, r1
 8015bf2:	6123      	str	r3, [r4, #16]
 8015bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015bf8:	f04f 0900 	mov.w	r9, #0
 8015bfc:	e7d9      	b.n	8015bb2 <_printf_float+0x152>
 8015bfe:	b913      	cbnz	r3, 8015c06 <_printf_float+0x1a6>
 8015c00:	6822      	ldr	r2, [r4, #0]
 8015c02:	07d0      	lsls	r0, r2, #31
 8015c04:	d501      	bpl.n	8015c0a <_printf_float+0x1aa>
 8015c06:	3302      	adds	r3, #2
 8015c08:	e7f3      	b.n	8015bf2 <_printf_float+0x192>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e7f1      	b.n	8015bf2 <_printf_float+0x192>
 8015c0e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015c12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c16:	4293      	cmp	r3, r2
 8015c18:	db05      	blt.n	8015c26 <_printf_float+0x1c6>
 8015c1a:	6822      	ldr	r2, [r4, #0]
 8015c1c:	6123      	str	r3, [r4, #16]
 8015c1e:	07d1      	lsls	r1, r2, #31
 8015c20:	d5e8      	bpl.n	8015bf4 <_printf_float+0x194>
 8015c22:	3301      	adds	r3, #1
 8015c24:	e7e5      	b.n	8015bf2 <_printf_float+0x192>
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	bfd4      	ite	le
 8015c2a:	f1c3 0302 	rsble	r3, r3, #2
 8015c2e:	2301      	movgt	r3, #1
 8015c30:	4413      	add	r3, r2
 8015c32:	e7de      	b.n	8015bf2 <_printf_float+0x192>
 8015c34:	6823      	ldr	r3, [r4, #0]
 8015c36:	055a      	lsls	r2, r3, #21
 8015c38:	d407      	bmi.n	8015c4a <_printf_float+0x1ea>
 8015c3a:	6923      	ldr	r3, [r4, #16]
 8015c3c:	4642      	mov	r2, r8
 8015c3e:	4631      	mov	r1, r6
 8015c40:	4628      	mov	r0, r5
 8015c42:	47b8      	blx	r7
 8015c44:	3001      	adds	r0, #1
 8015c46:	d12b      	bne.n	8015ca0 <_printf_float+0x240>
 8015c48:	e767      	b.n	8015b1a <_printf_float+0xba>
 8015c4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c4e:	f240 80dc 	bls.w	8015e0a <_printf_float+0x3aa>
 8015c52:	2200      	movs	r2, #0
 8015c54:	2300      	movs	r3, #0
 8015c56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015c5a:	f7ea ff4d 	bl	8000af8 <__aeabi_dcmpeq>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d033      	beq.n	8015cca <_printf_float+0x26a>
 8015c62:	2301      	movs	r3, #1
 8015c64:	4a41      	ldr	r2, [pc, #260]	; (8015d6c <_printf_float+0x30c>)
 8015c66:	4631      	mov	r1, r6
 8015c68:	4628      	mov	r0, r5
 8015c6a:	47b8      	blx	r7
 8015c6c:	3001      	adds	r0, #1
 8015c6e:	f43f af54 	beq.w	8015b1a <_printf_float+0xba>
 8015c72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c76:	429a      	cmp	r2, r3
 8015c78:	db02      	blt.n	8015c80 <_printf_float+0x220>
 8015c7a:	6823      	ldr	r3, [r4, #0]
 8015c7c:	07d8      	lsls	r0, r3, #31
 8015c7e:	d50f      	bpl.n	8015ca0 <_printf_float+0x240>
 8015c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c84:	4631      	mov	r1, r6
 8015c86:	4628      	mov	r0, r5
 8015c88:	47b8      	blx	r7
 8015c8a:	3001      	adds	r0, #1
 8015c8c:	f43f af45 	beq.w	8015b1a <_printf_float+0xba>
 8015c90:	f04f 0800 	mov.w	r8, #0
 8015c94:	f104 091a 	add.w	r9, r4, #26
 8015c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c9a:	3b01      	subs	r3, #1
 8015c9c:	4543      	cmp	r3, r8
 8015c9e:	dc09      	bgt.n	8015cb4 <_printf_float+0x254>
 8015ca0:	6823      	ldr	r3, [r4, #0]
 8015ca2:	079b      	lsls	r3, r3, #30
 8015ca4:	f100 8103 	bmi.w	8015eae <_printf_float+0x44e>
 8015ca8:	68e0      	ldr	r0, [r4, #12]
 8015caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cac:	4298      	cmp	r0, r3
 8015cae:	bfb8      	it	lt
 8015cb0:	4618      	movlt	r0, r3
 8015cb2:	e734      	b.n	8015b1e <_printf_float+0xbe>
 8015cb4:	2301      	movs	r3, #1
 8015cb6:	464a      	mov	r2, r9
 8015cb8:	4631      	mov	r1, r6
 8015cba:	4628      	mov	r0, r5
 8015cbc:	47b8      	blx	r7
 8015cbe:	3001      	adds	r0, #1
 8015cc0:	f43f af2b 	beq.w	8015b1a <_printf_float+0xba>
 8015cc4:	f108 0801 	add.w	r8, r8, #1
 8015cc8:	e7e6      	b.n	8015c98 <_printf_float+0x238>
 8015cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	dc2b      	bgt.n	8015d28 <_printf_float+0x2c8>
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	4a26      	ldr	r2, [pc, #152]	; (8015d6c <_printf_float+0x30c>)
 8015cd4:	4631      	mov	r1, r6
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	47b8      	blx	r7
 8015cda:	3001      	adds	r0, #1
 8015cdc:	f43f af1d 	beq.w	8015b1a <_printf_float+0xba>
 8015ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ce2:	b923      	cbnz	r3, 8015cee <_printf_float+0x28e>
 8015ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ce6:	b913      	cbnz	r3, 8015cee <_printf_float+0x28e>
 8015ce8:	6823      	ldr	r3, [r4, #0]
 8015cea:	07d9      	lsls	r1, r3, #31
 8015cec:	d5d8      	bpl.n	8015ca0 <_printf_float+0x240>
 8015cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cf2:	4631      	mov	r1, r6
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	47b8      	blx	r7
 8015cf8:	3001      	adds	r0, #1
 8015cfa:	f43f af0e 	beq.w	8015b1a <_printf_float+0xba>
 8015cfe:	f04f 0900 	mov.w	r9, #0
 8015d02:	f104 0a1a 	add.w	sl, r4, #26
 8015d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d08:	425b      	negs	r3, r3
 8015d0a:	454b      	cmp	r3, r9
 8015d0c:	dc01      	bgt.n	8015d12 <_printf_float+0x2b2>
 8015d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d10:	e794      	b.n	8015c3c <_printf_float+0x1dc>
 8015d12:	2301      	movs	r3, #1
 8015d14:	4652      	mov	r2, sl
 8015d16:	4631      	mov	r1, r6
 8015d18:	4628      	mov	r0, r5
 8015d1a:	47b8      	blx	r7
 8015d1c:	3001      	adds	r0, #1
 8015d1e:	f43f aefc 	beq.w	8015b1a <_printf_float+0xba>
 8015d22:	f109 0901 	add.w	r9, r9, #1
 8015d26:	e7ee      	b.n	8015d06 <_printf_float+0x2a6>
 8015d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	bfa8      	it	ge
 8015d30:	461a      	movge	r2, r3
 8015d32:	2a00      	cmp	r2, #0
 8015d34:	4691      	mov	r9, r2
 8015d36:	dd07      	ble.n	8015d48 <_printf_float+0x2e8>
 8015d38:	4613      	mov	r3, r2
 8015d3a:	4631      	mov	r1, r6
 8015d3c:	4642      	mov	r2, r8
 8015d3e:	4628      	mov	r0, r5
 8015d40:	47b8      	blx	r7
 8015d42:	3001      	adds	r0, #1
 8015d44:	f43f aee9 	beq.w	8015b1a <_printf_float+0xba>
 8015d48:	f104 031a 	add.w	r3, r4, #26
 8015d4c:	f04f 0b00 	mov.w	fp, #0
 8015d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d54:	9306      	str	r3, [sp, #24]
 8015d56:	e015      	b.n	8015d84 <_printf_float+0x324>
 8015d58:	7fefffff 	.word	0x7fefffff
 8015d5c:	0801a5d4 	.word	0x0801a5d4
 8015d60:	0801a5d0 	.word	0x0801a5d0
 8015d64:	0801a5dc 	.word	0x0801a5dc
 8015d68:	0801a5d8 	.word	0x0801a5d8
 8015d6c:	0801a7fb 	.word	0x0801a7fb
 8015d70:	2301      	movs	r3, #1
 8015d72:	9a06      	ldr	r2, [sp, #24]
 8015d74:	4631      	mov	r1, r6
 8015d76:	4628      	mov	r0, r5
 8015d78:	47b8      	blx	r7
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	f43f aecd 	beq.w	8015b1a <_printf_float+0xba>
 8015d80:	f10b 0b01 	add.w	fp, fp, #1
 8015d84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015d88:	ebaa 0309 	sub.w	r3, sl, r9
 8015d8c:	455b      	cmp	r3, fp
 8015d8e:	dcef      	bgt.n	8015d70 <_printf_float+0x310>
 8015d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d94:	429a      	cmp	r2, r3
 8015d96:	44d0      	add	r8, sl
 8015d98:	db15      	blt.n	8015dc6 <_printf_float+0x366>
 8015d9a:	6823      	ldr	r3, [r4, #0]
 8015d9c:	07da      	lsls	r2, r3, #31
 8015d9e:	d412      	bmi.n	8015dc6 <_printf_float+0x366>
 8015da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015da4:	eba3 020a 	sub.w	r2, r3, sl
 8015da8:	eba3 0a01 	sub.w	sl, r3, r1
 8015dac:	4592      	cmp	sl, r2
 8015dae:	bfa8      	it	ge
 8015db0:	4692      	movge	sl, r2
 8015db2:	f1ba 0f00 	cmp.w	sl, #0
 8015db6:	dc0e      	bgt.n	8015dd6 <_printf_float+0x376>
 8015db8:	f04f 0800 	mov.w	r8, #0
 8015dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015dc0:	f104 091a 	add.w	r9, r4, #26
 8015dc4:	e019      	b.n	8015dfa <_printf_float+0x39a>
 8015dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dca:	4631      	mov	r1, r6
 8015dcc:	4628      	mov	r0, r5
 8015dce:	47b8      	blx	r7
 8015dd0:	3001      	adds	r0, #1
 8015dd2:	d1e5      	bne.n	8015da0 <_printf_float+0x340>
 8015dd4:	e6a1      	b.n	8015b1a <_printf_float+0xba>
 8015dd6:	4653      	mov	r3, sl
 8015dd8:	4642      	mov	r2, r8
 8015dda:	4631      	mov	r1, r6
 8015ddc:	4628      	mov	r0, r5
 8015dde:	47b8      	blx	r7
 8015de0:	3001      	adds	r0, #1
 8015de2:	d1e9      	bne.n	8015db8 <_printf_float+0x358>
 8015de4:	e699      	b.n	8015b1a <_printf_float+0xba>
 8015de6:	2301      	movs	r3, #1
 8015de8:	464a      	mov	r2, r9
 8015dea:	4631      	mov	r1, r6
 8015dec:	4628      	mov	r0, r5
 8015dee:	47b8      	blx	r7
 8015df0:	3001      	adds	r0, #1
 8015df2:	f43f ae92 	beq.w	8015b1a <_printf_float+0xba>
 8015df6:	f108 0801 	add.w	r8, r8, #1
 8015dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015dfe:	1a9b      	subs	r3, r3, r2
 8015e00:	eba3 030a 	sub.w	r3, r3, sl
 8015e04:	4543      	cmp	r3, r8
 8015e06:	dcee      	bgt.n	8015de6 <_printf_float+0x386>
 8015e08:	e74a      	b.n	8015ca0 <_printf_float+0x240>
 8015e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e0c:	2a01      	cmp	r2, #1
 8015e0e:	dc01      	bgt.n	8015e14 <_printf_float+0x3b4>
 8015e10:	07db      	lsls	r3, r3, #31
 8015e12:	d53a      	bpl.n	8015e8a <_printf_float+0x42a>
 8015e14:	2301      	movs	r3, #1
 8015e16:	4642      	mov	r2, r8
 8015e18:	4631      	mov	r1, r6
 8015e1a:	4628      	mov	r0, r5
 8015e1c:	47b8      	blx	r7
 8015e1e:	3001      	adds	r0, #1
 8015e20:	f43f ae7b 	beq.w	8015b1a <_printf_float+0xba>
 8015e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e28:	4631      	mov	r1, r6
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	47b8      	blx	r7
 8015e2e:	3001      	adds	r0, #1
 8015e30:	f108 0801 	add.w	r8, r8, #1
 8015e34:	f43f ae71 	beq.w	8015b1a <_printf_float+0xba>
 8015e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015e44:	2300      	movs	r3, #0
 8015e46:	f7ea fe57 	bl	8000af8 <__aeabi_dcmpeq>
 8015e4a:	b9c8      	cbnz	r0, 8015e80 <_printf_float+0x420>
 8015e4c:	4653      	mov	r3, sl
 8015e4e:	4642      	mov	r2, r8
 8015e50:	4631      	mov	r1, r6
 8015e52:	4628      	mov	r0, r5
 8015e54:	47b8      	blx	r7
 8015e56:	3001      	adds	r0, #1
 8015e58:	d10e      	bne.n	8015e78 <_printf_float+0x418>
 8015e5a:	e65e      	b.n	8015b1a <_printf_float+0xba>
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	4652      	mov	r2, sl
 8015e60:	4631      	mov	r1, r6
 8015e62:	4628      	mov	r0, r5
 8015e64:	47b8      	blx	r7
 8015e66:	3001      	adds	r0, #1
 8015e68:	f43f ae57 	beq.w	8015b1a <_printf_float+0xba>
 8015e6c:	f108 0801 	add.w	r8, r8, #1
 8015e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e72:	3b01      	subs	r3, #1
 8015e74:	4543      	cmp	r3, r8
 8015e76:	dcf1      	bgt.n	8015e5c <_printf_float+0x3fc>
 8015e78:	464b      	mov	r3, r9
 8015e7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015e7e:	e6de      	b.n	8015c3e <_printf_float+0x1de>
 8015e80:	f04f 0800 	mov.w	r8, #0
 8015e84:	f104 0a1a 	add.w	sl, r4, #26
 8015e88:	e7f2      	b.n	8015e70 <_printf_float+0x410>
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	e7df      	b.n	8015e4e <_printf_float+0x3ee>
 8015e8e:	2301      	movs	r3, #1
 8015e90:	464a      	mov	r2, r9
 8015e92:	4631      	mov	r1, r6
 8015e94:	4628      	mov	r0, r5
 8015e96:	47b8      	blx	r7
 8015e98:	3001      	adds	r0, #1
 8015e9a:	f43f ae3e 	beq.w	8015b1a <_printf_float+0xba>
 8015e9e:	f108 0801 	add.w	r8, r8, #1
 8015ea2:	68e3      	ldr	r3, [r4, #12]
 8015ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ea6:	1a9b      	subs	r3, r3, r2
 8015ea8:	4543      	cmp	r3, r8
 8015eaa:	dcf0      	bgt.n	8015e8e <_printf_float+0x42e>
 8015eac:	e6fc      	b.n	8015ca8 <_printf_float+0x248>
 8015eae:	f04f 0800 	mov.w	r8, #0
 8015eb2:	f104 0919 	add.w	r9, r4, #25
 8015eb6:	e7f4      	b.n	8015ea2 <_printf_float+0x442>
 8015eb8:	2900      	cmp	r1, #0
 8015eba:	f43f ae8b 	beq.w	8015bd4 <_printf_float+0x174>
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ec4:	ab09      	add	r3, sp, #36	; 0x24
 8015ec6:	9300      	str	r3, [sp, #0]
 8015ec8:	ec49 8b10 	vmov	d0, r8, r9
 8015ecc:	6022      	str	r2, [r4, #0]
 8015ece:	f8cd a004 	str.w	sl, [sp, #4]
 8015ed2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	f7ff fd2d 	bl	8015936 <__cvt>
 8015edc:	4680      	mov	r8, r0
 8015ede:	e648      	b.n	8015b72 <_printf_float+0x112>

08015ee0 <_printf_common>:
 8015ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee4:	4691      	mov	r9, r2
 8015ee6:	461f      	mov	r7, r3
 8015ee8:	688a      	ldr	r2, [r1, #8]
 8015eea:	690b      	ldr	r3, [r1, #16]
 8015eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ef0:	4293      	cmp	r3, r2
 8015ef2:	bfb8      	it	lt
 8015ef4:	4613      	movlt	r3, r2
 8015ef6:	f8c9 3000 	str.w	r3, [r9]
 8015efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015efe:	4606      	mov	r6, r0
 8015f00:	460c      	mov	r4, r1
 8015f02:	b112      	cbz	r2, 8015f0a <_printf_common+0x2a>
 8015f04:	3301      	adds	r3, #1
 8015f06:	f8c9 3000 	str.w	r3, [r9]
 8015f0a:	6823      	ldr	r3, [r4, #0]
 8015f0c:	0699      	lsls	r1, r3, #26
 8015f0e:	bf42      	ittt	mi
 8015f10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015f14:	3302      	addmi	r3, #2
 8015f16:	f8c9 3000 	strmi.w	r3, [r9]
 8015f1a:	6825      	ldr	r5, [r4, #0]
 8015f1c:	f015 0506 	ands.w	r5, r5, #6
 8015f20:	d107      	bne.n	8015f32 <_printf_common+0x52>
 8015f22:	f104 0a19 	add.w	sl, r4, #25
 8015f26:	68e3      	ldr	r3, [r4, #12]
 8015f28:	f8d9 2000 	ldr.w	r2, [r9]
 8015f2c:	1a9b      	subs	r3, r3, r2
 8015f2e:	42ab      	cmp	r3, r5
 8015f30:	dc28      	bgt.n	8015f84 <_printf_common+0xa4>
 8015f32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015f36:	6822      	ldr	r2, [r4, #0]
 8015f38:	3300      	adds	r3, #0
 8015f3a:	bf18      	it	ne
 8015f3c:	2301      	movne	r3, #1
 8015f3e:	0692      	lsls	r2, r2, #26
 8015f40:	d42d      	bmi.n	8015f9e <_printf_common+0xbe>
 8015f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f46:	4639      	mov	r1, r7
 8015f48:	4630      	mov	r0, r6
 8015f4a:	47c0      	blx	r8
 8015f4c:	3001      	adds	r0, #1
 8015f4e:	d020      	beq.n	8015f92 <_printf_common+0xb2>
 8015f50:	6823      	ldr	r3, [r4, #0]
 8015f52:	68e5      	ldr	r5, [r4, #12]
 8015f54:	f8d9 2000 	ldr.w	r2, [r9]
 8015f58:	f003 0306 	and.w	r3, r3, #6
 8015f5c:	2b04      	cmp	r3, #4
 8015f5e:	bf08      	it	eq
 8015f60:	1aad      	subeq	r5, r5, r2
 8015f62:	68a3      	ldr	r3, [r4, #8]
 8015f64:	6922      	ldr	r2, [r4, #16]
 8015f66:	bf0c      	ite	eq
 8015f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f6c:	2500      	movne	r5, #0
 8015f6e:	4293      	cmp	r3, r2
 8015f70:	bfc4      	itt	gt
 8015f72:	1a9b      	subgt	r3, r3, r2
 8015f74:	18ed      	addgt	r5, r5, r3
 8015f76:	f04f 0900 	mov.w	r9, #0
 8015f7a:	341a      	adds	r4, #26
 8015f7c:	454d      	cmp	r5, r9
 8015f7e:	d11a      	bne.n	8015fb6 <_printf_common+0xd6>
 8015f80:	2000      	movs	r0, #0
 8015f82:	e008      	b.n	8015f96 <_printf_common+0xb6>
 8015f84:	2301      	movs	r3, #1
 8015f86:	4652      	mov	r2, sl
 8015f88:	4639      	mov	r1, r7
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	47c0      	blx	r8
 8015f8e:	3001      	adds	r0, #1
 8015f90:	d103      	bne.n	8015f9a <_printf_common+0xba>
 8015f92:	f04f 30ff 	mov.w	r0, #4294967295
 8015f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f9a:	3501      	adds	r5, #1
 8015f9c:	e7c3      	b.n	8015f26 <_printf_common+0x46>
 8015f9e:	18e1      	adds	r1, r4, r3
 8015fa0:	1c5a      	adds	r2, r3, #1
 8015fa2:	2030      	movs	r0, #48	; 0x30
 8015fa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015fa8:	4422      	add	r2, r4
 8015faa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015fae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015fb2:	3302      	adds	r3, #2
 8015fb4:	e7c5      	b.n	8015f42 <_printf_common+0x62>
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	4622      	mov	r2, r4
 8015fba:	4639      	mov	r1, r7
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	47c0      	blx	r8
 8015fc0:	3001      	adds	r0, #1
 8015fc2:	d0e6      	beq.n	8015f92 <_printf_common+0xb2>
 8015fc4:	f109 0901 	add.w	r9, r9, #1
 8015fc8:	e7d8      	b.n	8015f7c <_printf_common+0x9c>
	...

08015fcc <_printf_i>:
 8015fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015fd4:	460c      	mov	r4, r1
 8015fd6:	7e09      	ldrb	r1, [r1, #24]
 8015fd8:	b085      	sub	sp, #20
 8015fda:	296e      	cmp	r1, #110	; 0x6e
 8015fdc:	4617      	mov	r7, r2
 8015fde:	4606      	mov	r6, r0
 8015fe0:	4698      	mov	r8, r3
 8015fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015fe4:	f000 80b3 	beq.w	801614e <_printf_i+0x182>
 8015fe8:	d822      	bhi.n	8016030 <_printf_i+0x64>
 8015fea:	2963      	cmp	r1, #99	; 0x63
 8015fec:	d036      	beq.n	801605c <_printf_i+0x90>
 8015fee:	d80a      	bhi.n	8016006 <_printf_i+0x3a>
 8015ff0:	2900      	cmp	r1, #0
 8015ff2:	f000 80b9 	beq.w	8016168 <_printf_i+0x19c>
 8015ff6:	2958      	cmp	r1, #88	; 0x58
 8015ff8:	f000 8083 	beq.w	8016102 <_printf_i+0x136>
 8015ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016000:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016004:	e032      	b.n	801606c <_printf_i+0xa0>
 8016006:	2964      	cmp	r1, #100	; 0x64
 8016008:	d001      	beq.n	801600e <_printf_i+0x42>
 801600a:	2969      	cmp	r1, #105	; 0x69
 801600c:	d1f6      	bne.n	8015ffc <_printf_i+0x30>
 801600e:	6820      	ldr	r0, [r4, #0]
 8016010:	6813      	ldr	r3, [r2, #0]
 8016012:	0605      	lsls	r5, r0, #24
 8016014:	f103 0104 	add.w	r1, r3, #4
 8016018:	d52a      	bpl.n	8016070 <_printf_i+0xa4>
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	6011      	str	r1, [r2, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	da03      	bge.n	801602a <_printf_i+0x5e>
 8016022:	222d      	movs	r2, #45	; 0x2d
 8016024:	425b      	negs	r3, r3
 8016026:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801602a:	486f      	ldr	r0, [pc, #444]	; (80161e8 <_printf_i+0x21c>)
 801602c:	220a      	movs	r2, #10
 801602e:	e039      	b.n	80160a4 <_printf_i+0xd8>
 8016030:	2973      	cmp	r1, #115	; 0x73
 8016032:	f000 809d 	beq.w	8016170 <_printf_i+0x1a4>
 8016036:	d808      	bhi.n	801604a <_printf_i+0x7e>
 8016038:	296f      	cmp	r1, #111	; 0x6f
 801603a:	d020      	beq.n	801607e <_printf_i+0xb2>
 801603c:	2970      	cmp	r1, #112	; 0x70
 801603e:	d1dd      	bne.n	8015ffc <_printf_i+0x30>
 8016040:	6823      	ldr	r3, [r4, #0]
 8016042:	f043 0320 	orr.w	r3, r3, #32
 8016046:	6023      	str	r3, [r4, #0]
 8016048:	e003      	b.n	8016052 <_printf_i+0x86>
 801604a:	2975      	cmp	r1, #117	; 0x75
 801604c:	d017      	beq.n	801607e <_printf_i+0xb2>
 801604e:	2978      	cmp	r1, #120	; 0x78
 8016050:	d1d4      	bne.n	8015ffc <_printf_i+0x30>
 8016052:	2378      	movs	r3, #120	; 0x78
 8016054:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016058:	4864      	ldr	r0, [pc, #400]	; (80161ec <_printf_i+0x220>)
 801605a:	e055      	b.n	8016108 <_printf_i+0x13c>
 801605c:	6813      	ldr	r3, [r2, #0]
 801605e:	1d19      	adds	r1, r3, #4
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	6011      	str	r1, [r2, #0]
 8016064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801606c:	2301      	movs	r3, #1
 801606e:	e08c      	b.n	801618a <_printf_i+0x1be>
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	6011      	str	r1, [r2, #0]
 8016074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016078:	bf18      	it	ne
 801607a:	b21b      	sxthne	r3, r3
 801607c:	e7cf      	b.n	801601e <_printf_i+0x52>
 801607e:	6813      	ldr	r3, [r2, #0]
 8016080:	6825      	ldr	r5, [r4, #0]
 8016082:	1d18      	adds	r0, r3, #4
 8016084:	6010      	str	r0, [r2, #0]
 8016086:	0628      	lsls	r0, r5, #24
 8016088:	d501      	bpl.n	801608e <_printf_i+0xc2>
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	e002      	b.n	8016094 <_printf_i+0xc8>
 801608e:	0668      	lsls	r0, r5, #25
 8016090:	d5fb      	bpl.n	801608a <_printf_i+0xbe>
 8016092:	881b      	ldrh	r3, [r3, #0]
 8016094:	4854      	ldr	r0, [pc, #336]	; (80161e8 <_printf_i+0x21c>)
 8016096:	296f      	cmp	r1, #111	; 0x6f
 8016098:	bf14      	ite	ne
 801609a:	220a      	movne	r2, #10
 801609c:	2208      	moveq	r2, #8
 801609e:	2100      	movs	r1, #0
 80160a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80160a4:	6865      	ldr	r5, [r4, #4]
 80160a6:	60a5      	str	r5, [r4, #8]
 80160a8:	2d00      	cmp	r5, #0
 80160aa:	f2c0 8095 	blt.w	80161d8 <_printf_i+0x20c>
 80160ae:	6821      	ldr	r1, [r4, #0]
 80160b0:	f021 0104 	bic.w	r1, r1, #4
 80160b4:	6021      	str	r1, [r4, #0]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d13d      	bne.n	8016136 <_printf_i+0x16a>
 80160ba:	2d00      	cmp	r5, #0
 80160bc:	f040 808e 	bne.w	80161dc <_printf_i+0x210>
 80160c0:	4665      	mov	r5, ip
 80160c2:	2a08      	cmp	r2, #8
 80160c4:	d10b      	bne.n	80160de <_printf_i+0x112>
 80160c6:	6823      	ldr	r3, [r4, #0]
 80160c8:	07db      	lsls	r3, r3, #31
 80160ca:	d508      	bpl.n	80160de <_printf_i+0x112>
 80160cc:	6923      	ldr	r3, [r4, #16]
 80160ce:	6862      	ldr	r2, [r4, #4]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	bfde      	ittt	le
 80160d4:	2330      	movle	r3, #48	; 0x30
 80160d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80160da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80160de:	ebac 0305 	sub.w	r3, ip, r5
 80160e2:	6123      	str	r3, [r4, #16]
 80160e4:	f8cd 8000 	str.w	r8, [sp]
 80160e8:	463b      	mov	r3, r7
 80160ea:	aa03      	add	r2, sp, #12
 80160ec:	4621      	mov	r1, r4
 80160ee:	4630      	mov	r0, r6
 80160f0:	f7ff fef6 	bl	8015ee0 <_printf_common>
 80160f4:	3001      	adds	r0, #1
 80160f6:	d14d      	bne.n	8016194 <_printf_i+0x1c8>
 80160f8:	f04f 30ff 	mov.w	r0, #4294967295
 80160fc:	b005      	add	sp, #20
 80160fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016102:	4839      	ldr	r0, [pc, #228]	; (80161e8 <_printf_i+0x21c>)
 8016104:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016108:	6813      	ldr	r3, [r2, #0]
 801610a:	6821      	ldr	r1, [r4, #0]
 801610c:	1d1d      	adds	r5, r3, #4
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	6015      	str	r5, [r2, #0]
 8016112:	060a      	lsls	r2, r1, #24
 8016114:	d50b      	bpl.n	801612e <_printf_i+0x162>
 8016116:	07ca      	lsls	r2, r1, #31
 8016118:	bf44      	itt	mi
 801611a:	f041 0120 	orrmi.w	r1, r1, #32
 801611e:	6021      	strmi	r1, [r4, #0]
 8016120:	b91b      	cbnz	r3, 801612a <_printf_i+0x15e>
 8016122:	6822      	ldr	r2, [r4, #0]
 8016124:	f022 0220 	bic.w	r2, r2, #32
 8016128:	6022      	str	r2, [r4, #0]
 801612a:	2210      	movs	r2, #16
 801612c:	e7b7      	b.n	801609e <_printf_i+0xd2>
 801612e:	064d      	lsls	r5, r1, #25
 8016130:	bf48      	it	mi
 8016132:	b29b      	uxthmi	r3, r3
 8016134:	e7ef      	b.n	8016116 <_printf_i+0x14a>
 8016136:	4665      	mov	r5, ip
 8016138:	fbb3 f1f2 	udiv	r1, r3, r2
 801613c:	fb02 3311 	mls	r3, r2, r1, r3
 8016140:	5cc3      	ldrb	r3, [r0, r3]
 8016142:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016146:	460b      	mov	r3, r1
 8016148:	2900      	cmp	r1, #0
 801614a:	d1f5      	bne.n	8016138 <_printf_i+0x16c>
 801614c:	e7b9      	b.n	80160c2 <_printf_i+0xf6>
 801614e:	6813      	ldr	r3, [r2, #0]
 8016150:	6825      	ldr	r5, [r4, #0]
 8016152:	6961      	ldr	r1, [r4, #20]
 8016154:	1d18      	adds	r0, r3, #4
 8016156:	6010      	str	r0, [r2, #0]
 8016158:	0628      	lsls	r0, r5, #24
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	d501      	bpl.n	8016162 <_printf_i+0x196>
 801615e:	6019      	str	r1, [r3, #0]
 8016160:	e002      	b.n	8016168 <_printf_i+0x19c>
 8016162:	066a      	lsls	r2, r5, #25
 8016164:	d5fb      	bpl.n	801615e <_printf_i+0x192>
 8016166:	8019      	strh	r1, [r3, #0]
 8016168:	2300      	movs	r3, #0
 801616a:	6123      	str	r3, [r4, #16]
 801616c:	4665      	mov	r5, ip
 801616e:	e7b9      	b.n	80160e4 <_printf_i+0x118>
 8016170:	6813      	ldr	r3, [r2, #0]
 8016172:	1d19      	adds	r1, r3, #4
 8016174:	6011      	str	r1, [r2, #0]
 8016176:	681d      	ldr	r5, [r3, #0]
 8016178:	6862      	ldr	r2, [r4, #4]
 801617a:	2100      	movs	r1, #0
 801617c:	4628      	mov	r0, r5
 801617e:	f7ea f847 	bl	8000210 <memchr>
 8016182:	b108      	cbz	r0, 8016188 <_printf_i+0x1bc>
 8016184:	1b40      	subs	r0, r0, r5
 8016186:	6060      	str	r0, [r4, #4]
 8016188:	6863      	ldr	r3, [r4, #4]
 801618a:	6123      	str	r3, [r4, #16]
 801618c:	2300      	movs	r3, #0
 801618e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016192:	e7a7      	b.n	80160e4 <_printf_i+0x118>
 8016194:	6923      	ldr	r3, [r4, #16]
 8016196:	462a      	mov	r2, r5
 8016198:	4639      	mov	r1, r7
 801619a:	4630      	mov	r0, r6
 801619c:	47c0      	blx	r8
 801619e:	3001      	adds	r0, #1
 80161a0:	d0aa      	beq.n	80160f8 <_printf_i+0x12c>
 80161a2:	6823      	ldr	r3, [r4, #0]
 80161a4:	079b      	lsls	r3, r3, #30
 80161a6:	d413      	bmi.n	80161d0 <_printf_i+0x204>
 80161a8:	68e0      	ldr	r0, [r4, #12]
 80161aa:	9b03      	ldr	r3, [sp, #12]
 80161ac:	4298      	cmp	r0, r3
 80161ae:	bfb8      	it	lt
 80161b0:	4618      	movlt	r0, r3
 80161b2:	e7a3      	b.n	80160fc <_printf_i+0x130>
 80161b4:	2301      	movs	r3, #1
 80161b6:	464a      	mov	r2, r9
 80161b8:	4639      	mov	r1, r7
 80161ba:	4630      	mov	r0, r6
 80161bc:	47c0      	blx	r8
 80161be:	3001      	adds	r0, #1
 80161c0:	d09a      	beq.n	80160f8 <_printf_i+0x12c>
 80161c2:	3501      	adds	r5, #1
 80161c4:	68e3      	ldr	r3, [r4, #12]
 80161c6:	9a03      	ldr	r2, [sp, #12]
 80161c8:	1a9b      	subs	r3, r3, r2
 80161ca:	42ab      	cmp	r3, r5
 80161cc:	dcf2      	bgt.n	80161b4 <_printf_i+0x1e8>
 80161ce:	e7eb      	b.n	80161a8 <_printf_i+0x1dc>
 80161d0:	2500      	movs	r5, #0
 80161d2:	f104 0919 	add.w	r9, r4, #25
 80161d6:	e7f5      	b.n	80161c4 <_printf_i+0x1f8>
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d1ac      	bne.n	8016136 <_printf_i+0x16a>
 80161dc:	7803      	ldrb	r3, [r0, #0]
 80161de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161e6:	e76c      	b.n	80160c2 <_printf_i+0xf6>
 80161e8:	0801a5e0 	.word	0x0801a5e0
 80161ec:	0801a5f1 	.word	0x0801a5f1

080161f0 <_scanf_float>:
 80161f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f4:	469a      	mov	sl, r3
 80161f6:	688b      	ldr	r3, [r1, #8]
 80161f8:	4616      	mov	r6, r2
 80161fa:	1e5a      	subs	r2, r3, #1
 80161fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016200:	b087      	sub	sp, #28
 8016202:	bf83      	ittte	hi
 8016204:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016208:	189b      	addhi	r3, r3, r2
 801620a:	9301      	strhi	r3, [sp, #4]
 801620c:	2300      	movls	r3, #0
 801620e:	bf86      	itte	hi
 8016210:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016214:	608b      	strhi	r3, [r1, #8]
 8016216:	9301      	strls	r3, [sp, #4]
 8016218:	680b      	ldr	r3, [r1, #0]
 801621a:	4688      	mov	r8, r1
 801621c:	f04f 0b00 	mov.w	fp, #0
 8016220:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016224:	f848 3b1c 	str.w	r3, [r8], #28
 8016228:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801622c:	4607      	mov	r7, r0
 801622e:	460c      	mov	r4, r1
 8016230:	4645      	mov	r5, r8
 8016232:	465a      	mov	r2, fp
 8016234:	46d9      	mov	r9, fp
 8016236:	f8cd b008 	str.w	fp, [sp, #8]
 801623a:	68a1      	ldr	r1, [r4, #8]
 801623c:	b181      	cbz	r1, 8016260 <_scanf_float+0x70>
 801623e:	6833      	ldr	r3, [r6, #0]
 8016240:	781b      	ldrb	r3, [r3, #0]
 8016242:	2b49      	cmp	r3, #73	; 0x49
 8016244:	d071      	beq.n	801632a <_scanf_float+0x13a>
 8016246:	d84d      	bhi.n	80162e4 <_scanf_float+0xf4>
 8016248:	2b39      	cmp	r3, #57	; 0x39
 801624a:	d840      	bhi.n	80162ce <_scanf_float+0xde>
 801624c:	2b31      	cmp	r3, #49	; 0x31
 801624e:	f080 8088 	bcs.w	8016362 <_scanf_float+0x172>
 8016252:	2b2d      	cmp	r3, #45	; 0x2d
 8016254:	f000 8090 	beq.w	8016378 <_scanf_float+0x188>
 8016258:	d815      	bhi.n	8016286 <_scanf_float+0x96>
 801625a:	2b2b      	cmp	r3, #43	; 0x2b
 801625c:	f000 808c 	beq.w	8016378 <_scanf_float+0x188>
 8016260:	f1b9 0f00 	cmp.w	r9, #0
 8016264:	d003      	beq.n	801626e <_scanf_float+0x7e>
 8016266:	6823      	ldr	r3, [r4, #0]
 8016268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801626c:	6023      	str	r3, [r4, #0]
 801626e:	3a01      	subs	r2, #1
 8016270:	2a01      	cmp	r2, #1
 8016272:	f200 80ea 	bhi.w	801644a <_scanf_float+0x25a>
 8016276:	4545      	cmp	r5, r8
 8016278:	f200 80dc 	bhi.w	8016434 <_scanf_float+0x244>
 801627c:	2601      	movs	r6, #1
 801627e:	4630      	mov	r0, r6
 8016280:	b007      	add	sp, #28
 8016282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016286:	2b2e      	cmp	r3, #46	; 0x2e
 8016288:	f000 809f 	beq.w	80163ca <_scanf_float+0x1da>
 801628c:	2b30      	cmp	r3, #48	; 0x30
 801628e:	d1e7      	bne.n	8016260 <_scanf_float+0x70>
 8016290:	6820      	ldr	r0, [r4, #0]
 8016292:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016296:	d064      	beq.n	8016362 <_scanf_float+0x172>
 8016298:	9b01      	ldr	r3, [sp, #4]
 801629a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801629e:	6020      	str	r0, [r4, #0]
 80162a0:	f109 0901 	add.w	r9, r9, #1
 80162a4:	b11b      	cbz	r3, 80162ae <_scanf_float+0xbe>
 80162a6:	3b01      	subs	r3, #1
 80162a8:	3101      	adds	r1, #1
 80162aa:	9301      	str	r3, [sp, #4]
 80162ac:	60a1      	str	r1, [r4, #8]
 80162ae:	68a3      	ldr	r3, [r4, #8]
 80162b0:	3b01      	subs	r3, #1
 80162b2:	60a3      	str	r3, [r4, #8]
 80162b4:	6923      	ldr	r3, [r4, #16]
 80162b6:	3301      	adds	r3, #1
 80162b8:	6123      	str	r3, [r4, #16]
 80162ba:	6873      	ldr	r3, [r6, #4]
 80162bc:	3b01      	subs	r3, #1
 80162be:	2b00      	cmp	r3, #0
 80162c0:	6073      	str	r3, [r6, #4]
 80162c2:	f340 80ac 	ble.w	801641e <_scanf_float+0x22e>
 80162c6:	6833      	ldr	r3, [r6, #0]
 80162c8:	3301      	adds	r3, #1
 80162ca:	6033      	str	r3, [r6, #0]
 80162cc:	e7b5      	b.n	801623a <_scanf_float+0x4a>
 80162ce:	2b45      	cmp	r3, #69	; 0x45
 80162d0:	f000 8085 	beq.w	80163de <_scanf_float+0x1ee>
 80162d4:	2b46      	cmp	r3, #70	; 0x46
 80162d6:	d06a      	beq.n	80163ae <_scanf_float+0x1be>
 80162d8:	2b41      	cmp	r3, #65	; 0x41
 80162da:	d1c1      	bne.n	8016260 <_scanf_float+0x70>
 80162dc:	2a01      	cmp	r2, #1
 80162de:	d1bf      	bne.n	8016260 <_scanf_float+0x70>
 80162e0:	2202      	movs	r2, #2
 80162e2:	e046      	b.n	8016372 <_scanf_float+0x182>
 80162e4:	2b65      	cmp	r3, #101	; 0x65
 80162e6:	d07a      	beq.n	80163de <_scanf_float+0x1ee>
 80162e8:	d818      	bhi.n	801631c <_scanf_float+0x12c>
 80162ea:	2b54      	cmp	r3, #84	; 0x54
 80162ec:	d066      	beq.n	80163bc <_scanf_float+0x1cc>
 80162ee:	d811      	bhi.n	8016314 <_scanf_float+0x124>
 80162f0:	2b4e      	cmp	r3, #78	; 0x4e
 80162f2:	d1b5      	bne.n	8016260 <_scanf_float+0x70>
 80162f4:	2a00      	cmp	r2, #0
 80162f6:	d146      	bne.n	8016386 <_scanf_float+0x196>
 80162f8:	f1b9 0f00 	cmp.w	r9, #0
 80162fc:	d145      	bne.n	801638a <_scanf_float+0x19a>
 80162fe:	6821      	ldr	r1, [r4, #0]
 8016300:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016304:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016308:	d13f      	bne.n	801638a <_scanf_float+0x19a>
 801630a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801630e:	6021      	str	r1, [r4, #0]
 8016310:	2201      	movs	r2, #1
 8016312:	e02e      	b.n	8016372 <_scanf_float+0x182>
 8016314:	2b59      	cmp	r3, #89	; 0x59
 8016316:	d01e      	beq.n	8016356 <_scanf_float+0x166>
 8016318:	2b61      	cmp	r3, #97	; 0x61
 801631a:	e7de      	b.n	80162da <_scanf_float+0xea>
 801631c:	2b6e      	cmp	r3, #110	; 0x6e
 801631e:	d0e9      	beq.n	80162f4 <_scanf_float+0x104>
 8016320:	d815      	bhi.n	801634e <_scanf_float+0x15e>
 8016322:	2b66      	cmp	r3, #102	; 0x66
 8016324:	d043      	beq.n	80163ae <_scanf_float+0x1be>
 8016326:	2b69      	cmp	r3, #105	; 0x69
 8016328:	d19a      	bne.n	8016260 <_scanf_float+0x70>
 801632a:	f1bb 0f00 	cmp.w	fp, #0
 801632e:	d138      	bne.n	80163a2 <_scanf_float+0x1b2>
 8016330:	f1b9 0f00 	cmp.w	r9, #0
 8016334:	d197      	bne.n	8016266 <_scanf_float+0x76>
 8016336:	6821      	ldr	r1, [r4, #0]
 8016338:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801633c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016340:	d195      	bne.n	801626e <_scanf_float+0x7e>
 8016342:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016346:	6021      	str	r1, [r4, #0]
 8016348:	f04f 0b01 	mov.w	fp, #1
 801634c:	e011      	b.n	8016372 <_scanf_float+0x182>
 801634e:	2b74      	cmp	r3, #116	; 0x74
 8016350:	d034      	beq.n	80163bc <_scanf_float+0x1cc>
 8016352:	2b79      	cmp	r3, #121	; 0x79
 8016354:	d184      	bne.n	8016260 <_scanf_float+0x70>
 8016356:	f1bb 0f07 	cmp.w	fp, #7
 801635a:	d181      	bne.n	8016260 <_scanf_float+0x70>
 801635c:	f04f 0b08 	mov.w	fp, #8
 8016360:	e007      	b.n	8016372 <_scanf_float+0x182>
 8016362:	eb12 0f0b 	cmn.w	r2, fp
 8016366:	f47f af7b 	bne.w	8016260 <_scanf_float+0x70>
 801636a:	6821      	ldr	r1, [r4, #0]
 801636c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016370:	6021      	str	r1, [r4, #0]
 8016372:	702b      	strb	r3, [r5, #0]
 8016374:	3501      	adds	r5, #1
 8016376:	e79a      	b.n	80162ae <_scanf_float+0xbe>
 8016378:	6821      	ldr	r1, [r4, #0]
 801637a:	0608      	lsls	r0, r1, #24
 801637c:	f57f af70 	bpl.w	8016260 <_scanf_float+0x70>
 8016380:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016384:	e7f4      	b.n	8016370 <_scanf_float+0x180>
 8016386:	2a02      	cmp	r2, #2
 8016388:	d047      	beq.n	801641a <_scanf_float+0x22a>
 801638a:	f1bb 0f01 	cmp.w	fp, #1
 801638e:	d003      	beq.n	8016398 <_scanf_float+0x1a8>
 8016390:	f1bb 0f04 	cmp.w	fp, #4
 8016394:	f47f af64 	bne.w	8016260 <_scanf_float+0x70>
 8016398:	f10b 0b01 	add.w	fp, fp, #1
 801639c:	fa5f fb8b 	uxtb.w	fp, fp
 80163a0:	e7e7      	b.n	8016372 <_scanf_float+0x182>
 80163a2:	f1bb 0f03 	cmp.w	fp, #3
 80163a6:	d0f7      	beq.n	8016398 <_scanf_float+0x1a8>
 80163a8:	f1bb 0f05 	cmp.w	fp, #5
 80163ac:	e7f2      	b.n	8016394 <_scanf_float+0x1a4>
 80163ae:	f1bb 0f02 	cmp.w	fp, #2
 80163b2:	f47f af55 	bne.w	8016260 <_scanf_float+0x70>
 80163b6:	f04f 0b03 	mov.w	fp, #3
 80163ba:	e7da      	b.n	8016372 <_scanf_float+0x182>
 80163bc:	f1bb 0f06 	cmp.w	fp, #6
 80163c0:	f47f af4e 	bne.w	8016260 <_scanf_float+0x70>
 80163c4:	f04f 0b07 	mov.w	fp, #7
 80163c8:	e7d3      	b.n	8016372 <_scanf_float+0x182>
 80163ca:	6821      	ldr	r1, [r4, #0]
 80163cc:	0588      	lsls	r0, r1, #22
 80163ce:	f57f af47 	bpl.w	8016260 <_scanf_float+0x70>
 80163d2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80163d6:	6021      	str	r1, [r4, #0]
 80163d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80163dc:	e7c9      	b.n	8016372 <_scanf_float+0x182>
 80163de:	6821      	ldr	r1, [r4, #0]
 80163e0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80163e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80163e8:	d006      	beq.n	80163f8 <_scanf_float+0x208>
 80163ea:	0548      	lsls	r0, r1, #21
 80163ec:	f57f af38 	bpl.w	8016260 <_scanf_float+0x70>
 80163f0:	f1b9 0f00 	cmp.w	r9, #0
 80163f4:	f43f af3b 	beq.w	801626e <_scanf_float+0x7e>
 80163f8:	0588      	lsls	r0, r1, #22
 80163fa:	bf58      	it	pl
 80163fc:	9802      	ldrpl	r0, [sp, #8]
 80163fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016402:	bf58      	it	pl
 8016404:	eba9 0000 	subpl.w	r0, r9, r0
 8016408:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801640c:	bf58      	it	pl
 801640e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016412:	6021      	str	r1, [r4, #0]
 8016414:	f04f 0900 	mov.w	r9, #0
 8016418:	e7ab      	b.n	8016372 <_scanf_float+0x182>
 801641a:	2203      	movs	r2, #3
 801641c:	e7a9      	b.n	8016372 <_scanf_float+0x182>
 801641e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016422:	9205      	str	r2, [sp, #20]
 8016424:	4631      	mov	r1, r6
 8016426:	4638      	mov	r0, r7
 8016428:	4798      	blx	r3
 801642a:	9a05      	ldr	r2, [sp, #20]
 801642c:	2800      	cmp	r0, #0
 801642e:	f43f af04 	beq.w	801623a <_scanf_float+0x4a>
 8016432:	e715      	b.n	8016260 <_scanf_float+0x70>
 8016434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016438:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801643c:	4632      	mov	r2, r6
 801643e:	4638      	mov	r0, r7
 8016440:	4798      	blx	r3
 8016442:	6923      	ldr	r3, [r4, #16]
 8016444:	3b01      	subs	r3, #1
 8016446:	6123      	str	r3, [r4, #16]
 8016448:	e715      	b.n	8016276 <_scanf_float+0x86>
 801644a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801644e:	2b06      	cmp	r3, #6
 8016450:	d80a      	bhi.n	8016468 <_scanf_float+0x278>
 8016452:	f1bb 0f02 	cmp.w	fp, #2
 8016456:	d968      	bls.n	801652a <_scanf_float+0x33a>
 8016458:	f1ab 0b03 	sub.w	fp, fp, #3
 801645c:	fa5f fb8b 	uxtb.w	fp, fp
 8016460:	eba5 0b0b 	sub.w	fp, r5, fp
 8016464:	455d      	cmp	r5, fp
 8016466:	d14b      	bne.n	8016500 <_scanf_float+0x310>
 8016468:	6823      	ldr	r3, [r4, #0]
 801646a:	05da      	lsls	r2, r3, #23
 801646c:	d51f      	bpl.n	80164ae <_scanf_float+0x2be>
 801646e:	055b      	lsls	r3, r3, #21
 8016470:	d468      	bmi.n	8016544 <_scanf_float+0x354>
 8016472:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016476:	6923      	ldr	r3, [r4, #16]
 8016478:	2965      	cmp	r1, #101	; 0x65
 801647a:	f103 33ff 	add.w	r3, r3, #4294967295
 801647e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016482:	6123      	str	r3, [r4, #16]
 8016484:	d00d      	beq.n	80164a2 <_scanf_float+0x2b2>
 8016486:	2945      	cmp	r1, #69	; 0x45
 8016488:	d00b      	beq.n	80164a2 <_scanf_float+0x2b2>
 801648a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801648e:	4632      	mov	r2, r6
 8016490:	4638      	mov	r0, r7
 8016492:	4798      	blx	r3
 8016494:	6923      	ldr	r3, [r4, #16]
 8016496:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801649a:	3b01      	subs	r3, #1
 801649c:	f1a5 0b02 	sub.w	fp, r5, #2
 80164a0:	6123      	str	r3, [r4, #16]
 80164a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164a6:	4632      	mov	r2, r6
 80164a8:	4638      	mov	r0, r7
 80164aa:	4798      	blx	r3
 80164ac:	465d      	mov	r5, fp
 80164ae:	6826      	ldr	r6, [r4, #0]
 80164b0:	f016 0610 	ands.w	r6, r6, #16
 80164b4:	d17a      	bne.n	80165ac <_scanf_float+0x3bc>
 80164b6:	702e      	strb	r6, [r5, #0]
 80164b8:	6823      	ldr	r3, [r4, #0]
 80164ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80164be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80164c2:	d142      	bne.n	801654a <_scanf_float+0x35a>
 80164c4:	9b02      	ldr	r3, [sp, #8]
 80164c6:	eba9 0303 	sub.w	r3, r9, r3
 80164ca:	425a      	negs	r2, r3
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d149      	bne.n	8016564 <_scanf_float+0x374>
 80164d0:	2200      	movs	r2, #0
 80164d2:	4641      	mov	r1, r8
 80164d4:	4638      	mov	r0, r7
 80164d6:	f000 ff0b 	bl	80172f0 <_strtod_r>
 80164da:	6825      	ldr	r5, [r4, #0]
 80164dc:	f8da 3000 	ldr.w	r3, [sl]
 80164e0:	f015 0f02 	tst.w	r5, #2
 80164e4:	f103 0204 	add.w	r2, r3, #4
 80164e8:	ec59 8b10 	vmov	r8, r9, d0
 80164ec:	f8ca 2000 	str.w	r2, [sl]
 80164f0:	d043      	beq.n	801657a <_scanf_float+0x38a>
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	e9c3 8900 	strd	r8, r9, [r3]
 80164f8:	68e3      	ldr	r3, [r4, #12]
 80164fa:	3301      	adds	r3, #1
 80164fc:	60e3      	str	r3, [r4, #12]
 80164fe:	e6be      	b.n	801627e <_scanf_float+0x8e>
 8016500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016504:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016508:	4632      	mov	r2, r6
 801650a:	4638      	mov	r0, r7
 801650c:	4798      	blx	r3
 801650e:	6923      	ldr	r3, [r4, #16]
 8016510:	3b01      	subs	r3, #1
 8016512:	6123      	str	r3, [r4, #16]
 8016514:	e7a6      	b.n	8016464 <_scanf_float+0x274>
 8016516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801651a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801651e:	4632      	mov	r2, r6
 8016520:	4638      	mov	r0, r7
 8016522:	4798      	blx	r3
 8016524:	6923      	ldr	r3, [r4, #16]
 8016526:	3b01      	subs	r3, #1
 8016528:	6123      	str	r3, [r4, #16]
 801652a:	4545      	cmp	r5, r8
 801652c:	d8f3      	bhi.n	8016516 <_scanf_float+0x326>
 801652e:	e6a5      	b.n	801627c <_scanf_float+0x8c>
 8016530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016534:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016538:	4632      	mov	r2, r6
 801653a:	4638      	mov	r0, r7
 801653c:	4798      	blx	r3
 801653e:	6923      	ldr	r3, [r4, #16]
 8016540:	3b01      	subs	r3, #1
 8016542:	6123      	str	r3, [r4, #16]
 8016544:	4545      	cmp	r5, r8
 8016546:	d8f3      	bhi.n	8016530 <_scanf_float+0x340>
 8016548:	e698      	b.n	801627c <_scanf_float+0x8c>
 801654a:	9b03      	ldr	r3, [sp, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d0bf      	beq.n	80164d0 <_scanf_float+0x2e0>
 8016550:	9904      	ldr	r1, [sp, #16]
 8016552:	230a      	movs	r3, #10
 8016554:	4632      	mov	r2, r6
 8016556:	3101      	adds	r1, #1
 8016558:	4638      	mov	r0, r7
 801655a:	f000 ff55 	bl	8017408 <_strtol_r>
 801655e:	9b03      	ldr	r3, [sp, #12]
 8016560:	9d04      	ldr	r5, [sp, #16]
 8016562:	1ac2      	subs	r2, r0, r3
 8016564:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016568:	429d      	cmp	r5, r3
 801656a:	bf28      	it	cs
 801656c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016570:	490f      	ldr	r1, [pc, #60]	; (80165b0 <_scanf_float+0x3c0>)
 8016572:	4628      	mov	r0, r5
 8016574:	f000 f858 	bl	8016628 <siprintf>
 8016578:	e7aa      	b.n	80164d0 <_scanf_float+0x2e0>
 801657a:	f015 0504 	ands.w	r5, r5, #4
 801657e:	d1b8      	bne.n	80164f2 <_scanf_float+0x302>
 8016580:	681f      	ldr	r7, [r3, #0]
 8016582:	ee10 2a10 	vmov	r2, s0
 8016586:	464b      	mov	r3, r9
 8016588:	ee10 0a10 	vmov	r0, s0
 801658c:	4649      	mov	r1, r9
 801658e:	f7ea fae5 	bl	8000b5c <__aeabi_dcmpun>
 8016592:	b128      	cbz	r0, 80165a0 <_scanf_float+0x3b0>
 8016594:	4628      	mov	r0, r5
 8016596:	f000 f80d 	bl	80165b4 <nanf>
 801659a:	ed87 0a00 	vstr	s0, [r7]
 801659e:	e7ab      	b.n	80164f8 <_scanf_float+0x308>
 80165a0:	4640      	mov	r0, r8
 80165a2:	4649      	mov	r1, r9
 80165a4:	f7ea fb38 	bl	8000c18 <__aeabi_d2f>
 80165a8:	6038      	str	r0, [r7, #0]
 80165aa:	e7a5      	b.n	80164f8 <_scanf_float+0x308>
 80165ac:	2600      	movs	r6, #0
 80165ae:	e666      	b.n	801627e <_scanf_float+0x8e>
 80165b0:	0801a602 	.word	0x0801a602

080165b4 <nanf>:
 80165b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80165bc <nanf+0x8>
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	7fc00000 	.word	0x7fc00000

080165c0 <sniprintf>:
 80165c0:	b40c      	push	{r2, r3}
 80165c2:	b530      	push	{r4, r5, lr}
 80165c4:	4b17      	ldr	r3, [pc, #92]	; (8016624 <sniprintf+0x64>)
 80165c6:	1e0c      	subs	r4, r1, #0
 80165c8:	b09d      	sub	sp, #116	; 0x74
 80165ca:	681d      	ldr	r5, [r3, #0]
 80165cc:	da08      	bge.n	80165e0 <sniprintf+0x20>
 80165ce:	238b      	movs	r3, #139	; 0x8b
 80165d0:	602b      	str	r3, [r5, #0]
 80165d2:	f04f 30ff 	mov.w	r0, #4294967295
 80165d6:	b01d      	add	sp, #116	; 0x74
 80165d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165dc:	b002      	add	sp, #8
 80165de:	4770      	bx	lr
 80165e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165e8:	bf14      	ite	ne
 80165ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165ee:	4623      	moveq	r3, r4
 80165f0:	9304      	str	r3, [sp, #16]
 80165f2:	9307      	str	r3, [sp, #28]
 80165f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165f8:	9002      	str	r0, [sp, #8]
 80165fa:	9006      	str	r0, [sp, #24]
 80165fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016602:	ab21      	add	r3, sp, #132	; 0x84
 8016604:	a902      	add	r1, sp, #8
 8016606:	4628      	mov	r0, r5
 8016608:	9301      	str	r3, [sp, #4]
 801660a:	f002 fde7 	bl	80191dc <_svfiprintf_r>
 801660e:	1c43      	adds	r3, r0, #1
 8016610:	bfbc      	itt	lt
 8016612:	238b      	movlt	r3, #139	; 0x8b
 8016614:	602b      	strlt	r3, [r5, #0]
 8016616:	2c00      	cmp	r4, #0
 8016618:	d0dd      	beq.n	80165d6 <sniprintf+0x16>
 801661a:	9b02      	ldr	r3, [sp, #8]
 801661c:	2200      	movs	r2, #0
 801661e:	701a      	strb	r2, [r3, #0]
 8016620:	e7d9      	b.n	80165d6 <sniprintf+0x16>
 8016622:	bf00      	nop
 8016624:	2000000c 	.word	0x2000000c

08016628 <siprintf>:
 8016628:	b40e      	push	{r1, r2, r3}
 801662a:	b500      	push	{lr}
 801662c:	b09c      	sub	sp, #112	; 0x70
 801662e:	ab1d      	add	r3, sp, #116	; 0x74
 8016630:	9002      	str	r0, [sp, #8]
 8016632:	9006      	str	r0, [sp, #24]
 8016634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016638:	4809      	ldr	r0, [pc, #36]	; (8016660 <siprintf+0x38>)
 801663a:	9107      	str	r1, [sp, #28]
 801663c:	9104      	str	r1, [sp, #16]
 801663e:	4909      	ldr	r1, [pc, #36]	; (8016664 <siprintf+0x3c>)
 8016640:	f853 2b04 	ldr.w	r2, [r3], #4
 8016644:	9105      	str	r1, [sp, #20]
 8016646:	6800      	ldr	r0, [r0, #0]
 8016648:	9301      	str	r3, [sp, #4]
 801664a:	a902      	add	r1, sp, #8
 801664c:	f002 fdc6 	bl	80191dc <_svfiprintf_r>
 8016650:	9b02      	ldr	r3, [sp, #8]
 8016652:	2200      	movs	r2, #0
 8016654:	701a      	strb	r2, [r3, #0]
 8016656:	b01c      	add	sp, #112	; 0x70
 8016658:	f85d eb04 	ldr.w	lr, [sp], #4
 801665c:	b003      	add	sp, #12
 801665e:	4770      	bx	lr
 8016660:	2000000c 	.word	0x2000000c
 8016664:	ffff0208 	.word	0xffff0208

08016668 <siscanf>:
 8016668:	b40e      	push	{r1, r2, r3}
 801666a:	b530      	push	{r4, r5, lr}
 801666c:	b09c      	sub	sp, #112	; 0x70
 801666e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016670:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016674:	f854 5b04 	ldr.w	r5, [r4], #4
 8016678:	f8ad 2014 	strh.w	r2, [sp, #20]
 801667c:	9002      	str	r0, [sp, #8]
 801667e:	9006      	str	r0, [sp, #24]
 8016680:	f7e9 fdbe 	bl	8000200 <strlen>
 8016684:	4b0b      	ldr	r3, [pc, #44]	; (80166b4 <siscanf+0x4c>)
 8016686:	9003      	str	r0, [sp, #12]
 8016688:	9007      	str	r0, [sp, #28]
 801668a:	930b      	str	r3, [sp, #44]	; 0x2c
 801668c:	480a      	ldr	r0, [pc, #40]	; (80166b8 <siscanf+0x50>)
 801668e:	9401      	str	r4, [sp, #4]
 8016690:	2300      	movs	r3, #0
 8016692:	930f      	str	r3, [sp, #60]	; 0x3c
 8016694:	9314      	str	r3, [sp, #80]	; 0x50
 8016696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801669a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801669e:	462a      	mov	r2, r5
 80166a0:	4623      	mov	r3, r4
 80166a2:	a902      	add	r1, sp, #8
 80166a4:	6800      	ldr	r0, [r0, #0]
 80166a6:	f002 feeb 	bl	8019480 <__ssvfiscanf_r>
 80166aa:	b01c      	add	sp, #112	; 0x70
 80166ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166b0:	b003      	add	sp, #12
 80166b2:	4770      	bx	lr
 80166b4:	080166bd 	.word	0x080166bd
 80166b8:	2000000c 	.word	0x2000000c

080166bc <__seofread>:
 80166bc:	2000      	movs	r0, #0
 80166be:	4770      	bx	lr

080166c0 <strcpy>:
 80166c0:	4603      	mov	r3, r0
 80166c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166c6:	f803 2b01 	strb.w	r2, [r3], #1
 80166ca:	2a00      	cmp	r2, #0
 80166cc:	d1f9      	bne.n	80166c2 <strcpy+0x2>
 80166ce:	4770      	bx	lr

080166d0 <sulp>:
 80166d0:	b570      	push	{r4, r5, r6, lr}
 80166d2:	4604      	mov	r4, r0
 80166d4:	460d      	mov	r5, r1
 80166d6:	ec45 4b10 	vmov	d0, r4, r5
 80166da:	4616      	mov	r6, r2
 80166dc:	f002 fb3a 	bl	8018d54 <__ulp>
 80166e0:	ec51 0b10 	vmov	r0, r1, d0
 80166e4:	b17e      	cbz	r6, 8016706 <sulp+0x36>
 80166e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	dd09      	ble.n	8016706 <sulp+0x36>
 80166f2:	051b      	lsls	r3, r3, #20
 80166f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80166f8:	2400      	movs	r4, #0
 80166fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80166fe:	4622      	mov	r2, r4
 8016700:	462b      	mov	r3, r5
 8016702:	f7e9 ff91 	bl	8000628 <__aeabi_dmul>
 8016706:	bd70      	pop	{r4, r5, r6, pc}

08016708 <_strtod_l>:
 8016708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670c:	461f      	mov	r7, r3
 801670e:	b0a1      	sub	sp, #132	; 0x84
 8016710:	2300      	movs	r3, #0
 8016712:	4681      	mov	r9, r0
 8016714:	4638      	mov	r0, r7
 8016716:	460e      	mov	r6, r1
 8016718:	9217      	str	r2, [sp, #92]	; 0x5c
 801671a:	931c      	str	r3, [sp, #112]	; 0x70
 801671c:	f002 f824 	bl	8018768 <__localeconv_l>
 8016720:	4680      	mov	r8, r0
 8016722:	6800      	ldr	r0, [r0, #0]
 8016724:	f7e9 fd6c 	bl	8000200 <strlen>
 8016728:	f04f 0a00 	mov.w	sl, #0
 801672c:	4604      	mov	r4, r0
 801672e:	f04f 0b00 	mov.w	fp, #0
 8016732:	961b      	str	r6, [sp, #108]	; 0x6c
 8016734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016736:	781a      	ldrb	r2, [r3, #0]
 8016738:	2a0d      	cmp	r2, #13
 801673a:	d832      	bhi.n	80167a2 <_strtod_l+0x9a>
 801673c:	2a09      	cmp	r2, #9
 801673e:	d236      	bcs.n	80167ae <_strtod_l+0xa6>
 8016740:	2a00      	cmp	r2, #0
 8016742:	d03e      	beq.n	80167c2 <_strtod_l+0xba>
 8016744:	2300      	movs	r3, #0
 8016746:	930d      	str	r3, [sp, #52]	; 0x34
 8016748:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801674a:	782b      	ldrb	r3, [r5, #0]
 801674c:	2b30      	cmp	r3, #48	; 0x30
 801674e:	f040 80ac 	bne.w	80168aa <_strtod_l+0x1a2>
 8016752:	786b      	ldrb	r3, [r5, #1]
 8016754:	2b58      	cmp	r3, #88	; 0x58
 8016756:	d001      	beq.n	801675c <_strtod_l+0x54>
 8016758:	2b78      	cmp	r3, #120	; 0x78
 801675a:	d167      	bne.n	801682c <_strtod_l+0x124>
 801675c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801675e:	9301      	str	r3, [sp, #4]
 8016760:	ab1c      	add	r3, sp, #112	; 0x70
 8016762:	9300      	str	r3, [sp, #0]
 8016764:	9702      	str	r7, [sp, #8]
 8016766:	ab1d      	add	r3, sp, #116	; 0x74
 8016768:	4a88      	ldr	r2, [pc, #544]	; (801698c <_strtod_l+0x284>)
 801676a:	a91b      	add	r1, sp, #108	; 0x6c
 801676c:	4648      	mov	r0, r9
 801676e:	f001 fd12 	bl	8018196 <__gethex>
 8016772:	f010 0407 	ands.w	r4, r0, #7
 8016776:	4606      	mov	r6, r0
 8016778:	d005      	beq.n	8016786 <_strtod_l+0x7e>
 801677a:	2c06      	cmp	r4, #6
 801677c:	d12b      	bne.n	80167d6 <_strtod_l+0xce>
 801677e:	3501      	adds	r5, #1
 8016780:	2300      	movs	r3, #0
 8016782:	951b      	str	r5, [sp, #108]	; 0x6c
 8016784:	930d      	str	r3, [sp, #52]	; 0x34
 8016786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016788:	2b00      	cmp	r3, #0
 801678a:	f040 859a 	bne.w	80172c2 <_strtod_l+0xbba>
 801678e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016790:	b1e3      	cbz	r3, 80167cc <_strtod_l+0xc4>
 8016792:	4652      	mov	r2, sl
 8016794:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016798:	ec43 2b10 	vmov	d0, r2, r3
 801679c:	b021      	add	sp, #132	; 0x84
 801679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a2:	2a2b      	cmp	r2, #43	; 0x2b
 80167a4:	d015      	beq.n	80167d2 <_strtod_l+0xca>
 80167a6:	2a2d      	cmp	r2, #45	; 0x2d
 80167a8:	d004      	beq.n	80167b4 <_strtod_l+0xac>
 80167aa:	2a20      	cmp	r2, #32
 80167ac:	d1ca      	bne.n	8016744 <_strtod_l+0x3c>
 80167ae:	3301      	adds	r3, #1
 80167b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80167b2:	e7bf      	b.n	8016734 <_strtod_l+0x2c>
 80167b4:	2201      	movs	r2, #1
 80167b6:	920d      	str	r2, [sp, #52]	; 0x34
 80167b8:	1c5a      	adds	r2, r3, #1
 80167ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80167bc:	785b      	ldrb	r3, [r3, #1]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1c2      	bne.n	8016748 <_strtod_l+0x40>
 80167c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80167c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	f040 8579 	bne.w	80172be <_strtod_l+0xbb6>
 80167cc:	4652      	mov	r2, sl
 80167ce:	465b      	mov	r3, fp
 80167d0:	e7e2      	b.n	8016798 <_strtod_l+0x90>
 80167d2:	2200      	movs	r2, #0
 80167d4:	e7ef      	b.n	80167b6 <_strtod_l+0xae>
 80167d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80167d8:	b13a      	cbz	r2, 80167ea <_strtod_l+0xe2>
 80167da:	2135      	movs	r1, #53	; 0x35
 80167dc:	a81e      	add	r0, sp, #120	; 0x78
 80167de:	f002 fbb1 	bl	8018f44 <__copybits>
 80167e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167e4:	4648      	mov	r0, r9
 80167e6:	f002 f81d 	bl	8018824 <_Bfree>
 80167ea:	3c01      	subs	r4, #1
 80167ec:	2c04      	cmp	r4, #4
 80167ee:	d806      	bhi.n	80167fe <_strtod_l+0xf6>
 80167f0:	e8df f004 	tbb	[pc, r4]
 80167f4:	1714030a 	.word	0x1714030a
 80167f8:	0a          	.byte	0x0a
 80167f9:	00          	.byte	0x00
 80167fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80167fe:	0730      	lsls	r0, r6, #28
 8016800:	d5c1      	bpl.n	8016786 <_strtod_l+0x7e>
 8016802:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016806:	e7be      	b.n	8016786 <_strtod_l+0x7e>
 8016808:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801680c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801680e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016812:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016816:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801681a:	e7f0      	b.n	80167fe <_strtod_l+0xf6>
 801681c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016990 <_strtod_l+0x288>
 8016820:	e7ed      	b.n	80167fe <_strtod_l+0xf6>
 8016822:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016826:	f04f 3aff 	mov.w	sl, #4294967295
 801682a:	e7e8      	b.n	80167fe <_strtod_l+0xf6>
 801682c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801682e:	1c5a      	adds	r2, r3, #1
 8016830:	921b      	str	r2, [sp, #108]	; 0x6c
 8016832:	785b      	ldrb	r3, [r3, #1]
 8016834:	2b30      	cmp	r3, #48	; 0x30
 8016836:	d0f9      	beq.n	801682c <_strtod_l+0x124>
 8016838:	2b00      	cmp	r3, #0
 801683a:	d0a4      	beq.n	8016786 <_strtod_l+0x7e>
 801683c:	2301      	movs	r3, #1
 801683e:	2500      	movs	r5, #0
 8016840:	9306      	str	r3, [sp, #24]
 8016842:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016844:	9308      	str	r3, [sp, #32]
 8016846:	9507      	str	r5, [sp, #28]
 8016848:	9505      	str	r5, [sp, #20]
 801684a:	220a      	movs	r2, #10
 801684c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801684e:	7807      	ldrb	r7, [r0, #0]
 8016850:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016854:	b2d9      	uxtb	r1, r3
 8016856:	2909      	cmp	r1, #9
 8016858:	d929      	bls.n	80168ae <_strtod_l+0x1a6>
 801685a:	4622      	mov	r2, r4
 801685c:	f8d8 1000 	ldr.w	r1, [r8]
 8016860:	f003 f8f8 	bl	8019a54 <strncmp>
 8016864:	2800      	cmp	r0, #0
 8016866:	d031      	beq.n	80168cc <_strtod_l+0x1c4>
 8016868:	2000      	movs	r0, #0
 801686a:	9c05      	ldr	r4, [sp, #20]
 801686c:	9004      	str	r0, [sp, #16]
 801686e:	463b      	mov	r3, r7
 8016870:	4602      	mov	r2, r0
 8016872:	2b65      	cmp	r3, #101	; 0x65
 8016874:	d001      	beq.n	801687a <_strtod_l+0x172>
 8016876:	2b45      	cmp	r3, #69	; 0x45
 8016878:	d114      	bne.n	80168a4 <_strtod_l+0x19c>
 801687a:	b924      	cbnz	r4, 8016886 <_strtod_l+0x17e>
 801687c:	b910      	cbnz	r0, 8016884 <_strtod_l+0x17c>
 801687e:	9b06      	ldr	r3, [sp, #24]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d09e      	beq.n	80167c2 <_strtod_l+0xba>
 8016884:	2400      	movs	r4, #0
 8016886:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016888:	1c73      	adds	r3, r6, #1
 801688a:	931b      	str	r3, [sp, #108]	; 0x6c
 801688c:	7873      	ldrb	r3, [r6, #1]
 801688e:	2b2b      	cmp	r3, #43	; 0x2b
 8016890:	d078      	beq.n	8016984 <_strtod_l+0x27c>
 8016892:	2b2d      	cmp	r3, #45	; 0x2d
 8016894:	d070      	beq.n	8016978 <_strtod_l+0x270>
 8016896:	f04f 0c00 	mov.w	ip, #0
 801689a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801689e:	2f09      	cmp	r7, #9
 80168a0:	d97c      	bls.n	801699c <_strtod_l+0x294>
 80168a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80168a4:	f04f 0e00 	mov.w	lr, #0
 80168a8:	e09a      	b.n	80169e0 <_strtod_l+0x2d8>
 80168aa:	2300      	movs	r3, #0
 80168ac:	e7c7      	b.n	801683e <_strtod_l+0x136>
 80168ae:	9905      	ldr	r1, [sp, #20]
 80168b0:	2908      	cmp	r1, #8
 80168b2:	bfdd      	ittte	le
 80168b4:	9907      	ldrle	r1, [sp, #28]
 80168b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80168ba:	9307      	strle	r3, [sp, #28]
 80168bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80168c0:	9b05      	ldr	r3, [sp, #20]
 80168c2:	3001      	adds	r0, #1
 80168c4:	3301      	adds	r3, #1
 80168c6:	9305      	str	r3, [sp, #20]
 80168c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80168ca:	e7bf      	b.n	801684c <_strtod_l+0x144>
 80168cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ce:	191a      	adds	r2, r3, r4
 80168d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80168d2:	9a05      	ldr	r2, [sp, #20]
 80168d4:	5d1b      	ldrb	r3, [r3, r4]
 80168d6:	2a00      	cmp	r2, #0
 80168d8:	d037      	beq.n	801694a <_strtod_l+0x242>
 80168da:	9c05      	ldr	r4, [sp, #20]
 80168dc:	4602      	mov	r2, r0
 80168de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80168e2:	2909      	cmp	r1, #9
 80168e4:	d913      	bls.n	801690e <_strtod_l+0x206>
 80168e6:	2101      	movs	r1, #1
 80168e8:	9104      	str	r1, [sp, #16]
 80168ea:	e7c2      	b.n	8016872 <_strtod_l+0x16a>
 80168ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ee:	1c5a      	adds	r2, r3, #1
 80168f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80168f2:	785b      	ldrb	r3, [r3, #1]
 80168f4:	3001      	adds	r0, #1
 80168f6:	2b30      	cmp	r3, #48	; 0x30
 80168f8:	d0f8      	beq.n	80168ec <_strtod_l+0x1e4>
 80168fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80168fe:	2a08      	cmp	r2, #8
 8016900:	f200 84e4 	bhi.w	80172cc <_strtod_l+0xbc4>
 8016904:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016906:	9208      	str	r2, [sp, #32]
 8016908:	4602      	mov	r2, r0
 801690a:	2000      	movs	r0, #0
 801690c:	4604      	mov	r4, r0
 801690e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016912:	f100 0101 	add.w	r1, r0, #1
 8016916:	d012      	beq.n	801693e <_strtod_l+0x236>
 8016918:	440a      	add	r2, r1
 801691a:	eb00 0c04 	add.w	ip, r0, r4
 801691e:	4621      	mov	r1, r4
 8016920:	270a      	movs	r7, #10
 8016922:	458c      	cmp	ip, r1
 8016924:	d113      	bne.n	801694e <_strtod_l+0x246>
 8016926:	1821      	adds	r1, r4, r0
 8016928:	2908      	cmp	r1, #8
 801692a:	f104 0401 	add.w	r4, r4, #1
 801692e:	4404      	add	r4, r0
 8016930:	dc19      	bgt.n	8016966 <_strtod_l+0x25e>
 8016932:	9b07      	ldr	r3, [sp, #28]
 8016934:	210a      	movs	r1, #10
 8016936:	fb01 e303 	mla	r3, r1, r3, lr
 801693a:	9307      	str	r3, [sp, #28]
 801693c:	2100      	movs	r1, #0
 801693e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016940:	1c58      	adds	r0, r3, #1
 8016942:	901b      	str	r0, [sp, #108]	; 0x6c
 8016944:	785b      	ldrb	r3, [r3, #1]
 8016946:	4608      	mov	r0, r1
 8016948:	e7c9      	b.n	80168de <_strtod_l+0x1d6>
 801694a:	9805      	ldr	r0, [sp, #20]
 801694c:	e7d3      	b.n	80168f6 <_strtod_l+0x1ee>
 801694e:	2908      	cmp	r1, #8
 8016950:	f101 0101 	add.w	r1, r1, #1
 8016954:	dc03      	bgt.n	801695e <_strtod_l+0x256>
 8016956:	9b07      	ldr	r3, [sp, #28]
 8016958:	437b      	muls	r3, r7
 801695a:	9307      	str	r3, [sp, #28]
 801695c:	e7e1      	b.n	8016922 <_strtod_l+0x21a>
 801695e:	2910      	cmp	r1, #16
 8016960:	bfd8      	it	le
 8016962:	437d      	mulle	r5, r7
 8016964:	e7dd      	b.n	8016922 <_strtod_l+0x21a>
 8016966:	2c10      	cmp	r4, #16
 8016968:	bfdc      	itt	le
 801696a:	210a      	movle	r1, #10
 801696c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016970:	e7e4      	b.n	801693c <_strtod_l+0x234>
 8016972:	2301      	movs	r3, #1
 8016974:	9304      	str	r3, [sp, #16]
 8016976:	e781      	b.n	801687c <_strtod_l+0x174>
 8016978:	f04f 0c01 	mov.w	ip, #1
 801697c:	1cb3      	adds	r3, r6, #2
 801697e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016980:	78b3      	ldrb	r3, [r6, #2]
 8016982:	e78a      	b.n	801689a <_strtod_l+0x192>
 8016984:	f04f 0c00 	mov.w	ip, #0
 8016988:	e7f8      	b.n	801697c <_strtod_l+0x274>
 801698a:	bf00      	nop
 801698c:	0801a608 	.word	0x0801a608
 8016990:	7ff00000 	.word	0x7ff00000
 8016994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016996:	1c5f      	adds	r7, r3, #1
 8016998:	971b      	str	r7, [sp, #108]	; 0x6c
 801699a:	785b      	ldrb	r3, [r3, #1]
 801699c:	2b30      	cmp	r3, #48	; 0x30
 801699e:	d0f9      	beq.n	8016994 <_strtod_l+0x28c>
 80169a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80169a4:	2f08      	cmp	r7, #8
 80169a6:	f63f af7d 	bhi.w	80168a4 <_strtod_l+0x19c>
 80169aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80169ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169b0:	930a      	str	r3, [sp, #40]	; 0x28
 80169b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169b4:	1c5f      	adds	r7, r3, #1
 80169b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80169b8:	785b      	ldrb	r3, [r3, #1]
 80169ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80169be:	f1b8 0f09 	cmp.w	r8, #9
 80169c2:	d937      	bls.n	8016a34 <_strtod_l+0x32c>
 80169c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80169c6:	1a7f      	subs	r7, r7, r1
 80169c8:	2f08      	cmp	r7, #8
 80169ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80169ce:	dc37      	bgt.n	8016a40 <_strtod_l+0x338>
 80169d0:	45be      	cmp	lr, r7
 80169d2:	bfa8      	it	ge
 80169d4:	46be      	movge	lr, r7
 80169d6:	f1bc 0f00 	cmp.w	ip, #0
 80169da:	d001      	beq.n	80169e0 <_strtod_l+0x2d8>
 80169dc:	f1ce 0e00 	rsb	lr, lr, #0
 80169e0:	2c00      	cmp	r4, #0
 80169e2:	d151      	bne.n	8016a88 <_strtod_l+0x380>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	f47f aece 	bne.w	8016786 <_strtod_l+0x7e>
 80169ea:	9a06      	ldr	r2, [sp, #24]
 80169ec:	2a00      	cmp	r2, #0
 80169ee:	f47f aeca 	bne.w	8016786 <_strtod_l+0x7e>
 80169f2:	9a04      	ldr	r2, [sp, #16]
 80169f4:	2a00      	cmp	r2, #0
 80169f6:	f47f aee4 	bne.w	80167c2 <_strtod_l+0xba>
 80169fa:	2b4e      	cmp	r3, #78	; 0x4e
 80169fc:	d027      	beq.n	8016a4e <_strtod_l+0x346>
 80169fe:	dc21      	bgt.n	8016a44 <_strtod_l+0x33c>
 8016a00:	2b49      	cmp	r3, #73	; 0x49
 8016a02:	f47f aede 	bne.w	80167c2 <_strtod_l+0xba>
 8016a06:	49a0      	ldr	r1, [pc, #640]	; (8016c88 <_strtod_l+0x580>)
 8016a08:	a81b      	add	r0, sp, #108	; 0x6c
 8016a0a:	f001 fdf7 	bl	80185fc <__match>
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f43f aed7 	beq.w	80167c2 <_strtod_l+0xba>
 8016a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a16:	499d      	ldr	r1, [pc, #628]	; (8016c8c <_strtod_l+0x584>)
 8016a18:	3b01      	subs	r3, #1
 8016a1a:	a81b      	add	r0, sp, #108	; 0x6c
 8016a1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a1e:	f001 fded 	bl	80185fc <__match>
 8016a22:	b910      	cbnz	r0, 8016a2a <_strtod_l+0x322>
 8016a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a26:	3301      	adds	r3, #1
 8016a28:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016ca0 <_strtod_l+0x598>
 8016a2e:	f04f 0a00 	mov.w	sl, #0
 8016a32:	e6a8      	b.n	8016786 <_strtod_l+0x7e>
 8016a34:	210a      	movs	r1, #10
 8016a36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016a3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016a3e:	e7b8      	b.n	80169b2 <_strtod_l+0x2aa>
 8016a40:	46be      	mov	lr, r7
 8016a42:	e7c8      	b.n	80169d6 <_strtod_l+0x2ce>
 8016a44:	2b69      	cmp	r3, #105	; 0x69
 8016a46:	d0de      	beq.n	8016a06 <_strtod_l+0x2fe>
 8016a48:	2b6e      	cmp	r3, #110	; 0x6e
 8016a4a:	f47f aeba 	bne.w	80167c2 <_strtod_l+0xba>
 8016a4e:	4990      	ldr	r1, [pc, #576]	; (8016c90 <_strtod_l+0x588>)
 8016a50:	a81b      	add	r0, sp, #108	; 0x6c
 8016a52:	f001 fdd3 	bl	80185fc <__match>
 8016a56:	2800      	cmp	r0, #0
 8016a58:	f43f aeb3 	beq.w	80167c2 <_strtod_l+0xba>
 8016a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	2b28      	cmp	r3, #40	; 0x28
 8016a62:	d10e      	bne.n	8016a82 <_strtod_l+0x37a>
 8016a64:	aa1e      	add	r2, sp, #120	; 0x78
 8016a66:	498b      	ldr	r1, [pc, #556]	; (8016c94 <_strtod_l+0x58c>)
 8016a68:	a81b      	add	r0, sp, #108	; 0x6c
 8016a6a:	f001 fddb 	bl	8018624 <__hexnan>
 8016a6e:	2805      	cmp	r0, #5
 8016a70:	d107      	bne.n	8016a82 <_strtod_l+0x37a>
 8016a72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016a74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016a78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016a7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016a80:	e681      	b.n	8016786 <_strtod_l+0x7e>
 8016a82:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016ca8 <_strtod_l+0x5a0>
 8016a86:	e7d2      	b.n	8016a2e <_strtod_l+0x326>
 8016a88:	ebae 0302 	sub.w	r3, lr, r2
 8016a8c:	9306      	str	r3, [sp, #24]
 8016a8e:	9b05      	ldr	r3, [sp, #20]
 8016a90:	9807      	ldr	r0, [sp, #28]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	bf08      	it	eq
 8016a96:	4623      	moveq	r3, r4
 8016a98:	2c10      	cmp	r4, #16
 8016a9a:	9305      	str	r3, [sp, #20]
 8016a9c:	46a0      	mov	r8, r4
 8016a9e:	bfa8      	it	ge
 8016aa0:	f04f 0810 	movge.w	r8, #16
 8016aa4:	f7e9 fd46 	bl	8000534 <__aeabi_ui2d>
 8016aa8:	2c09      	cmp	r4, #9
 8016aaa:	4682      	mov	sl, r0
 8016aac:	468b      	mov	fp, r1
 8016aae:	dc13      	bgt.n	8016ad8 <_strtod_l+0x3d0>
 8016ab0:	9b06      	ldr	r3, [sp, #24]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	f43f ae67 	beq.w	8016786 <_strtod_l+0x7e>
 8016ab8:	9b06      	ldr	r3, [sp, #24]
 8016aba:	dd7a      	ble.n	8016bb2 <_strtod_l+0x4aa>
 8016abc:	2b16      	cmp	r3, #22
 8016abe:	dc61      	bgt.n	8016b84 <_strtod_l+0x47c>
 8016ac0:	4a75      	ldr	r2, [pc, #468]	; (8016c98 <_strtod_l+0x590>)
 8016ac2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016ac6:	e9de 0100 	ldrd	r0, r1, [lr]
 8016aca:	4652      	mov	r2, sl
 8016acc:	465b      	mov	r3, fp
 8016ace:	f7e9 fdab 	bl	8000628 <__aeabi_dmul>
 8016ad2:	4682      	mov	sl, r0
 8016ad4:	468b      	mov	fp, r1
 8016ad6:	e656      	b.n	8016786 <_strtod_l+0x7e>
 8016ad8:	4b6f      	ldr	r3, [pc, #444]	; (8016c98 <_strtod_l+0x590>)
 8016ada:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016ade:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ae2:	f7e9 fda1 	bl	8000628 <__aeabi_dmul>
 8016ae6:	4606      	mov	r6, r0
 8016ae8:	4628      	mov	r0, r5
 8016aea:	460f      	mov	r7, r1
 8016aec:	f7e9 fd22 	bl	8000534 <__aeabi_ui2d>
 8016af0:	4602      	mov	r2, r0
 8016af2:	460b      	mov	r3, r1
 8016af4:	4630      	mov	r0, r6
 8016af6:	4639      	mov	r1, r7
 8016af8:	f7e9 fbe0 	bl	80002bc <__adddf3>
 8016afc:	2c0f      	cmp	r4, #15
 8016afe:	4682      	mov	sl, r0
 8016b00:	468b      	mov	fp, r1
 8016b02:	ddd5      	ble.n	8016ab0 <_strtod_l+0x3a8>
 8016b04:	9b06      	ldr	r3, [sp, #24]
 8016b06:	eba4 0808 	sub.w	r8, r4, r8
 8016b0a:	4498      	add	r8, r3
 8016b0c:	f1b8 0f00 	cmp.w	r8, #0
 8016b10:	f340 8096 	ble.w	8016c40 <_strtod_l+0x538>
 8016b14:	f018 030f 	ands.w	r3, r8, #15
 8016b18:	d00a      	beq.n	8016b30 <_strtod_l+0x428>
 8016b1a:	495f      	ldr	r1, [pc, #380]	; (8016c98 <_strtod_l+0x590>)
 8016b1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016b20:	4652      	mov	r2, sl
 8016b22:	465b      	mov	r3, fp
 8016b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b28:	f7e9 fd7e 	bl	8000628 <__aeabi_dmul>
 8016b2c:	4682      	mov	sl, r0
 8016b2e:	468b      	mov	fp, r1
 8016b30:	f038 080f 	bics.w	r8, r8, #15
 8016b34:	d073      	beq.n	8016c1e <_strtod_l+0x516>
 8016b36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016b3a:	dd47      	ble.n	8016bcc <_strtod_l+0x4c4>
 8016b3c:	2400      	movs	r4, #0
 8016b3e:	46a0      	mov	r8, r4
 8016b40:	9407      	str	r4, [sp, #28]
 8016b42:	9405      	str	r4, [sp, #20]
 8016b44:	2322      	movs	r3, #34	; 0x22
 8016b46:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016ca0 <_strtod_l+0x598>
 8016b4a:	f8c9 3000 	str.w	r3, [r9]
 8016b4e:	f04f 0a00 	mov.w	sl, #0
 8016b52:	9b07      	ldr	r3, [sp, #28]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	f43f ae16 	beq.w	8016786 <_strtod_l+0x7e>
 8016b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b5c:	4648      	mov	r0, r9
 8016b5e:	f001 fe61 	bl	8018824 <_Bfree>
 8016b62:	9905      	ldr	r1, [sp, #20]
 8016b64:	4648      	mov	r0, r9
 8016b66:	f001 fe5d 	bl	8018824 <_Bfree>
 8016b6a:	4641      	mov	r1, r8
 8016b6c:	4648      	mov	r0, r9
 8016b6e:	f001 fe59 	bl	8018824 <_Bfree>
 8016b72:	9907      	ldr	r1, [sp, #28]
 8016b74:	4648      	mov	r0, r9
 8016b76:	f001 fe55 	bl	8018824 <_Bfree>
 8016b7a:	4621      	mov	r1, r4
 8016b7c:	4648      	mov	r0, r9
 8016b7e:	f001 fe51 	bl	8018824 <_Bfree>
 8016b82:	e600      	b.n	8016786 <_strtod_l+0x7e>
 8016b84:	9a06      	ldr	r2, [sp, #24]
 8016b86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016b8a:	4293      	cmp	r3, r2
 8016b8c:	dbba      	blt.n	8016b04 <_strtod_l+0x3fc>
 8016b8e:	4d42      	ldr	r5, [pc, #264]	; (8016c98 <_strtod_l+0x590>)
 8016b90:	f1c4 040f 	rsb	r4, r4, #15
 8016b94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016b98:	4652      	mov	r2, sl
 8016b9a:	465b      	mov	r3, fp
 8016b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ba0:	f7e9 fd42 	bl	8000628 <__aeabi_dmul>
 8016ba4:	9b06      	ldr	r3, [sp, #24]
 8016ba6:	1b1c      	subs	r4, r3, r4
 8016ba8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016bac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016bb0:	e78d      	b.n	8016ace <_strtod_l+0x3c6>
 8016bb2:	f113 0f16 	cmn.w	r3, #22
 8016bb6:	dba5      	blt.n	8016b04 <_strtod_l+0x3fc>
 8016bb8:	4a37      	ldr	r2, [pc, #220]	; (8016c98 <_strtod_l+0x590>)
 8016bba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016bbe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016bc2:	4650      	mov	r0, sl
 8016bc4:	4659      	mov	r1, fp
 8016bc6:	f7e9 fe59 	bl	800087c <__aeabi_ddiv>
 8016bca:	e782      	b.n	8016ad2 <_strtod_l+0x3ca>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	4e33      	ldr	r6, [pc, #204]	; (8016c9c <_strtod_l+0x594>)
 8016bd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016bd4:	4650      	mov	r0, sl
 8016bd6:	4659      	mov	r1, fp
 8016bd8:	461d      	mov	r5, r3
 8016bda:	f1b8 0f01 	cmp.w	r8, #1
 8016bde:	dc21      	bgt.n	8016c24 <_strtod_l+0x51c>
 8016be0:	b10b      	cbz	r3, 8016be6 <_strtod_l+0x4de>
 8016be2:	4682      	mov	sl, r0
 8016be4:	468b      	mov	fp, r1
 8016be6:	4b2d      	ldr	r3, [pc, #180]	; (8016c9c <_strtod_l+0x594>)
 8016be8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016bec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016bf0:	4652      	mov	r2, sl
 8016bf2:	465b      	mov	r3, fp
 8016bf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016bf8:	f7e9 fd16 	bl	8000628 <__aeabi_dmul>
 8016bfc:	4b28      	ldr	r3, [pc, #160]	; (8016ca0 <_strtod_l+0x598>)
 8016bfe:	460a      	mov	r2, r1
 8016c00:	400b      	ands	r3, r1
 8016c02:	4928      	ldr	r1, [pc, #160]	; (8016ca4 <_strtod_l+0x59c>)
 8016c04:	428b      	cmp	r3, r1
 8016c06:	4682      	mov	sl, r0
 8016c08:	d898      	bhi.n	8016b3c <_strtod_l+0x434>
 8016c0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016c0e:	428b      	cmp	r3, r1
 8016c10:	bf86      	itte	hi
 8016c12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016cac <_strtod_l+0x5a4>
 8016c16:	f04f 3aff 	movhi.w	sl, #4294967295
 8016c1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016c1e:	2300      	movs	r3, #0
 8016c20:	9304      	str	r3, [sp, #16]
 8016c22:	e077      	b.n	8016d14 <_strtod_l+0x60c>
 8016c24:	f018 0f01 	tst.w	r8, #1
 8016c28:	d006      	beq.n	8016c38 <_strtod_l+0x530>
 8016c2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c32:	f7e9 fcf9 	bl	8000628 <__aeabi_dmul>
 8016c36:	2301      	movs	r3, #1
 8016c38:	3501      	adds	r5, #1
 8016c3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016c3e:	e7cc      	b.n	8016bda <_strtod_l+0x4d2>
 8016c40:	d0ed      	beq.n	8016c1e <_strtod_l+0x516>
 8016c42:	f1c8 0800 	rsb	r8, r8, #0
 8016c46:	f018 020f 	ands.w	r2, r8, #15
 8016c4a:	d00a      	beq.n	8016c62 <_strtod_l+0x55a>
 8016c4c:	4b12      	ldr	r3, [pc, #72]	; (8016c98 <_strtod_l+0x590>)
 8016c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c52:	4650      	mov	r0, sl
 8016c54:	4659      	mov	r1, fp
 8016c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5a:	f7e9 fe0f 	bl	800087c <__aeabi_ddiv>
 8016c5e:	4682      	mov	sl, r0
 8016c60:	468b      	mov	fp, r1
 8016c62:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016c66:	d0da      	beq.n	8016c1e <_strtod_l+0x516>
 8016c68:	f1b8 0f1f 	cmp.w	r8, #31
 8016c6c:	dd20      	ble.n	8016cb0 <_strtod_l+0x5a8>
 8016c6e:	2400      	movs	r4, #0
 8016c70:	46a0      	mov	r8, r4
 8016c72:	9407      	str	r4, [sp, #28]
 8016c74:	9405      	str	r4, [sp, #20]
 8016c76:	2322      	movs	r3, #34	; 0x22
 8016c78:	f04f 0a00 	mov.w	sl, #0
 8016c7c:	f04f 0b00 	mov.w	fp, #0
 8016c80:	f8c9 3000 	str.w	r3, [r9]
 8016c84:	e765      	b.n	8016b52 <_strtod_l+0x44a>
 8016c86:	bf00      	nop
 8016c88:	0801a5d5 	.word	0x0801a5d5
 8016c8c:	0801a65b 	.word	0x0801a65b
 8016c90:	0801a5dd 	.word	0x0801a5dd
 8016c94:	0801a61c 	.word	0x0801a61c
 8016c98:	0801a700 	.word	0x0801a700
 8016c9c:	0801a6d8 	.word	0x0801a6d8
 8016ca0:	7ff00000 	.word	0x7ff00000
 8016ca4:	7ca00000 	.word	0x7ca00000
 8016ca8:	fff80000 	.word	0xfff80000
 8016cac:	7fefffff 	.word	0x7fefffff
 8016cb0:	f018 0310 	ands.w	r3, r8, #16
 8016cb4:	bf18      	it	ne
 8016cb6:	236a      	movne	r3, #106	; 0x6a
 8016cb8:	4da0      	ldr	r5, [pc, #640]	; (8016f3c <_strtod_l+0x834>)
 8016cba:	9304      	str	r3, [sp, #16]
 8016cbc:	4650      	mov	r0, sl
 8016cbe:	4659      	mov	r1, fp
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	f1b8 0f00 	cmp.w	r8, #0
 8016cc6:	f300 810a 	bgt.w	8016ede <_strtod_l+0x7d6>
 8016cca:	b10b      	cbz	r3, 8016cd0 <_strtod_l+0x5c8>
 8016ccc:	4682      	mov	sl, r0
 8016cce:	468b      	mov	fp, r1
 8016cd0:	9b04      	ldr	r3, [sp, #16]
 8016cd2:	b1bb      	cbz	r3, 8016d04 <_strtod_l+0x5fc>
 8016cd4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016cd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	4659      	mov	r1, fp
 8016ce0:	dd10      	ble.n	8016d04 <_strtod_l+0x5fc>
 8016ce2:	2b1f      	cmp	r3, #31
 8016ce4:	f340 8107 	ble.w	8016ef6 <_strtod_l+0x7ee>
 8016ce8:	2b34      	cmp	r3, #52	; 0x34
 8016cea:	bfde      	ittt	le
 8016cec:	3b20      	suble	r3, #32
 8016cee:	f04f 32ff 	movle.w	r2, #4294967295
 8016cf2:	fa02 f303 	lslle.w	r3, r2, r3
 8016cf6:	f04f 0a00 	mov.w	sl, #0
 8016cfa:	bfcc      	ite	gt
 8016cfc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016d00:	ea03 0b01 	andle.w	fp, r3, r1
 8016d04:	2200      	movs	r2, #0
 8016d06:	2300      	movs	r3, #0
 8016d08:	4650      	mov	r0, sl
 8016d0a:	4659      	mov	r1, fp
 8016d0c:	f7e9 fef4 	bl	8000af8 <__aeabi_dcmpeq>
 8016d10:	2800      	cmp	r0, #0
 8016d12:	d1ac      	bne.n	8016c6e <_strtod_l+0x566>
 8016d14:	9b07      	ldr	r3, [sp, #28]
 8016d16:	9300      	str	r3, [sp, #0]
 8016d18:	9a05      	ldr	r2, [sp, #20]
 8016d1a:	9908      	ldr	r1, [sp, #32]
 8016d1c:	4623      	mov	r3, r4
 8016d1e:	4648      	mov	r0, r9
 8016d20:	f001 fdd2 	bl	80188c8 <__s2b>
 8016d24:	9007      	str	r0, [sp, #28]
 8016d26:	2800      	cmp	r0, #0
 8016d28:	f43f af08 	beq.w	8016b3c <_strtod_l+0x434>
 8016d2c:	9a06      	ldr	r2, [sp, #24]
 8016d2e:	9b06      	ldr	r3, [sp, #24]
 8016d30:	2a00      	cmp	r2, #0
 8016d32:	f1c3 0300 	rsb	r3, r3, #0
 8016d36:	bfa8      	it	ge
 8016d38:	2300      	movge	r3, #0
 8016d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d3c:	2400      	movs	r4, #0
 8016d3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016d42:	9316      	str	r3, [sp, #88]	; 0x58
 8016d44:	46a0      	mov	r8, r4
 8016d46:	9b07      	ldr	r3, [sp, #28]
 8016d48:	4648      	mov	r0, r9
 8016d4a:	6859      	ldr	r1, [r3, #4]
 8016d4c:	f001 fd36 	bl	80187bc <_Balloc>
 8016d50:	9005      	str	r0, [sp, #20]
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f43f aef6 	beq.w	8016b44 <_strtod_l+0x43c>
 8016d58:	9b07      	ldr	r3, [sp, #28]
 8016d5a:	691a      	ldr	r2, [r3, #16]
 8016d5c:	3202      	adds	r2, #2
 8016d5e:	f103 010c 	add.w	r1, r3, #12
 8016d62:	0092      	lsls	r2, r2, #2
 8016d64:	300c      	adds	r0, #12
 8016d66:	f7fe fdd3 	bl	8015910 <memcpy>
 8016d6a:	aa1e      	add	r2, sp, #120	; 0x78
 8016d6c:	a91d      	add	r1, sp, #116	; 0x74
 8016d6e:	ec4b ab10 	vmov	d0, sl, fp
 8016d72:	4648      	mov	r0, r9
 8016d74:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016d78:	f002 f862 	bl	8018e40 <__d2b>
 8016d7c:	901c      	str	r0, [sp, #112]	; 0x70
 8016d7e:	2800      	cmp	r0, #0
 8016d80:	f43f aee0 	beq.w	8016b44 <_strtod_l+0x43c>
 8016d84:	2101      	movs	r1, #1
 8016d86:	4648      	mov	r0, r9
 8016d88:	f001 fe2a 	bl	80189e0 <__i2b>
 8016d8c:	4680      	mov	r8, r0
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	f43f aed8 	beq.w	8016b44 <_strtod_l+0x43c>
 8016d94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016d96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d98:	2e00      	cmp	r6, #0
 8016d9a:	bfab      	itete	ge
 8016d9c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016d9e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016da0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016da2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016da4:	bfac      	ite	ge
 8016da6:	18f7      	addge	r7, r6, r3
 8016da8:	1b9d      	sublt	r5, r3, r6
 8016daa:	9b04      	ldr	r3, [sp, #16]
 8016dac:	1af6      	subs	r6, r6, r3
 8016dae:	4416      	add	r6, r2
 8016db0:	4b63      	ldr	r3, [pc, #396]	; (8016f40 <_strtod_l+0x838>)
 8016db2:	3e01      	subs	r6, #1
 8016db4:	429e      	cmp	r6, r3
 8016db6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016dba:	f280 80af 	bge.w	8016f1c <_strtod_l+0x814>
 8016dbe:	1b9b      	subs	r3, r3, r6
 8016dc0:	2b1f      	cmp	r3, #31
 8016dc2:	eba2 0203 	sub.w	r2, r2, r3
 8016dc6:	f04f 0101 	mov.w	r1, #1
 8016dca:	f300 809b 	bgt.w	8016f04 <_strtod_l+0x7fc>
 8016dce:	fa01 f303 	lsl.w	r3, r1, r3
 8016dd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8016dd8:	18be      	adds	r6, r7, r2
 8016dda:	9b04      	ldr	r3, [sp, #16]
 8016ddc:	42b7      	cmp	r7, r6
 8016dde:	4415      	add	r5, r2
 8016de0:	441d      	add	r5, r3
 8016de2:	463b      	mov	r3, r7
 8016de4:	bfa8      	it	ge
 8016de6:	4633      	movge	r3, r6
 8016de8:	42ab      	cmp	r3, r5
 8016dea:	bfa8      	it	ge
 8016dec:	462b      	movge	r3, r5
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	bfc2      	ittt	gt
 8016df2:	1af6      	subgt	r6, r6, r3
 8016df4:	1aed      	subgt	r5, r5, r3
 8016df6:	1aff      	subgt	r7, r7, r3
 8016df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dfa:	b1bb      	cbz	r3, 8016e2c <_strtod_l+0x724>
 8016dfc:	4641      	mov	r1, r8
 8016dfe:	461a      	mov	r2, r3
 8016e00:	4648      	mov	r0, r9
 8016e02:	f001 fe8d 	bl	8018b20 <__pow5mult>
 8016e06:	4680      	mov	r8, r0
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	f43f ae9b 	beq.w	8016b44 <_strtod_l+0x43c>
 8016e0e:	4601      	mov	r1, r0
 8016e10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e12:	4648      	mov	r0, r9
 8016e14:	f001 fded 	bl	80189f2 <__multiply>
 8016e18:	900c      	str	r0, [sp, #48]	; 0x30
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	f43f ae92 	beq.w	8016b44 <_strtod_l+0x43c>
 8016e20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e22:	4648      	mov	r0, r9
 8016e24:	f001 fcfe 	bl	8018824 <_Bfree>
 8016e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e2a:	931c      	str	r3, [sp, #112]	; 0x70
 8016e2c:	2e00      	cmp	r6, #0
 8016e2e:	dc7a      	bgt.n	8016f26 <_strtod_l+0x81e>
 8016e30:	9b06      	ldr	r3, [sp, #24]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	dd08      	ble.n	8016e48 <_strtod_l+0x740>
 8016e36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016e38:	9905      	ldr	r1, [sp, #20]
 8016e3a:	4648      	mov	r0, r9
 8016e3c:	f001 fe70 	bl	8018b20 <__pow5mult>
 8016e40:	9005      	str	r0, [sp, #20]
 8016e42:	2800      	cmp	r0, #0
 8016e44:	f43f ae7e 	beq.w	8016b44 <_strtod_l+0x43c>
 8016e48:	2d00      	cmp	r5, #0
 8016e4a:	dd08      	ble.n	8016e5e <_strtod_l+0x756>
 8016e4c:	462a      	mov	r2, r5
 8016e4e:	9905      	ldr	r1, [sp, #20]
 8016e50:	4648      	mov	r0, r9
 8016e52:	f001 feb3 	bl	8018bbc <__lshift>
 8016e56:	9005      	str	r0, [sp, #20]
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	f43f ae73 	beq.w	8016b44 <_strtod_l+0x43c>
 8016e5e:	2f00      	cmp	r7, #0
 8016e60:	dd08      	ble.n	8016e74 <_strtod_l+0x76c>
 8016e62:	4641      	mov	r1, r8
 8016e64:	463a      	mov	r2, r7
 8016e66:	4648      	mov	r0, r9
 8016e68:	f001 fea8 	bl	8018bbc <__lshift>
 8016e6c:	4680      	mov	r8, r0
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	f43f ae68 	beq.w	8016b44 <_strtod_l+0x43c>
 8016e74:	9a05      	ldr	r2, [sp, #20]
 8016e76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e78:	4648      	mov	r0, r9
 8016e7a:	f001 ff0d 	bl	8018c98 <__mdiff>
 8016e7e:	4604      	mov	r4, r0
 8016e80:	2800      	cmp	r0, #0
 8016e82:	f43f ae5f 	beq.w	8016b44 <_strtod_l+0x43c>
 8016e86:	68c3      	ldr	r3, [r0, #12]
 8016e88:	930c      	str	r3, [sp, #48]	; 0x30
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	60c3      	str	r3, [r0, #12]
 8016e8e:	4641      	mov	r1, r8
 8016e90:	f001 fee8 	bl	8018c64 <__mcmp>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	da55      	bge.n	8016f44 <_strtod_l+0x83c>
 8016e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e9a:	b9e3      	cbnz	r3, 8016ed6 <_strtod_l+0x7ce>
 8016e9c:	f1ba 0f00 	cmp.w	sl, #0
 8016ea0:	d119      	bne.n	8016ed6 <_strtod_l+0x7ce>
 8016ea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016ea6:	b9b3      	cbnz	r3, 8016ed6 <_strtod_l+0x7ce>
 8016ea8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016eac:	0d1b      	lsrs	r3, r3, #20
 8016eae:	051b      	lsls	r3, r3, #20
 8016eb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016eb4:	d90f      	bls.n	8016ed6 <_strtod_l+0x7ce>
 8016eb6:	6963      	ldr	r3, [r4, #20]
 8016eb8:	b913      	cbnz	r3, 8016ec0 <_strtod_l+0x7b8>
 8016eba:	6923      	ldr	r3, [r4, #16]
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	dd0a      	ble.n	8016ed6 <_strtod_l+0x7ce>
 8016ec0:	4621      	mov	r1, r4
 8016ec2:	2201      	movs	r2, #1
 8016ec4:	4648      	mov	r0, r9
 8016ec6:	f001 fe79 	bl	8018bbc <__lshift>
 8016eca:	4641      	mov	r1, r8
 8016ecc:	4604      	mov	r4, r0
 8016ece:	f001 fec9 	bl	8018c64 <__mcmp>
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	dc67      	bgt.n	8016fa6 <_strtod_l+0x89e>
 8016ed6:	9b04      	ldr	r3, [sp, #16]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d171      	bne.n	8016fc0 <_strtod_l+0x8b8>
 8016edc:	e63d      	b.n	8016b5a <_strtod_l+0x452>
 8016ede:	f018 0f01 	tst.w	r8, #1
 8016ee2:	d004      	beq.n	8016eee <_strtod_l+0x7e6>
 8016ee4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ee8:	f7e9 fb9e 	bl	8000628 <__aeabi_dmul>
 8016eec:	2301      	movs	r3, #1
 8016eee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ef2:	3508      	adds	r5, #8
 8016ef4:	e6e5      	b.n	8016cc2 <_strtod_l+0x5ba>
 8016ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8016efa:	fa02 f303 	lsl.w	r3, r2, r3
 8016efe:	ea03 0a0a 	and.w	sl, r3, sl
 8016f02:	e6ff      	b.n	8016d04 <_strtod_l+0x5fc>
 8016f04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016f08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016f0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016f10:	36e2      	adds	r6, #226	; 0xe2
 8016f12:	fa01 f306 	lsl.w	r3, r1, r6
 8016f16:	930a      	str	r3, [sp, #40]	; 0x28
 8016f18:	910f      	str	r1, [sp, #60]	; 0x3c
 8016f1a:	e75d      	b.n	8016dd8 <_strtod_l+0x6d0>
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8016f20:	2301      	movs	r3, #1
 8016f22:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f24:	e758      	b.n	8016dd8 <_strtod_l+0x6d0>
 8016f26:	4632      	mov	r2, r6
 8016f28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f2a:	4648      	mov	r0, r9
 8016f2c:	f001 fe46 	bl	8018bbc <__lshift>
 8016f30:	901c      	str	r0, [sp, #112]	; 0x70
 8016f32:	2800      	cmp	r0, #0
 8016f34:	f47f af7c 	bne.w	8016e30 <_strtod_l+0x728>
 8016f38:	e604      	b.n	8016b44 <_strtod_l+0x43c>
 8016f3a:	bf00      	nop
 8016f3c:	0801a630 	.word	0x0801a630
 8016f40:	fffffc02 	.word	0xfffffc02
 8016f44:	465d      	mov	r5, fp
 8016f46:	f040 8086 	bne.w	8017056 <_strtod_l+0x94e>
 8016f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f50:	b32a      	cbz	r2, 8016f9e <_strtod_l+0x896>
 8016f52:	4aaf      	ldr	r2, [pc, #700]	; (8017210 <_strtod_l+0xb08>)
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d153      	bne.n	8017000 <_strtod_l+0x8f8>
 8016f58:	9b04      	ldr	r3, [sp, #16]
 8016f5a:	4650      	mov	r0, sl
 8016f5c:	b1d3      	cbz	r3, 8016f94 <_strtod_l+0x88c>
 8016f5e:	4aad      	ldr	r2, [pc, #692]	; (8017214 <_strtod_l+0xb0c>)
 8016f60:	402a      	ands	r2, r5
 8016f62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016f66:	f04f 31ff 	mov.w	r1, #4294967295
 8016f6a:	d816      	bhi.n	8016f9a <_strtod_l+0x892>
 8016f6c:	0d12      	lsrs	r2, r2, #20
 8016f6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016f72:	fa01 f303 	lsl.w	r3, r1, r3
 8016f76:	4298      	cmp	r0, r3
 8016f78:	d142      	bne.n	8017000 <_strtod_l+0x8f8>
 8016f7a:	4ba7      	ldr	r3, [pc, #668]	; (8017218 <_strtod_l+0xb10>)
 8016f7c:	429d      	cmp	r5, r3
 8016f7e:	d102      	bne.n	8016f86 <_strtod_l+0x87e>
 8016f80:	3001      	adds	r0, #1
 8016f82:	f43f addf 	beq.w	8016b44 <_strtod_l+0x43c>
 8016f86:	4ba3      	ldr	r3, [pc, #652]	; (8017214 <_strtod_l+0xb0c>)
 8016f88:	402b      	ands	r3, r5
 8016f8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016f8e:	f04f 0a00 	mov.w	sl, #0
 8016f92:	e7a0      	b.n	8016ed6 <_strtod_l+0x7ce>
 8016f94:	f04f 33ff 	mov.w	r3, #4294967295
 8016f98:	e7ed      	b.n	8016f76 <_strtod_l+0x86e>
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	e7eb      	b.n	8016f76 <_strtod_l+0x86e>
 8016f9e:	bb7b      	cbnz	r3, 8017000 <_strtod_l+0x8f8>
 8016fa0:	f1ba 0f00 	cmp.w	sl, #0
 8016fa4:	d12c      	bne.n	8017000 <_strtod_l+0x8f8>
 8016fa6:	9904      	ldr	r1, [sp, #16]
 8016fa8:	4a9a      	ldr	r2, [pc, #616]	; (8017214 <_strtod_l+0xb0c>)
 8016faa:	465b      	mov	r3, fp
 8016fac:	b1f1      	cbz	r1, 8016fec <_strtod_l+0x8e4>
 8016fae:	ea02 010b 	and.w	r1, r2, fp
 8016fb2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016fb6:	dc19      	bgt.n	8016fec <_strtod_l+0x8e4>
 8016fb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016fbc:	f77f ae5b 	ble.w	8016c76 <_strtod_l+0x56e>
 8016fc0:	4a96      	ldr	r2, [pc, #600]	; (801721c <_strtod_l+0xb14>)
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016fc8:	4650      	mov	r0, sl
 8016fca:	4659      	mov	r1, fp
 8016fcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016fd0:	f7e9 fb2a 	bl	8000628 <__aeabi_dmul>
 8016fd4:	4682      	mov	sl, r0
 8016fd6:	468b      	mov	fp, r1
 8016fd8:	2900      	cmp	r1, #0
 8016fda:	f47f adbe 	bne.w	8016b5a <_strtod_l+0x452>
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	f47f adbb 	bne.w	8016b5a <_strtod_l+0x452>
 8016fe4:	2322      	movs	r3, #34	; 0x22
 8016fe6:	f8c9 3000 	str.w	r3, [r9]
 8016fea:	e5b6      	b.n	8016b5a <_strtod_l+0x452>
 8016fec:	4013      	ands	r3, r2
 8016fee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016ff2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016ff6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016ffa:	f04f 3aff 	mov.w	sl, #4294967295
 8016ffe:	e76a      	b.n	8016ed6 <_strtod_l+0x7ce>
 8017000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017002:	b193      	cbz	r3, 801702a <_strtod_l+0x922>
 8017004:	422b      	tst	r3, r5
 8017006:	f43f af66 	beq.w	8016ed6 <_strtod_l+0x7ce>
 801700a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801700c:	9a04      	ldr	r2, [sp, #16]
 801700e:	4650      	mov	r0, sl
 8017010:	4659      	mov	r1, fp
 8017012:	b173      	cbz	r3, 8017032 <_strtod_l+0x92a>
 8017014:	f7ff fb5c 	bl	80166d0 <sulp>
 8017018:	4602      	mov	r2, r0
 801701a:	460b      	mov	r3, r1
 801701c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017020:	f7e9 f94c 	bl	80002bc <__adddf3>
 8017024:	4682      	mov	sl, r0
 8017026:	468b      	mov	fp, r1
 8017028:	e755      	b.n	8016ed6 <_strtod_l+0x7ce>
 801702a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801702c:	ea13 0f0a 	tst.w	r3, sl
 8017030:	e7e9      	b.n	8017006 <_strtod_l+0x8fe>
 8017032:	f7ff fb4d 	bl	80166d0 <sulp>
 8017036:	4602      	mov	r2, r0
 8017038:	460b      	mov	r3, r1
 801703a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801703e:	f7e9 f93b 	bl	80002b8 <__aeabi_dsub>
 8017042:	2200      	movs	r2, #0
 8017044:	2300      	movs	r3, #0
 8017046:	4682      	mov	sl, r0
 8017048:	468b      	mov	fp, r1
 801704a:	f7e9 fd55 	bl	8000af8 <__aeabi_dcmpeq>
 801704e:	2800      	cmp	r0, #0
 8017050:	f47f ae11 	bne.w	8016c76 <_strtod_l+0x56e>
 8017054:	e73f      	b.n	8016ed6 <_strtod_l+0x7ce>
 8017056:	4641      	mov	r1, r8
 8017058:	4620      	mov	r0, r4
 801705a:	f001 ff40 	bl	8018ede <__ratio>
 801705e:	ec57 6b10 	vmov	r6, r7, d0
 8017062:	2200      	movs	r2, #0
 8017064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017068:	ee10 0a10 	vmov	r0, s0
 801706c:	4639      	mov	r1, r7
 801706e:	f7e9 fd57 	bl	8000b20 <__aeabi_dcmple>
 8017072:	2800      	cmp	r0, #0
 8017074:	d077      	beq.n	8017166 <_strtod_l+0xa5e>
 8017076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017078:	2b00      	cmp	r3, #0
 801707a:	d04a      	beq.n	8017112 <_strtod_l+0xa0a>
 801707c:	4b68      	ldr	r3, [pc, #416]	; (8017220 <_strtod_l+0xb18>)
 801707e:	2200      	movs	r2, #0
 8017080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017084:	4f66      	ldr	r7, [pc, #408]	; (8017220 <_strtod_l+0xb18>)
 8017086:	2600      	movs	r6, #0
 8017088:	4b62      	ldr	r3, [pc, #392]	; (8017214 <_strtod_l+0xb0c>)
 801708a:	402b      	ands	r3, r5
 801708c:	930f      	str	r3, [sp, #60]	; 0x3c
 801708e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017090:	4b64      	ldr	r3, [pc, #400]	; (8017224 <_strtod_l+0xb1c>)
 8017092:	429a      	cmp	r2, r3
 8017094:	f040 80ce 	bne.w	8017234 <_strtod_l+0xb2c>
 8017098:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801709c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80170a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80170a4:	ec4b ab10 	vmov	d0, sl, fp
 80170a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80170ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80170b0:	f001 fe50 	bl	8018d54 <__ulp>
 80170b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80170b8:	ec53 2b10 	vmov	r2, r3, d0
 80170bc:	f7e9 fab4 	bl	8000628 <__aeabi_dmul>
 80170c0:	4652      	mov	r2, sl
 80170c2:	465b      	mov	r3, fp
 80170c4:	f7e9 f8fa 	bl	80002bc <__adddf3>
 80170c8:	460b      	mov	r3, r1
 80170ca:	4952      	ldr	r1, [pc, #328]	; (8017214 <_strtod_l+0xb0c>)
 80170cc:	4a56      	ldr	r2, [pc, #344]	; (8017228 <_strtod_l+0xb20>)
 80170ce:	4019      	ands	r1, r3
 80170d0:	4291      	cmp	r1, r2
 80170d2:	4682      	mov	sl, r0
 80170d4:	d95b      	bls.n	801718e <_strtod_l+0xa86>
 80170d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80170dc:	4293      	cmp	r3, r2
 80170de:	d103      	bne.n	80170e8 <_strtod_l+0x9e0>
 80170e0:	9b08      	ldr	r3, [sp, #32]
 80170e2:	3301      	adds	r3, #1
 80170e4:	f43f ad2e 	beq.w	8016b44 <_strtod_l+0x43c>
 80170e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017218 <_strtod_l+0xb10>
 80170ec:	f04f 3aff 	mov.w	sl, #4294967295
 80170f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170f2:	4648      	mov	r0, r9
 80170f4:	f001 fb96 	bl	8018824 <_Bfree>
 80170f8:	9905      	ldr	r1, [sp, #20]
 80170fa:	4648      	mov	r0, r9
 80170fc:	f001 fb92 	bl	8018824 <_Bfree>
 8017100:	4641      	mov	r1, r8
 8017102:	4648      	mov	r0, r9
 8017104:	f001 fb8e 	bl	8018824 <_Bfree>
 8017108:	4621      	mov	r1, r4
 801710a:	4648      	mov	r0, r9
 801710c:	f001 fb8a 	bl	8018824 <_Bfree>
 8017110:	e619      	b.n	8016d46 <_strtod_l+0x63e>
 8017112:	f1ba 0f00 	cmp.w	sl, #0
 8017116:	d11a      	bne.n	801714e <_strtod_l+0xa46>
 8017118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801711c:	b9eb      	cbnz	r3, 801715a <_strtod_l+0xa52>
 801711e:	2200      	movs	r2, #0
 8017120:	4b3f      	ldr	r3, [pc, #252]	; (8017220 <_strtod_l+0xb18>)
 8017122:	4630      	mov	r0, r6
 8017124:	4639      	mov	r1, r7
 8017126:	f7e9 fcf1 	bl	8000b0c <__aeabi_dcmplt>
 801712a:	b9c8      	cbnz	r0, 8017160 <_strtod_l+0xa58>
 801712c:	4630      	mov	r0, r6
 801712e:	4639      	mov	r1, r7
 8017130:	2200      	movs	r2, #0
 8017132:	4b3e      	ldr	r3, [pc, #248]	; (801722c <_strtod_l+0xb24>)
 8017134:	f7e9 fa78 	bl	8000628 <__aeabi_dmul>
 8017138:	4606      	mov	r6, r0
 801713a:	460f      	mov	r7, r1
 801713c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017140:	9618      	str	r6, [sp, #96]	; 0x60
 8017142:	9319      	str	r3, [sp, #100]	; 0x64
 8017144:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017148:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801714c:	e79c      	b.n	8017088 <_strtod_l+0x980>
 801714e:	f1ba 0f01 	cmp.w	sl, #1
 8017152:	d102      	bne.n	801715a <_strtod_l+0xa52>
 8017154:	2d00      	cmp	r5, #0
 8017156:	f43f ad8e 	beq.w	8016c76 <_strtod_l+0x56e>
 801715a:	2200      	movs	r2, #0
 801715c:	4b34      	ldr	r3, [pc, #208]	; (8017230 <_strtod_l+0xb28>)
 801715e:	e78f      	b.n	8017080 <_strtod_l+0x978>
 8017160:	2600      	movs	r6, #0
 8017162:	4f32      	ldr	r7, [pc, #200]	; (801722c <_strtod_l+0xb24>)
 8017164:	e7ea      	b.n	801713c <_strtod_l+0xa34>
 8017166:	4b31      	ldr	r3, [pc, #196]	; (801722c <_strtod_l+0xb24>)
 8017168:	4630      	mov	r0, r6
 801716a:	4639      	mov	r1, r7
 801716c:	2200      	movs	r2, #0
 801716e:	f7e9 fa5b 	bl	8000628 <__aeabi_dmul>
 8017172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017174:	4606      	mov	r6, r0
 8017176:	460f      	mov	r7, r1
 8017178:	b933      	cbnz	r3, 8017188 <_strtod_l+0xa80>
 801717a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801717e:	9010      	str	r0, [sp, #64]	; 0x40
 8017180:	9311      	str	r3, [sp, #68]	; 0x44
 8017182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017186:	e7df      	b.n	8017148 <_strtod_l+0xa40>
 8017188:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801718c:	e7f9      	b.n	8017182 <_strtod_l+0xa7a>
 801718e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017192:	9b04      	ldr	r3, [sp, #16]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d1ab      	bne.n	80170f0 <_strtod_l+0x9e8>
 8017198:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801719c:	0d1b      	lsrs	r3, r3, #20
 801719e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171a0:	051b      	lsls	r3, r3, #20
 80171a2:	429a      	cmp	r2, r3
 80171a4:	465d      	mov	r5, fp
 80171a6:	d1a3      	bne.n	80170f0 <_strtod_l+0x9e8>
 80171a8:	4639      	mov	r1, r7
 80171aa:	4630      	mov	r0, r6
 80171ac:	f7e9 fcec 	bl	8000b88 <__aeabi_d2iz>
 80171b0:	f7e9 f9d0 	bl	8000554 <__aeabi_i2d>
 80171b4:	460b      	mov	r3, r1
 80171b6:	4602      	mov	r2, r0
 80171b8:	4639      	mov	r1, r7
 80171ba:	4630      	mov	r0, r6
 80171bc:	f7e9 f87c 	bl	80002b8 <__aeabi_dsub>
 80171c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171c2:	4606      	mov	r6, r0
 80171c4:	460f      	mov	r7, r1
 80171c6:	b933      	cbnz	r3, 80171d6 <_strtod_l+0xace>
 80171c8:	f1ba 0f00 	cmp.w	sl, #0
 80171cc:	d103      	bne.n	80171d6 <_strtod_l+0xace>
 80171ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80171d2:	2d00      	cmp	r5, #0
 80171d4:	d06d      	beq.n	80172b2 <_strtod_l+0xbaa>
 80171d6:	a30a      	add	r3, pc, #40	; (adr r3, 8017200 <_strtod_l+0xaf8>)
 80171d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171dc:	4630      	mov	r0, r6
 80171de:	4639      	mov	r1, r7
 80171e0:	f7e9 fc94 	bl	8000b0c <__aeabi_dcmplt>
 80171e4:	2800      	cmp	r0, #0
 80171e6:	f47f acb8 	bne.w	8016b5a <_strtod_l+0x452>
 80171ea:	a307      	add	r3, pc, #28	; (adr r3, 8017208 <_strtod_l+0xb00>)
 80171ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f0:	4630      	mov	r0, r6
 80171f2:	4639      	mov	r1, r7
 80171f4:	f7e9 fca8 	bl	8000b48 <__aeabi_dcmpgt>
 80171f8:	2800      	cmp	r0, #0
 80171fa:	f43f af79 	beq.w	80170f0 <_strtod_l+0x9e8>
 80171fe:	e4ac      	b.n	8016b5a <_strtod_l+0x452>
 8017200:	94a03595 	.word	0x94a03595
 8017204:	3fdfffff 	.word	0x3fdfffff
 8017208:	35afe535 	.word	0x35afe535
 801720c:	3fe00000 	.word	0x3fe00000
 8017210:	000fffff 	.word	0x000fffff
 8017214:	7ff00000 	.word	0x7ff00000
 8017218:	7fefffff 	.word	0x7fefffff
 801721c:	39500000 	.word	0x39500000
 8017220:	3ff00000 	.word	0x3ff00000
 8017224:	7fe00000 	.word	0x7fe00000
 8017228:	7c9fffff 	.word	0x7c9fffff
 801722c:	3fe00000 	.word	0x3fe00000
 8017230:	bff00000 	.word	0xbff00000
 8017234:	9b04      	ldr	r3, [sp, #16]
 8017236:	b333      	cbz	r3, 8017286 <_strtod_l+0xb7e>
 8017238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801723a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801723e:	d822      	bhi.n	8017286 <_strtod_l+0xb7e>
 8017240:	a327      	add	r3, pc, #156	; (adr r3, 80172e0 <_strtod_l+0xbd8>)
 8017242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017246:	4630      	mov	r0, r6
 8017248:	4639      	mov	r1, r7
 801724a:	f7e9 fc69 	bl	8000b20 <__aeabi_dcmple>
 801724e:	b1a0      	cbz	r0, 801727a <_strtod_l+0xb72>
 8017250:	4639      	mov	r1, r7
 8017252:	4630      	mov	r0, r6
 8017254:	f7e9 fcc0 	bl	8000bd8 <__aeabi_d2uiz>
 8017258:	2800      	cmp	r0, #0
 801725a:	bf08      	it	eq
 801725c:	2001      	moveq	r0, #1
 801725e:	f7e9 f969 	bl	8000534 <__aeabi_ui2d>
 8017262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017264:	4606      	mov	r6, r0
 8017266:	460f      	mov	r7, r1
 8017268:	bb03      	cbnz	r3, 80172ac <_strtod_l+0xba4>
 801726a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801726e:	9012      	str	r0, [sp, #72]	; 0x48
 8017270:	9313      	str	r3, [sp, #76]	; 0x4c
 8017272:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017276:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801727a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801727c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801727e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017282:	1a9b      	subs	r3, r3, r2
 8017284:	930b      	str	r3, [sp, #44]	; 0x2c
 8017286:	ed9d 0b08 	vldr	d0, [sp, #32]
 801728a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801728e:	f001 fd61 	bl	8018d54 <__ulp>
 8017292:	4650      	mov	r0, sl
 8017294:	ec53 2b10 	vmov	r2, r3, d0
 8017298:	4659      	mov	r1, fp
 801729a:	f7e9 f9c5 	bl	8000628 <__aeabi_dmul>
 801729e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80172a2:	f7e9 f80b 	bl	80002bc <__adddf3>
 80172a6:	4682      	mov	sl, r0
 80172a8:	468b      	mov	fp, r1
 80172aa:	e772      	b.n	8017192 <_strtod_l+0xa8a>
 80172ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80172b0:	e7df      	b.n	8017272 <_strtod_l+0xb6a>
 80172b2:	a30d      	add	r3, pc, #52	; (adr r3, 80172e8 <_strtod_l+0xbe0>)
 80172b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b8:	f7e9 fc28 	bl	8000b0c <__aeabi_dcmplt>
 80172bc:	e79c      	b.n	80171f8 <_strtod_l+0xaf0>
 80172be:	2300      	movs	r3, #0
 80172c0:	930d      	str	r3, [sp, #52]	; 0x34
 80172c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80172c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80172c6:	6013      	str	r3, [r2, #0]
 80172c8:	f7ff ba61 	b.w	801678e <_strtod_l+0x86>
 80172cc:	2b65      	cmp	r3, #101	; 0x65
 80172ce:	f04f 0200 	mov.w	r2, #0
 80172d2:	f43f ab4e 	beq.w	8016972 <_strtod_l+0x26a>
 80172d6:	2101      	movs	r1, #1
 80172d8:	4614      	mov	r4, r2
 80172da:	9104      	str	r1, [sp, #16]
 80172dc:	f7ff bacb 	b.w	8016876 <_strtod_l+0x16e>
 80172e0:	ffc00000 	.word	0xffc00000
 80172e4:	41dfffff 	.word	0x41dfffff
 80172e8:	94a03595 	.word	0x94a03595
 80172ec:	3fcfffff 	.word	0x3fcfffff

080172f0 <_strtod_r>:
 80172f0:	4b05      	ldr	r3, [pc, #20]	; (8017308 <_strtod_r+0x18>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	b410      	push	{r4}
 80172f6:	6a1b      	ldr	r3, [r3, #32]
 80172f8:	4c04      	ldr	r4, [pc, #16]	; (801730c <_strtod_r+0x1c>)
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	bf08      	it	eq
 80172fe:	4623      	moveq	r3, r4
 8017300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017304:	f7ff ba00 	b.w	8016708 <_strtod_l>
 8017308:	2000000c 	.word	0x2000000c
 801730c:	20000070 	.word	0x20000070

08017310 <_strtol_l.isra.0>:
 8017310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017314:	4680      	mov	r8, r0
 8017316:	4689      	mov	r9, r1
 8017318:	4692      	mov	sl, r2
 801731a:	461e      	mov	r6, r3
 801731c:	460f      	mov	r7, r1
 801731e:	463d      	mov	r5, r7
 8017320:	9808      	ldr	r0, [sp, #32]
 8017322:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017326:	f001 fa0d 	bl	8018744 <__locale_ctype_ptr_l>
 801732a:	4420      	add	r0, r4
 801732c:	7843      	ldrb	r3, [r0, #1]
 801732e:	f013 0308 	ands.w	r3, r3, #8
 8017332:	d132      	bne.n	801739a <_strtol_l.isra.0+0x8a>
 8017334:	2c2d      	cmp	r4, #45	; 0x2d
 8017336:	d132      	bne.n	801739e <_strtol_l.isra.0+0x8e>
 8017338:	787c      	ldrb	r4, [r7, #1]
 801733a:	1cbd      	adds	r5, r7, #2
 801733c:	2201      	movs	r2, #1
 801733e:	2e00      	cmp	r6, #0
 8017340:	d05d      	beq.n	80173fe <_strtol_l.isra.0+0xee>
 8017342:	2e10      	cmp	r6, #16
 8017344:	d109      	bne.n	801735a <_strtol_l.isra.0+0x4a>
 8017346:	2c30      	cmp	r4, #48	; 0x30
 8017348:	d107      	bne.n	801735a <_strtol_l.isra.0+0x4a>
 801734a:	782b      	ldrb	r3, [r5, #0]
 801734c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017350:	2b58      	cmp	r3, #88	; 0x58
 8017352:	d14f      	bne.n	80173f4 <_strtol_l.isra.0+0xe4>
 8017354:	786c      	ldrb	r4, [r5, #1]
 8017356:	2610      	movs	r6, #16
 8017358:	3502      	adds	r5, #2
 801735a:	2a00      	cmp	r2, #0
 801735c:	bf14      	ite	ne
 801735e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017362:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017366:	2700      	movs	r7, #0
 8017368:	fbb1 fcf6 	udiv	ip, r1, r6
 801736c:	4638      	mov	r0, r7
 801736e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017372:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017376:	2b09      	cmp	r3, #9
 8017378:	d817      	bhi.n	80173aa <_strtol_l.isra.0+0x9a>
 801737a:	461c      	mov	r4, r3
 801737c:	42a6      	cmp	r6, r4
 801737e:	dd23      	ble.n	80173c8 <_strtol_l.isra.0+0xb8>
 8017380:	1c7b      	adds	r3, r7, #1
 8017382:	d007      	beq.n	8017394 <_strtol_l.isra.0+0x84>
 8017384:	4584      	cmp	ip, r0
 8017386:	d31c      	bcc.n	80173c2 <_strtol_l.isra.0+0xb2>
 8017388:	d101      	bne.n	801738e <_strtol_l.isra.0+0x7e>
 801738a:	45a6      	cmp	lr, r4
 801738c:	db19      	blt.n	80173c2 <_strtol_l.isra.0+0xb2>
 801738e:	fb00 4006 	mla	r0, r0, r6, r4
 8017392:	2701      	movs	r7, #1
 8017394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017398:	e7eb      	b.n	8017372 <_strtol_l.isra.0+0x62>
 801739a:	462f      	mov	r7, r5
 801739c:	e7bf      	b.n	801731e <_strtol_l.isra.0+0xe>
 801739e:	2c2b      	cmp	r4, #43	; 0x2b
 80173a0:	bf04      	itt	eq
 80173a2:	1cbd      	addeq	r5, r7, #2
 80173a4:	787c      	ldrbeq	r4, [r7, #1]
 80173a6:	461a      	mov	r2, r3
 80173a8:	e7c9      	b.n	801733e <_strtol_l.isra.0+0x2e>
 80173aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80173ae:	2b19      	cmp	r3, #25
 80173b0:	d801      	bhi.n	80173b6 <_strtol_l.isra.0+0xa6>
 80173b2:	3c37      	subs	r4, #55	; 0x37
 80173b4:	e7e2      	b.n	801737c <_strtol_l.isra.0+0x6c>
 80173b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80173ba:	2b19      	cmp	r3, #25
 80173bc:	d804      	bhi.n	80173c8 <_strtol_l.isra.0+0xb8>
 80173be:	3c57      	subs	r4, #87	; 0x57
 80173c0:	e7dc      	b.n	801737c <_strtol_l.isra.0+0x6c>
 80173c2:	f04f 37ff 	mov.w	r7, #4294967295
 80173c6:	e7e5      	b.n	8017394 <_strtol_l.isra.0+0x84>
 80173c8:	1c7b      	adds	r3, r7, #1
 80173ca:	d108      	bne.n	80173de <_strtol_l.isra.0+0xce>
 80173cc:	2322      	movs	r3, #34	; 0x22
 80173ce:	f8c8 3000 	str.w	r3, [r8]
 80173d2:	4608      	mov	r0, r1
 80173d4:	f1ba 0f00 	cmp.w	sl, #0
 80173d8:	d107      	bne.n	80173ea <_strtol_l.isra.0+0xda>
 80173da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173de:	b102      	cbz	r2, 80173e2 <_strtol_l.isra.0+0xd2>
 80173e0:	4240      	negs	r0, r0
 80173e2:	f1ba 0f00 	cmp.w	sl, #0
 80173e6:	d0f8      	beq.n	80173da <_strtol_l.isra.0+0xca>
 80173e8:	b10f      	cbz	r7, 80173ee <_strtol_l.isra.0+0xde>
 80173ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80173ee:	f8ca 9000 	str.w	r9, [sl]
 80173f2:	e7f2      	b.n	80173da <_strtol_l.isra.0+0xca>
 80173f4:	2430      	movs	r4, #48	; 0x30
 80173f6:	2e00      	cmp	r6, #0
 80173f8:	d1af      	bne.n	801735a <_strtol_l.isra.0+0x4a>
 80173fa:	2608      	movs	r6, #8
 80173fc:	e7ad      	b.n	801735a <_strtol_l.isra.0+0x4a>
 80173fe:	2c30      	cmp	r4, #48	; 0x30
 8017400:	d0a3      	beq.n	801734a <_strtol_l.isra.0+0x3a>
 8017402:	260a      	movs	r6, #10
 8017404:	e7a9      	b.n	801735a <_strtol_l.isra.0+0x4a>
	...

08017408 <_strtol_r>:
 8017408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801740a:	4c06      	ldr	r4, [pc, #24]	; (8017424 <_strtol_r+0x1c>)
 801740c:	4d06      	ldr	r5, [pc, #24]	; (8017428 <_strtol_r+0x20>)
 801740e:	6824      	ldr	r4, [r4, #0]
 8017410:	6a24      	ldr	r4, [r4, #32]
 8017412:	2c00      	cmp	r4, #0
 8017414:	bf08      	it	eq
 8017416:	462c      	moveq	r4, r5
 8017418:	9400      	str	r4, [sp, #0]
 801741a:	f7ff ff79 	bl	8017310 <_strtol_l.isra.0>
 801741e:	b003      	add	sp, #12
 8017420:	bd30      	pop	{r4, r5, pc}
 8017422:	bf00      	nop
 8017424:	2000000c 	.word	0x2000000c
 8017428:	20000070 	.word	0x20000070

0801742c <_vsiprintf_r>:
 801742c:	b500      	push	{lr}
 801742e:	b09b      	sub	sp, #108	; 0x6c
 8017430:	9100      	str	r1, [sp, #0]
 8017432:	9104      	str	r1, [sp, #16]
 8017434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017438:	9105      	str	r1, [sp, #20]
 801743a:	9102      	str	r1, [sp, #8]
 801743c:	4905      	ldr	r1, [pc, #20]	; (8017454 <_vsiprintf_r+0x28>)
 801743e:	9103      	str	r1, [sp, #12]
 8017440:	4669      	mov	r1, sp
 8017442:	f001 fecb 	bl	80191dc <_svfiprintf_r>
 8017446:	9b00      	ldr	r3, [sp, #0]
 8017448:	2200      	movs	r2, #0
 801744a:	701a      	strb	r2, [r3, #0]
 801744c:	b01b      	add	sp, #108	; 0x6c
 801744e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017452:	bf00      	nop
 8017454:	ffff0208 	.word	0xffff0208

08017458 <vsiprintf>:
 8017458:	4613      	mov	r3, r2
 801745a:	460a      	mov	r2, r1
 801745c:	4601      	mov	r1, r0
 801745e:	4802      	ldr	r0, [pc, #8]	; (8017468 <vsiprintf+0x10>)
 8017460:	6800      	ldr	r0, [r0, #0]
 8017462:	f7ff bfe3 	b.w	801742c <_vsiprintf_r>
 8017466:	bf00      	nop
 8017468:	2000000c 	.word	0x2000000c

0801746c <quorem>:
 801746c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017470:	6903      	ldr	r3, [r0, #16]
 8017472:	690c      	ldr	r4, [r1, #16]
 8017474:	42a3      	cmp	r3, r4
 8017476:	4680      	mov	r8, r0
 8017478:	f2c0 8082 	blt.w	8017580 <quorem+0x114>
 801747c:	3c01      	subs	r4, #1
 801747e:	f101 0714 	add.w	r7, r1, #20
 8017482:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017486:	f100 0614 	add.w	r6, r0, #20
 801748a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801748e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017492:	eb06 030c 	add.w	r3, r6, ip
 8017496:	3501      	adds	r5, #1
 8017498:	eb07 090c 	add.w	r9, r7, ip
 801749c:	9301      	str	r3, [sp, #4]
 801749e:	fbb0 f5f5 	udiv	r5, r0, r5
 80174a2:	b395      	cbz	r5, 801750a <quorem+0x9e>
 80174a4:	f04f 0a00 	mov.w	sl, #0
 80174a8:	4638      	mov	r0, r7
 80174aa:	46b6      	mov	lr, r6
 80174ac:	46d3      	mov	fp, sl
 80174ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80174b2:	b293      	uxth	r3, r2
 80174b4:	fb05 a303 	mla	r3, r5, r3, sl
 80174b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80174bc:	b29b      	uxth	r3, r3
 80174be:	ebab 0303 	sub.w	r3, fp, r3
 80174c2:	0c12      	lsrs	r2, r2, #16
 80174c4:	f8de b000 	ldr.w	fp, [lr]
 80174c8:	fb05 a202 	mla	r2, r5, r2, sl
 80174cc:	fa13 f38b 	uxtah	r3, r3, fp
 80174d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80174d4:	fa1f fb82 	uxth.w	fp, r2
 80174d8:	f8de 2000 	ldr.w	r2, [lr]
 80174dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80174e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174ea:	4581      	cmp	r9, r0
 80174ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80174f0:	f84e 3b04 	str.w	r3, [lr], #4
 80174f4:	d2db      	bcs.n	80174ae <quorem+0x42>
 80174f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80174fa:	b933      	cbnz	r3, 801750a <quorem+0x9e>
 80174fc:	9b01      	ldr	r3, [sp, #4]
 80174fe:	3b04      	subs	r3, #4
 8017500:	429e      	cmp	r6, r3
 8017502:	461a      	mov	r2, r3
 8017504:	d330      	bcc.n	8017568 <quorem+0xfc>
 8017506:	f8c8 4010 	str.w	r4, [r8, #16]
 801750a:	4640      	mov	r0, r8
 801750c:	f001 fbaa 	bl	8018c64 <__mcmp>
 8017510:	2800      	cmp	r0, #0
 8017512:	db25      	blt.n	8017560 <quorem+0xf4>
 8017514:	3501      	adds	r5, #1
 8017516:	4630      	mov	r0, r6
 8017518:	f04f 0c00 	mov.w	ip, #0
 801751c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017520:	f8d0 e000 	ldr.w	lr, [r0]
 8017524:	b293      	uxth	r3, r2
 8017526:	ebac 0303 	sub.w	r3, ip, r3
 801752a:	0c12      	lsrs	r2, r2, #16
 801752c:	fa13 f38e 	uxtah	r3, r3, lr
 8017530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017538:	b29b      	uxth	r3, r3
 801753a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801753e:	45b9      	cmp	r9, r7
 8017540:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017544:	f840 3b04 	str.w	r3, [r0], #4
 8017548:	d2e8      	bcs.n	801751c <quorem+0xb0>
 801754a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801754e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017552:	b92a      	cbnz	r2, 8017560 <quorem+0xf4>
 8017554:	3b04      	subs	r3, #4
 8017556:	429e      	cmp	r6, r3
 8017558:	461a      	mov	r2, r3
 801755a:	d30b      	bcc.n	8017574 <quorem+0x108>
 801755c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017560:	4628      	mov	r0, r5
 8017562:	b003      	add	sp, #12
 8017564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017568:	6812      	ldr	r2, [r2, #0]
 801756a:	3b04      	subs	r3, #4
 801756c:	2a00      	cmp	r2, #0
 801756e:	d1ca      	bne.n	8017506 <quorem+0x9a>
 8017570:	3c01      	subs	r4, #1
 8017572:	e7c5      	b.n	8017500 <quorem+0x94>
 8017574:	6812      	ldr	r2, [r2, #0]
 8017576:	3b04      	subs	r3, #4
 8017578:	2a00      	cmp	r2, #0
 801757a:	d1ef      	bne.n	801755c <quorem+0xf0>
 801757c:	3c01      	subs	r4, #1
 801757e:	e7ea      	b.n	8017556 <quorem+0xea>
 8017580:	2000      	movs	r0, #0
 8017582:	e7ee      	b.n	8017562 <quorem+0xf6>
 8017584:	0000      	movs	r0, r0
	...

08017588 <_dtoa_r>:
 8017588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801758c:	ec57 6b10 	vmov	r6, r7, d0
 8017590:	b097      	sub	sp, #92	; 0x5c
 8017592:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017594:	9106      	str	r1, [sp, #24]
 8017596:	4604      	mov	r4, r0
 8017598:	920b      	str	r2, [sp, #44]	; 0x2c
 801759a:	9312      	str	r3, [sp, #72]	; 0x48
 801759c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80175a0:	e9cd 6700 	strd	r6, r7, [sp]
 80175a4:	b93d      	cbnz	r5, 80175b6 <_dtoa_r+0x2e>
 80175a6:	2010      	movs	r0, #16
 80175a8:	f001 f8ee 	bl	8018788 <malloc>
 80175ac:	6260      	str	r0, [r4, #36]	; 0x24
 80175ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80175b2:	6005      	str	r5, [r0, #0]
 80175b4:	60c5      	str	r5, [r0, #12]
 80175b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175b8:	6819      	ldr	r1, [r3, #0]
 80175ba:	b151      	cbz	r1, 80175d2 <_dtoa_r+0x4a>
 80175bc:	685a      	ldr	r2, [r3, #4]
 80175be:	604a      	str	r2, [r1, #4]
 80175c0:	2301      	movs	r3, #1
 80175c2:	4093      	lsls	r3, r2
 80175c4:	608b      	str	r3, [r1, #8]
 80175c6:	4620      	mov	r0, r4
 80175c8:	f001 f92c 	bl	8018824 <_Bfree>
 80175cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175ce:	2200      	movs	r2, #0
 80175d0:	601a      	str	r2, [r3, #0]
 80175d2:	1e3b      	subs	r3, r7, #0
 80175d4:	bfbb      	ittet	lt
 80175d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80175da:	9301      	strlt	r3, [sp, #4]
 80175dc:	2300      	movge	r3, #0
 80175de:	2201      	movlt	r2, #1
 80175e0:	bfac      	ite	ge
 80175e2:	f8c8 3000 	strge.w	r3, [r8]
 80175e6:	f8c8 2000 	strlt.w	r2, [r8]
 80175ea:	4baf      	ldr	r3, [pc, #700]	; (80178a8 <_dtoa_r+0x320>)
 80175ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80175f0:	ea33 0308 	bics.w	r3, r3, r8
 80175f4:	d114      	bne.n	8017620 <_dtoa_r+0x98>
 80175f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80175fc:	6013      	str	r3, [r2, #0]
 80175fe:	9b00      	ldr	r3, [sp, #0]
 8017600:	b923      	cbnz	r3, 801760c <_dtoa_r+0x84>
 8017602:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017606:	2800      	cmp	r0, #0
 8017608:	f000 8542 	beq.w	8018090 <_dtoa_r+0xb08>
 801760c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801760e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80178bc <_dtoa_r+0x334>
 8017612:	2b00      	cmp	r3, #0
 8017614:	f000 8544 	beq.w	80180a0 <_dtoa_r+0xb18>
 8017618:	f10b 0303 	add.w	r3, fp, #3
 801761c:	f000 bd3e 	b.w	801809c <_dtoa_r+0xb14>
 8017620:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017624:	2200      	movs	r2, #0
 8017626:	2300      	movs	r3, #0
 8017628:	4630      	mov	r0, r6
 801762a:	4639      	mov	r1, r7
 801762c:	f7e9 fa64 	bl	8000af8 <__aeabi_dcmpeq>
 8017630:	4681      	mov	r9, r0
 8017632:	b168      	cbz	r0, 8017650 <_dtoa_r+0xc8>
 8017634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017636:	2301      	movs	r3, #1
 8017638:	6013      	str	r3, [r2, #0]
 801763a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801763c:	2b00      	cmp	r3, #0
 801763e:	f000 8524 	beq.w	801808a <_dtoa_r+0xb02>
 8017642:	4b9a      	ldr	r3, [pc, #616]	; (80178ac <_dtoa_r+0x324>)
 8017644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017646:	f103 3bff 	add.w	fp, r3, #4294967295
 801764a:	6013      	str	r3, [r2, #0]
 801764c:	f000 bd28 	b.w	80180a0 <_dtoa_r+0xb18>
 8017650:	aa14      	add	r2, sp, #80	; 0x50
 8017652:	a915      	add	r1, sp, #84	; 0x54
 8017654:	ec47 6b10 	vmov	d0, r6, r7
 8017658:	4620      	mov	r0, r4
 801765a:	f001 fbf1 	bl	8018e40 <__d2b>
 801765e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017662:	9004      	str	r0, [sp, #16]
 8017664:	2d00      	cmp	r5, #0
 8017666:	d07c      	beq.n	8017762 <_dtoa_r+0x1da>
 8017668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801766c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017670:	46b2      	mov	sl, r6
 8017672:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801767a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801767e:	2200      	movs	r2, #0
 8017680:	4b8b      	ldr	r3, [pc, #556]	; (80178b0 <_dtoa_r+0x328>)
 8017682:	4650      	mov	r0, sl
 8017684:	4659      	mov	r1, fp
 8017686:	f7e8 fe17 	bl	80002b8 <__aeabi_dsub>
 801768a:	a381      	add	r3, pc, #516	; (adr r3, 8017890 <_dtoa_r+0x308>)
 801768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017690:	f7e8 ffca 	bl	8000628 <__aeabi_dmul>
 8017694:	a380      	add	r3, pc, #512	; (adr r3, 8017898 <_dtoa_r+0x310>)
 8017696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801769a:	f7e8 fe0f 	bl	80002bc <__adddf3>
 801769e:	4606      	mov	r6, r0
 80176a0:	4628      	mov	r0, r5
 80176a2:	460f      	mov	r7, r1
 80176a4:	f7e8 ff56 	bl	8000554 <__aeabi_i2d>
 80176a8:	a37d      	add	r3, pc, #500	; (adr r3, 80178a0 <_dtoa_r+0x318>)
 80176aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ae:	f7e8 ffbb 	bl	8000628 <__aeabi_dmul>
 80176b2:	4602      	mov	r2, r0
 80176b4:	460b      	mov	r3, r1
 80176b6:	4630      	mov	r0, r6
 80176b8:	4639      	mov	r1, r7
 80176ba:	f7e8 fdff 	bl	80002bc <__adddf3>
 80176be:	4606      	mov	r6, r0
 80176c0:	460f      	mov	r7, r1
 80176c2:	f7e9 fa61 	bl	8000b88 <__aeabi_d2iz>
 80176c6:	2200      	movs	r2, #0
 80176c8:	4682      	mov	sl, r0
 80176ca:	2300      	movs	r3, #0
 80176cc:	4630      	mov	r0, r6
 80176ce:	4639      	mov	r1, r7
 80176d0:	f7e9 fa1c 	bl	8000b0c <__aeabi_dcmplt>
 80176d4:	b148      	cbz	r0, 80176ea <_dtoa_r+0x162>
 80176d6:	4650      	mov	r0, sl
 80176d8:	f7e8 ff3c 	bl	8000554 <__aeabi_i2d>
 80176dc:	4632      	mov	r2, r6
 80176de:	463b      	mov	r3, r7
 80176e0:	f7e9 fa0a 	bl	8000af8 <__aeabi_dcmpeq>
 80176e4:	b908      	cbnz	r0, 80176ea <_dtoa_r+0x162>
 80176e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176ea:	f1ba 0f16 	cmp.w	sl, #22
 80176ee:	d859      	bhi.n	80177a4 <_dtoa_r+0x21c>
 80176f0:	4970      	ldr	r1, [pc, #448]	; (80178b4 <_dtoa_r+0x32c>)
 80176f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80176f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176fe:	f7e9 fa23 	bl	8000b48 <__aeabi_dcmpgt>
 8017702:	2800      	cmp	r0, #0
 8017704:	d050      	beq.n	80177a8 <_dtoa_r+0x220>
 8017706:	f10a 3aff 	add.w	sl, sl, #4294967295
 801770a:	2300      	movs	r3, #0
 801770c:	930f      	str	r3, [sp, #60]	; 0x3c
 801770e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017710:	1b5d      	subs	r5, r3, r5
 8017712:	f1b5 0801 	subs.w	r8, r5, #1
 8017716:	bf49      	itett	mi
 8017718:	f1c5 0301 	rsbmi	r3, r5, #1
 801771c:	2300      	movpl	r3, #0
 801771e:	9305      	strmi	r3, [sp, #20]
 8017720:	f04f 0800 	movmi.w	r8, #0
 8017724:	bf58      	it	pl
 8017726:	9305      	strpl	r3, [sp, #20]
 8017728:	f1ba 0f00 	cmp.w	sl, #0
 801772c:	db3e      	blt.n	80177ac <_dtoa_r+0x224>
 801772e:	2300      	movs	r3, #0
 8017730:	44d0      	add	r8, sl
 8017732:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017736:	9307      	str	r3, [sp, #28]
 8017738:	9b06      	ldr	r3, [sp, #24]
 801773a:	2b09      	cmp	r3, #9
 801773c:	f200 8090 	bhi.w	8017860 <_dtoa_r+0x2d8>
 8017740:	2b05      	cmp	r3, #5
 8017742:	bfc4      	itt	gt
 8017744:	3b04      	subgt	r3, #4
 8017746:	9306      	strgt	r3, [sp, #24]
 8017748:	9b06      	ldr	r3, [sp, #24]
 801774a:	f1a3 0302 	sub.w	r3, r3, #2
 801774e:	bfcc      	ite	gt
 8017750:	2500      	movgt	r5, #0
 8017752:	2501      	movle	r5, #1
 8017754:	2b03      	cmp	r3, #3
 8017756:	f200 808f 	bhi.w	8017878 <_dtoa_r+0x2f0>
 801775a:	e8df f003 	tbb	[pc, r3]
 801775e:	7f7d      	.short	0x7f7d
 8017760:	7131      	.short	0x7131
 8017762:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017766:	441d      	add	r5, r3
 8017768:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801776c:	2820      	cmp	r0, #32
 801776e:	dd13      	ble.n	8017798 <_dtoa_r+0x210>
 8017770:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017774:	9b00      	ldr	r3, [sp, #0]
 8017776:	fa08 f800 	lsl.w	r8, r8, r0
 801777a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801777e:	fa23 f000 	lsr.w	r0, r3, r0
 8017782:	ea48 0000 	orr.w	r0, r8, r0
 8017786:	f7e8 fed5 	bl	8000534 <__aeabi_ui2d>
 801778a:	2301      	movs	r3, #1
 801778c:	4682      	mov	sl, r0
 801778e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017792:	3d01      	subs	r5, #1
 8017794:	9313      	str	r3, [sp, #76]	; 0x4c
 8017796:	e772      	b.n	801767e <_dtoa_r+0xf6>
 8017798:	9b00      	ldr	r3, [sp, #0]
 801779a:	f1c0 0020 	rsb	r0, r0, #32
 801779e:	fa03 f000 	lsl.w	r0, r3, r0
 80177a2:	e7f0      	b.n	8017786 <_dtoa_r+0x1fe>
 80177a4:	2301      	movs	r3, #1
 80177a6:	e7b1      	b.n	801770c <_dtoa_r+0x184>
 80177a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80177aa:	e7b0      	b.n	801770e <_dtoa_r+0x186>
 80177ac:	9b05      	ldr	r3, [sp, #20]
 80177ae:	eba3 030a 	sub.w	r3, r3, sl
 80177b2:	9305      	str	r3, [sp, #20]
 80177b4:	f1ca 0300 	rsb	r3, sl, #0
 80177b8:	9307      	str	r3, [sp, #28]
 80177ba:	2300      	movs	r3, #0
 80177bc:	930e      	str	r3, [sp, #56]	; 0x38
 80177be:	e7bb      	b.n	8017738 <_dtoa_r+0x1b0>
 80177c0:	2301      	movs	r3, #1
 80177c2:	930a      	str	r3, [sp, #40]	; 0x28
 80177c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	dd59      	ble.n	801787e <_dtoa_r+0x2f6>
 80177ca:	9302      	str	r3, [sp, #8]
 80177cc:	4699      	mov	r9, r3
 80177ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80177d0:	2200      	movs	r2, #0
 80177d2:	6072      	str	r2, [r6, #4]
 80177d4:	2204      	movs	r2, #4
 80177d6:	f102 0014 	add.w	r0, r2, #20
 80177da:	4298      	cmp	r0, r3
 80177dc:	6871      	ldr	r1, [r6, #4]
 80177de:	d953      	bls.n	8017888 <_dtoa_r+0x300>
 80177e0:	4620      	mov	r0, r4
 80177e2:	f000 ffeb 	bl	80187bc <_Balloc>
 80177e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177e8:	6030      	str	r0, [r6, #0]
 80177ea:	f1b9 0f0e 	cmp.w	r9, #14
 80177ee:	f8d3 b000 	ldr.w	fp, [r3]
 80177f2:	f200 80e6 	bhi.w	80179c2 <_dtoa_r+0x43a>
 80177f6:	2d00      	cmp	r5, #0
 80177f8:	f000 80e3 	beq.w	80179c2 <_dtoa_r+0x43a>
 80177fc:	ed9d 7b00 	vldr	d7, [sp]
 8017800:	f1ba 0f00 	cmp.w	sl, #0
 8017804:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017808:	dd74      	ble.n	80178f4 <_dtoa_r+0x36c>
 801780a:	4a2a      	ldr	r2, [pc, #168]	; (80178b4 <_dtoa_r+0x32c>)
 801780c:	f00a 030f 	and.w	r3, sl, #15
 8017810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017814:	ed93 7b00 	vldr	d7, [r3]
 8017818:	ea4f 162a 	mov.w	r6, sl, asr #4
 801781c:	06f0      	lsls	r0, r6, #27
 801781e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017822:	d565      	bpl.n	80178f0 <_dtoa_r+0x368>
 8017824:	4b24      	ldr	r3, [pc, #144]	; (80178b8 <_dtoa_r+0x330>)
 8017826:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801782a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801782e:	f7e9 f825 	bl	800087c <__aeabi_ddiv>
 8017832:	e9cd 0100 	strd	r0, r1, [sp]
 8017836:	f006 060f 	and.w	r6, r6, #15
 801783a:	2503      	movs	r5, #3
 801783c:	4f1e      	ldr	r7, [pc, #120]	; (80178b8 <_dtoa_r+0x330>)
 801783e:	e04c      	b.n	80178da <_dtoa_r+0x352>
 8017840:	2301      	movs	r3, #1
 8017842:	930a      	str	r3, [sp, #40]	; 0x28
 8017844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017846:	4453      	add	r3, sl
 8017848:	f103 0901 	add.w	r9, r3, #1
 801784c:	9302      	str	r3, [sp, #8]
 801784e:	464b      	mov	r3, r9
 8017850:	2b01      	cmp	r3, #1
 8017852:	bfb8      	it	lt
 8017854:	2301      	movlt	r3, #1
 8017856:	e7ba      	b.n	80177ce <_dtoa_r+0x246>
 8017858:	2300      	movs	r3, #0
 801785a:	e7b2      	b.n	80177c2 <_dtoa_r+0x23a>
 801785c:	2300      	movs	r3, #0
 801785e:	e7f0      	b.n	8017842 <_dtoa_r+0x2ba>
 8017860:	2501      	movs	r5, #1
 8017862:	2300      	movs	r3, #0
 8017864:	9306      	str	r3, [sp, #24]
 8017866:	950a      	str	r5, [sp, #40]	; 0x28
 8017868:	f04f 33ff 	mov.w	r3, #4294967295
 801786c:	9302      	str	r3, [sp, #8]
 801786e:	4699      	mov	r9, r3
 8017870:	2200      	movs	r2, #0
 8017872:	2312      	movs	r3, #18
 8017874:	920b      	str	r2, [sp, #44]	; 0x2c
 8017876:	e7aa      	b.n	80177ce <_dtoa_r+0x246>
 8017878:	2301      	movs	r3, #1
 801787a:	930a      	str	r3, [sp, #40]	; 0x28
 801787c:	e7f4      	b.n	8017868 <_dtoa_r+0x2e0>
 801787e:	2301      	movs	r3, #1
 8017880:	9302      	str	r3, [sp, #8]
 8017882:	4699      	mov	r9, r3
 8017884:	461a      	mov	r2, r3
 8017886:	e7f5      	b.n	8017874 <_dtoa_r+0x2ec>
 8017888:	3101      	adds	r1, #1
 801788a:	6071      	str	r1, [r6, #4]
 801788c:	0052      	lsls	r2, r2, #1
 801788e:	e7a2      	b.n	80177d6 <_dtoa_r+0x24e>
 8017890:	636f4361 	.word	0x636f4361
 8017894:	3fd287a7 	.word	0x3fd287a7
 8017898:	8b60c8b3 	.word	0x8b60c8b3
 801789c:	3fc68a28 	.word	0x3fc68a28
 80178a0:	509f79fb 	.word	0x509f79fb
 80178a4:	3fd34413 	.word	0x3fd34413
 80178a8:	7ff00000 	.word	0x7ff00000
 80178ac:	0801a7fc 	.word	0x0801a7fc
 80178b0:	3ff80000 	.word	0x3ff80000
 80178b4:	0801a700 	.word	0x0801a700
 80178b8:	0801a6d8 	.word	0x0801a6d8
 80178bc:	0801a661 	.word	0x0801a661
 80178c0:	07f1      	lsls	r1, r6, #31
 80178c2:	d508      	bpl.n	80178d6 <_dtoa_r+0x34e>
 80178c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80178c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80178cc:	f7e8 feac 	bl	8000628 <__aeabi_dmul>
 80178d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80178d4:	3501      	adds	r5, #1
 80178d6:	1076      	asrs	r6, r6, #1
 80178d8:	3708      	adds	r7, #8
 80178da:	2e00      	cmp	r6, #0
 80178dc:	d1f0      	bne.n	80178c0 <_dtoa_r+0x338>
 80178de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178e6:	f7e8 ffc9 	bl	800087c <__aeabi_ddiv>
 80178ea:	e9cd 0100 	strd	r0, r1, [sp]
 80178ee:	e01a      	b.n	8017926 <_dtoa_r+0x39e>
 80178f0:	2502      	movs	r5, #2
 80178f2:	e7a3      	b.n	801783c <_dtoa_r+0x2b4>
 80178f4:	f000 80a0 	beq.w	8017a38 <_dtoa_r+0x4b0>
 80178f8:	f1ca 0600 	rsb	r6, sl, #0
 80178fc:	4b9f      	ldr	r3, [pc, #636]	; (8017b7c <_dtoa_r+0x5f4>)
 80178fe:	4fa0      	ldr	r7, [pc, #640]	; (8017b80 <_dtoa_r+0x5f8>)
 8017900:	f006 020f 	and.w	r2, r6, #15
 8017904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017910:	f7e8 fe8a 	bl	8000628 <__aeabi_dmul>
 8017914:	e9cd 0100 	strd	r0, r1, [sp]
 8017918:	1136      	asrs	r6, r6, #4
 801791a:	2300      	movs	r3, #0
 801791c:	2502      	movs	r5, #2
 801791e:	2e00      	cmp	r6, #0
 8017920:	d17f      	bne.n	8017a22 <_dtoa_r+0x49a>
 8017922:	2b00      	cmp	r3, #0
 8017924:	d1e1      	bne.n	80178ea <_dtoa_r+0x362>
 8017926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017928:	2b00      	cmp	r3, #0
 801792a:	f000 8087 	beq.w	8017a3c <_dtoa_r+0x4b4>
 801792e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017932:	2200      	movs	r2, #0
 8017934:	4b93      	ldr	r3, [pc, #588]	; (8017b84 <_dtoa_r+0x5fc>)
 8017936:	4630      	mov	r0, r6
 8017938:	4639      	mov	r1, r7
 801793a:	f7e9 f8e7 	bl	8000b0c <__aeabi_dcmplt>
 801793e:	2800      	cmp	r0, #0
 8017940:	d07c      	beq.n	8017a3c <_dtoa_r+0x4b4>
 8017942:	f1b9 0f00 	cmp.w	r9, #0
 8017946:	d079      	beq.n	8017a3c <_dtoa_r+0x4b4>
 8017948:	9b02      	ldr	r3, [sp, #8]
 801794a:	2b00      	cmp	r3, #0
 801794c:	dd35      	ble.n	80179ba <_dtoa_r+0x432>
 801794e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017952:	9308      	str	r3, [sp, #32]
 8017954:	4639      	mov	r1, r7
 8017956:	2200      	movs	r2, #0
 8017958:	4b8b      	ldr	r3, [pc, #556]	; (8017b88 <_dtoa_r+0x600>)
 801795a:	4630      	mov	r0, r6
 801795c:	f7e8 fe64 	bl	8000628 <__aeabi_dmul>
 8017960:	e9cd 0100 	strd	r0, r1, [sp]
 8017964:	9f02      	ldr	r7, [sp, #8]
 8017966:	3501      	adds	r5, #1
 8017968:	4628      	mov	r0, r5
 801796a:	f7e8 fdf3 	bl	8000554 <__aeabi_i2d>
 801796e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017972:	f7e8 fe59 	bl	8000628 <__aeabi_dmul>
 8017976:	2200      	movs	r2, #0
 8017978:	4b84      	ldr	r3, [pc, #528]	; (8017b8c <_dtoa_r+0x604>)
 801797a:	f7e8 fc9f 	bl	80002bc <__adddf3>
 801797e:	4605      	mov	r5, r0
 8017980:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017984:	2f00      	cmp	r7, #0
 8017986:	d15d      	bne.n	8017a44 <_dtoa_r+0x4bc>
 8017988:	2200      	movs	r2, #0
 801798a:	4b81      	ldr	r3, [pc, #516]	; (8017b90 <_dtoa_r+0x608>)
 801798c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017990:	f7e8 fc92 	bl	80002b8 <__aeabi_dsub>
 8017994:	462a      	mov	r2, r5
 8017996:	4633      	mov	r3, r6
 8017998:	e9cd 0100 	strd	r0, r1, [sp]
 801799c:	f7e9 f8d4 	bl	8000b48 <__aeabi_dcmpgt>
 80179a0:	2800      	cmp	r0, #0
 80179a2:	f040 8288 	bne.w	8017eb6 <_dtoa_r+0x92e>
 80179a6:	462a      	mov	r2, r5
 80179a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80179ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179b0:	f7e9 f8ac 	bl	8000b0c <__aeabi_dcmplt>
 80179b4:	2800      	cmp	r0, #0
 80179b6:	f040 827c 	bne.w	8017eb2 <_dtoa_r+0x92a>
 80179ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80179be:	e9cd 2300 	strd	r2, r3, [sp]
 80179c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	f2c0 8150 	blt.w	8017c6a <_dtoa_r+0x6e2>
 80179ca:	f1ba 0f0e 	cmp.w	sl, #14
 80179ce:	f300 814c 	bgt.w	8017c6a <_dtoa_r+0x6e2>
 80179d2:	4b6a      	ldr	r3, [pc, #424]	; (8017b7c <_dtoa_r+0x5f4>)
 80179d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80179d8:	ed93 7b00 	vldr	d7, [r3]
 80179dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179de:	2b00      	cmp	r3, #0
 80179e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80179e4:	f280 80d8 	bge.w	8017b98 <_dtoa_r+0x610>
 80179e8:	f1b9 0f00 	cmp.w	r9, #0
 80179ec:	f300 80d4 	bgt.w	8017b98 <_dtoa_r+0x610>
 80179f0:	f040 825e 	bne.w	8017eb0 <_dtoa_r+0x928>
 80179f4:	2200      	movs	r2, #0
 80179f6:	4b66      	ldr	r3, [pc, #408]	; (8017b90 <_dtoa_r+0x608>)
 80179f8:	ec51 0b17 	vmov	r0, r1, d7
 80179fc:	f7e8 fe14 	bl	8000628 <__aeabi_dmul>
 8017a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a04:	f7e9 f896 	bl	8000b34 <__aeabi_dcmpge>
 8017a08:	464f      	mov	r7, r9
 8017a0a:	464e      	mov	r6, r9
 8017a0c:	2800      	cmp	r0, #0
 8017a0e:	f040 8234 	bne.w	8017e7a <_dtoa_r+0x8f2>
 8017a12:	2331      	movs	r3, #49	; 0x31
 8017a14:	f10b 0501 	add.w	r5, fp, #1
 8017a18:	f88b 3000 	strb.w	r3, [fp]
 8017a1c:	f10a 0a01 	add.w	sl, sl, #1
 8017a20:	e22f      	b.n	8017e82 <_dtoa_r+0x8fa>
 8017a22:	07f2      	lsls	r2, r6, #31
 8017a24:	d505      	bpl.n	8017a32 <_dtoa_r+0x4aa>
 8017a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a2a:	f7e8 fdfd 	bl	8000628 <__aeabi_dmul>
 8017a2e:	3501      	adds	r5, #1
 8017a30:	2301      	movs	r3, #1
 8017a32:	1076      	asrs	r6, r6, #1
 8017a34:	3708      	adds	r7, #8
 8017a36:	e772      	b.n	801791e <_dtoa_r+0x396>
 8017a38:	2502      	movs	r5, #2
 8017a3a:	e774      	b.n	8017926 <_dtoa_r+0x39e>
 8017a3c:	f8cd a020 	str.w	sl, [sp, #32]
 8017a40:	464f      	mov	r7, r9
 8017a42:	e791      	b.n	8017968 <_dtoa_r+0x3e0>
 8017a44:	4b4d      	ldr	r3, [pc, #308]	; (8017b7c <_dtoa_r+0x5f4>)
 8017a46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017a4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d047      	beq.n	8017ae4 <_dtoa_r+0x55c>
 8017a54:	4602      	mov	r2, r0
 8017a56:	460b      	mov	r3, r1
 8017a58:	2000      	movs	r0, #0
 8017a5a:	494e      	ldr	r1, [pc, #312]	; (8017b94 <_dtoa_r+0x60c>)
 8017a5c:	f7e8 ff0e 	bl	800087c <__aeabi_ddiv>
 8017a60:	462a      	mov	r2, r5
 8017a62:	4633      	mov	r3, r6
 8017a64:	f7e8 fc28 	bl	80002b8 <__aeabi_dsub>
 8017a68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a6c:	465d      	mov	r5, fp
 8017a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a72:	f7e9 f889 	bl	8000b88 <__aeabi_d2iz>
 8017a76:	4606      	mov	r6, r0
 8017a78:	f7e8 fd6c 	bl	8000554 <__aeabi_i2d>
 8017a7c:	4602      	mov	r2, r0
 8017a7e:	460b      	mov	r3, r1
 8017a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a84:	f7e8 fc18 	bl	80002b8 <__aeabi_dsub>
 8017a88:	3630      	adds	r6, #48	; 0x30
 8017a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8017a8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a92:	e9cd 0100 	strd	r0, r1, [sp]
 8017a96:	f7e9 f839 	bl	8000b0c <__aeabi_dcmplt>
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	d163      	bne.n	8017b66 <_dtoa_r+0x5de>
 8017a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	4937      	ldr	r1, [pc, #220]	; (8017b84 <_dtoa_r+0x5fc>)
 8017aa6:	f7e8 fc07 	bl	80002b8 <__aeabi_dsub>
 8017aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017aae:	f7e9 f82d 	bl	8000b0c <__aeabi_dcmplt>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	f040 80b7 	bne.w	8017c26 <_dtoa_r+0x69e>
 8017ab8:	eba5 030b 	sub.w	r3, r5, fp
 8017abc:	429f      	cmp	r7, r3
 8017abe:	f77f af7c 	ble.w	80179ba <_dtoa_r+0x432>
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	4b30      	ldr	r3, [pc, #192]	; (8017b88 <_dtoa_r+0x600>)
 8017ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017aca:	f7e8 fdad 	bl	8000628 <__aeabi_dmul>
 8017ace:	2200      	movs	r2, #0
 8017ad0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017ad4:	4b2c      	ldr	r3, [pc, #176]	; (8017b88 <_dtoa_r+0x600>)
 8017ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ada:	f7e8 fda5 	bl	8000628 <__aeabi_dmul>
 8017ade:	e9cd 0100 	strd	r0, r1, [sp]
 8017ae2:	e7c4      	b.n	8017a6e <_dtoa_r+0x4e6>
 8017ae4:	462a      	mov	r2, r5
 8017ae6:	4633      	mov	r3, r6
 8017ae8:	f7e8 fd9e 	bl	8000628 <__aeabi_dmul>
 8017aec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017af0:	eb0b 0507 	add.w	r5, fp, r7
 8017af4:	465e      	mov	r6, fp
 8017af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017afa:	f7e9 f845 	bl	8000b88 <__aeabi_d2iz>
 8017afe:	4607      	mov	r7, r0
 8017b00:	f7e8 fd28 	bl	8000554 <__aeabi_i2d>
 8017b04:	3730      	adds	r7, #48	; 0x30
 8017b06:	4602      	mov	r2, r0
 8017b08:	460b      	mov	r3, r1
 8017b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b0e:	f7e8 fbd3 	bl	80002b8 <__aeabi_dsub>
 8017b12:	f806 7b01 	strb.w	r7, [r6], #1
 8017b16:	42ae      	cmp	r6, r5
 8017b18:	e9cd 0100 	strd	r0, r1, [sp]
 8017b1c:	f04f 0200 	mov.w	r2, #0
 8017b20:	d126      	bne.n	8017b70 <_dtoa_r+0x5e8>
 8017b22:	4b1c      	ldr	r3, [pc, #112]	; (8017b94 <_dtoa_r+0x60c>)
 8017b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b28:	f7e8 fbc8 	bl	80002bc <__adddf3>
 8017b2c:	4602      	mov	r2, r0
 8017b2e:	460b      	mov	r3, r1
 8017b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b34:	f7e9 f808 	bl	8000b48 <__aeabi_dcmpgt>
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	d174      	bne.n	8017c26 <_dtoa_r+0x69e>
 8017b3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b40:	2000      	movs	r0, #0
 8017b42:	4914      	ldr	r1, [pc, #80]	; (8017b94 <_dtoa_r+0x60c>)
 8017b44:	f7e8 fbb8 	bl	80002b8 <__aeabi_dsub>
 8017b48:	4602      	mov	r2, r0
 8017b4a:	460b      	mov	r3, r1
 8017b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b50:	f7e8 ffdc 	bl	8000b0c <__aeabi_dcmplt>
 8017b54:	2800      	cmp	r0, #0
 8017b56:	f43f af30 	beq.w	80179ba <_dtoa_r+0x432>
 8017b5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b5e:	2b30      	cmp	r3, #48	; 0x30
 8017b60:	f105 32ff 	add.w	r2, r5, #4294967295
 8017b64:	d002      	beq.n	8017b6c <_dtoa_r+0x5e4>
 8017b66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017b6a:	e04a      	b.n	8017c02 <_dtoa_r+0x67a>
 8017b6c:	4615      	mov	r5, r2
 8017b6e:	e7f4      	b.n	8017b5a <_dtoa_r+0x5d2>
 8017b70:	4b05      	ldr	r3, [pc, #20]	; (8017b88 <_dtoa_r+0x600>)
 8017b72:	f7e8 fd59 	bl	8000628 <__aeabi_dmul>
 8017b76:	e9cd 0100 	strd	r0, r1, [sp]
 8017b7a:	e7bc      	b.n	8017af6 <_dtoa_r+0x56e>
 8017b7c:	0801a700 	.word	0x0801a700
 8017b80:	0801a6d8 	.word	0x0801a6d8
 8017b84:	3ff00000 	.word	0x3ff00000
 8017b88:	40240000 	.word	0x40240000
 8017b8c:	401c0000 	.word	0x401c0000
 8017b90:	40140000 	.word	0x40140000
 8017b94:	3fe00000 	.word	0x3fe00000
 8017b98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b9c:	465d      	mov	r5, fp
 8017b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	4639      	mov	r1, r7
 8017ba6:	f7e8 fe69 	bl	800087c <__aeabi_ddiv>
 8017baa:	f7e8 ffed 	bl	8000b88 <__aeabi_d2iz>
 8017bae:	4680      	mov	r8, r0
 8017bb0:	f7e8 fcd0 	bl	8000554 <__aeabi_i2d>
 8017bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bb8:	f7e8 fd36 	bl	8000628 <__aeabi_dmul>
 8017bbc:	4602      	mov	r2, r0
 8017bbe:	460b      	mov	r3, r1
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	4639      	mov	r1, r7
 8017bc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017bc8:	f7e8 fb76 	bl	80002b8 <__aeabi_dsub>
 8017bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8017bd0:	eba5 060b 	sub.w	r6, r5, fp
 8017bd4:	45b1      	cmp	r9, r6
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	460b      	mov	r3, r1
 8017bda:	d139      	bne.n	8017c50 <_dtoa_r+0x6c8>
 8017bdc:	f7e8 fb6e 	bl	80002bc <__adddf3>
 8017be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017be4:	4606      	mov	r6, r0
 8017be6:	460f      	mov	r7, r1
 8017be8:	f7e8 ffae 	bl	8000b48 <__aeabi_dcmpgt>
 8017bec:	b9c8      	cbnz	r0, 8017c22 <_dtoa_r+0x69a>
 8017bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	4639      	mov	r1, r7
 8017bf6:	f7e8 ff7f 	bl	8000af8 <__aeabi_dcmpeq>
 8017bfa:	b110      	cbz	r0, 8017c02 <_dtoa_r+0x67a>
 8017bfc:	f018 0f01 	tst.w	r8, #1
 8017c00:	d10f      	bne.n	8017c22 <_dtoa_r+0x69a>
 8017c02:	9904      	ldr	r1, [sp, #16]
 8017c04:	4620      	mov	r0, r4
 8017c06:	f000 fe0d 	bl	8018824 <_Bfree>
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c0e:	702b      	strb	r3, [r5, #0]
 8017c10:	f10a 0301 	add.w	r3, sl, #1
 8017c14:	6013      	str	r3, [r2, #0]
 8017c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	f000 8241 	beq.w	80180a0 <_dtoa_r+0xb18>
 8017c1e:	601d      	str	r5, [r3, #0]
 8017c20:	e23e      	b.n	80180a0 <_dtoa_r+0xb18>
 8017c22:	f8cd a020 	str.w	sl, [sp, #32]
 8017c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c2a:	2a39      	cmp	r2, #57	; 0x39
 8017c2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017c30:	d108      	bne.n	8017c44 <_dtoa_r+0x6bc>
 8017c32:	459b      	cmp	fp, r3
 8017c34:	d10a      	bne.n	8017c4c <_dtoa_r+0x6c4>
 8017c36:	9b08      	ldr	r3, [sp, #32]
 8017c38:	3301      	adds	r3, #1
 8017c3a:	9308      	str	r3, [sp, #32]
 8017c3c:	2330      	movs	r3, #48	; 0x30
 8017c3e:	f88b 3000 	strb.w	r3, [fp]
 8017c42:	465b      	mov	r3, fp
 8017c44:	781a      	ldrb	r2, [r3, #0]
 8017c46:	3201      	adds	r2, #1
 8017c48:	701a      	strb	r2, [r3, #0]
 8017c4a:	e78c      	b.n	8017b66 <_dtoa_r+0x5de>
 8017c4c:	461d      	mov	r5, r3
 8017c4e:	e7ea      	b.n	8017c26 <_dtoa_r+0x69e>
 8017c50:	2200      	movs	r2, #0
 8017c52:	4b9b      	ldr	r3, [pc, #620]	; (8017ec0 <_dtoa_r+0x938>)
 8017c54:	f7e8 fce8 	bl	8000628 <__aeabi_dmul>
 8017c58:	2200      	movs	r2, #0
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	4606      	mov	r6, r0
 8017c5e:	460f      	mov	r7, r1
 8017c60:	f7e8 ff4a 	bl	8000af8 <__aeabi_dcmpeq>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	d09a      	beq.n	8017b9e <_dtoa_r+0x616>
 8017c68:	e7cb      	b.n	8017c02 <_dtoa_r+0x67a>
 8017c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c6c:	2a00      	cmp	r2, #0
 8017c6e:	f000 808b 	beq.w	8017d88 <_dtoa_r+0x800>
 8017c72:	9a06      	ldr	r2, [sp, #24]
 8017c74:	2a01      	cmp	r2, #1
 8017c76:	dc6e      	bgt.n	8017d56 <_dtoa_r+0x7ce>
 8017c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c7a:	2a00      	cmp	r2, #0
 8017c7c:	d067      	beq.n	8017d4e <_dtoa_r+0x7c6>
 8017c7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017c82:	9f07      	ldr	r7, [sp, #28]
 8017c84:	9d05      	ldr	r5, [sp, #20]
 8017c86:	9a05      	ldr	r2, [sp, #20]
 8017c88:	2101      	movs	r1, #1
 8017c8a:	441a      	add	r2, r3
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	9205      	str	r2, [sp, #20]
 8017c90:	4498      	add	r8, r3
 8017c92:	f000 fea5 	bl	80189e0 <__i2b>
 8017c96:	4606      	mov	r6, r0
 8017c98:	2d00      	cmp	r5, #0
 8017c9a:	dd0c      	ble.n	8017cb6 <_dtoa_r+0x72e>
 8017c9c:	f1b8 0f00 	cmp.w	r8, #0
 8017ca0:	dd09      	ble.n	8017cb6 <_dtoa_r+0x72e>
 8017ca2:	4545      	cmp	r5, r8
 8017ca4:	9a05      	ldr	r2, [sp, #20]
 8017ca6:	462b      	mov	r3, r5
 8017ca8:	bfa8      	it	ge
 8017caa:	4643      	movge	r3, r8
 8017cac:	1ad2      	subs	r2, r2, r3
 8017cae:	9205      	str	r2, [sp, #20]
 8017cb0:	1aed      	subs	r5, r5, r3
 8017cb2:	eba8 0803 	sub.w	r8, r8, r3
 8017cb6:	9b07      	ldr	r3, [sp, #28]
 8017cb8:	b1eb      	cbz	r3, 8017cf6 <_dtoa_r+0x76e>
 8017cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d067      	beq.n	8017d90 <_dtoa_r+0x808>
 8017cc0:	b18f      	cbz	r7, 8017ce6 <_dtoa_r+0x75e>
 8017cc2:	4631      	mov	r1, r6
 8017cc4:	463a      	mov	r2, r7
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f000 ff2a 	bl	8018b20 <__pow5mult>
 8017ccc:	9a04      	ldr	r2, [sp, #16]
 8017cce:	4601      	mov	r1, r0
 8017cd0:	4606      	mov	r6, r0
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f000 fe8d 	bl	80189f2 <__multiply>
 8017cd8:	9904      	ldr	r1, [sp, #16]
 8017cda:	9008      	str	r0, [sp, #32]
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f000 fda1 	bl	8018824 <_Bfree>
 8017ce2:	9b08      	ldr	r3, [sp, #32]
 8017ce4:	9304      	str	r3, [sp, #16]
 8017ce6:	9b07      	ldr	r3, [sp, #28]
 8017ce8:	1bda      	subs	r2, r3, r7
 8017cea:	d004      	beq.n	8017cf6 <_dtoa_r+0x76e>
 8017cec:	9904      	ldr	r1, [sp, #16]
 8017cee:	4620      	mov	r0, r4
 8017cf0:	f000 ff16 	bl	8018b20 <__pow5mult>
 8017cf4:	9004      	str	r0, [sp, #16]
 8017cf6:	2101      	movs	r1, #1
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	f000 fe71 	bl	80189e0 <__i2b>
 8017cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d00:	4607      	mov	r7, r0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	f000 81d0 	beq.w	80180a8 <_dtoa_r+0xb20>
 8017d08:	461a      	mov	r2, r3
 8017d0a:	4601      	mov	r1, r0
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	f000 ff07 	bl	8018b20 <__pow5mult>
 8017d12:	9b06      	ldr	r3, [sp, #24]
 8017d14:	2b01      	cmp	r3, #1
 8017d16:	4607      	mov	r7, r0
 8017d18:	dc40      	bgt.n	8017d9c <_dtoa_r+0x814>
 8017d1a:	9b00      	ldr	r3, [sp, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d139      	bne.n	8017d94 <_dtoa_r+0x80c>
 8017d20:	9b01      	ldr	r3, [sp, #4]
 8017d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d136      	bne.n	8017d98 <_dtoa_r+0x810>
 8017d2a:	9b01      	ldr	r3, [sp, #4]
 8017d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d30:	0d1b      	lsrs	r3, r3, #20
 8017d32:	051b      	lsls	r3, r3, #20
 8017d34:	b12b      	cbz	r3, 8017d42 <_dtoa_r+0x7ba>
 8017d36:	9b05      	ldr	r3, [sp, #20]
 8017d38:	3301      	adds	r3, #1
 8017d3a:	9305      	str	r3, [sp, #20]
 8017d3c:	f108 0801 	add.w	r8, r8, #1
 8017d40:	2301      	movs	r3, #1
 8017d42:	9307      	str	r3, [sp, #28]
 8017d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d12a      	bne.n	8017da0 <_dtoa_r+0x818>
 8017d4a:	2001      	movs	r0, #1
 8017d4c:	e030      	b.n	8017db0 <_dtoa_r+0x828>
 8017d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017d54:	e795      	b.n	8017c82 <_dtoa_r+0x6fa>
 8017d56:	9b07      	ldr	r3, [sp, #28]
 8017d58:	f109 37ff 	add.w	r7, r9, #4294967295
 8017d5c:	42bb      	cmp	r3, r7
 8017d5e:	bfbf      	itttt	lt
 8017d60:	9b07      	ldrlt	r3, [sp, #28]
 8017d62:	9707      	strlt	r7, [sp, #28]
 8017d64:	1afa      	sublt	r2, r7, r3
 8017d66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017d68:	bfbb      	ittet	lt
 8017d6a:	189b      	addlt	r3, r3, r2
 8017d6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017d6e:	1bdf      	subge	r7, r3, r7
 8017d70:	2700      	movlt	r7, #0
 8017d72:	f1b9 0f00 	cmp.w	r9, #0
 8017d76:	bfb5      	itete	lt
 8017d78:	9b05      	ldrlt	r3, [sp, #20]
 8017d7a:	9d05      	ldrge	r5, [sp, #20]
 8017d7c:	eba3 0509 	sublt.w	r5, r3, r9
 8017d80:	464b      	movge	r3, r9
 8017d82:	bfb8      	it	lt
 8017d84:	2300      	movlt	r3, #0
 8017d86:	e77e      	b.n	8017c86 <_dtoa_r+0x6fe>
 8017d88:	9f07      	ldr	r7, [sp, #28]
 8017d8a:	9d05      	ldr	r5, [sp, #20]
 8017d8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017d8e:	e783      	b.n	8017c98 <_dtoa_r+0x710>
 8017d90:	9a07      	ldr	r2, [sp, #28]
 8017d92:	e7ab      	b.n	8017cec <_dtoa_r+0x764>
 8017d94:	2300      	movs	r3, #0
 8017d96:	e7d4      	b.n	8017d42 <_dtoa_r+0x7ba>
 8017d98:	9b00      	ldr	r3, [sp, #0]
 8017d9a:	e7d2      	b.n	8017d42 <_dtoa_r+0x7ba>
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	9307      	str	r3, [sp, #28]
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017da6:	6918      	ldr	r0, [r3, #16]
 8017da8:	f000 fdcc 	bl	8018944 <__hi0bits>
 8017dac:	f1c0 0020 	rsb	r0, r0, #32
 8017db0:	4440      	add	r0, r8
 8017db2:	f010 001f 	ands.w	r0, r0, #31
 8017db6:	d047      	beq.n	8017e48 <_dtoa_r+0x8c0>
 8017db8:	f1c0 0320 	rsb	r3, r0, #32
 8017dbc:	2b04      	cmp	r3, #4
 8017dbe:	dd3b      	ble.n	8017e38 <_dtoa_r+0x8b0>
 8017dc0:	9b05      	ldr	r3, [sp, #20]
 8017dc2:	f1c0 001c 	rsb	r0, r0, #28
 8017dc6:	4403      	add	r3, r0
 8017dc8:	9305      	str	r3, [sp, #20]
 8017dca:	4405      	add	r5, r0
 8017dcc:	4480      	add	r8, r0
 8017dce:	9b05      	ldr	r3, [sp, #20]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	dd05      	ble.n	8017de0 <_dtoa_r+0x858>
 8017dd4:	461a      	mov	r2, r3
 8017dd6:	9904      	ldr	r1, [sp, #16]
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 feef 	bl	8018bbc <__lshift>
 8017dde:	9004      	str	r0, [sp, #16]
 8017de0:	f1b8 0f00 	cmp.w	r8, #0
 8017de4:	dd05      	ble.n	8017df2 <_dtoa_r+0x86a>
 8017de6:	4639      	mov	r1, r7
 8017de8:	4642      	mov	r2, r8
 8017dea:	4620      	mov	r0, r4
 8017dec:	f000 fee6 	bl	8018bbc <__lshift>
 8017df0:	4607      	mov	r7, r0
 8017df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017df4:	b353      	cbz	r3, 8017e4c <_dtoa_r+0x8c4>
 8017df6:	4639      	mov	r1, r7
 8017df8:	9804      	ldr	r0, [sp, #16]
 8017dfa:	f000 ff33 	bl	8018c64 <__mcmp>
 8017dfe:	2800      	cmp	r0, #0
 8017e00:	da24      	bge.n	8017e4c <_dtoa_r+0x8c4>
 8017e02:	2300      	movs	r3, #0
 8017e04:	220a      	movs	r2, #10
 8017e06:	9904      	ldr	r1, [sp, #16]
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f000 fd22 	bl	8018852 <__multadd>
 8017e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e10:	9004      	str	r0, [sp, #16]
 8017e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	f000 814d 	beq.w	80180b6 <_dtoa_r+0xb2e>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	4631      	mov	r1, r6
 8017e20:	220a      	movs	r2, #10
 8017e22:	4620      	mov	r0, r4
 8017e24:	f000 fd15 	bl	8018852 <__multadd>
 8017e28:	9b02      	ldr	r3, [sp, #8]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	dc4f      	bgt.n	8017ed0 <_dtoa_r+0x948>
 8017e30:	9b06      	ldr	r3, [sp, #24]
 8017e32:	2b02      	cmp	r3, #2
 8017e34:	dd4c      	ble.n	8017ed0 <_dtoa_r+0x948>
 8017e36:	e011      	b.n	8017e5c <_dtoa_r+0x8d4>
 8017e38:	d0c9      	beq.n	8017dce <_dtoa_r+0x846>
 8017e3a:	9a05      	ldr	r2, [sp, #20]
 8017e3c:	331c      	adds	r3, #28
 8017e3e:	441a      	add	r2, r3
 8017e40:	9205      	str	r2, [sp, #20]
 8017e42:	441d      	add	r5, r3
 8017e44:	4498      	add	r8, r3
 8017e46:	e7c2      	b.n	8017dce <_dtoa_r+0x846>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	e7f6      	b.n	8017e3a <_dtoa_r+0x8b2>
 8017e4c:	f1b9 0f00 	cmp.w	r9, #0
 8017e50:	dc38      	bgt.n	8017ec4 <_dtoa_r+0x93c>
 8017e52:	9b06      	ldr	r3, [sp, #24]
 8017e54:	2b02      	cmp	r3, #2
 8017e56:	dd35      	ble.n	8017ec4 <_dtoa_r+0x93c>
 8017e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e5c:	9b02      	ldr	r3, [sp, #8]
 8017e5e:	b963      	cbnz	r3, 8017e7a <_dtoa_r+0x8f2>
 8017e60:	4639      	mov	r1, r7
 8017e62:	2205      	movs	r2, #5
 8017e64:	4620      	mov	r0, r4
 8017e66:	f000 fcf4 	bl	8018852 <__multadd>
 8017e6a:	4601      	mov	r1, r0
 8017e6c:	4607      	mov	r7, r0
 8017e6e:	9804      	ldr	r0, [sp, #16]
 8017e70:	f000 fef8 	bl	8018c64 <__mcmp>
 8017e74:	2800      	cmp	r0, #0
 8017e76:	f73f adcc 	bgt.w	8017a12 <_dtoa_r+0x48a>
 8017e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e7c:	465d      	mov	r5, fp
 8017e7e:	ea6f 0a03 	mvn.w	sl, r3
 8017e82:	f04f 0900 	mov.w	r9, #0
 8017e86:	4639      	mov	r1, r7
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f000 fccb 	bl	8018824 <_Bfree>
 8017e8e:	2e00      	cmp	r6, #0
 8017e90:	f43f aeb7 	beq.w	8017c02 <_dtoa_r+0x67a>
 8017e94:	f1b9 0f00 	cmp.w	r9, #0
 8017e98:	d005      	beq.n	8017ea6 <_dtoa_r+0x91e>
 8017e9a:	45b1      	cmp	r9, r6
 8017e9c:	d003      	beq.n	8017ea6 <_dtoa_r+0x91e>
 8017e9e:	4649      	mov	r1, r9
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f000 fcbf 	bl	8018824 <_Bfree>
 8017ea6:	4631      	mov	r1, r6
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	f000 fcbb 	bl	8018824 <_Bfree>
 8017eae:	e6a8      	b.n	8017c02 <_dtoa_r+0x67a>
 8017eb0:	2700      	movs	r7, #0
 8017eb2:	463e      	mov	r6, r7
 8017eb4:	e7e1      	b.n	8017e7a <_dtoa_r+0x8f2>
 8017eb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017eba:	463e      	mov	r6, r7
 8017ebc:	e5a9      	b.n	8017a12 <_dtoa_r+0x48a>
 8017ebe:	bf00      	nop
 8017ec0:	40240000 	.word	0x40240000
 8017ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ec6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	f000 80fa 	beq.w	80180c4 <_dtoa_r+0xb3c>
 8017ed0:	2d00      	cmp	r5, #0
 8017ed2:	dd05      	ble.n	8017ee0 <_dtoa_r+0x958>
 8017ed4:	4631      	mov	r1, r6
 8017ed6:	462a      	mov	r2, r5
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f000 fe6f 	bl	8018bbc <__lshift>
 8017ede:	4606      	mov	r6, r0
 8017ee0:	9b07      	ldr	r3, [sp, #28]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d04c      	beq.n	8017f80 <_dtoa_r+0x9f8>
 8017ee6:	6871      	ldr	r1, [r6, #4]
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f000 fc67 	bl	80187bc <_Balloc>
 8017eee:	6932      	ldr	r2, [r6, #16]
 8017ef0:	3202      	adds	r2, #2
 8017ef2:	4605      	mov	r5, r0
 8017ef4:	0092      	lsls	r2, r2, #2
 8017ef6:	f106 010c 	add.w	r1, r6, #12
 8017efa:	300c      	adds	r0, #12
 8017efc:	f7fd fd08 	bl	8015910 <memcpy>
 8017f00:	2201      	movs	r2, #1
 8017f02:	4629      	mov	r1, r5
 8017f04:	4620      	mov	r0, r4
 8017f06:	f000 fe59 	bl	8018bbc <__lshift>
 8017f0a:	9b00      	ldr	r3, [sp, #0]
 8017f0c:	f8cd b014 	str.w	fp, [sp, #20]
 8017f10:	f003 0301 	and.w	r3, r3, #1
 8017f14:	46b1      	mov	r9, r6
 8017f16:	9307      	str	r3, [sp, #28]
 8017f18:	4606      	mov	r6, r0
 8017f1a:	4639      	mov	r1, r7
 8017f1c:	9804      	ldr	r0, [sp, #16]
 8017f1e:	f7ff faa5 	bl	801746c <quorem>
 8017f22:	4649      	mov	r1, r9
 8017f24:	4605      	mov	r5, r0
 8017f26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017f2a:	9804      	ldr	r0, [sp, #16]
 8017f2c:	f000 fe9a 	bl	8018c64 <__mcmp>
 8017f30:	4632      	mov	r2, r6
 8017f32:	9000      	str	r0, [sp, #0]
 8017f34:	4639      	mov	r1, r7
 8017f36:	4620      	mov	r0, r4
 8017f38:	f000 feae 	bl	8018c98 <__mdiff>
 8017f3c:	68c3      	ldr	r3, [r0, #12]
 8017f3e:	4602      	mov	r2, r0
 8017f40:	bb03      	cbnz	r3, 8017f84 <_dtoa_r+0x9fc>
 8017f42:	4601      	mov	r1, r0
 8017f44:	9008      	str	r0, [sp, #32]
 8017f46:	9804      	ldr	r0, [sp, #16]
 8017f48:	f000 fe8c 	bl	8018c64 <__mcmp>
 8017f4c:	9a08      	ldr	r2, [sp, #32]
 8017f4e:	4603      	mov	r3, r0
 8017f50:	4611      	mov	r1, r2
 8017f52:	4620      	mov	r0, r4
 8017f54:	9308      	str	r3, [sp, #32]
 8017f56:	f000 fc65 	bl	8018824 <_Bfree>
 8017f5a:	9b08      	ldr	r3, [sp, #32]
 8017f5c:	b9a3      	cbnz	r3, 8017f88 <_dtoa_r+0xa00>
 8017f5e:	9a06      	ldr	r2, [sp, #24]
 8017f60:	b992      	cbnz	r2, 8017f88 <_dtoa_r+0xa00>
 8017f62:	9a07      	ldr	r2, [sp, #28]
 8017f64:	b982      	cbnz	r2, 8017f88 <_dtoa_r+0xa00>
 8017f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f6a:	d029      	beq.n	8017fc0 <_dtoa_r+0xa38>
 8017f6c:	9b00      	ldr	r3, [sp, #0]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	dd01      	ble.n	8017f76 <_dtoa_r+0x9ee>
 8017f72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017f76:	9b05      	ldr	r3, [sp, #20]
 8017f78:	1c5d      	adds	r5, r3, #1
 8017f7a:	f883 8000 	strb.w	r8, [r3]
 8017f7e:	e782      	b.n	8017e86 <_dtoa_r+0x8fe>
 8017f80:	4630      	mov	r0, r6
 8017f82:	e7c2      	b.n	8017f0a <_dtoa_r+0x982>
 8017f84:	2301      	movs	r3, #1
 8017f86:	e7e3      	b.n	8017f50 <_dtoa_r+0x9c8>
 8017f88:	9a00      	ldr	r2, [sp, #0]
 8017f8a:	2a00      	cmp	r2, #0
 8017f8c:	db04      	blt.n	8017f98 <_dtoa_r+0xa10>
 8017f8e:	d125      	bne.n	8017fdc <_dtoa_r+0xa54>
 8017f90:	9a06      	ldr	r2, [sp, #24]
 8017f92:	bb1a      	cbnz	r2, 8017fdc <_dtoa_r+0xa54>
 8017f94:	9a07      	ldr	r2, [sp, #28]
 8017f96:	bb0a      	cbnz	r2, 8017fdc <_dtoa_r+0xa54>
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	ddec      	ble.n	8017f76 <_dtoa_r+0x9ee>
 8017f9c:	2201      	movs	r2, #1
 8017f9e:	9904      	ldr	r1, [sp, #16]
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f000 fe0b 	bl	8018bbc <__lshift>
 8017fa6:	4639      	mov	r1, r7
 8017fa8:	9004      	str	r0, [sp, #16]
 8017faa:	f000 fe5b 	bl	8018c64 <__mcmp>
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	dc03      	bgt.n	8017fba <_dtoa_r+0xa32>
 8017fb2:	d1e0      	bne.n	8017f76 <_dtoa_r+0x9ee>
 8017fb4:	f018 0f01 	tst.w	r8, #1
 8017fb8:	d0dd      	beq.n	8017f76 <_dtoa_r+0x9ee>
 8017fba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017fbe:	d1d8      	bne.n	8017f72 <_dtoa_r+0x9ea>
 8017fc0:	9b05      	ldr	r3, [sp, #20]
 8017fc2:	9a05      	ldr	r2, [sp, #20]
 8017fc4:	1c5d      	adds	r5, r3, #1
 8017fc6:	2339      	movs	r3, #57	; 0x39
 8017fc8:	7013      	strb	r3, [r2, #0]
 8017fca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fce:	2b39      	cmp	r3, #57	; 0x39
 8017fd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fd4:	d04f      	beq.n	8018076 <_dtoa_r+0xaee>
 8017fd6:	3301      	adds	r3, #1
 8017fd8:	7013      	strb	r3, [r2, #0]
 8017fda:	e754      	b.n	8017e86 <_dtoa_r+0x8fe>
 8017fdc:	9a05      	ldr	r2, [sp, #20]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	f102 0501 	add.w	r5, r2, #1
 8017fe4:	dd06      	ble.n	8017ff4 <_dtoa_r+0xa6c>
 8017fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017fea:	d0e9      	beq.n	8017fc0 <_dtoa_r+0xa38>
 8017fec:	f108 0801 	add.w	r8, r8, #1
 8017ff0:	9b05      	ldr	r3, [sp, #20]
 8017ff2:	e7c2      	b.n	8017f7a <_dtoa_r+0x9f2>
 8017ff4:	9a02      	ldr	r2, [sp, #8]
 8017ff6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017ffa:	eba5 030b 	sub.w	r3, r5, fp
 8017ffe:	4293      	cmp	r3, r2
 8018000:	d021      	beq.n	8018046 <_dtoa_r+0xabe>
 8018002:	2300      	movs	r3, #0
 8018004:	220a      	movs	r2, #10
 8018006:	9904      	ldr	r1, [sp, #16]
 8018008:	4620      	mov	r0, r4
 801800a:	f000 fc22 	bl	8018852 <__multadd>
 801800e:	45b1      	cmp	r9, r6
 8018010:	9004      	str	r0, [sp, #16]
 8018012:	f04f 0300 	mov.w	r3, #0
 8018016:	f04f 020a 	mov.w	r2, #10
 801801a:	4649      	mov	r1, r9
 801801c:	4620      	mov	r0, r4
 801801e:	d105      	bne.n	801802c <_dtoa_r+0xaa4>
 8018020:	f000 fc17 	bl	8018852 <__multadd>
 8018024:	4681      	mov	r9, r0
 8018026:	4606      	mov	r6, r0
 8018028:	9505      	str	r5, [sp, #20]
 801802a:	e776      	b.n	8017f1a <_dtoa_r+0x992>
 801802c:	f000 fc11 	bl	8018852 <__multadd>
 8018030:	4631      	mov	r1, r6
 8018032:	4681      	mov	r9, r0
 8018034:	2300      	movs	r3, #0
 8018036:	220a      	movs	r2, #10
 8018038:	4620      	mov	r0, r4
 801803a:	f000 fc0a 	bl	8018852 <__multadd>
 801803e:	4606      	mov	r6, r0
 8018040:	e7f2      	b.n	8018028 <_dtoa_r+0xaa0>
 8018042:	f04f 0900 	mov.w	r9, #0
 8018046:	2201      	movs	r2, #1
 8018048:	9904      	ldr	r1, [sp, #16]
 801804a:	4620      	mov	r0, r4
 801804c:	f000 fdb6 	bl	8018bbc <__lshift>
 8018050:	4639      	mov	r1, r7
 8018052:	9004      	str	r0, [sp, #16]
 8018054:	f000 fe06 	bl	8018c64 <__mcmp>
 8018058:	2800      	cmp	r0, #0
 801805a:	dcb6      	bgt.n	8017fca <_dtoa_r+0xa42>
 801805c:	d102      	bne.n	8018064 <_dtoa_r+0xadc>
 801805e:	f018 0f01 	tst.w	r8, #1
 8018062:	d1b2      	bne.n	8017fca <_dtoa_r+0xa42>
 8018064:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018068:	2b30      	cmp	r3, #48	; 0x30
 801806a:	f105 32ff 	add.w	r2, r5, #4294967295
 801806e:	f47f af0a 	bne.w	8017e86 <_dtoa_r+0x8fe>
 8018072:	4615      	mov	r5, r2
 8018074:	e7f6      	b.n	8018064 <_dtoa_r+0xadc>
 8018076:	4593      	cmp	fp, r2
 8018078:	d105      	bne.n	8018086 <_dtoa_r+0xafe>
 801807a:	2331      	movs	r3, #49	; 0x31
 801807c:	f10a 0a01 	add.w	sl, sl, #1
 8018080:	f88b 3000 	strb.w	r3, [fp]
 8018084:	e6ff      	b.n	8017e86 <_dtoa_r+0x8fe>
 8018086:	4615      	mov	r5, r2
 8018088:	e79f      	b.n	8017fca <_dtoa_r+0xa42>
 801808a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80180f0 <_dtoa_r+0xb68>
 801808e:	e007      	b.n	80180a0 <_dtoa_r+0xb18>
 8018090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018092:	f8df b060 	ldr.w	fp, [pc, #96]	; 80180f4 <_dtoa_r+0xb6c>
 8018096:	b11b      	cbz	r3, 80180a0 <_dtoa_r+0xb18>
 8018098:	f10b 0308 	add.w	r3, fp, #8
 801809c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801809e:	6013      	str	r3, [r2, #0]
 80180a0:	4658      	mov	r0, fp
 80180a2:	b017      	add	sp, #92	; 0x5c
 80180a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180a8:	9b06      	ldr	r3, [sp, #24]
 80180aa:	2b01      	cmp	r3, #1
 80180ac:	f77f ae35 	ble.w	8017d1a <_dtoa_r+0x792>
 80180b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180b2:	9307      	str	r3, [sp, #28]
 80180b4:	e649      	b.n	8017d4a <_dtoa_r+0x7c2>
 80180b6:	9b02      	ldr	r3, [sp, #8]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	dc03      	bgt.n	80180c4 <_dtoa_r+0xb3c>
 80180bc:	9b06      	ldr	r3, [sp, #24]
 80180be:	2b02      	cmp	r3, #2
 80180c0:	f73f aecc 	bgt.w	8017e5c <_dtoa_r+0x8d4>
 80180c4:	465d      	mov	r5, fp
 80180c6:	4639      	mov	r1, r7
 80180c8:	9804      	ldr	r0, [sp, #16]
 80180ca:	f7ff f9cf 	bl	801746c <quorem>
 80180ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80180d2:	f805 8b01 	strb.w	r8, [r5], #1
 80180d6:	9a02      	ldr	r2, [sp, #8]
 80180d8:	eba5 030b 	sub.w	r3, r5, fp
 80180dc:	429a      	cmp	r2, r3
 80180de:	ddb0      	ble.n	8018042 <_dtoa_r+0xaba>
 80180e0:	2300      	movs	r3, #0
 80180e2:	220a      	movs	r2, #10
 80180e4:	9904      	ldr	r1, [sp, #16]
 80180e6:	4620      	mov	r0, r4
 80180e8:	f000 fbb3 	bl	8018852 <__multadd>
 80180ec:	9004      	str	r0, [sp, #16]
 80180ee:	e7ea      	b.n	80180c6 <_dtoa_r+0xb3e>
 80180f0:	0801a7fb 	.word	0x0801a7fb
 80180f4:	0801a658 	.word	0x0801a658

080180f8 <rshift>:
 80180f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180fa:	6906      	ldr	r6, [r0, #16]
 80180fc:	114b      	asrs	r3, r1, #5
 80180fe:	429e      	cmp	r6, r3
 8018100:	f100 0414 	add.w	r4, r0, #20
 8018104:	dd30      	ble.n	8018168 <rshift+0x70>
 8018106:	f011 011f 	ands.w	r1, r1, #31
 801810a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801810e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018112:	d108      	bne.n	8018126 <rshift+0x2e>
 8018114:	4621      	mov	r1, r4
 8018116:	42b2      	cmp	r2, r6
 8018118:	460b      	mov	r3, r1
 801811a:	d211      	bcs.n	8018140 <rshift+0x48>
 801811c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018120:	f841 3b04 	str.w	r3, [r1], #4
 8018124:	e7f7      	b.n	8018116 <rshift+0x1e>
 8018126:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801812a:	f1c1 0c20 	rsb	ip, r1, #32
 801812e:	40cd      	lsrs	r5, r1
 8018130:	3204      	adds	r2, #4
 8018132:	4623      	mov	r3, r4
 8018134:	42b2      	cmp	r2, r6
 8018136:	4617      	mov	r7, r2
 8018138:	d30c      	bcc.n	8018154 <rshift+0x5c>
 801813a:	601d      	str	r5, [r3, #0]
 801813c:	b105      	cbz	r5, 8018140 <rshift+0x48>
 801813e:	3304      	adds	r3, #4
 8018140:	1b1a      	subs	r2, r3, r4
 8018142:	42a3      	cmp	r3, r4
 8018144:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018148:	bf08      	it	eq
 801814a:	2300      	moveq	r3, #0
 801814c:	6102      	str	r2, [r0, #16]
 801814e:	bf08      	it	eq
 8018150:	6143      	streq	r3, [r0, #20]
 8018152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018154:	683f      	ldr	r7, [r7, #0]
 8018156:	fa07 f70c 	lsl.w	r7, r7, ip
 801815a:	433d      	orrs	r5, r7
 801815c:	f843 5b04 	str.w	r5, [r3], #4
 8018160:	f852 5b04 	ldr.w	r5, [r2], #4
 8018164:	40cd      	lsrs	r5, r1
 8018166:	e7e5      	b.n	8018134 <rshift+0x3c>
 8018168:	4623      	mov	r3, r4
 801816a:	e7e9      	b.n	8018140 <rshift+0x48>

0801816c <__hexdig_fun>:
 801816c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018170:	2b09      	cmp	r3, #9
 8018172:	d802      	bhi.n	801817a <__hexdig_fun+0xe>
 8018174:	3820      	subs	r0, #32
 8018176:	b2c0      	uxtb	r0, r0
 8018178:	4770      	bx	lr
 801817a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801817e:	2b05      	cmp	r3, #5
 8018180:	d801      	bhi.n	8018186 <__hexdig_fun+0x1a>
 8018182:	3847      	subs	r0, #71	; 0x47
 8018184:	e7f7      	b.n	8018176 <__hexdig_fun+0xa>
 8018186:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801818a:	2b05      	cmp	r3, #5
 801818c:	d801      	bhi.n	8018192 <__hexdig_fun+0x26>
 801818e:	3827      	subs	r0, #39	; 0x27
 8018190:	e7f1      	b.n	8018176 <__hexdig_fun+0xa>
 8018192:	2000      	movs	r0, #0
 8018194:	4770      	bx	lr

08018196 <__gethex>:
 8018196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801819a:	b08b      	sub	sp, #44	; 0x2c
 801819c:	468a      	mov	sl, r1
 801819e:	9002      	str	r0, [sp, #8]
 80181a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80181a2:	9306      	str	r3, [sp, #24]
 80181a4:	4690      	mov	r8, r2
 80181a6:	f000 fadf 	bl	8018768 <__localeconv_l>
 80181aa:	6803      	ldr	r3, [r0, #0]
 80181ac:	9303      	str	r3, [sp, #12]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f7e8 f826 	bl	8000200 <strlen>
 80181b4:	9b03      	ldr	r3, [sp, #12]
 80181b6:	9001      	str	r0, [sp, #4]
 80181b8:	4403      	add	r3, r0
 80181ba:	f04f 0b00 	mov.w	fp, #0
 80181be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80181c2:	9307      	str	r3, [sp, #28]
 80181c4:	f8da 3000 	ldr.w	r3, [sl]
 80181c8:	3302      	adds	r3, #2
 80181ca:	461f      	mov	r7, r3
 80181cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80181d0:	2830      	cmp	r0, #48	; 0x30
 80181d2:	d06c      	beq.n	80182ae <__gethex+0x118>
 80181d4:	f7ff ffca 	bl	801816c <__hexdig_fun>
 80181d8:	4604      	mov	r4, r0
 80181da:	2800      	cmp	r0, #0
 80181dc:	d16a      	bne.n	80182b4 <__gethex+0x11e>
 80181de:	9a01      	ldr	r2, [sp, #4]
 80181e0:	9903      	ldr	r1, [sp, #12]
 80181e2:	4638      	mov	r0, r7
 80181e4:	f001 fc36 	bl	8019a54 <strncmp>
 80181e8:	2800      	cmp	r0, #0
 80181ea:	d166      	bne.n	80182ba <__gethex+0x124>
 80181ec:	9b01      	ldr	r3, [sp, #4]
 80181ee:	5cf8      	ldrb	r0, [r7, r3]
 80181f0:	18fe      	adds	r6, r7, r3
 80181f2:	f7ff ffbb 	bl	801816c <__hexdig_fun>
 80181f6:	2800      	cmp	r0, #0
 80181f8:	d062      	beq.n	80182c0 <__gethex+0x12a>
 80181fa:	4633      	mov	r3, r6
 80181fc:	7818      	ldrb	r0, [r3, #0]
 80181fe:	2830      	cmp	r0, #48	; 0x30
 8018200:	461f      	mov	r7, r3
 8018202:	f103 0301 	add.w	r3, r3, #1
 8018206:	d0f9      	beq.n	80181fc <__gethex+0x66>
 8018208:	f7ff ffb0 	bl	801816c <__hexdig_fun>
 801820c:	fab0 f580 	clz	r5, r0
 8018210:	096d      	lsrs	r5, r5, #5
 8018212:	4634      	mov	r4, r6
 8018214:	f04f 0b01 	mov.w	fp, #1
 8018218:	463a      	mov	r2, r7
 801821a:	4616      	mov	r6, r2
 801821c:	3201      	adds	r2, #1
 801821e:	7830      	ldrb	r0, [r6, #0]
 8018220:	f7ff ffa4 	bl	801816c <__hexdig_fun>
 8018224:	2800      	cmp	r0, #0
 8018226:	d1f8      	bne.n	801821a <__gethex+0x84>
 8018228:	9a01      	ldr	r2, [sp, #4]
 801822a:	9903      	ldr	r1, [sp, #12]
 801822c:	4630      	mov	r0, r6
 801822e:	f001 fc11 	bl	8019a54 <strncmp>
 8018232:	b950      	cbnz	r0, 801824a <__gethex+0xb4>
 8018234:	b954      	cbnz	r4, 801824c <__gethex+0xb6>
 8018236:	9b01      	ldr	r3, [sp, #4]
 8018238:	18f4      	adds	r4, r6, r3
 801823a:	4622      	mov	r2, r4
 801823c:	4616      	mov	r6, r2
 801823e:	3201      	adds	r2, #1
 8018240:	7830      	ldrb	r0, [r6, #0]
 8018242:	f7ff ff93 	bl	801816c <__hexdig_fun>
 8018246:	2800      	cmp	r0, #0
 8018248:	d1f8      	bne.n	801823c <__gethex+0xa6>
 801824a:	b10c      	cbz	r4, 8018250 <__gethex+0xba>
 801824c:	1ba4      	subs	r4, r4, r6
 801824e:	00a4      	lsls	r4, r4, #2
 8018250:	7833      	ldrb	r3, [r6, #0]
 8018252:	2b50      	cmp	r3, #80	; 0x50
 8018254:	d001      	beq.n	801825a <__gethex+0xc4>
 8018256:	2b70      	cmp	r3, #112	; 0x70
 8018258:	d140      	bne.n	80182dc <__gethex+0x146>
 801825a:	7873      	ldrb	r3, [r6, #1]
 801825c:	2b2b      	cmp	r3, #43	; 0x2b
 801825e:	d031      	beq.n	80182c4 <__gethex+0x12e>
 8018260:	2b2d      	cmp	r3, #45	; 0x2d
 8018262:	d033      	beq.n	80182cc <__gethex+0x136>
 8018264:	1c71      	adds	r1, r6, #1
 8018266:	f04f 0900 	mov.w	r9, #0
 801826a:	7808      	ldrb	r0, [r1, #0]
 801826c:	f7ff ff7e 	bl	801816c <__hexdig_fun>
 8018270:	1e43      	subs	r3, r0, #1
 8018272:	b2db      	uxtb	r3, r3
 8018274:	2b18      	cmp	r3, #24
 8018276:	d831      	bhi.n	80182dc <__gethex+0x146>
 8018278:	f1a0 0210 	sub.w	r2, r0, #16
 801827c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018280:	f7ff ff74 	bl	801816c <__hexdig_fun>
 8018284:	1e43      	subs	r3, r0, #1
 8018286:	b2db      	uxtb	r3, r3
 8018288:	2b18      	cmp	r3, #24
 801828a:	d922      	bls.n	80182d2 <__gethex+0x13c>
 801828c:	f1b9 0f00 	cmp.w	r9, #0
 8018290:	d000      	beq.n	8018294 <__gethex+0xfe>
 8018292:	4252      	negs	r2, r2
 8018294:	4414      	add	r4, r2
 8018296:	f8ca 1000 	str.w	r1, [sl]
 801829a:	b30d      	cbz	r5, 80182e0 <__gethex+0x14a>
 801829c:	f1bb 0f00 	cmp.w	fp, #0
 80182a0:	bf0c      	ite	eq
 80182a2:	2706      	moveq	r7, #6
 80182a4:	2700      	movne	r7, #0
 80182a6:	4638      	mov	r0, r7
 80182a8:	b00b      	add	sp, #44	; 0x2c
 80182aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ae:	f10b 0b01 	add.w	fp, fp, #1
 80182b2:	e78a      	b.n	80181ca <__gethex+0x34>
 80182b4:	2500      	movs	r5, #0
 80182b6:	462c      	mov	r4, r5
 80182b8:	e7ae      	b.n	8018218 <__gethex+0x82>
 80182ba:	463e      	mov	r6, r7
 80182bc:	2501      	movs	r5, #1
 80182be:	e7c7      	b.n	8018250 <__gethex+0xba>
 80182c0:	4604      	mov	r4, r0
 80182c2:	e7fb      	b.n	80182bc <__gethex+0x126>
 80182c4:	f04f 0900 	mov.w	r9, #0
 80182c8:	1cb1      	adds	r1, r6, #2
 80182ca:	e7ce      	b.n	801826a <__gethex+0xd4>
 80182cc:	f04f 0901 	mov.w	r9, #1
 80182d0:	e7fa      	b.n	80182c8 <__gethex+0x132>
 80182d2:	230a      	movs	r3, #10
 80182d4:	fb03 0202 	mla	r2, r3, r2, r0
 80182d8:	3a10      	subs	r2, #16
 80182da:	e7cf      	b.n	801827c <__gethex+0xe6>
 80182dc:	4631      	mov	r1, r6
 80182de:	e7da      	b.n	8018296 <__gethex+0x100>
 80182e0:	1bf3      	subs	r3, r6, r7
 80182e2:	3b01      	subs	r3, #1
 80182e4:	4629      	mov	r1, r5
 80182e6:	2b07      	cmp	r3, #7
 80182e8:	dc49      	bgt.n	801837e <__gethex+0x1e8>
 80182ea:	9802      	ldr	r0, [sp, #8]
 80182ec:	f000 fa66 	bl	80187bc <_Balloc>
 80182f0:	9b01      	ldr	r3, [sp, #4]
 80182f2:	f100 0914 	add.w	r9, r0, #20
 80182f6:	f04f 0b00 	mov.w	fp, #0
 80182fa:	f1c3 0301 	rsb	r3, r3, #1
 80182fe:	4605      	mov	r5, r0
 8018300:	f8cd 9010 	str.w	r9, [sp, #16]
 8018304:	46da      	mov	sl, fp
 8018306:	9308      	str	r3, [sp, #32]
 8018308:	42b7      	cmp	r7, r6
 801830a:	d33b      	bcc.n	8018384 <__gethex+0x1ee>
 801830c:	9804      	ldr	r0, [sp, #16]
 801830e:	f840 ab04 	str.w	sl, [r0], #4
 8018312:	eba0 0009 	sub.w	r0, r0, r9
 8018316:	1080      	asrs	r0, r0, #2
 8018318:	6128      	str	r0, [r5, #16]
 801831a:	0147      	lsls	r7, r0, #5
 801831c:	4650      	mov	r0, sl
 801831e:	f000 fb11 	bl	8018944 <__hi0bits>
 8018322:	f8d8 6000 	ldr.w	r6, [r8]
 8018326:	1a3f      	subs	r7, r7, r0
 8018328:	42b7      	cmp	r7, r6
 801832a:	dd64      	ble.n	80183f6 <__gethex+0x260>
 801832c:	1bbf      	subs	r7, r7, r6
 801832e:	4639      	mov	r1, r7
 8018330:	4628      	mov	r0, r5
 8018332:	f000 fe21 	bl	8018f78 <__any_on>
 8018336:	4682      	mov	sl, r0
 8018338:	b178      	cbz	r0, 801835a <__gethex+0x1c4>
 801833a:	1e7b      	subs	r3, r7, #1
 801833c:	1159      	asrs	r1, r3, #5
 801833e:	f003 021f 	and.w	r2, r3, #31
 8018342:	f04f 0a01 	mov.w	sl, #1
 8018346:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801834a:	fa0a f202 	lsl.w	r2, sl, r2
 801834e:	420a      	tst	r2, r1
 8018350:	d003      	beq.n	801835a <__gethex+0x1c4>
 8018352:	4553      	cmp	r3, sl
 8018354:	dc46      	bgt.n	80183e4 <__gethex+0x24e>
 8018356:	f04f 0a02 	mov.w	sl, #2
 801835a:	4639      	mov	r1, r7
 801835c:	4628      	mov	r0, r5
 801835e:	f7ff fecb 	bl	80180f8 <rshift>
 8018362:	443c      	add	r4, r7
 8018364:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018368:	42a3      	cmp	r3, r4
 801836a:	da52      	bge.n	8018412 <__gethex+0x27c>
 801836c:	4629      	mov	r1, r5
 801836e:	9802      	ldr	r0, [sp, #8]
 8018370:	f000 fa58 	bl	8018824 <_Bfree>
 8018374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018376:	2300      	movs	r3, #0
 8018378:	6013      	str	r3, [r2, #0]
 801837a:	27a3      	movs	r7, #163	; 0xa3
 801837c:	e793      	b.n	80182a6 <__gethex+0x110>
 801837e:	3101      	adds	r1, #1
 8018380:	105b      	asrs	r3, r3, #1
 8018382:	e7b0      	b.n	80182e6 <__gethex+0x150>
 8018384:	1e73      	subs	r3, r6, #1
 8018386:	9305      	str	r3, [sp, #20]
 8018388:	9a07      	ldr	r2, [sp, #28]
 801838a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801838e:	4293      	cmp	r3, r2
 8018390:	d018      	beq.n	80183c4 <__gethex+0x22e>
 8018392:	f1bb 0f20 	cmp.w	fp, #32
 8018396:	d107      	bne.n	80183a8 <__gethex+0x212>
 8018398:	9b04      	ldr	r3, [sp, #16]
 801839a:	f8c3 a000 	str.w	sl, [r3]
 801839e:	3304      	adds	r3, #4
 80183a0:	f04f 0a00 	mov.w	sl, #0
 80183a4:	9304      	str	r3, [sp, #16]
 80183a6:	46d3      	mov	fp, sl
 80183a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80183ac:	f7ff fede 	bl	801816c <__hexdig_fun>
 80183b0:	f000 000f 	and.w	r0, r0, #15
 80183b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80183b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80183bc:	f10b 0b04 	add.w	fp, fp, #4
 80183c0:	9b05      	ldr	r3, [sp, #20]
 80183c2:	e00d      	b.n	80183e0 <__gethex+0x24a>
 80183c4:	9b05      	ldr	r3, [sp, #20]
 80183c6:	9a08      	ldr	r2, [sp, #32]
 80183c8:	4413      	add	r3, r2
 80183ca:	42bb      	cmp	r3, r7
 80183cc:	d3e1      	bcc.n	8018392 <__gethex+0x1fc>
 80183ce:	4618      	mov	r0, r3
 80183d0:	9a01      	ldr	r2, [sp, #4]
 80183d2:	9903      	ldr	r1, [sp, #12]
 80183d4:	9309      	str	r3, [sp, #36]	; 0x24
 80183d6:	f001 fb3d 	bl	8019a54 <strncmp>
 80183da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183dc:	2800      	cmp	r0, #0
 80183de:	d1d8      	bne.n	8018392 <__gethex+0x1fc>
 80183e0:	461e      	mov	r6, r3
 80183e2:	e791      	b.n	8018308 <__gethex+0x172>
 80183e4:	1eb9      	subs	r1, r7, #2
 80183e6:	4628      	mov	r0, r5
 80183e8:	f000 fdc6 	bl	8018f78 <__any_on>
 80183ec:	2800      	cmp	r0, #0
 80183ee:	d0b2      	beq.n	8018356 <__gethex+0x1c0>
 80183f0:	f04f 0a03 	mov.w	sl, #3
 80183f4:	e7b1      	b.n	801835a <__gethex+0x1c4>
 80183f6:	da09      	bge.n	801840c <__gethex+0x276>
 80183f8:	1bf7      	subs	r7, r6, r7
 80183fa:	4629      	mov	r1, r5
 80183fc:	463a      	mov	r2, r7
 80183fe:	9802      	ldr	r0, [sp, #8]
 8018400:	f000 fbdc 	bl	8018bbc <__lshift>
 8018404:	1be4      	subs	r4, r4, r7
 8018406:	4605      	mov	r5, r0
 8018408:	f100 0914 	add.w	r9, r0, #20
 801840c:	f04f 0a00 	mov.w	sl, #0
 8018410:	e7a8      	b.n	8018364 <__gethex+0x1ce>
 8018412:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018416:	42a0      	cmp	r0, r4
 8018418:	dd6a      	ble.n	80184f0 <__gethex+0x35a>
 801841a:	1b04      	subs	r4, r0, r4
 801841c:	42a6      	cmp	r6, r4
 801841e:	dc2e      	bgt.n	801847e <__gethex+0x2e8>
 8018420:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018424:	2b02      	cmp	r3, #2
 8018426:	d022      	beq.n	801846e <__gethex+0x2d8>
 8018428:	2b03      	cmp	r3, #3
 801842a:	d024      	beq.n	8018476 <__gethex+0x2e0>
 801842c:	2b01      	cmp	r3, #1
 801842e:	d115      	bne.n	801845c <__gethex+0x2c6>
 8018430:	42a6      	cmp	r6, r4
 8018432:	d113      	bne.n	801845c <__gethex+0x2c6>
 8018434:	2e01      	cmp	r6, #1
 8018436:	dc0b      	bgt.n	8018450 <__gethex+0x2ba>
 8018438:	9a06      	ldr	r2, [sp, #24]
 801843a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801843e:	6013      	str	r3, [r2, #0]
 8018440:	2301      	movs	r3, #1
 8018442:	612b      	str	r3, [r5, #16]
 8018444:	f8c9 3000 	str.w	r3, [r9]
 8018448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801844a:	2762      	movs	r7, #98	; 0x62
 801844c:	601d      	str	r5, [r3, #0]
 801844e:	e72a      	b.n	80182a6 <__gethex+0x110>
 8018450:	1e71      	subs	r1, r6, #1
 8018452:	4628      	mov	r0, r5
 8018454:	f000 fd90 	bl	8018f78 <__any_on>
 8018458:	2800      	cmp	r0, #0
 801845a:	d1ed      	bne.n	8018438 <__gethex+0x2a2>
 801845c:	4629      	mov	r1, r5
 801845e:	9802      	ldr	r0, [sp, #8]
 8018460:	f000 f9e0 	bl	8018824 <_Bfree>
 8018464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018466:	2300      	movs	r3, #0
 8018468:	6013      	str	r3, [r2, #0]
 801846a:	2750      	movs	r7, #80	; 0x50
 801846c:	e71b      	b.n	80182a6 <__gethex+0x110>
 801846e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018470:	2b00      	cmp	r3, #0
 8018472:	d0e1      	beq.n	8018438 <__gethex+0x2a2>
 8018474:	e7f2      	b.n	801845c <__gethex+0x2c6>
 8018476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018478:	2b00      	cmp	r3, #0
 801847a:	d1dd      	bne.n	8018438 <__gethex+0x2a2>
 801847c:	e7ee      	b.n	801845c <__gethex+0x2c6>
 801847e:	1e67      	subs	r7, r4, #1
 8018480:	f1ba 0f00 	cmp.w	sl, #0
 8018484:	d131      	bne.n	80184ea <__gethex+0x354>
 8018486:	b127      	cbz	r7, 8018492 <__gethex+0x2fc>
 8018488:	4639      	mov	r1, r7
 801848a:	4628      	mov	r0, r5
 801848c:	f000 fd74 	bl	8018f78 <__any_on>
 8018490:	4682      	mov	sl, r0
 8018492:	117a      	asrs	r2, r7, #5
 8018494:	2301      	movs	r3, #1
 8018496:	f007 071f 	and.w	r7, r7, #31
 801849a:	fa03 f707 	lsl.w	r7, r3, r7
 801849e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80184a2:	4621      	mov	r1, r4
 80184a4:	421f      	tst	r7, r3
 80184a6:	4628      	mov	r0, r5
 80184a8:	bf18      	it	ne
 80184aa:	f04a 0a02 	orrne.w	sl, sl, #2
 80184ae:	1b36      	subs	r6, r6, r4
 80184b0:	f7ff fe22 	bl	80180f8 <rshift>
 80184b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80184b8:	2702      	movs	r7, #2
 80184ba:	f1ba 0f00 	cmp.w	sl, #0
 80184be:	d048      	beq.n	8018552 <__gethex+0x3bc>
 80184c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184c4:	2b02      	cmp	r3, #2
 80184c6:	d015      	beq.n	80184f4 <__gethex+0x35e>
 80184c8:	2b03      	cmp	r3, #3
 80184ca:	d017      	beq.n	80184fc <__gethex+0x366>
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	d109      	bne.n	80184e4 <__gethex+0x34e>
 80184d0:	f01a 0f02 	tst.w	sl, #2
 80184d4:	d006      	beq.n	80184e4 <__gethex+0x34e>
 80184d6:	f8d9 3000 	ldr.w	r3, [r9]
 80184da:	ea4a 0a03 	orr.w	sl, sl, r3
 80184de:	f01a 0f01 	tst.w	sl, #1
 80184e2:	d10e      	bne.n	8018502 <__gethex+0x36c>
 80184e4:	f047 0710 	orr.w	r7, r7, #16
 80184e8:	e033      	b.n	8018552 <__gethex+0x3bc>
 80184ea:	f04f 0a01 	mov.w	sl, #1
 80184ee:	e7d0      	b.n	8018492 <__gethex+0x2fc>
 80184f0:	2701      	movs	r7, #1
 80184f2:	e7e2      	b.n	80184ba <__gethex+0x324>
 80184f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184f6:	f1c3 0301 	rsb	r3, r3, #1
 80184fa:	9315      	str	r3, [sp, #84]	; 0x54
 80184fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d0f0      	beq.n	80184e4 <__gethex+0x34e>
 8018502:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018506:	f105 0314 	add.w	r3, r5, #20
 801850a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801850e:	eb03 010a 	add.w	r1, r3, sl
 8018512:	f04f 0c00 	mov.w	ip, #0
 8018516:	4618      	mov	r0, r3
 8018518:	f853 2b04 	ldr.w	r2, [r3], #4
 801851c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018520:	d01c      	beq.n	801855c <__gethex+0x3c6>
 8018522:	3201      	adds	r2, #1
 8018524:	6002      	str	r2, [r0, #0]
 8018526:	2f02      	cmp	r7, #2
 8018528:	f105 0314 	add.w	r3, r5, #20
 801852c:	d138      	bne.n	80185a0 <__gethex+0x40a>
 801852e:	f8d8 2000 	ldr.w	r2, [r8]
 8018532:	3a01      	subs	r2, #1
 8018534:	42b2      	cmp	r2, r6
 8018536:	d10a      	bne.n	801854e <__gethex+0x3b8>
 8018538:	1171      	asrs	r1, r6, #5
 801853a:	2201      	movs	r2, #1
 801853c:	f006 061f 	and.w	r6, r6, #31
 8018540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018544:	fa02 f606 	lsl.w	r6, r2, r6
 8018548:	421e      	tst	r6, r3
 801854a:	bf18      	it	ne
 801854c:	4617      	movne	r7, r2
 801854e:	f047 0720 	orr.w	r7, r7, #32
 8018552:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018554:	601d      	str	r5, [r3, #0]
 8018556:	9b06      	ldr	r3, [sp, #24]
 8018558:	601c      	str	r4, [r3, #0]
 801855a:	e6a4      	b.n	80182a6 <__gethex+0x110>
 801855c:	4299      	cmp	r1, r3
 801855e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018562:	d8d8      	bhi.n	8018516 <__gethex+0x380>
 8018564:	68ab      	ldr	r3, [r5, #8]
 8018566:	4599      	cmp	r9, r3
 8018568:	db12      	blt.n	8018590 <__gethex+0x3fa>
 801856a:	6869      	ldr	r1, [r5, #4]
 801856c:	9802      	ldr	r0, [sp, #8]
 801856e:	3101      	adds	r1, #1
 8018570:	f000 f924 	bl	80187bc <_Balloc>
 8018574:	692a      	ldr	r2, [r5, #16]
 8018576:	3202      	adds	r2, #2
 8018578:	f105 010c 	add.w	r1, r5, #12
 801857c:	4683      	mov	fp, r0
 801857e:	0092      	lsls	r2, r2, #2
 8018580:	300c      	adds	r0, #12
 8018582:	f7fd f9c5 	bl	8015910 <memcpy>
 8018586:	4629      	mov	r1, r5
 8018588:	9802      	ldr	r0, [sp, #8]
 801858a:	f000 f94b 	bl	8018824 <_Bfree>
 801858e:	465d      	mov	r5, fp
 8018590:	692b      	ldr	r3, [r5, #16]
 8018592:	1c5a      	adds	r2, r3, #1
 8018594:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018598:	612a      	str	r2, [r5, #16]
 801859a:	2201      	movs	r2, #1
 801859c:	615a      	str	r2, [r3, #20]
 801859e:	e7c2      	b.n	8018526 <__gethex+0x390>
 80185a0:	692a      	ldr	r2, [r5, #16]
 80185a2:	454a      	cmp	r2, r9
 80185a4:	dd0b      	ble.n	80185be <__gethex+0x428>
 80185a6:	2101      	movs	r1, #1
 80185a8:	4628      	mov	r0, r5
 80185aa:	f7ff fda5 	bl	80180f8 <rshift>
 80185ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185b2:	3401      	adds	r4, #1
 80185b4:	42a3      	cmp	r3, r4
 80185b6:	f6ff aed9 	blt.w	801836c <__gethex+0x1d6>
 80185ba:	2701      	movs	r7, #1
 80185bc:	e7c7      	b.n	801854e <__gethex+0x3b8>
 80185be:	f016 061f 	ands.w	r6, r6, #31
 80185c2:	d0fa      	beq.n	80185ba <__gethex+0x424>
 80185c4:	449a      	add	sl, r3
 80185c6:	f1c6 0620 	rsb	r6, r6, #32
 80185ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80185ce:	f000 f9b9 	bl	8018944 <__hi0bits>
 80185d2:	42b0      	cmp	r0, r6
 80185d4:	dbe7      	blt.n	80185a6 <__gethex+0x410>
 80185d6:	e7f0      	b.n	80185ba <__gethex+0x424>

080185d8 <L_shift>:
 80185d8:	f1c2 0208 	rsb	r2, r2, #8
 80185dc:	0092      	lsls	r2, r2, #2
 80185de:	b570      	push	{r4, r5, r6, lr}
 80185e0:	f1c2 0620 	rsb	r6, r2, #32
 80185e4:	6843      	ldr	r3, [r0, #4]
 80185e6:	6804      	ldr	r4, [r0, #0]
 80185e8:	fa03 f506 	lsl.w	r5, r3, r6
 80185ec:	432c      	orrs	r4, r5
 80185ee:	40d3      	lsrs	r3, r2
 80185f0:	6004      	str	r4, [r0, #0]
 80185f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80185f6:	4288      	cmp	r0, r1
 80185f8:	d3f4      	bcc.n	80185e4 <L_shift+0xc>
 80185fa:	bd70      	pop	{r4, r5, r6, pc}

080185fc <__match>:
 80185fc:	b530      	push	{r4, r5, lr}
 80185fe:	6803      	ldr	r3, [r0, #0]
 8018600:	3301      	adds	r3, #1
 8018602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018606:	b914      	cbnz	r4, 801860e <__match+0x12>
 8018608:	6003      	str	r3, [r0, #0]
 801860a:	2001      	movs	r0, #1
 801860c:	bd30      	pop	{r4, r5, pc}
 801860e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018616:	2d19      	cmp	r5, #25
 8018618:	bf98      	it	ls
 801861a:	3220      	addls	r2, #32
 801861c:	42a2      	cmp	r2, r4
 801861e:	d0f0      	beq.n	8018602 <__match+0x6>
 8018620:	2000      	movs	r0, #0
 8018622:	e7f3      	b.n	801860c <__match+0x10>

08018624 <__hexnan>:
 8018624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018628:	680b      	ldr	r3, [r1, #0]
 801862a:	6801      	ldr	r1, [r0, #0]
 801862c:	115f      	asrs	r7, r3, #5
 801862e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018632:	f013 031f 	ands.w	r3, r3, #31
 8018636:	b087      	sub	sp, #28
 8018638:	bf18      	it	ne
 801863a:	3704      	addne	r7, #4
 801863c:	2500      	movs	r5, #0
 801863e:	1f3e      	subs	r6, r7, #4
 8018640:	4682      	mov	sl, r0
 8018642:	4690      	mov	r8, r2
 8018644:	9301      	str	r3, [sp, #4]
 8018646:	f847 5c04 	str.w	r5, [r7, #-4]
 801864a:	46b1      	mov	r9, r6
 801864c:	4634      	mov	r4, r6
 801864e:	9502      	str	r5, [sp, #8]
 8018650:	46ab      	mov	fp, r5
 8018652:	784a      	ldrb	r2, [r1, #1]
 8018654:	1c4b      	adds	r3, r1, #1
 8018656:	9303      	str	r3, [sp, #12]
 8018658:	b342      	cbz	r2, 80186ac <__hexnan+0x88>
 801865a:	4610      	mov	r0, r2
 801865c:	9105      	str	r1, [sp, #20]
 801865e:	9204      	str	r2, [sp, #16]
 8018660:	f7ff fd84 	bl	801816c <__hexdig_fun>
 8018664:	2800      	cmp	r0, #0
 8018666:	d143      	bne.n	80186f0 <__hexnan+0xcc>
 8018668:	9a04      	ldr	r2, [sp, #16]
 801866a:	9905      	ldr	r1, [sp, #20]
 801866c:	2a20      	cmp	r2, #32
 801866e:	d818      	bhi.n	80186a2 <__hexnan+0x7e>
 8018670:	9b02      	ldr	r3, [sp, #8]
 8018672:	459b      	cmp	fp, r3
 8018674:	dd13      	ble.n	801869e <__hexnan+0x7a>
 8018676:	454c      	cmp	r4, r9
 8018678:	d206      	bcs.n	8018688 <__hexnan+0x64>
 801867a:	2d07      	cmp	r5, #7
 801867c:	dc04      	bgt.n	8018688 <__hexnan+0x64>
 801867e:	462a      	mov	r2, r5
 8018680:	4649      	mov	r1, r9
 8018682:	4620      	mov	r0, r4
 8018684:	f7ff ffa8 	bl	80185d8 <L_shift>
 8018688:	4544      	cmp	r4, r8
 801868a:	d944      	bls.n	8018716 <__hexnan+0xf2>
 801868c:	2300      	movs	r3, #0
 801868e:	f1a4 0904 	sub.w	r9, r4, #4
 8018692:	f844 3c04 	str.w	r3, [r4, #-4]
 8018696:	f8cd b008 	str.w	fp, [sp, #8]
 801869a:	464c      	mov	r4, r9
 801869c:	461d      	mov	r5, r3
 801869e:	9903      	ldr	r1, [sp, #12]
 80186a0:	e7d7      	b.n	8018652 <__hexnan+0x2e>
 80186a2:	2a29      	cmp	r2, #41	; 0x29
 80186a4:	d14a      	bne.n	801873c <__hexnan+0x118>
 80186a6:	3102      	adds	r1, #2
 80186a8:	f8ca 1000 	str.w	r1, [sl]
 80186ac:	f1bb 0f00 	cmp.w	fp, #0
 80186b0:	d044      	beq.n	801873c <__hexnan+0x118>
 80186b2:	454c      	cmp	r4, r9
 80186b4:	d206      	bcs.n	80186c4 <__hexnan+0xa0>
 80186b6:	2d07      	cmp	r5, #7
 80186b8:	dc04      	bgt.n	80186c4 <__hexnan+0xa0>
 80186ba:	462a      	mov	r2, r5
 80186bc:	4649      	mov	r1, r9
 80186be:	4620      	mov	r0, r4
 80186c0:	f7ff ff8a 	bl	80185d8 <L_shift>
 80186c4:	4544      	cmp	r4, r8
 80186c6:	d928      	bls.n	801871a <__hexnan+0xf6>
 80186c8:	4643      	mov	r3, r8
 80186ca:	f854 2b04 	ldr.w	r2, [r4], #4
 80186ce:	f843 2b04 	str.w	r2, [r3], #4
 80186d2:	42a6      	cmp	r6, r4
 80186d4:	d2f9      	bcs.n	80186ca <__hexnan+0xa6>
 80186d6:	2200      	movs	r2, #0
 80186d8:	f843 2b04 	str.w	r2, [r3], #4
 80186dc:	429e      	cmp	r6, r3
 80186de:	d2fb      	bcs.n	80186d8 <__hexnan+0xb4>
 80186e0:	6833      	ldr	r3, [r6, #0]
 80186e2:	b91b      	cbnz	r3, 80186ec <__hexnan+0xc8>
 80186e4:	4546      	cmp	r6, r8
 80186e6:	d127      	bne.n	8018738 <__hexnan+0x114>
 80186e8:	2301      	movs	r3, #1
 80186ea:	6033      	str	r3, [r6, #0]
 80186ec:	2005      	movs	r0, #5
 80186ee:	e026      	b.n	801873e <__hexnan+0x11a>
 80186f0:	3501      	adds	r5, #1
 80186f2:	2d08      	cmp	r5, #8
 80186f4:	f10b 0b01 	add.w	fp, fp, #1
 80186f8:	dd06      	ble.n	8018708 <__hexnan+0xe4>
 80186fa:	4544      	cmp	r4, r8
 80186fc:	d9cf      	bls.n	801869e <__hexnan+0x7a>
 80186fe:	2300      	movs	r3, #0
 8018700:	f844 3c04 	str.w	r3, [r4, #-4]
 8018704:	2501      	movs	r5, #1
 8018706:	3c04      	subs	r4, #4
 8018708:	6822      	ldr	r2, [r4, #0]
 801870a:	f000 000f 	and.w	r0, r0, #15
 801870e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018712:	6020      	str	r0, [r4, #0]
 8018714:	e7c3      	b.n	801869e <__hexnan+0x7a>
 8018716:	2508      	movs	r5, #8
 8018718:	e7c1      	b.n	801869e <__hexnan+0x7a>
 801871a:	9b01      	ldr	r3, [sp, #4]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d0df      	beq.n	80186e0 <__hexnan+0xbc>
 8018720:	f04f 32ff 	mov.w	r2, #4294967295
 8018724:	f1c3 0320 	rsb	r3, r3, #32
 8018728:	fa22 f303 	lsr.w	r3, r2, r3
 801872c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018730:	401a      	ands	r2, r3
 8018732:	f847 2c04 	str.w	r2, [r7, #-4]
 8018736:	e7d3      	b.n	80186e0 <__hexnan+0xbc>
 8018738:	3e04      	subs	r6, #4
 801873a:	e7d1      	b.n	80186e0 <__hexnan+0xbc>
 801873c:	2004      	movs	r0, #4
 801873e:	b007      	add	sp, #28
 8018740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018744 <__locale_ctype_ptr_l>:
 8018744:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018748:	4770      	bx	lr
	...

0801874c <__locale_ctype_ptr>:
 801874c:	4b04      	ldr	r3, [pc, #16]	; (8018760 <__locale_ctype_ptr+0x14>)
 801874e:	4a05      	ldr	r2, [pc, #20]	; (8018764 <__locale_ctype_ptr+0x18>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	6a1b      	ldr	r3, [r3, #32]
 8018754:	2b00      	cmp	r3, #0
 8018756:	bf08      	it	eq
 8018758:	4613      	moveq	r3, r2
 801875a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801875e:	4770      	bx	lr
 8018760:	2000000c 	.word	0x2000000c
 8018764:	20000070 	.word	0x20000070

08018768 <__localeconv_l>:
 8018768:	30f0      	adds	r0, #240	; 0xf0
 801876a:	4770      	bx	lr

0801876c <_localeconv_r>:
 801876c:	4b04      	ldr	r3, [pc, #16]	; (8018780 <_localeconv_r+0x14>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	6a18      	ldr	r0, [r3, #32]
 8018772:	4b04      	ldr	r3, [pc, #16]	; (8018784 <_localeconv_r+0x18>)
 8018774:	2800      	cmp	r0, #0
 8018776:	bf08      	it	eq
 8018778:	4618      	moveq	r0, r3
 801877a:	30f0      	adds	r0, #240	; 0xf0
 801877c:	4770      	bx	lr
 801877e:	bf00      	nop
 8018780:	2000000c 	.word	0x2000000c
 8018784:	20000070 	.word	0x20000070

08018788 <malloc>:
 8018788:	4b02      	ldr	r3, [pc, #8]	; (8018794 <malloc+0xc>)
 801878a:	4601      	mov	r1, r0
 801878c:	6818      	ldr	r0, [r3, #0]
 801878e:	f000 bc71 	b.w	8019074 <_malloc_r>
 8018792:	bf00      	nop
 8018794:	2000000c 	.word	0x2000000c

08018798 <__ascii_mbtowc>:
 8018798:	b082      	sub	sp, #8
 801879a:	b901      	cbnz	r1, 801879e <__ascii_mbtowc+0x6>
 801879c:	a901      	add	r1, sp, #4
 801879e:	b142      	cbz	r2, 80187b2 <__ascii_mbtowc+0x1a>
 80187a0:	b14b      	cbz	r3, 80187b6 <__ascii_mbtowc+0x1e>
 80187a2:	7813      	ldrb	r3, [r2, #0]
 80187a4:	600b      	str	r3, [r1, #0]
 80187a6:	7812      	ldrb	r2, [r2, #0]
 80187a8:	1c10      	adds	r0, r2, #0
 80187aa:	bf18      	it	ne
 80187ac:	2001      	movne	r0, #1
 80187ae:	b002      	add	sp, #8
 80187b0:	4770      	bx	lr
 80187b2:	4610      	mov	r0, r2
 80187b4:	e7fb      	b.n	80187ae <__ascii_mbtowc+0x16>
 80187b6:	f06f 0001 	mvn.w	r0, #1
 80187ba:	e7f8      	b.n	80187ae <__ascii_mbtowc+0x16>

080187bc <_Balloc>:
 80187bc:	b570      	push	{r4, r5, r6, lr}
 80187be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80187c0:	4604      	mov	r4, r0
 80187c2:	460e      	mov	r6, r1
 80187c4:	b93d      	cbnz	r5, 80187d6 <_Balloc+0x1a>
 80187c6:	2010      	movs	r0, #16
 80187c8:	f7ff ffde 	bl	8018788 <malloc>
 80187cc:	6260      	str	r0, [r4, #36]	; 0x24
 80187ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80187d2:	6005      	str	r5, [r0, #0]
 80187d4:	60c5      	str	r5, [r0, #12]
 80187d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80187d8:	68eb      	ldr	r3, [r5, #12]
 80187da:	b183      	cbz	r3, 80187fe <_Balloc+0x42>
 80187dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187de:	68db      	ldr	r3, [r3, #12]
 80187e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80187e4:	b9b8      	cbnz	r0, 8018816 <_Balloc+0x5a>
 80187e6:	2101      	movs	r1, #1
 80187e8:	fa01 f506 	lsl.w	r5, r1, r6
 80187ec:	1d6a      	adds	r2, r5, #5
 80187ee:	0092      	lsls	r2, r2, #2
 80187f0:	4620      	mov	r0, r4
 80187f2:	f000 fbe2 	bl	8018fba <_calloc_r>
 80187f6:	b160      	cbz	r0, 8018812 <_Balloc+0x56>
 80187f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80187fc:	e00e      	b.n	801881c <_Balloc+0x60>
 80187fe:	2221      	movs	r2, #33	; 0x21
 8018800:	2104      	movs	r1, #4
 8018802:	4620      	mov	r0, r4
 8018804:	f000 fbd9 	bl	8018fba <_calloc_r>
 8018808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801880a:	60e8      	str	r0, [r5, #12]
 801880c:	68db      	ldr	r3, [r3, #12]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d1e4      	bne.n	80187dc <_Balloc+0x20>
 8018812:	2000      	movs	r0, #0
 8018814:	bd70      	pop	{r4, r5, r6, pc}
 8018816:	6802      	ldr	r2, [r0, #0]
 8018818:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801881c:	2300      	movs	r3, #0
 801881e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018822:	e7f7      	b.n	8018814 <_Balloc+0x58>

08018824 <_Bfree>:
 8018824:	b570      	push	{r4, r5, r6, lr}
 8018826:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018828:	4606      	mov	r6, r0
 801882a:	460d      	mov	r5, r1
 801882c:	b93c      	cbnz	r4, 801883e <_Bfree+0x1a>
 801882e:	2010      	movs	r0, #16
 8018830:	f7ff ffaa 	bl	8018788 <malloc>
 8018834:	6270      	str	r0, [r6, #36]	; 0x24
 8018836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801883a:	6004      	str	r4, [r0, #0]
 801883c:	60c4      	str	r4, [r0, #12]
 801883e:	b13d      	cbz	r5, 8018850 <_Bfree+0x2c>
 8018840:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018842:	686a      	ldr	r2, [r5, #4]
 8018844:	68db      	ldr	r3, [r3, #12]
 8018846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801884a:	6029      	str	r1, [r5, #0]
 801884c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018850:	bd70      	pop	{r4, r5, r6, pc}

08018852 <__multadd>:
 8018852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018856:	690d      	ldr	r5, [r1, #16]
 8018858:	461f      	mov	r7, r3
 801885a:	4606      	mov	r6, r0
 801885c:	460c      	mov	r4, r1
 801885e:	f101 0c14 	add.w	ip, r1, #20
 8018862:	2300      	movs	r3, #0
 8018864:	f8dc 0000 	ldr.w	r0, [ip]
 8018868:	b281      	uxth	r1, r0
 801886a:	fb02 7101 	mla	r1, r2, r1, r7
 801886e:	0c0f      	lsrs	r7, r1, #16
 8018870:	0c00      	lsrs	r0, r0, #16
 8018872:	fb02 7000 	mla	r0, r2, r0, r7
 8018876:	b289      	uxth	r1, r1
 8018878:	3301      	adds	r3, #1
 801887a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801887e:	429d      	cmp	r5, r3
 8018880:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018884:	f84c 1b04 	str.w	r1, [ip], #4
 8018888:	dcec      	bgt.n	8018864 <__multadd+0x12>
 801888a:	b1d7      	cbz	r7, 80188c2 <__multadd+0x70>
 801888c:	68a3      	ldr	r3, [r4, #8]
 801888e:	42ab      	cmp	r3, r5
 8018890:	dc12      	bgt.n	80188b8 <__multadd+0x66>
 8018892:	6861      	ldr	r1, [r4, #4]
 8018894:	4630      	mov	r0, r6
 8018896:	3101      	adds	r1, #1
 8018898:	f7ff ff90 	bl	80187bc <_Balloc>
 801889c:	6922      	ldr	r2, [r4, #16]
 801889e:	3202      	adds	r2, #2
 80188a0:	f104 010c 	add.w	r1, r4, #12
 80188a4:	4680      	mov	r8, r0
 80188a6:	0092      	lsls	r2, r2, #2
 80188a8:	300c      	adds	r0, #12
 80188aa:	f7fd f831 	bl	8015910 <memcpy>
 80188ae:	4621      	mov	r1, r4
 80188b0:	4630      	mov	r0, r6
 80188b2:	f7ff ffb7 	bl	8018824 <_Bfree>
 80188b6:	4644      	mov	r4, r8
 80188b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80188bc:	3501      	adds	r5, #1
 80188be:	615f      	str	r7, [r3, #20]
 80188c0:	6125      	str	r5, [r4, #16]
 80188c2:	4620      	mov	r0, r4
 80188c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188c8 <__s2b>:
 80188c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188cc:	460c      	mov	r4, r1
 80188ce:	4615      	mov	r5, r2
 80188d0:	461f      	mov	r7, r3
 80188d2:	2209      	movs	r2, #9
 80188d4:	3308      	adds	r3, #8
 80188d6:	4606      	mov	r6, r0
 80188d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80188dc:	2100      	movs	r1, #0
 80188de:	2201      	movs	r2, #1
 80188e0:	429a      	cmp	r2, r3
 80188e2:	db20      	blt.n	8018926 <__s2b+0x5e>
 80188e4:	4630      	mov	r0, r6
 80188e6:	f7ff ff69 	bl	80187bc <_Balloc>
 80188ea:	9b08      	ldr	r3, [sp, #32]
 80188ec:	6143      	str	r3, [r0, #20]
 80188ee:	2d09      	cmp	r5, #9
 80188f0:	f04f 0301 	mov.w	r3, #1
 80188f4:	6103      	str	r3, [r0, #16]
 80188f6:	dd19      	ble.n	801892c <__s2b+0x64>
 80188f8:	f104 0809 	add.w	r8, r4, #9
 80188fc:	46c1      	mov	r9, r8
 80188fe:	442c      	add	r4, r5
 8018900:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018904:	4601      	mov	r1, r0
 8018906:	3b30      	subs	r3, #48	; 0x30
 8018908:	220a      	movs	r2, #10
 801890a:	4630      	mov	r0, r6
 801890c:	f7ff ffa1 	bl	8018852 <__multadd>
 8018910:	45a1      	cmp	r9, r4
 8018912:	d1f5      	bne.n	8018900 <__s2b+0x38>
 8018914:	eb08 0405 	add.w	r4, r8, r5
 8018918:	3c08      	subs	r4, #8
 801891a:	1b2d      	subs	r5, r5, r4
 801891c:	1963      	adds	r3, r4, r5
 801891e:	42bb      	cmp	r3, r7
 8018920:	db07      	blt.n	8018932 <__s2b+0x6a>
 8018922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018926:	0052      	lsls	r2, r2, #1
 8018928:	3101      	adds	r1, #1
 801892a:	e7d9      	b.n	80188e0 <__s2b+0x18>
 801892c:	340a      	adds	r4, #10
 801892e:	2509      	movs	r5, #9
 8018930:	e7f3      	b.n	801891a <__s2b+0x52>
 8018932:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018936:	4601      	mov	r1, r0
 8018938:	3b30      	subs	r3, #48	; 0x30
 801893a:	220a      	movs	r2, #10
 801893c:	4630      	mov	r0, r6
 801893e:	f7ff ff88 	bl	8018852 <__multadd>
 8018942:	e7eb      	b.n	801891c <__s2b+0x54>

08018944 <__hi0bits>:
 8018944:	0c02      	lsrs	r2, r0, #16
 8018946:	0412      	lsls	r2, r2, #16
 8018948:	4603      	mov	r3, r0
 801894a:	b9b2      	cbnz	r2, 801897a <__hi0bits+0x36>
 801894c:	0403      	lsls	r3, r0, #16
 801894e:	2010      	movs	r0, #16
 8018950:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018954:	bf04      	itt	eq
 8018956:	021b      	lsleq	r3, r3, #8
 8018958:	3008      	addeq	r0, #8
 801895a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801895e:	bf04      	itt	eq
 8018960:	011b      	lsleq	r3, r3, #4
 8018962:	3004      	addeq	r0, #4
 8018964:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018968:	bf04      	itt	eq
 801896a:	009b      	lsleq	r3, r3, #2
 801896c:	3002      	addeq	r0, #2
 801896e:	2b00      	cmp	r3, #0
 8018970:	db06      	blt.n	8018980 <__hi0bits+0x3c>
 8018972:	005b      	lsls	r3, r3, #1
 8018974:	d503      	bpl.n	801897e <__hi0bits+0x3a>
 8018976:	3001      	adds	r0, #1
 8018978:	4770      	bx	lr
 801897a:	2000      	movs	r0, #0
 801897c:	e7e8      	b.n	8018950 <__hi0bits+0xc>
 801897e:	2020      	movs	r0, #32
 8018980:	4770      	bx	lr

08018982 <__lo0bits>:
 8018982:	6803      	ldr	r3, [r0, #0]
 8018984:	f013 0207 	ands.w	r2, r3, #7
 8018988:	4601      	mov	r1, r0
 801898a:	d00b      	beq.n	80189a4 <__lo0bits+0x22>
 801898c:	07da      	lsls	r2, r3, #31
 801898e:	d423      	bmi.n	80189d8 <__lo0bits+0x56>
 8018990:	0798      	lsls	r0, r3, #30
 8018992:	bf49      	itett	mi
 8018994:	085b      	lsrmi	r3, r3, #1
 8018996:	089b      	lsrpl	r3, r3, #2
 8018998:	2001      	movmi	r0, #1
 801899a:	600b      	strmi	r3, [r1, #0]
 801899c:	bf5c      	itt	pl
 801899e:	600b      	strpl	r3, [r1, #0]
 80189a0:	2002      	movpl	r0, #2
 80189a2:	4770      	bx	lr
 80189a4:	b298      	uxth	r0, r3
 80189a6:	b9a8      	cbnz	r0, 80189d4 <__lo0bits+0x52>
 80189a8:	0c1b      	lsrs	r3, r3, #16
 80189aa:	2010      	movs	r0, #16
 80189ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80189b0:	bf04      	itt	eq
 80189b2:	0a1b      	lsreq	r3, r3, #8
 80189b4:	3008      	addeq	r0, #8
 80189b6:	071a      	lsls	r2, r3, #28
 80189b8:	bf04      	itt	eq
 80189ba:	091b      	lsreq	r3, r3, #4
 80189bc:	3004      	addeq	r0, #4
 80189be:	079a      	lsls	r2, r3, #30
 80189c0:	bf04      	itt	eq
 80189c2:	089b      	lsreq	r3, r3, #2
 80189c4:	3002      	addeq	r0, #2
 80189c6:	07da      	lsls	r2, r3, #31
 80189c8:	d402      	bmi.n	80189d0 <__lo0bits+0x4e>
 80189ca:	085b      	lsrs	r3, r3, #1
 80189cc:	d006      	beq.n	80189dc <__lo0bits+0x5a>
 80189ce:	3001      	adds	r0, #1
 80189d0:	600b      	str	r3, [r1, #0]
 80189d2:	4770      	bx	lr
 80189d4:	4610      	mov	r0, r2
 80189d6:	e7e9      	b.n	80189ac <__lo0bits+0x2a>
 80189d8:	2000      	movs	r0, #0
 80189da:	4770      	bx	lr
 80189dc:	2020      	movs	r0, #32
 80189de:	4770      	bx	lr

080189e0 <__i2b>:
 80189e0:	b510      	push	{r4, lr}
 80189e2:	460c      	mov	r4, r1
 80189e4:	2101      	movs	r1, #1
 80189e6:	f7ff fee9 	bl	80187bc <_Balloc>
 80189ea:	2201      	movs	r2, #1
 80189ec:	6144      	str	r4, [r0, #20]
 80189ee:	6102      	str	r2, [r0, #16]
 80189f0:	bd10      	pop	{r4, pc}

080189f2 <__multiply>:
 80189f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f6:	4614      	mov	r4, r2
 80189f8:	690a      	ldr	r2, [r1, #16]
 80189fa:	6923      	ldr	r3, [r4, #16]
 80189fc:	429a      	cmp	r2, r3
 80189fe:	bfb8      	it	lt
 8018a00:	460b      	movlt	r3, r1
 8018a02:	4688      	mov	r8, r1
 8018a04:	bfbc      	itt	lt
 8018a06:	46a0      	movlt	r8, r4
 8018a08:	461c      	movlt	r4, r3
 8018a0a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018a0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a16:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018a1a:	eb07 0609 	add.w	r6, r7, r9
 8018a1e:	42b3      	cmp	r3, r6
 8018a20:	bfb8      	it	lt
 8018a22:	3101      	addlt	r1, #1
 8018a24:	f7ff feca 	bl	80187bc <_Balloc>
 8018a28:	f100 0514 	add.w	r5, r0, #20
 8018a2c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018a30:	462b      	mov	r3, r5
 8018a32:	2200      	movs	r2, #0
 8018a34:	4573      	cmp	r3, lr
 8018a36:	d316      	bcc.n	8018a66 <__multiply+0x74>
 8018a38:	f104 0214 	add.w	r2, r4, #20
 8018a3c:	f108 0114 	add.w	r1, r8, #20
 8018a40:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018a44:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018a48:	9300      	str	r3, [sp, #0]
 8018a4a:	9b00      	ldr	r3, [sp, #0]
 8018a4c:	9201      	str	r2, [sp, #4]
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	d80c      	bhi.n	8018a6c <__multiply+0x7a>
 8018a52:	2e00      	cmp	r6, #0
 8018a54:	dd03      	ble.n	8018a5e <__multiply+0x6c>
 8018a56:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d05d      	beq.n	8018b1a <__multiply+0x128>
 8018a5e:	6106      	str	r6, [r0, #16]
 8018a60:	b003      	add	sp, #12
 8018a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a66:	f843 2b04 	str.w	r2, [r3], #4
 8018a6a:	e7e3      	b.n	8018a34 <__multiply+0x42>
 8018a6c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018a70:	f1bb 0f00 	cmp.w	fp, #0
 8018a74:	d023      	beq.n	8018abe <__multiply+0xcc>
 8018a76:	4689      	mov	r9, r1
 8018a78:	46ac      	mov	ip, r5
 8018a7a:	f04f 0800 	mov.w	r8, #0
 8018a7e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018a82:	f8dc a000 	ldr.w	sl, [ip]
 8018a86:	b2a3      	uxth	r3, r4
 8018a88:	fa1f fa8a 	uxth.w	sl, sl
 8018a8c:	fb0b a303 	mla	r3, fp, r3, sl
 8018a90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018a94:	f8dc 4000 	ldr.w	r4, [ip]
 8018a98:	4443      	add	r3, r8
 8018a9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a9e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018aa2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018aa6:	46e2      	mov	sl, ip
 8018aa8:	b29b      	uxth	r3, r3
 8018aaa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018aae:	454f      	cmp	r7, r9
 8018ab0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018ab4:	f84a 3b04 	str.w	r3, [sl], #4
 8018ab8:	d82b      	bhi.n	8018b12 <__multiply+0x120>
 8018aba:	f8cc 8004 	str.w	r8, [ip, #4]
 8018abe:	9b01      	ldr	r3, [sp, #4]
 8018ac0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018ac4:	3204      	adds	r2, #4
 8018ac6:	f1ba 0f00 	cmp.w	sl, #0
 8018aca:	d020      	beq.n	8018b0e <__multiply+0x11c>
 8018acc:	682b      	ldr	r3, [r5, #0]
 8018ace:	4689      	mov	r9, r1
 8018ad0:	46a8      	mov	r8, r5
 8018ad2:	f04f 0b00 	mov.w	fp, #0
 8018ad6:	f8b9 c000 	ldrh.w	ip, [r9]
 8018ada:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018ade:	fb0a 440c 	mla	r4, sl, ip, r4
 8018ae2:	445c      	add	r4, fp
 8018ae4:	46c4      	mov	ip, r8
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018aec:	f84c 3b04 	str.w	r3, [ip], #4
 8018af0:	f859 3b04 	ldr.w	r3, [r9], #4
 8018af4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018af8:	0c1b      	lsrs	r3, r3, #16
 8018afa:	fb0a b303 	mla	r3, sl, r3, fp
 8018afe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018b02:	454f      	cmp	r7, r9
 8018b04:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018b08:	d805      	bhi.n	8018b16 <__multiply+0x124>
 8018b0a:	f8c8 3004 	str.w	r3, [r8, #4]
 8018b0e:	3504      	adds	r5, #4
 8018b10:	e79b      	b.n	8018a4a <__multiply+0x58>
 8018b12:	46d4      	mov	ip, sl
 8018b14:	e7b3      	b.n	8018a7e <__multiply+0x8c>
 8018b16:	46e0      	mov	r8, ip
 8018b18:	e7dd      	b.n	8018ad6 <__multiply+0xe4>
 8018b1a:	3e01      	subs	r6, #1
 8018b1c:	e799      	b.n	8018a52 <__multiply+0x60>
	...

08018b20 <__pow5mult>:
 8018b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b24:	4615      	mov	r5, r2
 8018b26:	f012 0203 	ands.w	r2, r2, #3
 8018b2a:	4606      	mov	r6, r0
 8018b2c:	460f      	mov	r7, r1
 8018b2e:	d007      	beq.n	8018b40 <__pow5mult+0x20>
 8018b30:	3a01      	subs	r2, #1
 8018b32:	4c21      	ldr	r4, [pc, #132]	; (8018bb8 <__pow5mult+0x98>)
 8018b34:	2300      	movs	r3, #0
 8018b36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018b3a:	f7ff fe8a 	bl	8018852 <__multadd>
 8018b3e:	4607      	mov	r7, r0
 8018b40:	10ad      	asrs	r5, r5, #2
 8018b42:	d035      	beq.n	8018bb0 <__pow5mult+0x90>
 8018b44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018b46:	b93c      	cbnz	r4, 8018b58 <__pow5mult+0x38>
 8018b48:	2010      	movs	r0, #16
 8018b4a:	f7ff fe1d 	bl	8018788 <malloc>
 8018b4e:	6270      	str	r0, [r6, #36]	; 0x24
 8018b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b54:	6004      	str	r4, [r0, #0]
 8018b56:	60c4      	str	r4, [r0, #12]
 8018b58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018b60:	b94c      	cbnz	r4, 8018b76 <__pow5mult+0x56>
 8018b62:	f240 2171 	movw	r1, #625	; 0x271
 8018b66:	4630      	mov	r0, r6
 8018b68:	f7ff ff3a 	bl	80189e0 <__i2b>
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018b72:	4604      	mov	r4, r0
 8018b74:	6003      	str	r3, [r0, #0]
 8018b76:	f04f 0800 	mov.w	r8, #0
 8018b7a:	07eb      	lsls	r3, r5, #31
 8018b7c:	d50a      	bpl.n	8018b94 <__pow5mult+0x74>
 8018b7e:	4639      	mov	r1, r7
 8018b80:	4622      	mov	r2, r4
 8018b82:	4630      	mov	r0, r6
 8018b84:	f7ff ff35 	bl	80189f2 <__multiply>
 8018b88:	4639      	mov	r1, r7
 8018b8a:	4681      	mov	r9, r0
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	f7ff fe49 	bl	8018824 <_Bfree>
 8018b92:	464f      	mov	r7, r9
 8018b94:	106d      	asrs	r5, r5, #1
 8018b96:	d00b      	beq.n	8018bb0 <__pow5mult+0x90>
 8018b98:	6820      	ldr	r0, [r4, #0]
 8018b9a:	b938      	cbnz	r0, 8018bac <__pow5mult+0x8c>
 8018b9c:	4622      	mov	r2, r4
 8018b9e:	4621      	mov	r1, r4
 8018ba0:	4630      	mov	r0, r6
 8018ba2:	f7ff ff26 	bl	80189f2 <__multiply>
 8018ba6:	6020      	str	r0, [r4, #0]
 8018ba8:	f8c0 8000 	str.w	r8, [r0]
 8018bac:	4604      	mov	r4, r0
 8018bae:	e7e4      	b.n	8018b7a <__pow5mult+0x5a>
 8018bb0:	4638      	mov	r0, r7
 8018bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bb6:	bf00      	nop
 8018bb8:	0801a7c8 	.word	0x0801a7c8

08018bbc <__lshift>:
 8018bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bc0:	460c      	mov	r4, r1
 8018bc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018bc6:	6923      	ldr	r3, [r4, #16]
 8018bc8:	6849      	ldr	r1, [r1, #4]
 8018bca:	eb0a 0903 	add.w	r9, sl, r3
 8018bce:	68a3      	ldr	r3, [r4, #8]
 8018bd0:	4607      	mov	r7, r0
 8018bd2:	4616      	mov	r6, r2
 8018bd4:	f109 0501 	add.w	r5, r9, #1
 8018bd8:	42ab      	cmp	r3, r5
 8018bda:	db32      	blt.n	8018c42 <__lshift+0x86>
 8018bdc:	4638      	mov	r0, r7
 8018bde:	f7ff fded 	bl	80187bc <_Balloc>
 8018be2:	2300      	movs	r3, #0
 8018be4:	4680      	mov	r8, r0
 8018be6:	f100 0114 	add.w	r1, r0, #20
 8018bea:	461a      	mov	r2, r3
 8018bec:	4553      	cmp	r3, sl
 8018bee:	db2b      	blt.n	8018c48 <__lshift+0x8c>
 8018bf0:	6920      	ldr	r0, [r4, #16]
 8018bf2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018bf6:	f104 0314 	add.w	r3, r4, #20
 8018bfa:	f016 021f 	ands.w	r2, r6, #31
 8018bfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018c06:	d025      	beq.n	8018c54 <__lshift+0x98>
 8018c08:	f1c2 0e20 	rsb	lr, r2, #32
 8018c0c:	2000      	movs	r0, #0
 8018c0e:	681e      	ldr	r6, [r3, #0]
 8018c10:	468a      	mov	sl, r1
 8018c12:	4096      	lsls	r6, r2
 8018c14:	4330      	orrs	r0, r6
 8018c16:	f84a 0b04 	str.w	r0, [sl], #4
 8018c1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018c1e:	459c      	cmp	ip, r3
 8018c20:	fa20 f00e 	lsr.w	r0, r0, lr
 8018c24:	d814      	bhi.n	8018c50 <__lshift+0x94>
 8018c26:	6048      	str	r0, [r1, #4]
 8018c28:	b108      	cbz	r0, 8018c2e <__lshift+0x72>
 8018c2a:	f109 0502 	add.w	r5, r9, #2
 8018c2e:	3d01      	subs	r5, #1
 8018c30:	4638      	mov	r0, r7
 8018c32:	f8c8 5010 	str.w	r5, [r8, #16]
 8018c36:	4621      	mov	r1, r4
 8018c38:	f7ff fdf4 	bl	8018824 <_Bfree>
 8018c3c:	4640      	mov	r0, r8
 8018c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c42:	3101      	adds	r1, #1
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	e7c7      	b.n	8018bd8 <__lshift+0x1c>
 8018c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018c4c:	3301      	adds	r3, #1
 8018c4e:	e7cd      	b.n	8018bec <__lshift+0x30>
 8018c50:	4651      	mov	r1, sl
 8018c52:	e7dc      	b.n	8018c0e <__lshift+0x52>
 8018c54:	3904      	subs	r1, #4
 8018c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8018c5e:	459c      	cmp	ip, r3
 8018c60:	d8f9      	bhi.n	8018c56 <__lshift+0x9a>
 8018c62:	e7e4      	b.n	8018c2e <__lshift+0x72>

08018c64 <__mcmp>:
 8018c64:	6903      	ldr	r3, [r0, #16]
 8018c66:	690a      	ldr	r2, [r1, #16]
 8018c68:	1a9b      	subs	r3, r3, r2
 8018c6a:	b530      	push	{r4, r5, lr}
 8018c6c:	d10c      	bne.n	8018c88 <__mcmp+0x24>
 8018c6e:	0092      	lsls	r2, r2, #2
 8018c70:	3014      	adds	r0, #20
 8018c72:	3114      	adds	r1, #20
 8018c74:	1884      	adds	r4, r0, r2
 8018c76:	4411      	add	r1, r2
 8018c78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018c7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018c80:	4295      	cmp	r5, r2
 8018c82:	d003      	beq.n	8018c8c <__mcmp+0x28>
 8018c84:	d305      	bcc.n	8018c92 <__mcmp+0x2e>
 8018c86:	2301      	movs	r3, #1
 8018c88:	4618      	mov	r0, r3
 8018c8a:	bd30      	pop	{r4, r5, pc}
 8018c8c:	42a0      	cmp	r0, r4
 8018c8e:	d3f3      	bcc.n	8018c78 <__mcmp+0x14>
 8018c90:	e7fa      	b.n	8018c88 <__mcmp+0x24>
 8018c92:	f04f 33ff 	mov.w	r3, #4294967295
 8018c96:	e7f7      	b.n	8018c88 <__mcmp+0x24>

08018c98 <__mdiff>:
 8018c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c9c:	460d      	mov	r5, r1
 8018c9e:	4607      	mov	r7, r0
 8018ca0:	4611      	mov	r1, r2
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	4614      	mov	r4, r2
 8018ca6:	f7ff ffdd 	bl	8018c64 <__mcmp>
 8018caa:	1e06      	subs	r6, r0, #0
 8018cac:	d108      	bne.n	8018cc0 <__mdiff+0x28>
 8018cae:	4631      	mov	r1, r6
 8018cb0:	4638      	mov	r0, r7
 8018cb2:	f7ff fd83 	bl	80187bc <_Balloc>
 8018cb6:	2301      	movs	r3, #1
 8018cb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cc0:	bfa4      	itt	ge
 8018cc2:	4623      	movge	r3, r4
 8018cc4:	462c      	movge	r4, r5
 8018cc6:	4638      	mov	r0, r7
 8018cc8:	6861      	ldr	r1, [r4, #4]
 8018cca:	bfa6      	itte	ge
 8018ccc:	461d      	movge	r5, r3
 8018cce:	2600      	movge	r6, #0
 8018cd0:	2601      	movlt	r6, #1
 8018cd2:	f7ff fd73 	bl	80187bc <_Balloc>
 8018cd6:	692b      	ldr	r3, [r5, #16]
 8018cd8:	60c6      	str	r6, [r0, #12]
 8018cda:	6926      	ldr	r6, [r4, #16]
 8018cdc:	f105 0914 	add.w	r9, r5, #20
 8018ce0:	f104 0214 	add.w	r2, r4, #20
 8018ce4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018ce8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018cec:	f100 0514 	add.w	r5, r0, #20
 8018cf0:	f04f 0e00 	mov.w	lr, #0
 8018cf4:	f852 ab04 	ldr.w	sl, [r2], #4
 8018cf8:	f859 4b04 	ldr.w	r4, [r9], #4
 8018cfc:	fa1e f18a 	uxtah	r1, lr, sl
 8018d00:	b2a3      	uxth	r3, r4
 8018d02:	1ac9      	subs	r1, r1, r3
 8018d04:	0c23      	lsrs	r3, r4, #16
 8018d06:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018d0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018d0e:	b289      	uxth	r1, r1
 8018d10:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018d14:	45c8      	cmp	r8, r9
 8018d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018d1a:	4694      	mov	ip, r2
 8018d1c:	f845 3b04 	str.w	r3, [r5], #4
 8018d20:	d8e8      	bhi.n	8018cf4 <__mdiff+0x5c>
 8018d22:	45bc      	cmp	ip, r7
 8018d24:	d304      	bcc.n	8018d30 <__mdiff+0x98>
 8018d26:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018d2a:	b183      	cbz	r3, 8018d4e <__mdiff+0xb6>
 8018d2c:	6106      	str	r6, [r0, #16]
 8018d2e:	e7c5      	b.n	8018cbc <__mdiff+0x24>
 8018d30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018d34:	fa1e f381 	uxtah	r3, lr, r1
 8018d38:	141a      	asrs	r2, r3, #16
 8018d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d44:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018d48:	f845 3b04 	str.w	r3, [r5], #4
 8018d4c:	e7e9      	b.n	8018d22 <__mdiff+0x8a>
 8018d4e:	3e01      	subs	r6, #1
 8018d50:	e7e9      	b.n	8018d26 <__mdiff+0x8e>
	...

08018d54 <__ulp>:
 8018d54:	4b12      	ldr	r3, [pc, #72]	; (8018da0 <__ulp+0x4c>)
 8018d56:	ee10 2a90 	vmov	r2, s1
 8018d5a:	401a      	ands	r2, r3
 8018d5c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	dd04      	ble.n	8018d6e <__ulp+0x1a>
 8018d64:	2000      	movs	r0, #0
 8018d66:	4619      	mov	r1, r3
 8018d68:	ec41 0b10 	vmov	d0, r0, r1
 8018d6c:	4770      	bx	lr
 8018d6e:	425b      	negs	r3, r3
 8018d70:	151b      	asrs	r3, r3, #20
 8018d72:	2b13      	cmp	r3, #19
 8018d74:	f04f 0000 	mov.w	r0, #0
 8018d78:	f04f 0100 	mov.w	r1, #0
 8018d7c:	dc04      	bgt.n	8018d88 <__ulp+0x34>
 8018d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018d82:	fa42 f103 	asr.w	r1, r2, r3
 8018d86:	e7ef      	b.n	8018d68 <__ulp+0x14>
 8018d88:	3b14      	subs	r3, #20
 8018d8a:	2b1e      	cmp	r3, #30
 8018d8c:	f04f 0201 	mov.w	r2, #1
 8018d90:	bfda      	itte	le
 8018d92:	f1c3 031f 	rsble	r3, r3, #31
 8018d96:	fa02 f303 	lslle.w	r3, r2, r3
 8018d9a:	4613      	movgt	r3, r2
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	e7e3      	b.n	8018d68 <__ulp+0x14>
 8018da0:	7ff00000 	.word	0x7ff00000

08018da4 <__b2d>:
 8018da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da6:	6905      	ldr	r5, [r0, #16]
 8018da8:	f100 0714 	add.w	r7, r0, #20
 8018dac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018db0:	1f2e      	subs	r6, r5, #4
 8018db2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018db6:	4620      	mov	r0, r4
 8018db8:	f7ff fdc4 	bl	8018944 <__hi0bits>
 8018dbc:	f1c0 0320 	rsb	r3, r0, #32
 8018dc0:	280a      	cmp	r0, #10
 8018dc2:	600b      	str	r3, [r1, #0]
 8018dc4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018e3c <__b2d+0x98>
 8018dc8:	dc14      	bgt.n	8018df4 <__b2d+0x50>
 8018dca:	f1c0 0e0b 	rsb	lr, r0, #11
 8018dce:	fa24 f10e 	lsr.w	r1, r4, lr
 8018dd2:	42b7      	cmp	r7, r6
 8018dd4:	ea41 030c 	orr.w	r3, r1, ip
 8018dd8:	bf34      	ite	cc
 8018dda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018dde:	2100      	movcs	r1, #0
 8018de0:	3015      	adds	r0, #21
 8018de2:	fa04 f000 	lsl.w	r0, r4, r0
 8018de6:	fa21 f10e 	lsr.w	r1, r1, lr
 8018dea:	ea40 0201 	orr.w	r2, r0, r1
 8018dee:	ec43 2b10 	vmov	d0, r2, r3
 8018df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018df4:	42b7      	cmp	r7, r6
 8018df6:	bf3a      	itte	cc
 8018df8:	f1a5 0608 	subcc.w	r6, r5, #8
 8018dfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e00:	2100      	movcs	r1, #0
 8018e02:	380b      	subs	r0, #11
 8018e04:	d015      	beq.n	8018e32 <__b2d+0x8e>
 8018e06:	4084      	lsls	r4, r0
 8018e08:	f1c0 0520 	rsb	r5, r0, #32
 8018e0c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018e10:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018e14:	42be      	cmp	r6, r7
 8018e16:	fa21 fc05 	lsr.w	ip, r1, r5
 8018e1a:	ea44 030c 	orr.w	r3, r4, ip
 8018e1e:	bf8c      	ite	hi
 8018e20:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018e24:	2400      	movls	r4, #0
 8018e26:	fa01 f000 	lsl.w	r0, r1, r0
 8018e2a:	40ec      	lsrs	r4, r5
 8018e2c:	ea40 0204 	orr.w	r2, r0, r4
 8018e30:	e7dd      	b.n	8018dee <__b2d+0x4a>
 8018e32:	ea44 030c 	orr.w	r3, r4, ip
 8018e36:	460a      	mov	r2, r1
 8018e38:	e7d9      	b.n	8018dee <__b2d+0x4a>
 8018e3a:	bf00      	nop
 8018e3c:	3ff00000 	.word	0x3ff00000

08018e40 <__d2b>:
 8018e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e44:	460e      	mov	r6, r1
 8018e46:	2101      	movs	r1, #1
 8018e48:	ec59 8b10 	vmov	r8, r9, d0
 8018e4c:	4615      	mov	r5, r2
 8018e4e:	f7ff fcb5 	bl	80187bc <_Balloc>
 8018e52:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018e56:	4607      	mov	r7, r0
 8018e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e5c:	bb34      	cbnz	r4, 8018eac <__d2b+0x6c>
 8018e5e:	9301      	str	r3, [sp, #4]
 8018e60:	f1b8 0300 	subs.w	r3, r8, #0
 8018e64:	d027      	beq.n	8018eb6 <__d2b+0x76>
 8018e66:	a802      	add	r0, sp, #8
 8018e68:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018e6c:	f7ff fd89 	bl	8018982 <__lo0bits>
 8018e70:	9900      	ldr	r1, [sp, #0]
 8018e72:	b1f0      	cbz	r0, 8018eb2 <__d2b+0x72>
 8018e74:	9a01      	ldr	r2, [sp, #4]
 8018e76:	f1c0 0320 	rsb	r3, r0, #32
 8018e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8018e7e:	430b      	orrs	r3, r1
 8018e80:	40c2      	lsrs	r2, r0
 8018e82:	617b      	str	r3, [r7, #20]
 8018e84:	9201      	str	r2, [sp, #4]
 8018e86:	9b01      	ldr	r3, [sp, #4]
 8018e88:	61bb      	str	r3, [r7, #24]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	bf14      	ite	ne
 8018e8e:	2102      	movne	r1, #2
 8018e90:	2101      	moveq	r1, #1
 8018e92:	6139      	str	r1, [r7, #16]
 8018e94:	b1c4      	cbz	r4, 8018ec8 <__d2b+0x88>
 8018e96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018e9a:	4404      	add	r4, r0
 8018e9c:	6034      	str	r4, [r6, #0]
 8018e9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018ea2:	6028      	str	r0, [r5, #0]
 8018ea4:	4638      	mov	r0, r7
 8018ea6:	b003      	add	sp, #12
 8018ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018eb0:	e7d5      	b.n	8018e5e <__d2b+0x1e>
 8018eb2:	6179      	str	r1, [r7, #20]
 8018eb4:	e7e7      	b.n	8018e86 <__d2b+0x46>
 8018eb6:	a801      	add	r0, sp, #4
 8018eb8:	f7ff fd63 	bl	8018982 <__lo0bits>
 8018ebc:	9b01      	ldr	r3, [sp, #4]
 8018ebe:	617b      	str	r3, [r7, #20]
 8018ec0:	2101      	movs	r1, #1
 8018ec2:	6139      	str	r1, [r7, #16]
 8018ec4:	3020      	adds	r0, #32
 8018ec6:	e7e5      	b.n	8018e94 <__d2b+0x54>
 8018ec8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018ecc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018ed0:	6030      	str	r0, [r6, #0]
 8018ed2:	6918      	ldr	r0, [r3, #16]
 8018ed4:	f7ff fd36 	bl	8018944 <__hi0bits>
 8018ed8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018edc:	e7e1      	b.n	8018ea2 <__d2b+0x62>

08018ede <__ratio>:
 8018ede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ee2:	4688      	mov	r8, r1
 8018ee4:	4669      	mov	r1, sp
 8018ee6:	4681      	mov	r9, r0
 8018ee8:	f7ff ff5c 	bl	8018da4 <__b2d>
 8018eec:	a901      	add	r1, sp, #4
 8018eee:	4640      	mov	r0, r8
 8018ef0:	ec57 6b10 	vmov	r6, r7, d0
 8018ef4:	f7ff ff56 	bl	8018da4 <__b2d>
 8018ef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018efc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018f00:	eba3 0c02 	sub.w	ip, r3, r2
 8018f04:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f08:	1a9b      	subs	r3, r3, r2
 8018f0a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018f0e:	ec5b ab10 	vmov	sl, fp, d0
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	bfce      	itee	gt
 8018f16:	463a      	movgt	r2, r7
 8018f18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f1c:	465a      	movle	r2, fp
 8018f1e:	4659      	mov	r1, fp
 8018f20:	463d      	mov	r5, r7
 8018f22:	bfd4      	ite	le
 8018f24:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018f28:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018f2c:	4630      	mov	r0, r6
 8018f2e:	ee10 2a10 	vmov	r2, s0
 8018f32:	460b      	mov	r3, r1
 8018f34:	4629      	mov	r1, r5
 8018f36:	f7e7 fca1 	bl	800087c <__aeabi_ddiv>
 8018f3a:	ec41 0b10 	vmov	d0, r0, r1
 8018f3e:	b003      	add	sp, #12
 8018f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f44 <__copybits>:
 8018f44:	3901      	subs	r1, #1
 8018f46:	b510      	push	{r4, lr}
 8018f48:	1149      	asrs	r1, r1, #5
 8018f4a:	6914      	ldr	r4, [r2, #16]
 8018f4c:	3101      	adds	r1, #1
 8018f4e:	f102 0314 	add.w	r3, r2, #20
 8018f52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018f56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018f5a:	42a3      	cmp	r3, r4
 8018f5c:	4602      	mov	r2, r0
 8018f5e:	d303      	bcc.n	8018f68 <__copybits+0x24>
 8018f60:	2300      	movs	r3, #0
 8018f62:	428a      	cmp	r2, r1
 8018f64:	d305      	bcc.n	8018f72 <__copybits+0x2e>
 8018f66:	bd10      	pop	{r4, pc}
 8018f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f6c:	f840 2b04 	str.w	r2, [r0], #4
 8018f70:	e7f3      	b.n	8018f5a <__copybits+0x16>
 8018f72:	f842 3b04 	str.w	r3, [r2], #4
 8018f76:	e7f4      	b.n	8018f62 <__copybits+0x1e>

08018f78 <__any_on>:
 8018f78:	f100 0214 	add.w	r2, r0, #20
 8018f7c:	6900      	ldr	r0, [r0, #16]
 8018f7e:	114b      	asrs	r3, r1, #5
 8018f80:	4298      	cmp	r0, r3
 8018f82:	b510      	push	{r4, lr}
 8018f84:	db11      	blt.n	8018faa <__any_on+0x32>
 8018f86:	dd0a      	ble.n	8018f9e <__any_on+0x26>
 8018f88:	f011 011f 	ands.w	r1, r1, #31
 8018f8c:	d007      	beq.n	8018f9e <__any_on+0x26>
 8018f8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f92:	fa24 f001 	lsr.w	r0, r4, r1
 8018f96:	fa00 f101 	lsl.w	r1, r0, r1
 8018f9a:	428c      	cmp	r4, r1
 8018f9c:	d10b      	bne.n	8018fb6 <__any_on+0x3e>
 8018f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018fa2:	4293      	cmp	r3, r2
 8018fa4:	d803      	bhi.n	8018fae <__any_on+0x36>
 8018fa6:	2000      	movs	r0, #0
 8018fa8:	bd10      	pop	{r4, pc}
 8018faa:	4603      	mov	r3, r0
 8018fac:	e7f7      	b.n	8018f9e <__any_on+0x26>
 8018fae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018fb2:	2900      	cmp	r1, #0
 8018fb4:	d0f5      	beq.n	8018fa2 <__any_on+0x2a>
 8018fb6:	2001      	movs	r0, #1
 8018fb8:	e7f6      	b.n	8018fa8 <__any_on+0x30>

08018fba <_calloc_r>:
 8018fba:	b538      	push	{r3, r4, r5, lr}
 8018fbc:	fb02 f401 	mul.w	r4, r2, r1
 8018fc0:	4621      	mov	r1, r4
 8018fc2:	f000 f857 	bl	8019074 <_malloc_r>
 8018fc6:	4605      	mov	r5, r0
 8018fc8:	b118      	cbz	r0, 8018fd2 <_calloc_r+0x18>
 8018fca:	4622      	mov	r2, r4
 8018fcc:	2100      	movs	r1, #0
 8018fce:	f7fc fcaa 	bl	8015926 <memset>
 8018fd2:	4628      	mov	r0, r5
 8018fd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08018fd8 <_free_r>:
 8018fd8:	b538      	push	{r3, r4, r5, lr}
 8018fda:	4605      	mov	r5, r0
 8018fdc:	2900      	cmp	r1, #0
 8018fde:	d045      	beq.n	801906c <_free_r+0x94>
 8018fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fe4:	1f0c      	subs	r4, r1, #4
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	bfb8      	it	lt
 8018fea:	18e4      	addlt	r4, r4, r3
 8018fec:	f000 fe30 	bl	8019c50 <__malloc_lock>
 8018ff0:	4a1f      	ldr	r2, [pc, #124]	; (8019070 <_free_r+0x98>)
 8018ff2:	6813      	ldr	r3, [r2, #0]
 8018ff4:	4610      	mov	r0, r2
 8018ff6:	b933      	cbnz	r3, 8019006 <_free_r+0x2e>
 8018ff8:	6063      	str	r3, [r4, #4]
 8018ffa:	6014      	str	r4, [r2, #0]
 8018ffc:	4628      	mov	r0, r5
 8018ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019002:	f000 be26 	b.w	8019c52 <__malloc_unlock>
 8019006:	42a3      	cmp	r3, r4
 8019008:	d90c      	bls.n	8019024 <_free_r+0x4c>
 801900a:	6821      	ldr	r1, [r4, #0]
 801900c:	1862      	adds	r2, r4, r1
 801900e:	4293      	cmp	r3, r2
 8019010:	bf04      	itt	eq
 8019012:	681a      	ldreq	r2, [r3, #0]
 8019014:	685b      	ldreq	r3, [r3, #4]
 8019016:	6063      	str	r3, [r4, #4]
 8019018:	bf04      	itt	eq
 801901a:	1852      	addeq	r2, r2, r1
 801901c:	6022      	streq	r2, [r4, #0]
 801901e:	6004      	str	r4, [r0, #0]
 8019020:	e7ec      	b.n	8018ffc <_free_r+0x24>
 8019022:	4613      	mov	r3, r2
 8019024:	685a      	ldr	r2, [r3, #4]
 8019026:	b10a      	cbz	r2, 801902c <_free_r+0x54>
 8019028:	42a2      	cmp	r2, r4
 801902a:	d9fa      	bls.n	8019022 <_free_r+0x4a>
 801902c:	6819      	ldr	r1, [r3, #0]
 801902e:	1858      	adds	r0, r3, r1
 8019030:	42a0      	cmp	r0, r4
 8019032:	d10b      	bne.n	801904c <_free_r+0x74>
 8019034:	6820      	ldr	r0, [r4, #0]
 8019036:	4401      	add	r1, r0
 8019038:	1858      	adds	r0, r3, r1
 801903a:	4282      	cmp	r2, r0
 801903c:	6019      	str	r1, [r3, #0]
 801903e:	d1dd      	bne.n	8018ffc <_free_r+0x24>
 8019040:	6810      	ldr	r0, [r2, #0]
 8019042:	6852      	ldr	r2, [r2, #4]
 8019044:	605a      	str	r2, [r3, #4]
 8019046:	4401      	add	r1, r0
 8019048:	6019      	str	r1, [r3, #0]
 801904a:	e7d7      	b.n	8018ffc <_free_r+0x24>
 801904c:	d902      	bls.n	8019054 <_free_r+0x7c>
 801904e:	230c      	movs	r3, #12
 8019050:	602b      	str	r3, [r5, #0]
 8019052:	e7d3      	b.n	8018ffc <_free_r+0x24>
 8019054:	6820      	ldr	r0, [r4, #0]
 8019056:	1821      	adds	r1, r4, r0
 8019058:	428a      	cmp	r2, r1
 801905a:	bf04      	itt	eq
 801905c:	6811      	ldreq	r1, [r2, #0]
 801905e:	6852      	ldreq	r2, [r2, #4]
 8019060:	6062      	str	r2, [r4, #4]
 8019062:	bf04      	itt	eq
 8019064:	1809      	addeq	r1, r1, r0
 8019066:	6021      	streq	r1, [r4, #0]
 8019068:	605c      	str	r4, [r3, #4]
 801906a:	e7c7      	b.n	8018ffc <_free_r+0x24>
 801906c:	bd38      	pop	{r3, r4, r5, pc}
 801906e:	bf00      	nop
 8019070:	20041398 	.word	0x20041398

08019074 <_malloc_r>:
 8019074:	b570      	push	{r4, r5, r6, lr}
 8019076:	1ccd      	adds	r5, r1, #3
 8019078:	f025 0503 	bic.w	r5, r5, #3
 801907c:	3508      	adds	r5, #8
 801907e:	2d0c      	cmp	r5, #12
 8019080:	bf38      	it	cc
 8019082:	250c      	movcc	r5, #12
 8019084:	2d00      	cmp	r5, #0
 8019086:	4606      	mov	r6, r0
 8019088:	db01      	blt.n	801908e <_malloc_r+0x1a>
 801908a:	42a9      	cmp	r1, r5
 801908c:	d903      	bls.n	8019096 <_malloc_r+0x22>
 801908e:	230c      	movs	r3, #12
 8019090:	6033      	str	r3, [r6, #0]
 8019092:	2000      	movs	r0, #0
 8019094:	bd70      	pop	{r4, r5, r6, pc}
 8019096:	f000 fddb 	bl	8019c50 <__malloc_lock>
 801909a:	4a21      	ldr	r2, [pc, #132]	; (8019120 <_malloc_r+0xac>)
 801909c:	6814      	ldr	r4, [r2, #0]
 801909e:	4621      	mov	r1, r4
 80190a0:	b991      	cbnz	r1, 80190c8 <_malloc_r+0x54>
 80190a2:	4c20      	ldr	r4, [pc, #128]	; (8019124 <_malloc_r+0xb0>)
 80190a4:	6823      	ldr	r3, [r4, #0]
 80190a6:	b91b      	cbnz	r3, 80190b0 <_malloc_r+0x3c>
 80190a8:	4630      	mov	r0, r6
 80190aa:	f000 fc91 	bl	80199d0 <_sbrk_r>
 80190ae:	6020      	str	r0, [r4, #0]
 80190b0:	4629      	mov	r1, r5
 80190b2:	4630      	mov	r0, r6
 80190b4:	f000 fc8c 	bl	80199d0 <_sbrk_r>
 80190b8:	1c43      	adds	r3, r0, #1
 80190ba:	d124      	bne.n	8019106 <_malloc_r+0x92>
 80190bc:	230c      	movs	r3, #12
 80190be:	6033      	str	r3, [r6, #0]
 80190c0:	4630      	mov	r0, r6
 80190c2:	f000 fdc6 	bl	8019c52 <__malloc_unlock>
 80190c6:	e7e4      	b.n	8019092 <_malloc_r+0x1e>
 80190c8:	680b      	ldr	r3, [r1, #0]
 80190ca:	1b5b      	subs	r3, r3, r5
 80190cc:	d418      	bmi.n	8019100 <_malloc_r+0x8c>
 80190ce:	2b0b      	cmp	r3, #11
 80190d0:	d90f      	bls.n	80190f2 <_malloc_r+0x7e>
 80190d2:	600b      	str	r3, [r1, #0]
 80190d4:	50cd      	str	r5, [r1, r3]
 80190d6:	18cc      	adds	r4, r1, r3
 80190d8:	4630      	mov	r0, r6
 80190da:	f000 fdba 	bl	8019c52 <__malloc_unlock>
 80190de:	f104 000b 	add.w	r0, r4, #11
 80190e2:	1d23      	adds	r3, r4, #4
 80190e4:	f020 0007 	bic.w	r0, r0, #7
 80190e8:	1ac3      	subs	r3, r0, r3
 80190ea:	d0d3      	beq.n	8019094 <_malloc_r+0x20>
 80190ec:	425a      	negs	r2, r3
 80190ee:	50e2      	str	r2, [r4, r3]
 80190f0:	e7d0      	b.n	8019094 <_malloc_r+0x20>
 80190f2:	428c      	cmp	r4, r1
 80190f4:	684b      	ldr	r3, [r1, #4]
 80190f6:	bf16      	itet	ne
 80190f8:	6063      	strne	r3, [r4, #4]
 80190fa:	6013      	streq	r3, [r2, #0]
 80190fc:	460c      	movne	r4, r1
 80190fe:	e7eb      	b.n	80190d8 <_malloc_r+0x64>
 8019100:	460c      	mov	r4, r1
 8019102:	6849      	ldr	r1, [r1, #4]
 8019104:	e7cc      	b.n	80190a0 <_malloc_r+0x2c>
 8019106:	1cc4      	adds	r4, r0, #3
 8019108:	f024 0403 	bic.w	r4, r4, #3
 801910c:	42a0      	cmp	r0, r4
 801910e:	d005      	beq.n	801911c <_malloc_r+0xa8>
 8019110:	1a21      	subs	r1, r4, r0
 8019112:	4630      	mov	r0, r6
 8019114:	f000 fc5c 	bl	80199d0 <_sbrk_r>
 8019118:	3001      	adds	r0, #1
 801911a:	d0cf      	beq.n	80190bc <_malloc_r+0x48>
 801911c:	6025      	str	r5, [r4, #0]
 801911e:	e7db      	b.n	80190d8 <_malloc_r+0x64>
 8019120:	20041398 	.word	0x20041398
 8019124:	2004139c 	.word	0x2004139c

08019128 <__ssputs_r>:
 8019128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801912c:	688e      	ldr	r6, [r1, #8]
 801912e:	429e      	cmp	r6, r3
 8019130:	4682      	mov	sl, r0
 8019132:	460c      	mov	r4, r1
 8019134:	4690      	mov	r8, r2
 8019136:	4699      	mov	r9, r3
 8019138:	d837      	bhi.n	80191aa <__ssputs_r+0x82>
 801913a:	898a      	ldrh	r2, [r1, #12]
 801913c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019140:	d031      	beq.n	80191a6 <__ssputs_r+0x7e>
 8019142:	6825      	ldr	r5, [r4, #0]
 8019144:	6909      	ldr	r1, [r1, #16]
 8019146:	1a6f      	subs	r7, r5, r1
 8019148:	6965      	ldr	r5, [r4, #20]
 801914a:	2302      	movs	r3, #2
 801914c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019150:	fb95 f5f3 	sdiv	r5, r5, r3
 8019154:	f109 0301 	add.w	r3, r9, #1
 8019158:	443b      	add	r3, r7
 801915a:	429d      	cmp	r5, r3
 801915c:	bf38      	it	cc
 801915e:	461d      	movcc	r5, r3
 8019160:	0553      	lsls	r3, r2, #21
 8019162:	d530      	bpl.n	80191c6 <__ssputs_r+0x9e>
 8019164:	4629      	mov	r1, r5
 8019166:	f7ff ff85 	bl	8019074 <_malloc_r>
 801916a:	4606      	mov	r6, r0
 801916c:	b950      	cbnz	r0, 8019184 <__ssputs_r+0x5c>
 801916e:	230c      	movs	r3, #12
 8019170:	f8ca 3000 	str.w	r3, [sl]
 8019174:	89a3      	ldrh	r3, [r4, #12]
 8019176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801917a:	81a3      	strh	r3, [r4, #12]
 801917c:	f04f 30ff 	mov.w	r0, #4294967295
 8019180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019184:	463a      	mov	r2, r7
 8019186:	6921      	ldr	r1, [r4, #16]
 8019188:	f7fc fbc2 	bl	8015910 <memcpy>
 801918c:	89a3      	ldrh	r3, [r4, #12]
 801918e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019196:	81a3      	strh	r3, [r4, #12]
 8019198:	6126      	str	r6, [r4, #16]
 801919a:	6165      	str	r5, [r4, #20]
 801919c:	443e      	add	r6, r7
 801919e:	1bed      	subs	r5, r5, r7
 80191a0:	6026      	str	r6, [r4, #0]
 80191a2:	60a5      	str	r5, [r4, #8]
 80191a4:	464e      	mov	r6, r9
 80191a6:	454e      	cmp	r6, r9
 80191a8:	d900      	bls.n	80191ac <__ssputs_r+0x84>
 80191aa:	464e      	mov	r6, r9
 80191ac:	4632      	mov	r2, r6
 80191ae:	4641      	mov	r1, r8
 80191b0:	6820      	ldr	r0, [r4, #0]
 80191b2:	f000 fd34 	bl	8019c1e <memmove>
 80191b6:	68a3      	ldr	r3, [r4, #8]
 80191b8:	1b9b      	subs	r3, r3, r6
 80191ba:	60a3      	str	r3, [r4, #8]
 80191bc:	6823      	ldr	r3, [r4, #0]
 80191be:	441e      	add	r6, r3
 80191c0:	6026      	str	r6, [r4, #0]
 80191c2:	2000      	movs	r0, #0
 80191c4:	e7dc      	b.n	8019180 <__ssputs_r+0x58>
 80191c6:	462a      	mov	r2, r5
 80191c8:	f000 fd44 	bl	8019c54 <_realloc_r>
 80191cc:	4606      	mov	r6, r0
 80191ce:	2800      	cmp	r0, #0
 80191d0:	d1e2      	bne.n	8019198 <__ssputs_r+0x70>
 80191d2:	6921      	ldr	r1, [r4, #16]
 80191d4:	4650      	mov	r0, sl
 80191d6:	f7ff feff 	bl	8018fd8 <_free_r>
 80191da:	e7c8      	b.n	801916e <__ssputs_r+0x46>

080191dc <_svfiprintf_r>:
 80191dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e0:	461d      	mov	r5, r3
 80191e2:	898b      	ldrh	r3, [r1, #12]
 80191e4:	061f      	lsls	r7, r3, #24
 80191e6:	b09d      	sub	sp, #116	; 0x74
 80191e8:	4680      	mov	r8, r0
 80191ea:	460c      	mov	r4, r1
 80191ec:	4616      	mov	r6, r2
 80191ee:	d50f      	bpl.n	8019210 <_svfiprintf_r+0x34>
 80191f0:	690b      	ldr	r3, [r1, #16]
 80191f2:	b96b      	cbnz	r3, 8019210 <_svfiprintf_r+0x34>
 80191f4:	2140      	movs	r1, #64	; 0x40
 80191f6:	f7ff ff3d 	bl	8019074 <_malloc_r>
 80191fa:	6020      	str	r0, [r4, #0]
 80191fc:	6120      	str	r0, [r4, #16]
 80191fe:	b928      	cbnz	r0, 801920c <_svfiprintf_r+0x30>
 8019200:	230c      	movs	r3, #12
 8019202:	f8c8 3000 	str.w	r3, [r8]
 8019206:	f04f 30ff 	mov.w	r0, #4294967295
 801920a:	e0c8      	b.n	801939e <_svfiprintf_r+0x1c2>
 801920c:	2340      	movs	r3, #64	; 0x40
 801920e:	6163      	str	r3, [r4, #20]
 8019210:	2300      	movs	r3, #0
 8019212:	9309      	str	r3, [sp, #36]	; 0x24
 8019214:	2320      	movs	r3, #32
 8019216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801921a:	2330      	movs	r3, #48	; 0x30
 801921c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019220:	9503      	str	r5, [sp, #12]
 8019222:	f04f 0b01 	mov.w	fp, #1
 8019226:	4637      	mov	r7, r6
 8019228:	463d      	mov	r5, r7
 801922a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801922e:	b10b      	cbz	r3, 8019234 <_svfiprintf_r+0x58>
 8019230:	2b25      	cmp	r3, #37	; 0x25
 8019232:	d13e      	bne.n	80192b2 <_svfiprintf_r+0xd6>
 8019234:	ebb7 0a06 	subs.w	sl, r7, r6
 8019238:	d00b      	beq.n	8019252 <_svfiprintf_r+0x76>
 801923a:	4653      	mov	r3, sl
 801923c:	4632      	mov	r2, r6
 801923e:	4621      	mov	r1, r4
 8019240:	4640      	mov	r0, r8
 8019242:	f7ff ff71 	bl	8019128 <__ssputs_r>
 8019246:	3001      	adds	r0, #1
 8019248:	f000 80a4 	beq.w	8019394 <_svfiprintf_r+0x1b8>
 801924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801924e:	4453      	add	r3, sl
 8019250:	9309      	str	r3, [sp, #36]	; 0x24
 8019252:	783b      	ldrb	r3, [r7, #0]
 8019254:	2b00      	cmp	r3, #0
 8019256:	f000 809d 	beq.w	8019394 <_svfiprintf_r+0x1b8>
 801925a:	2300      	movs	r3, #0
 801925c:	f04f 32ff 	mov.w	r2, #4294967295
 8019260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019264:	9304      	str	r3, [sp, #16]
 8019266:	9307      	str	r3, [sp, #28]
 8019268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801926c:	931a      	str	r3, [sp, #104]	; 0x68
 801926e:	462f      	mov	r7, r5
 8019270:	2205      	movs	r2, #5
 8019272:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019276:	4850      	ldr	r0, [pc, #320]	; (80193b8 <_svfiprintf_r+0x1dc>)
 8019278:	f7e6 ffca 	bl	8000210 <memchr>
 801927c:	9b04      	ldr	r3, [sp, #16]
 801927e:	b9d0      	cbnz	r0, 80192b6 <_svfiprintf_r+0xda>
 8019280:	06d9      	lsls	r1, r3, #27
 8019282:	bf44      	itt	mi
 8019284:	2220      	movmi	r2, #32
 8019286:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801928a:	071a      	lsls	r2, r3, #28
 801928c:	bf44      	itt	mi
 801928e:	222b      	movmi	r2, #43	; 0x2b
 8019290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019294:	782a      	ldrb	r2, [r5, #0]
 8019296:	2a2a      	cmp	r2, #42	; 0x2a
 8019298:	d015      	beq.n	80192c6 <_svfiprintf_r+0xea>
 801929a:	9a07      	ldr	r2, [sp, #28]
 801929c:	462f      	mov	r7, r5
 801929e:	2000      	movs	r0, #0
 80192a0:	250a      	movs	r5, #10
 80192a2:	4639      	mov	r1, r7
 80192a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192a8:	3b30      	subs	r3, #48	; 0x30
 80192aa:	2b09      	cmp	r3, #9
 80192ac:	d94d      	bls.n	801934a <_svfiprintf_r+0x16e>
 80192ae:	b1b8      	cbz	r0, 80192e0 <_svfiprintf_r+0x104>
 80192b0:	e00f      	b.n	80192d2 <_svfiprintf_r+0xf6>
 80192b2:	462f      	mov	r7, r5
 80192b4:	e7b8      	b.n	8019228 <_svfiprintf_r+0x4c>
 80192b6:	4a40      	ldr	r2, [pc, #256]	; (80193b8 <_svfiprintf_r+0x1dc>)
 80192b8:	1a80      	subs	r0, r0, r2
 80192ba:	fa0b f000 	lsl.w	r0, fp, r0
 80192be:	4318      	orrs	r0, r3
 80192c0:	9004      	str	r0, [sp, #16]
 80192c2:	463d      	mov	r5, r7
 80192c4:	e7d3      	b.n	801926e <_svfiprintf_r+0x92>
 80192c6:	9a03      	ldr	r2, [sp, #12]
 80192c8:	1d11      	adds	r1, r2, #4
 80192ca:	6812      	ldr	r2, [r2, #0]
 80192cc:	9103      	str	r1, [sp, #12]
 80192ce:	2a00      	cmp	r2, #0
 80192d0:	db01      	blt.n	80192d6 <_svfiprintf_r+0xfa>
 80192d2:	9207      	str	r2, [sp, #28]
 80192d4:	e004      	b.n	80192e0 <_svfiprintf_r+0x104>
 80192d6:	4252      	negs	r2, r2
 80192d8:	f043 0302 	orr.w	r3, r3, #2
 80192dc:	9207      	str	r2, [sp, #28]
 80192de:	9304      	str	r3, [sp, #16]
 80192e0:	783b      	ldrb	r3, [r7, #0]
 80192e2:	2b2e      	cmp	r3, #46	; 0x2e
 80192e4:	d10c      	bne.n	8019300 <_svfiprintf_r+0x124>
 80192e6:	787b      	ldrb	r3, [r7, #1]
 80192e8:	2b2a      	cmp	r3, #42	; 0x2a
 80192ea:	d133      	bne.n	8019354 <_svfiprintf_r+0x178>
 80192ec:	9b03      	ldr	r3, [sp, #12]
 80192ee:	1d1a      	adds	r2, r3, #4
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	9203      	str	r2, [sp, #12]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	bfb8      	it	lt
 80192f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80192fc:	3702      	adds	r7, #2
 80192fe:	9305      	str	r3, [sp, #20]
 8019300:	4d2e      	ldr	r5, [pc, #184]	; (80193bc <_svfiprintf_r+0x1e0>)
 8019302:	7839      	ldrb	r1, [r7, #0]
 8019304:	2203      	movs	r2, #3
 8019306:	4628      	mov	r0, r5
 8019308:	f7e6 ff82 	bl	8000210 <memchr>
 801930c:	b138      	cbz	r0, 801931e <_svfiprintf_r+0x142>
 801930e:	2340      	movs	r3, #64	; 0x40
 8019310:	1b40      	subs	r0, r0, r5
 8019312:	fa03 f000 	lsl.w	r0, r3, r0
 8019316:	9b04      	ldr	r3, [sp, #16]
 8019318:	4303      	orrs	r3, r0
 801931a:	3701      	adds	r7, #1
 801931c:	9304      	str	r3, [sp, #16]
 801931e:	7839      	ldrb	r1, [r7, #0]
 8019320:	4827      	ldr	r0, [pc, #156]	; (80193c0 <_svfiprintf_r+0x1e4>)
 8019322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019326:	2206      	movs	r2, #6
 8019328:	1c7e      	adds	r6, r7, #1
 801932a:	f7e6 ff71 	bl	8000210 <memchr>
 801932e:	2800      	cmp	r0, #0
 8019330:	d038      	beq.n	80193a4 <_svfiprintf_r+0x1c8>
 8019332:	4b24      	ldr	r3, [pc, #144]	; (80193c4 <_svfiprintf_r+0x1e8>)
 8019334:	bb13      	cbnz	r3, 801937c <_svfiprintf_r+0x1a0>
 8019336:	9b03      	ldr	r3, [sp, #12]
 8019338:	3307      	adds	r3, #7
 801933a:	f023 0307 	bic.w	r3, r3, #7
 801933e:	3308      	adds	r3, #8
 8019340:	9303      	str	r3, [sp, #12]
 8019342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019344:	444b      	add	r3, r9
 8019346:	9309      	str	r3, [sp, #36]	; 0x24
 8019348:	e76d      	b.n	8019226 <_svfiprintf_r+0x4a>
 801934a:	fb05 3202 	mla	r2, r5, r2, r3
 801934e:	2001      	movs	r0, #1
 8019350:	460f      	mov	r7, r1
 8019352:	e7a6      	b.n	80192a2 <_svfiprintf_r+0xc6>
 8019354:	2300      	movs	r3, #0
 8019356:	3701      	adds	r7, #1
 8019358:	9305      	str	r3, [sp, #20]
 801935a:	4619      	mov	r1, r3
 801935c:	250a      	movs	r5, #10
 801935e:	4638      	mov	r0, r7
 8019360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019364:	3a30      	subs	r2, #48	; 0x30
 8019366:	2a09      	cmp	r2, #9
 8019368:	d903      	bls.n	8019372 <_svfiprintf_r+0x196>
 801936a:	2b00      	cmp	r3, #0
 801936c:	d0c8      	beq.n	8019300 <_svfiprintf_r+0x124>
 801936e:	9105      	str	r1, [sp, #20]
 8019370:	e7c6      	b.n	8019300 <_svfiprintf_r+0x124>
 8019372:	fb05 2101 	mla	r1, r5, r1, r2
 8019376:	2301      	movs	r3, #1
 8019378:	4607      	mov	r7, r0
 801937a:	e7f0      	b.n	801935e <_svfiprintf_r+0x182>
 801937c:	ab03      	add	r3, sp, #12
 801937e:	9300      	str	r3, [sp, #0]
 8019380:	4622      	mov	r2, r4
 8019382:	4b11      	ldr	r3, [pc, #68]	; (80193c8 <_svfiprintf_r+0x1ec>)
 8019384:	a904      	add	r1, sp, #16
 8019386:	4640      	mov	r0, r8
 8019388:	f7fc fb6a 	bl	8015a60 <_printf_float>
 801938c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019390:	4681      	mov	r9, r0
 8019392:	d1d6      	bne.n	8019342 <_svfiprintf_r+0x166>
 8019394:	89a3      	ldrh	r3, [r4, #12]
 8019396:	065b      	lsls	r3, r3, #25
 8019398:	f53f af35 	bmi.w	8019206 <_svfiprintf_r+0x2a>
 801939c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801939e:	b01d      	add	sp, #116	; 0x74
 80193a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a4:	ab03      	add	r3, sp, #12
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	4622      	mov	r2, r4
 80193aa:	4b07      	ldr	r3, [pc, #28]	; (80193c8 <_svfiprintf_r+0x1ec>)
 80193ac:	a904      	add	r1, sp, #16
 80193ae:	4640      	mov	r0, r8
 80193b0:	f7fc fe0c 	bl	8015fcc <_printf_i>
 80193b4:	e7ea      	b.n	801938c <_svfiprintf_r+0x1b0>
 80193b6:	bf00      	nop
 80193b8:	0801a7d4 	.word	0x0801a7d4
 80193bc:	0801a7da 	.word	0x0801a7da
 80193c0:	0801a7de 	.word	0x0801a7de
 80193c4:	08015a61 	.word	0x08015a61
 80193c8:	08019129 	.word	0x08019129

080193cc <_sungetc_r>:
 80193cc:	b538      	push	{r3, r4, r5, lr}
 80193ce:	1c4b      	adds	r3, r1, #1
 80193d0:	4614      	mov	r4, r2
 80193d2:	d103      	bne.n	80193dc <_sungetc_r+0x10>
 80193d4:	f04f 35ff 	mov.w	r5, #4294967295
 80193d8:	4628      	mov	r0, r5
 80193da:	bd38      	pop	{r3, r4, r5, pc}
 80193dc:	8993      	ldrh	r3, [r2, #12]
 80193de:	f023 0320 	bic.w	r3, r3, #32
 80193e2:	8193      	strh	r3, [r2, #12]
 80193e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193e6:	6852      	ldr	r2, [r2, #4]
 80193e8:	b2cd      	uxtb	r5, r1
 80193ea:	b18b      	cbz	r3, 8019410 <_sungetc_r+0x44>
 80193ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80193ee:	4293      	cmp	r3, r2
 80193f0:	dd08      	ble.n	8019404 <_sungetc_r+0x38>
 80193f2:	6823      	ldr	r3, [r4, #0]
 80193f4:	1e5a      	subs	r2, r3, #1
 80193f6:	6022      	str	r2, [r4, #0]
 80193f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80193fc:	6863      	ldr	r3, [r4, #4]
 80193fe:	3301      	adds	r3, #1
 8019400:	6063      	str	r3, [r4, #4]
 8019402:	e7e9      	b.n	80193d8 <_sungetc_r+0xc>
 8019404:	4621      	mov	r1, r4
 8019406:	f000 fbc3 	bl	8019b90 <__submore>
 801940a:	2800      	cmp	r0, #0
 801940c:	d0f1      	beq.n	80193f2 <_sungetc_r+0x26>
 801940e:	e7e1      	b.n	80193d4 <_sungetc_r+0x8>
 8019410:	6921      	ldr	r1, [r4, #16]
 8019412:	6823      	ldr	r3, [r4, #0]
 8019414:	b151      	cbz	r1, 801942c <_sungetc_r+0x60>
 8019416:	4299      	cmp	r1, r3
 8019418:	d208      	bcs.n	801942c <_sungetc_r+0x60>
 801941a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801941e:	42a9      	cmp	r1, r5
 8019420:	d104      	bne.n	801942c <_sungetc_r+0x60>
 8019422:	3b01      	subs	r3, #1
 8019424:	3201      	adds	r2, #1
 8019426:	6023      	str	r3, [r4, #0]
 8019428:	6062      	str	r2, [r4, #4]
 801942a:	e7d5      	b.n	80193d8 <_sungetc_r+0xc>
 801942c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019434:	6363      	str	r3, [r4, #52]	; 0x34
 8019436:	2303      	movs	r3, #3
 8019438:	63a3      	str	r3, [r4, #56]	; 0x38
 801943a:	4623      	mov	r3, r4
 801943c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019440:	6023      	str	r3, [r4, #0]
 8019442:	2301      	movs	r3, #1
 8019444:	e7dc      	b.n	8019400 <_sungetc_r+0x34>

08019446 <__ssrefill_r>:
 8019446:	b510      	push	{r4, lr}
 8019448:	460c      	mov	r4, r1
 801944a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801944c:	b169      	cbz	r1, 801946a <__ssrefill_r+0x24>
 801944e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019452:	4299      	cmp	r1, r3
 8019454:	d001      	beq.n	801945a <__ssrefill_r+0x14>
 8019456:	f7ff fdbf 	bl	8018fd8 <_free_r>
 801945a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801945c:	6063      	str	r3, [r4, #4]
 801945e:	2000      	movs	r0, #0
 8019460:	6360      	str	r0, [r4, #52]	; 0x34
 8019462:	b113      	cbz	r3, 801946a <__ssrefill_r+0x24>
 8019464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019466:	6023      	str	r3, [r4, #0]
 8019468:	bd10      	pop	{r4, pc}
 801946a:	6923      	ldr	r3, [r4, #16]
 801946c:	6023      	str	r3, [r4, #0]
 801946e:	2300      	movs	r3, #0
 8019470:	6063      	str	r3, [r4, #4]
 8019472:	89a3      	ldrh	r3, [r4, #12]
 8019474:	f043 0320 	orr.w	r3, r3, #32
 8019478:	81a3      	strh	r3, [r4, #12]
 801947a:	f04f 30ff 	mov.w	r0, #4294967295
 801947e:	e7f3      	b.n	8019468 <__ssrefill_r+0x22>

08019480 <__ssvfiscanf_r>:
 8019480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019484:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019488:	460c      	mov	r4, r1
 801948a:	2100      	movs	r1, #0
 801948c:	9144      	str	r1, [sp, #272]	; 0x110
 801948e:	9145      	str	r1, [sp, #276]	; 0x114
 8019490:	499f      	ldr	r1, [pc, #636]	; (8019710 <__ssvfiscanf_r+0x290>)
 8019492:	91a0      	str	r1, [sp, #640]	; 0x280
 8019494:	f10d 0804 	add.w	r8, sp, #4
 8019498:	499e      	ldr	r1, [pc, #632]	; (8019714 <__ssvfiscanf_r+0x294>)
 801949a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019718 <__ssvfiscanf_r+0x298>
 801949e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80194a2:	4606      	mov	r6, r0
 80194a4:	4692      	mov	sl, r2
 80194a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80194a8:	9300      	str	r3, [sp, #0]
 80194aa:	270a      	movs	r7, #10
 80194ac:	f89a 3000 	ldrb.w	r3, [sl]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	f000 812a 	beq.w	801970a <__ssvfiscanf_r+0x28a>
 80194b6:	4655      	mov	r5, sl
 80194b8:	f7ff f948 	bl	801874c <__locale_ctype_ptr>
 80194bc:	f815 bb01 	ldrb.w	fp, [r5], #1
 80194c0:	4458      	add	r0, fp
 80194c2:	7843      	ldrb	r3, [r0, #1]
 80194c4:	f013 0308 	ands.w	r3, r3, #8
 80194c8:	d01c      	beq.n	8019504 <__ssvfiscanf_r+0x84>
 80194ca:	6863      	ldr	r3, [r4, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	dd12      	ble.n	80194f6 <__ssvfiscanf_r+0x76>
 80194d0:	f7ff f93c 	bl	801874c <__locale_ctype_ptr>
 80194d4:	6823      	ldr	r3, [r4, #0]
 80194d6:	781a      	ldrb	r2, [r3, #0]
 80194d8:	4410      	add	r0, r2
 80194da:	7842      	ldrb	r2, [r0, #1]
 80194dc:	0712      	lsls	r2, r2, #28
 80194de:	d401      	bmi.n	80194e4 <__ssvfiscanf_r+0x64>
 80194e0:	46aa      	mov	sl, r5
 80194e2:	e7e3      	b.n	80194ac <__ssvfiscanf_r+0x2c>
 80194e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80194e6:	3201      	adds	r2, #1
 80194e8:	9245      	str	r2, [sp, #276]	; 0x114
 80194ea:	6862      	ldr	r2, [r4, #4]
 80194ec:	3301      	adds	r3, #1
 80194ee:	3a01      	subs	r2, #1
 80194f0:	6062      	str	r2, [r4, #4]
 80194f2:	6023      	str	r3, [r4, #0]
 80194f4:	e7e9      	b.n	80194ca <__ssvfiscanf_r+0x4a>
 80194f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80194f8:	4621      	mov	r1, r4
 80194fa:	4630      	mov	r0, r6
 80194fc:	4798      	blx	r3
 80194fe:	2800      	cmp	r0, #0
 8019500:	d0e6      	beq.n	80194d0 <__ssvfiscanf_r+0x50>
 8019502:	e7ed      	b.n	80194e0 <__ssvfiscanf_r+0x60>
 8019504:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019508:	f040 8082 	bne.w	8019610 <__ssvfiscanf_r+0x190>
 801950c:	9343      	str	r3, [sp, #268]	; 0x10c
 801950e:	9341      	str	r3, [sp, #260]	; 0x104
 8019510:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019514:	2b2a      	cmp	r3, #42	; 0x2a
 8019516:	d103      	bne.n	8019520 <__ssvfiscanf_r+0xa0>
 8019518:	2310      	movs	r3, #16
 801951a:	9341      	str	r3, [sp, #260]	; 0x104
 801951c:	f10a 0502 	add.w	r5, sl, #2
 8019520:	46aa      	mov	sl, r5
 8019522:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801952a:	2a09      	cmp	r2, #9
 801952c:	d922      	bls.n	8019574 <__ssvfiscanf_r+0xf4>
 801952e:	2203      	movs	r2, #3
 8019530:	4879      	ldr	r0, [pc, #484]	; (8019718 <__ssvfiscanf_r+0x298>)
 8019532:	f7e6 fe6d 	bl	8000210 <memchr>
 8019536:	b138      	cbz	r0, 8019548 <__ssvfiscanf_r+0xc8>
 8019538:	eba0 0309 	sub.w	r3, r0, r9
 801953c:	2001      	movs	r0, #1
 801953e:	4098      	lsls	r0, r3
 8019540:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019542:	4318      	orrs	r0, r3
 8019544:	9041      	str	r0, [sp, #260]	; 0x104
 8019546:	46aa      	mov	sl, r5
 8019548:	f89a 3000 	ldrb.w	r3, [sl]
 801954c:	2b67      	cmp	r3, #103	; 0x67
 801954e:	f10a 0501 	add.w	r5, sl, #1
 8019552:	d82b      	bhi.n	80195ac <__ssvfiscanf_r+0x12c>
 8019554:	2b65      	cmp	r3, #101	; 0x65
 8019556:	f080 809f 	bcs.w	8019698 <__ssvfiscanf_r+0x218>
 801955a:	2b47      	cmp	r3, #71	; 0x47
 801955c:	d810      	bhi.n	8019580 <__ssvfiscanf_r+0x100>
 801955e:	2b45      	cmp	r3, #69	; 0x45
 8019560:	f080 809a 	bcs.w	8019698 <__ssvfiscanf_r+0x218>
 8019564:	2b00      	cmp	r3, #0
 8019566:	d06c      	beq.n	8019642 <__ssvfiscanf_r+0x1c2>
 8019568:	2b25      	cmp	r3, #37	; 0x25
 801956a:	d051      	beq.n	8019610 <__ssvfiscanf_r+0x190>
 801956c:	2303      	movs	r3, #3
 801956e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019570:	9742      	str	r7, [sp, #264]	; 0x108
 8019572:	e027      	b.n	80195c4 <__ssvfiscanf_r+0x144>
 8019574:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019576:	fb07 1303 	mla	r3, r7, r3, r1
 801957a:	3b30      	subs	r3, #48	; 0x30
 801957c:	9343      	str	r3, [sp, #268]	; 0x10c
 801957e:	e7cf      	b.n	8019520 <__ssvfiscanf_r+0xa0>
 8019580:	2b5b      	cmp	r3, #91	; 0x5b
 8019582:	d06a      	beq.n	801965a <__ssvfiscanf_r+0x1da>
 8019584:	d80c      	bhi.n	80195a0 <__ssvfiscanf_r+0x120>
 8019586:	2b58      	cmp	r3, #88	; 0x58
 8019588:	d1f0      	bne.n	801956c <__ssvfiscanf_r+0xec>
 801958a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801958c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019590:	9241      	str	r2, [sp, #260]	; 0x104
 8019592:	2210      	movs	r2, #16
 8019594:	9242      	str	r2, [sp, #264]	; 0x108
 8019596:	2b6e      	cmp	r3, #110	; 0x6e
 8019598:	bf8c      	ite	hi
 801959a:	2304      	movhi	r3, #4
 801959c:	2303      	movls	r3, #3
 801959e:	e010      	b.n	80195c2 <__ssvfiscanf_r+0x142>
 80195a0:	2b63      	cmp	r3, #99	; 0x63
 80195a2:	d065      	beq.n	8019670 <__ssvfiscanf_r+0x1f0>
 80195a4:	2b64      	cmp	r3, #100	; 0x64
 80195a6:	d1e1      	bne.n	801956c <__ssvfiscanf_r+0xec>
 80195a8:	9742      	str	r7, [sp, #264]	; 0x108
 80195aa:	e7f4      	b.n	8019596 <__ssvfiscanf_r+0x116>
 80195ac:	2b70      	cmp	r3, #112	; 0x70
 80195ae:	d04b      	beq.n	8019648 <__ssvfiscanf_r+0x1c8>
 80195b0:	d826      	bhi.n	8019600 <__ssvfiscanf_r+0x180>
 80195b2:	2b6e      	cmp	r3, #110	; 0x6e
 80195b4:	d062      	beq.n	801967c <__ssvfiscanf_r+0x1fc>
 80195b6:	d84c      	bhi.n	8019652 <__ssvfiscanf_r+0x1d2>
 80195b8:	2b69      	cmp	r3, #105	; 0x69
 80195ba:	d1d7      	bne.n	801956c <__ssvfiscanf_r+0xec>
 80195bc:	2300      	movs	r3, #0
 80195be:	9342      	str	r3, [sp, #264]	; 0x108
 80195c0:	2303      	movs	r3, #3
 80195c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80195c4:	6863      	ldr	r3, [r4, #4]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	dd68      	ble.n	801969c <__ssvfiscanf_r+0x21c>
 80195ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195cc:	0659      	lsls	r1, r3, #25
 80195ce:	d407      	bmi.n	80195e0 <__ssvfiscanf_r+0x160>
 80195d0:	f7ff f8bc 	bl	801874c <__locale_ctype_ptr>
 80195d4:	6823      	ldr	r3, [r4, #0]
 80195d6:	781a      	ldrb	r2, [r3, #0]
 80195d8:	4410      	add	r0, r2
 80195da:	7842      	ldrb	r2, [r0, #1]
 80195dc:	0712      	lsls	r2, r2, #28
 80195de:	d464      	bmi.n	80196aa <__ssvfiscanf_r+0x22a>
 80195e0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80195e2:	2b02      	cmp	r3, #2
 80195e4:	dc73      	bgt.n	80196ce <__ssvfiscanf_r+0x24e>
 80195e6:	466b      	mov	r3, sp
 80195e8:	4622      	mov	r2, r4
 80195ea:	a941      	add	r1, sp, #260	; 0x104
 80195ec:	4630      	mov	r0, r6
 80195ee:	f000 f897 	bl	8019720 <_scanf_chars>
 80195f2:	2801      	cmp	r0, #1
 80195f4:	f000 8089 	beq.w	801970a <__ssvfiscanf_r+0x28a>
 80195f8:	2802      	cmp	r0, #2
 80195fa:	f47f af71 	bne.w	80194e0 <__ssvfiscanf_r+0x60>
 80195fe:	e01d      	b.n	801963c <__ssvfiscanf_r+0x1bc>
 8019600:	2b75      	cmp	r3, #117	; 0x75
 8019602:	d0d1      	beq.n	80195a8 <__ssvfiscanf_r+0x128>
 8019604:	2b78      	cmp	r3, #120	; 0x78
 8019606:	d0c0      	beq.n	801958a <__ssvfiscanf_r+0x10a>
 8019608:	2b73      	cmp	r3, #115	; 0x73
 801960a:	d1af      	bne.n	801956c <__ssvfiscanf_r+0xec>
 801960c:	2302      	movs	r3, #2
 801960e:	e7d8      	b.n	80195c2 <__ssvfiscanf_r+0x142>
 8019610:	6863      	ldr	r3, [r4, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	dd0c      	ble.n	8019630 <__ssvfiscanf_r+0x1b0>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	781a      	ldrb	r2, [r3, #0]
 801961a:	455a      	cmp	r2, fp
 801961c:	d175      	bne.n	801970a <__ssvfiscanf_r+0x28a>
 801961e:	3301      	adds	r3, #1
 8019620:	6862      	ldr	r2, [r4, #4]
 8019622:	6023      	str	r3, [r4, #0]
 8019624:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019626:	3a01      	subs	r2, #1
 8019628:	3301      	adds	r3, #1
 801962a:	6062      	str	r2, [r4, #4]
 801962c:	9345      	str	r3, [sp, #276]	; 0x114
 801962e:	e757      	b.n	80194e0 <__ssvfiscanf_r+0x60>
 8019630:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019632:	4621      	mov	r1, r4
 8019634:	4630      	mov	r0, r6
 8019636:	4798      	blx	r3
 8019638:	2800      	cmp	r0, #0
 801963a:	d0ec      	beq.n	8019616 <__ssvfiscanf_r+0x196>
 801963c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801963e:	2800      	cmp	r0, #0
 8019640:	d159      	bne.n	80196f6 <__ssvfiscanf_r+0x276>
 8019642:	f04f 30ff 	mov.w	r0, #4294967295
 8019646:	e05c      	b.n	8019702 <__ssvfiscanf_r+0x282>
 8019648:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801964a:	f042 0220 	orr.w	r2, r2, #32
 801964e:	9241      	str	r2, [sp, #260]	; 0x104
 8019650:	e79b      	b.n	801958a <__ssvfiscanf_r+0x10a>
 8019652:	2308      	movs	r3, #8
 8019654:	9342      	str	r3, [sp, #264]	; 0x108
 8019656:	2304      	movs	r3, #4
 8019658:	e7b3      	b.n	80195c2 <__ssvfiscanf_r+0x142>
 801965a:	4629      	mov	r1, r5
 801965c:	4640      	mov	r0, r8
 801965e:	f000 f9c7 	bl	80199f0 <__sccl>
 8019662:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019668:	9341      	str	r3, [sp, #260]	; 0x104
 801966a:	4605      	mov	r5, r0
 801966c:	2301      	movs	r3, #1
 801966e:	e7a8      	b.n	80195c2 <__ssvfiscanf_r+0x142>
 8019670:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019676:	9341      	str	r3, [sp, #260]	; 0x104
 8019678:	2300      	movs	r3, #0
 801967a:	e7a2      	b.n	80195c2 <__ssvfiscanf_r+0x142>
 801967c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801967e:	06c3      	lsls	r3, r0, #27
 8019680:	f53f af2e 	bmi.w	80194e0 <__ssvfiscanf_r+0x60>
 8019684:	9b00      	ldr	r3, [sp, #0]
 8019686:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019688:	1d19      	adds	r1, r3, #4
 801968a:	9100      	str	r1, [sp, #0]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	07c0      	lsls	r0, r0, #31
 8019690:	bf4c      	ite	mi
 8019692:	801a      	strhmi	r2, [r3, #0]
 8019694:	601a      	strpl	r2, [r3, #0]
 8019696:	e723      	b.n	80194e0 <__ssvfiscanf_r+0x60>
 8019698:	2305      	movs	r3, #5
 801969a:	e792      	b.n	80195c2 <__ssvfiscanf_r+0x142>
 801969c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801969e:	4621      	mov	r1, r4
 80196a0:	4630      	mov	r0, r6
 80196a2:	4798      	blx	r3
 80196a4:	2800      	cmp	r0, #0
 80196a6:	d090      	beq.n	80195ca <__ssvfiscanf_r+0x14a>
 80196a8:	e7c8      	b.n	801963c <__ssvfiscanf_r+0x1bc>
 80196aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80196ac:	3201      	adds	r2, #1
 80196ae:	9245      	str	r2, [sp, #276]	; 0x114
 80196b0:	6862      	ldr	r2, [r4, #4]
 80196b2:	3a01      	subs	r2, #1
 80196b4:	2a00      	cmp	r2, #0
 80196b6:	6062      	str	r2, [r4, #4]
 80196b8:	dd02      	ble.n	80196c0 <__ssvfiscanf_r+0x240>
 80196ba:	3301      	adds	r3, #1
 80196bc:	6023      	str	r3, [r4, #0]
 80196be:	e787      	b.n	80195d0 <__ssvfiscanf_r+0x150>
 80196c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196c2:	4621      	mov	r1, r4
 80196c4:	4630      	mov	r0, r6
 80196c6:	4798      	blx	r3
 80196c8:	2800      	cmp	r0, #0
 80196ca:	d081      	beq.n	80195d0 <__ssvfiscanf_r+0x150>
 80196cc:	e7b6      	b.n	801963c <__ssvfiscanf_r+0x1bc>
 80196ce:	2b04      	cmp	r3, #4
 80196d0:	dc06      	bgt.n	80196e0 <__ssvfiscanf_r+0x260>
 80196d2:	466b      	mov	r3, sp
 80196d4:	4622      	mov	r2, r4
 80196d6:	a941      	add	r1, sp, #260	; 0x104
 80196d8:	4630      	mov	r0, r6
 80196da:	f000 f885 	bl	80197e8 <_scanf_i>
 80196de:	e788      	b.n	80195f2 <__ssvfiscanf_r+0x172>
 80196e0:	4b0e      	ldr	r3, [pc, #56]	; (801971c <__ssvfiscanf_r+0x29c>)
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	f43f aefc 	beq.w	80194e0 <__ssvfiscanf_r+0x60>
 80196e8:	466b      	mov	r3, sp
 80196ea:	4622      	mov	r2, r4
 80196ec:	a941      	add	r1, sp, #260	; 0x104
 80196ee:	4630      	mov	r0, r6
 80196f0:	f7fc fd7e 	bl	80161f0 <_scanf_float>
 80196f4:	e77d      	b.n	80195f2 <__ssvfiscanf_r+0x172>
 80196f6:	89a3      	ldrh	r3, [r4, #12]
 80196f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80196fc:	bf18      	it	ne
 80196fe:	f04f 30ff 	movne.w	r0, #4294967295
 8019702:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801970a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801970c:	e7f9      	b.n	8019702 <__ssvfiscanf_r+0x282>
 801970e:	bf00      	nop
 8019710:	080193cd 	.word	0x080193cd
 8019714:	08019447 	.word	0x08019447
 8019718:	0801a7da 	.word	0x0801a7da
 801971c:	080161f1 	.word	0x080161f1

08019720 <_scanf_chars>:
 8019720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019724:	4615      	mov	r5, r2
 8019726:	688a      	ldr	r2, [r1, #8]
 8019728:	4680      	mov	r8, r0
 801972a:	460c      	mov	r4, r1
 801972c:	b932      	cbnz	r2, 801973c <_scanf_chars+0x1c>
 801972e:	698a      	ldr	r2, [r1, #24]
 8019730:	2a00      	cmp	r2, #0
 8019732:	bf14      	ite	ne
 8019734:	f04f 32ff 	movne.w	r2, #4294967295
 8019738:	2201      	moveq	r2, #1
 801973a:	608a      	str	r2, [r1, #8]
 801973c:	6822      	ldr	r2, [r4, #0]
 801973e:	06d1      	lsls	r1, r2, #27
 8019740:	bf5f      	itttt	pl
 8019742:	681a      	ldrpl	r2, [r3, #0]
 8019744:	1d11      	addpl	r1, r2, #4
 8019746:	6019      	strpl	r1, [r3, #0]
 8019748:	6817      	ldrpl	r7, [r2, #0]
 801974a:	2600      	movs	r6, #0
 801974c:	69a3      	ldr	r3, [r4, #24]
 801974e:	b1db      	cbz	r3, 8019788 <_scanf_chars+0x68>
 8019750:	2b01      	cmp	r3, #1
 8019752:	d107      	bne.n	8019764 <_scanf_chars+0x44>
 8019754:	682b      	ldr	r3, [r5, #0]
 8019756:	6962      	ldr	r2, [r4, #20]
 8019758:	781b      	ldrb	r3, [r3, #0]
 801975a:	5cd3      	ldrb	r3, [r2, r3]
 801975c:	b9a3      	cbnz	r3, 8019788 <_scanf_chars+0x68>
 801975e:	2e00      	cmp	r6, #0
 8019760:	d132      	bne.n	80197c8 <_scanf_chars+0xa8>
 8019762:	e006      	b.n	8019772 <_scanf_chars+0x52>
 8019764:	2b02      	cmp	r3, #2
 8019766:	d007      	beq.n	8019778 <_scanf_chars+0x58>
 8019768:	2e00      	cmp	r6, #0
 801976a:	d12d      	bne.n	80197c8 <_scanf_chars+0xa8>
 801976c:	69a3      	ldr	r3, [r4, #24]
 801976e:	2b01      	cmp	r3, #1
 8019770:	d12a      	bne.n	80197c8 <_scanf_chars+0xa8>
 8019772:	2001      	movs	r0, #1
 8019774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019778:	f7fe ffe8 	bl	801874c <__locale_ctype_ptr>
 801977c:	682b      	ldr	r3, [r5, #0]
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	4418      	add	r0, r3
 8019782:	7843      	ldrb	r3, [r0, #1]
 8019784:	071b      	lsls	r3, r3, #28
 8019786:	d4ef      	bmi.n	8019768 <_scanf_chars+0x48>
 8019788:	6823      	ldr	r3, [r4, #0]
 801978a:	06da      	lsls	r2, r3, #27
 801978c:	bf5e      	ittt	pl
 801978e:	682b      	ldrpl	r3, [r5, #0]
 8019790:	781b      	ldrbpl	r3, [r3, #0]
 8019792:	703b      	strbpl	r3, [r7, #0]
 8019794:	682a      	ldr	r2, [r5, #0]
 8019796:	686b      	ldr	r3, [r5, #4]
 8019798:	f102 0201 	add.w	r2, r2, #1
 801979c:	602a      	str	r2, [r5, #0]
 801979e:	68a2      	ldr	r2, [r4, #8]
 80197a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80197a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80197a8:	606b      	str	r3, [r5, #4]
 80197aa:	f106 0601 	add.w	r6, r6, #1
 80197ae:	bf58      	it	pl
 80197b0:	3701      	addpl	r7, #1
 80197b2:	60a2      	str	r2, [r4, #8]
 80197b4:	b142      	cbz	r2, 80197c8 <_scanf_chars+0xa8>
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	dcc8      	bgt.n	801974c <_scanf_chars+0x2c>
 80197ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197be:	4629      	mov	r1, r5
 80197c0:	4640      	mov	r0, r8
 80197c2:	4798      	blx	r3
 80197c4:	2800      	cmp	r0, #0
 80197c6:	d0c1      	beq.n	801974c <_scanf_chars+0x2c>
 80197c8:	6823      	ldr	r3, [r4, #0]
 80197ca:	f013 0310 	ands.w	r3, r3, #16
 80197ce:	d105      	bne.n	80197dc <_scanf_chars+0xbc>
 80197d0:	68e2      	ldr	r2, [r4, #12]
 80197d2:	3201      	adds	r2, #1
 80197d4:	60e2      	str	r2, [r4, #12]
 80197d6:	69a2      	ldr	r2, [r4, #24]
 80197d8:	b102      	cbz	r2, 80197dc <_scanf_chars+0xbc>
 80197da:	703b      	strb	r3, [r7, #0]
 80197dc:	6923      	ldr	r3, [r4, #16]
 80197de:	441e      	add	r6, r3
 80197e0:	6126      	str	r6, [r4, #16]
 80197e2:	2000      	movs	r0, #0
 80197e4:	e7c6      	b.n	8019774 <_scanf_chars+0x54>
	...

080197e8 <_scanf_i>:
 80197e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ec:	469a      	mov	sl, r3
 80197ee:	4b74      	ldr	r3, [pc, #464]	; (80199c0 <_scanf_i+0x1d8>)
 80197f0:	460c      	mov	r4, r1
 80197f2:	4683      	mov	fp, r0
 80197f4:	4616      	mov	r6, r2
 80197f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197fa:	b087      	sub	sp, #28
 80197fc:	ab03      	add	r3, sp, #12
 80197fe:	68a7      	ldr	r7, [r4, #8]
 8019800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019804:	4b6f      	ldr	r3, [pc, #444]	; (80199c4 <_scanf_i+0x1dc>)
 8019806:	69a1      	ldr	r1, [r4, #24]
 8019808:	4a6f      	ldr	r2, [pc, #444]	; (80199c8 <_scanf_i+0x1e0>)
 801980a:	2903      	cmp	r1, #3
 801980c:	bf08      	it	eq
 801980e:	461a      	moveq	r2, r3
 8019810:	1e7b      	subs	r3, r7, #1
 8019812:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019816:	bf84      	itt	hi
 8019818:	f240 135d 	movwhi	r3, #349	; 0x15d
 801981c:	60a3      	strhi	r3, [r4, #8]
 801981e:	6823      	ldr	r3, [r4, #0]
 8019820:	9200      	str	r2, [sp, #0]
 8019822:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019826:	bf88      	it	hi
 8019828:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801982c:	f104 091c 	add.w	r9, r4, #28
 8019830:	6023      	str	r3, [r4, #0]
 8019832:	bf8c      	ite	hi
 8019834:	197f      	addhi	r7, r7, r5
 8019836:	2700      	movls	r7, #0
 8019838:	464b      	mov	r3, r9
 801983a:	f04f 0800 	mov.w	r8, #0
 801983e:	9301      	str	r3, [sp, #4]
 8019840:	6831      	ldr	r1, [r6, #0]
 8019842:	ab03      	add	r3, sp, #12
 8019844:	2202      	movs	r2, #2
 8019846:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801984a:	7809      	ldrb	r1, [r1, #0]
 801984c:	f7e6 fce0 	bl	8000210 <memchr>
 8019850:	9b01      	ldr	r3, [sp, #4]
 8019852:	b330      	cbz	r0, 80198a2 <_scanf_i+0xba>
 8019854:	f1b8 0f01 	cmp.w	r8, #1
 8019858:	d15a      	bne.n	8019910 <_scanf_i+0x128>
 801985a:	6862      	ldr	r2, [r4, #4]
 801985c:	b92a      	cbnz	r2, 801986a <_scanf_i+0x82>
 801985e:	6822      	ldr	r2, [r4, #0]
 8019860:	2108      	movs	r1, #8
 8019862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019866:	6061      	str	r1, [r4, #4]
 8019868:	6022      	str	r2, [r4, #0]
 801986a:	6822      	ldr	r2, [r4, #0]
 801986c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019870:	6022      	str	r2, [r4, #0]
 8019872:	68a2      	ldr	r2, [r4, #8]
 8019874:	1e51      	subs	r1, r2, #1
 8019876:	60a1      	str	r1, [r4, #8]
 8019878:	b19a      	cbz	r2, 80198a2 <_scanf_i+0xba>
 801987a:	6832      	ldr	r2, [r6, #0]
 801987c:	1c51      	adds	r1, r2, #1
 801987e:	6031      	str	r1, [r6, #0]
 8019880:	7812      	ldrb	r2, [r2, #0]
 8019882:	701a      	strb	r2, [r3, #0]
 8019884:	1c5d      	adds	r5, r3, #1
 8019886:	6873      	ldr	r3, [r6, #4]
 8019888:	3b01      	subs	r3, #1
 801988a:	2b00      	cmp	r3, #0
 801988c:	6073      	str	r3, [r6, #4]
 801988e:	dc07      	bgt.n	80198a0 <_scanf_i+0xb8>
 8019890:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019894:	4631      	mov	r1, r6
 8019896:	4658      	mov	r0, fp
 8019898:	4798      	blx	r3
 801989a:	2800      	cmp	r0, #0
 801989c:	f040 8086 	bne.w	80199ac <_scanf_i+0x1c4>
 80198a0:	462b      	mov	r3, r5
 80198a2:	f108 0801 	add.w	r8, r8, #1
 80198a6:	f1b8 0f03 	cmp.w	r8, #3
 80198aa:	d1c8      	bne.n	801983e <_scanf_i+0x56>
 80198ac:	6862      	ldr	r2, [r4, #4]
 80198ae:	b90a      	cbnz	r2, 80198b4 <_scanf_i+0xcc>
 80198b0:	220a      	movs	r2, #10
 80198b2:	6062      	str	r2, [r4, #4]
 80198b4:	6862      	ldr	r2, [r4, #4]
 80198b6:	4945      	ldr	r1, [pc, #276]	; (80199cc <_scanf_i+0x1e4>)
 80198b8:	6960      	ldr	r0, [r4, #20]
 80198ba:	9301      	str	r3, [sp, #4]
 80198bc:	1a89      	subs	r1, r1, r2
 80198be:	f000 f897 	bl	80199f0 <__sccl>
 80198c2:	9b01      	ldr	r3, [sp, #4]
 80198c4:	f04f 0800 	mov.w	r8, #0
 80198c8:	461d      	mov	r5, r3
 80198ca:	68a3      	ldr	r3, [r4, #8]
 80198cc:	6822      	ldr	r2, [r4, #0]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d03a      	beq.n	8019948 <_scanf_i+0x160>
 80198d2:	6831      	ldr	r1, [r6, #0]
 80198d4:	6960      	ldr	r0, [r4, #20]
 80198d6:	f891 c000 	ldrb.w	ip, [r1]
 80198da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80198de:	2800      	cmp	r0, #0
 80198e0:	d032      	beq.n	8019948 <_scanf_i+0x160>
 80198e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80198e6:	d121      	bne.n	801992c <_scanf_i+0x144>
 80198e8:	0510      	lsls	r0, r2, #20
 80198ea:	d51f      	bpl.n	801992c <_scanf_i+0x144>
 80198ec:	f108 0801 	add.w	r8, r8, #1
 80198f0:	b117      	cbz	r7, 80198f8 <_scanf_i+0x110>
 80198f2:	3301      	adds	r3, #1
 80198f4:	3f01      	subs	r7, #1
 80198f6:	60a3      	str	r3, [r4, #8]
 80198f8:	6873      	ldr	r3, [r6, #4]
 80198fa:	3b01      	subs	r3, #1
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	6073      	str	r3, [r6, #4]
 8019900:	dd1b      	ble.n	801993a <_scanf_i+0x152>
 8019902:	6833      	ldr	r3, [r6, #0]
 8019904:	3301      	adds	r3, #1
 8019906:	6033      	str	r3, [r6, #0]
 8019908:	68a3      	ldr	r3, [r4, #8]
 801990a:	3b01      	subs	r3, #1
 801990c:	60a3      	str	r3, [r4, #8]
 801990e:	e7dc      	b.n	80198ca <_scanf_i+0xe2>
 8019910:	f1b8 0f02 	cmp.w	r8, #2
 8019914:	d1ad      	bne.n	8019872 <_scanf_i+0x8a>
 8019916:	6822      	ldr	r2, [r4, #0]
 8019918:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801991c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019920:	d1bf      	bne.n	80198a2 <_scanf_i+0xba>
 8019922:	2110      	movs	r1, #16
 8019924:	6061      	str	r1, [r4, #4]
 8019926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801992a:	e7a1      	b.n	8019870 <_scanf_i+0x88>
 801992c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019930:	6022      	str	r2, [r4, #0]
 8019932:	780b      	ldrb	r3, [r1, #0]
 8019934:	702b      	strb	r3, [r5, #0]
 8019936:	3501      	adds	r5, #1
 8019938:	e7de      	b.n	80198f8 <_scanf_i+0x110>
 801993a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801993e:	4631      	mov	r1, r6
 8019940:	4658      	mov	r0, fp
 8019942:	4798      	blx	r3
 8019944:	2800      	cmp	r0, #0
 8019946:	d0df      	beq.n	8019908 <_scanf_i+0x120>
 8019948:	6823      	ldr	r3, [r4, #0]
 801994a:	05d9      	lsls	r1, r3, #23
 801994c:	d50c      	bpl.n	8019968 <_scanf_i+0x180>
 801994e:	454d      	cmp	r5, r9
 8019950:	d908      	bls.n	8019964 <_scanf_i+0x17c>
 8019952:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801995a:	4632      	mov	r2, r6
 801995c:	4658      	mov	r0, fp
 801995e:	4798      	blx	r3
 8019960:	1e6f      	subs	r7, r5, #1
 8019962:	463d      	mov	r5, r7
 8019964:	454d      	cmp	r5, r9
 8019966:	d029      	beq.n	80199bc <_scanf_i+0x1d4>
 8019968:	6822      	ldr	r2, [r4, #0]
 801996a:	f012 0210 	ands.w	r2, r2, #16
 801996e:	d113      	bne.n	8019998 <_scanf_i+0x1b0>
 8019970:	702a      	strb	r2, [r5, #0]
 8019972:	6863      	ldr	r3, [r4, #4]
 8019974:	9e00      	ldr	r6, [sp, #0]
 8019976:	4649      	mov	r1, r9
 8019978:	4658      	mov	r0, fp
 801997a:	47b0      	blx	r6
 801997c:	f8da 3000 	ldr.w	r3, [sl]
 8019980:	6821      	ldr	r1, [r4, #0]
 8019982:	1d1a      	adds	r2, r3, #4
 8019984:	f8ca 2000 	str.w	r2, [sl]
 8019988:	f011 0f20 	tst.w	r1, #32
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	d010      	beq.n	80199b2 <_scanf_i+0x1ca>
 8019990:	6018      	str	r0, [r3, #0]
 8019992:	68e3      	ldr	r3, [r4, #12]
 8019994:	3301      	adds	r3, #1
 8019996:	60e3      	str	r3, [r4, #12]
 8019998:	eba5 0509 	sub.w	r5, r5, r9
 801999c:	44a8      	add	r8, r5
 801999e:	6925      	ldr	r5, [r4, #16]
 80199a0:	4445      	add	r5, r8
 80199a2:	6125      	str	r5, [r4, #16]
 80199a4:	2000      	movs	r0, #0
 80199a6:	b007      	add	sp, #28
 80199a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ac:	f04f 0800 	mov.w	r8, #0
 80199b0:	e7ca      	b.n	8019948 <_scanf_i+0x160>
 80199b2:	07ca      	lsls	r2, r1, #31
 80199b4:	bf4c      	ite	mi
 80199b6:	8018      	strhmi	r0, [r3, #0]
 80199b8:	6018      	strpl	r0, [r3, #0]
 80199ba:	e7ea      	b.n	8019992 <_scanf_i+0x1aa>
 80199bc:	2001      	movs	r0, #1
 80199be:	e7f2      	b.n	80199a6 <_scanf_i+0x1be>
 80199c0:	0801a334 	.word	0x0801a334
 80199c4:	08017409 	.word	0x08017409
 80199c8:	08019b6d 	.word	0x08019b6d
 80199cc:	0801a7f5 	.word	0x0801a7f5

080199d0 <_sbrk_r>:
 80199d0:	b538      	push	{r3, r4, r5, lr}
 80199d2:	4c06      	ldr	r4, [pc, #24]	; (80199ec <_sbrk_r+0x1c>)
 80199d4:	2300      	movs	r3, #0
 80199d6:	4605      	mov	r5, r0
 80199d8:	4608      	mov	r0, r1
 80199da:	6023      	str	r3, [r4, #0]
 80199dc:	f7ed fe50 	bl	8007680 <_sbrk>
 80199e0:	1c43      	adds	r3, r0, #1
 80199e2:	d102      	bne.n	80199ea <_sbrk_r+0x1a>
 80199e4:	6823      	ldr	r3, [r4, #0]
 80199e6:	b103      	cbz	r3, 80199ea <_sbrk_r+0x1a>
 80199e8:	602b      	str	r3, [r5, #0]
 80199ea:	bd38      	pop	{r3, r4, r5, pc}
 80199ec:	20045d34 	.word	0x20045d34

080199f0 <__sccl>:
 80199f0:	b570      	push	{r4, r5, r6, lr}
 80199f2:	780b      	ldrb	r3, [r1, #0]
 80199f4:	2b5e      	cmp	r3, #94	; 0x5e
 80199f6:	bf13      	iteet	ne
 80199f8:	1c4a      	addne	r2, r1, #1
 80199fa:	1c8a      	addeq	r2, r1, #2
 80199fc:	784b      	ldrbeq	r3, [r1, #1]
 80199fe:	2100      	movne	r1, #0
 8019a00:	bf08      	it	eq
 8019a02:	2101      	moveq	r1, #1
 8019a04:	1e44      	subs	r4, r0, #1
 8019a06:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019a0a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019a0e:	42ac      	cmp	r4, r5
 8019a10:	d1fb      	bne.n	8019a0a <__sccl+0x1a>
 8019a12:	b913      	cbnz	r3, 8019a1a <__sccl+0x2a>
 8019a14:	3a01      	subs	r2, #1
 8019a16:	4610      	mov	r0, r2
 8019a18:	bd70      	pop	{r4, r5, r6, pc}
 8019a1a:	f081 0401 	eor.w	r4, r1, #1
 8019a1e:	54c4      	strb	r4, [r0, r3]
 8019a20:	1c51      	adds	r1, r2, #1
 8019a22:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019a26:	2d2d      	cmp	r5, #45	; 0x2d
 8019a28:	f101 36ff 	add.w	r6, r1, #4294967295
 8019a2c:	460a      	mov	r2, r1
 8019a2e:	d006      	beq.n	8019a3e <__sccl+0x4e>
 8019a30:	2d5d      	cmp	r5, #93	; 0x5d
 8019a32:	d0f0      	beq.n	8019a16 <__sccl+0x26>
 8019a34:	b90d      	cbnz	r5, 8019a3a <__sccl+0x4a>
 8019a36:	4632      	mov	r2, r6
 8019a38:	e7ed      	b.n	8019a16 <__sccl+0x26>
 8019a3a:	462b      	mov	r3, r5
 8019a3c:	e7ef      	b.n	8019a1e <__sccl+0x2e>
 8019a3e:	780e      	ldrb	r6, [r1, #0]
 8019a40:	2e5d      	cmp	r6, #93	; 0x5d
 8019a42:	d0fa      	beq.n	8019a3a <__sccl+0x4a>
 8019a44:	42b3      	cmp	r3, r6
 8019a46:	dcf8      	bgt.n	8019a3a <__sccl+0x4a>
 8019a48:	3301      	adds	r3, #1
 8019a4a:	429e      	cmp	r6, r3
 8019a4c:	54c4      	strb	r4, [r0, r3]
 8019a4e:	dcfb      	bgt.n	8019a48 <__sccl+0x58>
 8019a50:	3102      	adds	r1, #2
 8019a52:	e7e6      	b.n	8019a22 <__sccl+0x32>

08019a54 <strncmp>:
 8019a54:	b510      	push	{r4, lr}
 8019a56:	b16a      	cbz	r2, 8019a74 <strncmp+0x20>
 8019a58:	3901      	subs	r1, #1
 8019a5a:	1884      	adds	r4, r0, r2
 8019a5c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a64:	4293      	cmp	r3, r2
 8019a66:	d103      	bne.n	8019a70 <strncmp+0x1c>
 8019a68:	42a0      	cmp	r0, r4
 8019a6a:	d001      	beq.n	8019a70 <strncmp+0x1c>
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d1f5      	bne.n	8019a5c <strncmp+0x8>
 8019a70:	1a98      	subs	r0, r3, r2
 8019a72:	bd10      	pop	{r4, pc}
 8019a74:	4610      	mov	r0, r2
 8019a76:	e7fc      	b.n	8019a72 <strncmp+0x1e>

08019a78 <_strtoul_l.isra.0>:
 8019a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a7c:	4680      	mov	r8, r0
 8019a7e:	4689      	mov	r9, r1
 8019a80:	4692      	mov	sl, r2
 8019a82:	461e      	mov	r6, r3
 8019a84:	460f      	mov	r7, r1
 8019a86:	463d      	mov	r5, r7
 8019a88:	9808      	ldr	r0, [sp, #32]
 8019a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a8e:	f7fe fe59 	bl	8018744 <__locale_ctype_ptr_l>
 8019a92:	4420      	add	r0, r4
 8019a94:	7843      	ldrb	r3, [r0, #1]
 8019a96:	f013 0308 	ands.w	r3, r3, #8
 8019a9a:	d130      	bne.n	8019afe <_strtoul_l.isra.0+0x86>
 8019a9c:	2c2d      	cmp	r4, #45	; 0x2d
 8019a9e:	d130      	bne.n	8019b02 <_strtoul_l.isra.0+0x8a>
 8019aa0:	787c      	ldrb	r4, [r7, #1]
 8019aa2:	1cbd      	adds	r5, r7, #2
 8019aa4:	2101      	movs	r1, #1
 8019aa6:	2e00      	cmp	r6, #0
 8019aa8:	d05c      	beq.n	8019b64 <_strtoul_l.isra.0+0xec>
 8019aaa:	2e10      	cmp	r6, #16
 8019aac:	d109      	bne.n	8019ac2 <_strtoul_l.isra.0+0x4a>
 8019aae:	2c30      	cmp	r4, #48	; 0x30
 8019ab0:	d107      	bne.n	8019ac2 <_strtoul_l.isra.0+0x4a>
 8019ab2:	782b      	ldrb	r3, [r5, #0]
 8019ab4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019ab8:	2b58      	cmp	r3, #88	; 0x58
 8019aba:	d14e      	bne.n	8019b5a <_strtoul_l.isra.0+0xe2>
 8019abc:	786c      	ldrb	r4, [r5, #1]
 8019abe:	2610      	movs	r6, #16
 8019ac0:	3502      	adds	r5, #2
 8019ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	fbb2 f2f6 	udiv	r2, r2, r6
 8019acc:	fb06 fc02 	mul.w	ip, r6, r2
 8019ad0:	ea6f 0c0c 	mvn.w	ip, ip
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019ada:	2f09      	cmp	r7, #9
 8019adc:	d817      	bhi.n	8019b0e <_strtoul_l.isra.0+0x96>
 8019ade:	463c      	mov	r4, r7
 8019ae0:	42a6      	cmp	r6, r4
 8019ae2:	dd23      	ble.n	8019b2c <_strtoul_l.isra.0+0xb4>
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	db1e      	blt.n	8019b26 <_strtoul_l.isra.0+0xae>
 8019ae8:	4282      	cmp	r2, r0
 8019aea:	d31c      	bcc.n	8019b26 <_strtoul_l.isra.0+0xae>
 8019aec:	d101      	bne.n	8019af2 <_strtoul_l.isra.0+0x7a>
 8019aee:	45a4      	cmp	ip, r4
 8019af0:	db19      	blt.n	8019b26 <_strtoul_l.isra.0+0xae>
 8019af2:	fb00 4006 	mla	r0, r0, r6, r4
 8019af6:	2301      	movs	r3, #1
 8019af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019afc:	e7eb      	b.n	8019ad6 <_strtoul_l.isra.0+0x5e>
 8019afe:	462f      	mov	r7, r5
 8019b00:	e7c1      	b.n	8019a86 <_strtoul_l.isra.0+0xe>
 8019b02:	2c2b      	cmp	r4, #43	; 0x2b
 8019b04:	bf04      	itt	eq
 8019b06:	1cbd      	addeq	r5, r7, #2
 8019b08:	787c      	ldrbeq	r4, [r7, #1]
 8019b0a:	4619      	mov	r1, r3
 8019b0c:	e7cb      	b.n	8019aa6 <_strtoul_l.isra.0+0x2e>
 8019b0e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019b12:	2f19      	cmp	r7, #25
 8019b14:	d801      	bhi.n	8019b1a <_strtoul_l.isra.0+0xa2>
 8019b16:	3c37      	subs	r4, #55	; 0x37
 8019b18:	e7e2      	b.n	8019ae0 <_strtoul_l.isra.0+0x68>
 8019b1a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019b1e:	2f19      	cmp	r7, #25
 8019b20:	d804      	bhi.n	8019b2c <_strtoul_l.isra.0+0xb4>
 8019b22:	3c57      	subs	r4, #87	; 0x57
 8019b24:	e7dc      	b.n	8019ae0 <_strtoul_l.isra.0+0x68>
 8019b26:	f04f 33ff 	mov.w	r3, #4294967295
 8019b2a:	e7e5      	b.n	8019af8 <_strtoul_l.isra.0+0x80>
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	da09      	bge.n	8019b44 <_strtoul_l.isra.0+0xcc>
 8019b30:	2322      	movs	r3, #34	; 0x22
 8019b32:	f8c8 3000 	str.w	r3, [r8]
 8019b36:	f04f 30ff 	mov.w	r0, #4294967295
 8019b3a:	f1ba 0f00 	cmp.w	sl, #0
 8019b3e:	d107      	bne.n	8019b50 <_strtoul_l.isra.0+0xd8>
 8019b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b44:	b101      	cbz	r1, 8019b48 <_strtoul_l.isra.0+0xd0>
 8019b46:	4240      	negs	r0, r0
 8019b48:	f1ba 0f00 	cmp.w	sl, #0
 8019b4c:	d0f8      	beq.n	8019b40 <_strtoul_l.isra.0+0xc8>
 8019b4e:	b10b      	cbz	r3, 8019b54 <_strtoul_l.isra.0+0xdc>
 8019b50:	f105 39ff 	add.w	r9, r5, #4294967295
 8019b54:	f8ca 9000 	str.w	r9, [sl]
 8019b58:	e7f2      	b.n	8019b40 <_strtoul_l.isra.0+0xc8>
 8019b5a:	2430      	movs	r4, #48	; 0x30
 8019b5c:	2e00      	cmp	r6, #0
 8019b5e:	d1b0      	bne.n	8019ac2 <_strtoul_l.isra.0+0x4a>
 8019b60:	2608      	movs	r6, #8
 8019b62:	e7ae      	b.n	8019ac2 <_strtoul_l.isra.0+0x4a>
 8019b64:	2c30      	cmp	r4, #48	; 0x30
 8019b66:	d0a4      	beq.n	8019ab2 <_strtoul_l.isra.0+0x3a>
 8019b68:	260a      	movs	r6, #10
 8019b6a:	e7aa      	b.n	8019ac2 <_strtoul_l.isra.0+0x4a>

08019b6c <_strtoul_r>:
 8019b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b6e:	4c06      	ldr	r4, [pc, #24]	; (8019b88 <_strtoul_r+0x1c>)
 8019b70:	4d06      	ldr	r5, [pc, #24]	; (8019b8c <_strtoul_r+0x20>)
 8019b72:	6824      	ldr	r4, [r4, #0]
 8019b74:	6a24      	ldr	r4, [r4, #32]
 8019b76:	2c00      	cmp	r4, #0
 8019b78:	bf08      	it	eq
 8019b7a:	462c      	moveq	r4, r5
 8019b7c:	9400      	str	r4, [sp, #0]
 8019b7e:	f7ff ff7b 	bl	8019a78 <_strtoul_l.isra.0>
 8019b82:	b003      	add	sp, #12
 8019b84:	bd30      	pop	{r4, r5, pc}
 8019b86:	bf00      	nop
 8019b88:	2000000c 	.word	0x2000000c
 8019b8c:	20000070 	.word	0x20000070

08019b90 <__submore>:
 8019b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b94:	460c      	mov	r4, r1
 8019b96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b9c:	4299      	cmp	r1, r3
 8019b9e:	d11d      	bne.n	8019bdc <__submore+0x4c>
 8019ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019ba4:	f7ff fa66 	bl	8019074 <_malloc_r>
 8019ba8:	b918      	cbnz	r0, 8019bb2 <__submore+0x22>
 8019baa:	f04f 30ff 	mov.w	r0, #4294967295
 8019bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019bb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8019bb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8019bbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019bc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019bc6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019bca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019bce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019bd2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019bd6:	6020      	str	r0, [r4, #0]
 8019bd8:	2000      	movs	r0, #0
 8019bda:	e7e8      	b.n	8019bae <__submore+0x1e>
 8019bdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019bde:	0077      	lsls	r7, r6, #1
 8019be0:	463a      	mov	r2, r7
 8019be2:	f000 f837 	bl	8019c54 <_realloc_r>
 8019be6:	4605      	mov	r5, r0
 8019be8:	2800      	cmp	r0, #0
 8019bea:	d0de      	beq.n	8019baa <__submore+0x1a>
 8019bec:	eb00 0806 	add.w	r8, r0, r6
 8019bf0:	4601      	mov	r1, r0
 8019bf2:	4632      	mov	r2, r6
 8019bf4:	4640      	mov	r0, r8
 8019bf6:	f7fb fe8b 	bl	8015910 <memcpy>
 8019bfa:	f8c4 8000 	str.w	r8, [r4]
 8019bfe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019c02:	e7e9      	b.n	8019bd8 <__submore+0x48>

08019c04 <__ascii_wctomb>:
 8019c04:	b149      	cbz	r1, 8019c1a <__ascii_wctomb+0x16>
 8019c06:	2aff      	cmp	r2, #255	; 0xff
 8019c08:	bf85      	ittet	hi
 8019c0a:	238a      	movhi	r3, #138	; 0x8a
 8019c0c:	6003      	strhi	r3, [r0, #0]
 8019c0e:	700a      	strbls	r2, [r1, #0]
 8019c10:	f04f 30ff 	movhi.w	r0, #4294967295
 8019c14:	bf98      	it	ls
 8019c16:	2001      	movls	r0, #1
 8019c18:	4770      	bx	lr
 8019c1a:	4608      	mov	r0, r1
 8019c1c:	4770      	bx	lr

08019c1e <memmove>:
 8019c1e:	4288      	cmp	r0, r1
 8019c20:	b510      	push	{r4, lr}
 8019c22:	eb01 0302 	add.w	r3, r1, r2
 8019c26:	d807      	bhi.n	8019c38 <memmove+0x1a>
 8019c28:	1e42      	subs	r2, r0, #1
 8019c2a:	4299      	cmp	r1, r3
 8019c2c:	d00a      	beq.n	8019c44 <memmove+0x26>
 8019c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019c36:	e7f8      	b.n	8019c2a <memmove+0xc>
 8019c38:	4283      	cmp	r3, r0
 8019c3a:	d9f5      	bls.n	8019c28 <memmove+0xa>
 8019c3c:	1881      	adds	r1, r0, r2
 8019c3e:	1ad2      	subs	r2, r2, r3
 8019c40:	42d3      	cmn	r3, r2
 8019c42:	d100      	bne.n	8019c46 <memmove+0x28>
 8019c44:	bd10      	pop	{r4, pc}
 8019c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019c4e:	e7f7      	b.n	8019c40 <memmove+0x22>

08019c50 <__malloc_lock>:
 8019c50:	4770      	bx	lr

08019c52 <__malloc_unlock>:
 8019c52:	4770      	bx	lr

08019c54 <_realloc_r>:
 8019c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c56:	4607      	mov	r7, r0
 8019c58:	4614      	mov	r4, r2
 8019c5a:	460e      	mov	r6, r1
 8019c5c:	b921      	cbnz	r1, 8019c68 <_realloc_r+0x14>
 8019c5e:	4611      	mov	r1, r2
 8019c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c64:	f7ff ba06 	b.w	8019074 <_malloc_r>
 8019c68:	b922      	cbnz	r2, 8019c74 <_realloc_r+0x20>
 8019c6a:	f7ff f9b5 	bl	8018fd8 <_free_r>
 8019c6e:	4625      	mov	r5, r4
 8019c70:	4628      	mov	r0, r5
 8019c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c74:	f000 f814 	bl	8019ca0 <_malloc_usable_size_r>
 8019c78:	42a0      	cmp	r0, r4
 8019c7a:	d20f      	bcs.n	8019c9c <_realloc_r+0x48>
 8019c7c:	4621      	mov	r1, r4
 8019c7e:	4638      	mov	r0, r7
 8019c80:	f7ff f9f8 	bl	8019074 <_malloc_r>
 8019c84:	4605      	mov	r5, r0
 8019c86:	2800      	cmp	r0, #0
 8019c88:	d0f2      	beq.n	8019c70 <_realloc_r+0x1c>
 8019c8a:	4631      	mov	r1, r6
 8019c8c:	4622      	mov	r2, r4
 8019c8e:	f7fb fe3f 	bl	8015910 <memcpy>
 8019c92:	4631      	mov	r1, r6
 8019c94:	4638      	mov	r0, r7
 8019c96:	f7ff f99f 	bl	8018fd8 <_free_r>
 8019c9a:	e7e9      	b.n	8019c70 <_realloc_r+0x1c>
 8019c9c:	4635      	mov	r5, r6
 8019c9e:	e7e7      	b.n	8019c70 <_realloc_r+0x1c>

08019ca0 <_malloc_usable_size_r>:
 8019ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ca4:	1f18      	subs	r0, r3, #4
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	bfbc      	itt	lt
 8019caa:	580b      	ldrlt	r3, [r1, r0]
 8019cac:	18c0      	addlt	r0, r0, r3
 8019cae:	4770      	bx	lr

08019cb0 <_init>:
 8019cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cb2:	bf00      	nop
 8019cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cb6:	bc08      	pop	{r3}
 8019cb8:	469e      	mov	lr, r3
 8019cba:	4770      	bx	lr

08019cbc <_fini>:
 8019cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cbe:	bf00      	nop
 8019cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cc2:	bc08      	pop	{r3}
 8019cc4:	469e      	mov	lr, r3
 8019cc6:	4770      	bx	lr
