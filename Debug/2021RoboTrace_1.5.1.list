
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  08018478  08018478  00028478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018f9c  08018f9c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018f9c  08018f9c  00028f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018fa4  08018fa4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018fa4  08018fa4  00028fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018fac  08018fac  00028fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018fb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037de8  200001e0  0801918c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fc8  0801918c  00037fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038a7a  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b16  00000000  00000000  00068c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002280  00000000  00000000  000707a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb0  00000000  00000000  00072a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037778  00000000  00000000  000749d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025eaf  00000000  00000000  000ac148  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110e66  00000000  00000000  000d1ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e2e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a800  00000000  00000000  001e2ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018460 	.word	0x08018460

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018460 	.word	0x08018460

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 f994 	bl	8009304 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035abc 	.word	0x20035abc

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 f97c 	bl	8009304 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035abc 	.word	0x20035abc

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 f805 	bl	8009030 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fd6c 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fd66 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fd60 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fd5a 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fd54 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fd4e 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fd48 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fd42 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fd3c 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fd36 	bl	8007b04 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fd2a 	bl	8007b04 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fd24 	bl	8007b04 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 f8f1 	bl	8015310 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <_ZN7Encoder4initEv+0x30>)
 80011b0:	f00b ff40 	bl	800d034 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <_ZN7Encoder4initEv+0x34>)
 80011b8:	f00b ff3c 	bl	800d034 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_ZN7Encoder4initEv+0x38>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <_ZN7Encoder4initEv+0x3c>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20035d10 	.word	0x20035d10
 80011d8:	200359f4 	.word	0x200359f4
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010400 	.word	0x40010400
 80011e4:	00000000 	.word	0x00000000

080011e8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1c8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <_ZN7Encoder9updateCntEv+0x1d4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001224:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <_ZN7Encoder9updateCntEv+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	a356      	add	r3, pc, #344	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f0 	bl	8000628 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4625      	mov	r5, r4
 800124e:	461c      	mov	r4, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f98f 	bl	8000578 <__aeabi_f2d>
 800125a:	a351      	add	r3, pc, #324	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9e2 	bl	8000628 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f826 	bl	80002bc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcce 	bl	8000c18 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f977 	bl	8000578 <__aeabi_f2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_dmul>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	a33e      	add	r3, pc, #248	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9bc 	bl	8000628 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f800 	bl	80002bc <__adddf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fca8 	bl	8000c18 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <_ZN7Encoder9updateCntEv+0x1e4>)
 80012d4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 80012dc:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 80012e4:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a01 	vldr	s15, [r3, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f927 	bl	8000578 <__aeabi_f2d>
 800132a:	a31f      	add	r3, pc, #124	; (adr r3, 80013a8 <_ZN7Encoder9updateCntEv+0x1c0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa9a 	bl	800087c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc62 	bl	8000c18 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a02 	vldr	s15, [r3, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a06 	vldr	s14, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a02 	vldr	s15, [r3, #8]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edc3 7a06 	vstr	s15, [r3, #24]
	monitor_distance = total_distance_;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZN7Encoder9updateCntEv+0x1e8>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fa99999 	.word	0x3fa99999
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fee6666 	.word	0x3fee6666
 80013a8:	ce73a049 	.word	0xce73a049
 80013ac:	3f77a3f6 	.word	0x3f77a3f6
 80013b0:	40010000 	.word	0x40010000
 80013b4:	47000000 	.word	0x47000000
 80013b8:	3f912547 	.word	0x3f912547
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000200 	.word	0x20000200
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return distance_;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
}
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_ZN7Encoder8clearCntEv+0x3c>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_ZN7Encoder8clearCntEv+0x40>)
 8001476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40010000 	.word	0x40010000
 8001494:	40010400 	.word	0x40010400

08001498 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f978 	bl	8001804 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001514:	f000 f98c 	bl	8001830 <fopen_folder_and_file>

	return ret;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <user_fclose+0x1c>)
 8001530:	f010 fada 	bl	8011ae8 <f_close>

	return ret;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20034900 	.word	0x20034900

08001544 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e030      	b.n	80015c0 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f804 	bl	8000578 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9cd 3400 	strd	r3, r4, [sp]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <sd_write_float+0x94>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <sd_write_float+0x98>)
 800157e:	f012 ff37 	bl	80143f0 <sniprintf>

		if(state == ADD_WRITE){
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sd_write_float+0x9c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <sd_write_float+0x9c>)
 8001590:	f010 fb1e 	bl	8011bd0 <f_lseek>
 8001594:	e003      	b.n	800159e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_float+0x9c>)
 800159a:	f010 fb19 	bl	8011bd0 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <sd_write_float+0x98>)
 80015a0:	f7fe fe2e 	bl	8000200 <strlen>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sd_write_float+0xa0>)
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <sd_write_float+0x98>)
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <sd_write_float+0x9c>)
 80015ac:	f010 f887 	bl	80116be <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015b0:	f000 f958 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbc8      	blt.n	800155e <sd_write_float+0x1a>
	}
	return ret;
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08018478 	.word	0x08018478
 80015dc:	20034870 	.word	0x20034870
 80015e0:	20034900 	.word	0x20034900
 80015e4:	200348f0 	.word	0x200348f0

080015e8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f900 	bl	8001804 <create_path>

	if(state == OVER_WRITE){
 8001604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb0>)
 800160e:	f010 fa95 	bl	8011b3c <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <sd_write_array_float+0xb4>)
 8001614:	f010 fd00 	bl	8012018 <f_unlink>
		f_chdir("..");
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <sd_write_array_float+0xb8>)
 800161a:	f010 fa8f 	bl	8011b3c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161e:	f000 f907 	bl	8001830 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	e028      	b.n	800167a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9f 	bl	8000578 <__aeabi_f2d>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	e9cd 3400 	strd	r3, r4, [sp]
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <sd_write_array_float+0xbc>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <sd_write_array_float+0xc0>)
 8001648:	f012 fed2 	bl	80143f0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <sd_write_array_float+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <sd_write_array_float+0xc4>)
 8001654:	f010 fabc 	bl	8011bd0 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <sd_write_array_float+0xc0>)
 800165a:	f7fe fdd1 	bl	8000200 <strlen>
 800165e:	4602      	mov	r2, r0
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <sd_write_array_float+0xc8>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <sd_write_array_float+0xc0>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <sd_write_array_float+0xc4>)
 8001666:	f010 f82a 	bl	80116be <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800166a:	f000 f8fb 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbd0      	blt.n	8001628 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <sd_write_array_float+0xc4>)
 8001688:	f010 fa2e 	bl	8011ae8 <f_close>

	return ret;
 800168c:	7d7b      	ldrb	r3, [r7, #21]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20034770 	.word	0x20034770
 800169c:	20033630 	.word	0x20033630
 80016a0:	08018494 	.word	0x08018494
 80016a4:	08018478 	.word	0x08018478
 80016a8:	20034870 	.word	0x20034870
 80016ac:	20034900 	.word	0x20034900
 80016b0:	200348f0 	.word	0x200348f0

080016b4 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f898 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f8ac 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d8:	e019      	b.n	800170e <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <sd_read_array_float+0x80>)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <sd_read_array_float+0x84>)
 80016ea:	f012 fed5 	bl	8014498 <siscanf>
		i++;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <sd_read_array_float+0x5a>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <sd_read_array_float+0x88>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <sd_read_array_float+0x84>)
 8001714:	f010 fe5e 	bl	80123d4 <f_gets>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1dd      	bne.n	80016da <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171e:	f000 f8a1 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <sd_read_array_float+0x88>)
 8001724:	f010 f9e0 	bl	8011ae8 <f_close>

	return ret;
 8001728:	7d7b      	ldrb	r3, [r7, #21]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	08018484 	.word	0x08018484
 8001738:	20034870 	.word	0x20034870
 800173c:	20034900 	.word	0x20034900

08001740 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f852 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001760:	f000 f866 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001764:	e019      	b.n	800179a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <sd_read_array_double+0x80>)
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <sd_read_array_double+0x84>)
 8001776:	f012 fe8f 	bl	8014498 <siscanf>
		i++;
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	b29b      	uxth	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	db03      	blt.n	800179a <sd_read_array_double+0x5a>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <sd_read_array_double+0x88>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <sd_read_array_double+0x84>)
 80017a0:	f010 fe18 	bl	80123d4 <f_gets>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017aa:	f000 f85b 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <sd_read_array_double+0x88>)
 80017b0:	f010 f99a 	bl	8011ae8 <f_close>

	return ret;
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	08018490 	.word	0x08018490
 80017c4:	20034870 	.word	0x20034870
 80017c8:	20034900 	.word	0x20034900

080017cc <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <sd_mount+0x30>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_mount+0x34>)
 80017dc:	f00f fbfc 	bl	8010fd8 <f_mount>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <sd_mount+0x20>
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <sd_mount+0x24>
	else ret = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080184a0 	.word	0x080184a0
 8001800:	20033730 	.word	0x20033730

08001804 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <create_path+0x24>)
 8001812:	f012 feb0 	bl	8014576 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <create_path+0x28>)
 800181a:	f012 feac 	bl	8014576 <strcpy>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20034770 	.word	0x20034770
 800182c:	20033630 	.word	0x20033630

08001830 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <fopen_folder_and_file+0x24>)
 8001836:	f010 fcb1 	bl	801219c <f_mkdir>

	f_chdir(dirpath);
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <fopen_folder_and_file+0x24>)
 800183c:	f010 f97e 	bl	8011b3c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001840:	2213      	movs	r2, #19
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <fopen_folder_and_file+0x28>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x2c>)
 8001846:	f00f fc0d 	bl	8011064 <f_open>

	f_chdir("..");
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <fopen_folder_and_file+0x30>)
 800184c:	f010 f976 	bl	8011b3c <f_chdir>


}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20034770 	.word	0x20034770
 8001858:	20033630 	.word	0x20033630
 800185c:	20034900 	.word	0x20034900
 8001860:	08018494 	.word	0x08018494

08001864 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <bufclear+0x1c>
		buffer[i] = '\0';
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <bufclear+0x30>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	ddf4      	ble.n	8001870 <bufclear+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20034870 	.word	0x20034870

08001898 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <read_byte+0x54>)
 80018b4:	f007 fbbc 	bl	8009030 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b8:	f107 010f 	add.w	r1, r7, #15
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2201      	movs	r2, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <read_byte+0x58>)
 80018c2:	f00a fd7d 	bl	800c3c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2201      	movs	r2, #1
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <read_byte+0x58>)
 80018d0:	f00a feaa 	bl	800c628 <HAL_SPI_Receive>
	CS_SET;
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <read_byte+0x54>)
 80018dc:	f007 fba8 	bl	8009030 <HAL_GPIO_WritePin>

	return val;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	2003599c 	.word	0x2003599c

080018f4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <write_byte+0x54>)
 8001916:	f007 fb8b 	bl	8009030 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2201      	movs	r2, #1
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <write_byte+0x58>)
 8001924:	f00a fd4c 	bl	800c3c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001928:	1db9      	adds	r1, r7, #6
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <write_byte+0x58>)
 8001930:	f00a fd46 	bl	800c3c0 <HAL_SPI_Transmit>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <write_byte+0x54>)
 800193c:	f007 fb78 	bl	8009030 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020400 	.word	0x40020400
 800194c:	2003599c 	.word	0x2003599c

08001950 <IMU_init>:

uint16_t IMU_init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff9c 	bl	8001898 <read_byte>
 8001960:	4603      	mov	r3, r0
 8001962:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	d119      	bne.n	800199e <IMU_init+0x4e>
		ret = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ffbf 	bl	80018f4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001976:	2110      	movs	r1, #16
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff ffbb 	bl	80018f4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197e:	2120      	movs	r1, #32
 8001980:	207f      	movs	r0, #127	; 0x7f
 8001982:	f7ff ffb7 	bl	80018f4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffb3 	bl	80018f4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198e:	2106      	movs	r1, #6
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffaf 	bl	80018f4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001996:	2100      	movs	r1, #0
 8001998:	207f      	movs	r0, #127	; 0x7f
 800199a:	f7ff ffab 	bl	80018f4 <write_byte>
	}
	return ret;
 800199e:	88fb      	ldrh	r3, [r7, #6]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <read_gyro_data>:

void read_gyro_data() {
 80019a8:	b598      	push	{r3, r4, r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019ac:	2033      	movs	r0, #51	; 0x33
 80019ae:	f7ff ff73 	bl	8001898 <read_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21c      	sxth	r4, r3
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7ff ff6d 	bl	8001898 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4323      	orrs	r3, r4
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <read_gyro_data+0x64>)
 80019c8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019ca:	2035      	movs	r0, #53	; 0x35
 80019cc:	f7ff ff64 	bl	8001898 <read_byte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff5e 	bl	8001898 <read_byte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <read_gyro_data+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e8:	2037      	movs	r0, #55	; 0x37
 80019ea:	f7ff ff55 	bl	8001898 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f7ff ff4f 	bl	8001898 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <read_gyro_data+0x6c>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	bd98      	pop	{r3, r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20035938 	.word	0x20035938
 8001a10:	20035936 	.word	0x20035936
 8001a14:	20035930 	.word	0x20035930

08001a18 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	809a      	strh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	80da      	strh	r2, [r3, #6]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	811a      	strh	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	815a      	strh	r2, [r3, #10]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
{

}
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a64:	f7ff ff74 	bl	8001950 <IMU_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <_ZN3IMU4initEv+0x50>)
 8001a72:	f012 fc27 	bl	80142c4 <iprintf>

	lcd_clear();
 8001a76:	f7ff fb13 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fb1f 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <_ZN3IMU4initEv+0x54>)
 8001a84:	f7ff fb46 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fb18 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <_ZN3IMU4initEv+0x58>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9e:	f006 f831 	bl	8007b04 <HAL_Delay>

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	080184a4 	.word	0x080184a4
 8001ab0:	080184b4 	.word	0x080184b4
 8001ab4:	080184c0 	.word	0x080184c0

08001ab8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ac0:	f7ff ff72 	bl	80019a8 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd33 	bl	8000554 <__aeabi_i2d>
 8001aee:	a316      	add	r3, pc, #88	; (adr r3, 8001b48 <_ZN3IMU12updateValuesEv+0x90>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd98 	bl	8000628 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4625      	mov	r5, r4
 8001afe:	461c      	mov	r4, r3
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd24 	bl	8000554 <__aeabi_i2d>
 8001b0c:	a310      	add	r3, pc, #64	; (adr r3, 8001b50 <_ZN3IMU12updateValuesEv+0x98>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd89 	bl	8000628 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fbcd 	bl	80002bc <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f82d 	bl	8000b88 <__aeabi_d2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}
 8001b48:	eb851eb8 	.word	0xeb851eb8
 8001b4c:	3f9eb851 	.word	0x3f9eb851
 8001b50:	70a3d70a 	.word	0x70a3d70a
 8001b54:	3fef0a3d 	.word	0x3fef0a3d
 8001b58:	20035938 	.word	0x20035938
 8001b5c:	20035936 	.word	0x20035936
 8001b60:	20035930 	.word	0x20035930
 8001b64:	20000210 	.word	0x20000210

08001b68 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fcf3 	bl	8000578 <__aeabi_f2d>
 8001b92:	a316      	add	r3, pc, #88	; (adr r3, 8001bec <_ZN3IMU8getOmegaEv+0x84>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fe70 	bl	800087c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ba6:	a313      	add	r3, pc, #76	; (adr r3, 8001bf4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd3a 	bl	8000628 <__aeabi_dmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bc2:	f7fe fe5b 	bl	800087c <__aeabi_ddiv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4621      	mov	r1, r4
 8001bce:	f7ff f823 	bl	8000c18 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	ee07 3a90 	vmov	s15, r3
}
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	40668000 	.word	0x40668000
 8001bec:	66666666 	.word	0x66666666
 8001bf0:	40306666 	.word	0x40306666
 8001bf4:	54411744 	.word	0x54411744
 8001bf8:	400921fb 	.word	0x400921fb

08001bfc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c04:	466b      	mov	r3, sp
 8001c06:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0c:	f005 ff7a 	bl	8007b04 <HAL_Delay>
	lcd_clear();
 8001c10:	f7ff fa46 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fa52 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c1c:	4840      	ldr	r0, [pc, #256]	; (8001d20 <_ZN3IMU11calibrationEv+0x124>)
 8001c1e:	f7ff fa79 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fa4b 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c2a:	483e      	ldr	r0, [pc, #248]	; (8001d24 <_ZN3IMU11calibrationEv+0x128>)
 8001c2c:	f7ff fa72 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c34:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c3a:	1e5d      	subs	r5, r3, #1
 8001c3c:	61bd      	str	r5, [r7, #24]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	3301      	adds	r3, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	0154      	lsls	r4, r2, #5
 8001c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c56:	014b      	lsls	r3, r1, #5
 8001c58:	462b      	mov	r3, r5
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	0154      	lsls	r4, r2, #5
 8001c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c70:	014b      	lsls	r3, r1, #5
 8001c72:	462b      	mov	r3, r5
 8001c74:	3301      	adds	r3, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3303      	adds	r3, #3
 8001c7a:	3307      	adds	r3, #7
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	ebad 0d03 	sub.w	sp, sp, r3
 8001c84:	466b      	mov	r3, sp
 8001c86:	3303      	adds	r3, #3
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	83fb      	strh	r3, [r7, #30]
 8001c92:	8bfa      	ldrh	r2, [r7, #30]
 8001c94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	da13      	bge.n	8001cc4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	ee07 2a90 	vmov	s15, r2
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f005 ff24 	bl	8007b04 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cbc:	8bfb      	ldrh	r3, [r7, #30]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	83fb      	strh	r3, [r7, #30]
 8001cc2:	e7e6      	b.n	8001c92 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	3301      	adds	r3, #1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d00e      	beq.n	8001cfa <_ZN3IMU11calibrationEv+0xfe>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e7ec      	b.n	8001cd4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cfa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d14:	46b5      	mov	sp, r6
}
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	; 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	080184c4 	.word	0x080184c4
 8001d24:	080184d0 	.word	0x080184d0

08001d28 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	1dfa      	adds	r2, r7, #7
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <INA260_read+0x50>)
 8001d46:	f007 fadd 	bl	8009304 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <INA260_read+0x50>)
 8001d5a:	f007 fbd1 	bl	8009500 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20035b50 	.word	0x20035b50

08001d7c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	460b      	mov	r3, r1
 8001d94:	717b      	strb	r3, [r7, #5]
 8001d96:	4613      	mov	r3, r2
 8001d98:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	733b      	strb	r3, [r7, #12]
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	737b      	strb	r3, [r7, #13]
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001da6:	793b      	ldrb	r3, [r7, #4]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <INA260_write+0x48>)
 8001db6:	f007 faa5 	bl	8009304 <HAL_I2C_Master_Transmit>
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20035b50 	.word	0x20035b50

08001dc8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	79f9      	ldrb	r1, [r7, #7]
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ffcb 	bl	8001d7c <INA260_write>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	21df      	movs	r1, #223	; 0xdf
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff ffe2 	bl	8001dc8 <setConfig>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
{

}
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	482a      	ldr	r0, [pc, #168]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e36:	f007 f8e3 	bl	8009000 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <_ZN8JoyStick8getValueEv+0x2e>
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e52:	2101      	movs	r1, #1
 8001e54:	4823      	ldr	r0, [pc, #140]	; (8001ee4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e56:	f007 f8d3 	bl	8009000 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <_ZN8JoyStick8getValueEv+0x4e>
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e78:	f007 f8c2 	bl	8009000 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <_ZN8JoyStick8getValueEv+0x70>
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e94:	2104      	movs	r1, #4
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e98:	f007 f8b2 	bl	8009000 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <_ZN8JoyStick8getValueEv+0x90>
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001eb8:	f007 f8a2 	bl	8009000 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40020400 	.word	0x40020400

08001eec <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b52      	cmp	r3, #82	; 0x52
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4856      	ldr	r0, [pc, #344]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f007 f893 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	4853      	ldr	r0, [pc, #332]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f007 f88d 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	4850      	ldr	r0, [pc, #320]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f007 f887 	bl	8009030 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f22:	e098      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b47      	cmp	r3, #71	; 0x47
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	484b      	ldr	r0, [pc, #300]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f007 f87d 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4848      	ldr	r0, [pc, #288]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f007 f877 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4845      	ldr	r0, [pc, #276]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f007 f871 	bl	8009030 <HAL_GPIO_WritePin>
}
 8001f4e:	e082      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b42      	cmp	r3, #66	; 0x42
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	4840      	ldr	r0, [pc, #256]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f007 f867 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	483d      	ldr	r0, [pc, #244]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f007 f861 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	483a      	ldr	r0, [pc, #232]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f007 f85b 	bl	8009030 <HAL_GPIO_WritePin>
}
 8001f7a:	e06c      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b43      	cmp	r3, #67	; 0x43
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4835      	ldr	r0, [pc, #212]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f007 f851 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4832      	ldr	r0, [pc, #200]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f007 f84b 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	482f      	ldr	r0, [pc, #188]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f007 f845 	bl	8009030 <HAL_GPIO_WritePin>
}
 8001fa6:	e056      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b4d      	cmp	r3, #77	; 0x4d
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	482a      	ldr	r0, [pc, #168]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f007 f83b 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f007 f835 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	4824      	ldr	r0, [pc, #144]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f007 f82f 	bl	8009030 <HAL_GPIO_WritePin>
}
 8001fd2:	e040      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b59      	cmp	r3, #89	; 0x59
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f007 f825 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	481c      	ldr	r0, [pc, #112]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f007 f81f 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f007 f819 	bl	8009030 <HAL_GPIO_WritePin>
}
 8001ffe:	e02a      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b57      	cmp	r3, #87	; 0x57
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800200e:	f007 f80f 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800201a:	f007 f809 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002026:	f007 f803 	bl	8009030 <HAL_GPIO_WritePin>
}
 800202a:	e014      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b7e      	cmp	r3, #126	; 0x7e
 8002030:	d111      	bne.n	8002056 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800203a:	f006 fff9 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002046:	f006 fff3 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002052:	f006 ffed 	bl	8009030 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40020000 	.word	0x40020000

08002064 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002082:	4813      	ldr	r0, [pc, #76]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 8002084:	f006 ffd4 	bl	8009030 <HAL_GPIO_WritePin>
 8002088:	e009      	b.n	800209e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 800209a:	f006 ffc9 	bl	8009030 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800209e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020ae:	f006 ffbf 	bl	8009030 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020b2:	e009      	b.n	80020c8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020c4:	f006 ffb4 	bl	8009030 <HAL_GPIO_WritePin>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020000 	.word	0x40020000

080020d4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b092      	sub	sp, #72	; 0x48
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe92 	bl	8001e0c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	331c      	adds	r3, #28
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
 80020f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d008      	beq.n	8002110 <_ZN10LineSensorC1Ev+0x3c>
 80020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2200      	movs	r2, #0
 8002106:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	3302      	adds	r3, #2
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
 800210e:	e7f2      	b.n	80020f6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	3338      	adds	r3, #56	; 0x38
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	429a      	cmp	r2, r3
 8002128:	d009      	beq.n	800213e <_ZN10LineSensorC1Ev+0x6a>
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	623b      	str	r3, [r7, #32]
		s = 0;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002138:	3304      	adds	r3, #4
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
 800213c:	e7f1      	b.n	8002122 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3338      	adds	r3, #56	; 0x38
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	d009      	beq.n	800216c <_ZN10LineSensorC1Ev+0x98>
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	617b      	str	r3, [r7, #20]
		m = 0;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	3304      	adds	r3, #4
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	e7f1      	b.n	8002150 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d009      	beq.n	800219a <_ZN10LineSensorC1Ev+0xc6>
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	60bb      	str	r3, [r7, #8]
		s = 1;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002190:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	3304      	adds	r3, #4
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
 8002198:	e7f1      	b.n	800217e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	3748      	adds	r7, #72	; 0x48
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	220e      	movs	r2, #14
 80021b0:	4619      	mov	r1, r3
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021b4:	f005 fd0c 	bl	8007bd0 <HAL_ADC_Start_DMA>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20035a74 	.word	0x20035a74

080021c4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b0d      	cmp	r3, #13
 80021d4:	dc2f      	bgt.n	8002236 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3392      	adds	r3, #146	; 0x92
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	33a0      	adds	r3, #160	; 0xa0
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	440b      	add	r3, r1
 8002222:	3306      	adds	r3, #6
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e7cc      	b.n	80021d0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002240:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d902      	bls.n	8002250 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]


}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000021c 	.word	0x2000021c

08002260 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800226e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002272:	2b0d      	cmp	r3, #13
 8002274:	f200 80b8 	bhi.w	80023e8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800227e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002282:	2b09      	cmp	r3, #9
 8002284:	d81c      	bhi.n	80022c0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002286:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800228a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800228e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4423      	add	r3, r4
 800229e:	3306      	adds	r3, #6
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3304      	adds	r3, #4
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ae:	440b      	add	r3, r1
 80022b0:	3b30      	subs	r3, #48	; 0x30
 80022b2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022b8:	3301      	adds	r3, #1
 80022ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022be:	e7de      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d84d      	bhi.n	800236a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d2:	3301      	adds	r3, #1
 80022d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d83e      	bhi.n	800235e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ea:	4413      	add	r3, r2
 80022ec:	3b30      	subs	r3, #48	; 0x30
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fc:	4413      	add	r3, r2
 80022fe:	3b30      	subs	r3, #48	; 0x30
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d521      	bpl.n	8002352 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800230e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002318:	4413      	add	r3, r2
 800231a:	3b30      	subs	r3, #48	; 0x30
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002320:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002324:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232e:	440a      	add	r2, r1
 8002330:	3a30      	subs	r2, #48	; 0x30
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233a:	440b      	add	r3, r1
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002340:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800234a:	4413      	add	r3, r2
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002350:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002352:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002356:	3301      	adds	r3, #1
 8002358:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800235c:	e7bc      	b.n	80022d8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800235e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002362:	3301      	adds	r3, #1
 8002364:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002368:	e7ad      	b.n	80022c6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f903 	bl	8000578 <__aeabi_f2d>
 8002372:	a32a      	add	r3, pc, #168	; (adr r3, 800241c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f956 	bl	8000628 <__aeabi_dmul>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4625      	mov	r5, r4
 8002382:	461c      	mov	r4, r3
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8f1 	bl	8000578 <__aeabi_f2d>
 8002396:	a31c      	add	r3, pc, #112	; (adr r3, 8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f944 	bl	8000628 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd ff88 	bl	80002bc <__adddf3>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc2c 	bl	8000c18 <__aeabi_d2f>
 80023c0:	4601      	mov	r1, r0
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e0:	3301      	adds	r3, #1
 80023e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023e6:	e742      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023f0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3738      	adds	r7, #56	; 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	66666666 	.word	0x66666666
 800240c:	3fee6666 	.word	0x3fee6666
 8002410:	20000220 	.word	0x20000220
 8002414:	20000214 	.word	0x20000214
 8002418:	20000218 	.word	0x20000218
 800241c:	9999999a 	.word	0x9999999a
 8002420:	3fa99999 	.word	0x3fa99999

08002424 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0a9      	sub	sp, #164	; 0xa4
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f005 fb69 	bl	8007b04 <HAL_Delay>

	lcd_clear();
 8002432:	f7fe fe35 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002436:	2100      	movs	r1, #0
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fe41 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800243e:	48b1      	ldr	r0, [pc, #708]	; (8002704 <_ZN10LineSensor11calibrationEv+0x2e0>)
 8002440:	f7fe fe68 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002444:	2101      	movs	r1, #1
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe3a 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800244c:	48ae      	ldr	r0, [pc, #696]	; (8002708 <_ZN10LineSensor11calibrationEv+0x2e4>)
 800244e:	f7fe fe61 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002452:	2300      	movs	r3, #0
 8002454:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800245c:	2b0d      	cmp	r3, #13
 800245e:	d823      	bhi.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002460:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	32b0      	adds	r2, #176	; 0xb0
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	440a      	add	r2, r1
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002478:	440b      	add	r3, r1
 800247a:	3b60      	subs	r3, #96	; 0x60
 800247c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800247e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002482:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	32b0      	adds	r2, #176	; 0xb0
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	440a      	add	r2, r1
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002496:	440b      	add	r3, r1
 8002498:	3b98      	subs	r3, #152	; 0x98
 800249a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800249c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80024a6:	e7d7      	b.n	8002458 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fcb8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d079      	beq.n	80025b8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ce:	2b0d      	cmp	r3, #13
 80024d0:	d850      	bhi.n	8002574 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024dc:	4413      	add	r3, r2
 80024de:	3b60      	subs	r3, #96	; 0x60
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	33b0      	adds	r3, #176	; 0xb0
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d50f      	bpl.n	800251e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024fe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002502:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	32b0      	adds	r2, #176	; 0xb0
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	440a      	add	r2, r1
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002516:	440b      	add	r3, r1
 8002518:	3b60      	subs	r3, #96	; 0x60
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e024      	b.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800251e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002528:	4413      	add	r3, r2
 800252a:	3b98      	subs	r3, #152	; 0x98
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	33b0      	adds	r3, #176	; 0xb0
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd0e      	ble.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800254a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800254e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	32b0      	adds	r2, #176	; 0xb0
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	440a      	add	r2, r1
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002562:	440b      	add	r3, r1
 8002564:	3b98      	subs	r3, #152	; 0x98
 8002566:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002568:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800256c:	3301      	adds	r3, #1
 800256e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002572:	e7aa      	b.n	80024ca <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fcf2 	bl	8003f64 <_ZN12RotarySwitch8getValueEv>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002596:	2201      	movs	r2, #1
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fd61 	bl	8002064 <_ZN3LED2LREaa>
 80025a2:	e781      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025aa:	2200      	movs	r2, #0
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd57 	bl	8002064 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025b6:	e777      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 80025b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	3338      	adds	r3, #56	; 0x38
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025da:	429a      	cmp	r2, r3
 80025dc:	d016      	beq.n	800260c <_ZN10LineSensor11calibrationEv+0x1e8>
 80025de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 80025e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffc3 	bl	8000578 <__aeabi_f2d>
 80025f2:	4603      	mov	r3, r0
 80025f4:	460c      	mov	r4, r1
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	4844      	ldr	r0, [pc, #272]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025fc:	f011 fe62 	bl	80142c4 <iprintf>
	for(const auto &m : max_values){
 8002600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002604:	3304      	adds	r3, #4
 8002606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800260a:	e7e2      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 800260c:	200a      	movs	r0, #10
 800260e:	f011 fe71 	bl	80142f4 <putchar>
	for(const auto &m : min_values){
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800262e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002630:	429a      	cmp	r2, r3
 8002632:	d014      	beq.n	800265e <_ZN10LineSensor11calibrationEv+0x23a>
 8002634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002638:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff9a 	bl	8000578 <__aeabi_f2d>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	482f      	ldr	r0, [pc, #188]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 800264e:	f011 fe39 	bl	80142c4 <iprintf>
	for(const auto &m : min_values){
 8002652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002656:	3304      	adds	r3, #4
 8002658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 800265e:	200a      	movs	r0, #10
 8002660:	f011 fe48 	bl	80142f4 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800266a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d826      	bhi.n	80026c0 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002672:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800267c:	4413      	add	r3, r2
 800267e:	3b60      	subs	r3, #96	; 0x60
 8002680:	ed93 7a00 	vldr	s14, [r3]
 8002684:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800268e:	4413      	add	r3, r2
 8002690:	3b98      	subs	r3, #152	; 0x98
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800269e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002710 <_ZN10LineSensor11calibrationEv+0x2ec>
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	3392      	adds	r3, #146	; 0x92
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80026be:	e7d4      	b.n	800266a <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026c6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026ca:	2b0d      	cmp	r3, #13
 80026cc:	d815      	bhi.n	80026fa <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 80026ce:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80026d2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026dc:	440a      	add	r2, r1
 80026de:	3a98      	subs	r2, #152	; 0x98
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	33a0      	adds	r3, #160	; 0xa0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3304      	adds	r3, #4
 80026ec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026ee:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026f2:	3301      	adds	r3, #1
 80026f4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026f8:	e7e5      	b.n	80026c6 <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026fa:	bf00      	nop
 80026fc:	37a4      	adds	r7, #164	; 0xa4
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	080184dc 	.word	0x080184dc
 8002708:	080184e8 	.word	0x080184e8
 800270c:	080184f4 	.word	0x080184f4
 8002710:	447a0000 	.word	0x447a0000

08002714 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint8_t out_cnt = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
	static uint8_t cnt = 0;

	for(const auto & s : sensor){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3338      	adds	r3, #56	; 0x38
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d012      	beq.n	8002760 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60bb      	str	r3, [r7, #8]
		if(s >= 700) out_cnt++;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800279c <_ZN10LineSensor13emergencyStopEv+0x88>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	db02      	blt.n	8002758 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	3301      	adds	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3304      	adds	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e7e8      	b.n	8002732 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(out_cnt >= AD_DATA_SIZE){
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b0d      	cmp	r3, #13
 8002764:	d906      	bls.n	8002774 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e002      	b.n	800277a <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
	}

	if(cnt >= 100){
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b63      	cmp	r3, #99	; 0x63
 8002780:	d902      	bls.n	8002788 <_ZN10LineSensor13emergencyStopEv+0x74>
		flag = true;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e001      	b.n	800278c <_ZN10LineSensor13emergencyStopEv+0x78>
	}
	else flag = false;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

	return flag;
 800278c:	7dfb      	ldrb	r3, [r7, #23]

}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	442f0000 	.word	0x442f0000
 80027a0:	20000258 	.word	0x20000258

080027a4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80027ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80027b2:	eef0 7ae7 	vabs.f32	s15, s15
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:
float mon_diff, mon_diff_lpf;

uint16_t mon_store_cnt;
float mon_pdis;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false), velocity_play_flag_(false), velocity_table_idx_(0)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	675a      	str	r2, [r3, #116]	; 0x74
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002830:	333c      	adds	r3, #60	; 0x3c
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800283c:	333e      	adds	r3, #62	; 0x3e
 800283e:	2200      	movs	r2, #0
 8002840:	801a      	strh	r2, [r3, #0]
{
	motor_ = motor;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002864:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286a:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	82fb      	strh	r3, [r7, #22]
 8002870:	8afb      	ldrh	r3, [r7, #22]
 8002872:	f241 726f 	movw	r2, #5999	; 0x176f
 8002876:	4293      	cmp	r3, r2
 8002878:	d80c      	bhi.n	8002894 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xd0>
		velocity_table_[i] = 0;
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	331e      	adds	r3, #30
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800288c:	8afb      	ldrh	r3, [r7, #22]
 800288e:	3301      	adds	r3, #1
 8002890:	82fb      	strh	r3, [r7, #22]
 8002892:	e7ed      	b.n	8002870 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xac>
	}
}
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	0000      	movs	r0, r0
 80028a4:	0000      	movs	r0, r0
	...

080028a8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80028c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80028d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80028e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80028f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80028fc:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002910:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800291c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002934:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002940:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800294c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002954:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <_ZN9LineTrace9calcErrorEv+0x130>)
 800295c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fe09 	bl	8000578 <__aeabi_f2d>
 8002966:	a318      	add	r3, pc, #96	; (adr r3, 80029c8 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fe5c 	bl	8000628 <__aeabi_dmul>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	4625      	mov	r5, r4
 8002976:	461c      	mov	r4, r3
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <_ZN9LineTrace9calcErrorEv+0x134>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdfb 	bl	8000578 <__aeabi_f2d>
 8002982:	a313      	add	r3, pc, #76	; (adr r3, 80029d0 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fe4e 	bl	8000628 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fc92 	bl	80002bc <__adddf3>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	4618      	mov	r0, r3
 800299e:	4621      	mov	r1, r4
 80029a0:	f7fe f93a 	bl	8000c18 <__aeabi_d2f>
 80029a4:	4603      	mov	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <_ZN9LineTrace9calcErrorEv+0x138>)
 80029ac:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <_ZN9LineTrace9calcErrorEv+0x134>)
 80029b2:	6013      	str	r3, [r2, #0]

	return diff;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	ee07 3a90 	vmov	s15, r3

}
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdb0      	pop	{r4, r5, r7, pc}
 80029c4:	f3af 8000 	nop.w
 80029c8:	47ae147b 	.word	0x47ae147b
 80029cc:	3fb47ae1 	.word	0x3fb47ae1
 80029d0:	d70a3d71 	.word	0xd70a3d71
 80029d4:	3fed70a3 	.word	0x3fed70a3
 80029d8:	2000025c 	.word	0x2000025c
 80029dc:	20000268 	.word	0x20000268
 80029e0:	20000260 	.word	0x20000260
 80029e4:	00000000 	.word	0x00000000

080029e8 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff59 	bl	80028a8 <_ZN9LineTrace9calcErrorEv>
 80029f6:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002a2c:	4b33      	ldr	r3, [pc, #204]	; (8002afc <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	ee17 0a90 	vmov	r0, s15
 8002a42:	f7fd fd99 	bl	8000578 <__aeabi_f2d>
 8002a46:	a32a      	add	r3, pc, #168	; (adr r3, 8002af0 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd ff16 	bl	800087c <__aeabi_ddiv>
 8002a50:	4603      	mov	r3, r0
 8002a52:	460c      	mov	r4, r1
 8002a54:	4618      	mov	r0, r3
 8002a56:	4621      	mov	r1, r4
 8002a58:	f7fe f8de 	bl	8000c18 <__aeabi_d2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd87 	bl	8000578 <__aeabi_f2d>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	460d      	mov	r5, r1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a74:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7c:	ee17 0a90 	vmov	r0, s15
 8002a80:	f7fd fd7a 	bl	8000578 <__aeabi_f2d>
 8002a84:	a31a      	add	r3, pc, #104	; (adr r3, 8002af0 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fdcd 	bl	8000628 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f7fd fc11 	bl	80002bc <__adddf3>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	f7fe f8b9 	bl	8000c18 <__aeabi_d2f>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aaa:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002aac:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ab0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac2:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002ad0:	edd7 0a02 	vldr	s1, [r7, #8]
 8002ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f001 fdb1 	bl	8004640 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <_ZN9LineTrace8pidTraceEv+0x114>)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	6013      	str	r3, [r2, #0]

}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdb0      	pop	{r4, r5, r7, pc}
 8002aec:	f3af 8000 	nop.w
 8002af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002af4:	3f50624d 	.word	0x3f50624d
 8002af8:	20000270 	.word	0x20000270
 8002afc:	2000026c 	.word	0x2000026c

08002b00 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fcc3 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 f876 	bl	8003c08 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fe0d 	bl	8003758 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b78:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b80:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bac:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]

	if(sensor_edge_val_l < 500 && sensor_edge_val_r < 500){
 8002bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002c08 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d50f      	bpl.n	8002be6 <_ZN9LineTrace11isCrossLineEv+0x96>
 8002bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002c08 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	d506      	bpl.n	8002be6 <_ZN9LineTrace11isCrossLineEv+0x96>
		cnt++;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e002      	b.n	8002bec <_ZN9LineTrace11isCrossLineEv+0x9c>
	}
	else{
		cnt = 0;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 5){
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d901      	bls.n	8002bf8 <_ZN9LineTrace11isCrossLineEv+0xa8>
		flag = true;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	43fa0000 	.word	0x43fa0000
 8002c0c:	20000274 	.word	0x20000274

08002c10 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(radius < 130) velocity = 0.5;
 8002c1c:	edd7 7a00 	vldr	s15, [r7]
 8002c20:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002c6c <_ZN9LineTrace15radius2VelocityEf+0x5c>
 8002c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	d503      	bpl.n	8002c36 <_ZN9LineTrace15radius2VelocityEf+0x26>
 8002c2e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e00f      	b.n	8002c56 <_ZN9LineTrace15radius2VelocityEf+0x46>
	else if(radius < 250) velocity = 0.5;
 8002c36:	edd7 7a00 	vldr	s15, [r7]
 8002c3a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c70 <_ZN9LineTrace15radius2VelocityEf+0x60>
 8002c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d503      	bpl.n	8002c50 <_ZN9LineTrace15radius2VelocityEf+0x40>
 8002c48:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e002      	b.n	8002c56 <_ZN9LineTrace15radius2VelocityEf+0x46>
	else velocity = 1.0;
 8002c50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c54:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	ee07 3a90 	vmov	s15, r3
}
 8002c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	43020000 	.word	0x43020000
 8002c70:	437a0000 	.word	0x437a0000

08002c74 <_ZN9LineTrace20createVelocityTabeleEv>:
void LineTrace::createVelocityTabele()
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08b      	sub	sp, #44	; 0x2c
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69d8      	ldr	r0, [r3, #28]
 8002c80:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <_ZN9LineTrace20createVelocityTabeleEv+0xdc>)
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <_ZN9LineTrace20createVelocityTabeleEv+0xe0>)
 8002c84:	4934      	ldr	r1, [pc, #208]	; (8002d58 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002c86:	f000 fcbc 	bl	8003602 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fc4f 	bl	8003532 <_ZN6Logger23getDistanceArrayPointerEv>
 8002c94:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fc57 	bl	800354e <_ZN6Logger20getThetaArrayPointerEv>
 8002ca0:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	837b      	strh	r3, [r7, #26]
 8002ca6:	8b7b      	ldrh	r3, [r7, #26]
 8002ca8:	f241 726f 	movw	r2, #5999	; 0x176f
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d83f      	bhi.n	8002d30 <_ZN9LineTrace20createVelocityTabeleEv+0xbc>
		temp_distance = p_distance[i];
 8002cb0:	8b7b      	ldrh	r3, [r7, #26]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002cc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d101      	bne.n	8002cda <_ZN9LineTrace20createVelocityTabeleEv+0x66>
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <_ZN9LineTrace20createVelocityTabeleEv+0xe8>)
 8002cd8:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002cda:	ed97 7a02 	vldr	s14, [r7, #8]
 8002cde:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ce2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ce6:	eeb0 0a66 	vmov.f32	s0, s13
 8002cea:	f7ff fd5b 	bl	80027a4 <_ZSt3absf>
 8002cee:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002cf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002d60 <_ZN9LineTrace20createVelocityTabeleEv+0xec>
 8002cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	db01      	blt.n	8002d08 <_ZN9LineTrace20createVelocityTabeleEv+0x94>
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <_ZN9LineTrace20createVelocityTabeleEv+0xf0>)
 8002d06:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002d08:	8b7c      	ldrh	r4, [r7, #26]
 8002d0a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ff7e 	bl	8002c10 <_ZN9LineTrace15radius2VelocityEf>
 8002d14:	eef0 7a40 	vmov.f32	s15, s0
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	f104 031e 	add.w	r3, r4, #30
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002d28:	8b7b      	ldrh	r3, [r7, #26]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	837b      	strh	r3, [r7, #26]
 8002d2e:	e7ba      	b.n	8002ca6 <_ZN9LineTrace20createVelocityTabeleEv+0x32>
		//velocity_table_[i] = radius;
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d40:	4909      	ldr	r1, [pc, #36]	; (8002d68 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002d44:	f7fe fc50 	bl	80015e8 <sd_write_array_float>

}
 8002d48:	bf00      	nop
 8002d4a:	3724      	adds	r7, #36	; 0x24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	08018534 	.word	0x08018534
 8002d54:	08018540 	.word	0x08018540
 8002d58:	08018550 	.word	0x08018550
 8002d5c:	3727c5ac 	.word	0x3727c5ac
 8002d60:	459c4000 	.word	0x459c4000
 8002d64:	459c4000 	.word	0x459c4000
 8002d68:	0801855c 	.word	0x0801855c

08002d6c <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d7a:	333c      	adds	r3, #60	; 0x3c
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00f      	beq.n	8002da2 <_ZN9LineTrace20updateTargetVelocityEv+0x36>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fb47 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002d8c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d90:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	db01      	blt.n	8002da2 <_ZN9LineTrace20updateTargetVelocityEv+0x36>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <_ZN9LineTrace20updateTargetVelocityEv+0x38>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d026      	beq.n	8002df6 <_ZN9LineTrace20updateTargetVelocityEv+0x8a>
		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002dae:	333e      	adds	r3, #62	; 0x3e
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	331e      	adds	r3, #30
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3304      	adds	r3, #4
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8a4 	bl	8002f12 <_ZN9LineTrace17setTargetVelocityEf>
		encoder_->clearTotalCnt();
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fb62 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 ff15 	bl	8003c08 <_ZN8Odometry13clearPotitionEv>
		velocity_table_idx_++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002de4:	333e      	adds	r3, #62	; 0x3e
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002df2:	333e      	adds	r3, #62	; 0x3e
 8002df4:	801a      	strh	r2, [r3, #0]
	}

}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4912      	ldr	r1, [pc, #72]	; (8002e58 <_ZN9LineTrace4initEv+0x58>)
 8002e10:	4812      	ldr	r0, [pc, #72]	; (8002e5c <_ZN9LineTrace4initEv+0x5c>)
 8002e12:	f7fe fc4f 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4910      	ldr	r1, [pc, #64]	; (8002e60 <_ZN9LineTrace4initEv+0x60>)
 8002e1e:	480f      	ldr	r0, [pc, #60]	; (8002e5c <_ZN9LineTrace4initEv+0x5c>)
 8002e20:	f7fe fc48 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	2201      	movs	r2, #1
 8002e2a:	490e      	ldr	r1, [pc, #56]	; (8002e64 <_ZN9LineTrace4initEv+0x64>)
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <_ZN9LineTrace4initEv+0x5c>)
 8002e2e:	f7fe fc41 	bl	80016b4 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e36:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e3e:	eeb0 1a66 	vmov.f32	s2, s13
 8002e42:	eef0 0a47 	vmov.f32	s1, s14
 8002e46:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f80c 	bl	8002e68 <_ZN9LineTrace7setGainEfff>

}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	0801856c 	.word	0x0801856c
 8002e5c:	08018574 	.word	0x08018574
 8002e60:	0801857c 	.word	0x0801857c
 8002e64:	08018584 	.word	0x08018584

08002e68 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e74:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e78:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
	return kp_;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	ee07 3a90 	vmov	s15, r3
}
 8002eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	return ki_;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	ee07 3a90 	vmov	s15, r3
}
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	return kd_;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	ee07 3a90 	vmov	s15, r3
}
 8002ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d056      	beq.n	8002ff0 <_ZN9LineTrace4flipEv+0xc0>
		// ---- line following processing -----//
		pidTrace();
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fd50 	bl	80029e8 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff0f 	bl	8002d6c <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fdfe 	bl	8002b50 <_ZN9LineTrace11isCrossLineEv>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d011      	beq.n	8002f7e <_ZN9LineTrace4flipEv+0x4e>
			led_.LR(1, -1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f87d 	bl	8002064 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 f8fe 	bl	8004170 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fab2 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 f90e 	bl	80041a4 <_ZN10SideSensor13getIgnoreFlagEv>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00f      	beq.n	8002fae <_ZN9LineTrace4flipEv+0x7e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fa96 	bl	80014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002f98:	eeb0 7a40 	vmov.f32	s14, s0
 8002f9c:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002ff8 <_ZN9LineTrace4flipEv+0xc8>
 8002fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	db01      	blt.n	8002fae <_ZN9LineTrace4flipEv+0x7e>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <_ZN9LineTrace4flipEv+0x80>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00c      	beq.n	8002fce <_ZN9LineTrace4flipEv+0x9e>
			side_sensor_->disableIgnore();
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 f8e6 	bl	800418a <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f84b 	bl	8002064 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fb9e 	bl	8002714 <_ZN10LineSensor13emergencyStopEv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <_ZN9LineTrace4flipEv+0xc0>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002ffc <_ZN9LineTrace4flipEv+0xcc>
 8002fe6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002ffc <_ZN9LineTrace4flipEv+0xcc>
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fb28 	bl	8004640 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	43480000 	.word	0x43480000
 8002ffc:	00000000 	.word	0x00000000

08003000 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f001 fb68 	bl	80046f2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	4618      	mov	r0, r3
 8003028:	f001 f892 	bl	8004150 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fb65 	bl	8004718 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	330c      	adds	r3, #12
 8003052:	2201      	movs	r2, #1
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f803 	bl	8002064 <_ZN3LED2LREaa>
	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69d8      	ldr	r0, [r3, #28]
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <_ZN9LineTrace4stopEv+0x5c>)
 8003064:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <_ZN9LineTrace4stopEv+0x60>)
 8003066:	490c      	ldr	r1, [pc, #48]	; (8003098 <_ZN9LineTrace4stopEv+0x64>)
 8003068:	f000 faa8 	bl	80035bc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	led_.LR(-1, 0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	330c      	adds	r3, #12
 8003070:	2200      	movs	r2, #0
 8003072:	f04f 31ff 	mov.w	r1, #4294967295
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe fff4 	bl	8002064 <_ZN3LED2LREaa>
	logger_->resetLogs();
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fadc 	bl	800363e <_ZN6Logger9resetLogsEv>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	08018534 	.word	0x08018534
 8003094:	08018540 	.word	0x08018540
 8003098:	08018550 	.word	0x08018550

0800309c <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80030a8:	2300      	movs	r3, #0
 80030aa:	737b      	strb	r3, [r7, #13]
	start();
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ffa7 	bl	8003000 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80030b2:	7b7b      	ldrb	r3, [r7, #13]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d15f      	bne.n	8003178 <_ZN9LineTrace7runningEv+0xdc>
		switch(stage){
 80030b8:	89fb      	ldrh	r3, [r7, #14]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <_ZN9LineTrace7runningEv+0x28>
 80030be:	2b0a      	cmp	r3, #10
 80030c0:	d034      	beq.n	800312c <_ZN9LineTrace7runningEv+0x90>
 80030c2:	e058      	b.n	8003176 <_ZN9LineTrace7runningEv+0xda>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 f835 	bl	8004138 <_ZN10SideSensor16getWhiteLineCntREv>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d048      	beq.n	8003170 <_ZN9LineTrace7runningEv+0xd4>
				if(mode_selector_ == 1){
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80030e4:	3340      	adds	r3, #64	; 0x40
 80030e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d103      	bne.n	80030f6 <_ZN9LineTrace7runningEv+0x5a>
					loggerStart();
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fd06 	bl	8002b00 <_ZN9LineTrace11loggerStartEv>
 80030f4:	e00a      	b.n	800310c <_ZN9LineTrace7runningEv+0x70>
				}
				else if(mode_selector_ == 2){
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80030fc:	3340      	adds	r3, #64	; 0x40
 80030fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d102      	bne.n	800310c <_ZN9LineTrace7runningEv+0x70>
					startVelocityPlay();
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f892 	bl	8003230 <_ZN9LineTrace17startVelocityPlayEv>

				}
				encoder_->clearCrossLineIgnoreDistance();
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe f9e6 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	330c      	adds	r3, #12
 800311a:	f04f 32ff 	mov.w	r2, #4294967295
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe ff9f 	bl	8002064 <_ZN3LED2LREaa>
				stage = 10;
 8003126:	230a      	movs	r3, #10
 8003128:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800312a:	e021      	b.n	8003170 <_ZN9LineTrace7runningEv+0xd4>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4618      	mov	r0, r3
 8003132:	f001 f801 	bl	8004138 <_ZN10SideSensor16getWhiteLineCntREv>
 8003136:	4603      	mov	r3, r0
 8003138:	2b02      	cmp	r3, #2
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <_ZN9LineTrace7runningEv+0xd8>
				loggerStop();
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fcf0 	bl	8002b2c <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f887 	bl	8003260 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003152:	2064      	movs	r0, #100	; 0x64
 8003154:	f004 fcd6 	bl	8007b04 <HAL_Delay>

				setTargetVelocity(0);
 8003158:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003188 <_ZN9LineTrace7runningEv+0xec>
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fed8 	bl	8002f12 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003166:	f004 fccd 	bl	8007b04 <HAL_Delay>

				goal_flag = true;
 800316a:	2301      	movs	r3, #1
 800316c:	737b      	strb	r3, [r7, #13]

			}

			break;
 800316e:	e001      	b.n	8003174 <_ZN9LineTrace7runningEv+0xd8>
			break;
 8003170:	bf00      	nop
 8003172:	e79e      	b.n	80030b2 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003174:	bf00      	nop
	while(goal_flag == false){
 8003176:	e79c      	b.n	80030b2 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff5b 	bl	8003034 <_ZN9LineTrace4stopEv>
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	00000000 	.word	0x00000000

0800318c <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	ed2d 8b02 	vpush	{d8}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00f      	beq.n	80031c2 <_ZN9LineTrace9storeLogsEv+0x36>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f937 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 80031ac:	eeb0 7a40 	vmov.f32	s14, s0
 80031b0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80031b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031bc:	db01      	blt.n	80031c2 <_ZN9LineTrace9storeLogsEv+0x36>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <_ZN9LineTrace9storeLogsEv+0x38>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d02b      	beq.n	8003220 <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69dc      	ldr	r4, [r3, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe f922 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 80031d6:	eeb0 8a40 	vmov.f32	s16, s0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fd01 	bl	8003be6 <_ZN8Odometry8getThetaEv>
 80031e4:	ec53 2b10 	vmov	r2, r3, d0
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fd14 	bl	8000c18 <__aeabi_d2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	ee00 3a90 	vmov	s1, r3
 80031f6:	eeb0 0a48 	vmov.f32	s0, s16
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f951 	bl	80034a2 <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe f947 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fcfa 	bl	8003c08 <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <_ZN9LineTrace9storeLogsEv+0xa0>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <_ZN9LineTrace9storeLogsEv+0xa0>)
 800321e:	801a      	strh	r2, [r3, #0]
	}
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	ecbd 8b02 	vpop	{d8}
 800322a:	bd90      	pop	{r4, r7, pc}
 800322c:	20000264 	.word	0x20000264

08003230 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe f92b 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcde 	bl	8003c08 <_ZN8Odometry13clearPotitionEv>
	velocity_play_flag_ = true;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003252:	333c      	adds	r3, #60	; 0x3c
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800326e:	333c      	adds	r3, #60	; 0x3c
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800327a:	333e      	adds	r3, #62	; 0x3e
 800327c:	2200      	movs	r2, #0
 800327e:	801a      	strh	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800329e:	3340      	adds	r3, #64	; 0x40
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	801a      	strh	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032cc:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80032d0:	2200      	movs	r2, #0
 80032d2:	801a      	strh	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032da:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80032de:	2200      	movs	r2, #0
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032e8:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80032ec:	2200      	movs	r2, #0
 80032ee:	801a      	strh	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800330c:	f7fe fa5e 	bl	80017cc <sd_mount>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d019      	beq.n	8003354 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8003320:	481b      	ldr	r0, [pc, #108]	; (8003390 <_ZN6Logger10sdCardInitEv+0x90>)
 8003322:	f011 f857 	bl	80143d4 <puts>

	  lcd_clear();
 8003326:	f7fd febb 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800332a:	2100      	movs	r1, #0
 800332c:	2000      	movs	r0, #0
 800332e:	f7fd fec7 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003332:	4818      	ldr	r0, [pc, #96]	; (8003394 <_ZN6Logger10sdCardInitEv+0x94>)
 8003334:	f7fd feee 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003338:	2101      	movs	r1, #1
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd fec0 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003340:	4815      	ldr	r0, [pc, #84]	; (8003398 <_ZN6Logger10sdCardInitEv+0x98>)
 8003342:	f7fd fee7 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800334a:	f004 fbdb 	bl	8007b04 <HAL_Delay>

	  ret = true;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	e018      	b.n	8003386 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8003354:	4811      	ldr	r0, [pc, #68]	; (800339c <_ZN6Logger10sdCardInitEv+0x9c>)
 8003356:	f011 f83d 	bl	80143d4 <puts>

	  lcd_clear();
 800335a:	f7fd fea1 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800335e:	2100      	movs	r1, #0
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fead 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003366:	480b      	ldr	r0, [pc, #44]	; (8003394 <_ZN6Logger10sdCardInitEv+0x94>)
 8003368:	f7fd fed4 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800336c:	2101      	movs	r1, #1
 800336e:	2000      	movs	r0, #0
 8003370:	f7fd fea6 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003374:	480a      	ldr	r0, [pc, #40]	; (80033a0 <_ZN6Logger10sdCardInitEv+0xa0>)
 8003376:	f7fd fecd 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800337a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800337e:	f004 fbc1 	bl	8007b04 <HAL_Delay>

	  ret = false;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	0801858c 	.word	0x0801858c
 8003394:	0801859c 	.word	0x0801859c
 8003398:	080185a8 	.word	0x080185a8
 800339c:	080185b0 	.word	0x080185b0
 80033a0:	080185c0 	.word	0x080185c0

080033a4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d029      	beq.n	8003414 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033c6:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033dc:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033ec:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033f0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033f8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8003402:	4293      	cmp	r3, r2
 8003404:	d906      	bls.n	8003414 <_ZN6Logger8storeLogEf+0x70>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800340c:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003410:	2200      	movs	r2, #0
 8003412:	801a      	strh	r2, [r3, #0]
	}
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003432:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02c      	beq.n	8003496 <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003442:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800344e:	3308      	adds	r3, #8
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800345e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800346e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003472:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800347a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	f241 3287 	movw	r2, #4999	; 0x1387
 8003484:	4293      	cmp	r3, r2
 8003486:	d906      	bls.n	8003496 <_ZN6Logger9storeLog2Ef+0x76>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800348e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003492:	2200      	movs	r2, #0
 8003494:	801a      	strh	r2, [r3, #0]
	}
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b085      	sub	sp, #20
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	ed87 0a02 	vstr	s0, [r7, #8]
 80034ae:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034b8:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80034c4:	3310      	adds	r3, #16
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034d4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034ee:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034fe:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003502:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800350a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f241 726f 	movw	r2, #5999	; 0x176f
 8003514:	4293      	cmp	r3, r2
 8003516:	d906      	bls.n	8003526 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800351e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003522:	2200      	movs	r2, #0
 8003524:	801a      	strh	r2, [r3, #0]
	//}
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_ZN6Logger23getDistanceArrayPointerEv>:

const float *Logger::getDistanceArrayPointer()
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003540:	3340      	adds	r3, #64	; 0x40
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f7fe f830 	bl	80015e8 <sd_write_array_float>
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80035a2:	3320      	adds	r3, #32
 80035a4:	2200      	movs	r2, #0
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68b8      	ldr	r0, [r7, #8]
 80035b0:	f7fe f81a 	bl	80015e8 <sd_write_array_float>
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80035d0:	3340      	adds	r3, #64	; 0x40
 80035d2:	2200      	movs	r2, #0
 80035d4:	9200      	str	r2, [sp, #0]
 80035d6:	f241 7270 	movw	r2, #6000	; 0x1770
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68b8      	ldr	r0, [r7, #8]
 80035de:	f7fe f803 	bl	80015e8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 80035e8:	2300      	movs	r3, #0
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	f241 7270 	movw	r2, #6000	; 0x1770
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	68b8      	ldr	r0, [r7, #8]
 80035f6:	f7fd fff7 	bl	80015e8 <sd_write_array_float>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003616:	3340      	adds	r3, #64	; 0x40
 8003618:	f241 7270 	movw	r2, #6000	; 0x1770
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	68b8      	ldr	r0, [r7, #8]
 8003620:	f7fe f848 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 800362a:	f241 7270 	movw	r2, #6000	; 0x1770
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	68b8      	ldr	r0, [r7, #8]
 8003632:	f7fe f83f 	bl	80016b4 <sd_read_array_float>
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 800363e:	b480      	push	{r7}
 8003640:	b093      	sub	sp, #76	; 0x4c
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003650:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003654:	3320      	adds	r3, #32
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
 8003658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	429a      	cmp	r2, r3
 800365e:	d009      	beq.n	8003674 <_ZN6Logger9resetLogsEv+0x36>
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	3304      	adds	r3, #4
 8003670:	647b      	str	r3, [r7, #68]	; 0x44
 8003672:	e7f1      	b.n	8003658 <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800367a:	3320      	adds	r3, #32
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003688:	3320      	adds	r3, #32
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	429a      	cmp	r2, r3
 8003692:	d009      	beq.n	80036a8 <_ZN6Logger9resetLogsEv+0x6a>
 8003694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003696:	623b      	str	r3, [r7, #32]
		log = 0;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 80036a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a2:	3304      	adds	r3, #4
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
 80036a6:	e7f1      	b.n	800368c <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80036ae:	3340      	adds	r3, #64	; 0x40
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80036bc:	3340      	adds	r3, #64	; 0x40
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d009      	beq.n	80036dc <_ZN6Logger9resetLogsEv+0x9e>
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	617b      	str	r3, [r7, #20]
		log = 0;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 80036d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d6:	3304      	adds	r3, #4
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036da:	e7f1      	b.n	80036c0 <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80036ee:	3340      	adds	r3, #64	; 0x40
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d009      	beq.n	800370e <_ZN6Logger9resetLogsEv+0xd0>
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	60bb      	str	r3, [r7, #8]
		log = 0;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	3304      	adds	r3, #4
 800370a:	63bb      	str	r3, [r7, #56]	; 0x38
 800370c:	e7f1      	b.n	80036f2 <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003714:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003718:	2200      	movs	r2, #0
 800371a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003722:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003726:	2200      	movs	r2, #0
 8003728:	801a      	strh	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	374c      	adds	r7, #76	; 0x4c
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_ZN6Logger5startEv>:

void Logger::start()
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003744:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003766:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	805a      	strh	r2, [r3, #2]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <_ZN5Motor4initEv>:

void Motor::init()
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80037a4:	2108      	movs	r1, #8
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <_ZN5Motor4initEv+0x20>)
 80037a8:	f009 fb74 	bl	800ce94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80037ac:	210c      	movs	r1, #12
 80037ae:	4803      	ldr	r0, [pc, #12]	; (80037bc <_ZN5Motor4initEv+0x20>)
 80037b0:	f009 fb70 	bl	800ce94 <HAL_TIM_PWM_Start>

}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20035a34 	.word	0x20035a34

080037c0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da0d      	bge.n	80037ee <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80037d2:	2200      	movs	r2, #0
 80037d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037d8:	481f      	ldr	r0, [pc, #124]	; (8003858 <_ZN5Motor9motorCtrlEv+0x98>)
 80037da:	f005 fc29 	bl	8009030 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	425b      	negs	r3, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	81fb      	strh	r3, [r7, #14]
 80037ec:	e00a      	b.n	8003804 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80037ee:	2201      	movs	r2, #1
 80037f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037f4:	4818      	ldr	r0, [pc, #96]	; (8003858 <_ZN5Motor9motorCtrlEv+0x98>)
 80037f6:	f005 fc1b 	bl	8009030 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003800:	b29b      	uxth	r3, r3
 8003802:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800380a:	2b00      	cmp	r3, #0
 800380c:	da0d      	bge.n	800382a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800380e:	2201      	movs	r2, #1
 8003810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003814:	4810      	ldr	r0, [pc, #64]	; (8003858 <_ZN5Motor9motorCtrlEv+0x98>)
 8003816:	f005 fc0b 	bl	8009030 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003820:	b29b      	uxth	r3, r3
 8003822:	425b      	negs	r3, r3
 8003824:	b29b      	uxth	r3, r3
 8003826:	81bb      	strh	r3, [r7, #12]
 8003828:	e00a      	b.n	8003840 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800382a:	2200      	movs	r2, #0
 800382c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003830:	4809      	ldr	r0, [pc, #36]	; (8003858 <_ZN5Motor9motorCtrlEv+0x98>)
 8003832:	f005 fbfd 	bl	8009030 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800383c:	b29b      	uxth	r3, r3
 800383e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8003840:	89fa      	ldrh	r2, [r7, #14]
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <_ZN5Motor9motorCtrlEv+0x9c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8003848:	89ba      	ldrh	r2, [r7, #12]
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <_ZN5Motor9motorCtrlEv+0x9c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40020c00 	.word	0x40020c00
 800385c:	20035a34 	.word	0x20035a34

08003860 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6178      	str	r0, [r7, #20]
 8003868:	ed87 0b02 	vstr	d0, [r7, #8]
 800386c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <_ZN5Motor8setRatioEdd+0xd8>)
 8003876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800387a:	f7fd f965 	bl	8000b48 <__aeabi_dcmpgt>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <_ZN5Motor8setRatioEdd+0x30>
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	4c2b      	ldr	r4, [pc, #172]	; (8003938 <_ZN5Motor8setRatioEdd+0xd8>)
 800388a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800388e:	e00e      	b.n	80038ae <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <_ZN5Motor8setRatioEdd+0xdc>)
 8003896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800389a:	f7fd f937 	bl	8000b0c <__aeabi_dcmplt>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <_ZN5Motor8setRatioEdd+0x4e>
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	4c24      	ldr	r4, [pc, #144]	; (800393c <_ZN5Motor8setRatioEdd+0xdc>)
 80038aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <_ZN5Motor8setRatioEdd+0xd8>)
 80038b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038b8:	f7fd f946 	bl	8000b48 <__aeabi_dcmpgt>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <_ZN5Motor8setRatioEdd+0x6e>
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	4c1c      	ldr	r4, [pc, #112]	; (8003938 <_ZN5Motor8setRatioEdd+0xd8>)
 80038c8:	e9c7 3400 	strd	r3, r4, [r7]
 80038cc:	e00e      	b.n	80038ec <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <_ZN5Motor8setRatioEdd+0xdc>)
 80038d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038d8:	f7fd f918 	bl	8000b0c <__aeabi_dcmplt>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <_ZN5Motor8setRatioEdd+0x8c>
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	4c15      	ldr	r4, [pc, #84]	; (800393c <_ZN5Motor8setRatioEdd+0xdc>)
 80038e8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <_ZN5Motor8setRatioEdd+0xe0>)
 80038f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f6:	f7fc fe97 	bl	8000628 <__aeabi_dmul>
 80038fa:	4603      	mov	r3, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	4618      	mov	r0, r3
 8003900:	4621      	mov	r1, r4
 8003902:	f7fd f941 	bl	8000b88 <__aeabi_d2iz>
 8003906:	4603      	mov	r3, r0
 8003908:	b21a      	sxth	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <_ZN5Motor8setRatioEdd+0xe0>)
 8003914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003918:	f7fc fe86 	bl	8000628 <__aeabi_dmul>
 800391c:	4603      	mov	r3, r0
 800391e:	460c      	mov	r4, r1
 8003920:	4618      	mov	r0, r3
 8003922:	4621      	mov	r1, r4
 8003924:	f7fd f930 	bl	8000b88 <__aeabi_d2iz>
 8003928:	4603      	mov	r3, r0
 800392a:	b21a      	sxth	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	805a      	strh	r2, [r3, #2]

}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	3ff00000 	.word	0x3ff00000
 800393c:	bff00000 	.word	0xbff00000
 8003940:	409c2000 	.word	0x409c2000

08003944 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8003944:	b490      	push	{r4, r7}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	f04f 0400 	mov.w	r4, #0
 800395c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	f04f 0400 	mov.w	r4, #0
 8003978:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f04f 0400 	mov.w	r4, #0
 8003994:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	609a      	str	r2, [r3, #8]
}
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc90      	pop	{r4, r7}
 80039b4:	4770      	bx	lr
	...

080039b8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe f8ce 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 80039cc:	ee10 3a10 	vmov	r3, s0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fdd1 	bl	8000578 <__aeabi_f2d>
 80039d6:	4603      	mov	r3, r0
 80039d8:	460c      	mov	r4, r1
 80039da:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fd0a 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 80039e8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80039ec:	a376      	add	r3, pc, #472	; (adr r3, 8003bc8 <_ZN8Odometry12calcPotitionEv+0x210>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039f6:	f7fc fe17 	bl	8000628 <__aeabi_dmul>
 80039fa:	4603      	mov	r3, r0
 80039fc:	460c      	mov	r4, r1
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7fc fdb4 	bl	8000578 <__aeabi_f2d>
 8003a10:	4682      	mov	sl, r0
 8003a12:	468b      	mov	fp, r1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a28:	f7fc ff28 	bl	800087c <__aeabi_ddiv>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4640      	mov	r0, r8
 8003a32:	4649      	mov	r1, r9
 8003a34:	f7fc fc42 	bl	80002bc <__adddf3>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	ec43 2b17 	vmov	d7, r2, r3
 8003a40:	eeb0 0a47 	vmov.f32	s0, s14
 8003a44:	eef0 0a67 	vmov.f32	s1, s15
 8003a48:	f00e fd6a 	bl	8012520 <cos>
 8003a4c:	ec53 2b10 	vmov	r2, r3, d0
 8003a50:	4650      	mov	r0, sl
 8003a52:	4659      	mov	r1, fp
 8003a54:	f7fc fde8 	bl	8000628 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	4629      	mov	r1, r5
 8003a60:	f7fc fc2c 	bl	80002bc <__adddf3>
 8003a64:	4603      	mov	r3, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7fc fd7f 	bl	8000578 <__aeabi_f2d>
 8003a7a:	4682      	mov	sl, r0
 8003a7c:	468b      	mov	fp, r1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a92:	f7fc fef3 	bl	800087c <__aeabi_ddiv>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fc0d 	bl	80002bc <__adddf3>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	ec43 2b17 	vmov	d7, r2, r3
 8003aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8003aae:	eef0 0a67 	vmov.f32	s1, s15
 8003ab2:	f00e fd79 	bl	80125a8 <sin>
 8003ab6:	ec53 2b10 	vmov	r2, r3, d0
 8003aba:	4650      	mov	r0, sl
 8003abc:	4659      	mov	r1, fp
 8003abe:	f7fc fdb3 	bl	8000628 <__aeabi_dmul>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7fc fbf7 	bl	80002bc <__adddf3>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	f7fc fbe8 	bl	80002bc <__adddf3>
 8003aec:	4603      	mov	r3, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	ed93 7b08 	vldr	d7, [r3, #32]
 8003b02:	eeb0 0a47 	vmov.f32	s0, s14
 8003b06:	eef0 0a67 	vmov.f32	s1, s15
 8003b0a:	f00e fd09 	bl	8012520 <cos>
 8003b0e:	ec51 0b10 	vmov	r0, r1, d0
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003b18:	f7fc fd86 	bl	8000628 <__aeabi_dmul>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4620      	mov	r0, r4
 8003b22:	4629      	mov	r1, r5
 8003b24:	f7fc fbca 	bl	80002bc <__adddf3>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	ed93 7b08 	vldr	d7, [r3, #32]
 8003b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b42:	eef0 0a67 	vmov.f32	s1, s15
 8003b46:	f00e fd2f 	bl	80125a8 <sin>
 8003b4a:	ec51 0b10 	vmov	r0, r1, d0
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003b54:	f7fc fd68 	bl	8000628 <__aeabi_dmul>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc fbac 	bl	80002bc <__adddf3>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003b74:	4618      	mov	r0, r3
 8003b76:	4621      	mov	r1, r4
 8003b78:	f7fd f84e 	bl	8000c18 <__aeabi_d2f>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <_ZN8Odometry12calcPotitionEv+0x204>)
 8003b80:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003b88:	4618      	mov	r0, r3
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	f7fd f844 	bl	8000c18 <__aeabi_d2f>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <_ZN8Odometry12calcPotitionEv+0x208>)
 8003b94:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f7fd f83a 	bl	8000c18 <__aeabi_d2f>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	405b8000 	.word	0x405b8000
 8003bbc:	20000278 	.word	0x20000278
 8003bc0:	2000027c 	.word	0x2000027c
 8003bc4:	20000280 	.word	0x20000280
 8003bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003bcc:	3f50624d 	.word	0x3f50624d

08003bd0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff feed 	bl	80039b8 <_ZN8Odometry12calcPotitionEv>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8003be6:	b490      	push	{r4, r7}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
	return theta_;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003bf4:	ec44 3b17 	vmov	d7, r3, r4
}
 8003bf8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bfc:	eef0 0a67 	vmov.f32	s1, s15
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc90      	pop	{r4, r7}
 8003c06:	4770      	bx	lr

08003c08 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003c08:	b490      	push	{r4, r7}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	f04f 0400 	mov.w	r4, #0
 8003c1a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f04f 0400 	mov.w	r4, #0
 8003c28:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	f04f 0400 	mov.w	r4, #0
 8003c36:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc90      	pop	{r4, r7}
 8003c42:	4770      	bx	lr

08003c44 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003c44:	b490      	push	{r4, r7}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f04f 0400 	mov.w	r4, #0
 8003c6a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c82:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003c86:	2200      	movs	r2, #0
 8003c88:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003c8a:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <_ZN13PathFollowingC1Ev+0xec>)
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <_ZN13PathFollowingC1Ev+0xec>)
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	f04f 0400 	mov.w	r4, #0
 8003ca2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <_ZN13PathFollowingC1Ev+0xec>)
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <_ZN13PathFollowingC1Ev+0xf0>)
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f04f 0400 	mov.w	r4, #0
 8003cbe:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <_ZN13PathFollowingC1Ev+0xf0>)
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	f04f 0400 	mov.w	r4, #0
 8003ccc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <_ZN13PathFollowingC1Ev+0xf0>)
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	f04f 0400 	mov.w	r4, #0
 8003cda:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <_ZN13PathFollowingC1Ev+0xf0>)
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <_ZN13PathFollowingC1Ev+0xf0>)
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <_ZN13PathFollowingC1Ev+0xf0>)
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <_ZN13PathFollowingC1Ev+0xf4>)
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	f04f 0400 	mov.w	r4, #0
 8003d12:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003d16:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <_ZN13PathFollowingC1Ev+0xf4>)
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	f04f 0400 	mov.w	r4, #0
 8003d20:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc90      	pop	{r4, r7}
 8003d2e:	4770      	bx	lr
 8003d30:	20035f38 	.word	0x20035f38
 8003d34:	20035ec8 	.word	0x20035ec8
 8003d38:	20035f28 	.word	0x20035f28

08003d3c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003d44:	f001 fce0 	bl	8005708 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003d48:	f107 0318 	add.w	r3, r7, #24
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4915      	ldr	r1, [pc, #84]	; (8003da4 <_ZN13PathFollowing4initEv+0x68>)
 8003d50:	4815      	ldr	r0, [pc, #84]	; (8003da8 <_ZN13PathFollowing4initEv+0x6c>)
 8003d52:	f7fd fcf5 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003d56:	f107 0310 	add.w	r3, r7, #16
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4913      	ldr	r1, [pc, #76]	; (8003dac <_ZN13PathFollowing4initEv+0x70>)
 8003d5e:	4812      	ldr	r0, [pc, #72]	; (8003da8 <_ZN13PathFollowing4initEv+0x6c>)
 8003d60:	f7fd fcee 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4911      	ldr	r1, [pc, #68]	; (8003db0 <_ZN13PathFollowing4initEv+0x74>)
 8003d6c:	480e      	ldr	r0, [pc, #56]	; (8003da8 <_ZN13PathFollowing4initEv+0x6c>)
 8003d6e:	f7fd fce7 	bl	8001740 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003d72:	ed97 7b06 	vldr	d7, [r7, #24]
 8003d76:	ed97 6b04 	vldr	d6, [r7, #16]
 8003d7a:	ed97 5b02 	vldr	d5, [r7, #8]
 8003d7e:	eeb0 2a45 	vmov.f32	s4, s10
 8003d82:	eef0 2a65 	vmov.f32	s5, s11
 8003d86:	eeb0 1a46 	vmov.f32	s2, s12
 8003d8a:	eef0 1a66 	vmov.f32	s3, s13
 8003d8e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d92:	eef0 0a67 	vmov.f32	s1, s15
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f80c 	bl	8003db4 <_ZN13PathFollowing7setGainEddd>
}
 8003d9c:	bf00      	nop
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	080185c8 	.word	0x080185c8
 8003da8:	080185d0 	.word	0x080185d0
 8003dac:	080185d8 	.word	0x080185d8
 8003db0:	080185e0 	.word	0x080185e0

08003db4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003db4:	b490      	push	{r4, r7}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	61f8      	str	r0, [r7, #28]
 8003dbc:	ed87 0b04 	vstr	d0, [r7, #16]
 8003dc0:	ed87 1b02 	vstr	d1, [r7, #8]
 8003dc4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003dca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003dce:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003dd2:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003dd4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003dd8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003dde:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003de2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003de6:	bf00      	nop
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc90      	pop	{r4, r7}
 8003dee:	4770      	bx	lr
 8003df0:	20035f38 	.word	0x20035f38

08003df4 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003df4:	b490      	push	{r4, r7}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e02:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e06:	eeb0 0a47 	vmov.f32	s0, s14
 8003e0a:	eef0 0a67 	vmov.f32	s1, s15
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc90      	pop	{r4, r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20035f38 	.word	0x20035f38

08003e1c <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003e1c:	b490      	push	{r4, r7}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003e26:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003e2a:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e32:	eef0 0a67 	vmov.f32	s1, s15
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc90      	pop	{r4, r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20035f38 	.word	0x20035f38

08003e44 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003e44:	b490      	push	{r4, r7}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003e4e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003e52:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e56:	eeb0 0a47 	vmov.f32	s0, s14
 8003e5a:	eef0 0a67 	vmov.f32	s1, s15
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc90      	pop	{r4, r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20035f38 	.word	0x20035f38

08003e6c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003e74:	2088      	movs	r0, #136	; 0x88
 8003e76:	f7fd ffba 	bl	8001dee <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003e7a:	2080      	movs	r0, #128	; 0x80
 8003e7c:	f7fd ffb7 	bl	8001dee <INA260_init>
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003e90:	2188      	movs	r1, #136	; 0x88
 8003e92:	2002      	movs	r0, #2
 8003e94:	f7fd ff48 	bl	8001d28 <INA260_read>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fb5a 	bl	8000554 <__aeabi_i2d>
 8003ea0:	a30c      	add	r3, pc, #48	; (adr r3, 8003ed4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f7fc fbbf 	bl	8000628 <__aeabi_dmul>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	f7fc feb1 	bl	8000c18 <__aeabi_d2f>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a03      	ldr	r2, [pc, #12]	; (8003ed0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	20000284 	.word	0x20000284
 8003ed4:	47ae147b 	.word	0x47ae147b
 8003ed8:	3f547ae1 	.word	0x3f547ae1

08003edc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	ee07 3a90 	vmov	s15, r3

}
 8003eec:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	0000      	movs	r0, r0
 8003efc:	0000      	movs	r0, r0
	...

08003f00 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fc fb31 	bl	8000578 <__aeabi_f2d>
 8003f16:	a311      	add	r3, pc, #68	; (adr r3, 8003f5c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc fdf6 	bl	8000b0c <__aeabi_dcmplt>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	e002      	b.n	8003f3a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000288 	.word	0x20000288
 8003f5c:	9999999a 	.word	0x9999999a
 8003f60:	401d9999 	.word	0x401d9999

08003f64 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003f70:	2102      	movs	r1, #2
 8003f72:	4822      	ldr	r0, [pc, #136]	; (8003ffc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f74:	f005 f844 	bl	8009000 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003f90:	2108      	movs	r1, #8
 8003f92:	481a      	ldr	r0, [pc, #104]	; (8003ffc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f94:	f005 f834 	bl	8009000 <HAL_GPIO_ReadPin>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf0c      	ite	eq
 8003f9e:	2301      	moveq	r3, #1
 8003fa0:	2300      	movne	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003fa8:	89fb      	ldrh	r3, [r7, #14]
 8003faa:	f043 0302 	orr.w	r3, r3, #2
 8003fae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	4812      	ldr	r0, [pc, #72]	; (8003ffc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003fb4:	f005 f824 	bl	8009000 <HAL_GPIO_ReadPin>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003fc8:	89fb      	ldrh	r3, [r7, #14]
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	480a      	ldr	r0, [pc, #40]	; (8003ffc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003fd4:	f005 f814 	bl	8009000 <HAL_GPIO_ReadPin>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003fe8:	89fb      	ldrh	r3, [r7, #14]
 8003fea:	f043 0308 	orr.w	r3, r3, #8
 8003fee:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003ff0:	89fb      	ldrh	r3, [r7, #14]

}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40020c00 	.word	0x40020c00

08004000 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	805a      	strh	r2, [r3, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	809a      	strh	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	719a      	strb	r2, [r3, #6]
{

}
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if(ignore_flag_ == false){
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	799b      	ldrb	r3, [r3, #6]
 8004040:	f083 0301 	eor.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d065      	beq.n	8004116 <_ZN10SideSensor12updateStatusEt+0xe6>

		if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d111      	bne.n	8004074 <_ZN10SideSensor12updateStatusEt+0x44>
 8004050:	4b34      	ldr	r3, [pc, #208]	; (8004124 <_ZN10SideSensor12updateStatusEt+0xf4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f083 0301 	eor.w	r3, r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <_ZN10SideSensor12updateStatusEt+0x44>
			status_ |= 0x01;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	801a      	strh	r2, [r3, #0]
			white_flag1 = true;
 800406c:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <_ZN10SideSensor12updateStatusEt+0xf4>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e01a      	b.n	80040aa <_ZN10SideSensor12updateStatusEt+0x7a>
		}
		else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	2b04      	cmp	r3, #4
 8004078:	d117      	bne.n	80040aa <_ZN10SideSensor12updateStatusEt+0x7a>
 800407a:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <_ZN10SideSensor12updateStatusEt+0xf4>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d013      	beq.n	80040aa <_ZN10SideSensor12updateStatusEt+0x7a>
			status_ ^= 0x01;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f083 0301 	eor.w	r3, r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	801a      	strh	r2, [r3, #0]
			white_flag1 = false;
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <_ZN10SideSensor12updateStatusEt+0xf4>)
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]

			white_line_cnt_r_++;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	889b      	ldrh	r3, [r3, #4]
 800409a:	3301      	adds	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	809a      	strh	r2, [r3, #4]
			mon_cnt_r = white_line_cnt_r_;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	889a      	ldrh	r2, [r3, #4]
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <_ZN10SideSensor12updateStatusEt+0xf8>)
 80040a8:	801a      	strh	r2, [r3, #0]

		}

		if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d111      	bne.n	80040d6 <_ZN10SideSensor12updateStatusEt+0xa6>
 80040b2:	4b1e      	ldr	r3, [pc, #120]	; (800412c <_ZN10SideSensor12updateStatusEt+0xfc>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f083 0301 	eor.w	r3, r3, #1
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <_ZN10SideSensor12updateStatusEt+0xa6>
			status_ |= 0x02;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	801a      	strh	r2, [r3, #0]
			white_flag2 = true;
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <_ZN10SideSensor12updateStatusEt+0xfc>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e01b      	b.n	800410e <_ZN10SideSensor12updateStatusEt+0xde>
		}
		else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d117      	bne.n	800410e <_ZN10SideSensor12updateStatusEt+0xde>
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <_ZN10SideSensor12updateStatusEt+0xfc>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d013      	beq.n	800410e <_ZN10SideSensor12updateStatusEt+0xde>
			status_ ^= 0x02;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	f083 0302 	eor.w	r3, r3, #2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	801a      	strh	r2, [r3, #0]
			white_flag2 = false;
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <_ZN10SideSensor12updateStatusEt+0xfc>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]

			white_line_cnt_l_++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	885b      	ldrh	r3, [r3, #2]
 80040fe:	3301      	adds	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	805a      	strh	r2, [r3, #2]
			mon_cnt_l = white_line_cnt_l_;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	885a      	ldrh	r2, [r3, #2]
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <_ZN10SideSensor12updateStatusEt+0x100>)
 800410c:	801a      	strh	r2, [r3, #0]
		}

		mon_status = status_;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <_ZN10SideSensor12updateStatusEt+0x104>)
 8004114:	801a      	strh	r2, [r3, #0]
	}

}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000290 	.word	0x20000290
 8004128:	2000028e 	.word	0x2000028e
 800412c:	20000291 	.word	0x20000291
 8004130:	2000028c 	.word	0x2000028c
 8004134:	2000028a 	.word	0x2000028a

08004138 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	889b      	ldrh	r3, [r3, #4]
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	809a      	strh	r2, [r3, #4]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	719a      	strb	r2, [r3, #6]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	719a      	strb	r2, [r3, #6]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	799b      	ldrb	r3, [r3, #6]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a10      	ldr	r2, [pc, #64]	; (800420c <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80041cc:	3308      	adds	r3, #8
 80041ce:	4611      	mov	r1, r2
 80041d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f00f fa23 	bl	8013620 <memcpy>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	08018604 	.word	0x08018604

08004210 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	ed97 0a00 	vldr	s0, [r7]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f8b8 	bl	80033a4 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800423e:	eeb0 0a67 	vmov.f32	s0, s15
 8004242:	4610      	mov	r0, r2
 8004244:	f7ff f8ec 	bl	8003420 <_ZN6Logger9storeLog2Ef>
	}

}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a07      	ldr	r2, [pc, #28]	; (800427c <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff f981 	bl	8003568 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a06      	ldr	r2, [pc, #24]	; (8004284 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 800426c:	4904      	ldr	r1, [pc, #16]	; (8004280 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f98e 	bl	8003590 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	080187f8 	.word	0x080187f8
 8004280:	08018804 	.word	0x08018804
 8004284:	08018810 	.word	0x08018810

08004288 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004296:	2b00      	cmp	r3, #0
 8004298:	d046      	beq.n	8004328 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3204      	adds	r2, #4
 80042ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042c8:	3301      	adds	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80042da:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042e2:	2bf9      	cmp	r3, #249	; 0xf9
 80042e4:	d903      	bls.n	80042ee <_ZN20SystemIdentification10updateMsigEv+0x66>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	22fa      	movs	r2, #250	; 0xfa
 80042ea:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685c      	ldr	r4, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc f93d 	bl	8000578 <__aeabi_f2d>
 80042fe:	4605      	mov	r5, r0
 8004300:	460e      	mov	r6, r1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004308:	eef1 7a67 	vneg.f32	s15, s15
 800430c:	ee17 3a90 	vmov	r3, s15
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc f931 	bl	8000578 <__aeabi_f2d>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	ec43 2b11 	vmov	d1, r2, r3
 800431e:	ec46 5b10 	vmov	d0, r5, r6
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fa9c 	bl	8003860 <_ZN5Motor8setRatioEdd>

	}

}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004330:	20000294 	.word	0x20000294

08004334 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff f9e8 	bl	8003736 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff f9e7 	bl	8003758 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80043b8 <_ZN20SystemIdentification4stopEv+0x40>
 80043a2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80043b8 <_ZN20SystemIdentification4stopEv+0x40>
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fa5a 	bl	8003860 <_ZN5Motor8setRatioEdd>
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	f3af 8000 	nop.w
	...

080043c0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	619a      	str	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	621a      	str	r2, [r3, #32]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	f107 020c 	add.w	r2, r7, #12
 8004468:	f107 0110 	add.w	r1, r7, #16
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc ffb1 	bl	80013d4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004472:	ed97 7a04 	vldr	s14, [r7, #16]
 8004476:	edd7 7a03 	vldr	s15, [r7, #12]
 800447a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800447e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004486:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800448a:	6978      	ldr	r0, [r7, #20]
 800448c:	f7fc f874 	bl	8000578 <__aeabi_f2d>
 8004490:	a30b      	add	r3, pc, #44	; (adr r3, 80044c0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fc f8c7 	bl	8000628 <__aeabi_dmul>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	4618      	mov	r0, r3
 80044a0:	4621      	mov	r1, r4
 80044a2:	f7fc fbb9 	bl	8000c18 <__aeabi_d2f>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	ee07 3a90 	vmov	s15, r3
}
 80044b4:	eeb0 0a67 	vmov.f32	s0, s15
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	1ab1d998 	.word	0x1ab1d998
 80044c4:	3f7830b5 	.word	0x3f7830b5

080044c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80044c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	ed93 7a00 	vldr	s14, [r3]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80044dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80044ee:	4b48      	ldr	r3, [pc, #288]	; (8004610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	edd3 7a04 	vldr	s15, [r3, #16]
 8004504:	ed97 7a05 	vldr	s14, [r7, #20]
 8004508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004510:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc f82f 	bl	8000578 <__aeabi_f2d>
 800451a:	4604      	mov	r4, r0
 800451c:	460d      	mov	r5, r1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	ed93 7a06 	vldr	s14, [r3, #24]
 8004524:	edd7 7a05 	vldr	s15, [r7, #20]
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	ee17 0a90 	vmov	r0, s15
 8004530:	f7fc f822 	bl	8000578 <__aeabi_f2d>
 8004534:	a334      	add	r3, pc, #208	; (adr r3, 8004608 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f7fc f875 	bl	8000628 <__aeabi_dmul>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4620      	mov	r0, r4
 8004544:	4629      	mov	r1, r5
 8004546:	f7fb feb9 	bl	80002bc <__adddf3>
 800454a:	4603      	mov	r3, r0
 800454c:	460c      	mov	r4, r1
 800454e:	4618      	mov	r0, r3
 8004550:	4621      	mov	r1, r4
 8004552:	f7fc fb61 	bl	8000c18 <__aeabi_d2f>
 8004556:	4602      	mov	r2, r0
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800455a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004562:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	edd7 6a05 	vldr	s13, [r7, #20]
 800456c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004574:	ee17 0a90 	vmov	r0, s15
 8004578:	f7fb fffe 	bl	8000578 <__aeabi_f2d>
 800457c:	a322      	add	r3, pc, #136	; (adr r3, 8004608 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fc f97b 	bl	800087c <__aeabi_ddiv>
 8004586:	4603      	mov	r3, r0
 8004588:	460c      	mov	r4, r1
 800458a:	4618      	mov	r0, r3
 800458c:	4621      	mov	r1, r4
 800458e:	f7fc fb43 	bl	8000c18 <__aeabi_d2f>
 8004592:	4603      	mov	r3, r0
 8004594:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8004596:	ed97 7a04 	vldr	s14, [r7, #16]
 800459a:	edd7 7a03 	vldr	s15, [r7, #12]
 800459e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80045a4:	edd3 7a00 	vldr	s15, [r3]
 80045a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ac:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80045ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80045be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c2:	ee17 0a90 	vmov	r0, s15
 80045c6:	f7fb ffd7 	bl	8000578 <__aeabi_f2d>
 80045ca:	4605      	mov	r5, r0
 80045cc:	460e      	mov	r6, r1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80045d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80045d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045dc:	ee17 0a90 	vmov	r0, s15
 80045e0:	f7fb ffca 	bl	8000578 <__aeabi_f2d>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	ec43 2b11 	vmov	d1, r2, r3
 80045ec:	ec46 5b10 	vmov	d0, r5, r6
 80045f0:	4620      	mov	r0, r4
 80045f2:	f7ff f935 	bl	8003860 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80045f6:	4a07      	ldr	r2, [pc, #28]	; (8004614 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004604:	f3af 8000 	nop.w
 8004608:	d2f1a9fc 	.word	0xd2f1a9fc
 800460c:	3f50624d 	.word	0x3f50624d
 8004610:	2000029c 	.word	0x2000029c
 8004614:	20000298 	.word	0x20000298

08004618 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	ed87 0a02 	vstr	s0, [r7, #8]
 8004624:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	605a      	str	r2, [r3, #4]
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	ed87 0a02 	vstr	s0, [r7, #8]
 800464c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	ed87 0a02 	vstr	s0, [r7, #8]
 8004674:	edc7 0a01 	vstr	s1, [r7, #4]
 8004678:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	615a      	str	r2, [r3, #20]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80046a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80046aa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff febf 	bl	8004458 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff feef 	bl	80044c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004748 <_ZN12VelocityCtrl4stopEv+0x30>
 8004730:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004748 <_ZN12VelocityCtrl4stopEv+0x30>
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f893 	bl	8003860 <_ZN5Motor8setRatioEdd>

}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	f3af 8000 	nop.w
	...

08004750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800475c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800476c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004778:	e000      	b.n	800477c <ITM_SendChar+0x2c>
    {
      __NOP();
 800477a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800477c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f9      	beq.n	800477a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004786:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004790:	687b      	ldr	r3, [r7, #4]
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e009      	b.n	80047c4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	60ba      	str	r2, [r7, #8]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ffc9 	bl	8004750 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3301      	adds	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	dbf1      	blt.n	80047b0 <_write+0x12>
  }
  return len;
 80047cc:	687b      	ldr	r3, [r7, #4]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 ff14 	bl	8006610 <cppExit>
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8004802:	f001 fe95 	bl	8006530 <cppFlip1ms>

		tim6_timer++;
 8004806:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	4a1b      	ldr	r2, [pc, #108]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800480e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d902      	bls.n	8004820 <HAL_TIM_PeriodElapsedCallback+0x30>
 800481a:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a17      	ldr	r2, [pc, #92]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 800482a:	f001 fec9 	bl	80065c0 <cppFlip100ns>

		tim7_timer++;
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a14      	ldr	r2, [pc, #80]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004836:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a10      	ldr	r2, [pc, #64]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d902      	bls.n	8004848 <HAL_TIM_PeriodElapsedCallback+0x58>
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0f      	ldr	r2, [pc, #60]	; (800488c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10e      	bne.n	8004870 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8004852:	f001 febf 	bl	80065d4 <cppFlip10ms>

		tim13_timer++;
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800485e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a06      	ldr	r2, [pc, #24]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d902      	bls.n	8004870 <HAL_TIM_PeriodElapsedCallback+0x80>
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
	}

}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40001000 	.word	0x40001000
 800487c:	20035ba4 	.word	0x20035ba4
 8004880:	0001869f 	.word	0x0001869f
 8004884:	40001400 	.word	0x40001400
 8004888:	20035be8 	.word	0x20035be8
 800488c:	40001c00 	.word	0x40001c00
 8004890:	20035bec 	.word	0x20035bec

08004894 <init>:

void init()
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004898:	2201      	movs	r2, #1
 800489a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800489e:	4808      	ldr	r0, [pc, #32]	; (80048c0 <init+0x2c>)
 80048a0:	f004 fbc6 	bl	8009030 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80048a4:	4807      	ldr	r0, [pc, #28]	; (80048c4 <init+0x30>)
 80048a6:	f008 faa6 	bl	800cdf6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80048aa:	4807      	ldr	r0, [pc, #28]	; (80048c8 <init+0x34>)
 80048ac:	f008 faa3 	bl	800cdf6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80048b0:	4806      	ldr	r0, [pc, #24]	; (80048cc <init+0x38>)
 80048b2:	f008 faa0 	bl	800cdf6 <HAL_TIM_Base_Start_IT>

	cppInit();
 80048b6:	f001 fd91 	bl	80063dc <cppInit>

	//path_following_initialize();

}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	20035cd0 	.word	0x20035cd0
 80048c8:	20035e74 	.word	0x20035e74
 80048cc:	20035bf0 	.word	0x20035bf0

080048d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048d4:	f003 f8a4 	bl	8007a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048d8:	f000 f82a 	bl	8004930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048dc:	f000 fdbc 	bl	8005458 <MX_GPIO_Init>
  MX_DMA_Init();
 80048e0:	f000 fd8a 	bl	80053f8 <MX_DMA_Init>
  MX_I2C2_Init();
 80048e4:	f000 f9e8 	bl	8004cb8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80048e8:	f000 fa14 	bl	8004d14 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80048ec:	f000 fa32 	bl	8004d54 <MX_SPI2_Init>
  MX_TIM1_Init();
 80048f0:	f000 fa66 	bl	8004dc0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80048f4:	f000 fb70 	bl	8004fd8 <MX_TIM4_Init>
  MX_TIM8_Init();
 80048f8:	f000 fc3c 	bl	8005174 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80048fc:	f000 fd52 	bl	80053a4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004900:	f00a fa4c 	bl	800ed9c <MX_FATFS_Init>
  MX_TIM6_Init();
 8004904:	f000 fbcc 	bl	80050a0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004908:	f000 f9a8 	bl	8004c5c <MX_I2C1_Init>
  MX_TIM3_Init();
 800490c:	f000 fb00 	bl	8004f10 <MX_TIM3_Init>
  MX_TIM10_Init();
 8004910:	f000 fc88 	bl	8005224 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004914:	f000 fcd4 	bl	80052c0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004918:	f000 f898 	bl	8004a4c <MX_ADC2_Init>
  MX_TIM7_Init();
 800491c:	f000 fbf6 	bl	800510c <MX_TIM7_Init>
  MX_TIM13_Init();
 8004920:	f000 fd1c 	bl	800535c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8004924:	f7ff ffb6 	bl	8004894 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004928:	f001 fe82 	bl	8006630 <cppLoop>
 800492c:	e7fc      	b.n	8004928 <main+0x58>
	...

08004930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b0a4      	sub	sp, #144	; 0x90
 8004934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004936:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800493a:	2234      	movs	r2, #52	; 0x34
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f00e fe79 	bl	8013636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	223c      	movs	r2, #60	; 0x3c
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f00e fe6a 	bl	8013636 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <SystemClock_Config+0x114>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a36      	ldr	r2, [pc, #216]	; (8004a44 <SystemClock_Config+0x114>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <SystemClock_Config+0x114>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <SystemClock_Config+0x118>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a30      	ldr	r2, [pc, #192]	; (8004a48 <SystemClock_Config+0x118>)
 8004988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <SystemClock_Config+0x118>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800499a:	2301      	movs	r3, #1
 800499c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800499e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049a4:	2302      	movs	r3, #2
 80049a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049ac:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80049ae:	2308      	movs	r3, #8
 80049b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80049b2:	23b4      	movs	r3, #180	; 0xb4
 80049b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049b8:	2302      	movs	r3, #2
 80049ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80049be:	2308      	movs	r3, #8
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80049c4:	2302      	movs	r3, #2
 80049c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049ce:	4618      	mov	r0, r3
 80049d0:	f005 ff68 	bl	800a8a4 <HAL_RCC_OscConfig>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80049da:	f000 fe91 	bl	8005700 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80049de:	f005 fae3 	bl	8009fa8 <HAL_PWREx_EnableOverDrive>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80049e8:	f000 fe8a 	bl	8005700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049ec:	230f      	movs	r3, #15
 80049ee:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049f0:	2302      	movs	r3, #2
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80049fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a02:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a08:	2105      	movs	r1, #5
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f005 fb1c 	bl	800a048 <HAL_RCC_ClockConfig>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004a16:	f000 fe73 	bl	8005700 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004a1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004a1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004a20:	2300      	movs	r3, #0
 8004a22:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004a24:	2300      	movs	r3, #0
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a28:	f107 030c 	add.w	r3, r7, #12
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fcfb 	bl	800a428 <HAL_RCCEx_PeriphCLKConfig>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004a38:	f000 fe62 	bl	8005700 <Error_Handler>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3790      	adds	r7, #144	; 0x90
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40007000 	.word	0x40007000

08004a4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a52:	463b      	mov	r3, r7
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a60:	4a7c      	ldr	r2, [pc, #496]	; (8004c54 <MX_ADC2_Init+0x208>)
 8004a62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a64:	4b7a      	ldr	r3, [pc, #488]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004a6c:	4b78      	ldr	r3, [pc, #480]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004a72:	4b77      	ldr	r3, [pc, #476]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004a78:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004a7e:	4b74      	ldr	r3, [pc, #464]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a86:	4b72      	ldr	r3, [pc, #456]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a8c:	4b70      	ldr	r3, [pc, #448]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a8e:	4a72      	ldr	r2, [pc, #456]	; (8004c58 <MX_ADC2_Init+0x20c>)
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a92:	4b6f      	ldr	r3, [pc, #444]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004a98:	4b6d      	ldr	r3, [pc, #436]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004a9a:	220e      	movs	r2, #14
 8004a9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004a9e:	4b6c      	ldr	r3, [pc, #432]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004aac:	4868      	ldr	r0, [pc, #416]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004aae:	f003 f84b 	bl	8007b48 <HAL_ADC_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004ab8:	f000 fe22 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004abc:	230a      	movs	r3, #10
 8004abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004ac4:	2306      	movs	r3, #6
 8004ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ac8:	463b      	mov	r3, r7
 8004aca:	4619      	mov	r1, r3
 8004acc:	4860      	ldr	r0, [pc, #384]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004ace:	f003 f98f 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004ad8:	f000 fe12 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004adc:	230b      	movs	r3, #11
 8004ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4859      	ldr	r0, [pc, #356]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004aea:	f003 f981 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004af4:	f000 fe04 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004af8:	230c      	movs	r3, #12
 8004afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004afc:	2303      	movs	r3, #3
 8004afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b00:	463b      	mov	r3, r7
 8004b02:	4619      	mov	r1, r3
 8004b04:	4852      	ldr	r0, [pc, #328]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004b06:	f003 f973 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004b10:	f000 fdf6 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004b14:	230d      	movs	r3, #13
 8004b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004b18:	2304      	movs	r3, #4
 8004b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	4619      	mov	r1, r3
 8004b20:	484b      	ldr	r0, [pc, #300]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004b22:	f003 f965 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004b2c:	f000 fde8 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004b34:	2305      	movs	r3, #5
 8004b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b38:	463b      	mov	r3, r7
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4844      	ldr	r0, [pc, #272]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004b3e:	f003 f957 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004b48:	f000 fdda 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004b50:	2306      	movs	r3, #6
 8004b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b54:	463b      	mov	r3, r7
 8004b56:	4619      	mov	r1, r3
 8004b58:	483d      	ldr	r0, [pc, #244]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004b5a:	f003 f949 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004b64:	f000 fdcc 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b70:	463b      	mov	r3, r7
 8004b72:	4619      	mov	r1, r3
 8004b74:	4836      	ldr	r0, [pc, #216]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004b76:	f003 f93b 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004b80:	f000 fdbe 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004b84:	2303      	movs	r3, #3
 8004b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004b88:	2308      	movs	r3, #8
 8004b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	4619      	mov	r1, r3
 8004b90:	482f      	ldr	r0, [pc, #188]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004b92:	f003 f92d 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004b9c:	f000 fdb0 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004ba4:	2309      	movs	r3, #9
 8004ba6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ba8:	463b      	mov	r3, r7
 8004baa:	4619      	mov	r1, r3
 8004bac:	4828      	ldr	r0, [pc, #160]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004bae:	f003 f91f 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004bb8:	f000 fda2 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004bbc:	2305      	movs	r3, #5
 8004bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004bc0:	230a      	movs	r3, #10
 8004bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4821      	ldr	r0, [pc, #132]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004bca:	f003 f911 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004bd4:	f000 fd94 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004bd8:	2306      	movs	r3, #6
 8004bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004bdc:	230b      	movs	r3, #11
 8004bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004be0:	463b      	mov	r3, r7
 8004be2:	4619      	mov	r1, r3
 8004be4:	481a      	ldr	r0, [pc, #104]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004be6:	f003 f903 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004bf0:	f000 fd86 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004bf4:	2307      	movs	r3, #7
 8004bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4813      	ldr	r0, [pc, #76]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004c02:	f003 f8f5 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004c0c:	f000 fd78 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004c10:	2308      	movs	r3, #8
 8004c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004c14:	230d      	movs	r3, #13
 8004c16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c18:	463b      	mov	r3, r7
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004c1e:	f003 f8e7 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004c28:	f000 fd6a 	bl	8005700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004c2c:	2309      	movs	r3, #9
 8004c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004c30:	230e      	movs	r3, #14
 8004c32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c34:	463b      	mov	r3, r7
 8004c36:	4619      	mov	r1, r3
 8004c38:	4805      	ldr	r0, [pc, #20]	; (8004c50 <MX_ADC2_Init+0x204>)
 8004c3a:	f003 f8d9 	bl	8007df0 <HAL_ADC_ConfigChannel>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004c44:	f000 fd5c 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20035a74 	.word	0x20035a74
 8004c54:	40012100 	.word	0x40012100
 8004c58:	0f000001 	.word	0x0f000001

08004c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c60:	4b12      	ldr	r3, [pc, #72]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c62:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <MX_I2C1_Init+0x54>)
 8004c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c68:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <MX_I2C1_Init+0x58>)
 8004c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c98:	4804      	ldr	r0, [pc, #16]	; (8004cac <MX_I2C1_Init+0x50>)
 8004c9a:	f004 f9fb 	bl	8009094 <HAL_I2C_Init>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ca4:	f000 fd2c 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004ca8:	bf00      	nop
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20035abc 	.word	0x20035abc
 8004cb0:	40005400 	.word	0x40005400
 8004cb4:	000186a0 	.word	0x000186a0

08004cb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cbe:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <MX_I2C2_Init+0x54>)
 8004cc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cc4:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <MX_I2C2_Init+0x58>)
 8004cc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ce8:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004cf4:	4804      	ldr	r0, [pc, #16]	; (8004d08 <MX_I2C2_Init+0x50>)
 8004cf6:	f004 f9cd 	bl	8009094 <HAL_I2C_Init>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004d00:	f000 fcfe 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20035b50 	.word	0x20035b50
 8004d0c:	40005800 	.word	0x40005800
 8004d10:	000186a0 	.word	0x000186a0

08004d14 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <MX_SDIO_SD_Init+0x3c>)
 8004d1c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <MX_SDIO_SD_Init+0x38>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20035d50 	.word	0x20035d50
 8004d50:	40012c00 	.word	0x40012c00

08004d54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d5a:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <MX_SPI2_Init+0x68>)
 8004d5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d74:	2202      	movs	r2, #2
 8004d76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d88:	2228      	movs	r2, #40	; 0x28
 8004d8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004da0:	220a      	movs	r2, #10
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004da4:	4804      	ldr	r0, [pc, #16]	; (8004db8 <MX_SPI2_Init+0x64>)
 8004da6:	f007 faa7 	bl	800c2f8 <HAL_SPI_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004db0:	f000 fca6 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	2003599c 	.word	0x2003599c
 8004dbc:	40003800 	.word	0x40003800

08004dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b09a      	sub	sp, #104	; 0x68
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f00e fc31 	bl	8013636 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dde:	f107 0320 	add.w	r3, r7, #32
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	611a      	str	r2, [r3, #16]
 8004dee:	615a      	str	r2, [r3, #20]
 8004df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004df2:	463b      	mov	r3, r7
 8004df4:	2220      	movs	r2, #32
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f00e fc1c 	bl	8013636 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004dfe:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e00:	4a42      	ldr	r2, [pc, #264]	; (8004f0c <MX_TIM1_Init+0x14c>)
 8004e02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004e10:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e18:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e1e:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e24:	4b38      	ldr	r3, [pc, #224]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e2a:	4837      	ldr	r0, [pc, #220]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e2c:	f008 f807 	bl	800ce3e <HAL_TIM_PWM_Init>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004e36:	f000 fc63 	bl	8005700 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e42:	2301      	movs	r3, #1
 8004e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e46:	2300      	movs	r3, #0
 8004e48:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e52:	2301      	movs	r3, #1
 8004e54:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e56:	2300      	movs	r3, #0
 8004e58:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004e5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e62:	4619      	mov	r1, r3
 8004e64:	4828      	ldr	r0, [pc, #160]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e66:	f008 f853 	bl	800cf10 <HAL_TIM_Encoder_Init>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004e70:	f000 fc46 	bl	8005700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e74:	2300      	movs	r3, #0
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e80:	4619      	mov	r1, r3
 8004e82:	4821      	ldr	r0, [pc, #132]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004e84:	f008 fd7a 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004e8e:	f000 fc37 	bl	8005700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e92:	2360      	movs	r3, #96	; 0x60
 8004e94:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004eae:	f107 0320 	add.w	r3, r7, #32
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4814      	ldr	r0, [pc, #80]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004eb8:	f008 f9fc 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004ec2:	f000 fc1d 	bl	8005700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4807      	ldr	r0, [pc, #28]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004eea:	f008 fdc3 	bl	800da74 <HAL_TIMEx_ConfigBreakDeadTime>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004ef4:	f000 fc04 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ef8:	4803      	ldr	r0, [pc, #12]	; (8004f08 <MX_TIM1_Init+0x148>)
 8004efa:	f000 fff1 	bl	8005ee0 <HAL_TIM_MspPostInit>

}
 8004efe:	bf00      	nop
 8004f00:	3768      	adds	r7, #104	; 0x68
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20035d10 	.word	0x20035d10
 8004f0c:	40010000 	.word	0x40010000

08004f10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f16:	f107 0320 	add.w	r3, r7, #32
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	611a      	str	r2, [r3, #16]
 8004f2e:	615a      	str	r2, [r3, #20]
 8004f30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f32:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <MX_TIM3_Init+0xc4>)
 8004f36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f44:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f4c:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f58:	481d      	ldr	r0, [pc, #116]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f5a:	f007 ff70 	bl	800ce3e <HAL_TIM_PWM_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004f64:	f000 fbcc 	bl	8005700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f70:	f107 0320 	add.w	r3, r7, #32
 8004f74:	4619      	mov	r1, r3
 8004f76:	4816      	ldr	r0, [pc, #88]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f78:	f008 fd00 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004f82:	f000 fbbd 	bl	8005700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f86:	2360      	movs	r3, #96	; 0x60
 8004f88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	480c      	ldr	r0, [pc, #48]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004f9e:	f008 f989 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004fa8:	f000 fbaa 	bl	8005700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	2204      	movs	r2, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4807      	ldr	r0, [pc, #28]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004fb4:	f008 f97e 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004fbe:	f000 fb9f 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004fc2:	4803      	ldr	r0, [pc, #12]	; (8004fd0 <MX_TIM3_Init+0xc0>)
 8004fc4:	f000 ff8c 	bl	8005ee0 <HAL_TIM_MspPostInit>

}
 8004fc8:	bf00      	nop
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20035ba8 	.word	0x20035ba8
 8004fd4:	40000400 	.word	0x40000400

08004fd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fde:	f107 0320 	add.w	r3, r7, #32
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	611a      	str	r2, [r3, #16]
 8004ff6:	615a      	str	r2, [r3, #20]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <MX_TIM4_Init+0xc0>)
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <MX_TIM4_Init+0xc4>)
 8004ffe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005000:	4b25      	ldr	r3, [pc, #148]	; (8005098 <MX_TIM4_Init+0xc0>)
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005006:	4b24      	ldr	r3, [pc, #144]	; (8005098 <MX_TIM4_Init+0xc0>)
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800500c:	4b22      	ldr	r3, [pc, #136]	; (8005098 <MX_TIM4_Init+0xc0>)
 800500e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005012:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005014:	4b20      	ldr	r3, [pc, #128]	; (8005098 <MX_TIM4_Init+0xc0>)
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800501a:	4b1f      	ldr	r3, [pc, #124]	; (8005098 <MX_TIM4_Init+0xc0>)
 800501c:	2200      	movs	r2, #0
 800501e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005020:	481d      	ldr	r0, [pc, #116]	; (8005098 <MX_TIM4_Init+0xc0>)
 8005022:	f007 ff0c 	bl	800ce3e <HAL_TIM_PWM_Init>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800502c:	f000 fb68 	bl	8005700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005030:	2300      	movs	r3, #0
 8005032:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005038:	f107 0320 	add.w	r3, r7, #32
 800503c:	4619      	mov	r1, r3
 800503e:	4816      	ldr	r0, [pc, #88]	; (8005098 <MX_TIM4_Init+0xc0>)
 8005040:	f008 fc9c 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800504a:	f000 fb59 	bl	8005700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800504e:	2360      	movs	r3, #96	; 0x60
 8005050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	2208      	movs	r2, #8
 8005062:	4619      	mov	r1, r3
 8005064:	480c      	ldr	r0, [pc, #48]	; (8005098 <MX_TIM4_Init+0xc0>)
 8005066:	f008 f925 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005070:	f000 fb46 	bl	8005700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	220c      	movs	r2, #12
 8005078:	4619      	mov	r1, r3
 800507a:	4807      	ldr	r0, [pc, #28]	; (8005098 <MX_TIM4_Init+0xc0>)
 800507c:	f008 f91a 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005086:	f000 fb3b 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800508a:	4803      	ldr	r0, [pc, #12]	; (8005098 <MX_TIM4_Init+0xc0>)
 800508c:	f000 ff28 	bl	8005ee0 <HAL_TIM_MspPostInit>

}
 8005090:	bf00      	nop
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20035a34 	.word	0x20035a34
 800509c:	40000800 	.word	0x40000800

080050a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050a6:	463b      	mov	r3, r7
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <MX_TIM6_Init+0x64>)
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <MX_TIM6_Init+0x68>)
 80050b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <MX_TIM6_Init+0x64>)
 80050b6:	2259      	movs	r2, #89	; 0x59
 80050b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <MX_TIM6_Init+0x64>)
 80050bc:	2200      	movs	r2, #0
 80050be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80050c0:	4b10      	ldr	r3, [pc, #64]	; (8005104 <MX_TIM6_Init+0x64>)
 80050c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050c8:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <MX_TIM6_Init+0x64>)
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80050ce:	480d      	ldr	r0, [pc, #52]	; (8005104 <MX_TIM6_Init+0x64>)
 80050d0:	f007 fe66 	bl	800cda0 <HAL_TIM_Base_Init>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80050da:	f000 fb11 	bl	8005700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80050e6:	463b      	mov	r3, r7
 80050e8:	4619      	mov	r1, r3
 80050ea:	4806      	ldr	r0, [pc, #24]	; (8005104 <MX_TIM6_Init+0x64>)
 80050ec:	f008 fc46 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80050f6:	f000 fb03 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20035cd0 	.word	0x20035cd0
 8005108:	40001000 	.word	0x40001000

0800510c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005112:	463b      	mov	r3, r7
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <MX_TIM7_Init+0x60>)
 800511c:	4a14      	ldr	r2, [pc, #80]	; (8005170 <MX_TIM7_Init+0x64>)
 800511e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <MX_TIM7_Init+0x60>)
 8005122:	22b3      	movs	r2, #179	; 0xb3
 8005124:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <MX_TIM7_Init+0x60>)
 8005128:	2200      	movs	r2, #0
 800512a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <MX_TIM7_Init+0x60>)
 800512e:	2231      	movs	r2, #49	; 0x31
 8005130:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005132:	4b0e      	ldr	r3, [pc, #56]	; (800516c <MX_TIM7_Init+0x60>)
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005138:	480c      	ldr	r0, [pc, #48]	; (800516c <MX_TIM7_Init+0x60>)
 800513a:	f007 fe31 	bl	800cda0 <HAL_TIM_Base_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005144:	f000 fadc 	bl	8005700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005148:	2300      	movs	r3, #0
 800514a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800514c:	2300      	movs	r3, #0
 800514e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005150:	463b      	mov	r3, r7
 8005152:	4619      	mov	r1, r3
 8005154:	4805      	ldr	r0, [pc, #20]	; (800516c <MX_TIM7_Init+0x60>)
 8005156:	f008 fc11 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005160:	f000 face 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20035e74 	.word	0x20035e74
 8005170:	40001400 	.word	0x40001400

08005174 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08c      	sub	sp, #48	; 0x30
 8005178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800517a:	f107 030c 	add.w	r3, r7, #12
 800517e:	2224      	movs	r2, #36	; 0x24
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f00e fa57 	bl	8013636 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005190:	4b22      	ldr	r3, [pc, #136]	; (800521c <MX_TIM8_Init+0xa8>)
 8005192:	4a23      	ldr	r2, [pc, #140]	; (8005220 <MX_TIM8_Init+0xac>)
 8005194:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005196:	4b21      	ldr	r3, [pc, #132]	; (800521c <MX_TIM8_Init+0xa8>)
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800519c:	4b1f      	ldr	r3, [pc, #124]	; (800521c <MX_TIM8_Init+0xa8>)
 800519e:	2210      	movs	r2, #16
 80051a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80051a2:	4b1e      	ldr	r3, [pc, #120]	; (800521c <MX_TIM8_Init+0xa8>)
 80051a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051aa:	4b1c      	ldr	r3, [pc, #112]	; (800521c <MX_TIM8_Init+0xa8>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80051b0:	4b1a      	ldr	r3, [pc, #104]	; (800521c <MX_TIM8_Init+0xa8>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051b6:	4b19      	ldr	r3, [pc, #100]	; (800521c <MX_TIM8_Init+0xa8>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80051bc:	2303      	movs	r3, #3
 80051be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80051d0:	2300      	movs	r3, #0
 80051d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051d4:	2301      	movs	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80051d8:	2300      	movs	r3, #0
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	4619      	mov	r1, r3
 80051e6:	480d      	ldr	r0, [pc, #52]	; (800521c <MX_TIM8_Init+0xa8>)
 80051e8:	f007 fe92 	bl	800cf10 <HAL_TIM_Encoder_Init>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80051f2:	f000 fa85 	bl	8005700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4806      	ldr	r0, [pc, #24]	; (800521c <MX_TIM8_Init+0xa8>)
 8005204:	f008 fbba 	bl	800d97c <HAL_TIMEx_MasterConfigSynchronization>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800520e:	f000 fa77 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005212:	bf00      	nop
 8005214:	3730      	adds	r7, #48	; 0x30
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	200359f4 	.word	0x200359f4
 8005220:	40010400 	.word	0x40010400

08005224 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	60da      	str	r2, [r3, #12]
 8005236:	611a      	str	r2, [r3, #16]
 8005238:	615a      	str	r2, [r3, #20]
 800523a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800523c:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <MX_TIM10_Init+0x94>)
 800523e:	4a1f      	ldr	r2, [pc, #124]	; (80052bc <MX_TIM10_Init+0x98>)
 8005240:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <MX_TIM10_Init+0x94>)
 8005244:	2200      	movs	r2, #0
 8005246:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <MX_TIM10_Init+0x94>)
 800524a:	2200      	movs	r2, #0
 800524c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <MX_TIM10_Init+0x94>)
 8005250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005254:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <MX_TIM10_Init+0x94>)
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <MX_TIM10_Init+0x94>)
 800525e:	2200      	movs	r2, #0
 8005260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005262:	4815      	ldr	r0, [pc, #84]	; (80052b8 <MX_TIM10_Init+0x94>)
 8005264:	f007 fd9c 	bl	800cda0 <HAL_TIM_Base_Init>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800526e:	f000 fa47 	bl	8005700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005272:	4811      	ldr	r0, [pc, #68]	; (80052b8 <MX_TIM10_Init+0x94>)
 8005274:	f007 fde3 	bl	800ce3e <HAL_TIM_PWM_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800527e:	f000 fa3f 	bl	8005700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005282:	2360      	movs	r3, #96	; 0x60
 8005284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	2200      	movs	r2, #0
 8005296:	4619      	mov	r1, r3
 8005298:	4807      	ldr	r0, [pc, #28]	; (80052b8 <MX_TIM10_Init+0x94>)
 800529a:	f008 f80b 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80052a4:	f000 fa2c 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80052a8:	4803      	ldr	r0, [pc, #12]	; (80052b8 <MX_TIM10_Init+0x94>)
 80052aa:	f000 fe19 	bl	8005ee0 <HAL_TIM_MspPostInit>

}
 80052ae:	bf00      	nop
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20035b10 	.word	0x20035b10
 80052bc:	40014400 	.word	0x40014400

080052c0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	611a      	str	r2, [r3, #16]
 80052d4:	615a      	str	r2, [r3, #20]
 80052d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <MX_TIM11_Init+0x94>)
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <MX_TIM11_Init+0x98>)
 80052dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <MX_TIM11_Init+0x94>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <MX_TIM11_Init+0x94>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <MX_TIM11_Init+0x94>)
 80052ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <MX_TIM11_Init+0x94>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <MX_TIM11_Init+0x94>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80052fe:	4815      	ldr	r0, [pc, #84]	; (8005354 <MX_TIM11_Init+0x94>)
 8005300:	f007 fd4e 	bl	800cda0 <HAL_TIM_Base_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800530a:	f000 f9f9 	bl	8005700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800530e:	4811      	ldr	r0, [pc, #68]	; (8005354 <MX_TIM11_Init+0x94>)
 8005310:	f007 fd95 	bl	800ce3e <HAL_TIM_PWM_Init>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800531a:	f000 f9f1 	bl	8005700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800531e:	2360      	movs	r3, #96	; 0x60
 8005320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800532e:	1d3b      	adds	r3, r7, #4
 8005330:	2200      	movs	r2, #0
 8005332:	4619      	mov	r1, r3
 8005334:	4807      	ldr	r0, [pc, #28]	; (8005354 <MX_TIM11_Init+0x94>)
 8005336:	f007 ffbd 	bl	800d2b4 <HAL_TIM_PWM_ConfigChannel>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8005340:	f000 f9de 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8005344:	4803      	ldr	r0, [pc, #12]	; (8005354 <MX_TIM11_Init+0x94>)
 8005346:	f000 fdcb 	bl	8005ee0 <HAL_TIM_MspPostInit>

}
 800534a:	bf00      	nop
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20035c30 	.word	0x20035c30
 8005358:	40014800 	.word	0x40014800

0800535c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <MX_TIM13_Init+0x40>)
 8005362:	4a0f      	ldr	r2, [pc, #60]	; (80053a0 <MX_TIM13_Init+0x44>)
 8005364:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8005366:	4b0d      	ldr	r3, [pc, #52]	; (800539c <MX_TIM13_Init+0x40>)
 8005368:	2259      	movs	r2, #89	; 0x59
 800536a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <MX_TIM13_Init+0x40>)
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <MX_TIM13_Init+0x40>)
 8005374:	f242 720f 	movw	r2, #9999	; 0x270f
 8005378:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <MX_TIM13_Init+0x40>)
 800537c:	2200      	movs	r2, #0
 800537e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <MX_TIM13_Init+0x40>)
 8005382:	2280      	movs	r2, #128	; 0x80
 8005384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005386:	4805      	ldr	r0, [pc, #20]	; (800539c <MX_TIM13_Init+0x40>)
 8005388:	f007 fd0a 	bl	800cda0 <HAL_TIM_Base_Init>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005392:	f000 f9b5 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20035bf0 	.word	0x20035bf0
 80053a0:	40001c00 	.word	0x40001c00

080053a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053aa:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <MX_USART2_UART_Init+0x50>)
 80053ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053b6:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053be:	2200      	movs	r2, #0
 80053c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053ca:	220c      	movs	r2, #12
 80053cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ce:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053d4:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053da:	4805      	ldr	r0, [pc, #20]	; (80053f0 <MX_USART2_UART_Init+0x4c>)
 80053dc:	f008 fbb0 	bl	800db40 <HAL_UART_Init>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80053e6:	f000 f98b 	bl	8005700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80053ea:	bf00      	nop
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20035dd4 	.word	0x20035dd4
 80053f4:	40004400 	.word	0x40004400

080053f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <MX_DMA_Init+0x5c>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	4a13      	ldr	r2, [pc, #76]	; (8005454 <MX_DMA_Init+0x5c>)
 8005408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800540c:	6313      	str	r3, [r2, #48]	; 0x30
 800540e:	4b11      	ldr	r3, [pc, #68]	; (8005454 <MX_DMA_Init+0x5c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800541a:	2200      	movs	r2, #0
 800541c:	2100      	movs	r1, #0
 800541e:	203a      	movs	r0, #58	; 0x3a
 8005420:	f003 f871 	bl	8008506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005424:	203a      	movs	r0, #58	; 0x3a
 8005426:	f003 f88a 	bl	800853e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800542a:	2200      	movs	r2, #0
 800542c:	2100      	movs	r1, #0
 800542e:	203b      	movs	r0, #59	; 0x3b
 8005430:	f003 f869 	bl	8008506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005434:	203b      	movs	r0, #59	; 0x3b
 8005436:	f003 f882 	bl	800853e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	2045      	movs	r0, #69	; 0x45
 8005440:	f003 f861 	bl	8008506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005444:	2045      	movs	r0, #69	; 0x45
 8005446:	f003 f87a 	bl	800853e <HAL_NVIC_EnableIRQ>

}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800

08005458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545e:	f107 031c 	add.w	r3, r7, #28
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	60da      	str	r2, [r3, #12]
 800546c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	4b9c      	ldr	r3, [pc, #624]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	4a9b      	ldr	r2, [pc, #620]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005478:	f043 0310 	orr.w	r3, r3, #16
 800547c:	6313      	str	r3, [r2, #48]	; 0x30
 800547e:	4b99      	ldr	r3, [pc, #612]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	4b95      	ldr	r3, [pc, #596]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	4a94      	ldr	r2, [pc, #592]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	6313      	str	r3, [r2, #48]	; 0x30
 800549a:	4b92      	ldr	r3, [pc, #584]	; (80056e4 <MX_GPIO_Init+0x28c>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	4b8e      	ldr	r3, [pc, #568]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4a8d      	ldr	r2, [pc, #564]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
 80054b6:	4b8b      	ldr	r3, [pc, #556]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	4b87      	ldr	r3, [pc, #540]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	4a86      	ldr	r2, [pc, #536]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	6313      	str	r3, [r2, #48]	; 0x30
 80054d2:	4b84      	ldr	r3, [pc, #528]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	4b80      	ldr	r3, [pc, #512]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	4a7f      	ldr	r2, [pc, #508]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	6313      	str	r3, [r2, #48]	; 0x30
 80054ee:	4b7d      	ldr	r3, [pc, #500]	; (80056e4 <MX_GPIO_Init+0x28c>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	4b79      	ldr	r3, [pc, #484]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	4a78      	ldr	r2, [pc, #480]	; (80056e4 <MX_GPIO_Init+0x28c>)
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	6313      	str	r3, [r2, #48]	; 0x30
 800550a:	4b76      	ldr	r3, [pc, #472]	; (80056e4 <MX_GPIO_Init+0x28c>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005516:	2200      	movs	r2, #0
 8005518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800551c:	4872      	ldr	r0, [pc, #456]	; (80056e8 <MX_GPIO_Init+0x290>)
 800551e:	f003 fd87 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005522:	2200      	movs	r2, #0
 8005524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005528:	4870      	ldr	r0, [pc, #448]	; (80056ec <MX_GPIO_Init+0x294>)
 800552a:	f003 fd81 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800552e:	2200      	movs	r2, #0
 8005530:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005534:	486e      	ldr	r0, [pc, #440]	; (80056f0 <MX_GPIO_Init+0x298>)
 8005536:	f003 fd7b 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800553a:	2200      	movs	r2, #0
 800553c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005540:	486c      	ldr	r0, [pc, #432]	; (80056f4 <MX_GPIO_Init+0x29c>)
 8005542:	f003 fd75 	bl	8009030 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005546:	2304      	movs	r3, #4
 8005548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800554a:	4b6b      	ldr	r3, [pc, #428]	; (80056f8 <MX_GPIO_Init+0x2a0>)
 800554c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005552:	f107 031c 	add.w	r3, r7, #28
 8005556:	4619      	mov	r1, r3
 8005558:	4863      	ldr	r0, [pc, #396]	; (80056e8 <MX_GPIO_Init+0x290>)
 800555a:	f003 fba7 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800555e:	230f      	movs	r3, #15
 8005560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005562:	2303      	movs	r3, #3
 8005564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4619      	mov	r1, r3
 8005570:	4862      	ldr	r0, [pc, #392]	; (80056fc <MX_GPIO_Init+0x2a4>)
 8005572:	f003 fb9b 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005576:	23e1      	movs	r3, #225	; 0xe1
 8005578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800557a:	2303      	movs	r3, #3
 800557c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005582:	f107 031c 	add.w	r3, r7, #28
 8005586:	4619      	mov	r1, r3
 8005588:	485a      	ldr	r0, [pc, #360]	; (80056f4 <MX_GPIO_Init+0x29c>)
 800558a:	f003 fb8f 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800558e:	2303      	movs	r3, #3
 8005590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005592:	2303      	movs	r3, #3
 8005594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559a:	f107 031c 	add.w	r3, r7, #28
 800559e:	4619      	mov	r1, r3
 80055a0:	4852      	ldr	r0, [pc, #328]	; (80056ec <MX_GPIO_Init+0x294>)
 80055a2:	f003 fb83 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055a6:	2304      	movs	r3, #4
 80055a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055aa:	2300      	movs	r3, #0
 80055ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055ae:	2301      	movs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b2:	f107 031c 	add.w	r3, r7, #28
 80055b6:	4619      	mov	r1, r3
 80055b8:	484c      	ldr	r0, [pc, #304]	; (80056ec <MX_GPIO_Init+0x294>)
 80055ba:	f003 fb77 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80055be:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80055c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055c4:	2300      	movs	r3, #0
 80055c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055c8:	2301      	movs	r3, #1
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055cc:	f107 031c 	add.w	r3, r7, #28
 80055d0:	4619      	mov	r1, r3
 80055d2:	4845      	ldr	r0, [pc, #276]	; (80056e8 <MX_GPIO_Init+0x290>)
 80055d4:	f003 fb6a 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80055d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055de:	2301      	movs	r3, #1
 80055e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e6:	2300      	movs	r3, #0
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055ea:	f107 031c 	add.w	r3, r7, #28
 80055ee:	4619      	mov	r1, r3
 80055f0:	483d      	ldr	r0, [pc, #244]	; (80056e8 <MX_GPIO_Init+0x290>)
 80055f2:	f003 fb5b 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fc:	2301      	movs	r3, #1
 80055fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005600:	2300      	movs	r3, #0
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005604:	2300      	movs	r3, #0
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005608:	f107 031c 	add.w	r3, r7, #28
 800560c:	4619      	mov	r1, r3
 800560e:	4837      	ldr	r0, [pc, #220]	; (80056ec <MX_GPIO_Init+0x294>)
 8005610:	f003 fb4c 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800561a:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <MX_GPIO_Init+0x2a0>)
 800561c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005622:	f107 031c 	add.w	r3, r7, #28
 8005626:	4619      	mov	r1, r3
 8005628:	4831      	ldr	r0, [pc, #196]	; (80056f0 <MX_GPIO_Init+0x298>)
 800562a:	f003 fb3f 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800562e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005634:	2301      	movs	r3, #1
 8005636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005640:	f107 031c 	add.w	r3, r7, #28
 8005644:	4619      	mov	r1, r3
 8005646:	482a      	ldr	r0, [pc, #168]	; (80056f0 <MX_GPIO_Init+0x298>)
 8005648:	f003 fb30 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800564c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005652:	2301      	movs	r3, #1
 8005654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005656:	2301      	movs	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565a:	2300      	movs	r3, #0
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	4619      	mov	r1, r3
 8005664:	4822      	ldr	r0, [pc, #136]	; (80056f0 <MX_GPIO_Init+0x298>)
 8005666:	f003 fb21 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800566a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800566e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005670:	2301      	movs	r3, #1
 8005672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800567c:	f107 031c 	add.w	r3, r7, #28
 8005680:	4619      	mov	r1, r3
 8005682:	481c      	ldr	r0, [pc, #112]	; (80056f4 <MX_GPIO_Init+0x29c>)
 8005684:	f003 fb12 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800568e:	2300      	movs	r3, #0
 8005690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005696:	f107 031c 	add.w	r3, r7, #28
 800569a:	4619      	mov	r1, r3
 800569c:	4815      	ldr	r0, [pc, #84]	; (80056f4 <MX_GPIO_Init+0x29c>)
 800569e:	f003 fb05 	bl	8008cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80056a2:	239b      	movs	r3, #155	; 0x9b
 80056a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056a6:	2300      	movs	r3, #0
 80056a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056aa:	2301      	movs	r3, #1
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056ae:	f107 031c 	add.w	r3, r7, #28
 80056b2:	4619      	mov	r1, r3
 80056b4:	480e      	ldr	r0, [pc, #56]	; (80056f0 <MX_GPIO_Init+0x298>)
 80056b6:	f003 faf9 	bl	8008cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80056ba:	2200      	movs	r2, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	2008      	movs	r0, #8
 80056c0:	f002 ff21 	bl	8008506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80056c4:	2008      	movs	r0, #8
 80056c6:	f002 ff3a 	bl	800853e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80056ca:	2200      	movs	r2, #0
 80056cc:	2100      	movs	r1, #0
 80056ce:	2017      	movs	r0, #23
 80056d0:	f002 ff19 	bl	8008506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80056d4:	2017      	movs	r0, #23
 80056d6:	f002 ff32 	bl	800853e <HAL_NVIC_EnableIRQ>

}
 80056da:	bf00      	nop
 80056dc:	3730      	adds	r7, #48	; 0x30
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40020400 	.word	0x40020400
 80056f0:	40020c00 	.word	0x40020c00
 80056f4:	40020000 	.word	0x40020000
 80056f8:	10310000 	.word	0x10310000
 80056fc:	40020800 	.word	0x40020800

08005700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005704:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005706:	e7fe      	b.n	8005706 <Error_Handler+0x6>

08005708 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <HAL_MspInit+0x4c>)
 8005724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005726:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <HAL_MspInit+0x4c>)
 8005728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800572c:	6453      	str	r3, [r2, #68]	; 0x44
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <HAL_MspInit+0x4c>)
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <HAL_MspInit+0x4c>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	4a08      	ldr	r2, [pc, #32]	; (8005764 <HAL_MspInit+0x4c>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	6413      	str	r3, [r2, #64]	; 0x40
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_MspInit+0x4c>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40023800 	.word	0x40023800

08005768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	; 0x30
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005770:	f107 031c 	add.w	r3, r7, #28
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a4a      	ldr	r2, [pc, #296]	; (80058b0 <HAL_ADC_MspInit+0x148>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f040 808e 	bne.w	80058a8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	4b48      	ldr	r3, [pc, #288]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	4a47      	ldr	r2, [pc, #284]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 8005796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800579a:	6453      	str	r3, [r2, #68]	; 0x44
 800579c:	4b45      	ldr	r3, [pc, #276]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 800579e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	4a40      	ldr	r2, [pc, #256]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	6313      	str	r3, [r2, #48]	; 0x30
 80057b8:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	4a39      	ldr	r2, [pc, #228]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6313      	str	r3, [r2, #48]	; 0x30
 80057d4:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	4a32      	ldr	r2, [pc, #200]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	6313      	str	r3, [r2, #48]	; 0x30
 80057f0:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_ADC_MspInit+0x14c>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80057fc:	230f      	movs	r3, #15
 80057fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005800:	2303      	movs	r3, #3
 8005802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005808:	f107 031c 	add.w	r3, r7, #28
 800580c:	4619      	mov	r1, r3
 800580e:	482a      	ldr	r0, [pc, #168]	; (80058b8 <HAL_ADC_MspInit+0x150>)
 8005810:	f003 fa4c 	bl	8008cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005814:	23ff      	movs	r3, #255	; 0xff
 8005816:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005818:	2303      	movs	r3, #3
 800581a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581c:	2300      	movs	r3, #0
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005820:	f107 031c 	add.w	r3, r7, #28
 8005824:	4619      	mov	r1, r3
 8005826:	4825      	ldr	r0, [pc, #148]	; (80058bc <HAL_ADC_MspInit+0x154>)
 8005828:	f003 fa40 	bl	8008cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800582c:	2303      	movs	r3, #3
 800582e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005830:	2303      	movs	r3, #3
 8005832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005834:	2300      	movs	r3, #0
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005838:	f107 031c 	add.w	r3, r7, #28
 800583c:	4619      	mov	r1, r3
 800583e:	4820      	ldr	r0, [pc, #128]	; (80058c0 <HAL_ADC_MspInit+0x158>)
 8005840:	f003 fa34 	bl	8008cac <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005844:	4b1f      	ldr	r3, [pc, #124]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005846:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <HAL_ADC_MspInit+0x160>)
 8005848:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800584a:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 800584c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005850:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005854:	2200      	movs	r2, #0
 8005856:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800585e:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005864:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800586c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005874:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005884:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 8005888:	2200      	movs	r2, #0
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800588c:	480d      	ldr	r0, [pc, #52]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 800588e:	f002 fe71 	bl	8008574 <HAL_DMA_Init>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005898:	f7ff ff32 	bl	8005700 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
 80058a2:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <HAL_ADC_MspInit+0x15c>)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80058a8:	bf00      	nop
 80058aa:	3730      	adds	r7, #48	; 0x30
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40012100 	.word	0x40012100
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40020800 	.word	0x40020800
 80058bc:	40020000 	.word	0x40020000
 80058c0:	40020400 	.word	0x40020400
 80058c4:	20035e14 	.word	0x20035e14
 80058c8:	40026440 	.word	0x40026440

080058cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08c      	sub	sp, #48	; 0x30
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d4:	f107 031c 	add.w	r3, r7, #28
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a32      	ldr	r2, [pc, #200]	; (80059b4 <HAL_I2C_MspInit+0xe8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d12c      	bne.n	8005948 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 80058f8:	f043 0302 	orr.w	r3, r3, #2
 80058fc:	6313      	str	r3, [r2, #48]	; 0x30
 80058fe:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800590a:	23c0      	movs	r3, #192	; 0xc0
 800590c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800590e:	2312      	movs	r3, #18
 8005910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005912:	2301      	movs	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005916:	2303      	movs	r3, #3
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800591a:	2304      	movs	r3, #4
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800591e:	f107 031c 	add.w	r3, r7, #28
 8005922:	4619      	mov	r1, r3
 8005924:	4825      	ldr	r0, [pc, #148]	; (80059bc <HAL_I2C_MspInit+0xf0>)
 8005926:	f003 f9c1 	bl	8008cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 8005934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005938:	6413      	str	r3, [r2, #64]	; 0x40
 800593a:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005946:	e031      	b.n	80059ac <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_I2C_MspInit+0xf4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d12c      	bne.n	80059ac <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800596e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005974:	2312      	movs	r3, #18
 8005976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005978:	2301      	movs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800597c:	2303      	movs	r3, #3
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005980:	2304      	movs	r3, #4
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005984:	f107 031c 	add.w	r3, r7, #28
 8005988:	4619      	mov	r1, r3
 800598a:	480c      	ldr	r0, [pc, #48]	; (80059bc <HAL_I2C_MspInit+0xf0>)
 800598c:	f003 f98e 	bl	8008cac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 800599a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800599e:	6413      	str	r3, [r2, #64]	; 0x40
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_I2C_MspInit+0xec>)
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	bf00      	nop
 80059ae:	3730      	adds	r7, #48	; 0x30
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40005400 	.word	0x40005400
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40020400 	.word	0x40020400
 80059c0:	40005800 	.word	0x40005800

080059c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a69      	ldr	r2, [pc, #420]	; (8005b88 <HAL_SD_MspInit+0x1c4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	f040 80cb 	bne.w	8005b7e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	4a66      	ldr	r2, [pc, #408]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 80059f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059f6:	6453      	str	r3, [r2, #68]	; 0x44
 80059f8:	4b64      	ldr	r3, [pc, #400]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 80059fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	4b60      	ldr	r3, [pc, #384]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	4a5f      	ldr	r2, [pc, #380]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 8005a0e:	f043 0304 	orr.w	r3, r3, #4
 8005a12:	6313      	str	r3, [r2, #48]	; 0x30
 8005a14:	4b5d      	ldr	r3, [pc, #372]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a20:	2300      	movs	r3, #0
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	4b59      	ldr	r3, [pc, #356]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	4a58      	ldr	r2, [pc, #352]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 8005a2a:	f043 0308 	orr.w	r3, r3, #8
 8005a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005a30:	4b56      	ldr	r3, [pc, #344]	; (8005b8c <HAL_SD_MspInit+0x1c8>)
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	60bb      	str	r3, [r7, #8]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005a3c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005a40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a42:	2302      	movs	r3, #2
 8005a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005a4e:	230c      	movs	r3, #12
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a52:	f107 0314 	add.w	r3, r7, #20
 8005a56:	4619      	mov	r1, r3
 8005a58:	484d      	ldr	r0, [pc, #308]	; (8005b90 <HAL_SD_MspInit+0x1cc>)
 8005a5a:	f003 f927 	bl	8008cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a5e:	2304      	movs	r3, #4
 8005a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a62:	2302      	movs	r3, #2
 8005a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005a6e:	230c      	movs	r3, #12
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	4619      	mov	r1, r3
 8005a78:	4846      	ldr	r0, [pc, #280]	; (8005b94 <HAL_SD_MspInit+0x1d0>)
 8005a7a:	f003 f917 	bl	8008cac <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005a7e:	4b46      	ldr	r3, [pc, #280]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005a80:	4a46      	ldr	r2, [pc, #280]	; (8005b9c <HAL_SD_MspInit+0x1d8>)
 8005a82:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005a84:	4b44      	ldr	r3, [pc, #272]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a8a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a8c:	4b42      	ldr	r3, [pc, #264]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a98:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a9e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005aa0:	4b3d      	ldr	r3, [pc, #244]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005aa6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005aa8:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005aae:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005ab0:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005ab8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005abc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005abe:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005aca:	4b33      	ldr	r3, [pc, #204]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005acc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005ad2:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005ad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005ada:	482f      	ldr	r0, [pc, #188]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005adc:	f002 fd4a 	bl	8008574 <HAL_DMA_Init>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005ae6:	f7ff fe0b 	bl	8005700 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
 8005af0:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <HAL_SD_MspInit+0x1d4>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005af6:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005af8:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <HAL_SD_MspInit+0x1e0>)
 8005afa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005afc:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b02:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b04:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b06:	2240      	movs	r2, #64	; 0x40
 8005b08:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b0a:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b10:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b16:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005b18:	4b21      	ldr	r3, [pc, #132]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b1e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b20:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b26:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005b34:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b38:	2204      	movs	r2, #4
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005b3c:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b3e:	2203      	movs	r2, #3
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005b52:	4813      	ldr	r0, [pc, #76]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b54:	f002 fd0e 	bl	8008574 <HAL_DMA_Init>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005b5e:	f7ff fdcf 	bl	8005700 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b68:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <HAL_SD_MspInit+0x1dc>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2100      	movs	r1, #0
 8005b72:	2031      	movs	r0, #49	; 0x31
 8005b74:	f002 fcc7 	bl	8008506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005b78:	2031      	movs	r0, #49	; 0x31
 8005b7a:	f002 fce0 	bl	800853e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005b7e:	bf00      	nop
 8005b80:	3728      	adds	r7, #40	; 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40020800 	.word	0x40020800
 8005b94:	40020c00 	.word	0x40020c00
 8005b98:	2003593c 	.word	0x2003593c
 8005b9c:	40026458 	.word	0x40026458
 8005ba0:	20035c70 	.word	0x20035c70
 8005ba4:	400264a0 	.word	0x400264a0

08005ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	; 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <HAL_SPI_MspInit+0x84>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d12c      	bne.n	8005c24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <HAL_SPI_MspInit+0x88>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <HAL_SPI_MspInit+0x88>)
 8005bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bda:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <HAL_SPI_MspInit+0x88>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_SPI_MspInit+0x88>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	4a10      	ldr	r2, [pc, #64]	; (8005c30 <HAL_SPI_MspInit+0x88>)
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <HAL_SPI_MspInit+0x88>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005c02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c10:	2303      	movs	r3, #3
 8005c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005c14:	2305      	movs	r3, #5
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4805      	ldr	r0, [pc, #20]	; (8005c34 <HAL_SPI_MspInit+0x8c>)
 8005c20:	f003 f844 	bl	8008cac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005c24:	bf00      	nop
 8005c26:	3728      	adds	r7, #40	; 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40003800 	.word	0x40003800
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40020400 	.word	0x40020400

08005c38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	; 0x30
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c40:	f107 031c 	add.w	r3, r7, #28
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2d      	ldr	r2, [pc, #180]	; (8005d0c <HAL_TIM_PWM_MspInit+0xd4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d12d      	bne.n	8005cb6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	4a2b      	ldr	r2, [pc, #172]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	6453      	str	r3, [r2, #68]	; 0x44
 8005c6a:	4b29      	ldr	r3, [pc, #164]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	4a24      	ldr	r2, [pc, #144]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c80:	f043 0310 	orr.w	r3, r3, #16
 8005c84:	6313      	str	r3, [r2, #48]	; 0x30
 8005c86:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005c92:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ca8:	f107 031c 	add.w	r3, r7, #28
 8005cac:	4619      	mov	r1, r3
 8005cae:	4819      	ldr	r0, [pc, #100]	; (8005d14 <HAL_TIM_PWM_MspInit+0xdc>)
 8005cb0:	f002 fffc 	bl	8008cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005cb4:	e026      	b.n	8005d04 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <HAL_TIM_PWM_MspInit+0xe0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10e      	bne.n	8005cde <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	693b      	ldr	r3, [r7, #16]
}
 8005cdc:	e012      	b.n	8005d04 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <HAL_TIM_PWM_MspInit+0xe4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d10d      	bne.n	8005d04 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cf2:	f043 0304 	orr.w	r3, r3, #4
 8005cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_TIM_PWM_MspInit+0xd8>)
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	3730      	adds	r7, #48	; 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40023800 	.word	0x40023800
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800

08005d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a3e      	ldr	r2, [pc, #248]	; (8005e28 <HAL_TIM_Base_MspInit+0x108>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d116      	bne.n	8005d60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	4b3d      	ldr	r3, [pc, #244]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	4a3c      	ldr	r2, [pc, #240]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005d3c:	f043 0310 	orr.w	r3, r3, #16
 8005d40:	6413      	str	r3, [r2, #64]	; 0x40
 8005d42:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2101      	movs	r1, #1
 8005d52:	2036      	movs	r0, #54	; 0x36
 8005d54:	f002 fbd7 	bl	8008506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d58:	2036      	movs	r0, #54	; 0x36
 8005d5a:	f002 fbf0 	bl	800853e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005d5e:	e05e      	b.n	8005e1e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a32      	ldr	r2, [pc, #200]	; (8005e30 <HAL_TIM_Base_MspInit+0x110>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d116      	bne.n	8005d98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	4a2e      	ldr	r2, [pc, #184]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005d74:	f043 0320 	orr.w	r3, r3, #32
 8005d78:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	2037      	movs	r0, #55	; 0x37
 8005d8c:	f002 fbbb 	bl	8008506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005d90:	2037      	movs	r0, #55	; 0x37
 8005d92:	f002 fbd4 	bl	800853e <HAL_NVIC_EnableIRQ>
}
 8005d96:	e042      	b.n	8005e1e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <HAL_TIM_Base_MspInit+0x114>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	4a20      	ldr	r2, [pc, #128]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	6453      	str	r3, [r2, #68]	; 0x44
 8005db2:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	697b      	ldr	r3, [r7, #20]
}
 8005dbe:	e02e      	b.n	8005e1e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <HAL_TIM_Base_MspInit+0x118>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10e      	bne.n	8005de8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]
}
 8005de6:	e01a      	b.n	8005e1e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <HAL_TIM_Base_MspInit+0x11c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d115      	bne.n	8005e1e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	4a0c      	ldr	r2, [pc, #48]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	6413      	str	r3, [r2, #64]	; 0x40
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <HAL_TIM_Base_MspInit+0x10c>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2100      	movs	r1, #0
 8005e12:	202c      	movs	r0, #44	; 0x2c
 8005e14:	f002 fb77 	bl	8008506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005e18:	202c      	movs	r0, #44	; 0x2c
 8005e1a:	f002 fb90 	bl	800853e <HAL_NVIC_EnableIRQ>
}
 8005e1e:	bf00      	nop
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40001000 	.word	0x40001000
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40001400 	.word	0x40001400
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800
 8005e3c:	40001c00 	.word	0x40001c00

08005e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e48:	f107 0314 	add.w	r3, r7, #20
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	60da      	str	r2, [r3, #12]
 8005e56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d133      	bne.n	8005eca <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005e6c:	f043 0302 	orr.w	r3, r3, #2
 8005e70:	6453      	str	r3, [r2, #68]	; 0x44
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e8e:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e9a:	23c0      	movs	r3, #192	; 0xc0
 8005e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005eae:	f107 0314 	add.w	r3, r7, #20
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4809      	ldr	r0, [pc, #36]	; (8005edc <HAL_TIM_Encoder_MspInit+0x9c>)
 8005eb6:	f002 fef9 	bl	8008cac <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	202c      	movs	r0, #44	; 0x2c
 8005ec0:	f002 fb21 	bl	8008506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ec4:	202c      	movs	r0, #44	; 0x2c
 8005ec6:	f002 fb3a 	bl	800853e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005eca:	bf00      	nop
 8005ecc:	3728      	adds	r7, #40	; 0x28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40020800 	.word	0x40020800

08005ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	; 0x30
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee8:	f107 031c 	add.w	r3, r7, #28
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5c      	ldr	r2, [pc, #368]	; (8006070 <HAL_TIM_MspPostInit+0x190>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d11f      	bne.n	8005f42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	4b5b      	ldr	r3, [pc, #364]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	4a5a      	ldr	r2, [pc, #360]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f0c:	f043 0310 	orr.w	r3, r3, #16
 8005f10:	6313      	str	r3, [r2, #48]	; 0x30
 8005f12:	4b58      	ldr	r3, [pc, #352]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f24:	2302      	movs	r3, #2
 8005f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f34:	f107 031c 	add.w	r3, r7, #28
 8005f38:	4619      	mov	r1, r3
 8005f3a:	484f      	ldr	r0, [pc, #316]	; (8006078 <HAL_TIM_MspPostInit+0x198>)
 8005f3c:	f002 feb6 	bl	8008cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005f40:	e091      	b.n	8006066 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a4d      	ldr	r2, [pc, #308]	; (800607c <HAL_TIM_MspPostInit+0x19c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d11e      	bne.n	8005f8a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	4b48      	ldr	r3, [pc, #288]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	4a47      	ldr	r2, [pc, #284]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f56:	f043 0302 	orr.w	r3, r3, #2
 8005f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5c:	4b45      	ldr	r3, [pc, #276]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f68:	2330      	movs	r3, #48	; 0x30
 8005f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f7c:	f107 031c 	add.w	r3, r7, #28
 8005f80:	4619      	mov	r1, r3
 8005f82:	483f      	ldr	r0, [pc, #252]	; (8006080 <HAL_TIM_MspPostInit+0x1a0>)
 8005f84:	f002 fe92 	bl	8008cac <HAL_GPIO_Init>
}
 8005f88:	e06d      	b.n	8006066 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a3d      	ldr	r2, [pc, #244]	; (8006084 <HAL_TIM_MspPostInit+0x1a4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d11f      	bne.n	8005fd4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	4a35      	ldr	r2, [pc, #212]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005f9e:	f043 0308 	orr.w	r3, r3, #8
 8005fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa4:	4b33      	ldr	r3, [pc, #204]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005fb0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fc6:	f107 031c 	add.w	r3, r7, #28
 8005fca:	4619      	mov	r1, r3
 8005fcc:	482e      	ldr	r0, [pc, #184]	; (8006088 <HAL_TIM_MspPostInit+0x1a8>)
 8005fce:	f002 fe6d 	bl	8008cac <HAL_GPIO_Init>
}
 8005fd2:	e048      	b.n	8006066 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	; (800608c <HAL_TIM_MspPostInit+0x1ac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d11f      	bne.n	800601e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	4b24      	ldr	r3, [pc, #144]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a23      	ldr	r2, [pc, #140]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b21      	ldr	r3, [pc, #132]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006000:	2302      	movs	r3, #2
 8006002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006004:	2300      	movs	r3, #0
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006008:	2300      	movs	r3, #0
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800600c:	2303      	movs	r3, #3
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006010:	f107 031c 	add.w	r3, r7, #28
 8006014:	4619      	mov	r1, r3
 8006016:	481a      	ldr	r0, [pc, #104]	; (8006080 <HAL_TIM_MspPostInit+0x1a0>)
 8006018:	f002 fe48 	bl	8008cac <HAL_GPIO_Init>
}
 800601c:	e023      	b.n	8006066 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_TIM_MspPostInit+0x1b0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d11e      	bne.n	8006066 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006028:	2300      	movs	r3, #0
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	4a10      	ldr	r2, [pc, #64]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	6313      	str	r3, [r2, #48]	; 0x30
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <HAL_TIM_MspPostInit+0x194>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604a:	2302      	movs	r3, #2
 800604c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006052:	2300      	movs	r3, #0
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006056:	2303      	movs	r3, #3
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800605a:	f107 031c 	add.w	r3, r7, #28
 800605e:	4619      	mov	r1, r3
 8006060:	4807      	ldr	r0, [pc, #28]	; (8006080 <HAL_TIM_MspPostInit+0x1a0>)
 8006062:	f002 fe23 	bl	8008cac <HAL_GPIO_Init>
}
 8006066:	bf00      	nop
 8006068:	3730      	adds	r7, #48	; 0x30
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40023800 	.word	0x40023800
 8006078:	40021000 	.word	0x40021000
 800607c:	40000400 	.word	0x40000400
 8006080:	40020400 	.word	0x40020400
 8006084:	40000800 	.word	0x40000800
 8006088:	40020c00 	.word	0x40020c00
 800608c:	40014400 	.word	0x40014400
 8006090:	40014800 	.word	0x40014800

08006094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609c:	f107 0314 	add.w	r3, r7, #20
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <HAL_UART_MspInit+0x84>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d12b      	bne.n	800610e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <HAL_UART_MspInit+0x88>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	4a17      	ldr	r2, [pc, #92]	; (800611c <HAL_UART_MspInit+0x88>)
 80060c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c4:	6413      	str	r3, [r2, #64]	; 0x40
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <HAL_UART_MspInit+0x88>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	4b11      	ldr	r3, [pc, #68]	; (800611c <HAL_UART_MspInit+0x88>)
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	4a10      	ldr	r2, [pc, #64]	; (800611c <HAL_UART_MspInit+0x88>)
 80060dc:	f043 0308 	orr.w	r3, r3, #8
 80060e0:	6313      	str	r3, [r2, #48]	; 0x30
 80060e2:	4b0e      	ldr	r3, [pc, #56]	; (800611c <HAL_UART_MspInit+0x88>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80060ee:	2360      	movs	r3, #96	; 0x60
 80060f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f2:	2302      	movs	r3, #2
 80060f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fa:	2303      	movs	r3, #3
 80060fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060fe:	2307      	movs	r3, #7
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	4619      	mov	r1, r3
 8006108:	4805      	ldr	r0, [pc, #20]	; (8006120 <HAL_UART_MspInit+0x8c>)
 800610a:	f002 fdcf 	bl	8008cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800610e:	bf00      	nop
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40004400 	.word	0x40004400
 800611c:	40023800 	.word	0x40023800
 8006120:	40020c00 	.word	0x40020c00

08006124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006128:	e7fe      	b.n	8006128 <NMI_Handler+0x4>

0800612a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800612e:	e7fe      	b.n	800612e <HardFault_Handler+0x4>

08006130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006134:	e7fe      	b.n	8006134 <MemManage_Handler+0x4>

08006136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006136:	b480      	push	{r7}
 8006138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800613a:	e7fe      	b.n	800613a <BusFault_Handler+0x4>

0800613c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006140:	e7fe      	b.n	8006140 <UsageFault_Handler+0x4>

08006142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800615e:	b480      	push	{r7}
 8006160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006170:	f001 fca8 	bl	8007ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006174:	bf00      	nop
 8006176:	bd80      	pop	{r7, pc}

08006178 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800617c:	2004      	movs	r0, #4
 800617e:	f002 ff71 	bl	8009064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}

08006186 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800618a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800618e:	f002 ff69 	bl	8009064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800619c:	4803      	ldr	r0, [pc, #12]	; (80061ac <TIM8_UP_TIM13_IRQHandler+0x14>)
 800619e:	f006 ff80 	bl	800d0a2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80061a2:	4803      	ldr	r0, [pc, #12]	; (80061b0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80061a4:	f006 ff7d 	bl	800d0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80061a8:	bf00      	nop
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	200359f4 	.word	0x200359f4
 80061b0:	20035bf0 	.word	0x20035bf0

080061b4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80061b8:	4802      	ldr	r0, [pc, #8]	; (80061c4 <SDIO_IRQHandler+0x10>)
 80061ba:	f005 f819 	bl	800b1f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20035d50 	.word	0x20035d50

080061c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80061cc:	4802      	ldr	r0, [pc, #8]	; (80061d8 <TIM6_DAC_IRQHandler+0x10>)
 80061ce:	f006 ff68 	bl	800d0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20035cd0 	.word	0x20035cd0

080061dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80061e0:	4802      	ldr	r0, [pc, #8]	; (80061ec <TIM7_IRQHandler+0x10>)
 80061e2:	f006 ff5e 	bl	800d0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20035e74 	.word	0x20035e74

080061f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80061f4:	4802      	ldr	r0, [pc, #8]	; (8006200 <DMA2_Stream2_IRQHandler+0x10>)
 80061f6:	f002 fae5 	bl	80087c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20035e14 	.word	0x20035e14

08006204 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <DMA2_Stream3_IRQHandler+0x10>)
 800620a:	f002 fadb 	bl	80087c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2003593c 	.word	0x2003593c

08006218 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800621c:	4802      	ldr	r0, [pc, #8]	; (8006228 <DMA2_Stream6_IRQHandler+0x10>)
 800621e:	f002 fad1 	bl	80087c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20035c70 	.word	0x20035c70

0800622c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e00a      	b.n	8006254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800623e:	f3af 8000 	nop.w
 8006242:	4601      	mov	r1, r0
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	60ba      	str	r2, [r7, #8]
 800624a:	b2ca      	uxtb	r2, r1
 800624c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	dbf0      	blt.n	800623e <_read+0x12>
	}

return len;
 800625c:	687b      	ldr	r3, [r7, #4]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
	return -1;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800628e:	605a      	str	r2, [r3, #4]
	return 0;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <_isatty>:

int _isatty(int file)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return 1;
 80062a6:	2301      	movs	r3, #1
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
	return 0;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062d8:	4a14      	ldr	r2, [pc, #80]	; (800632c <_sbrk+0x5c>)
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <_sbrk+0x60>)
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <_sbrk+0x64>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <_sbrk+0x64>)
 80062ee:	4a12      	ldr	r2, [pc, #72]	; (8006338 <_sbrk+0x68>)
 80062f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <_sbrk+0x64>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d207      	bcs.n	8006310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006300:	f00d f964 	bl	80135cc <__errno>
 8006304:	4602      	mov	r2, r0
 8006306:	230c      	movs	r3, #12
 8006308:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800630a:	f04f 33ff 	mov.w	r3, #4294967295
 800630e:	e009      	b.n	8006324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006310:	4b08      	ldr	r3, [pc, #32]	; (8006334 <_sbrk+0x64>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <_sbrk+0x64>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	4a05      	ldr	r2, [pc, #20]	; (8006334 <_sbrk+0x64>)
 8006320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006322:	68fb      	ldr	r3, [r7, #12]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20050000 	.word	0x20050000
 8006330:	00000800 	.word	0x00000800
 8006334:	200002a0 	.word	0x200002a0
 8006338:	20037fc8 	.word	0x20037fc8

0800633c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <SystemInit+0x28>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	4a07      	ldr	r2, [pc, #28]	; (8006364 <SystemInit+0x28>)
 8006348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800634c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <SystemInit+0x28>)
 8006352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006356:	609a      	str	r2, [r3, #8]
#endif
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	e000ed00 	.word	0xe000ed00

08006368 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
	lcd_clear();
 800636c:	f7fa fe98 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006370:	2100      	movs	r1, #0
 8006372:	2000      	movs	r0, #0
 8006374:	f7fa fea4 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8006378:	4814      	ldr	r0, [pc, #80]	; (80063cc <batteryLowMode+0x64>)
 800637a:	f7fa fecb 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800637e:	2101      	movs	r1, #1
 8006380:	2000      	movs	r0, #0
 8006382:	f7fa fe9d 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8006386:	4812      	ldr	r0, [pc, #72]	; (80063d0 <batteryLowMode+0x68>)
 8006388:	f7fa fec4 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 800638c:	2152      	movs	r1, #82	; 0x52
 800638e:	4811      	ldr	r0, [pc, #68]	; (80063d4 <batteryLowMode+0x6c>)
 8006390:	f7fb fdac 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006394:	2064      	movs	r0, #100	; 0x64
 8006396:	f001 fbb5 	bl	8007b04 <HAL_Delay>
		led.fullColor('Y');
 800639a:	2159      	movs	r1, #89	; 0x59
 800639c:	480d      	ldr	r0, [pc, #52]	; (80063d4 <batteryLowMode+0x6c>)
 800639e:	f7fb fda5 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80063a2:	2064      	movs	r0, #100	; 0x64
 80063a4:	f001 fbae 	bl	8007b04 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80063a8:	480b      	ldr	r0, [pc, #44]	; (80063d8 <batteryLowMode+0x70>)
 80063aa:	f7fb fd3b 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	bf0c      	ite	eq
 80063b4:	2301      	moveq	r3, #1
 80063b6:	2300      	movne	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0e6      	beq.n	800638c <batteryLowMode+0x24>
			HAL_Delay(500);
 80063be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063c2:	f001 fb9f 	bl	8007b04 <HAL_Delay>
			break;
 80063c6:	bf00      	nop
		}
	}
}
 80063c8:	bf00      	nop
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	0801881c 	.word	0x0801881c
 80063d0:	08018824 	.word	0x08018824
 80063d4:	200005b0 	.word	0x200005b0
 80063d8:	200005a4 	.word	0x200005a4

080063dc <cppInit>:

void cppInit(void)
{
 80063dc:	b598      	push	{r3, r4, r7, lr}
 80063de:	af00      	add	r7, sp, #0
	lcd_init();
 80063e0:	f7fa fe1a 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80063e4:	483f      	ldr	r0, [pc, #252]	; (80064e4 <cppInit+0x108>)
 80063e6:	f7fd fd41 	bl	8003e6c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80063ea:	2064      	movs	r0, #100	; 0x64
 80063ec:	f001 fb8a 	bl	8007b04 <HAL_Delay>
	power_sensor.updateValues();
 80063f0:	483c      	ldr	r0, [pc, #240]	; (80064e4 <cppInit+0x108>)
 80063f2:	f7fd fd49 	bl	8003e88 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80063f6:	f7fa fe53 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80063fa:	2100      	movs	r1, #0
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fa fe5f 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006402:	4839      	ldr	r0, [pc, #228]	; (80064e8 <cppInit+0x10c>)
 8006404:	f7fa fe86 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006408:	2101      	movs	r1, #1
 800640a:	2000      	movs	r0, #0
 800640c:	f7fa fe58 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006410:	4834      	ldr	r0, [pc, #208]	; (80064e4 <cppInit+0x108>)
 8006412:	f7fd fd63 	bl	8003edc <_ZN11PowerSensor17getButteryVoltageEv>
 8006416:	ee10 3a10 	vmov	r3, s0
 800641a:	4618      	mov	r0, r3
 800641c:	f7fa f8ac 	bl	8000578 <__aeabi_f2d>
 8006420:	4603      	mov	r3, r0
 8006422:	460c      	mov	r4, r1
 8006424:	461a      	mov	r2, r3
 8006426:	4623      	mov	r3, r4
 8006428:	4830      	ldr	r0, [pc, #192]	; (80064ec <cppInit+0x110>)
 800642a:	f7fa fe73 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800642e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006432:	f001 fb67 	bl	8007b04 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8006436:	482b      	ldr	r0, [pc, #172]	; (80064e4 <cppInit+0x108>)
 8006438:	f7fd fd62 	bl	8003f00 <_ZN11PowerSensor12butteryCheckEv>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <cppInit+0x6a>
 8006442:	f7ff ff91 	bl	8006368 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8006446:	482a      	ldr	r0, [pc, #168]	; (80064f0 <cppInit+0x114>)
 8006448:	f7fc ff5a 	bl	8003300 <_ZN6Logger10sdCardInitEv>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <cppInit+0x86>
		led.fullColor('G');
 8006452:	2147      	movs	r1, #71	; 0x47
 8006454:	4827      	ldr	r0, [pc, #156]	; (80064f4 <cppInit+0x118>)
 8006456:	f7fb fd49 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800645a:	2064      	movs	r0, #100	; 0x64
 800645c:	f001 fb52 	bl	8007b04 <HAL_Delay>
 8006460:	e006      	b.n	8006470 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006462:	2152      	movs	r1, #82	; 0x52
 8006464:	4823      	ldr	r0, [pc, #140]	; (80064f4 <cppInit+0x118>)
 8006466:	f7fb fd41 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800646a:	2064      	movs	r0, #100	; 0x64
 800646c:	f001 fb4a 	bl	8007b04 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006470:	4821      	ldr	r0, [pc, #132]	; (80064f8 <cppInit+0x11c>)
 8006472:	f7fb fe97 	bl	80021a4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006476:	4821      	ldr	r0, [pc, #132]	; (80064fc <cppInit+0x120>)
 8006478:	f7fd f990 	bl	800379c <_ZN5Motor4initEv>
	encoder.init();
 800647c:	4820      	ldr	r0, [pc, #128]	; (8006500 <cppInit+0x124>)
 800647e:	f7fa fe91 	bl	80011a4 <_ZN7Encoder4initEv>
	imu.init();
 8006482:	4820      	ldr	r0, [pc, #128]	; (8006504 <cppInit+0x128>)
 8006484:	f7fb faea 	bl	8001a5c <_ZN3IMU4initEv>
	line_trace.init();
 8006488:	481f      	ldr	r0, [pc, #124]	; (8006508 <cppInit+0x12c>)
 800648a:	f7fc fcb9 	bl	8002e00 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 800648e:	481a      	ldr	r0, [pc, #104]	; (80064f8 <cppInit+0x11c>)
 8006490:	f7fb ffc8 	bl	8002424 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8006494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006498:	f001 fb34 	bl	8007b04 <HAL_Delay>

	led.fullColor('M');
 800649c:	214d      	movs	r1, #77	; 0x4d
 800649e:	4815      	ldr	r0, [pc, #84]	; (80064f4 <cppInit+0x118>)
 80064a0:	f7fb fd24 	bl	8001eec <_ZN3LED9fullColorEc>
	imu.calibration();
 80064a4:	4817      	ldr	r0, [pc, #92]	; (8006504 <cppInit+0x128>)
 80064a6:	f7fb fba9 	bl	8001bfc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80064aa:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800650c <cppInit+0x130>
 80064ae:	eddf 0a18 	vldr	s1, [pc, #96]	; 8006510 <cppInit+0x134>
 80064b2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8006514 <cppInit+0x138>
 80064b6:	4818      	ldr	r0, [pc, #96]	; (8006518 <cppInit+0x13c>)
 80064b8:	f7fe f8d6 	bl	8004668 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80064bc:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800651c <cppInit+0x140>
 80064c0:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006520 <cppInit+0x144>
 80064c4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006524 <cppInit+0x148>
 80064c8:	4813      	ldr	r0, [pc, #76]	; (8006518 <cppInit+0x13c>)
 80064ca:	f7fe f8e6 	bl	800469a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 80064ce:	480c      	ldr	r0, [pc, #48]	; (8006500 <cppInit+0x124>)
 80064d0:	f7fa ffb2 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80064d4:	4814      	ldr	r0, [pc, #80]	; (8006528 <cppInit+0x14c>)
 80064d6:	f7fd fb97 	bl	8003c08 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80064da:	4814      	ldr	r0, [pc, #80]	; (800652c <cppInit+0x150>)
 80064dc:	f7fd fc2e 	bl	8003d3c <_ZN13PathFollowing4initEv>

}
 80064e0:	bf00      	nop
 80064e2:	bd98      	pop	{r3, r4, r7, pc}
 80064e4:	200005b4 	.word	0x200005b4
 80064e8:	08018828 	.word	0x08018828
 80064ec:	08018830 	.word	0x08018830
 80064f0:	200005d4 	.word	0x200005d4
 80064f4:	200005b0 	.word	0x200005b0
 80064f8:	200002a4 	.word	0x200002a4
 80064fc:	200005ac 	.word	0x200005ac
 8006500:	20015d9c 	.word	0x20015d9c
 8006504:	200005c0 	.word	0x200005c0
 8006508:	20015e38 	.word	0x20015e38
 800650c:	3cceca68 	.word	0x3cceca68
 8006510:	4180f06f 	.word	0x4180f06f
 8006514:	3fea2d0e 	.word	0x3fea2d0e
 8006518:	20015db8 	.word	0x20015db8
 800651c:	3ab7dacd 	.word	0x3ab7dacd
 8006520:	3f5e3fbc 	.word	0x3f5e3fbc
 8006524:	3d8eefa2 	.word	0x3d8eefa2
 8006528:	20015df8 	.word	0x20015df8
 800652c:	2001be88 	.word	0x2001be88

08006530 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8006534:	4819      	ldr	r0, [pc, #100]	; (800659c <cppFlip1ms+0x6c>)
 8006536:	f7fb fe93 	bl	8002260 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800653a:	4819      	ldr	r0, [pc, #100]	; (80065a0 <cppFlip1ms+0x70>)
 800653c:	f7fb fabc 	bl	8001ab8 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8006540:	4818      	ldr	r0, [pc, #96]	; (80065a4 <cppFlip1ms+0x74>)
 8006542:	f7fa fe51 	bl	80011e8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8006546:	4818      	ldr	r0, [pc, #96]	; (80065a8 <cppFlip1ms+0x78>)
 8006548:	f7fc fcf2 	bl	8002f30 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800654c:	4817      	ldr	r0, [pc, #92]	; (80065ac <cppFlip1ms+0x7c>)
 800654e:	f7fe f8bd 	bl	80046cc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006552:	4817      	ldr	r0, [pc, #92]	; (80065b0 <cppFlip1ms+0x80>)
 8006554:	f7fd fb3c 	bl	8003bd0 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8006558:	4816      	ldr	r0, [pc, #88]	; (80065b4 <cppFlip1ms+0x84>)
 800655a:	f7fd f931 	bl	80037c0 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800655e:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <cppFlip1ms+0x88>)
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <cppFlip1ms+0x88>)
 8006568:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 800656a:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <cppFlip1ms+0x88>)
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d90c      	bls.n	800658c <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 8006572:	480b      	ldr	r0, [pc, #44]	; (80065a0 <cppFlip1ms+0x70>)
 8006574:	f7fb faf8 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 8006578:	eef0 7a40 	vmov.f32	s15, s0
 800657c:	eeb0 0a67 	vmov.f32	s0, s15
 8006580:	480e      	ldr	r0, [pc, #56]	; (80065bc <cppFlip1ms+0x8c>)
 8006582:	f7fd fe45 	bl	8004210 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <cppFlip1ms+0x88>)
 8006588:	2200      	movs	r2, #0
 800658a:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 800658c:	4806      	ldr	r0, [pc, #24]	; (80065a8 <cppFlip1ms+0x78>)
 800658e:	f7fc fdfd 	bl	800318c <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 8006592:	4804      	ldr	r0, [pc, #16]	; (80065a4 <cppFlip1ms+0x74>)
 8006594:	f7fa ff5e 	bl	8001454 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006598:	bf00      	nop
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200002a4 	.word	0x200002a4
 80065a0:	200005c0 	.word	0x200005c0
 80065a4:	20015d9c 	.word	0x20015d9c
 80065a8:	20015e38 	.word	0x20015e38
 80065ac:	20015db8 	.word	0x20015db8
 80065b0:	20015df8 	.word	0x20015df8
 80065b4:	200005ac 	.word	0x200005ac
 80065b8:	200335b2 	.word	0x200335b2
 80065bc:	2001bc7c 	.word	0x2001bc7c

080065c0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80065c4:	4802      	ldr	r0, [pc, #8]	; (80065d0 <cppFlip100ns+0x10>)
 80065c6:	f7fb fdfd 	bl	80021c4 <_ZN10LineSensor17storeSensorValuesEv>
}
 80065ca:	bf00      	nop
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200002a4 	.word	0x200002a4

080065d4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <cppFlip10ms+0x30>)
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b08      	ldr	r3, [pc, #32]	; (8006604 <cppFlip10ms+0x30>)
 80065e2:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80065e4:	4b07      	ldr	r3, [pc, #28]	; (8006604 <cppFlip10ms+0x30>)
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	2b06      	cmp	r3, #6
 80065ea:	d905      	bls.n	80065f8 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80065ec:	4806      	ldr	r0, [pc, #24]	; (8006608 <cppFlip10ms+0x34>)
 80065ee:	f7fd fe4b 	bl	8004288 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80065f2:	4b04      	ldr	r3, [pc, #16]	; (8006604 <cppFlip10ms+0x30>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <cppFlip10ms+0x30>)
 80065fa:	881a      	ldrh	r2, [r3, #0]
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <cppFlip10ms+0x38>)
 80065fe:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}
 8006604:	200335b4 	.word	0x200335b4
 8006608:	2001bc7c 	.word	0x2001bc7c
 800660c:	200335b0 	.word	0x200335b0

08006610 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	4619      	mov	r1, r3
 800661e:	4803      	ldr	r0, [pc, #12]	; (800662c <cppExit+0x1c>)
 8006620:	f7fd fd06 	bl	8004030 <_ZN10SideSensor12updateStatusEt>
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	2000059c 	.word	0x2000059c

08006630 <cppLoop>:

void cppLoop(void)
{
 8006630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006634:	b08b      	sub	sp, #44	; 0x2c
 8006636:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8006638:	48bf      	ldr	r0, [pc, #764]	; (8006938 <cppLoop+0x308>)
 800663a:	f7fd fc93 	bl	8003f64 <_ZN12RotarySwitch8getValueEv>
 800663e:	4603      	mov	r3, r0
 8006640:	2b0f      	cmp	r3, #15
 8006642:	f201 80fb 	bhi.w	800783c <cppLoop+0x120c>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <cppLoop+0x1c>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800668d 	.word	0x0800668d
 8006650:	08006b67 	.word	0x08006b67
 8006654:	08006be3 	.word	0x08006be3
 8006658:	08006cb1 	.word	0x08006cb1
 800665c:	08006d61 	.word	0x08006d61
 8006660:	08006def 	.word	0x08006def
 8006664:	08006eb5 	.word	0x08006eb5
 8006668:	08006fc9 	.word	0x08006fc9
 800666c:	08007069 	.word	0x08007069
 8006670:	0800759d 	.word	0x0800759d
 8006674:	08007639 	.word	0x08007639
 8006678:	080076d3 	.word	0x080076d3
 800667c:	0800773b 	.word	0x0800773b
 8006680:	080077bf 	.word	0x080077bf
 8006684:	080077e9 	.word	0x080077e9
 8006688:	08007813 	.word	0x08007813
	static int16_t selector;

	case 0:
		led.fullColor('R');
 800668c:	2152      	movs	r1, #82	; 0x52
 800668e:	48ab      	ldr	r0, [pc, #684]	; (800693c <cppLoop+0x30c>)
 8006690:	f7fb fc2c 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006694:	f7fa fd04 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006698:	2100      	movs	r1, #0
 800669a:	2000      	movs	r0, #0
 800669c:	f7fa fd10 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80066a0:	48a7      	ldr	r0, [pc, #668]	; (8006940 <cppLoop+0x310>)
 80066a2:	f7fc fbfa 	bl	8002e9a <_ZN9LineTrace5getKpEv>
 80066a6:	eeb0 7a40 	vmov.f32	s14, s0
 80066aa:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8006944 <cppLoop+0x314>
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	ee17 0a90 	vmov	r0, s15
 80066b6:	f7f9 ff5f 	bl	8000578 <__aeabi_f2d>
 80066ba:	4603      	mov	r3, r0
 80066bc:	460c      	mov	r4, r1
 80066be:	461a      	mov	r2, r3
 80066c0:	4623      	mov	r3, r4
 80066c2:	48a1      	ldr	r0, [pc, #644]	; (8006948 <cppLoop+0x318>)
 80066c4:	f7fa fd26 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80066c8:	2101      	movs	r1, #1
 80066ca:	2000      	movs	r0, #0
 80066cc:	f7fa fcf8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80066d0:	489b      	ldr	r0, [pc, #620]	; (8006940 <cppLoop+0x310>)
 80066d2:	f7fc fbf1 	bl	8002eb8 <_ZN9LineTrace5getKiEv>
 80066d6:	eeb0 7a40 	vmov.f32	s14, s0
 80066da:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800694c <cppLoop+0x31c>
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	ee17 0a90 	vmov	r0, s15
 80066e6:	f7f9 ff47 	bl	8000578 <__aeabi_f2d>
 80066ea:	4605      	mov	r5, r0
 80066ec:	460e      	mov	r6, r1
 80066ee:	4894      	ldr	r0, [pc, #592]	; (8006940 <cppLoop+0x310>)
 80066f0:	f7fc fbf1 	bl	8002ed6 <_ZN9LineTrace5getKdEv>
 80066f4:	eeb0 7a40 	vmov.f32	s14, s0
 80066f8:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006950 <cppLoop+0x320>
 80066fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006700:	ee17 0a90 	vmov	r0, s15
 8006704:	f7f9 ff38 	bl	8000578 <__aeabi_f2d>
 8006708:	4603      	mov	r3, r0
 800670a:	460c      	mov	r4, r1
 800670c:	e9cd 3400 	strd	r3, r4, [sp]
 8006710:	462a      	mov	r2, r5
 8006712:	4633      	mov	r3, r6
 8006714:	488f      	ldr	r0, [pc, #572]	; (8006954 <cppLoop+0x324>)
 8006716:	f7fa fcfd 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 800671a:	4b8f      	ldr	r3, [pc, #572]	; (8006958 <cppLoop+0x328>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f3bf 8f5b 	dmb	ish
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d015      	beq.n	8006762 <cppLoop+0x132>
 8006736:	4888      	ldr	r0, [pc, #544]	; (8006958 <cppLoop+0x328>)
 8006738:	f00b fee1 	bl	80124fe <__cxa_guard_acquire>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	bf14      	ite	ne
 8006742:	2301      	movne	r3, #1
 8006744:	2300      	moveq	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <cppLoop+0x132>
 800674c:	487c      	ldr	r0, [pc, #496]	; (8006940 <cppLoop+0x310>)
 800674e:	f7fc fba4 	bl	8002e9a <_ZN9LineTrace5getKpEv>
 8006752:	eef0 7a40 	vmov.f32	s15, s0
 8006756:	4b81      	ldr	r3, [pc, #516]	; (800695c <cppLoop+0x32c>)
 8006758:	edc3 7a00 	vstr	s15, [r3]
 800675c:	487e      	ldr	r0, [pc, #504]	; (8006958 <cppLoop+0x328>)
 800675e:	f00b feda 	bl	8012516 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8006762:	4b7f      	ldr	r3, [pc, #508]	; (8006960 <cppLoop+0x330>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f3bf 8f5b 	dmb	ish
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d015      	beq.n	80067aa <cppLoop+0x17a>
 800677e:	4878      	ldr	r0, [pc, #480]	; (8006960 <cppLoop+0x330>)
 8006780:	f00b febd 	bl	80124fe <__cxa_guard_acquire>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <cppLoop+0x17a>
 8006794:	486a      	ldr	r0, [pc, #424]	; (8006940 <cppLoop+0x310>)
 8006796:	f7fc fb8f 	bl	8002eb8 <_ZN9LineTrace5getKiEv>
 800679a:	eef0 7a40 	vmov.f32	s15, s0
 800679e:	4b71      	ldr	r3, [pc, #452]	; (8006964 <cppLoop+0x334>)
 80067a0:	edc3 7a00 	vstr	s15, [r3]
 80067a4:	486e      	ldr	r0, [pc, #440]	; (8006960 <cppLoop+0x330>)
 80067a6:	f00b feb6 	bl	8012516 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 80067aa:	4b6f      	ldr	r3, [pc, #444]	; (8006968 <cppLoop+0x338>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f3bf 8f5b 	dmb	ish
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d015      	beq.n	80067f2 <cppLoop+0x1c2>
 80067c6:	4868      	ldr	r0, [pc, #416]	; (8006968 <cppLoop+0x338>)
 80067c8:	f00b fe99 	bl	80124fe <__cxa_guard_acquire>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <cppLoop+0x1c2>
 80067dc:	4858      	ldr	r0, [pc, #352]	; (8006940 <cppLoop+0x310>)
 80067de:	f7fc fb7a 	bl	8002ed6 <_ZN9LineTrace5getKdEv>
 80067e2:	eef0 7a40 	vmov.f32	s15, s0
 80067e6:	4b61      	ldr	r3, [pc, #388]	; (800696c <cppLoop+0x33c>)
 80067e8:	edc3 7a00 	vstr	s15, [r3]
 80067ec:	485e      	ldr	r0, [pc, #376]	; (8006968 <cppLoop+0x338>)
 80067ee:	f00b fe92 	bl	8012516 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80067f2:	485f      	ldr	r0, [pc, #380]	; (8006970 <cppLoop+0x340>)
 80067f4:	f7fb fb16 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	bf0c      	ite	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	2300      	movne	r3, #0
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d022      	beq.n	800684e <cppLoop+0x21e>
			led.LR(-1, 1);
 8006808:	2201      	movs	r2, #1
 800680a:	f04f 31ff 	mov.w	r1, #4294967295
 800680e:	484b      	ldr	r0, [pc, #300]	; (800693c <cppLoop+0x30c>)
 8006810:	f7fb fc28 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006814:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006818:	f001 f974 	bl	8007b04 <HAL_Delay>

			selector++;
 800681c:	4b55      	ldr	r3, [pc, #340]	; (8006974 <cppLoop+0x344>)
 800681e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006822:	b29b      	uxth	r3, r3
 8006824:	3301      	adds	r3, #1
 8006826:	b29b      	uxth	r3, r3
 8006828:	b21a      	sxth	r2, r3
 800682a:	4b52      	ldr	r3, [pc, #328]	; (8006974 <cppLoop+0x344>)
 800682c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800682e:	4b51      	ldr	r3, [pc, #324]	; (8006974 <cppLoop+0x344>)
 8006830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006834:	2b02      	cmp	r3, #2
 8006836:	dd02      	ble.n	800683e <cppLoop+0x20e>
 8006838:	4b4e      	ldr	r3, [pc, #312]	; (8006974 <cppLoop+0x344>)
 800683a:	2200      	movs	r2, #0
 800683c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800683e:	2200      	movs	r2, #0
 8006840:	f04f 31ff 	mov.w	r1, #4294967295
 8006844:	483d      	ldr	r0, [pc, #244]	; (800693c <cppLoop+0x30c>)
 8006846:	f7fb fc0d 	bl	8002064 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800684a:	f000 bff9 	b.w	8007840 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_R){
 800684e:	4848      	ldr	r0, [pc, #288]	; (8006970 <cppLoop+0x340>)
 8006850:	f7fb fae8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006854:	4603      	mov	r3, r0
 8006856:	2b10      	cmp	r3, #16
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8089 	beq.w	8006978 <cppLoop+0x348>
			led.LR(-1, 1);
 8006866:	2201      	movs	r2, #1
 8006868:	f04f 31ff 	mov.w	r1, #4294967295
 800686c:	4833      	ldr	r0, [pc, #204]	; (800693c <cppLoop+0x30c>)
 800686e:	f7fb fbf9 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006872:	2064      	movs	r0, #100	; 0x64
 8006874:	f001 f946 	bl	8007b04 <HAL_Delay>
			if(selector == 0){
 8006878:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <cppLoop+0x344>)
 800687a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d113      	bne.n	80068aa <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <cppLoop+0x32c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7f9 fe76 	bl	8000578 <__aeabi_f2d>
 800688c:	a324      	add	r3, pc, #144	; (adr r3, 8006920 <cppLoop+0x2f0>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f7f9 fd13 	bl	80002bc <__adddf3>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	4618      	mov	r0, r3
 800689c:	4621      	mov	r1, r4
 800689e:	f7fa f9bb 	bl	8000c18 <__aeabi_d2f>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b2d      	ldr	r3, [pc, #180]	; (800695c <cppLoop+0x32c>)
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	e02b      	b.n	8006902 <cppLoop+0x2d2>
			else if(selector == 1){
 80068aa:	4b32      	ldr	r3, [pc, #200]	; (8006974 <cppLoop+0x344>)
 80068ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d113      	bne.n	80068dc <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 80068b4:	4b2b      	ldr	r3, [pc, #172]	; (8006964 <cppLoop+0x334>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7f9 fe5d 	bl	8000578 <__aeabi_f2d>
 80068be:	a31a      	add	r3, pc, #104	; (adr r3, 8006928 <cppLoop+0x2f8>)
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fcfa 	bl	80002bc <__adddf3>
 80068c8:	4603      	mov	r3, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	4618      	mov	r0, r3
 80068ce:	4621      	mov	r1, r4
 80068d0:	f7fa f9a2 	bl	8000c18 <__aeabi_d2f>
 80068d4:	4602      	mov	r2, r0
 80068d6:	4b23      	ldr	r3, [pc, #140]	; (8006964 <cppLoop+0x334>)
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	e012      	b.n	8006902 <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 80068dc:	4b23      	ldr	r3, [pc, #140]	; (800696c <cppLoop+0x33c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7f9 fe49 	bl	8000578 <__aeabi_f2d>
 80068e6:	a312      	add	r3, pc, #72	; (adr r3, 8006930 <cppLoop+0x300>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7f9 fce6 	bl	80002bc <__adddf3>
 80068f0:	4603      	mov	r3, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	4618      	mov	r0, r3
 80068f6:	4621      	mov	r1, r4
 80068f8:	f7fa f98e 	bl	8000c18 <__aeabi_d2f>
 80068fc:	4602      	mov	r2, r0
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <cppLoop+0x33c>)
 8006900:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006902:	2152      	movs	r1, #82	; 0x52
 8006904:	480d      	ldr	r0, [pc, #52]	; (800693c <cppLoop+0x30c>)
 8006906:	f7fb faf1 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800690a:	2200      	movs	r2, #0
 800690c:	f04f 31ff 	mov.w	r1, #4294967295
 8006910:	480a      	ldr	r0, [pc, #40]	; (800693c <cppLoop+0x30c>)
 8006912:	f7fb fba7 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006916:	f000 bf93 	b.w	8007840 <cppLoop+0x1210>
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w
 8006920:	88e368f1 	.word	0x88e368f1
 8006924:	3ee4f8b5 	.word	0x3ee4f8b5
 8006928:	eb1c432d 	.word	0xeb1c432d
 800692c:	3f1a36e2 	.word	0x3f1a36e2
 8006930:	a0b5ed8d 	.word	0xa0b5ed8d
 8006934:	3eb0c6f7 	.word	0x3eb0c6f7
 8006938:	200005a8 	.word	0x200005a8
 800693c:	200005b0 	.word	0x200005b0
 8006940:	20015e38 	.word	0x20015e38
 8006944:	447a0000 	.word	0x447a0000
 8006948:	08018834 	.word	0x08018834
 800694c:	42c80000 	.word	0x42c80000
 8006950:	461c4000 	.word	0x461c4000
 8006954:	08018840 	.word	0x08018840
 8006958:	200335bc 	.word	0x200335bc
 800695c:	200335b8 	.word	0x200335b8
 8006960:	200335c4 	.word	0x200335c4
 8006964:	200335c0 	.word	0x200335c0
 8006968:	200335cc 	.word	0x200335cc
 800696c:	200335c8 	.word	0x200335c8
 8006970:	200005a4 	.word	0x200005a4
 8006974:	200335b6 	.word	0x200335b6
		else if(joy_stick.getValue() == JOY_L){
 8006978:	48bf      	ldr	r0, [pc, #764]	; (8006c78 <cppLoop+0x648>)
 800697a:	f7fb fa53 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800697e:	4603      	mov	r3, r0
 8006980:	2b01      	cmp	r3, #1
 8006982:	bf0c      	ite	eq
 8006984:	2301      	moveq	r3, #1
 8006986:	2300      	movne	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d059      	beq.n	8006a42 <cppLoop+0x412>
			led.LR(-1, 1);
 800698e:	2201      	movs	r2, #1
 8006990:	f04f 31ff 	mov.w	r1, #4294967295
 8006994:	48b9      	ldr	r0, [pc, #740]	; (8006c7c <cppLoop+0x64c>)
 8006996:	f7fb fb65 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800699a:	2064      	movs	r0, #100	; 0x64
 800699c:	f001 f8b2 	bl	8007b04 <HAL_Delay>
			if(selector == 0){
 80069a0:	4bb7      	ldr	r3, [pc, #732]	; (8006c80 <cppLoop+0x650>)
 80069a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d113      	bne.n	80069d2 <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 80069aa:	4bb6      	ldr	r3, [pc, #728]	; (8006c84 <cppLoop+0x654>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7f9 fde2 	bl	8000578 <__aeabi_f2d>
 80069b4:	a3aa      	add	r3, pc, #680	; (adr r3, 8006c60 <cppLoop+0x630>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f7f9 fc7d 	bl	80002b8 <__aeabi_dsub>
 80069be:	4603      	mov	r3, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	4618      	mov	r0, r3
 80069c4:	4621      	mov	r1, r4
 80069c6:	f7fa f927 	bl	8000c18 <__aeabi_d2f>
 80069ca:	4602      	mov	r2, r0
 80069cc:	4bad      	ldr	r3, [pc, #692]	; (8006c84 <cppLoop+0x654>)
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e02b      	b.n	8006a2a <cppLoop+0x3fa>
			else if(selector == 1){
 80069d2:	4bab      	ldr	r3, [pc, #684]	; (8006c80 <cppLoop+0x650>)
 80069d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d113      	bne.n	8006a04 <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 80069dc:	4baa      	ldr	r3, [pc, #680]	; (8006c88 <cppLoop+0x658>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7f9 fdc9 	bl	8000578 <__aeabi_f2d>
 80069e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006c68 <cppLoop+0x638>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fc64 	bl	80002b8 <__aeabi_dsub>
 80069f0:	4603      	mov	r3, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	4618      	mov	r0, r3
 80069f6:	4621      	mov	r1, r4
 80069f8:	f7fa f90e 	bl	8000c18 <__aeabi_d2f>
 80069fc:	4602      	mov	r2, r0
 80069fe:	4ba2      	ldr	r3, [pc, #648]	; (8006c88 <cppLoop+0x658>)
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e012      	b.n	8006a2a <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 8006a04:	4ba1      	ldr	r3, [pc, #644]	; (8006c8c <cppLoop+0x65c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7f9 fdb5 	bl	8000578 <__aeabi_f2d>
 8006a0e:	a398      	add	r3, pc, #608	; (adr r3, 8006c70 <cppLoop+0x640>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	f7f9 fc50 	bl	80002b8 <__aeabi_dsub>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	4621      	mov	r1, r4
 8006a20:	f7fa f8fa 	bl	8000c18 <__aeabi_d2f>
 8006a24:	4602      	mov	r2, r0
 8006a26:	4b99      	ldr	r3, [pc, #612]	; (8006c8c <cppLoop+0x65c>)
 8006a28:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006a2a:	2152      	movs	r1, #82	; 0x52
 8006a2c:	4893      	ldr	r0, [pc, #588]	; (8006c7c <cppLoop+0x64c>)
 8006a2e:	f7fb fa5d 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006a32:	2200      	movs	r2, #0
 8006a34:	f04f 31ff 	mov.w	r1, #4294967295
 8006a38:	4890      	ldr	r0, [pc, #576]	; (8006c7c <cppLoop+0x64c>)
 8006a3a:	f7fb fb13 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006a3e:	f000 beff 	b.w	8007840 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_D){
 8006a42:	488d      	ldr	r0, [pc, #564]	; (8006c78 <cppLoop+0x648>)
 8006a44:	f7fb f9ee 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	bf0c      	ite	eq
 8006a4e:	2301      	moveq	r3, #1
 8006a50:	2300      	movne	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d03e      	beq.n	8006ad6 <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a5e:	4887      	ldr	r0, [pc, #540]	; (8006c7c <cppLoop+0x64c>)
 8006a60:	f7fb fb00 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006a68:	f001 f84c 	bl	8007b04 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006a6c:	f107 031c 	add.w	r3, r7, #28
 8006a70:	2201      	movs	r2, #1
 8006a72:	4987      	ldr	r1, [pc, #540]	; (8006c90 <cppLoop+0x660>)
 8006a74:	4887      	ldr	r0, [pc, #540]	; (8006c94 <cppLoop+0x664>)
 8006a76:	f7fa fe1d 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006a7a:	f107 0318 	add.w	r3, r7, #24
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4985      	ldr	r1, [pc, #532]	; (8006c98 <cppLoop+0x668>)
 8006a82:	4884      	ldr	r0, [pc, #528]	; (8006c94 <cppLoop+0x664>)
 8006a84:	f7fa fe16 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	4983      	ldr	r1, [pc, #524]	; (8006c9c <cppLoop+0x66c>)
 8006a90:	4880      	ldr	r0, [pc, #512]	; (8006c94 <cppLoop+0x664>)
 8006a92:	f7fa fe0f 	bl	80016b4 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8006a96:	edd7 7a07 	vldr	s15, [r7, #28]
 8006a9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a9e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006aa2:	eeb0 1a66 	vmov.f32	s2, s13
 8006aa6:	eef0 0a47 	vmov.f32	s1, s14
 8006aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8006aae:	487c      	ldr	r0, [pc, #496]	; (8006ca0 <cppLoop+0x670>)
 8006ab0:	f7fc f9da 	bl	8002e68 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4a73      	ldr	r2, [pc, #460]	; (8006c84 <cppLoop+0x654>)
 8006ab8:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4a72      	ldr	r2, [pc, #456]	; (8006c88 <cppLoop+0x658>)
 8006abe:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4a72      	ldr	r2, [pc, #456]	; (8006c8c <cppLoop+0x65c>)
 8006ac4:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8006acc:	486b      	ldr	r0, [pc, #428]	; (8006c7c <cppLoop+0x64c>)
 8006ace:	f7fb fac9 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006ad2:	f000 beb5 	b.w	8007840 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_C){
 8006ad6:	4868      	ldr	r0, [pc, #416]	; (8006c78 <cppLoop+0x648>)
 8006ad8:	f7fb f9a4 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	bf0c      	ite	eq
 8006ae2:	2301      	moveq	r3, #1
 8006ae4:	2300      	movne	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 86a9 	beq.w	8007840 <cppLoop+0x1210>
			led.LR(-1, 1);
 8006aee:	2201      	movs	r2, #1
 8006af0:	f04f 31ff 	mov.w	r1, #4294967295
 8006af4:	4861      	ldr	r0, [pc, #388]	; (8006c7c <cppLoop+0x64c>)
 8006af6:	f7fb fab5 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006afe:	f001 f801 	bl	8007b04 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	4b5f      	ldr	r3, [pc, #380]	; (8006c84 <cppLoop+0x654>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	4961      	ldr	r1, [pc, #388]	; (8006c90 <cppLoop+0x660>)
 8006b0c:	4861      	ldr	r0, [pc, #388]	; (8006c94 <cppLoop+0x664>)
 8006b0e:	f7fa fd6b 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006b12:	2300      	movs	r3, #0
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	4b5c      	ldr	r3, [pc, #368]	; (8006c88 <cppLoop+0x658>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	495f      	ldr	r1, [pc, #380]	; (8006c98 <cppLoop+0x668>)
 8006b1c:	485d      	ldr	r0, [pc, #372]	; (8006c94 <cppLoop+0x664>)
 8006b1e:	f7fa fd63 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8006b22:	2300      	movs	r3, #0
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4b59      	ldr	r3, [pc, #356]	; (8006c8c <cppLoop+0x65c>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	495c      	ldr	r1, [pc, #368]	; (8006c9c <cppLoop+0x66c>)
 8006b2c:	4859      	ldr	r0, [pc, #356]	; (8006c94 <cppLoop+0x664>)
 8006b2e:	f7fa fd5b 	bl	80015e8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8006b32:	4b54      	ldr	r3, [pc, #336]	; (8006c84 <cppLoop+0x654>)
 8006b34:	edd3 7a00 	vldr	s15, [r3]
 8006b38:	4b53      	ldr	r3, [pc, #332]	; (8006c88 <cppLoop+0x658>)
 8006b3a:	ed93 7a00 	vldr	s14, [r3]
 8006b3e:	4b53      	ldr	r3, [pc, #332]	; (8006c8c <cppLoop+0x65c>)
 8006b40:	edd3 6a00 	vldr	s13, [r3]
 8006b44:	eeb0 1a66 	vmov.f32	s2, s13
 8006b48:	eef0 0a47 	vmov.f32	s1, s14
 8006b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b50:	4853      	ldr	r0, [pc, #332]	; (8006ca0 <cppLoop+0x670>)
 8006b52:	f7fc f989 	bl	8002e68 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8006b56:	2200      	movs	r2, #0
 8006b58:	f04f 31ff 	mov.w	r1, #4294967295
 8006b5c:	4847      	ldr	r0, [pc, #284]	; (8006c7c <cppLoop+0x64c>)
 8006b5e:	f7fb fa81 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006b62:	f000 be6d 	b.w	8007840 <cppLoop+0x1210>

	case 1:
		led.fullColor('B');
 8006b66:	2142      	movs	r1, #66	; 0x42
 8006b68:	4844      	ldr	r0, [pc, #272]	; (8006c7c <cppLoop+0x64c>)
 8006b6a:	f7fb f9bf 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b6e:	f7fa fa97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b72:	2100      	movs	r1, #0
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7fa faa3 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006b7a:	484a      	ldr	r0, [pc, #296]	; (8006ca4 <cppLoop+0x674>)
 8006b7c:	f7fa faca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b80:	2101      	movs	r1, #1
 8006b82:	2000      	movs	r0, #0
 8006b84:	f7fa fa9c 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006b88:	4847      	ldr	r0, [pc, #284]	; (8006ca8 <cppLoop+0x678>)
 8006b8a:	f7fa fac3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006b8e:	483a      	ldr	r0, [pc, #232]	; (8006c78 <cppLoop+0x648>)
 8006b90:	f7fb f948 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	bf0c      	ite	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 864f 	beq.w	8007844 <cppLoop+0x1214>
			HAL_Delay(500);
 8006ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006baa:	f000 ffab 	bl	8007b04 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006bae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bb2:	483b      	ldr	r0, [pc, #236]	; (8006ca0 <cppLoop+0x670>)
 8006bb4:	f7fc f9ad 	bl	8002f12 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	482f      	ldr	r0, [pc, #188]	; (8006c7c <cppLoop+0x64c>)
 8006bc0:	f7fb fa50 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.setMode(1);
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4836      	ldr	r0, [pc, #216]	; (8006ca0 <cppLoop+0x670>)
 8006bc8:	f7fc fb60 	bl	800328c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006bcc:	4834      	ldr	r0, [pc, #208]	; (8006ca0 <cppLoop+0x670>)
 8006bce:	f7fc fa65 	bl	800309c <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4828      	ldr	r0, [pc, #160]	; (8006c7c <cppLoop+0x64c>)
 8006bda:	f7fb fa43 	bl	8002064 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006bde:	f000 be31 	b.w	8007844 <cppLoop+0x1214>

	case 2:
		led.fullColor('G');
 8006be2:	2147      	movs	r1, #71	; 0x47
 8006be4:	4825      	ldr	r0, [pc, #148]	; (8006c7c <cppLoop+0x64c>)
 8006be6:	f7fb f981 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006bea:	f7fa fa59 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006bee:	2100      	movs	r1, #0
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f7fa fa65 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006bf6:	482b      	ldr	r0, [pc, #172]	; (8006ca4 <cppLoop+0x674>)
 8006bf8:	f7fa fa8c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f7fa fa5e 	bl	80010c0 <lcd_locate>
		lcd_printf("update");
 8006c04:	4829      	ldr	r0, [pc, #164]	; (8006cac <cppLoop+0x67c>)
 8006c06:	f7fa fa85 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c0a:	481b      	ldr	r0, [pc, #108]	; (8006c78 <cppLoop+0x648>)
 8006c0c:	f7fb f90a 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8613 	beq.w	8007848 <cppLoop+0x1218>
			HAL_Delay(500);
 8006c22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c26:	f000 ff6d 	bl	8007b04 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006c2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c2e:	481c      	ldr	r0, [pc, #112]	; (8006ca0 <cppLoop+0x670>)
 8006c30:	f7fc f96f 	bl	8002f12 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006c34:	f04f 32ff 	mov.w	r2, #4294967295
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4810      	ldr	r0, [pc, #64]	; (8006c7c <cppLoop+0x64c>)
 8006c3c:	f7fb fa12 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.setMode(2);
 8006c40:	2102      	movs	r1, #2
 8006c42:	4817      	ldr	r0, [pc, #92]	; (8006ca0 <cppLoop+0x670>)
 8006c44:	f7fc fb22 	bl	800328c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006c48:	4815      	ldr	r0, [pc, #84]	; (8006ca0 <cppLoop+0x670>)
 8006c4a:	f7fc fa27 	bl	800309c <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c52:	2100      	movs	r1, #0
 8006c54:	4809      	ldr	r0, [pc, #36]	; (8006c7c <cppLoop+0x64c>)
 8006c56:	f7fb fa05 	bl	8002064 <_ZN3LED2LREaa>

			//logger.stop();
		}
		break;
 8006c5a:	f000 bdf5 	b.w	8007848 <cppLoop+0x1218>
 8006c5e:	bf00      	nop
 8006c60:	88e368f1 	.word	0x88e368f1
 8006c64:	3ee4f8b5 	.word	0x3ee4f8b5
 8006c68:	eb1c432d 	.word	0xeb1c432d
 8006c6c:	3f1a36e2 	.word	0x3f1a36e2
 8006c70:	a0b5ed8d 	.word	0xa0b5ed8d
 8006c74:	3eb0c6f7 	.word	0x3eb0c6f7
 8006c78:	200005a4 	.word	0x200005a4
 8006c7c:	200005b0 	.word	0x200005b0
 8006c80:	200335b6 	.word	0x200335b6
 8006c84:	200335b8 	.word	0x200335b8
 8006c88:	200335c0 	.word	0x200335c0
 8006c8c:	200335c8 	.word	0x200335c8
 8006c90:	08018850 	.word	0x08018850
 8006c94:	08018858 	.word	0x08018858
 8006c98:	08018860 	.word	0x08018860
 8006c9c:	08018868 	.word	0x08018868
 8006ca0:	20015e38 	.word	0x20015e38
 8006ca4:	08018870 	.word	0x08018870
 8006ca8:	0801887c 	.word	0x0801887c
 8006cac:	08018884 	.word	0x08018884

	case 3:
		led.fullColor('M');
 8006cb0:	214d      	movs	r1, #77	; 0x4d
 8006cb2:	48af      	ldr	r0, [pc, #700]	; (8006f70 <cppLoop+0x940>)
 8006cb4:	f7fb f91a 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006cb8:	f7fa f9f2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f7fa f9fe 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006cc4:	48ab      	ldr	r0, [pc, #684]	; (8006f74 <cppLoop+0x944>)
 8006cc6:	f7fa fa25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006cca:	2101      	movs	r1, #1
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f7fa f9f7 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006cd2:	48a9      	ldr	r0, [pc, #676]	; (8006f78 <cppLoop+0x948>)
 8006cd4:	f7fa fa1e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006cd8:	48a8      	ldr	r0, [pc, #672]	; (8006f7c <cppLoop+0x94c>)
 8006cda:	f7fb f8a3 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 85ae 	beq.w	800784c <cppLoop+0x121c>
			led.LR(-1, 1);
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf6:	489e      	ldr	r0, [pc, #632]	; (8006f70 <cppLoop+0x940>)
 8006cf8:	f7fb f9b4 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d00:	f000 ff00 	bl	8007b04 <HAL_Delay>

			logger.start();
 8006d04:	489e      	ldr	r0, [pc, #632]	; (8006f80 <cppLoop+0x950>)
 8006d06:	f7fc fd16 	bl	8003736 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006d0a:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006f84 <cppLoop+0x954>
 8006d0e:	489e      	ldr	r0, [pc, #632]	; (8006f88 <cppLoop+0x958>)
 8006d10:	f7fc f8f0 	bl	8002ef4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006d14:	489c      	ldr	r0, [pc, #624]	; (8006f88 <cppLoop+0x958>)
 8006d16:	f7fc f973 	bl	8003000 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006d1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8006d1e:	f000 fef1 	bl	8007b04 <HAL_Delay>

			logger.stop();
 8006d22:	4897      	ldr	r0, [pc, #604]	; (8006f80 <cppLoop+0x950>)
 8006d24:	f7fc fd18 	bl	8003758 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006d28:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006f84 <cppLoop+0x954>
 8006d2c:	4896      	ldr	r0, [pc, #600]	; (8006f88 <cppLoop+0x958>)
 8006d2e:	f7fc f8e1 	bl	8002ef4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006d32:	4895      	ldr	r0, [pc, #596]	; (8006f88 <cppLoop+0x958>)
 8006d34:	f7fc f97e 	bl	8003034 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006d38:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	488c      	ldr	r0, [pc, #560]	; (8006f70 <cppLoop+0x940>)
 8006d40:	f7fb f990 	bl	8002064 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4889      	ldr	r0, [pc, #548]	; (8006f70 <cppLoop+0x940>)
 8006d4c:	f7fb f98a 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006d50:	2200      	movs	r2, #0
 8006d52:	f04f 31ff 	mov.w	r1, #4294967295
 8006d56:	4886      	ldr	r0, [pc, #536]	; (8006f70 <cppLoop+0x940>)
 8006d58:	f7fb f984 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006d5c:	f000 bd76 	b.w	800784c <cppLoop+0x121c>

	case 4:
		led.fullColor('Y');
 8006d60:	2159      	movs	r1, #89	; 0x59
 8006d62:	4883      	ldr	r0, [pc, #524]	; (8006f70 <cppLoop+0x940>)
 8006d64:	f7fb f8c2 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d68:	f7fa f99a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f7fa f9a6 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006d74:	4885      	ldr	r0, [pc, #532]	; (8006f8c <cppLoop+0x95c>)
 8006d76:	f7fa f9cd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f7fa f99f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006d82:	487d      	ldr	r0, [pc, #500]	; (8006f78 <cppLoop+0x948>)
 8006d84:	f7fa f9c6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d88:	487c      	ldr	r0, [pc, #496]	; (8006f7c <cppLoop+0x94c>)
 8006d8a:	f7fb f84b 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	bf0c      	ite	eq
 8006d94:	2301      	moveq	r3, #1
 8006d96:	2300      	movne	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 8558 	beq.w	8007850 <cppLoop+0x1220>
			led.LR(-1, 1);
 8006da0:	2201      	movs	r2, #1
 8006da2:	f04f 31ff 	mov.w	r1, #4294967295
 8006da6:	4872      	ldr	r0, [pc, #456]	; (8006f70 <cppLoop+0x940>)
 8006da8:	f7fb f95c 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006db0:	f000 fea8 	bl	8007b04 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006db4:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006f84 <cppLoop+0x954>
 8006db8:	4873      	ldr	r0, [pc, #460]	; (8006f88 <cppLoop+0x958>)
 8006dba:	f7fc f8aa 	bl	8002f12 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006dbe:	4874      	ldr	r0, [pc, #464]	; (8006f90 <cppLoop+0x960>)
 8006dc0:	f7fd fc97 	bl	80046f2 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006dc4:	4870      	ldr	r0, [pc, #448]	; (8006f88 <cppLoop+0x958>)
 8006dc6:	f7fc f91b 	bl	8003000 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006dca:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dce:	f000 fe99 	bl	8007b04 <HAL_Delay>

			line_trace.stop();
 8006dd2:	486d      	ldr	r0, [pc, #436]	; (8006f88 <cppLoop+0x958>)
 8006dd4:	f7fc f92e 	bl	8003034 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006dd8:	486d      	ldr	r0, [pc, #436]	; (8006f90 <cppLoop+0x960>)
 8006dda:	f7fd fc9d 	bl	8004718 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f04f 31ff 	mov.w	r1, #4294967295
 8006de4:	4862      	ldr	r0, [pc, #392]	; (8006f70 <cppLoop+0x940>)
 8006de6:	f7fb f93d 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006dea:	f000 bd31 	b.w	8007850 <cppLoop+0x1220>

	case 5:
		led.fullColor('C');
 8006dee:	2143      	movs	r1, #67	; 0x43
 8006df0:	485f      	ldr	r0, [pc, #380]	; (8006f70 <cppLoop+0x940>)
 8006df2:	f7fb f87b 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006df6:	f7fa f953 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f7fa f95f 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006e02:	4864      	ldr	r0, [pc, #400]	; (8006f94 <cppLoop+0x964>)
 8006e04:	f7fa f986 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e08:	2101      	movs	r1, #1
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f7fa f958 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006e10:	4861      	ldr	r0, [pc, #388]	; (8006f98 <cppLoop+0x968>)
 8006e12:	f7fa f97f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006e16:	4859      	ldr	r0, [pc, #356]	; (8006f7c <cppLoop+0x94c>)
 8006e18:	f7fb f804 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	bf0c      	ite	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	2300      	movne	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8513 	beq.w	8007854 <cppLoop+0x1224>
			led.LR(-1, 1);
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f04f 31ff 	mov.w	r1, #4294967295
 8006e34:	484e      	ldr	r0, [pc, #312]	; (8006f70 <cppLoop+0x940>)
 8006e36:	f7fb f915 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006e3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e3e:	f000 fe61 	bl	8007b04 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006e42:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006f9c <cppLoop+0x96c>
 8006e46:	4850      	ldr	r0, [pc, #320]	; (8006f88 <cppLoop+0x958>)
 8006e48:	f7fc f854 	bl	8002ef4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006e4c:	484e      	ldr	r0, [pc, #312]	; (8006f88 <cppLoop+0x958>)
 8006e4e:	f7fc f8d7 	bl	8003000 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006e52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e56:	f000 fe55 	bl	8007b04 <HAL_Delay>

			led.fullColor('R');
 8006e5a:	2152      	movs	r1, #82	; 0x52
 8006e5c:	4844      	ldr	r0, [pc, #272]	; (8006f70 <cppLoop+0x940>)
 8006e5e:	f7fb f845 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006e62:	484f      	ldr	r0, [pc, #316]	; (8006fa0 <cppLoop+0x970>)
 8006e64:	f7fa fb18 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006e68:	484d      	ldr	r0, [pc, #308]	; (8006fa0 <cppLoop+0x970>)
 8006e6a:	f7fa fae5 	bl	8001438 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006e6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e72:	f000 fe47 	bl	8007b04 <HAL_Delay>

			line_trace.stop();
 8006e76:	4844      	ldr	r0, [pc, #272]	; (8006f88 <cppLoop+0x958>)
 8006e78:	f7fc f8dc 	bl	8003034 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006e7c:	4949      	ldr	r1, [pc, #292]	; (8006fa4 <cppLoop+0x974>)
 8006e7e:	484a      	ldr	r0, [pc, #296]	; (8006fa8 <cppLoop+0x978>)
 8006e80:	f7fa fb3d 	bl	80014fe <user_fopen>
			float d = encoder.getDistance();
 8006e84:	4846      	ldr	r0, [pc, #280]	; (8006fa0 <cppLoop+0x970>)
 8006e86:	f7fa fab9 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8006e8a:	eef0 7a40 	vmov.f32	s15, s0
 8006e8e:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006e92:	f107 0310 	add.w	r3, r7, #16
 8006e96:	2201      	movs	r2, #1
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	f7fa fb52 	bl	8001544 <sd_write_float>
			user_fclose();
 8006ea0:	f7fa fb40 	bl	8001524 <user_fclose>

			led.LR(-1, 0);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8006eaa:	4831      	ldr	r0, [pc, #196]	; (8006f70 <cppLoop+0x940>)
 8006eac:	f7fb f8da 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006eb0:	f000 bcd0 	b.w	8007854 <cppLoop+0x1224>

	case 6:
		led.fullColor('R');
 8006eb4:	2152      	movs	r1, #82	; 0x52
 8006eb6:	482e      	ldr	r0, [pc, #184]	; (8006f70 <cppLoop+0x940>)
 8006eb8:	f7fb f818 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ebc:	f7fa f8f0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7fa f8fc 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006ec8:	4838      	ldr	r0, [pc, #224]	; (8006fac <cppLoop+0x97c>)
 8006eca:	f7fa f923 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ece:	2101      	movs	r1, #1
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	f7fa f8f5 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006ed6:	4836      	ldr	r0, [pc, #216]	; (8006fb0 <cppLoop+0x980>)
 8006ed8:	f7fa f91c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006edc:	4827      	ldr	r0, [pc, #156]	; (8006f7c <cppLoop+0x94c>)
 8006ede:	f7fa ffa1 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 84b2 	beq.w	8007858 <cppLoop+0x1228>
			HAL_Delay(500);
 8006ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ef8:	f000 fe04 	bl	8007b04 <HAL_Delay>
			led.LR(-1, 1);
 8006efc:	2201      	movs	r2, #1
 8006efe:	f04f 31ff 	mov.w	r1, #4294967295
 8006f02:	481b      	ldr	r0, [pc, #108]	; (8006f70 <cppLoop+0x940>)
 8006f04:	f7fb f8ae 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006f08:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006fb4 <cppLoop+0x984>
 8006f0c:	481e      	ldr	r0, [pc, #120]	; (8006f88 <cppLoop+0x958>)
 8006f0e:	f7fb fff1 	bl	8002ef4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006f12:	481d      	ldr	r0, [pc, #116]	; (8006f88 <cppLoop+0x958>)
 8006f14:	f7fc f874 	bl	8003000 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f1c:	f000 fdf2 	bl	8007b04 <HAL_Delay>

			led.fullColor('R');
 8006f20:	2152      	movs	r1, #82	; 0x52
 8006f22:	4813      	ldr	r0, [pc, #76]	; (8006f70 <cppLoop+0x940>)
 8006f24:	f7fa ffe2 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006f28:	481d      	ldr	r0, [pc, #116]	; (8006fa0 <cppLoop+0x970>)
 8006f2a:	f7fa fab5 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006f2e:	481c      	ldr	r0, [pc, #112]	; (8006fa0 <cppLoop+0x970>)
 8006f30:	f7fa fa82 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006f34:	4820      	ldr	r0, [pc, #128]	; (8006fb8 <cppLoop+0x988>)
 8006f36:	f7fc fe67 	bl	8003c08 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006f3a:	4811      	ldr	r0, [pc, #68]	; (8006f80 <cppLoop+0x950>)
 8006f3c:	f7fc fbfb 	bl	8003736 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006f40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006f44:	f000 fdde 	bl	8007b04 <HAL_Delay>

			line_trace.stop();
 8006f48:	480f      	ldr	r0, [pc, #60]	; (8006f88 <cppLoop+0x958>)
 8006f4a:	f7fc f873 	bl	8003034 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006f4e:	480c      	ldr	r0, [pc, #48]	; (8006f80 <cppLoop+0x950>)
 8006f50:	f7fc fc02 	bl	8003758 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <cppLoop+0x98c>)
 8006f56:	4a1a      	ldr	r2, [pc, #104]	; (8006fc0 <cppLoop+0x990>)
 8006f58:	491a      	ldr	r1, [pc, #104]	; (8006fc4 <cppLoop+0x994>)
 8006f5a:	4809      	ldr	r0, [pc, #36]	; (8006f80 <cppLoop+0x950>)
 8006f5c:	f7fc fb2e 	bl	80035bc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006f60:	2200      	movs	r2, #0
 8006f62:	f04f 31ff 	mov.w	r1, #4294967295
 8006f66:	4802      	ldr	r0, [pc, #8]	; (8006f70 <cppLoop+0x940>)
 8006f68:	f7fb f87c 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006f6c:	f000 bc74 	b.w	8007858 <cppLoop+0x1228>
 8006f70:	200005b0 	.word	0x200005b0
 8006f74:	0801888c 	.word	0x0801888c
 8006f78:	08018894 	.word	0x08018894
 8006f7c:	200005a4 	.word	0x200005a4
 8006f80:	200005d4 	.word	0x200005d4
 8006f84:	3dcccccd 	.word	0x3dcccccd
 8006f88:	20015e38 	.word	0x20015e38
 8006f8c:	0801889c 	.word	0x0801889c
 8006f90:	20015db8 	.word	0x20015db8
 8006f94:	080188a8 	.word	0x080188a8
 8006f98:	080188b0 	.word	0x080188b0
 8006f9c:	00000000 	.word	0x00000000
 8006fa0:	20015d9c 	.word	0x20015d9c
 8006fa4:	080188bc 	.word	0x080188bc
 8006fa8:	080188c4 	.word	0x080188c4
 8006fac:	080188d0 	.word	0x080188d0
 8006fb0:	080188dc 	.word	0x080188dc
 8006fb4:	3d8f5c29 	.word	0x3d8f5c29
 8006fb8:	20015df8 	.word	0x20015df8
 8006fbc:	080188e4 	.word	0x080188e4
 8006fc0:	080188f0 	.word	0x080188f0
 8006fc4:	080188fc 	.word	0x080188fc

	case 7:
		led.fullColor('G');
 8006fc8:	2147      	movs	r1, #71	; 0x47
 8006fca:	48b3      	ldr	r0, [pc, #716]	; (8007298 <cppLoop+0xc68>)
 8006fcc:	f7fa ff8e 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006fd0:	f7fa f866 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f7fa f872 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006fdc:	48af      	ldr	r0, [pc, #700]	; (800729c <cppLoop+0xc6c>)
 8006fde:	f7fa f899 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	f7fa f86b 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006fea:	48ad      	ldr	r0, [pc, #692]	; (80072a0 <cppLoop+0xc70>)
 8006fec:	f7fa f892 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ff0:	48ac      	ldr	r0, [pc, #688]	; (80072a4 <cppLoop+0xc74>)
 8006ff2:	f7fa ff17 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 842a 	beq.w	800785c <cppLoop+0x122c>
			led.LR(-1, 1);
 8007008:	2201      	movs	r2, #1
 800700a:	f04f 31ff 	mov.w	r1, #4294967295
 800700e:	48a2      	ldr	r0, [pc, #648]	; (8007298 <cppLoop+0xc68>)
 8007010:	f7fb f828 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8007014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007018:	f000 fd74 	bl	8007b04 <HAL_Delay>

			led.fullColor('R');
 800701c:	2152      	movs	r1, #82	; 0x52
 800701e:	489e      	ldr	r0, [pc, #632]	; (8007298 <cppLoop+0xc68>)
 8007020:	f7fa ff64 	bl	8001eec <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8007024:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80072a8 <cppLoop+0xc78>
 8007028:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80072ac <cppLoop+0xc7c>
 800702c:	48a0      	ldr	r0, [pc, #640]	; (80072b0 <cppLoop+0xc80>)
 800702e:	f7fd faf3 	bl	8004618 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8007032:	489f      	ldr	r0, [pc, #636]	; (80072b0 <cppLoop+0xc80>)
 8007034:	f7fd fb5d 	bl	80046f2 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8007038:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800703c:	f000 fd62 	bl	8007b04 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8007040:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80072ac <cppLoop+0xc7c>
 8007044:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80072ac <cppLoop+0xc7c>
 8007048:	4899      	ldr	r0, [pc, #612]	; (80072b0 <cppLoop+0xc80>)
 800704a:	f7fd fae5 	bl	8004618 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 800704e:	2064      	movs	r0, #100	; 0x64
 8007050:	f000 fd58 	bl	8007b04 <HAL_Delay>
			velocity_ctrl.stop();
 8007054:	4896      	ldr	r0, [pc, #600]	; (80072b0 <cppLoop+0xc80>)
 8007056:	f7fd fb5f 	bl	8004718 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 800705a:	2200      	movs	r2, #0
 800705c:	f04f 31ff 	mov.w	r1, #4294967295
 8007060:	488d      	ldr	r0, [pc, #564]	; (8007298 <cppLoop+0xc68>)
 8007062:	f7fa ffff 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8007066:	e3f9      	b.n	800785c <cppLoop+0x122c>

	case 8:
		led.fullColor('B');
 8007068:	2142      	movs	r1, #66	; 0x42
 800706a:	488b      	ldr	r0, [pc, #556]	; (8007298 <cppLoop+0xc68>)
 800706c:	f7fa ff3e 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007070:	f7fa f816 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007074:	2100      	movs	r1, #0
 8007076:	2000      	movs	r0, #0
 8007078:	f7fa f822 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 800707c:	488d      	ldr	r0, [pc, #564]	; (80072b4 <cppLoop+0xc84>)
 800707e:	f7fc feb9 	bl	8003df4 <_ZN13PathFollowing8getKxValEv>
 8007082:	ec51 0b10 	vmov	r0, r1, d0
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	4b8b      	ldr	r3, [pc, #556]	; (80072b8 <cppLoop+0xc88>)
 800708c:	f7f9 facc 	bl	8000628 <__aeabi_dmul>
 8007090:	4603      	mov	r3, r0
 8007092:	460c      	mov	r4, r1
 8007094:	461a      	mov	r2, r3
 8007096:	4623      	mov	r3, r4
 8007098:	4888      	ldr	r0, [pc, #544]	; (80072bc <cppLoop+0xc8c>)
 800709a:	f7fa f83b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800709e:	2101      	movs	r1, #1
 80070a0:	2000      	movs	r0, #0
 80070a2:	f7fa f80d 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 80070a6:	4883      	ldr	r0, [pc, #524]	; (80072b4 <cppLoop+0xc84>)
 80070a8:	f7fc feb8 	bl	8003e1c <_ZN13PathFollowing8getKyValEv>
 80070ac:	ec51 0b10 	vmov	r0, r1, d0
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	4b80      	ldr	r3, [pc, #512]	; (80072b8 <cppLoop+0xc88>)
 80070b6:	f7f9 fab7 	bl	8000628 <__aeabi_dmul>
 80070ba:	4603      	mov	r3, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	461d      	mov	r5, r3
 80070c0:	4626      	mov	r6, r4
 80070c2:	487c      	ldr	r0, [pc, #496]	; (80072b4 <cppLoop+0xc84>)
 80070c4:	f7fc febe 	bl	8003e44 <_ZN13PathFollowing8getKtValEv>
 80070c8:	ec51 0b10 	vmov	r0, r1, d0
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	4b79      	ldr	r3, [pc, #484]	; (80072b8 <cppLoop+0xc88>)
 80070d2:	f7f9 faa9 	bl	8000628 <__aeabi_dmul>
 80070d6:	4603      	mov	r3, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	e9cd 3400 	strd	r3, r4, [sp]
 80070de:	462a      	mov	r2, r5
 80070e0:	4633      	mov	r3, r6
 80070e2:	4877      	ldr	r0, [pc, #476]	; (80072c0 <cppLoop+0xc90>)
 80070e4:	f7fa f816 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 80070e8:	4b76      	ldr	r3, [pc, #472]	; (80072c4 <cppLoop+0xc94>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f3bf 8f5b 	dmb	ish
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d019      	beq.n	8007138 <cppLoop+0xb08>
 8007104:	486f      	ldr	r0, [pc, #444]	; (80072c4 <cppLoop+0xc94>)
 8007106:	f00b f9fa 	bl	80124fe <__cxa_guard_acquire>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <cppLoop+0xb08>
 800711a:	4866      	ldr	r0, [pc, #408]	; (80072b4 <cppLoop+0xc84>)
 800711c:	f7fc fe6a 	bl	8003df4 <_ZN13PathFollowing8getKxValEv>
 8007120:	ec54 3b10 	vmov	r3, r4, d0
 8007124:	4618      	mov	r0, r3
 8007126:	4621      	mov	r1, r4
 8007128:	f7f9 fd76 	bl	8000c18 <__aeabi_d2f>
 800712c:	4602      	mov	r2, r0
 800712e:	4b66      	ldr	r3, [pc, #408]	; (80072c8 <cppLoop+0xc98>)
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	4864      	ldr	r0, [pc, #400]	; (80072c4 <cppLoop+0xc94>)
 8007134:	f00b f9ef 	bl	8012516 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8007138:	4b64      	ldr	r3, [pc, #400]	; (80072cc <cppLoop+0xc9c>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f3bf 8f5b 	dmb	ish
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf0c      	ite	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	2300      	movne	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d019      	beq.n	8007188 <cppLoop+0xb58>
 8007154:	485d      	ldr	r0, [pc, #372]	; (80072cc <cppLoop+0xc9c>)
 8007156:	f00b f9d2 	bl	80124fe <__cxa_guard_acquire>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <cppLoop+0xb58>
 800716a:	4852      	ldr	r0, [pc, #328]	; (80072b4 <cppLoop+0xc84>)
 800716c:	f7fc fe56 	bl	8003e1c <_ZN13PathFollowing8getKyValEv>
 8007170:	ec54 3b10 	vmov	r3, r4, d0
 8007174:	4618      	mov	r0, r3
 8007176:	4621      	mov	r1, r4
 8007178:	f7f9 fd4e 	bl	8000c18 <__aeabi_d2f>
 800717c:	4602      	mov	r2, r0
 800717e:	4b54      	ldr	r3, [pc, #336]	; (80072d0 <cppLoop+0xca0>)
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	4852      	ldr	r0, [pc, #328]	; (80072cc <cppLoop+0xc9c>)
 8007184:	f00b f9c7 	bl	8012516 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8007188:	4b52      	ldr	r3, [pc, #328]	; (80072d4 <cppLoop+0xca4>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f3bf 8f5b 	dmb	ish
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	bf0c      	ite	eq
 800719a:	2301      	moveq	r3, #1
 800719c:	2300      	movne	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d019      	beq.n	80071d8 <cppLoop+0xba8>
 80071a4:	484b      	ldr	r0, [pc, #300]	; (80072d4 <cppLoop+0xca4>)
 80071a6:	f00b f9aa 	bl	80124fe <__cxa_guard_acquire>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf14      	ite	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	2300      	moveq	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00e      	beq.n	80071d8 <cppLoop+0xba8>
 80071ba:	483e      	ldr	r0, [pc, #248]	; (80072b4 <cppLoop+0xc84>)
 80071bc:	f7fc fe42 	bl	8003e44 <_ZN13PathFollowing8getKtValEv>
 80071c0:	ec54 3b10 	vmov	r3, r4, d0
 80071c4:	4618      	mov	r0, r3
 80071c6:	4621      	mov	r1, r4
 80071c8:	f7f9 fd26 	bl	8000c18 <__aeabi_d2f>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b42      	ldr	r3, [pc, #264]	; (80072d8 <cppLoop+0xca8>)
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	4840      	ldr	r0, [pc, #256]	; (80072d4 <cppLoop+0xca4>)
 80071d4:	f00b f99f 	bl	8012516 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80071d8:	4832      	ldr	r0, [pc, #200]	; (80072a4 <cppLoop+0xc74>)
 80071da:	f7fa fe23 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	bf0c      	ite	eq
 80071e4:	2301      	moveq	r3, #1
 80071e6:	2300      	movne	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d021      	beq.n	8007232 <cppLoop+0xc02>
			led.LR(-1, 1);
 80071ee:	2201      	movs	r2, #1
 80071f0:	f04f 31ff 	mov.w	r1, #4294967295
 80071f4:	4828      	ldr	r0, [pc, #160]	; (8007298 <cppLoop+0xc68>)
 80071f6:	f7fa ff35 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80071fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80071fe:	f000 fc81 	bl	8007b04 <HAL_Delay>

			selector++;
 8007202:	4b36      	ldr	r3, [pc, #216]	; (80072dc <cppLoop+0xcac>)
 8007204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007208:	b29b      	uxth	r3, r3
 800720a:	3301      	adds	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	b21a      	sxth	r2, r3
 8007210:	4b32      	ldr	r3, [pc, #200]	; (80072dc <cppLoop+0xcac>)
 8007212:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007214:	4b31      	ldr	r3, [pc, #196]	; (80072dc <cppLoop+0xcac>)
 8007216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800721a:	2b02      	cmp	r3, #2
 800721c:	dd02      	ble.n	8007224 <cppLoop+0xbf4>
 800721e:	4b2f      	ldr	r3, [pc, #188]	; (80072dc <cppLoop+0xcac>)
 8007220:	2200      	movs	r2, #0
 8007222:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007224:	2200      	movs	r2, #0
 8007226:	f04f 31ff 	mov.w	r1, #4294967295
 800722a:	481b      	ldr	r0, [pc, #108]	; (8007298 <cppLoop+0xc68>)
 800722c:	f7fa ff1a 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8007230:	e316      	b.n	8007860 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_R){
 8007232:	481c      	ldr	r0, [pc, #112]	; (80072a4 <cppLoop+0xc74>)
 8007234:	f7fa fdf6 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007238:	4603      	mov	r3, r0
 800723a:	2b10      	cmp	r3, #16
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8082 	beq.w	800734e <cppLoop+0xd1e>
			led.LR(-1, 1);
 800724a:	2201      	movs	r2, #1
 800724c:	f04f 31ff 	mov.w	r1, #4294967295
 8007250:	4811      	ldr	r0, [pc, #68]	; (8007298 <cppLoop+0xc68>)
 8007252:	f7fa ff07 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007256:	2064      	movs	r0, #100	; 0x64
 8007258:	f000 fc54 	bl	8007b04 <HAL_Delay>
			if(selector == 0){
 800725c:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <cppLoop+0xcac>)
 800725e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d13c      	bne.n	80072e0 <cppLoop+0xcb0>
				adj_kx = adj_kx + 0.00001;
 8007266:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <cppLoop+0xc98>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f984 	bl	8000578 <__aeabi_f2d>
 8007270:	a307      	add	r3, pc, #28	; (adr r3, 8007290 <cppLoop+0xc60>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f821 	bl	80002bc <__adddf3>
 800727a:	4603      	mov	r3, r0
 800727c:	460c      	mov	r4, r1
 800727e:	4618      	mov	r0, r3
 8007280:	4621      	mov	r1, r4
 8007282:	f7f9 fcc9 	bl	8000c18 <__aeabi_d2f>
 8007286:	4602      	mov	r2, r0
 8007288:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <cppLoop+0xc98>)
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e054      	b.n	8007338 <cppLoop+0xd08>
 800728e:	bf00      	nop
 8007290:	88e368f1 	.word	0x88e368f1
 8007294:	3ee4f8b5 	.word	0x3ee4f8b5
 8007298:	200005b0 	.word	0x200005b0
 800729c:	08018900 	.word	0x08018900
 80072a0:	0801890c 	.word	0x0801890c
 80072a4:	200005a4 	.word	0x200005a4
 80072a8:	3fc8f5c3 	.word	0x3fc8f5c3
 80072ac:	00000000 	.word	0x00000000
 80072b0:	20015db8 	.word	0x20015db8
 80072b4:	2001be88 	.word	0x2001be88
 80072b8:	408f4000 	.word	0x408f4000
 80072bc:	08018834 	.word	0x08018834
 80072c0:	08018840 	.word	0x08018840
 80072c4:	200335d4 	.word	0x200335d4
 80072c8:	200335d0 	.word	0x200335d0
 80072cc:	200335dc 	.word	0x200335dc
 80072d0:	200335d8 	.word	0x200335d8
 80072d4:	200335e4 	.word	0x200335e4
 80072d8:	200335e0 	.word	0x200335e0
 80072dc:	200335b6 	.word	0x200335b6
			else if(selector == 1){
 80072e0:	4ba3      	ldr	r3, [pc, #652]	; (8007570 <cppLoop+0xf40>)
 80072e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d113      	bne.n	8007312 <cppLoop+0xce2>
				adj_ky = adj_ky + 0.00001;
 80072ea:	4ba2      	ldr	r3, [pc, #648]	; (8007574 <cppLoop+0xf44>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f9 f942 	bl	8000578 <__aeabi_f2d>
 80072f4:	a39c      	add	r3, pc, #624	; (adr r3, 8007568 <cppLoop+0xf38>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ffdf 	bl	80002bc <__adddf3>
 80072fe:	4603      	mov	r3, r0
 8007300:	460c      	mov	r4, r1
 8007302:	4618      	mov	r0, r3
 8007304:	4621      	mov	r1, r4
 8007306:	f7f9 fc87 	bl	8000c18 <__aeabi_d2f>
 800730a:	4602      	mov	r2, r0
 800730c:	4b99      	ldr	r3, [pc, #612]	; (8007574 <cppLoop+0xf44>)
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e012      	b.n	8007338 <cppLoop+0xd08>
				adj_kt = adj_kt + 0.00001;
 8007312:	4b99      	ldr	r3, [pc, #612]	; (8007578 <cppLoop+0xf48>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f92e 	bl	8000578 <__aeabi_f2d>
 800731c:	a392      	add	r3, pc, #584	; (adr r3, 8007568 <cppLoop+0xf38>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7f8 ffcb 	bl	80002bc <__adddf3>
 8007326:	4603      	mov	r3, r0
 8007328:	460c      	mov	r4, r1
 800732a:	4618      	mov	r0, r3
 800732c:	4621      	mov	r1, r4
 800732e:	f7f9 fc73 	bl	8000c18 <__aeabi_d2f>
 8007332:	4602      	mov	r2, r0
 8007334:	4b90      	ldr	r3, [pc, #576]	; (8007578 <cppLoop+0xf48>)
 8007336:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007338:	2152      	movs	r1, #82	; 0x52
 800733a:	4890      	ldr	r0, [pc, #576]	; (800757c <cppLoop+0xf4c>)
 800733c:	f7fa fdd6 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007340:	2200      	movs	r2, #0
 8007342:	f04f 31ff 	mov.w	r1, #4294967295
 8007346:	488d      	ldr	r0, [pc, #564]	; (800757c <cppLoop+0xf4c>)
 8007348:	f7fa fe8c 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800734c:	e288      	b.n	8007860 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_L){
 800734e:	488c      	ldr	r0, [pc, #560]	; (8007580 <cppLoop+0xf50>)
 8007350:	f7fa fd68 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007354:	4603      	mov	r3, r0
 8007356:	2b01      	cmp	r3, #1
 8007358:	bf0c      	ite	eq
 800735a:	2301      	moveq	r3, #1
 800735c:	2300      	movne	r3, #0
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d058      	beq.n	8007416 <cppLoop+0xde6>
			led.LR(-1, 1);
 8007364:	2201      	movs	r2, #1
 8007366:	f04f 31ff 	mov.w	r1, #4294967295
 800736a:	4884      	ldr	r0, [pc, #528]	; (800757c <cppLoop+0xf4c>)
 800736c:	f7fa fe7a 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007370:	2064      	movs	r0, #100	; 0x64
 8007372:	f000 fbc7 	bl	8007b04 <HAL_Delay>
			if(selector == 0){
 8007376:	4b7e      	ldr	r3, [pc, #504]	; (8007570 <cppLoop+0xf40>)
 8007378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d113      	bne.n	80073a8 <cppLoop+0xd78>
				adj_kx = adj_kx - 0.00001;
 8007380:	4b80      	ldr	r3, [pc, #512]	; (8007584 <cppLoop+0xf54>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7f9 f8f7 	bl	8000578 <__aeabi_f2d>
 800738a:	a377      	add	r3, pc, #476	; (adr r3, 8007568 <cppLoop+0xf38>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff92 	bl	80002b8 <__aeabi_dsub>
 8007394:	4603      	mov	r3, r0
 8007396:	460c      	mov	r4, r1
 8007398:	4618      	mov	r0, r3
 800739a:	4621      	mov	r1, r4
 800739c:	f7f9 fc3c 	bl	8000c18 <__aeabi_d2f>
 80073a0:	4602      	mov	r2, r0
 80073a2:	4b78      	ldr	r3, [pc, #480]	; (8007584 <cppLoop+0xf54>)
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	e02b      	b.n	8007400 <cppLoop+0xdd0>
			else if(selector == 1){
 80073a8:	4b71      	ldr	r3, [pc, #452]	; (8007570 <cppLoop+0xf40>)
 80073aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d113      	bne.n	80073da <cppLoop+0xdaa>
				adj_ky = adj_ky - 0.00001;
 80073b2:	4b70      	ldr	r3, [pc, #448]	; (8007574 <cppLoop+0xf44>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7f9 f8de 	bl	8000578 <__aeabi_f2d>
 80073bc:	a36a      	add	r3, pc, #424	; (adr r3, 8007568 <cppLoop+0xf38>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 ff79 	bl	80002b8 <__aeabi_dsub>
 80073c6:	4603      	mov	r3, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	4618      	mov	r0, r3
 80073cc:	4621      	mov	r1, r4
 80073ce:	f7f9 fc23 	bl	8000c18 <__aeabi_d2f>
 80073d2:	4602      	mov	r2, r0
 80073d4:	4b67      	ldr	r3, [pc, #412]	; (8007574 <cppLoop+0xf44>)
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e012      	b.n	8007400 <cppLoop+0xdd0>
				adj_kt = adj_kt - 0.00001;
 80073da:	4b67      	ldr	r3, [pc, #412]	; (8007578 <cppLoop+0xf48>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7f9 f8ca 	bl	8000578 <__aeabi_f2d>
 80073e4:	a360      	add	r3, pc, #384	; (adr r3, 8007568 <cppLoop+0xf38>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f8 ff65 	bl	80002b8 <__aeabi_dsub>
 80073ee:	4603      	mov	r3, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	4618      	mov	r0, r3
 80073f4:	4621      	mov	r1, r4
 80073f6:	f7f9 fc0f 	bl	8000c18 <__aeabi_d2f>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b5e      	ldr	r3, [pc, #376]	; (8007578 <cppLoop+0xf48>)
 80073fe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007400:	2152      	movs	r1, #82	; 0x52
 8007402:	485e      	ldr	r0, [pc, #376]	; (800757c <cppLoop+0xf4c>)
 8007404:	f7fa fd72 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007408:	2200      	movs	r2, #0
 800740a:	f04f 31ff 	mov.w	r1, #4294967295
 800740e:	485b      	ldr	r0, [pc, #364]	; (800757c <cppLoop+0xf4c>)
 8007410:	f7fa fe28 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8007414:	e224      	b.n	8007860 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_D){
 8007416:	485a      	ldr	r0, [pc, #360]	; (8007580 <cppLoop+0xf50>)
 8007418:	f7fa fd04 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800741c:	4603      	mov	r3, r0
 800741e:	2b04      	cmp	r3, #4
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d048      	beq.n	80074be <cppLoop+0xe8e>
			led.LR(-1, 1);
 800742c:	2201      	movs	r2, #1
 800742e:	f04f 31ff 	mov.w	r1, #4294967295
 8007432:	4852      	ldr	r0, [pc, #328]	; (800757c <cppLoop+0xf4c>)
 8007434:	f7fa fe16 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007438:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800743c:	f000 fb62 	bl	8007b04 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8007440:	f107 030c 	add.w	r3, r7, #12
 8007444:	2201      	movs	r2, #1
 8007446:	4950      	ldr	r1, [pc, #320]	; (8007588 <cppLoop+0xf58>)
 8007448:	4850      	ldr	r0, [pc, #320]	; (800758c <cppLoop+0xf5c>)
 800744a:	f7fa f933 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 800744e:	f107 0308 	add.w	r3, r7, #8
 8007452:	2201      	movs	r2, #1
 8007454:	494e      	ldr	r1, [pc, #312]	; (8007590 <cppLoop+0xf60>)
 8007456:	484d      	ldr	r0, [pc, #308]	; (800758c <cppLoop+0xf5c>)
 8007458:	f7fa f92c 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 800745c:	1d3b      	adds	r3, r7, #4
 800745e:	2201      	movs	r2, #1
 8007460:	494c      	ldr	r1, [pc, #304]	; (8007594 <cppLoop+0xf64>)
 8007462:	484a      	ldr	r0, [pc, #296]	; (800758c <cppLoop+0xf5c>)
 8007464:	f7fa f926 	bl	80016b4 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	f7f9 f884 	bl	8000578 <__aeabi_f2d>
 8007470:	4604      	mov	r4, r0
 8007472:	460d      	mov	r5, r1
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4618      	mov	r0, r3
 8007478:	f7f9 f87e 	bl	8000578 <__aeabi_f2d>
 800747c:	4680      	mov	r8, r0
 800747e:	4689      	mov	r9, r1
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	f7f9 f878 	bl	8000578 <__aeabi_f2d>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	ec43 2b12 	vmov	d2, r2, r3
 8007490:	ec49 8b11 	vmov	d1, r8, r9
 8007494:	ec45 4b10 	vmov	d0, r4, r5
 8007498:	483f      	ldr	r0, [pc, #252]	; (8007598 <cppLoop+0xf68>)
 800749a:	f7fc fc8b 	bl	8003db4 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a38      	ldr	r2, [pc, #224]	; (8007584 <cppLoop+0xf54>)
 80074a2:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4a33      	ldr	r2, [pc, #204]	; (8007574 <cppLoop+0xf44>)
 80074a8:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a32      	ldr	r2, [pc, #200]	; (8007578 <cppLoop+0xf48>)
 80074ae:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80074b0:	2200      	movs	r2, #0
 80074b2:	f04f 31ff 	mov.w	r1, #4294967295
 80074b6:	4831      	ldr	r0, [pc, #196]	; (800757c <cppLoop+0xf4c>)
 80074b8:	f7fa fdd4 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80074bc:	e1d0      	b.n	8007860 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_C){
 80074be:	4830      	ldr	r0, [pc, #192]	; (8007580 <cppLoop+0xf50>)
 80074c0:	f7fa fcb0 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 81c5 	beq.w	8007860 <cppLoop+0x1230>
			led.LR(-1, 1);
 80074d6:	2201      	movs	r2, #1
 80074d8:	f04f 31ff 	mov.w	r1, #4294967295
 80074dc:	4827      	ldr	r0, [pc, #156]	; (800757c <cppLoop+0xf4c>)
 80074de:	f7fa fdc1 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80074e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80074e6:	f000 fb0d 	bl	8007b04 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 80074ea:	2300      	movs	r3, #0
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4b25      	ldr	r3, [pc, #148]	; (8007584 <cppLoop+0xf54>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	4925      	ldr	r1, [pc, #148]	; (8007588 <cppLoop+0xf58>)
 80074f4:	4825      	ldr	r0, [pc, #148]	; (800758c <cppLoop+0xf5c>)
 80074f6:	f7fa f877 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 80074fa:	2300      	movs	r3, #0
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <cppLoop+0xf44>)
 8007500:	2201      	movs	r2, #1
 8007502:	4923      	ldr	r1, [pc, #140]	; (8007590 <cppLoop+0xf60>)
 8007504:	4821      	ldr	r0, [pc, #132]	; (800758c <cppLoop+0xf5c>)
 8007506:	f7fa f86f 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 800750a:	2300      	movs	r3, #0
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <cppLoop+0xf48>)
 8007510:	2201      	movs	r2, #1
 8007512:	4920      	ldr	r1, [pc, #128]	; (8007594 <cppLoop+0xf64>)
 8007514:	481d      	ldr	r0, [pc, #116]	; (800758c <cppLoop+0xf5c>)
 8007516:	f7fa f867 	bl	80015e8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 800751a:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <cppLoop+0xf54>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f7f9 f82a 	bl	8000578 <__aeabi_f2d>
 8007524:	4604      	mov	r4, r0
 8007526:	460d      	mov	r5, r1
 8007528:	4b12      	ldr	r3, [pc, #72]	; (8007574 <cppLoop+0xf44>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4618      	mov	r0, r3
 800752e:	f7f9 f823 	bl	8000578 <__aeabi_f2d>
 8007532:	4680      	mov	r8, r0
 8007534:	4689      	mov	r9, r1
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <cppLoop+0xf48>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7f9 f81c 	bl	8000578 <__aeabi_f2d>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	ec43 2b12 	vmov	d2, r2, r3
 8007548:	ec49 8b11 	vmov	d1, r8, r9
 800754c:	ec45 4b10 	vmov	d0, r4, r5
 8007550:	4811      	ldr	r0, [pc, #68]	; (8007598 <cppLoop+0xf68>)
 8007552:	f7fc fc2f 	bl	8003db4 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8007556:	2200      	movs	r2, #0
 8007558:	f04f 31ff 	mov.w	r1, #4294967295
 800755c:	4807      	ldr	r0, [pc, #28]	; (800757c <cppLoop+0xf4c>)
 800755e:	f7fa fd81 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8007562:	e17d      	b.n	8007860 <cppLoop+0x1230>
 8007564:	f3af 8000 	nop.w
 8007568:	88e368f1 	.word	0x88e368f1
 800756c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007570:	200335b6 	.word	0x200335b6
 8007574:	200335d8 	.word	0x200335d8
 8007578:	200335e0 	.word	0x200335e0
 800757c:	200005b0 	.word	0x200005b0
 8007580:	200005a4 	.word	0x200005a4
 8007584:	200335d0 	.word	0x200335d0
 8007588:	08018914 	.word	0x08018914
 800758c:	08018858 	.word	0x08018858
 8007590:	0801891c 	.word	0x0801891c
 8007594:	08018924 	.word	0x08018924
 8007598:	2001be88 	.word	0x2001be88

	case 9:
		led.fullColor('M');
 800759c:	214d      	movs	r1, #77	; 0x4d
 800759e:	48c0      	ldr	r0, [pc, #768]	; (80078a0 <cppLoop+0x1270>)
 80075a0:	f7fa fca4 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80075a4:	f7f9 fd7c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075a8:	2100      	movs	r1, #0
 80075aa:	2000      	movs	r0, #0
 80075ac:	f7f9 fd88 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80075b0:	48bc      	ldr	r0, [pc, #752]	; (80078a4 <cppLoop+0x1274>)
 80075b2:	f7f9 fdaf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075b6:	2101      	movs	r1, #1
 80075b8:	2000      	movs	r0, #0
 80075ba:	f7f9 fd81 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80075be:	48ba      	ldr	r0, [pc, #744]	; (80078a8 <cppLoop+0x1278>)
 80075c0:	f7f9 fda8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80075c4:	48b9      	ldr	r0, [pc, #740]	; (80078ac <cppLoop+0x127c>)
 80075c6:	f7fa fc2d 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8144 	beq.w	8007864 <cppLoop+0x1234>
			HAL_Delay(1500);
 80075dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80075e0:	f000 fa90 	bl	8007b04 <HAL_Delay>
			led.LR(-1, 1);
 80075e4:	2201      	movs	r2, #1
 80075e6:	f04f 31ff 	mov.w	r1, #4294967295
 80075ea:	48ad      	ldr	r0, [pc, #692]	; (80078a0 <cppLoop+0x1270>)
 80075ec:	f7fa fd3a 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 80075f0:	48af      	ldr	r0, [pc, #700]	; (80078b0 <cppLoop+0x1280>)
 80075f2:	f7fc f8a0 	bl	8003736 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80075f6:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8007888 <cppLoop+0x1258>
 80075fa:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8007890 <cppLoop+0x1260>
 80075fe:	48ad      	ldr	r0, [pc, #692]	; (80078b4 <cppLoop+0x1284>)
 8007600:	f7fc f92e 	bl	8003860 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007608:	f000 fa7c 	bl	8007b04 <HAL_Delay>

			logger.stop();
 800760c:	48a8      	ldr	r0, [pc, #672]	; (80078b0 <cppLoop+0x1280>)
 800760e:	f7fc f8a3 	bl	8003758 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007612:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8007898 <cppLoop+0x1268>
 8007616:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8007898 <cppLoop+0x1268>
 800761a:	48a6      	ldr	r0, [pc, #664]	; (80078b4 <cppLoop+0x1284>)
 800761c:	f7fc f920 	bl	8003860 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007620:	4aa5      	ldr	r2, [pc, #660]	; (80078b8 <cppLoop+0x1288>)
 8007622:	49a6      	ldr	r1, [pc, #664]	; (80078bc <cppLoop+0x128c>)
 8007624:	48a2      	ldr	r0, [pc, #648]	; (80078b0 <cppLoop+0x1280>)
 8007626:	f7fb ff9f 	bl	8003568 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	f04f 31ff 	mov.w	r1, #4294967295
 8007630:	489b      	ldr	r0, [pc, #620]	; (80078a0 <cppLoop+0x1270>)
 8007632:	f7fa fd17 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8007636:	e115      	b.n	8007864 <cppLoop+0x1234>

	case 10:
		led.fullColor('Y');
 8007638:	2159      	movs	r1, #89	; 0x59
 800763a:	4899      	ldr	r0, [pc, #612]	; (80078a0 <cppLoop+0x1270>)
 800763c:	f7fa fc56 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007640:	f7f9 fd2e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007644:	2100      	movs	r1, #0
 8007646:	2000      	movs	r0, #0
 8007648:	f7f9 fd3a 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800764c:	489c      	ldr	r0, [pc, #624]	; (80078c0 <cppLoop+0x1290>)
 800764e:	f7f9 fd61 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007652:	2101      	movs	r1, #1
 8007654:	2000      	movs	r0, #0
 8007656:	f7f9 fd33 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800765a:	489a      	ldr	r0, [pc, #616]	; (80078c4 <cppLoop+0x1294>)
 800765c:	f7f9 fd5a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007660:	4892      	ldr	r0, [pc, #584]	; (80078ac <cppLoop+0x127c>)
 8007662:	f7fa fbdf 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007666:	4603      	mov	r3, r0
 8007668:	2b02      	cmp	r3, #2
 800766a:	bf0c      	ite	eq
 800766c:	2301      	moveq	r3, #1
 800766e:	2300      	movne	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80f8 	beq.w	8007868 <cppLoop+0x1238>
			HAL_Delay(1500);
 8007678:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800767c:	f000 fa42 	bl	8007b04 <HAL_Delay>
			led.LR(-1, 1);
 8007680:	2201      	movs	r2, #1
 8007682:	f04f 31ff 	mov.w	r1, #4294967295
 8007686:	4886      	ldr	r0, [pc, #536]	; (80078a0 <cppLoop+0x1270>)
 8007688:	f7fa fcec 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 800768c:	4888      	ldr	r0, [pc, #544]	; (80078b0 <cppLoop+0x1280>)
 800768e:	f7fc f852 	bl	8003736 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007692:	488d      	ldr	r0, [pc, #564]	; (80078c8 <cppLoop+0x1298>)
 8007694:	f7fd f82d 	bl	80046f2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007698:	eddf 0a8c 	vldr	s1, [pc, #560]	; 80078cc <cppLoop+0x129c>
 800769c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076a0:	4889      	ldr	r0, [pc, #548]	; (80078c8 <cppLoop+0x1298>)
 80076a2:	f7fc ffb9 	bl	8004618 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80076a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076aa:	f000 fa2b 	bl	8007b04 <HAL_Delay>

			logger.stop();
 80076ae:	4880      	ldr	r0, [pc, #512]	; (80078b0 <cppLoop+0x1280>)
 80076b0:	f7fc f852 	bl	8003758 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80076b4:	4884      	ldr	r0, [pc, #528]	; (80078c8 <cppLoop+0x1298>)
 80076b6:	f7fd f82f 	bl	8004718 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80076ba:	4a85      	ldr	r2, [pc, #532]	; (80078d0 <cppLoop+0x12a0>)
 80076bc:	497f      	ldr	r1, [pc, #508]	; (80078bc <cppLoop+0x128c>)
 80076be:	487c      	ldr	r0, [pc, #496]	; (80078b0 <cppLoop+0x1280>)
 80076c0:	f7fb ff52 	bl	8003568 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80076c4:	2200      	movs	r2, #0
 80076c6:	f04f 31ff 	mov.w	r1, #4294967295
 80076ca:	4875      	ldr	r0, [pc, #468]	; (80078a0 <cppLoop+0x1270>)
 80076cc:	f7fa fcca 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 80076d0:	e0ca      	b.n	8007868 <cppLoop+0x1238>

	case 11:
		led.fullColor('C');
 80076d2:	2143      	movs	r1, #67	; 0x43
 80076d4:	4872      	ldr	r0, [pc, #456]	; (80078a0 <cppLoop+0x1270>)
 80076d6:	f7fa fc09 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80076da:	f7f9 fce1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80076de:	2100      	movs	r1, #0
 80076e0:	2000      	movs	r0, #0
 80076e2:	f7f9 fced 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80076e6:	487b      	ldr	r0, [pc, #492]	; (80078d4 <cppLoop+0x12a4>)
 80076e8:	f7f9 fd14 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80076ec:	2101      	movs	r1, #1
 80076ee:	2000      	movs	r0, #0
 80076f0:	f7f9 fce6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80076f4:	4878      	ldr	r0, [pc, #480]	; (80078d8 <cppLoop+0x12a8>)
 80076f6:	f7f9 fd0d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80076fa:	486c      	ldr	r0, [pc, #432]	; (80078ac <cppLoop+0x127c>)
 80076fc:	f7fa fb92 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007700:	4603      	mov	r3, r0
 8007702:	2b02      	cmp	r3, #2
 8007704:	bf0c      	ite	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	2300      	movne	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80ad 	beq.w	800786c <cppLoop+0x123c>
			HAL_Delay(500);
 8007712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007716:	f000 f9f5 	bl	8007b04 <HAL_Delay>
			led.LR(-1, 1);
 800771a:	2201      	movs	r2, #1
 800771c:	f04f 31ff 	mov.w	r1, #4294967295
 8007720:	485f      	ldr	r0, [pc, #380]	; (80078a0 <cppLoop+0x1270>)
 8007722:	f7fa fc9f 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.createVelocityTabele();
 8007726:	486d      	ldr	r0, [pc, #436]	; (80078dc <cppLoop+0x12ac>)
 8007728:	f7fb faa4 	bl	8002c74 <_ZN9LineTrace20createVelocityTabeleEv>

			led.LR(-1, 0);
 800772c:	2200      	movs	r2, #0
 800772e:	f04f 31ff 	mov.w	r1, #4294967295
 8007732:	485b      	ldr	r0, [pc, #364]	; (80078a0 <cppLoop+0x1270>)
 8007734:	f7fa fc96 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8007738:	e098      	b.n	800786c <cppLoop+0x123c>

	case 12:
		led.fullColor('R');
 800773a:	2152      	movs	r1, #82	; 0x52
 800773c:	4858      	ldr	r0, [pc, #352]	; (80078a0 <cppLoop+0x1270>)
 800773e:	f7fa fbd5 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007742:	f7f9 fcad 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007746:	2100      	movs	r1, #0
 8007748:	2000      	movs	r0, #0
 800774a:	f7f9 fcb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800774e:	4864      	ldr	r0, [pc, #400]	; (80078e0 <cppLoop+0x12b0>)
 8007750:	f7f9 fce0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007754:	2101      	movs	r1, #1
 8007756:	2000      	movs	r0, #0
 8007758:	f7f9 fcb2 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800775c:	4852      	ldr	r0, [pc, #328]	; (80078a8 <cppLoop+0x1278>)
 800775e:	f7f9 fcd9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007762:	4852      	ldr	r0, [pc, #328]	; (80078ac <cppLoop+0x127c>)
 8007764:	f7fa fb5e 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007768:	4603      	mov	r3, r0
 800776a:	2b02      	cmp	r3, #2
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d07b      	beq.n	8007870 <cppLoop+0x1240>
			led.LR(-1, 1);
 8007778:	2201      	movs	r2, #1
 800777a:	f04f 31ff 	mov.w	r1, #4294967295
 800777e:	4848      	ldr	r0, [pc, #288]	; (80078a0 <cppLoop+0x1270>)
 8007780:	f7fa fc70 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007784:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007788:	f000 f9bc 	bl	8007b04 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800778c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80078e4 <cppLoop+0x12b4>
 8007790:	4855      	ldr	r0, [pc, #340]	; (80078e8 <cppLoop+0x12b8>)
 8007792:	f7fc fdcf 	bl	8004334 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8007796:	4854      	ldr	r0, [pc, #336]	; (80078e8 <cppLoop+0x12b8>)
 8007798:	f7fc fddc 	bl	8004354 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800779c:	f244 405c 	movw	r0, #17500	; 0x445c
 80077a0:	f000 f9b0 	bl	8007b04 <HAL_Delay>
			sys_ident.stop();
 80077a4:	4850      	ldr	r0, [pc, #320]	; (80078e8 <cppLoop+0x12b8>)
 80077a6:	f7fc fde7 	bl	8004378 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80077aa:	484f      	ldr	r0, [pc, #316]	; (80078e8 <cppLoop+0x12b8>)
 80077ac:	f7fc fd50 	bl	8004250 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80077b0:	2200      	movs	r2, #0
 80077b2:	f04f 31ff 	mov.w	r1, #4294967295
 80077b6:	483a      	ldr	r0, [pc, #232]	; (80078a0 <cppLoop+0x1270>)
 80077b8:	f7fa fc54 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 80077bc:	e058      	b.n	8007870 <cppLoop+0x1240>

	case 13:
		led.fullColor('G');
 80077be:	2147      	movs	r1, #71	; 0x47
 80077c0:	4837      	ldr	r0, [pc, #220]	; (80078a0 <cppLoop+0x1270>)
 80077c2:	f7fa fb93 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80077c6:	f7f9 fc6b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80077ca:	2100      	movs	r1, #0
 80077cc:	2000      	movs	r0, #0
 80077ce:	f7f9 fc77 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 80077d2:	4846      	ldr	r0, [pc, #280]	; (80078ec <cppLoop+0x12bc>)
 80077d4:	f7f9 fc9e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077d8:	2101      	movs	r1, #1
 80077da:	2000      	movs	r0, #0
 80077dc:	f7f9 fc70 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80077e0:	4843      	ldr	r0, [pc, #268]	; (80078f0 <cppLoop+0x12c0>)
 80077e2:	f7f9 fc97 	bl	8001114 <lcd_printf>

		break;
 80077e6:	e044      	b.n	8007872 <cppLoop+0x1242>

	case 14:
		led.fullColor('B');
 80077e8:	2142      	movs	r1, #66	; 0x42
 80077ea:	482d      	ldr	r0, [pc, #180]	; (80078a0 <cppLoop+0x1270>)
 80077ec:	f7fa fb7e 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80077f0:	f7f9 fc56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80077f4:	2100      	movs	r1, #0
 80077f6:	2000      	movs	r0, #0
 80077f8:	f7f9 fc62 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 80077fc:	483d      	ldr	r0, [pc, #244]	; (80078f4 <cppLoop+0x12c4>)
 80077fe:	f7f9 fc89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007802:	2101      	movs	r1, #1
 8007804:	2000      	movs	r0, #0
 8007806:	f7f9 fc5b 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800780a:	4839      	ldr	r0, [pc, #228]	; (80078f0 <cppLoop+0x12c0>)
 800780c:	f7f9 fc82 	bl	8001114 <lcd_printf>

		break;
 8007810:	e02f      	b.n	8007872 <cppLoop+0x1242>

	case 15:
		led.fullColor('M');
 8007812:	214d      	movs	r1, #77	; 0x4d
 8007814:	4822      	ldr	r0, [pc, #136]	; (80078a0 <cppLoop+0x1270>)
 8007816:	f7fa fb69 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800781a:	f7f9 fc41 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800781e:	2100      	movs	r1, #0
 8007820:	2000      	movs	r0, #0
 8007822:	f7f9 fc4d 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 8007826:	4834      	ldr	r0, [pc, #208]	; (80078f8 <cppLoop+0x12c8>)
 8007828:	f7f9 fc74 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800782c:	2101      	movs	r1, #1
 800782e:	2000      	movs	r0, #0
 8007830:	f7f9 fc46 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007834:	482e      	ldr	r0, [pc, #184]	; (80078f0 <cppLoop+0x12c0>)
 8007836:	f7f9 fc6d 	bl	8001114 <lcd_printf>

		break;
 800783a:	e01a      	b.n	8007872 <cppLoop+0x1242>

	default:
		break;
 800783c:	bf00      	nop
 800783e:	e018      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007840:	bf00      	nop
 8007842:	e016      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007844:	bf00      	nop
 8007846:	e014      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007848:	bf00      	nop
 800784a:	e012      	b.n	8007872 <cppLoop+0x1242>
		break;
 800784c:	bf00      	nop
 800784e:	e010      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007850:	bf00      	nop
 8007852:	e00e      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007854:	bf00      	nop
 8007856:	e00c      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007858:	bf00      	nop
 800785a:	e00a      	b.n	8007872 <cppLoop+0x1242>
		break;
 800785c:	bf00      	nop
 800785e:	e008      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007860:	bf00      	nop
 8007862:	e006      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007864:	bf00      	nop
 8007866:	e004      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007868:	bf00      	nop
 800786a:	e002      	b.n	8007872 <cppLoop+0x1242>
		break;
 800786c:	bf00      	nop
 800786e:	e000      	b.n	8007872 <cppLoop+0x1242>
		break;
 8007870:	bf00      	nop

	}

	HAL_Delay(30);
 8007872:	201e      	movs	r0, #30
 8007874:	f000 f946 	bl	8007b04 <HAL_Delay>

}
 8007878:	bf00      	nop
 800787a:	3724      	adds	r7, #36	; 0x24
 800787c:	46bd      	mov	sp, r7
 800787e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007882:	bf00      	nop
 8007884:	f3af 8000 	nop.w
 8007888:	33333333 	.word	0x33333333
 800788c:	bfd33333 	.word	0xbfd33333
 8007890:	33333333 	.word	0x33333333
 8007894:	3fd33333 	.word	0x3fd33333
	...
 80078a0:	200005b0 	.word	0x200005b0
 80078a4:	0801892c 	.word	0x0801892c
 80078a8:	080188dc 	.word	0x080188dc
 80078ac:	200005a4 	.word	0x200005a4
 80078b0:	200005d4 	.word	0x200005d4
 80078b4:	200005ac 	.word	0x200005ac
 80078b8:	08018934 	.word	0x08018934
 80078bc:	08018940 	.word	0x08018940
 80078c0:	0801894c 	.word	0x0801894c
 80078c4:	08018950 	.word	0x08018950
 80078c8:	20015db8 	.word	0x20015db8
 80078cc:	00000000 	.word	0x00000000
 80078d0:	0801895c 	.word	0x0801895c
 80078d4:	08018968 	.word	0x08018968
 80078d8:	08018974 	.word	0x08018974
 80078dc:	20015e38 	.word	0x20015e38
 80078e0:	08018980 	.word	0x08018980
 80078e4:	3e99999a 	.word	0x3e99999a
 80078e8:	2001bc7c 	.word	0x2001bc7c
 80078ec:	08018988 	.word	0x08018988
 80078f0:	08018994 	.word	0x08018994
 80078f4:	080189a0 	.word	0x080189a0
 80078f8:	080189ac 	.word	0x080189ac

080078fc <_Z41__static_initialization_and_destruction_0ii>:
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af04      	add	r7, sp, #16
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d13b      	bne.n	8007984 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007912:	4293      	cmp	r3, r2
 8007914:	d136      	bne.n	8007984 <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 8007916:	481d      	ldr	r0, [pc, #116]	; (800798c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007918:	f7fa fbdc 	bl	80020d4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800791c:	481c      	ldr	r0, [pc, #112]	; (8007990 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800791e:	f7fc fb6f 	bl	8004000 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007922:	481c      	ldr	r0, [pc, #112]	; (8007994 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007924:	f7fa fa72 	bl	8001e0c <_ZN8JoyStickC1Ev>
Motor motor;
 8007928:	481b      	ldr	r0, [pc, #108]	; (8007998 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800792a:	f7fb ff26 	bl	800377a <_ZN5MotorC1Ev>
IMU imu;
 800792e:	481b      	ldr	r0, [pc, #108]	; (800799c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007930:	f7fa f872 	bl	8001a18 <_ZN3IMUC1Ev>
Logger logger;
 8007934:	481a      	ldr	r0, [pc, #104]	; (80079a0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007936:	f7fb fcbb 	bl	80032b0 <_ZN6LoggerC1Ev>
Encoder encoder;
 800793a:	481a      	ldr	r0, [pc, #104]	; (80079a4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800793c:	f7f9 fc0a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007940:	4b16      	ldr	r3, [pc, #88]	; (800799c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007942:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007944:	4914      	ldr	r1, [pc, #80]	; (8007998 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007946:	4818      	ldr	r0, [pc, #96]	; (80079a8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007948:	f7fc fd3a 	bl	80043c0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800794c:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800794e:	4a13      	ldr	r2, [pc, #76]	; (800799c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007950:	4914      	ldr	r1, [pc, #80]	; (80079a4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007952:	4816      	ldr	r0, [pc, #88]	; (80079ac <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007954:	f7fb fff6 	bl	8003944 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800795a:	9303      	str	r3, [sp, #12]
 800795c:	4b13      	ldr	r3, [pc, #76]	; (80079ac <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800795e:	9302      	str	r3, [sp, #8]
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800796a:	4a08      	ldr	r2, [pc, #32]	; (800798c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800796c:	490a      	ldr	r1, [pc, #40]	; (8007998 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800796e:	4810      	ldr	r0, [pc, #64]	; (80079b0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007970:	f7fa ff28 	bl	80027c4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 8007974:	4a08      	ldr	r2, [pc, #32]	; (8007998 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007976:	490a      	ldr	r1, [pc, #40]	; (80079a0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007978:	480e      	ldr	r0, [pc, #56]	; (80079b4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800797a:	f7fc fc1f 	bl	80041bc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800797e:	480e      	ldr	r0, [pc, #56]	; (80079b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007980:	f7fc f960 	bl	8003c44 <_ZN13PathFollowingC1Ev>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200002a4 	.word	0x200002a4
 8007990:	2000059c 	.word	0x2000059c
 8007994:	200005a4 	.word	0x200005a4
 8007998:	200005ac 	.word	0x200005ac
 800799c:	200005c0 	.word	0x200005c0
 80079a0:	200005d4 	.word	0x200005d4
 80079a4:	20015d9c 	.word	0x20015d9c
 80079a8:	20015db8 	.word	0x20015db8
 80079ac:	20015df8 	.word	0x20015df8
 80079b0:	20015e38 	.word	0x20015e38
 80079b4:	2001bc7c 	.word	0x2001bc7c
 80079b8:	2001be88 	.word	0x2001be88

080079bc <_GLOBAL__sub_I_line_sensor>:
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
 80079c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079c4:	2001      	movs	r0, #1
 80079c6:	f7ff ff99 	bl	80078fc <_Z41__static_initialization_and_destruction_0ii>
 80079ca:	bd80      	pop	{r7, pc}

080079cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80079cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80079d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80079d2:	e003      	b.n	80079dc <LoopCopyDataInit>

080079d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80079d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80079d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80079da:	3104      	adds	r1, #4

080079dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80079dc:	480b      	ldr	r0, [pc, #44]	; (8007a0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80079e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80079e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80079e4:	d3f6      	bcc.n	80079d4 <CopyDataInit>
  ldr  r2, =_sbss
 80079e6:	4a0b      	ldr	r2, [pc, #44]	; (8007a14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80079e8:	e002      	b.n	80079f0 <LoopFillZerobss>

080079ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80079ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80079ec:	f842 3b04 	str.w	r3, [r2], #4

080079f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80079f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80079f4:	d3f9      	bcc.n	80079ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80079f6:	f7fe fca1 	bl	800633c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80079fa:	f00b fded 	bl	80135d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079fe:	f7fc ff67 	bl	80048d0 <main>
  bx  lr    
 8007a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007a04:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007a08:	08018fb0 	.word	0x08018fb0
  ldr  r0, =_sdata
 8007a0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a10:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007a14:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007a18:	20037fc8 	.word	0x20037fc8

08007a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a1c:	e7fe      	b.n	8007a1c <ADC_IRQHandler>
	...

08007a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <HAL_Init+0x40>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a0d      	ldr	r2, [pc, #52]	; (8007a60 <HAL_Init+0x40>)
 8007a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_Init+0x40>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_Init+0x40>)
 8007a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_Init+0x40>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a07      	ldr	r2, [pc, #28]	; (8007a60 <HAL_Init+0x40>)
 8007a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a48:	2003      	movs	r0, #3
 8007a4a:	f000 fd51 	bl	80084f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f000 f808 	bl	8007a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a54:	f7fd fe60 	bl	8005718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40023c00 	.word	0x40023c00

08007a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <HAL_InitTick+0x54>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	4b12      	ldr	r3, [pc, #72]	; (8007abc <HAL_InitTick+0x58>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	4619      	mov	r1, r3
 8007a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fd69 	bl	800855a <HAL_SYSTICK_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e00e      	b.n	8007ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b0f      	cmp	r3, #15
 8007a96:	d80a      	bhi.n	8007aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	f000 fd31 	bl	8008506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007aa4:	4a06      	ldr	r2, [pc, #24]	; (8007ac0 <HAL_InitTick+0x5c>)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e000      	b.n	8007ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000000 	.word	0x20000000
 8007abc:	20000008 	.word	0x20000008
 8007ac0:	20000004 	.word	0x20000004

08007ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <HAL_IncTick+0x20>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <HAL_IncTick+0x24>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <HAL_IncTick+0x24>)
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000008 	.word	0x20000008
 8007ae8:	20035f50 	.word	0x20035f50

08007aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  return uwTick;
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <HAL_GetTick+0x14>)
 8007af2:	681b      	ldr	r3, [r3, #0]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20035f50 	.word	0x20035f50

08007b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b0c:	f7ff ffee 	bl	8007aec <HAL_GetTick>
 8007b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d005      	beq.n	8007b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <HAL_Delay+0x40>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b2a:	bf00      	nop
 8007b2c:	f7ff ffde 	bl	8007aec <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d8f7      	bhi.n	8007b2c <HAL_Delay+0x28>
  {
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20000008 	.word	0x20000008

08007b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e033      	b.n	8007bc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fd fdfe 	bl	8005768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f003 0310 	and.w	r3, r3, #16
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d118      	bne.n	8007bb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007b8e:	f023 0302 	bic.w	r3, r3, #2
 8007b92:	f043 0202 	orr.w	r2, r3, #2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa5a 	bl	8008054 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	f043 0201 	orr.w	r2, r3, #1
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8007bb6:	e001      	b.n	8007bbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d101      	bne.n	8007bee <HAL_ADC_Start_DMA+0x1e>
 8007bea:	2302      	movs	r3, #2
 8007bec:	e0cc      	b.n	8007d88 <HAL_ADC_Start_DMA+0x1b8>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d018      	beq.n	8007c36 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007c14:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <HAL_ADC_Start_DMA+0x1c0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a5e      	ldr	r2, [pc, #376]	; (8007d94 <HAL_ADC_Start_DMA+0x1c4>)
 8007c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1e:	0c9a      	lsrs	r2, r3, #18
 8007c20:	4613      	mov	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007c28:	e002      	b.n	8007c30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f9      	bne.n	8007c2a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	f040 80a0 	bne.w	8007d86 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d007      	beq.n	8007c78 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007c70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c84:	d106      	bne.n	8007c94 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	f023 0206 	bic.w	r2, r3, #6
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	645a      	str	r2, [r3, #68]	; 0x44
 8007c92:	e002      	b.n	8007c9a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ca2:	4b3d      	ldr	r3, [pc, #244]	; (8007d98 <HAL_ADC_Start_DMA+0x1c8>)
 8007ca4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	4a3c      	ldr	r2, [pc, #240]	; (8007d9c <HAL_ADC_Start_DMA+0x1cc>)
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	4a3b      	ldr	r2, [pc, #236]	; (8007da0 <HAL_ADC_Start_DMA+0x1d0>)
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	4a3a      	ldr	r2, [pc, #232]	; (8007da4 <HAL_ADC_Start_DMA+0x1d4>)
 8007cbc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007cc6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007cd6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	334c      	adds	r3, #76	; 0x4c
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f000 fcea 	bl	80086d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d12a      	bne.n	8007d5e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <HAL_ADC_Start_DMA+0x1d8>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d015      	beq.n	8007d3e <HAL_ADC_Start_DMA+0x16e>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a25      	ldr	r2, [pc, #148]	; (8007dac <HAL_ADC_Start_DMA+0x1dc>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d105      	bne.n	8007d28 <HAL_ADC_Start_DMA+0x158>
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <HAL_ADC_Start_DMA+0x1c8>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a20      	ldr	r2, [pc, #128]	; (8007db0 <HAL_ADC_Start_DMA+0x1e0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d129      	bne.n	8007d86 <HAL_ADC_Start_DMA+0x1b6>
 8007d32:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <HAL_ADC_Start_DMA+0x1c8>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d823      	bhi.n	8007d86 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d11c      	bne.n	8007d86 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	e013      	b.n	8007d86 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a11      	ldr	r2, [pc, #68]	; (8007da8 <HAL_ADC_Start_DMA+0x1d8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10e      	bne.n	8007d86 <HAL_ADC_Start_DMA+0x1b6>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007d84:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000000 	.word	0x20000000
 8007d94:	431bde83 	.word	0x431bde83
 8007d98:	40012300 	.word	0x40012300
 8007d9c:	0800824d 	.word	0x0800824d
 8007da0:	08008307 	.word	0x08008307
 8007da4:	08008323 	.word	0x08008323
 8007da8:	40012000 	.word	0x40012000
 8007dac:	40012100 	.word	0x40012100
 8007db0:	40012200 	.word	0x40012200

08007db4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_ADC_ConfigChannel+0x1c>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e113      	b.n	8008034 <HAL_ADC_ConfigChannel+0x244>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b09      	cmp	r3, #9
 8007e1a:	d925      	bls.n	8007e68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68d9      	ldr	r1, [r3, #12]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	4413      	add	r3, r2
 8007e30:	3b1e      	subs	r3, #30
 8007e32:	2207      	movs	r2, #7
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	43da      	mvns	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	400a      	ands	r2, r1
 8007e40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68d9      	ldr	r1, [r3, #12]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4618      	mov	r0, r3
 8007e54:	4603      	mov	r3, r0
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	4403      	add	r3, r0
 8007e5a:	3b1e      	subs	r3, #30
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	e022      	b.n	8007eae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6919      	ldr	r1, [r3, #16]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	4613      	mov	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	2207      	movs	r2, #7
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43da      	mvns	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	400a      	ands	r2, r1
 8007e8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6919      	ldr	r1, [r3, #16]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	4403      	add	r3, r0
 8007ea4:	409a      	lsls	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d824      	bhi.n	8007f00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3b05      	subs	r3, #5
 8007ec8:	221f      	movs	r2, #31
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43da      	mvns	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	400a      	ands	r2, r1
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	3b05      	subs	r3, #5
 8007ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	635a      	str	r2, [r3, #52]	; 0x34
 8007efe:	e04c      	b.n	8007f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	2b0c      	cmp	r3, #12
 8007f06:	d824      	bhi.n	8007f52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	3b23      	subs	r3, #35	; 0x23
 8007f1a:	221f      	movs	r2, #31
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	43da      	mvns	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	400a      	ands	r2, r1
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4618      	mov	r0, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	3b23      	subs	r3, #35	; 0x23
 8007f44:	fa00 f203 	lsl.w	r2, r0, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f50:	e023      	b.n	8007f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	3b41      	subs	r3, #65	; 0x41
 8007f64:	221f      	movs	r2, #31
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43da      	mvns	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	400a      	ands	r2, r1
 8007f72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	4618      	mov	r0, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3b41      	subs	r3, #65	; 0x41
 8007f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f9a:	4b29      	ldr	r3, [pc, #164]	; (8008040 <HAL_ADC_ConfigChannel+0x250>)
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a28      	ldr	r2, [pc, #160]	; (8008044 <HAL_ADC_ConfigChannel+0x254>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d10f      	bne.n	8007fc8 <HAL_ADC_ConfigChannel+0x1d8>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b12      	cmp	r3, #18
 8007fae:	d10b      	bne.n	8007fc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <HAL_ADC_ConfigChannel+0x254>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d12b      	bne.n	800802a <HAL_ADC_ConfigChannel+0x23a>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <HAL_ADC_ConfigChannel+0x258>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <HAL_ADC_ConfigChannel+0x1f4>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b11      	cmp	r3, #17
 8007fe2:	d122      	bne.n	800802a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a11      	ldr	r2, [pc, #68]	; (8008048 <HAL_ADC_ConfigChannel+0x258>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d111      	bne.n	800802a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <HAL_ADC_ConfigChannel+0x25c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a11      	ldr	r2, [pc, #68]	; (8008050 <HAL_ADC_ConfigChannel+0x260>)
 800800c:	fba2 2303 	umull	r2, r3, r2, r3
 8008010:	0c9a      	lsrs	r2, r3, #18
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800801c:	e002      	b.n	8008024 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	3b01      	subs	r3, #1
 8008022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1f9      	bne.n	800801e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40012300 	.word	0x40012300
 8008044:	40012000 	.word	0x40012000
 8008048:	10000012 	.word	0x10000012
 800804c:	20000000 	.word	0x20000000
 8008050:	431bde83 	.word	0x431bde83

08008054 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800805c:	4b79      	ldr	r3, [pc, #484]	; (8008244 <ADC_Init+0x1f0>)
 800805e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	431a      	orrs	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6859      	ldr	r1, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	021a      	lsls	r2, r3, #8
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80080ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6859      	ldr	r1, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6899      	ldr	r1, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	4a58      	ldr	r2, [pc, #352]	; (8008248 <ADC_Init+0x1f4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d022      	beq.n	8008132 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6899      	ldr	r1, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800811c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6899      	ldr	r1, [r3, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	609a      	str	r2, [r3, #8]
 8008130:	e00f      	b.n	8008152 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008150:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0202 	bic.w	r2, r2, #2
 8008160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6899      	ldr	r1, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7e1b      	ldrb	r3, [r3, #24]
 800816c:	005a      	lsls	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01b      	beq.n	80081b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800818e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800819e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6859      	ldr	r1, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	3b01      	subs	r3, #1
 80081ac:	035a      	lsls	r2, r3, #13
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
 80081b6:	e007      	b.n	80081c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80081d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	051a      	lsls	r2, r3, #20
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80081fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6899      	ldr	r1, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800820a:	025a      	lsls	r2, r3, #9
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6899      	ldr	r1, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	029a      	lsls	r2, r3, #10
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	40012300 	.word	0x40012300
 8008248:	0f000001 	.word	0x0f000001

0800824c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008262:	2b00      	cmp	r3, #0
 8008264:	d13c      	bne.n	80082e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d12b      	bne.n	80082d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008284:	2b00      	cmp	r3, #0
 8008286:	d127      	bne.n	80082d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008292:	2b00      	cmp	r3, #0
 8008294:	d006      	beq.n	80082a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d119      	bne.n	80082d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0220 	bic.w	r2, r2, #32
 80082b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d105      	bne.n	80082d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	f043 0201 	orr.w	r2, r3, #1
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff fd6b 	bl	8007db4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80082de:	e00e      	b.n	80082fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff fd75 	bl	8007ddc <HAL_ADC_ErrorCallback>
}
 80082f2:	e004      	b.n	80082fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff fd57 	bl	8007dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2240      	movs	r2, #64	; 0x40
 8008334:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833a:	f043 0204 	orr.w	r2, r3, #4
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff fd4a 	bl	8007ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <__NVIC_SetPriorityGrouping>:
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008360:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <__NVIC_SetPriorityGrouping+0x44>)
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800836c:	4013      	ands	r3, r2
 800836e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800837c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008382:	4a04      	ldr	r2, [pc, #16]	; (8008394 <__NVIC_SetPriorityGrouping+0x44>)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	60d3      	str	r3, [r2, #12]
}
 8008388:	bf00      	nop
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <__NVIC_GetPriorityGrouping>:
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <__NVIC_GetPriorityGrouping+0x18>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	f003 0307 	and.w	r3, r3, #7
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	e000ed00 	.word	0xe000ed00

080083b4 <__NVIC_EnableIRQ>:
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	db0b      	blt.n	80083de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	f003 021f 	and.w	r2, r3, #31
 80083cc:	4907      	ldr	r1, [pc, #28]	; (80083ec <__NVIC_EnableIRQ+0x38>)
 80083ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	2001      	movs	r0, #1
 80083d6:	fa00 f202 	lsl.w	r2, r0, r2
 80083da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	e000e100 	.word	0xe000e100

080083f0 <__NVIC_SetPriority>:
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008400:	2b00      	cmp	r3, #0
 8008402:	db0a      	blt.n	800841a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	490c      	ldr	r1, [pc, #48]	; (800843c <__NVIC_SetPriority+0x4c>)
 800840a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840e:	0112      	lsls	r2, r2, #4
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	440b      	add	r3, r1
 8008414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008418:	e00a      	b.n	8008430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	b2da      	uxtb	r2, r3
 800841e:	4908      	ldr	r1, [pc, #32]	; (8008440 <__NVIC_SetPriority+0x50>)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	3b04      	subs	r3, #4
 8008428:	0112      	lsls	r2, r2, #4
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	440b      	add	r3, r1
 800842e:	761a      	strb	r2, [r3, #24]
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	e000e100 	.word	0xe000e100
 8008440:	e000ed00 	.word	0xe000ed00

08008444 <NVIC_EncodePriority>:
{
 8008444:	b480      	push	{r7}
 8008446:	b089      	sub	sp, #36	; 0x24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	f1c3 0307 	rsb	r3, r3, #7
 800845e:	2b04      	cmp	r3, #4
 8008460:	bf28      	it	cs
 8008462:	2304      	movcs	r3, #4
 8008464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	3304      	adds	r3, #4
 800846a:	2b06      	cmp	r3, #6
 800846c:	d902      	bls.n	8008474 <NVIC_EncodePriority+0x30>
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	3b03      	subs	r3, #3
 8008472:	e000      	b.n	8008476 <NVIC_EncodePriority+0x32>
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008478:	f04f 32ff 	mov.w	r2, #4294967295
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	43da      	mvns	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	401a      	ands	r2, r3
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800848c:	f04f 31ff 	mov.w	r1, #4294967295
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	fa01 f303 	lsl.w	r3, r1, r3
 8008496:	43d9      	mvns	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800849c:	4313      	orrs	r3, r2
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3724      	adds	r7, #36	; 0x24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
	...

080084ac <SysTick_Config>:
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084bc:	d301      	bcc.n	80084c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80084be:	2301      	movs	r3, #1
 80084c0:	e00f      	b.n	80084e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084c2:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <SysTick_Config+0x40>)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084ca:	210f      	movs	r1, #15
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	f7ff ff8e 	bl	80083f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <SysTick_Config+0x40>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084da:	4b04      	ldr	r3, [pc, #16]	; (80084ec <SysTick_Config+0x40>)
 80084dc:	2207      	movs	r2, #7
 80084de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	e000e010 	.word	0xe000e010

080084f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ff29 	bl	8008350 <__NVIC_SetPriorityGrouping>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	4603      	mov	r3, r0
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008518:	f7ff ff3e 	bl	8008398 <__NVIC_GetPriorityGrouping>
 800851c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	6978      	ldr	r0, [r7, #20]
 8008524:	f7ff ff8e 	bl	8008444 <NVIC_EncodePriority>
 8008528:	4602      	mov	r2, r0
 800852a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff ff5d 	bl	80083f0 <__NVIC_SetPriority>
}
 8008536:	bf00      	nop
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	4603      	mov	r3, r0
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ff31 	bl	80083b4 <__NVIC_EnableIRQ>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff ffa2 	bl	80084ac <SysTick_Config>
 8008568:	4603      	mov	r3, r0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008580:	f7ff fab4 	bl	8007aec <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e099      	b.n	80086c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0201 	bic.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085b0:	e00f      	b.n	80085d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085b2:	f7ff fa9b 	bl	8007aec <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b05      	cmp	r3, #5
 80085be:	d908      	bls.n	80085d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2203      	movs	r2, #3
 80085ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e078      	b.n	80086c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e8      	bne.n	80085b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4b38      	ldr	r3, [pc, #224]	; (80086cc <HAL_DMA_Init+0x158>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800860a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b04      	cmp	r3, #4
 800862a:	d107      	bne.n	800863c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	4313      	orrs	r3, r2
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b04      	cmp	r3, #4
 8008664:	d117      	bne.n	8008696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00e      	beq.n	8008696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa9d 	bl	8008bb8 <DMA_CheckFifoParam>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2240      	movs	r2, #64	; 0x40
 8008688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008692:	2301      	movs	r3, #1
 8008694:	e016      	b.n	80086c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fa54 	bl	8008b4c <DMA_CalcBaseAndBitshift>
 80086a4:	4603      	mov	r3, r0
 80086a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	223f      	movs	r2, #63	; 0x3f
 80086ae:	409a      	lsls	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	f010803f 	.word	0xf010803f

080086d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_DMA_Start_IT+0x26>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e040      	b.n	8008778 <HAL_DMA_Start_IT+0xa8>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b01      	cmp	r3, #1
 8008708:	d12f      	bne.n	800876a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 f9e6 	bl	8008af0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	223f      	movs	r2, #63	; 0x3f
 800872a:	409a      	lsls	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0216 	orr.w	r2, r2, #22
 800873e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0208 	orr.w	r2, r2, #8
 8008756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e005      	b.n	8008776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008772:	2302      	movs	r3, #2
 8008774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d004      	beq.n	800879e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2280      	movs	r2, #128	; 0x80
 8008798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e00c      	b.n	80087b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2205      	movs	r2, #5
 80087a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80087d0:	4b92      	ldr	r3, [pc, #584]	; (8008a1c <HAL_DMA_IRQHandler+0x258>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a92      	ldr	r2, [pc, #584]	; (8008a20 <HAL_DMA_IRQHandler+0x25c>)
 80087d6:	fba2 2303 	umull	r2, r3, r2, r3
 80087da:	0a9b      	lsrs	r3, r3, #10
 80087dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ee:	2208      	movs	r2, #8
 80087f0:	409a      	lsls	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01a      	beq.n	8008830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d013      	beq.n	8008830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 0204 	bic.w	r2, r2, #4
 8008816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881c:	2208      	movs	r2, #8
 800881e:	409a      	lsls	r2, r3
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008828:	f043 0201 	orr.w	r2, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008834:	2201      	movs	r2, #1
 8008836:	409a      	lsls	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4013      	ands	r3, r2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d012      	beq.n	8008866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00b      	beq.n	8008866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008852:	2201      	movs	r2, #1
 8008854:	409a      	lsls	r2, r3
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886a:	2204      	movs	r2, #4
 800886c:	409a      	lsls	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4013      	ands	r3, r2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d012      	beq.n	800889c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008888:	2204      	movs	r2, #4
 800888a:	409a      	lsls	r2, r3
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008894:	f043 0204 	orr.w	r2, r3, #4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a0:	2210      	movs	r2, #16
 80088a2:	409a      	lsls	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d043      	beq.n	8008934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d03c      	beq.n	8008934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	2210      	movs	r2, #16
 80088c0:	409a      	lsls	r2, r3
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d018      	beq.n	8008906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d108      	bne.n	80088f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d024      	beq.n	8008934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	4798      	blx	r3
 80088f2:	e01f      	b.n	8008934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01b      	beq.n	8008934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	e016      	b.n	8008934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008910:	2b00      	cmp	r3, #0
 8008912:	d107      	bne.n	8008924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0208 	bic.w	r2, r2, #8
 8008922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008938:	2220      	movs	r2, #32
 800893a:	409a      	lsls	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4013      	ands	r3, r2
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 808e 	beq.w	8008a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8086 	beq.w	8008a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895a:	2220      	movs	r2, #32
 800895c:	409a      	lsls	r2, r3
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b05      	cmp	r3, #5
 800896c:	d136      	bne.n	80089dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0216 	bic.w	r2, r2, #22
 800897c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800898c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <HAL_DMA_IRQHandler+0x1da>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800899a:	2b00      	cmp	r3, #0
 800899c:	d007      	beq.n	80089ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0208 	bic.w	r2, r2, #8
 80089ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b2:	223f      	movs	r2, #63	; 0x3f
 80089b4:	409a      	lsls	r2, r3
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d07d      	beq.n	8008ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
        }
        return;
 80089da:	e078      	b.n	8008ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01c      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d108      	bne.n	8008a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d030      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
 8008a08:	e02b      	b.n	8008a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d027      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	4798      	blx	r3
 8008a1a:	e022      	b.n	8008a62 <HAL_DMA_IRQHandler+0x29e>
 8008a1c:	20000000 	.word	0x20000000
 8008a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10f      	bne.n	8008a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 0210 	bic.w	r2, r2, #16
 8008a40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d032      	beq.n	8008ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d022      	beq.n	8008abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2205      	movs	r2, #5
 8008a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60bb      	str	r3, [r7, #8]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d307      	bcc.n	8008aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f2      	bne.n	8008a8e <HAL_DMA_IRQHandler+0x2ca>
 8008aa8:	e000      	b.n	8008aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008aaa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
 8008acc:	e000      	b.n	8008ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008ace:	bf00      	nop
    }
  }
}
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop

08008ad8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d108      	bne.n	8008b30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b2e:	e007      	b.n	8008b40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
}
 8008b40:	bf00      	nop
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	3b10      	subs	r3, #16
 8008b5c:	4a14      	ldr	r2, [pc, #80]	; (8008bb0 <DMA_CalcBaseAndBitshift+0x64>)
 8008b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b62:	091b      	lsrs	r3, r3, #4
 8008b64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b66:	4a13      	ldr	r2, [pc, #76]	; (8008bb4 <DMA_CalcBaseAndBitshift+0x68>)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d909      	bls.n	8008b8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b82:	f023 0303 	bic.w	r3, r3, #3
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b8c:	e007      	b.n	8008b9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	aaaaaaab 	.word	0xaaaaaaab
 8008bb4:	080189ec 	.word	0x080189ec

08008bb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d11f      	bne.n	8008c12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d855      	bhi.n	8008c84 <DMA_CheckFifoParam+0xcc>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <DMA_CheckFifoParam+0x28>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008c03 	.word	0x08008c03
 8008be8:	08008bf1 	.word	0x08008bf1
 8008bec:	08008c85 	.word	0x08008c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d045      	beq.n	8008c88 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c00:	e042      	b.n	8008c88 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c0a:	d13f      	bne.n	8008c8c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c10:	e03c      	b.n	8008c8c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1a:	d121      	bne.n	8008c60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d836      	bhi.n	8008c90 <DMA_CheckFifoParam+0xd8>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <DMA_CheckFifoParam+0x70>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c39 	.word	0x08008c39
 8008c2c:	08008c3f 	.word	0x08008c3f
 8008c30:	08008c39 	.word	0x08008c39
 8008c34:	08008c51 	.word	0x08008c51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3c:	e02f      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d024      	beq.n	8008c94 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c4e:	e021      	b.n	8008c94 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c58:	d11e      	bne.n	8008c98 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c5e:	e01b      	b.n	8008c98 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d902      	bls.n	8008c6c <DMA_CheckFifoParam+0xb4>
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d003      	beq.n	8008c72 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c6a:	e018      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c70:	e015      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	e00b      	b.n	8008c9c <DMA_CheckFifoParam+0xe4>
      break;
 8008c84:	bf00      	nop
 8008c86:	e00a      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      break;
 8008c88:	bf00      	nop
 8008c8a:	e008      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      break;
 8008c8c:	bf00      	nop
 8008c8e:	e006      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      break;
 8008c90:	bf00      	nop
 8008c92:	e004      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      break;
 8008c94:	bf00      	nop
 8008c96:	e002      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      break;   
 8008c98:	bf00      	nop
 8008c9a:	e000      	b.n	8008c9e <DMA_CheckFifoParam+0xe6>
      break;
 8008c9c:	bf00      	nop
    }
  } 
  
  return status; 
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	61fb      	str	r3, [r7, #28]
 8008cc6:	e177      	b.n	8008fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cc8:	2201      	movs	r2, #1
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	f040 8166 	bne.w	8008fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d00b      	beq.n	8008d06 <HAL_GPIO_Init+0x5a>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d007      	beq.n	8008d06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008cfa:	2b11      	cmp	r3, #17
 8008cfc:	d003      	beq.n	8008d06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b12      	cmp	r3, #18
 8008d04:	d130      	bne.n	8008d68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	2203      	movs	r2, #3
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	43db      	mvns	r3, r3
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	fa02 f303 	lsl.w	r3, r2, r3
 8008d44:	43db      	mvns	r3, r3
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	4013      	ands	r3, r2
 8008d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	091b      	lsrs	r3, r3, #4
 8008d52:	f003 0201 	and.w	r2, r3, #1
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	2203      	movs	r2, #3
 8008d74:	fa02 f303 	lsl.w	r3, r2, r3
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d003      	beq.n	8008da8 <HAL_GPIO_Init+0xfc>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b12      	cmp	r3, #18
 8008da6:	d123      	bne.n	8008df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	08da      	lsrs	r2, r3, #3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3208      	adds	r2, #8
 8008db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	220f      	movs	r2, #15
 8008dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	691a      	ldr	r2, [r3, #16]
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	08da      	lsrs	r2, r3, #3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3208      	adds	r2, #8
 8008dea:	69b9      	ldr	r1, [r7, #24]
 8008dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	4013      	ands	r3, r2
 8008e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f003 0203 	and.w	r2, r3, #3
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	fa02 f303 	lsl.w	r3, r2, r3
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80c0 	beq.w	8008fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	4b65      	ldr	r3, [pc, #404]	; (8008fcc <HAL_GPIO_Init+0x320>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	4a64      	ldr	r2, [pc, #400]	; (8008fcc <HAL_GPIO_Init+0x320>)
 8008e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e40:	6453      	str	r3, [r2, #68]	; 0x44
 8008e42:	4b62      	ldr	r3, [pc, #392]	; (8008fcc <HAL_GPIO_Init+0x320>)
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e4e:	4a60      	ldr	r2, [pc, #384]	; (8008fd0 <HAL_GPIO_Init+0x324>)
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	089b      	lsrs	r3, r3, #2
 8008e54:	3302      	adds	r3, #2
 8008e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	220f      	movs	r2, #15
 8008e66:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a57      	ldr	r2, [pc, #348]	; (8008fd4 <HAL_GPIO_Init+0x328>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d037      	beq.n	8008eea <HAL_GPIO_Init+0x23e>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a56      	ldr	r2, [pc, #344]	; (8008fd8 <HAL_GPIO_Init+0x32c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d031      	beq.n	8008ee6 <HAL_GPIO_Init+0x23a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a55      	ldr	r2, [pc, #340]	; (8008fdc <HAL_GPIO_Init+0x330>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d02b      	beq.n	8008ee2 <HAL_GPIO_Init+0x236>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a54      	ldr	r2, [pc, #336]	; (8008fe0 <HAL_GPIO_Init+0x334>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d025      	beq.n	8008ede <HAL_GPIO_Init+0x232>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a53      	ldr	r2, [pc, #332]	; (8008fe4 <HAL_GPIO_Init+0x338>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01f      	beq.n	8008eda <HAL_GPIO_Init+0x22e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a52      	ldr	r2, [pc, #328]	; (8008fe8 <HAL_GPIO_Init+0x33c>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d019      	beq.n	8008ed6 <HAL_GPIO_Init+0x22a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a51      	ldr	r2, [pc, #324]	; (8008fec <HAL_GPIO_Init+0x340>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_GPIO_Init+0x226>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a50      	ldr	r2, [pc, #320]	; (8008ff0 <HAL_GPIO_Init+0x344>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00d      	beq.n	8008ece <HAL_GPIO_Init+0x222>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a4f      	ldr	r2, [pc, #316]	; (8008ff4 <HAL_GPIO_Init+0x348>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d007      	beq.n	8008eca <HAL_GPIO_Init+0x21e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a4e      	ldr	r2, [pc, #312]	; (8008ff8 <HAL_GPIO_Init+0x34c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d101      	bne.n	8008ec6 <HAL_GPIO_Init+0x21a>
 8008ec2:	2309      	movs	r3, #9
 8008ec4:	e012      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	e010      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008eca:	2308      	movs	r3, #8
 8008ecc:	e00e      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ece:	2307      	movs	r3, #7
 8008ed0:	e00c      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ed2:	2306      	movs	r3, #6
 8008ed4:	e00a      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ed6:	2305      	movs	r3, #5
 8008ed8:	e008      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008eda:	2304      	movs	r3, #4
 8008edc:	e006      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e004      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e002      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <HAL_GPIO_Init+0x240>
 8008eea:	2300      	movs	r3, #0
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	f002 0203 	and.w	r2, r2, #3
 8008ef2:	0092      	lsls	r2, r2, #2
 8008ef4:	4093      	lsls	r3, r2
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008efc:	4934      	ldr	r1, [pc, #208]	; (8008fd0 <HAL_GPIO_Init+0x324>)
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	089b      	lsrs	r3, r3, #2
 8008f02:	3302      	adds	r3, #2
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f0a:	4b3c      	ldr	r3, [pc, #240]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	43db      	mvns	r3, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	4013      	ands	r3, r2
 8008f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f2e:	4a33      	ldr	r2, [pc, #204]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008f34:	4b31      	ldr	r3, [pc, #196]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	4013      	ands	r3, r2
 8008f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f58:	4a28      	ldr	r2, [pc, #160]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f5e:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	43db      	mvns	r3, r3
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f82:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	4013      	ands	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008fac:	4a13      	ldr	r2, [pc, #76]	; (8008ffc <HAL_GPIO_Init+0x350>)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	61fb      	str	r3, [r7, #28]
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	f67f ae84 	bls.w	8008cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	3724      	adds	r7, #36	; 0x24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	40023800 	.word	0x40023800
 8008fd0:	40013800 	.word	0x40013800
 8008fd4:	40020000 	.word	0x40020000
 8008fd8:	40020400 	.word	0x40020400
 8008fdc:	40020800 	.word	0x40020800
 8008fe0:	40020c00 	.word	0x40020c00
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	40021400 	.word	0x40021400
 8008fec:	40021800 	.word	0x40021800
 8008ff0:	40021c00 	.word	0x40021c00
 8008ff4:	40022000 	.word	0x40022000
 8008ff8:	40022400 	.word	0x40022400
 8008ffc:	40013c00 	.word	0x40013c00

08009000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	887b      	ldrh	r3, [r7, #2]
 8009012:	4013      	ands	r3, r2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e001      	b.n	8009022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	807b      	strh	r3, [r7, #2]
 800903c:	4613      	mov	r3, r2
 800903e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009040:	787b      	ldrb	r3, [r7, #1]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009046:	887a      	ldrh	r2, [r7, #2]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800904c:	e003      	b.n	8009056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	041a      	lsls	r2, r3, #16
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	619a      	str	r2, [r3, #24]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
	...

08009064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800906e:	4b08      	ldr	r3, [pc, #32]	; (8009090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	4013      	ands	r3, r2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800907a:	4a05      	ldr	r2, [pc, #20]	; (8009090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	4618      	mov	r0, r3
 8009084:	f7fb fba7 	bl	80047d6 <HAL_GPIO_EXTI_Callback>
  }
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	40013c00 	.word	0x40013c00

08009094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e11f      	b.n	80092e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7fc fc06 	bl	80058cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2224      	movs	r2, #36	; 0x24
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0201 	bic.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090f8:	f001 f96e 	bl	800a3d8 <HAL_RCC_GetPCLK1Freq>
 80090fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	4a7b      	ldr	r2, [pc, #492]	; (80092f0 <HAL_I2C_Init+0x25c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d807      	bhi.n	8009118 <HAL_I2C_Init+0x84>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a7a      	ldr	r2, [pc, #488]	; (80092f4 <HAL_I2C_Init+0x260>)
 800910c:	4293      	cmp	r3, r2
 800910e:	bf94      	ite	ls
 8009110:	2301      	movls	r3, #1
 8009112:	2300      	movhi	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	e006      	b.n	8009126 <HAL_I2C_Init+0x92>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4a77      	ldr	r2, [pc, #476]	; (80092f8 <HAL_I2C_Init+0x264>)
 800911c:	4293      	cmp	r3, r2
 800911e:	bf94      	ite	ls
 8009120:	2301      	movls	r3, #1
 8009122:	2300      	movhi	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0db      	b.n	80092e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4a72      	ldr	r2, [pc, #456]	; (80092fc <HAL_I2C_Init+0x268>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	0c9b      	lsrs	r3, r3, #18
 8009138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	430a      	orrs	r2, r1
 800914c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4a64      	ldr	r2, [pc, #400]	; (80092f0 <HAL_I2C_Init+0x25c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d802      	bhi.n	8009168 <HAL_I2C_Init+0xd4>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	3301      	adds	r3, #1
 8009166:	e009      	b.n	800917c <HAL_I2C_Init+0xe8>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800916e:	fb02 f303 	mul.w	r3, r2, r3
 8009172:	4a63      	ldr	r2, [pc, #396]	; (8009300 <HAL_I2C_Init+0x26c>)
 8009174:	fba2 2303 	umull	r2, r3, r2, r3
 8009178:	099b      	lsrs	r3, r3, #6
 800917a:	3301      	adds	r3, #1
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	430b      	orrs	r3, r1
 8009182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800918e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	4956      	ldr	r1, [pc, #344]	; (80092f0 <HAL_I2C_Init+0x25c>)
 8009198:	428b      	cmp	r3, r1
 800919a:	d80d      	bhi.n	80091b8 <HAL_I2C_Init+0x124>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	1e59      	subs	r1, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80091aa:	3301      	adds	r3, #1
 80091ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	bf38      	it	cc
 80091b4:	2304      	movcc	r3, #4
 80091b6:	e04f      	b.n	8009258 <HAL_I2C_Init+0x1c4>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d111      	bne.n	80091e4 <HAL_I2C_Init+0x150>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	1e58      	subs	r0, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6859      	ldr	r1, [r3, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	440b      	add	r3, r1
 80091ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80091d2:	3301      	adds	r3, #1
 80091d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf0c      	ite	eq
 80091dc:	2301      	moveq	r3, #1
 80091de:	2300      	movne	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e012      	b.n	800920a <HAL_I2C_Init+0x176>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	1e58      	subs	r0, r3, #1
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6859      	ldr	r1, [r3, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	0099      	lsls	r1, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80091fa:	3301      	adds	r3, #1
 80091fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009200:	2b00      	cmp	r3, #0
 8009202:	bf0c      	ite	eq
 8009204:	2301      	moveq	r3, #1
 8009206:	2300      	movne	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <HAL_I2C_Init+0x17e>
 800920e:	2301      	movs	r3, #1
 8009210:	e022      	b.n	8009258 <HAL_I2C_Init+0x1c4>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10e      	bne.n	8009238 <HAL_I2C_Init+0x1a4>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	1e58      	subs	r0, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6859      	ldr	r1, [r3, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	440b      	add	r3, r1
 8009228:	fbb0 f3f3 	udiv	r3, r0, r3
 800922c:	3301      	adds	r3, #1
 800922e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009236:	e00f      	b.n	8009258 <HAL_I2C_Init+0x1c4>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1e58      	subs	r0, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6859      	ldr	r1, [r3, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	0099      	lsls	r1, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	fbb0 f3f3 	udiv	r3, r0, r3
 800924e:	3301      	adds	r3, #1
 8009250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	6809      	ldr	r1, [r1, #0]
 800925c:	4313      	orrs	r3, r2
 800925e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69da      	ldr	r2, [r3, #28]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6911      	ldr	r1, [r2, #16]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	68d2      	ldr	r2, [r2, #12]
 8009292:	4311      	orrs	r1, r2
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6812      	ldr	r2, [r2, #0]
 8009298:	430b      	orrs	r3, r1
 800929a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	695a      	ldr	r2, [r3, #20]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	000186a0 	.word	0x000186a0
 80092f4:	001e847f 	.word	0x001e847f
 80092f8:	003d08ff 	.word	0x003d08ff
 80092fc:	431bde83 	.word	0x431bde83
 8009300:	10624dd3 	.word	0x10624dd3

08009304 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af02      	add	r7, sp, #8
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	461a      	mov	r2, r3
 8009310:	460b      	mov	r3, r1
 8009312:	817b      	strh	r3, [r7, #10]
 8009314:	4613      	mov	r3, r2
 8009316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009318:	f7fe fbe8 	bl	8007aec <HAL_GetTick>
 800931c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b20      	cmp	r3, #32
 8009328:	f040 80e0 	bne.w	80094ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2319      	movs	r3, #25
 8009332:	2201      	movs	r2, #1
 8009334:	4970      	ldr	r1, [pc, #448]	; (80094f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fc58 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009342:	2302      	movs	r3, #2
 8009344:	e0d3      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_I2C_Master_Transmit+0x50>
 8009350:	2302      	movs	r3, #2
 8009352:	e0cc      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ea>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b01      	cmp	r3, #1
 8009368:	d007      	beq.n	800937a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f042 0201 	orr.w	r2, r2, #1
 8009378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2221      	movs	r2, #33	; 0x21
 800938e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2210      	movs	r2, #16
 8009396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	893a      	ldrh	r2, [r7, #8]
 80093aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	4a50      	ldr	r2, [pc, #320]	; (80094fc <HAL_I2C_Master_Transmit+0x1f8>)
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80093bc:	8979      	ldrh	r1, [r7, #10]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	6a3a      	ldr	r2, [r7, #32]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fac2 	bl	800994c <I2C_MasterRequestWrite>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e08d      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80093e8:	e066      	b.n	80094b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	6a39      	ldr	r1, [r7, #32]
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fcd2 	bl	8009d98 <I2C_WaitOnTXEFlagUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00d      	beq.n	8009416 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d107      	bne.n	8009412 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e06b      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b04      	cmp	r3, #4
 8009452:	d11b      	bne.n	800948c <HAL_I2C_Master_Transmit+0x188>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009458:	2b00      	cmp	r3, #0
 800945a:	d017      	beq.n	800948c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	781a      	ldrb	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009484:	3b01      	subs	r3, #1
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	6a39      	ldr	r1, [r7, #32]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fcc2 	bl	8009e1a <I2C_WaitOnBTFFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00d      	beq.n	80094b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d107      	bne.n	80094b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e01a      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d194      	bne.n	80093ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	00100002 	.word	0x00100002
 80094fc:	ffff0000 	.word	0xffff0000

08009500 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08c      	sub	sp, #48	; 0x30
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	607a      	str	r2, [r7, #4]
 800950a:	461a      	mov	r2, r3
 800950c:	460b      	mov	r3, r1
 800950e:	817b      	strh	r3, [r7, #10]
 8009510:	4613      	mov	r3, r2
 8009512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009514:	f7fe faea 	bl	8007aec <HAL_GetTick>
 8009518:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b20      	cmp	r3, #32
 8009524:	f040 820b 	bne.w	800993e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2319      	movs	r3, #25
 800952e:	2201      	movs	r2, #1
 8009530:	497c      	ldr	r1, [pc, #496]	; (8009724 <HAL_I2C_Master_Receive+0x224>)
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fb5a 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800953e:	2302      	movs	r3, #2
 8009540:	e1fe      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_I2C_Master_Receive+0x50>
 800954c:	2302      	movs	r3, #2
 800954e:	e1f7      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b01      	cmp	r3, #1
 8009564:	d007      	beq.n	8009576 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0201 	orr.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2222      	movs	r2, #34	; 0x22
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2210      	movs	r2, #16
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	893a      	ldrh	r2, [r7, #8]
 80095a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4a5c      	ldr	r2, [pc, #368]	; (8009728 <HAL_I2C_Master_Receive+0x228>)
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80095b8:	8979      	ldrh	r1, [r7, #10]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fa46 	bl	8009a50 <I2C_MasterRequestRead>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e1b8      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d113      	bne.n	80095fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095d6:	2300      	movs	r3, #0
 80095d8:	623b      	str	r3, [r7, #32]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	623b      	str	r3, [r7, #32]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	623b      	str	r3, [r7, #32]
 80095ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	e18c      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009602:	2b01      	cmp	r3, #1
 8009604:	d11b      	bne.n	800963e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009616:	2300      	movs	r3, #0
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	61fb      	str	r3, [r7, #28]
 800962a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	e16c      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009642:	2b02      	cmp	r3, #2
 8009644:	d11b      	bne.n	800967e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009666:	2300      	movs	r3, #0
 8009668:	61bb      	str	r3, [r7, #24]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	61bb      	str	r3, [r7, #24]
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	e14c      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800968c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	617b      	str	r3, [r7, #20]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80096a4:	e138      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	f200 80f1 	bhi.w	8009892 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d123      	bne.n	8009700 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 fbed 	bl	8009e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e139      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096fe:	e10b      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009704:	2b02      	cmp	r3, #2
 8009706:	d14e      	bne.n	80097a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	2200      	movs	r2, #0
 8009710:	4906      	ldr	r1, [pc, #24]	; (800972c <HAL_I2C_Master_Receive+0x22c>)
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fa6a 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d008      	beq.n	8009730 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e10e      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
 8009722:	bf00      	nop
 8009724:	00100002 	.word	0x00100002
 8009728:	ffff0000 	.word	0xffff0000
 800972c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	691a      	ldr	r2, [r3, #16]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	b2d2      	uxtb	r2, r2
 800974c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009768:	b29b      	uxth	r3, r3
 800976a:	3b01      	subs	r3, #1
 800976c:	b29a      	uxth	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977c:	b2d2      	uxtb	r2, r2
 800977e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978e:	3b01      	subs	r3, #1
 8009790:	b29a      	uxth	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800979a:	b29b      	uxth	r3, r3
 800979c:	3b01      	subs	r3, #1
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097a4:	e0b8      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	2200      	movs	r2, #0
 80097ae:	4966      	ldr	r1, [pc, #408]	; (8009948 <HAL_I2C_Master_Receive+0x448>)
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fa1b 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0bf      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	2200      	movs	r2, #0
 800980a:	494f      	ldr	r1, [pc, #316]	; (8009948 <HAL_I2C_Master_Receive+0x448>)
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f9ed 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e091      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800982a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691a      	ldr	r2, [r3, #16]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009886:	b29b      	uxth	r3, r3
 8009888:	3b01      	subs	r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009890:	e042      	b.n	8009918 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 fb00 	bl	8009e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e04c      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	b2d2      	uxtb	r2, r2
 80098b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	f003 0304 	and.w	r3, r3, #4
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d118      	bne.n	8009918 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009902:	3b01      	subs	r3, #1
 8009904:	b29a      	uxth	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990e:	b29b      	uxth	r3, r3
 8009910:	3b01      	subs	r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f aec2 	bne.w	80096a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	e000      	b.n	8009940 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800993e:	2302      	movs	r3, #2
  }
}
 8009940:	4618      	mov	r0, r3
 8009942:	3728      	adds	r7, #40	; 0x28
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	00010004 	.word	0x00010004

0800994c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	460b      	mov	r3, r1
 800995a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b08      	cmp	r3, #8
 8009966:	d006      	beq.n	8009976 <I2C_MasterRequestWrite+0x2a>
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d003      	beq.n	8009976 <I2C_MasterRequestWrite+0x2a>
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009974:	d108      	bne.n	8009988 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e00b      	b.n	80099a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998c:	2b12      	cmp	r3, #18
 800998e:	d107      	bne.n	80099a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800999e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f91d 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00d      	beq.n	80099d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c6:	d103      	bne.n	80099d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e035      	b.n	8009a40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099dc:	d108      	bne.n	80099f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099de:	897b      	ldrh	r3, [r7, #10]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099ec:	611a      	str	r2, [r3, #16]
 80099ee:	e01b      	b.n	8009a28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80099f0:	897b      	ldrh	r3, [r7, #10]
 80099f2:	11db      	asrs	r3, r3, #7
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0306 	and.w	r3, r3, #6
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f063 030f 	orn	r3, r3, #15
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	490e      	ldr	r1, [pc, #56]	; (8009a48 <I2C_MasterRequestWrite+0xfc>)
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f943 	bl	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e010      	b.n	8009a40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a1e:	897b      	ldrh	r3, [r7, #10]
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4907      	ldr	r1, [pc, #28]	; (8009a4c <I2C_MasterRequestWrite+0x100>)
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f000 f933 	bl	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	00010008 	.word	0x00010008
 8009a4c:	00010002 	.word	0x00010002

08009a50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d006      	beq.n	8009a8a <I2C_MasterRequestRead+0x3a>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d003      	beq.n	8009a8a <I2C_MasterRequestRead+0x3a>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a88:	d108      	bne.n	8009a9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e00b      	b.n	8009ab4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa0:	2b11      	cmp	r3, #17
 8009aa2:	d107      	bne.n	8009ab4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ab2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f893 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00d      	beq.n	8009ae8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ada:	d103      	bne.n	8009ae4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e079      	b.n	8009bdc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009af0:	d108      	bne.n	8009b04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009af2:	897b      	ldrh	r3, [r7, #10]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	611a      	str	r2, [r3, #16]
 8009b02:	e05f      	b.n	8009bc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b04:	897b      	ldrh	r3, [r7, #10]
 8009b06:	11db      	asrs	r3, r3, #7
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	f003 0306 	and.w	r3, r3, #6
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f063 030f 	orn	r3, r3, #15
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	4930      	ldr	r1, [pc, #192]	; (8009be4 <I2C_MasterRequestRead+0x194>)
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f8b9 	bl	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e054      	b.n	8009bdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b32:	897b      	ldrh	r3, [r7, #10]
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	4929      	ldr	r1, [pc, #164]	; (8009be8 <I2C_MasterRequestRead+0x198>)
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 f8a9 	bl	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e044      	b.n	8009bdc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b52:	2300      	movs	r3, #0
 8009b54:	613b      	str	r3, [r7, #16]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	613b      	str	r3, [r7, #16]
 8009b66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f831 	bl	8009bec <I2C_WaitOnFlagUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00d      	beq.n	8009bac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9e:	d103      	bne.n	8009ba8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ba6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e017      	b.n	8009bdc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009bac:	897b      	ldrh	r3, [r7, #10]
 8009bae:	11db      	asrs	r3, r3, #7
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 0306 	and.w	r3, r3, #6
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	f063 030e 	orn	r3, r3, #14
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	4907      	ldr	r1, [pc, #28]	; (8009be8 <I2C_MasterRequestRead+0x198>)
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f865 	bl	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	00010008 	.word	0x00010008
 8009be8:	00010002 	.word	0x00010002

08009bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bfc:	e025      	b.n	8009c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d021      	beq.n	8009c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c06:	f7fd ff71 	bl	8007aec <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d302      	bcc.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d116      	bne.n	8009c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	f043 0220 	orr.w	r2, r3, #32
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e023      	b.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	0c1b      	lsrs	r3, r3, #16
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d10d      	bne.n	8009c70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	43da      	mvns	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bf0c      	ite	eq
 8009c66:	2301      	moveq	r3, #1
 8009c68:	2300      	movne	r3, #0
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	e00c      	b.n	8009c8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	43da      	mvns	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bf0c      	ite	eq
 8009c82:	2301      	moveq	r3, #1
 8009c84:	2300      	movne	r3, #0
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	461a      	mov	r2, r3
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d0b6      	beq.n	8009bfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ca8:	e051      	b.n	8009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb8:	d123      	bne.n	8009d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f043 0204 	orr.w	r2, r3, #4
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e046      	b.n	8009d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d021      	beq.n	8009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d0a:	f7fd feef 	bl	8007aec <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d116      	bne.n	8009d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f043 0220 	orr.w	r2, r3, #32
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e020      	b.n	8009d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	0c1b      	lsrs	r3, r3, #16
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d10c      	bne.n	8009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	43da      	mvns	r2, r3
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4013      	ands	r3, r2
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bf14      	ite	ne
 8009d6a:	2301      	movne	r3, #1
 8009d6c:	2300      	moveq	r3, #0
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	e00b      	b.n	8009d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	43da      	mvns	r2, r3
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d18d      	bne.n	8009caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009da4:	e02d      	b.n	8009e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f8ce 	bl	8009f48 <I2C_IsAcknowledgeFailed>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e02d      	b.n	8009e12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbc:	d021      	beq.n	8009e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dbe:	f7fd fe95 	bl	8007aec <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d302      	bcc.n	8009dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d116      	bne.n	8009e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e007      	b.n	8009e12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0c:	2b80      	cmp	r3, #128	; 0x80
 8009e0e:	d1ca      	bne.n	8009da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e26:	e02d      	b.n	8009e84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f88d 	bl	8009f48 <I2C_IsAcknowledgeFailed>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e02d      	b.n	8009e94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d021      	beq.n	8009e84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e40:	f7fd fe54 	bl	8007aec <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d302      	bcc.n	8009e56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d116      	bne.n	8009e84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	f043 0220 	orr.w	r2, r3, #32
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e007      	b.n	8009e94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d1ca      	bne.n	8009e28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ea8:	e042      	b.n	8009f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b10      	cmp	r3, #16
 8009eb6:	d119      	bne.n	8009eec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0210 	mvn.w	r2, #16
 8009ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e029      	b.n	8009f40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eec:	f7fd fdfe 	bl	8007aec <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d302      	bcc.n	8009f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d116      	bne.n	8009f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1c:	f043 0220 	orr.w	r2, r3, #32
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e007      	b.n	8009f40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3a:	2b40      	cmp	r3, #64	; 0x40
 8009f3c:	d1b5      	bne.n	8009eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f5e:	d11b      	bne.n	8009f98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f84:	f043 0204 	orr.w	r2, r3, #4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	603b      	str	r3, [r7, #0]
 8009fb6:	4b20      	ldr	r3, [pc, #128]	; (800a038 <HAL_PWREx_EnableOverDrive+0x90>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	4a1f      	ldr	r2, [pc, #124]	; (800a038 <HAL_PWREx_EnableOverDrive+0x90>)
 8009fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8009fc2:	4b1d      	ldr	r3, [pc, #116]	; (800a038 <HAL_PWREx_EnableOverDrive+0x90>)
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009fce:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <HAL_PWREx_EnableOverDrive+0x94>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fd4:	f7fd fd8a 	bl	8007aec <HAL_GetTick>
 8009fd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009fda:	e009      	b.n	8009ff0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009fdc:	f7fd fd86 	bl	8007aec <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fea:	d901      	bls.n	8009ff0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e01f      	b.n	800a030 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009ff0:	4b13      	ldr	r3, [pc, #76]	; (800a040 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffc:	d1ee      	bne.n	8009fdc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a000:	2201      	movs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a004:	f7fd fd72 	bl	8007aec <HAL_GetTick>
 800a008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a00a:	e009      	b.n	800a020 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a00c:	f7fd fd6e 	bl	8007aec <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a01a:	d901      	bls.n	800a020 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e007      	b.n	800a030 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <HAL_PWREx_EnableOverDrive+0x98>)
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a02c:	d1ee      	bne.n	800a00c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40023800 	.word	0x40023800
 800a03c:	420e0040 	.word	0x420e0040
 800a040:	40007000 	.word	0x40007000
 800a044:	420e0044 	.word	0x420e0044

0800a048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e0cc      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a05c:	4b68      	ldr	r3, [pc, #416]	; (800a200 <HAL_RCC_ClockConfig+0x1b8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 030f 	and.w	r3, r3, #15
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d90c      	bls.n	800a084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a06a:	4b65      	ldr	r3, [pc, #404]	; (800a200 <HAL_RCC_ClockConfig+0x1b8>)
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a072:	4b63      	ldr	r3, [pc, #396]	; (800a200 <HAL_RCC_ClockConfig+0x1b8>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 030f 	and.w	r3, r3, #15
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d001      	beq.n	800a084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e0b8      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d020      	beq.n	800a0d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a09c:	4b59      	ldr	r3, [pc, #356]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	4a58      	ldr	r2, [pc, #352]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a0a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a0a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0308 	and.w	r3, r3, #8
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a0b4:	4b53      	ldr	r3, [pc, #332]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	4a52      	ldr	r2, [pc, #328]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a0be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0c0:	4b50      	ldr	r3, [pc, #320]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	494d      	ldr	r1, [pc, #308]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d044      	beq.n	800a168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d107      	bne.n	800a0f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0e6:	4b47      	ldr	r3, [pc, #284]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d119      	bne.n	800a126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e07f      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d003      	beq.n	800a106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a102:	2b03      	cmp	r3, #3
 800a104:	d107      	bne.n	800a116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a106:	4b3f      	ldr	r3, [pc, #252]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e06f      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a116:	4b3b      	ldr	r3, [pc, #236]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e067      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a126:	4b37      	ldr	r3, [pc, #220]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f023 0203 	bic.w	r2, r3, #3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	4934      	ldr	r1, [pc, #208]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a134:	4313      	orrs	r3, r2
 800a136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a138:	f7fd fcd8 	bl	8007aec <HAL_GetTick>
 800a13c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a13e:	e00a      	b.n	800a156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a140:	f7fd fcd4 	bl	8007aec <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a14e:	4293      	cmp	r3, r2
 800a150:	d901      	bls.n	800a156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e04f      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a156:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f003 020c 	and.w	r2, r3, #12
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	429a      	cmp	r2, r3
 800a166:	d1eb      	bne.n	800a140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a168:	4b25      	ldr	r3, [pc, #148]	; (800a200 <HAL_RCC_ClockConfig+0x1b8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d20c      	bcs.n	800a190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a176:	4b22      	ldr	r3, [pc, #136]	; (800a200 <HAL_RCC_ClockConfig+0x1b8>)
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a17e:	4b20      	ldr	r3, [pc, #128]	; (800a200 <HAL_RCC_ClockConfig+0x1b8>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d001      	beq.n	800a190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e032      	b.n	800a1f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d008      	beq.n	800a1ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a19c:	4b19      	ldr	r3, [pc, #100]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	4916      	ldr	r1, [pc, #88]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0308 	and.w	r3, r3, #8
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	490e      	ldr	r1, [pc, #56]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a1ce:	f000 f821 	bl	800a214 <HAL_RCC_GetSysClockFreq>
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	091b      	lsrs	r3, r3, #4
 800a1da:	f003 030f 	and.w	r3, r3, #15
 800a1de:	4a0a      	ldr	r2, [pc, #40]	; (800a208 <HAL_RCC_ClockConfig+0x1c0>)
 800a1e0:	5cd3      	ldrb	r3, [r2, r3]
 800a1e2:	fa21 f303 	lsr.w	r3, r1, r3
 800a1e6:	4a09      	ldr	r2, [pc, #36]	; (800a20c <HAL_RCC_ClockConfig+0x1c4>)
 800a1e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <HAL_RCC_ClockConfig+0x1c8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fd fc38 	bl	8007a64 <HAL_InitTick>

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	40023c00 	.word	0x40023c00
 800a204:	40023800 	.word	0x40023800
 800a208:	080189d4 	.word	0x080189d4
 800a20c:	20000000 	.word	0x20000000
 800a210:	20000004 	.word	0x20000004

0800a214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	2300      	movs	r3, #0
 800a224:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a22a:	4b63      	ldr	r3, [pc, #396]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f003 030c 	and.w	r3, r3, #12
 800a232:	2b04      	cmp	r3, #4
 800a234:	d007      	beq.n	800a246 <HAL_RCC_GetSysClockFreq+0x32>
 800a236:	2b08      	cmp	r3, #8
 800a238:	d008      	beq.n	800a24c <HAL_RCC_GetSysClockFreq+0x38>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f040 80b4 	bne.w	800a3a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a240:	4b5e      	ldr	r3, [pc, #376]	; (800a3bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a242:	60bb      	str	r3, [r7, #8]
       break;
 800a244:	e0b3      	b.n	800a3ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a246:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a248:	60bb      	str	r3, [r7, #8]
      break;
 800a24a:	e0b0      	b.n	800a3ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a24c:	4b5a      	ldr	r3, [pc, #360]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a254:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a256:	4b58      	ldr	r3, [pc, #352]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d04a      	beq.n	800a2f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a262:	4b55      	ldr	r3, [pc, #340]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	099b      	lsrs	r3, r3, #6
 800a268:	f04f 0400 	mov.w	r4, #0
 800a26c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	ea03 0501 	and.w	r5, r3, r1
 800a278:	ea04 0602 	and.w	r6, r4, r2
 800a27c:	4629      	mov	r1, r5
 800a27e:	4632      	mov	r2, r6
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	f04f 0400 	mov.w	r4, #0
 800a288:	0154      	lsls	r4, r2, #5
 800a28a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a28e:	014b      	lsls	r3, r1, #5
 800a290:	4619      	mov	r1, r3
 800a292:	4622      	mov	r2, r4
 800a294:	1b49      	subs	r1, r1, r5
 800a296:	eb62 0206 	sbc.w	r2, r2, r6
 800a29a:	f04f 0300 	mov.w	r3, #0
 800a29e:	f04f 0400 	mov.w	r4, #0
 800a2a2:	0194      	lsls	r4, r2, #6
 800a2a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a2a8:	018b      	lsls	r3, r1, #6
 800a2aa:	1a5b      	subs	r3, r3, r1
 800a2ac:	eb64 0402 	sbc.w	r4, r4, r2
 800a2b0:	f04f 0100 	mov.w	r1, #0
 800a2b4:	f04f 0200 	mov.w	r2, #0
 800a2b8:	00e2      	lsls	r2, r4, #3
 800a2ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a2be:	00d9      	lsls	r1, r3, #3
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4614      	mov	r4, r2
 800a2c4:	195b      	adds	r3, r3, r5
 800a2c6:	eb44 0406 	adc.w	r4, r4, r6
 800a2ca:	f04f 0100 	mov.w	r1, #0
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	02a2      	lsls	r2, r4, #10
 800a2d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a2d8:	0299      	lsls	r1, r3, #10
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f04f 0400 	mov.w	r4, #0
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4623      	mov	r3, r4
 800a2ec:	f7f6 fce4 	bl	8000cb8 <__aeabi_uldivmod>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	e049      	b.n	800a38c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2f8:	4b2f      	ldr	r3, [pc, #188]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	099b      	lsrs	r3, r3, #6
 800a2fe:	f04f 0400 	mov.w	r4, #0
 800a302:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a306:	f04f 0200 	mov.w	r2, #0
 800a30a:	ea03 0501 	and.w	r5, r3, r1
 800a30e:	ea04 0602 	and.w	r6, r4, r2
 800a312:	4629      	mov	r1, r5
 800a314:	4632      	mov	r2, r6
 800a316:	f04f 0300 	mov.w	r3, #0
 800a31a:	f04f 0400 	mov.w	r4, #0
 800a31e:	0154      	lsls	r4, r2, #5
 800a320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a324:	014b      	lsls	r3, r1, #5
 800a326:	4619      	mov	r1, r3
 800a328:	4622      	mov	r2, r4
 800a32a:	1b49      	subs	r1, r1, r5
 800a32c:	eb62 0206 	sbc.w	r2, r2, r6
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	f04f 0400 	mov.w	r4, #0
 800a338:	0194      	lsls	r4, r2, #6
 800a33a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a33e:	018b      	lsls	r3, r1, #6
 800a340:	1a5b      	subs	r3, r3, r1
 800a342:	eb64 0402 	sbc.w	r4, r4, r2
 800a346:	f04f 0100 	mov.w	r1, #0
 800a34a:	f04f 0200 	mov.w	r2, #0
 800a34e:	00e2      	lsls	r2, r4, #3
 800a350:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a354:	00d9      	lsls	r1, r3, #3
 800a356:	460b      	mov	r3, r1
 800a358:	4614      	mov	r4, r2
 800a35a:	195b      	adds	r3, r3, r5
 800a35c:	eb44 0406 	adc.w	r4, r4, r6
 800a360:	f04f 0100 	mov.w	r1, #0
 800a364:	f04f 0200 	mov.w	r2, #0
 800a368:	02a2      	lsls	r2, r4, #10
 800a36a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a36e:	0299      	lsls	r1, r3, #10
 800a370:	460b      	mov	r3, r1
 800a372:	4614      	mov	r4, r2
 800a374:	4618      	mov	r0, r3
 800a376:	4621      	mov	r1, r4
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f04f 0400 	mov.w	r4, #0
 800a37e:	461a      	mov	r2, r3
 800a380:	4623      	mov	r3, r4
 800a382:	f7f6 fc99 	bl	8000cb8 <__aeabi_uldivmod>
 800a386:	4603      	mov	r3, r0
 800a388:	460c      	mov	r4, r1
 800a38a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	0c1b      	lsrs	r3, r3, #16
 800a392:	f003 0303 	and.w	r3, r3, #3
 800a396:	3301      	adds	r3, #1
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a4:	60bb      	str	r3, [r7, #8]
      break;
 800a3a6:	e002      	b.n	800a3ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a3a8:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a3aa:	60bb      	str	r3, [r7, #8]
      break;
 800a3ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b8:	40023800 	.word	0x40023800
 800a3bc:	00f42400 	.word	0x00f42400

0800a3c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20000000 	.word	0x20000000

0800a3d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a3dc:	f7ff fff0 	bl	800a3c0 <HAL_RCC_GetHCLKFreq>
 800a3e0:	4601      	mov	r1, r0
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	0a9b      	lsrs	r3, r3, #10
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	4a03      	ldr	r2, [pc, #12]	; (800a3fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3ee:	5cd3      	ldrb	r3, [r2, r3]
 800a3f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	40023800 	.word	0x40023800
 800a3fc:	080189e4 	.word	0x080189e4

0800a400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a404:	f7ff ffdc 	bl	800a3c0 <HAL_RCC_GetHCLKFreq>
 800a408:	4601      	mov	r1, r0
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	0b5b      	lsrs	r3, r3, #13
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	4a03      	ldr	r2, [pc, #12]	; (800a424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a416:	5cd3      	ldrb	r3, [r2, r3]
 800a418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	40023800 	.word	0x40023800
 800a424:	080189e4 	.word	0x080189e4

0800a428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00a      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a450:	4b66      	ldr	r3, [pc, #408]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a456:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45e:	4963      	ldr	r1, [pc, #396]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a460:	4313      	orrs	r3, r2
 800a462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a472:	4b5e      	ldr	r3, [pc, #376]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a478:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	495a      	ldr	r1, [pc, #360]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a482:	4313      	orrs	r3, r2
 800a484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10b      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d105      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d075      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a4ac:	4b50      	ldr	r3, [pc, #320]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4b2:	f7fd fb1b 	bl	8007aec <HAL_GetTick>
 800a4b6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4b8:	e008      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a4ba:	f7fd fb17 	bl	8007aec <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d901      	bls.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e1dc      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a4cc:	4b47      	ldr	r3, [pc, #284]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1f0      	bne.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d009      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	019a      	lsls	r2, r3, #6
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	071b      	lsls	r3, r3, #28
 800a4f0:	493e      	ldr	r1, [pc, #248]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	2b00      	cmp	r3, #0
 800a502:	d01f      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a504:	4b39      	ldr	r3, [pc, #228]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50a:	0f1b      	lsrs	r3, r3, #28
 800a50c:	f003 0307 	and.w	r3, r3, #7
 800a510:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	019a      	lsls	r2, r3, #6
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	061b      	lsls	r3, r3, #24
 800a51e:	431a      	orrs	r2, r3
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	071b      	lsls	r3, r3, #28
 800a524:	4931      	ldr	r1, [pc, #196]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a526:	4313      	orrs	r3, r2
 800a528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a52c:	4b2f      	ldr	r3, [pc, #188]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a52e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a532:	f023 021f 	bic.w	r2, r3, #31
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	492b      	ldr	r1, [pc, #172]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00d      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	019a      	lsls	r2, r3, #6
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	061b      	lsls	r3, r3, #24
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	071b      	lsls	r3, r3, #28
 800a564:	4921      	ldr	r1, [pc, #132]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a566:	4313      	orrs	r3, r2
 800a568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a56c:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a56e:	2201      	movs	r2, #1
 800a570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a572:	f7fd fabb 	bl	8007aec <HAL_GetTick>
 800a576:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a578:	e008      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a57a:	f7fd fab7 	bl	8007aec <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d901      	bls.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e17c      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a58c:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d0f0      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d112      	bne.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10c      	bne.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 80ce 	beq.w	800a75a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a5c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5c6:	f040 80c8 	bne.w	800a75a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a5ca:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a5d0:	f7fd fa8c 	bl	8007aec <HAL_GetTick>
 800a5d4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a5d6:	e00f      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a5d8:	f7fd fa88 	bl	8007aec <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d908      	bls.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e14d      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a5ea:	bf00      	nop
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	42470068 	.word	0x42470068
 800a5f4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a5f8:	4ba5      	ldr	r3, [pc, #660]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a604:	d0e8      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 0304 	and.w	r3, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d02e      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a612:	4b9f      	ldr	r3, [pc, #636]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a618:	0c1b      	lsrs	r3, r3, #16
 800a61a:	f003 0303 	and.w	r3, r3, #3
 800a61e:	3301      	adds	r3, #1
 800a620:	005b      	lsls	r3, r3, #1
 800a622:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62a:	0f1b      	lsrs	r3, r3, #28
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	019a      	lsls	r2, r3, #6
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	085b      	lsrs	r3, r3, #1
 800a63c:	3b01      	subs	r3, #1
 800a63e:	041b      	lsls	r3, r3, #16
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	061b      	lsls	r3, r3, #24
 800a648:	431a      	orrs	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	071b      	lsls	r3, r3, #28
 800a64e:	4990      	ldr	r1, [pc, #576]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a650:	4313      	orrs	r3, r2
 800a652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a656:	4b8e      	ldr	r3, [pc, #568]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a65c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	3b01      	subs	r3, #1
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	4989      	ldr	r1, [pc, #548]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0308 	and.w	r3, r3, #8
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d02c      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a67c:	4b84      	ldr	r3, [pc, #528]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	f003 0303 	and.w	r3, r3, #3
 800a688:	3301      	adds	r3, #1
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a68e:	4b80      	ldr	r3, [pc, #512]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a694:	0e1b      	lsrs	r3, r3, #24
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	019a      	lsls	r2, r3, #6
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	085b      	lsrs	r3, r3, #1
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	041b      	lsls	r3, r3, #16
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	071b      	lsls	r3, r3, #28
 800a6b8:	4975      	ldr	r1, [pc, #468]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a6c0:	4b73      	ldr	r3, [pc, #460]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ce:	4970      	ldr	r1, [pc, #448]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d024      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a6e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ea:	d11f      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a6ec:	4b68      	ldr	r3, [pc, #416]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f2:	0e1b      	lsrs	r3, r3, #24
 800a6f4:	f003 030f 	and.w	r3, r3, #15
 800a6f8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a6fa:	4b65      	ldr	r3, [pc, #404]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a700:	0f1b      	lsrs	r3, r3, #28
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	019a      	lsls	r2, r3, #6
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	3b01      	subs	r3, #1
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	431a      	orrs	r2, r3
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	061b      	lsls	r3, r3, #24
 800a71e:	431a      	orrs	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	071b      	lsls	r3, r3, #28
 800a724:	495a      	ldr	r1, [pc, #360]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a726:	4313      	orrs	r3, r2
 800a728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a72c:	4b59      	ldr	r3, [pc, #356]	; (800a894 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a732:	f7fd f9db 	bl	8007aec <HAL_GetTick>
 800a736:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a738:	e008      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a73a:	f7fd f9d7 	bl	8007aec <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b02      	cmp	r3, #2
 800a746:	d901      	bls.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e09c      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a74c:	4b50      	ldr	r3, [pc, #320]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a758:	d1ef      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 8083 	beq.w	800a86e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a768:	2300      	movs	r3, #0
 800a76a:	60bb      	str	r3, [r7, #8]
 800a76c:	4b48      	ldr	r3, [pc, #288]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	4a47      	ldr	r2, [pc, #284]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a776:	6413      	str	r3, [r2, #64]	; 0x40
 800a778:	4b45      	ldr	r3, [pc, #276]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a780:	60bb      	str	r3, [r7, #8]
 800a782:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a784:	4b44      	ldr	r3, [pc, #272]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a43      	ldr	r2, [pc, #268]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a78a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a78e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a790:	f7fd f9ac 	bl	8007aec <HAL_GetTick>
 800a794:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a796:	e008      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a798:	f7fd f9a8 	bl	8007aec <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d901      	bls.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e06d      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a7aa:	4b3b      	ldr	r3, [pc, #236]	; (800a898 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0f0      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a7b6:	4b36      	ldr	r3, [pc, #216]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7be:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d02f      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d028      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7d4:	4b2e      	ldr	r3, [pc, #184]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7dc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a7de:	4b2f      	ldr	r3, [pc, #188]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a7e4:	4b2d      	ldr	r3, [pc, #180]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a7ea:	4a29      	ldr	r2, [pc, #164]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a7f0:	4b27      	ldr	r3, [pc, #156]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d114      	bne.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a7fc:	f7fd f976 	bl	8007aec <HAL_GetTick>
 800a800:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a802:	e00a      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a804:	f7fd f972 	bl	8007aec <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a812:	4293      	cmp	r3, r2
 800a814:	d901      	bls.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e035      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a81a:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81e:	f003 0302 	and.w	r3, r3, #2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0ee      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a82e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a832:	d10d      	bne.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a834:	4b16      	ldr	r3, [pc, #88]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a848:	4911      	ldr	r1, [pc, #68]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	608b      	str	r3, [r1, #8]
 800a84e:	e005      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a850:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	4a0e      	ldr	r2, [pc, #56]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a856:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a85a:	6093      	str	r3, [r2, #8]
 800a85c:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a85e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a868:	4909      	ldr	r1, [pc, #36]	; (800a890 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0310 	and.w	r3, r3, #16
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a882:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	40023800 	.word	0x40023800
 800a894:	42470070 	.word	0x42470070
 800a898:	40007000 	.word	0x40007000
 800a89c:	42470e40 	.word	0x42470e40
 800a8a0:	424711e0 	.word	0x424711e0

0800a8a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d075      	beq.n	800a9a8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a8bc:	4ba2      	ldr	r3, [pc, #648]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f003 030c 	and.w	r3, r3, #12
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d00c      	beq.n	800a8e2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a8c8:	4b9f      	ldr	r3, [pc, #636]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d112      	bne.n	800a8fa <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a8d4:	4b9c      	ldr	r3, [pc, #624]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8e0:	d10b      	bne.n	800a8fa <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8e2:	4b99      	ldr	r3, [pc, #612]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d05b      	beq.n	800a9a6 <HAL_RCC_OscConfig+0x102>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d157      	bne.n	800a9a6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e20b      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a902:	d106      	bne.n	800a912 <HAL_RCC_OscConfig+0x6e>
 800a904:	4b90      	ldr	r3, [pc, #576]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a8f      	ldr	r2, [pc, #572]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a90a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	e01d      	b.n	800a94e <HAL_RCC_OscConfig+0xaa>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a91a:	d10c      	bne.n	800a936 <HAL_RCC_OscConfig+0x92>
 800a91c:	4b8a      	ldr	r3, [pc, #552]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a89      	ldr	r2, [pc, #548]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	4b87      	ldr	r3, [pc, #540]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a86      	ldr	r2, [pc, #536]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a92e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	e00b      	b.n	800a94e <HAL_RCC_OscConfig+0xaa>
 800a936:	4b84      	ldr	r3, [pc, #528]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a83      	ldr	r2, [pc, #524]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a93c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	4b81      	ldr	r3, [pc, #516]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a80      	ldr	r2, [pc, #512]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a94c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d013      	beq.n	800a97e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a956:	f7fd f8c9 	bl	8007aec <HAL_GetTick>
 800a95a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a95c:	e008      	b.n	800a970 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a95e:	f7fd f8c5 	bl	8007aec <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2b64      	cmp	r3, #100	; 0x64
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e1d0      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a970:	4b75      	ldr	r3, [pc, #468]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0f0      	beq.n	800a95e <HAL_RCC_OscConfig+0xba>
 800a97c:	e014      	b.n	800a9a8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a97e:	f7fd f8b5 	bl	8007aec <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a984:	e008      	b.n	800a998 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a986:	f7fd f8b1 	bl	8007aec <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b64      	cmp	r3, #100	; 0x64
 800a992:	d901      	bls.n	800a998 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e1bc      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a998:	4b6b      	ldr	r3, [pc, #428]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1f0      	bne.n	800a986 <HAL_RCC_OscConfig+0xe2>
 800a9a4:	e000      	b.n	800a9a8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d063      	beq.n	800aa7c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a9b4:	4b64      	ldr	r3, [pc, #400]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 030c 	and.w	r3, r3, #12
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a9c0:	4b61      	ldr	r3, [pc, #388]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d11c      	bne.n	800aa06 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a9cc:	4b5e      	ldr	r3, [pc, #376]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d116      	bne.n	800aa06 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9d8:	4b5b      	ldr	r3, [pc, #364]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x14c>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d001      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e190      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f0:	4b55      	ldr	r3, [pc, #340]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	4952      	ldr	r1, [pc, #328]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aa00:	4313      	orrs	r3, r2
 800aa02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa04:	e03a      	b.n	800aa7c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d020      	beq.n	800aa50 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa0e:	4b4f      	ldr	r3, [pc, #316]	; (800ab4c <HAL_RCC_OscConfig+0x2a8>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa14:	f7fd f86a 	bl	8007aec <HAL_GetTick>
 800aa18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa1c:	f7fd f866 	bl	8007aec <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e171      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa2e:	4b46      	ldr	r3, [pc, #280]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0f0      	beq.n	800aa1c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa3a:	4b43      	ldr	r3, [pc, #268]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	493f      	ldr	r1, [pc, #252]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	600b      	str	r3, [r1, #0]
 800aa4e:	e015      	b.n	800aa7c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa50:	4b3e      	ldr	r3, [pc, #248]	; (800ab4c <HAL_RCC_OscConfig+0x2a8>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa56:	f7fd f849 	bl	8007aec <HAL_GetTick>
 800aa5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa5c:	e008      	b.n	800aa70 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa5e:	f7fd f845 	bl	8007aec <HAL_GetTick>
 800aa62:	4602      	mov	r2, r0
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d901      	bls.n	800aa70 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e150      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa70:	4b35      	ldr	r3, [pc, #212]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1f0      	bne.n	800aa5e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d030      	beq.n	800aaea <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d016      	beq.n	800aabe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa90:	4b2f      	ldr	r3, [pc, #188]	; (800ab50 <HAL_RCC_OscConfig+0x2ac>)
 800aa92:	2201      	movs	r2, #1
 800aa94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa96:	f7fd f829 	bl	8007aec <HAL_GetTick>
 800aa9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa9c:	e008      	b.n	800aab0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa9e:	f7fd f825 	bl	8007aec <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d901      	bls.n	800aab0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e130      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aab0:	4b25      	ldr	r3, [pc, #148]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aab4:	f003 0302 	and.w	r3, r3, #2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d0f0      	beq.n	800aa9e <HAL_RCC_OscConfig+0x1fa>
 800aabc:	e015      	b.n	800aaea <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aabe:	4b24      	ldr	r3, [pc, #144]	; (800ab50 <HAL_RCC_OscConfig+0x2ac>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aac4:	f7fd f812 	bl	8007aec <HAL_GetTick>
 800aac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaca:	e008      	b.n	800aade <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aacc:	f7fd f80e 	bl	8007aec <HAL_GetTick>
 800aad0:	4602      	mov	r2, r0
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d901      	bls.n	800aade <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e119      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aade:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1f0      	bne.n	800aacc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0304 	and.w	r3, r3, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 809f 	beq.w	800ac36 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aafc:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800aafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10f      	bne.n	800ab28 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab10:	4a0d      	ldr	r2, [pc, #52]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800ab12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab16:	6413      	str	r3, [r2, #64]	; 0x40
 800ab18:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <HAL_RCC_OscConfig+0x2a4>)
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab20:	60fb      	str	r3, [r7, #12]
 800ab22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ab24:	2301      	movs	r3, #1
 800ab26:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <HAL_RCC_OscConfig+0x2b0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d120      	bne.n	800ab76 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab34:	4b07      	ldr	r3, [pc, #28]	; (800ab54 <HAL_RCC_OscConfig+0x2b0>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a06      	ldr	r2, [pc, #24]	; (800ab54 <HAL_RCC_OscConfig+0x2b0>)
 800ab3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab40:	f7fc ffd4 	bl	8007aec <HAL_GetTick>
 800ab44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab46:	e010      	b.n	800ab6a <HAL_RCC_OscConfig+0x2c6>
 800ab48:	40023800 	.word	0x40023800
 800ab4c:	42470000 	.word	0x42470000
 800ab50:	42470e80 	.word	0x42470e80
 800ab54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab58:	f7fc ffc8 	bl	8007aec <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d901      	bls.n	800ab6a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e0d3      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab6a:	4b6c      	ldr	r3, [pc, #432]	; (800ad1c <HAL_RCC_OscConfig+0x478>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0f0      	beq.n	800ab58 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d106      	bne.n	800ab8c <HAL_RCC_OscConfig+0x2e8>
 800ab7e:	4b68      	ldr	r3, [pc, #416]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	4a67      	ldr	r2, [pc, #412]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ab84:	f043 0301 	orr.w	r3, r3, #1
 800ab88:	6713      	str	r3, [r2, #112]	; 0x70
 800ab8a:	e01c      	b.n	800abc6 <HAL_RCC_OscConfig+0x322>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	2b05      	cmp	r3, #5
 800ab92:	d10c      	bne.n	800abae <HAL_RCC_OscConfig+0x30a>
 800ab94:	4b62      	ldr	r3, [pc, #392]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ab96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab98:	4a61      	ldr	r2, [pc, #388]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ab9a:	f043 0304 	orr.w	r3, r3, #4
 800ab9e:	6713      	str	r3, [r2, #112]	; 0x70
 800aba0:	4b5f      	ldr	r3, [pc, #380]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800aba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba4:	4a5e      	ldr	r2, [pc, #376]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	6713      	str	r3, [r2, #112]	; 0x70
 800abac:	e00b      	b.n	800abc6 <HAL_RCC_OscConfig+0x322>
 800abae:	4b5c      	ldr	r3, [pc, #368]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800abb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb2:	4a5b      	ldr	r2, [pc, #364]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800abb4:	f023 0301 	bic.w	r3, r3, #1
 800abb8:	6713      	str	r3, [r2, #112]	; 0x70
 800abba:	4b59      	ldr	r3, [pc, #356]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800abbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbe:	4a58      	ldr	r2, [pc, #352]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800abc0:	f023 0304 	bic.w	r3, r3, #4
 800abc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d015      	beq.n	800abfa <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abce:	f7fc ff8d 	bl	8007aec <HAL_GetTick>
 800abd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abd4:	e00a      	b.n	800abec <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abd6:	f7fc ff89 	bl	8007aec <HAL_GetTick>
 800abda:	4602      	mov	r2, r0
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d901      	bls.n	800abec <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e092      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abec:	4b4c      	ldr	r3, [pc, #304]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800abee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf0:	f003 0302 	and.w	r3, r3, #2
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0ee      	beq.n	800abd6 <HAL_RCC_OscConfig+0x332>
 800abf8:	e014      	b.n	800ac24 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abfa:	f7fc ff77 	bl	8007aec <HAL_GetTick>
 800abfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac00:	e00a      	b.n	800ac18 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac02:	f7fc ff73 	bl	8007aec <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d901      	bls.n	800ac18 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e07c      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac18:	4b41      	ldr	r3, [pc, #260]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ac1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1ee      	bne.n	800ac02 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d105      	bne.n	800ac36 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac2a:	4b3d      	ldr	r3, [pc, #244]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	4a3c      	ldr	r2, [pc, #240]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ac30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d068      	beq.n	800ad10 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac3e:	4b38      	ldr	r3, [pc, #224]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f003 030c 	and.w	r3, r3, #12
 800ac46:	2b08      	cmp	r3, #8
 800ac48:	d060      	beq.n	800ad0c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d145      	bne.n	800acde <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac52:	4b34      	ldr	r3, [pc, #208]	; (800ad24 <HAL_RCC_OscConfig+0x480>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac58:	f7fc ff48 	bl	8007aec <HAL_GetTick>
 800ac5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac5e:	e008      	b.n	800ac72 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac60:	f7fc ff44 	bl	8007aec <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d901      	bls.n	800ac72 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e04f      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac72:	4b2b      	ldr	r3, [pc, #172]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f0      	bne.n	800ac60 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	69da      	ldr	r2, [r3, #28]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	431a      	orrs	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	019b      	lsls	r3, r3, #6
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	3b01      	subs	r3, #1
 800ac98:	041b      	lsls	r3, r3, #16
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	061b      	lsls	r3, r3, #24
 800aca2:	431a      	orrs	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca8:	071b      	lsls	r3, r3, #28
 800acaa:	491d      	ldr	r1, [pc, #116]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800acac:	4313      	orrs	r3, r2
 800acae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acb0:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <HAL_RCC_OscConfig+0x480>)
 800acb2:	2201      	movs	r2, #1
 800acb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acb6:	f7fc ff19 	bl	8007aec <HAL_GetTick>
 800acba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acbc:	e008      	b.n	800acd0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acbe:	f7fc ff15 	bl	8007aec <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d901      	bls.n	800acd0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e020      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acd0:	4b13      	ldr	r3, [pc, #76]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0f0      	beq.n	800acbe <HAL_RCC_OscConfig+0x41a>
 800acdc:	e018      	b.n	800ad10 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acde:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <HAL_RCC_OscConfig+0x480>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace4:	f7fc ff02 	bl	8007aec <HAL_GetTick>
 800ace8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acea:	e008      	b.n	800acfe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acec:	f7fc fefe 	bl	8007aec <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d901      	bls.n	800acfe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e009      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acfe:	4b08      	ldr	r3, [pc, #32]	; (800ad20 <HAL_RCC_OscConfig+0x47c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1f0      	bne.n	800acec <HAL_RCC_OscConfig+0x448>
 800ad0a:	e001      	b.n	800ad10 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e000      	b.n	800ad12 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	40007000 	.word	0x40007000
 800ad20:	40023800 	.word	0x40023800
 800ad24:	42470060 	.word	0x42470060

0800ad28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e022      	b.n	800ad80 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7fa fe39 	bl	80059c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2203      	movs	r2, #3
 800ad56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f814 	bl	800ad88 <HAL_SD_InitCard>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e00a      	b.n	800ad80 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad88:	b5b0      	push	{r4, r5, r7, lr}
 800ad8a:	b08e      	sub	sp, #56	; 0x38
 800ad8c:	af04      	add	r7, sp, #16
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ada4:	2376      	movs	r3, #118	; 0x76
 800ada6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681d      	ldr	r5, [r3, #0]
 800adac:	466c      	mov	r4, sp
 800adae:	f107 0314 	add.w	r3, r7, #20
 800adb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800adb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800adba:	f107 0308 	add.w	r3, r7, #8
 800adbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adc0:	4628      	mov	r0, r5
 800adc2:	f003 fa87 	bl	800e2d4 <SDIO_Init>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800adcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e031      	b.n	800ae3c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800add8:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <HAL_SD_InitCard+0xbc>)
 800adda:	2200      	movs	r2, #0
 800addc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f003 fabf 	bl	800e366 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ade8:	4b16      	ldr	r3, [pc, #88]	; (800ae44 <HAL_SD_InitCard+0xbc>)
 800adea:	2201      	movs	r2, #1
 800adec:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 ffc6 	bl	800bd80 <SD_PowerON>
 800adf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00b      	beq.n	800ae14 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e013      	b.n	800ae3c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fee5 	bl	800bbe4 <SD_InitCard>
 800ae1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00b      	beq.n	800ae3a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	431a      	orrs	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3728      	adds	r7, #40	; 0x28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bdb0      	pop	{r4, r5, r7, pc}
 800ae44:	422580a0 	.word	0x422580a0

0800ae48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08c      	sub	sp, #48	; 0x30
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d107      	bne.n	800ae70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e0c7      	b.n	800b000 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	f040 80c0 	bne.w	800affe <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ae84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	441a      	add	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d907      	bls.n	800aea2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e0ae      	b.n	800b000 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2203      	movs	r2, #3
 800aea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800aec0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	4a50      	ldr	r2, [pc, #320]	; (800b008 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	4a4f      	ldr	r2, [pc, #316]	; (800b00c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800aed0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	2200      	movs	r2, #0
 800aed8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3380      	adds	r3, #128	; 0x80
 800aee4:	4619      	mov	r1, r3
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	025b      	lsls	r3, r3, #9
 800aeec:	089b      	lsrs	r3, r3, #2
 800aeee:	f7fd fbef 	bl	80086d0 <HAL_DMA_Start_IT>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d017      	beq.n	800af28 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800af06:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a40      	ldr	r2, [pc, #256]	; (800b010 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800af0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e06b      	b.n	800b000 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800af28:	4b3a      	ldr	r3, [pc, #232]	; (800b014 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800af2a:	2201      	movs	r2, #1
 800af2c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af32:	2b01      	cmp	r3, #1
 800af34:	d002      	beq.n	800af3c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	025b      	lsls	r3, r3, #9
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af44:	4618      	mov	r0, r3
 800af46:	f003 faa1 	bl	800e48c <SDMMC_CmdBlockLength>
 800af4a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00f      	beq.n	800af72 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a2e      	ldr	r2, [pc, #184]	; (800b010 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800af58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af60:	431a      	orrs	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e046      	b.n	800b000 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af72:	f04f 33ff 	mov.w	r3, #4294967295
 800af76:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	025b      	lsls	r3, r3, #9
 800af7c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800af7e:	2390      	movs	r3, #144	; 0x90
 800af80:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800af82:	2302      	movs	r3, #2
 800af84:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800af86:	2300      	movs	r3, #0
 800af88:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800af8a:	2301      	movs	r3, #1
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f107 0210 	add.w	r2, r7, #16
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f003 fa4b 	bl	800e434 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d90a      	bls.n	800afba <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2282      	movs	r2, #130	; 0x82
 800afa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afb0:	4618      	mov	r0, r3
 800afb2:	f003 faaf 	bl	800e514 <SDMMC_CmdReadMultiBlock>
 800afb6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800afb8:	e009      	b.n	800afce <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2281      	movs	r2, #129	; 0x81
 800afbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afc6:	4618      	mov	r0, r3
 800afc8:	f003 fa82 	bl	800e4d0 <SDMMC_CmdReadSingleBlock>
 800afcc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d012      	beq.n	800affa <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a0d      	ldr	r2, [pc, #52]	; (800b010 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800afda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	431a      	orrs	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e002      	b.n	800b000 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	e000      	b.n	800b000 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800affe:	2302      	movs	r3, #2
  }
}
 800b000:	4618      	mov	r0, r3
 800b002:	3730      	adds	r7, #48	; 0x30
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	0800b9f3 	.word	0x0800b9f3
 800b00c:	0800ba65 	.word	0x0800ba65
 800b010:	004005ff 	.word	0x004005ff
 800b014:	4225858c 	.word	0x4225858c

0800b018 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08c      	sub	sp, #48	; 0x30
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d107      	bne.n	800b040 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0ca      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b01      	cmp	r3, #1
 800b04a:	f040 80c3 	bne.w	800b1d4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	441a      	add	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b05e:	429a      	cmp	r2, r3
 800b060:	d907      	bls.n	800b072 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e0b1      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2203      	movs	r2, #3
 800b076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2200      	movs	r2, #0
 800b080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f042 021a 	orr.w	r2, r2, #26
 800b090:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b096:	4a52      	ldr	r2, [pc, #328]	; (800b1e0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09e:	4a51      	ldr	r2, [pc, #324]	; (800b1e4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800b0a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d002      	beq.n	800b0b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	025b      	lsls	r3, r3, #9
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f003 f9e3 	bl	800e48c <SDMMC_CmdBlockLength>
 800b0c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00f      	beq.n	800b0ee <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a45      	ldr	r2, [pc, #276]	; (800b1e8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e073      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d90a      	bls.n	800b10a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	22a0      	movs	r2, #160	; 0xa0
 800b0f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b100:	4618      	mov	r0, r3
 800b102:	f003 fa4b 	bl	800e59c <SDMMC_CmdWriteMultiBlock>
 800b106:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b108:	e009      	b.n	800b11e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2290      	movs	r2, #144	; 0x90
 800b10e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b116:	4618      	mov	r0, r3
 800b118:	f003 fa1e 	bl	800e558 <SDMMC_CmdWriteSingleBlock>
 800b11c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b120:	2b00      	cmp	r3, #0
 800b122:	d012      	beq.n	800b14a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a2f      	ldr	r2, [pc, #188]	; (800b1e8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	431a      	orrs	r2, r3
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e045      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b14a:	4b28      	ldr	r3, [pc, #160]	; (800b1ec <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b14c:	2201      	movs	r2, #1
 800b14e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b154:	68b9      	ldr	r1, [r7, #8]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3380      	adds	r3, #128	; 0x80
 800b15c:	461a      	mov	r2, r3
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	025b      	lsls	r3, r3, #9
 800b162:	089b      	lsrs	r3, r3, #2
 800b164:	f7fd fab4 	bl	80086d0 <HAL_DMA_Start_IT>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d01a      	beq.n	800b1a4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f022 021a 	bic.w	r2, r2, #26
 800b17c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a19      	ldr	r2, [pc, #100]	; (800b1e8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e018      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	025b      	lsls	r3, r3, #9
 800b1ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b1b0:	2390      	movs	r3, #144	; 0x90
 800b1b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f107 0210 	add.w	r2, r7, #16
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f003 f932 	bl	800e434 <SDIO_ConfigData>

      return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e000      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b1d4:	2302      	movs	r3, #2
  }
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3730      	adds	r7, #48	; 0x30
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800b9c9 	.word	0x0800b9c9
 800b1e4:	0800ba65 	.word	0x0800ba65
 800b1e8:	004005ff 	.word	0x004005ff
 800b1ec:	4225858c 	.word	0x4225858c

0800b1f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d008      	beq.n	800b21e <HAL_SD_IRQHandler+0x2e>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f003 0308 	and.w	r3, r3, #8
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 ffc8 	bl	800c1ac <SD_Read_IT>
 800b21c:	e155      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 808f 	beq.w	800b34c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b236:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	6812      	ldr	r2, [r2, #0]
 800b242:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b246:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b24a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f022 0201 	bic.w	r2, r2, #1
 800b25a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d039      	beq.n	800b2da <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f003 0302 	and.w	r3, r3, #2
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d104      	bne.n	800b27a <HAL_SD_IRQHandler+0x8a>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d011      	beq.n	800b29e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4618      	mov	r0, r3
 800b280:	f003 f9ae 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800b284:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f91f 	bl	800b4dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <HAL_SD_IRQHandler+0xda>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f003 fe04 	bl	800eed8 <HAL_SD_RxCpltCallback>
 800b2d0:	e0fb      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f003 fdf6 	bl	800eec4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b2d8:	e0f7      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 80f2 	beq.w	800b4ca <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f003 0320 	and.w	r3, r3, #32
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d011      	beq.n	800b314 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f003 f973 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800b2fa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d008      	beq.n	800b314 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	431a      	orrs	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f8e4 	bl	800b4dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f040 80d5 	bne.w	800b4ca <HAL_SD_IRQHandler+0x2da>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	f040 80cf 	bne.w	800b4ca <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f022 0208 	bic.w	r2, r2, #8
 800b33a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f003 fdbd 	bl	800eec4 <HAL_SD_TxCpltCallback>
}
 800b34a:	e0be      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d008      	beq.n	800b36c <HAL_SD_IRQHandler+0x17c>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 ff72 	bl	800c24e <SD_Write_IT>
 800b36a:	e0ae      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 80a7 	beq.w	800b4ca <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b382:	f003 0302 	and.w	r3, r3, #2
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38e:	f043 0202 	orr.w	r2, r3, #2
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39c:	f003 0308 	and.w	r3, r3, #8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a8:	f043 0208 	orr.w	r2, r3, #8
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	f043 0220 	orr.w	r2, r3, #32
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d0:	f003 0310 	and.w	r3, r3, #16
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d005      	beq.n	800b3e4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3dc:	f043 0210 	orr.w	r2, r3, #16
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b3fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4618      	mov	r0, r3
 800b404:	f003 f8ec 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800b408:	4602      	mov	r2, r0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40e:	431a      	orrs	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f003 0308 	and.w	r3, r3, #8
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f855 	bl	800b4dc <HAL_SD_ErrorCallback>
}
 800b432:	e04a      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d045      	beq.n	800b4ca <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b00      	cmp	r3, #0
 800b446:	d104      	bne.n	800b452 <HAL_SD_IRQHandler+0x262>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f003 0320 	and.w	r3, r3, #32
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d011      	beq.n	800b476 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	4a1f      	ldr	r2, [pc, #124]	; (800b4d4 <HAL_SD_IRQHandler+0x2e4>)
 800b458:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fd f98e 	bl	8008780 <HAL_DMA_Abort_IT>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d02f      	beq.n	800b4ca <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 fb4a 	bl	800bb08 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b474:	e029      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d104      	bne.n	800b48a <HAL_SD_IRQHandler+0x29a>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d011      	beq.n	800b4ae <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48e:	4a12      	ldr	r2, [pc, #72]	; (800b4d8 <HAL_SD_IRQHandler+0x2e8>)
 800b490:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b496:	4618      	mov	r0, r3
 800b498:	f7fd f972 	bl	8008780 <HAL_DMA_Abort_IT>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d013      	beq.n	800b4ca <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fb65 	bl	800bb76 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b4ac:	e00d      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f003 fcf4 	bl	800eeb0 <HAL_SD_AbortCallback>
}
 800b4c8:	e7ff      	b.n	800b4ca <HAL_SD_IRQHandler+0x2da>
 800b4ca:	bf00      	nop
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800bb09 	.word	0x0800bb09
 800b4d8:	0800bb77 	.word	0x0800bb77

0800b4dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4fe:	0f9b      	lsrs	r3, r3, #30
 800b500:	b2da      	uxtb	r2, r3
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b50a:	0e9b      	lsrs	r3, r3, #26
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	f003 030f 	and.w	r3, r3, #15
 800b512:	b2da      	uxtb	r2, r3
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b51c:	0e1b      	lsrs	r3, r3, #24
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	f003 0303 	and.w	r3, r3, #3
 800b524:	b2da      	uxtb	r2, r3
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b52e:	0c1b      	lsrs	r3, r3, #16
 800b530:	b2da      	uxtb	r2, r3
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b53a:	0a1b      	lsrs	r3, r3, #8
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b546:	b2da      	uxtb	r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b550:	0d1b      	lsrs	r3, r3, #20
 800b552:	b29a      	uxth	r2, r3
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b55c:	0c1b      	lsrs	r3, r3, #16
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	f003 030f 	and.w	r3, r3, #15
 800b564:	b2da      	uxtb	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b56e:	0bdb      	lsrs	r3, r3, #15
 800b570:	b2db      	uxtb	r3, r3
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b580:	0b9b      	lsrs	r3, r3, #14
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0301 	and.w	r3, r3, #1
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b592:	0b5b      	lsrs	r3, r3, #13
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5a4:	0b1b      	lsrs	r3, r3, #12
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d163      	bne.n	800b688 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5c4:	009a      	lsls	r2, r3, #2
 800b5c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b5d0:	0f92      	lsrs	r2, r2, #30
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5dc:	0edb      	lsrs	r3, r3, #27
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	f003 0307 	and.w	r3, r3, #7
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ee:	0e1b      	lsrs	r3, r3, #24
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b600:	0d5b      	lsrs	r3, r3, #21
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0307 	and.w	r3, r3, #7
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b612:	0c9b      	lsrs	r3, r3, #18
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b624:	0bdb      	lsrs	r3, r3, #15
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f003 0307 	and.w	r3, r3, #7
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	7e1b      	ldrb	r3, [r3, #24]
 800b640:	b2db      	uxtb	r3, r3
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	3302      	adds	r3, #2
 800b648:	2201      	movs	r2, #1
 800b64a:	fa02 f303 	lsl.w	r3, r2, r3
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b652:	fb02 f203 	mul.w	r2, r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	7a1b      	ldrb	r3, [r3, #8]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	f003 030f 	and.w	r3, r3, #15
 800b664:	2201      	movs	r2, #1
 800b666:	409a      	lsls	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b674:	0a52      	lsrs	r2, r2, #9
 800b676:	fb02 f203 	mul.w	r2, r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b684:	661a      	str	r2, [r3, #96]	; 0x60
 800b686:	e031      	b.n	800b6ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d11d      	bne.n	800b6cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b694:	041b      	lsls	r3, r3, #16
 800b696:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b69e:	0c1b      	lsrs	r3, r3, #16
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	029a      	lsls	r2, r3, #10
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	661a      	str	r2, [r3, #96]	; 0x60
 800b6ca:	e00f      	b.n	800b6ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a58      	ldr	r2, [pc, #352]	; (800b834 <HAL_SD_GetCardCSD+0x344>)
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e09d      	b.n	800b828 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6f0:	0b9b      	lsrs	r3, r3, #14
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 0301 	and.w	r3, r3, #1
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b702:	09db      	lsrs	r3, r3, #7
 800b704:	b2db      	uxtb	r3, r3
 800b706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b724:	0fdb      	lsrs	r3, r3, #31
 800b726:	b2da      	uxtb	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b730:	0f5b      	lsrs	r3, r3, #29
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0303 	and.w	r3, r3, #3
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b742:	0e9b      	lsrs	r3, r3, #26
 800b744:	b2db      	uxtb	r3, r3
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b754:	0d9b      	lsrs	r3, r3, #22
 800b756:	b2db      	uxtb	r3, r3
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b766:	0d5b      	lsrs	r3, r3, #21
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	f003 0301 	and.w	r3, r3, #1
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b782:	0c1b      	lsrs	r3, r3, #16
 800b784:	b2db      	uxtb	r3, r3
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b796:	0bdb      	lsrs	r3, r3, #15
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7aa:	0b9b      	lsrs	r3, r3, #14
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7be:	0b5b      	lsrs	r3, r3, #13
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d2:	0b1b      	lsrs	r3, r3, #12
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e6:	0a9b      	lsrs	r3, r3, #10
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	b2da      	uxtb	r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80e:	085b      	lsrs	r3, r3, #1
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b816:	b2da      	uxtb	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	004005ff 	.word	0x004005ff

0800b838 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b890:	b5b0      	push	{r4, r5, r7, lr}
 800b892:	b08e      	sub	sp, #56	; 0x38
 800b894:	af04      	add	r7, sp, #16
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2203      	movs	r2, #3
 800b89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	d02e      	beq.n	800b908 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b0:	d106      	bne.n	800b8c0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
 800b8be:	e029      	b.n	800b914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c6:	d10a      	bne.n	800b8de <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fb0f 	bl	800beec <SD_WideBus_Enable>
 800b8ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	639a      	str	r2, [r3, #56]	; 0x38
 800b8dc:	e01a      	b.n	800b914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fb4c 	bl	800bf82 <SD_WideBus_Disable>
 800b8ea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	639a      	str	r2, [r3, #56]	; 0x38
 800b8f8:	e00c      	b.n	800b914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
 800b906:	e005      	b.n	800b914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d009      	beq.n	800b930 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a18      	ldr	r2, [pc, #96]	; (800b984 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e024      	b.n	800b97a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681d      	ldr	r5, [r3, #0]
 800b956:	466c      	mov	r4, sp
 800b958:	f107 0318 	add.w	r3, r7, #24
 800b95c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b964:	f107 030c 	add.w	r3, r7, #12
 800b968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b96a:	4628      	mov	r0, r5
 800b96c:	f002 fcb2 	bl	800e2d4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3728      	adds	r7, #40	; 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bdb0      	pop	{r4, r5, r7, pc}
 800b982:	bf00      	nop
 800b984:	004005ff 	.word	0x004005ff

0800b988 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b994:	f107 030c 	add.w	r3, r7, #12
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fa7e 	bl	800be9c <SD_SendStatus>
 800b9a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d005      	beq.n	800b9b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	431a      	orrs	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	0a5b      	lsrs	r3, r3, #9
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b9be:	693b      	ldr	r3, [r7, #16]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b9e6:	bf00      	nop
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	2b82      	cmp	r3, #130	; 0x82
 800ba06:	d111      	bne.n	800ba2c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f002 fde7 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800ba12:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d008      	beq.n	800ba2c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	431a      	orrs	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff fd58 	bl	800b4dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f022 0208 	bic.w	r2, r2, #8
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f003 fa3f 	bl	800eed8 <HAL_SD_RxCpltCallback>
#endif
}
 800ba5a:	bf00      	nop
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7fd f830 	bl	8008ad8 <HAL_DMA_GetError>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d03e      	beq.n	800bafc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba84:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba8c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d002      	beq.n	800ba9a <SD_DMAError+0x36>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d12d      	bne.n	800baf6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a19      	ldr	r2, [pc, #100]	; (800bb04 <SD_DMAError+0xa0>)
 800baa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bab0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800babe:	6978      	ldr	r0, [r7, #20]
 800bac0:	f7ff ff62 	bl	800b988 <HAL_SD_GetCardState>
 800bac4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2b06      	cmp	r3, #6
 800baca:	d002      	beq.n	800bad2 <SD_DMAError+0x6e>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d10a      	bne.n	800bae8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f002 fd82 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800badc:	4602      	mov	r2, r0
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae2:	431a      	orrs	r2, r3
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	2200      	movs	r2, #0
 800baf4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800baf6:	6978      	ldr	r0, [r7, #20]
 800baf8:	f7ff fcf0 	bl	800b4dc <HAL_SD_ErrorCallback>
#endif
  }
}
 800bafc:	bf00      	nop
 800bafe:	3718      	adds	r7, #24
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	004005ff 	.word	0x004005ff

0800bb08 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb1e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff ff31 	bl	800b988 <HAL_SD_GetCardState>
 800bb26:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2b06      	cmp	r3, #6
 800bb3a:	d002      	beq.n	800bb42 <SD_DMATxAbort+0x3a>
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b05      	cmp	r3, #5
 800bb40:	d10a      	bne.n	800bb58 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 fd4a 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb52:	431a      	orrs	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d103      	bne.n	800bb68 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f003 f9a5 	bl	800eeb0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bb66:	e002      	b.n	800bb6e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f7ff fcb7 	bl	800b4dc <HAL_SD_ErrorCallback>
}
 800bb6e:	bf00      	nop
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb82:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb8c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff fefa 	bl	800b988 <HAL_SD_GetCardState>
 800bb94:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b06      	cmp	r3, #6
 800bba8:	d002      	beq.n	800bbb0 <SD_DMARxAbort+0x3a>
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2b05      	cmp	r3, #5
 800bbae:	d10a      	bne.n	800bbc6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f002 fd13 	bl	800e5e0 <SDMMC_CmdStopTransfer>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d103      	bne.n	800bbd6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f003 f96e 	bl	800eeb0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bbd4:	e002      	b.n	800bbdc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7ff fc80 	bl	800b4dc <HAL_SD_ErrorCallback>
}
 800bbdc:	bf00      	nop
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bbe4:	b5b0      	push	{r4, r5, r7, lr}
 800bbe6:	b094      	sub	sp, #80	; 0x50
 800bbe8:	af04      	add	r7, sp, #16
 800bbea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bbec:	2301      	movs	r3, #1
 800bbee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f002 fbc5 	bl	800e384 <SDIO_GetPowerState>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d102      	bne.n	800bc06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bc04:	e0b7      	b.n	800bd76 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d02f      	beq.n	800bc6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f002 fdee 	bl	800e7f4 <SDMMC_CmdSendCID>
 800bc18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <SD_InitCard+0x40>
    {
      return errorstate;
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	e0a8      	b.n	800bd76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f002 fbef 	bl	800e40e <SDIO_GetResponse>
 800bc30:	4602      	mov	r2, r0
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2104      	movs	r1, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f002 fbe6 	bl	800e40e <SDIO_GetResponse>
 800bc42:	4602      	mov	r2, r0
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2108      	movs	r1, #8
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f002 fbdd 	bl	800e40e <SDIO_GetResponse>
 800bc54:	4602      	mov	r2, r0
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	210c      	movs	r1, #12
 800bc60:	4618      	mov	r0, r3
 800bc62:	f002 fbd4 	bl	800e40e <SDIO_GetResponse>
 800bc66:	4602      	mov	r2, r0
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d00d      	beq.n	800bc92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f107 020e 	add.w	r2, r7, #14
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f002 fdf4 	bl	800e86e <SDMMC_CmdSetRelAdd>
 800bc86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <SD_InitCard+0xae>
    {
      return errorstate;
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc90:	e071      	b.n	800bd76 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d036      	beq.n	800bd08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bc9a:	89fb      	ldrh	r3, [r7, #14]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcaa:	041b      	lsls	r3, r3, #16
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f002 fdbe 	bl	800e830 <SDMMC_CmdSendCSD>
 800bcb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcbe:	e05a      	b.n	800bd76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f002 fba1 	bl	800e40e <SDIO_GetResponse>
 800bccc:	4602      	mov	r2, r0
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2104      	movs	r1, #4
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f002 fb98 	bl	800e40e <SDIO_GetResponse>
 800bcde:	4602      	mov	r2, r0
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2108      	movs	r1, #8
 800bcea:	4618      	mov	r0, r3
 800bcec:	f002 fb8f 	bl	800e40e <SDIO_GetResponse>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	210c      	movs	r1, #12
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f002 fb86 	bl	800e40e <SDIO_GetResponse>
 800bd02:	4602      	mov	r2, r0
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f002 fb7d 	bl	800e40e <SDIO_GetResponse>
 800bd14:	4603      	mov	r3, r0
 800bd16:	0d1a      	lsrs	r2, r3, #20
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bd1c:	f107 0310 	add.w	r3, r7, #16
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff fbe4 	bl	800b4f0 <HAL_SD_GetCardCSD>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d002      	beq.n	800bd34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd32:	e020      	b.n	800bd76 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6819      	ldr	r1, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd3c:	041b      	lsls	r3, r3, #16
 800bd3e:	f04f 0400 	mov.w	r4, #0
 800bd42:	461a      	mov	r2, r3
 800bd44:	4623      	mov	r3, r4
 800bd46:	4608      	mov	r0, r1
 800bd48:	f002 fc6c 	bl	800e624 <SDMMC_CmdSelDesel>
 800bd4c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <SD_InitCard+0x174>
  {
    return errorstate;
 800bd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd56:	e00e      	b.n	800bd76 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681d      	ldr	r5, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	466c      	mov	r4, sp
 800bd60:	f103 0210 	add.w	r2, r3, #16
 800bd64:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f002 fab0 	bl	800e2d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3740      	adds	r7, #64	; 0x40
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bd80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]
 800bd90:	2300      	movs	r3, #0
 800bd92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f002 fc66 	bl	800e66a <SDMMC_CmdGoIdleState>
 800bd9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <SD_PowerON+0x2a>
  {
    return errorstate;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	e072      	b.n	800be90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f002 fc79 	bl	800e6a6 <SDMMC_CmdOperCond>
 800bdb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00d      	beq.n	800bdd8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f002 fc4f 	bl	800e66a <SDMMC_CmdGoIdleState>
 800bdcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d004      	beq.n	800bdde <SD_PowerON+0x5e>
    {
      return errorstate;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	e05b      	b.n	800be90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d137      	bne.n	800be56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2100      	movs	r1, #0
 800bdec:	4618      	mov	r0, r3
 800bdee:	f002 fc79 	bl	800e6e4 <SDMMC_CmdAppCommand>
 800bdf2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d02d      	beq.n	800be56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bdfe:	e047      	b.n	800be90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2100      	movs	r1, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f002 fc6c 	bl	800e6e4 <SDMMC_CmdAppCommand>
 800be0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <SD_PowerON+0x98>
    {
      return errorstate;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	e03b      	b.n	800be90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	491e      	ldr	r1, [pc, #120]	; (800be98 <SD_PowerON+0x118>)
 800be1e:	4618      	mov	r0, r3
 800be20:	f002 fc82 	bl	800e728 <SDMMC_CmdAppOperCommand>
 800be24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800be30:	e02e      	b.n	800be90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2100      	movs	r1, #0
 800be38:	4618      	mov	r0, r3
 800be3a:	f002 fae8 	bl	800e40e <SDIO_GetResponse>
 800be3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	0fdb      	lsrs	r3, r3, #31
 800be44:	2b01      	cmp	r3, #1
 800be46:	d101      	bne.n	800be4c <SD_PowerON+0xcc>
 800be48:	2301      	movs	r3, #1
 800be4a:	e000      	b.n	800be4e <SD_PowerON+0xce>
 800be4c:	2300      	movs	r3, #0
 800be4e:	613b      	str	r3, [r7, #16]

    count++;
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	3301      	adds	r3, #1
 800be54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d802      	bhi.n	800be66 <SD_PowerON+0xe6>
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0cc      	beq.n	800be00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d902      	bls.n	800be76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800be70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be74:	e00c      	b.n	800be90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	645a      	str	r2, [r3, #68]	; 0x44
 800be86:	e002      	b.n	800be8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	c1100000 	.word	0xc1100000

0800be9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800beac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800beb0:	e018      	b.n	800bee4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beba:	041b      	lsls	r3, r3, #16
 800bebc:	4619      	mov	r1, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	f002 fcf6 	bl	800e8b0 <SDMMC_CmdSendStatus>
 800bec4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	e009      	b.n	800bee4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2100      	movs	r1, #0
 800bed6:	4618      	mov	r0, r3
 800bed8:	f002 fa99 	bl	800e40e <SDIO_GetResponse>
 800bedc:	4602      	mov	r2, r0
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	2300      	movs	r3, #0
 800befa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2100      	movs	r1, #0
 800bf02:	4618      	mov	r0, r3
 800bf04:	f002 fa83 	bl	800e40e <SDIO_GetResponse>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf12:	d102      	bne.n	800bf1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bf14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf18:	e02f      	b.n	800bf7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bf1a:	f107 030c 	add.w	r3, r7, #12
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f879 	bl	800c018 <SD_FindSCR>
 800bf26:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	e023      	b.n	800bf7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d01c      	beq.n	800bf76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf44:	041b      	lsls	r3, r3, #16
 800bf46:	4619      	mov	r1, r3
 800bf48:	4610      	mov	r0, r2
 800bf4a:	f002 fbcb 	bl	800e6e4 <SDMMC_CmdAppCommand>
 800bf4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	e00f      	b.n	800bf7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2102      	movs	r1, #2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f002 fc04 	bl	800e76e <SDMMC_CmdBusWidth>
 800bf66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	e003      	b.n	800bf7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf72:	2300      	movs	r3, #0
 800bf74:	e001      	b.n	800bf7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b086      	sub	sp, #24
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2100      	movs	r1, #0
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f002 fa38 	bl	800e40e <SDIO_GetResponse>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfa8:	d102      	bne.n	800bfb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bfaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bfae:	e02f      	b.n	800c010 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f82e 	bl	800c018 <SD_FindSCR>
 800bfbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	e023      	b.n	800c010 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01c      	beq.n	800c00c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfda:	041b      	lsls	r3, r3, #16
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	f002 fb80 	bl	800e6e4 <SDMMC_CmdAppCommand>
 800bfe4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	e00f      	b.n	800c010 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2100      	movs	r1, #0
 800bff6:	4618      	mov	r0, r3
 800bff8:	f002 fbb9 	bl	800e76e <SDMMC_CmdBusWidth>
 800bffc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	e003      	b.n	800c010 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c008:	2300      	movs	r3, #0
 800c00a:	e001      	b.n	800c010 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c00c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b08f      	sub	sp, #60	; 0x3c
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c022:	f7fb fd63 	bl	8007aec <HAL_GetTick>
 800c026:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c02c:	2300      	movs	r3, #0
 800c02e:	60bb      	str	r3, [r7, #8]
 800c030:	2300      	movs	r3, #0
 800c032:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2108      	movs	r1, #8
 800c03e:	4618      	mov	r0, r3
 800c040:	f002 fa24 	bl	800e48c <SDMMC_CmdBlockLength>
 800c044:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	e0a9      	b.n	800c1a4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c058:	041b      	lsls	r3, r3, #16
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f002 fb41 	bl	800e6e4 <SDMMC_CmdAppCommand>
 800c062:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	e09a      	b.n	800c1a4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c06e:	f04f 33ff 	mov.w	r3, #4294967295
 800c072:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c074:	2308      	movs	r3, #8
 800c076:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c078:	2330      	movs	r3, #48	; 0x30
 800c07a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c07c:	2302      	movs	r3, #2
 800c07e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c080:	2300      	movs	r3, #0
 800c082:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c084:	2301      	movs	r3, #1
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f107 0210 	add.w	r2, r7, #16
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f002 f9ce 	bl	800e434 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f002 fb88 	bl	800e7b2 <SDMMC_CmdSendSCR>
 800c0a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d022      	beq.n	800c0f0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	e07a      	b.n	800c1a4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00e      	beq.n	800c0da <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6819      	ldr	r1, [r3, #0]
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	f107 0208 	add.w	r2, r7, #8
 800c0c8:	18d4      	adds	r4, r2, r3
 800c0ca:	4608      	mov	r0, r1
 800c0cc:	f002 f92d 	bl	800e32a <SDIO_ReadFIFO>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	6023      	str	r3, [r4, #0]
      index++;
 800c0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c0da:	f7fb fd07 	bl	8007aec <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d102      	bne.n	800c0f0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c0ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0ee:	e059      	b.n	800c1a4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0f6:	f240 432a 	movw	r3, #1066	; 0x42a
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d0d6      	beq.n	800c0ae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c106:	f003 0308 	and.w	r3, r3, #8
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d005      	beq.n	800c11a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2208      	movs	r2, #8
 800c114:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c116:	2308      	movs	r3, #8
 800c118:	e044      	b.n	800c1a4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c120:	f003 0302 	and.w	r3, r3, #2
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2202      	movs	r2, #2
 800c12e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c130:	2302      	movs	r3, #2
 800c132:	e037      	b.n	800c1a4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c13a:	f003 0320 	and.w	r3, r3, #32
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d005      	beq.n	800c14e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2220      	movs	r2, #32
 800c148:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c14a:	2320      	movs	r3, #32
 800c14c:	e02a      	b.n	800c1a4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f240 523a 	movw	r2, #1338	; 0x53a
 800c156:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	061a      	lsls	r2, r3, #24
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	021b      	lsls	r3, r3, #8
 800c160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c164:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	0a1b      	lsrs	r3, r3, #8
 800c16a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c16e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	0e1b      	lsrs	r3, r3, #24
 800c174:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	601a      	str	r2, [r3, #0]
    scr++;
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	3304      	adds	r3, #4
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	061a      	lsls	r2, r3, #24
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c18c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	0a1b      	lsrs	r3, r3, #8
 800c192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c196:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	0e1b      	lsrs	r3, r3, #24
 800c19c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	373c      	adds	r7, #60	; 0x3c
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}

0800c1ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d03f      	beq.n	800c246 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	617b      	str	r3, [r7, #20]
 800c1ca:	e033      	b.n	800c234 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f002 f8aa 	bl	800e32a <SDIO_ReadFIFO>
 800c1d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	3b01      	subs	r3, #1
 800c200:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	0c1b      	lsrs	r3, r3, #16
 800c206:	b2da      	uxtb	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3b01      	subs	r3, #1
 800c216:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	0e1b      	lsrs	r3, r3, #24
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3301      	adds	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	3301      	adds	r3, #1
 800c232:	617b      	str	r3, [r7, #20]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2b07      	cmp	r3, #7
 800c238:	d9c8      	bls.n	800c1cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c246:	bf00      	nop
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b086      	sub	sp, #24
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d043      	beq.n	800c2f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c268:	2300      	movs	r3, #0
 800c26a:	617b      	str	r3, [r7, #20]
 800c26c:	e037      	b.n	800c2de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3301      	adds	r3, #1
 800c278:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	021a      	lsls	r2, r3, #8
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	4313      	orrs	r3, r2
 800c28a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	3b01      	subs	r3, #1
 800c296:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	041a      	lsls	r2, r3, #16
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	061a      	lsls	r2, r3, #24
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f107 0208 	add.w	r2, r7, #8
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f002 f836 	bl	800e344 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	617b      	str	r3, [r7, #20]
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2b07      	cmp	r3, #7
 800c2e2:	d9c4      	bls.n	800c26e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c2f0:	bf00      	nop
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e056      	b.n	800c3b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d106      	bne.n	800c32a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7f9 fc3f 	bl	8005ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2202      	movs	r2, #2
 800c32e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c340:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	431a      	orrs	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	431a      	orrs	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	431a      	orrs	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c366:	431a      	orrs	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	431a      	orrs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	ea42 0103 	orr.w	r1, r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	430a      	orrs	r2, r1
 800c380:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	0c1b      	lsrs	r3, r3, #16
 800c388:	f003 0104 	and.w	r1, r3, #4
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	430a      	orrs	r2, r1
 800c396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	69da      	ldr	r2, [r3, #28]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c3a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	603b      	str	r3, [r7, #0]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_SPI_Transmit+0x22>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e11e      	b.n	800c620 <HAL_SPI_Transmit+0x260>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3ea:	f7fb fb7f 	bl	8007aec <HAL_GetTick>
 800c3ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c3f0:	88fb      	ldrh	r3, [r7, #6]
 800c3f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d002      	beq.n	800c406 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c400:	2302      	movs	r3, #2
 800c402:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c404:	e103      	b.n	800c60e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <HAL_SPI_Transmit+0x52>
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d102      	bne.n	800c418 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c416:	e0fa      	b.n	800c60e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2203      	movs	r2, #3
 800c41c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	88fa      	ldrh	r2, [r7, #6]
 800c430:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	88fa      	ldrh	r2, [r7, #6]
 800c436:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c45e:	d107      	bne.n	800c470 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c46e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c47a:	2b40      	cmp	r3, #64	; 0x40
 800c47c:	d007      	beq.n	800c48e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c48c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c496:	d14b      	bne.n	800c530 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <HAL_SPI_Transmit+0xe6>
 800c4a0:	8afb      	ldrh	r3, [r7, #22]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d13e      	bne.n	800c524 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4aa:	881a      	ldrh	r2, [r3, #0]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b6:	1c9a      	adds	r2, r3, #2
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c4ca:	e02b      	b.n	800c524 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d112      	bne.n	800c500 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	881a      	ldrh	r2, [r3, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ea:	1c9a      	adds	r2, r3, #2
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	86da      	strh	r2, [r3, #54]	; 0x36
 800c4fe:	e011      	b.n	800c524 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c500:	f7fb faf4 	bl	8007aec <HAL_GetTick>
 800c504:	4602      	mov	r2, r0
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d803      	bhi.n	800c518 <HAL_SPI_Transmit+0x158>
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c516:	d102      	bne.n	800c51e <HAL_SPI_Transmit+0x15e>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c522:	e074      	b.n	800c60e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c528:	b29b      	uxth	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1ce      	bne.n	800c4cc <HAL_SPI_Transmit+0x10c>
 800c52e:	e04c      	b.n	800c5ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <HAL_SPI_Transmit+0x17e>
 800c538:	8afb      	ldrh	r3, [r7, #22]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d140      	bne.n	800c5c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	330c      	adds	r3, #12
 800c548:	7812      	ldrb	r2, [r2, #0]
 800c54a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3b01      	subs	r3, #1
 800c55e:	b29a      	uxth	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c564:	e02c      	b.n	800c5c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f003 0302 	and.w	r3, r3, #2
 800c570:	2b02      	cmp	r3, #2
 800c572:	d113      	bne.n	800c59c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	330c      	adds	r3, #12
 800c57e:	7812      	ldrb	r2, [r2, #0]
 800c580:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c590:	b29b      	uxth	r3, r3
 800c592:	3b01      	subs	r3, #1
 800c594:	b29a      	uxth	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	86da      	strh	r2, [r3, #54]	; 0x36
 800c59a:	e011      	b.n	800c5c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c59c:	f7fb faa6 	bl	8007aec <HAL_GetTick>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d803      	bhi.n	800c5b4 <HAL_SPI_Transmit+0x1f4>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d102      	bne.n	800c5ba <HAL_SPI_Transmit+0x1fa>
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d102      	bne.n	800c5c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c5be:	e026      	b.n	800c60e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1cd      	bne.n	800c566 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 fba4 	bl	800cd1c <SPI_EndRxTxTransaction>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2220      	movs	r2, #32
 800c5de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10a      	bne.n	800c5fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	613b      	str	r3, [r7, #16]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	613b      	str	r3, [r7, #16]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	613b      	str	r3, [r7, #16]
 800c5fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	77fb      	strb	r3, [r7, #31]
 800c60a:	e000      	b.n	800c60e <HAL_SPI_Transmit+0x24e>
  }

error:
 800c60c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c61e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3720      	adds	r7, #32
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b088      	sub	sp, #32
 800c62c:	af02      	add	r7, sp, #8
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	603b      	str	r3, [r7, #0]
 800c634:	4613      	mov	r3, r2
 800c636:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c644:	d112      	bne.n	800c66c <HAL_SPI_Receive+0x44>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10e      	bne.n	800c66c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2204      	movs	r2, #4
 800c652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c656:	88fa      	ldrh	r2, [r7, #6]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	4613      	mov	r3, r2
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 f8e9 	bl	800c83a <HAL_SPI_TransmitReceive>
 800c668:	4603      	mov	r3, r0
 800c66a:	e0e2      	b.n	800c832 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c672:	2b01      	cmp	r3, #1
 800c674:	d101      	bne.n	800c67a <HAL_SPI_Receive+0x52>
 800c676:	2302      	movs	r3, #2
 800c678:	e0db      	b.n	800c832 <HAL_SPI_Receive+0x20a>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c682:	f7fb fa33 	bl	8007aec <HAL_GetTick>
 800c686:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b01      	cmp	r3, #1
 800c692:	d002      	beq.n	800c69a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c694:	2302      	movs	r3, #2
 800c696:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c698:	e0c2      	b.n	800c820 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <HAL_SPI_Receive+0x7e>
 800c6a0:	88fb      	ldrh	r3, [r7, #6]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c6aa:	e0b9      	b.n	800c820 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2204      	movs	r2, #4
 800c6b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	88fa      	ldrh	r2, [r7, #6]
 800c6c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	88fa      	ldrh	r2, [r7, #6]
 800c6ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6f2:	d107      	bne.n	800c704 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c702:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c70e:	2b40      	cmp	r3, #64	; 0x40
 800c710:	d007      	beq.n	800c722 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c720:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d162      	bne.n	800c7f0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c72a:	e02e      	b.n	800c78a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b01      	cmp	r3, #1
 800c738:	d115      	bne.n	800c766 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f103 020c 	add.w	r2, r3, #12
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c746:	7812      	ldrb	r2, [r2, #0]
 800c748:	b2d2      	uxtb	r2, r2
 800c74a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	1c5a      	adds	r2, r3, #1
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	3b01      	subs	r3, #1
 800c75e:	b29a      	uxth	r2, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c764:	e011      	b.n	800c78a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c766:	f7fb f9c1 	bl	8007aec <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	429a      	cmp	r2, r3
 800c774:	d803      	bhi.n	800c77e <HAL_SPI_Receive+0x156>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77c:	d102      	bne.n	800c784 <HAL_SPI_Receive+0x15c>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c784:	2303      	movs	r3, #3
 800c786:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c788:	e04a      	b.n	800c820 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c78e:	b29b      	uxth	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1cb      	bne.n	800c72c <HAL_SPI_Receive+0x104>
 800c794:	e031      	b.n	800c7fa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d113      	bne.n	800c7cc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	68da      	ldr	r2, [r3, #12]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ae:	b292      	uxth	r2, r2
 800c7b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c7ca:	e011      	b.n	800c7f0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7cc:	f7fb f98e 	bl	8007aec <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d803      	bhi.n	800c7e4 <HAL_SPI_Receive+0x1bc>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e2:	d102      	bne.n	800c7ea <HAL_SPI_Receive+0x1c2>
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c7ee:	e017      	b.n	800c820 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1cd      	bne.n	800c796 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f000 fa27 	bl	800cc52 <SPI_EndRxTransaction>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d002      	beq.n	800c810 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2220      	movs	r2, #32
 800c80e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	75fb      	strb	r3, [r7, #23]
 800c81c:	e000      	b.n	800c820 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c81e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c830:	7dfb      	ldrb	r3, [r7, #23]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b08c      	sub	sp, #48	; 0x30
 800c83e:	af00      	add	r7, sp, #0
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	607a      	str	r2, [r7, #4]
 800c846:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c848:	2301      	movs	r3, #1
 800c84a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d101      	bne.n	800c860 <HAL_SPI_TransmitReceive+0x26>
 800c85c:	2302      	movs	r3, #2
 800c85e:	e18a      	b.n	800cb76 <HAL_SPI_TransmitReceive+0x33c>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c868:	f7fb f940 	bl	8007aec <HAL_GetTick>
 800c86c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c87e:	887b      	ldrh	r3, [r7, #2]
 800c880:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c886:	2b01      	cmp	r3, #1
 800c888:	d00f      	beq.n	800c8aa <HAL_SPI_TransmitReceive+0x70>
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c890:	d107      	bne.n	800c8a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d103      	bne.n	800c8a2 <HAL_SPI_TransmitReceive+0x68>
 800c89a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c89e:	2b04      	cmp	r3, #4
 800c8a0:	d003      	beq.n	800c8aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c8a8:	e15b      	b.n	800cb62 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <HAL_SPI_TransmitReceive+0x82>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <HAL_SPI_TransmitReceive+0x82>
 800c8b6:	887b      	ldrh	r3, [r7, #2]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d103      	bne.n	800c8c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c8c2:	e14e      	b.n	800cb62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b04      	cmp	r3, #4
 800c8ce:	d003      	beq.n	800c8d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2205      	movs	r2, #5
 800c8d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	887a      	ldrh	r2, [r7, #2]
 800c8e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	887a      	ldrh	r2, [r7, #2]
 800c8ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	887a      	ldrh	r2, [r7, #2]
 800c8fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	887a      	ldrh	r2, [r7, #2]
 800c900:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c918:	2b40      	cmp	r3, #64	; 0x40
 800c91a:	d007      	beq.n	800c92c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c92a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c934:	d178      	bne.n	800ca28 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <HAL_SPI_TransmitReceive+0x10a>
 800c93e:	8b7b      	ldrh	r3, [r7, #26]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d166      	bne.n	800ca12 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c948:	881a      	ldrh	r2, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	1c9a      	adds	r2, r3, #2
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c95e:	b29b      	uxth	r3, r3
 800c960:	3b01      	subs	r3, #1
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c968:	e053      	b.n	800ca12 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	2b02      	cmp	r3, #2
 800c976:	d11b      	bne.n	800c9b0 <HAL_SPI_TransmitReceive+0x176>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d016      	beq.n	800c9b0 <HAL_SPI_TransmitReceive+0x176>
 800c982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c984:	2b01      	cmp	r3, #1
 800c986:	d113      	bne.n	800c9b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98c:	881a      	ldrh	r2, [r3, #0]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c998:	1c9a      	adds	r2, r3, #2
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f003 0301 	and.w	r3, r3, #1
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d119      	bne.n	800c9f2 <HAL_SPI_TransmitReceive+0x1b8>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d014      	beq.n	800c9f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68da      	ldr	r2, [r3, #12]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	b292      	uxth	r2, r2
 800c9d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9da:	1c9a      	adds	r2, r3, #2
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c9f2:	f7fb f87b 	bl	8007aec <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d807      	bhi.n	800ca12 <HAL_SPI_TransmitReceive+0x1d8>
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca08:	d003      	beq.n	800ca12 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ca10:	e0a7      	b.n	800cb62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1a6      	bne.n	800c96a <HAL_SPI_TransmitReceive+0x130>
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1a1      	bne.n	800c96a <HAL_SPI_TransmitReceive+0x130>
 800ca26:	e07c      	b.n	800cb22 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <HAL_SPI_TransmitReceive+0x1fc>
 800ca30:	8b7b      	ldrh	r3, [r7, #26]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d16b      	bne.n	800cb0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	330c      	adds	r3, #12
 800ca40:	7812      	ldrb	r2, [r2, #0]
 800ca42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	3b01      	subs	r3, #1
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca5c:	e057      	b.n	800cb0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f003 0302 	and.w	r3, r3, #2
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d11c      	bne.n	800caa6 <HAL_SPI_TransmitReceive+0x26c>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d017      	beq.n	800caa6 <HAL_SPI_TransmitReceive+0x26c>
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d114      	bne.n	800caa6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	330c      	adds	r3, #12
 800ca86:	7812      	ldrb	r2, [r2, #0]
 800ca88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d119      	bne.n	800cae8 <HAL_SPI_TransmitReceive+0x2ae>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cab8:	b29b      	uxth	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d014      	beq.n	800cae8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68da      	ldr	r2, [r3, #12]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac8:	b2d2      	uxtb	r2, r2
 800caca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cada:	b29b      	uxth	r3, r3
 800cadc:	3b01      	subs	r3, #1
 800cade:	b29a      	uxth	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cae4:	2301      	movs	r3, #1
 800cae6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cae8:	f7fb f800 	bl	8007aec <HAL_GetTick>
 800caec:	4602      	mov	r2, r0
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d803      	bhi.n	800cb00 <HAL_SPI_TransmitReceive+0x2c6>
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafe:	d102      	bne.n	800cb06 <HAL_SPI_TransmitReceive+0x2cc>
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800cb06:	2303      	movs	r3, #3
 800cb08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cb0c:	e029      	b.n	800cb62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1a2      	bne.n	800ca5e <HAL_SPI_TransmitReceive+0x224>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d19d      	bne.n	800ca5e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 f8f8 	bl	800cd1c <SPI_EndRxTxTransaction>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d006      	beq.n	800cb40 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2220      	movs	r2, #32
 800cb3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cb3e:	e010      	b.n	800cb62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10b      	bne.n	800cb60 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	617b      	str	r3, [r7, #20]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	e000      	b.n	800cb62 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800cb60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cb72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3730      	adds	r7, #48	; 0x30
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	603b      	str	r3, [r7, #0]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb8e:	e04c      	b.n	800cc2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb96:	d048      	beq.n	800cc2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cb98:	f7fa ffa8 	bl	8007aec <HAL_GetTick>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d902      	bls.n	800cbae <SPI_WaitFlagStateUntilTimeout+0x30>
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d13d      	bne.n	800cc2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cbbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbc6:	d111      	bne.n	800cbec <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbd0:	d004      	beq.n	800cbdc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbda:	d107      	bne.n	800cbec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbf4:	d10f      	bne.n	800cc16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e00f      	b.n	800cc4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689a      	ldr	r2, [r3, #8]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	4013      	ands	r3, r2
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	bf0c      	ite	eq
 800cc3a:	2301      	moveq	r3, #1
 800cc3c:	2300      	movne	r3, #0
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	461a      	mov	r2, r3
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d1a3      	bne.n	800cb90 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b086      	sub	sp, #24
 800cc56:	af02      	add	r7, sp, #8
 800cc58:	60f8      	str	r0, [r7, #12]
 800cc5a:	60b9      	str	r1, [r7, #8]
 800cc5c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc66:	d111      	bne.n	800cc8c <SPI_EndRxTransaction+0x3a>
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc70:	d004      	beq.n	800cc7c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc7a:	d107      	bne.n	800cc8c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc8a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc94:	d12a      	bne.n	800ccec <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc9e:	d012      	beq.n	800ccc6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2200      	movs	r2, #0
 800cca8:	2180      	movs	r1, #128	; 0x80
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7ff ff67 	bl	800cb7e <SPI_WaitFlagStateUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d02d      	beq.n	800cd12 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccba:	f043 0220 	orr.w	r2, r3, #32
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e026      	b.n	800cd14 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	2200      	movs	r2, #0
 800ccce:	2101      	movs	r1, #1
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7ff ff54 	bl	800cb7e <SPI_WaitFlagStateUntilTimeout>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01a      	beq.n	800cd12 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce0:	f043 0220 	orr.w	r2, r3, #32
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e013      	b.n	800cd14 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f7ff ff41 	bl	800cb7e <SPI_WaitFlagStateUntilTimeout>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d007      	beq.n	800cd12 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd06:	f043 0220 	orr.w	r2, r3, #32
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e000      	b.n	800cd14 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b088      	sub	sp, #32
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cd28:	4b1b      	ldr	r3, [pc, #108]	; (800cd98 <SPI_EndRxTxTransaction+0x7c>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <SPI_EndRxTxTransaction+0x80>)
 800cd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd32:	0d5b      	lsrs	r3, r3, #21
 800cd34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd38:	fb02 f303 	mul.w	r3, r2, r3
 800cd3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd46:	d112      	bne.n	800cd6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	2180      	movs	r1, #128	; 0x80
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff ff13 	bl	800cb7e <SPI_WaitFlagStateUntilTimeout>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d016      	beq.n	800cd8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd62:	f043 0220 	orr.w	r2, r3, #32
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e00f      	b.n	800cd8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00a      	beq.n	800cd8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	3b01      	subs	r3, #1
 800cd78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd84:	2b80      	cmp	r3, #128	; 0x80
 800cd86:	d0f2      	beq.n	800cd6e <SPI_EndRxTxTransaction+0x52>
 800cd88:	e000      	b.n	800cd8c <SPI_EndRxTxTransaction+0x70>
        break;
 800cd8a:	bf00      	nop
  }

  return HAL_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3718      	adds	r7, #24
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20000000 	.word	0x20000000
 800cd9c:	165e9f81 	.word	0x165e9f81

0800cda0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e01d      	b.n	800cdee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7f8 ffaa 	bl	8005d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4619      	mov	r1, r3
 800cdde:	4610      	mov	r0, r2
 800cde0:	f000 fb56 	bl	800d490 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b085      	sub	sp, #20
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	68da      	ldr	r2, [r3, #12]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f042 0201 	orr.w	r2, r2, #1
 800ce0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f003 0307 	and.w	r3, r3, #7
 800ce18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b06      	cmp	r3, #6
 800ce1e:	d007      	beq.n	800ce30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f042 0201 	orr.w	r2, r2, #1
 800ce2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3714      	adds	r7, #20
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e01d      	b.n	800ce8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d106      	bne.n	800ce6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7f8 fee7 	bl	8005c38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f000 fb07 	bl	800d490 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2201      	movs	r2, #1
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 fd42 	bl	800d930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a15      	ldr	r2, [pc, #84]	; (800cf08 <HAL_TIM_PWM_Start+0x74>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d004      	beq.n	800cec0 <HAL_TIM_PWM_Start+0x2c>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a14      	ldr	r2, [pc, #80]	; (800cf0c <HAL_TIM_PWM_Start+0x78>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d101      	bne.n	800cec4 <HAL_TIM_PWM_Start+0x30>
 800cec0:	2301      	movs	r3, #1
 800cec2:	e000      	b.n	800cec6 <HAL_TIM_PWM_Start+0x32>
 800cec4:	2300      	movs	r3, #0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d007      	beq.n	800ceda <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ced8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	f003 0307 	and.w	r3, r3, #7
 800cee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b06      	cmp	r3, #6
 800ceea:	d007      	beq.n	800cefc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f042 0201 	orr.w	r2, r2, #1
 800cefa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	40010000 	.word	0x40010000
 800cf0c:	40010400 	.word	0x40010400

0800cf10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e083      	b.n	800d02c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7f8 ff81 	bl	8005e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2202      	movs	r2, #2
 800cf42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	6812      	ldr	r2, [r2, #0]
 800cf50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf54:	f023 0307 	bic.w	r3, r3, #7
 800cf58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4619      	mov	r1, r3
 800cf64:	4610      	mov	r0, r2
 800cf66:	f000 fa93 	bl	800d490 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf92:	f023 0303 	bic.w	r3, r3, #3
 800cf96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	021b      	lsls	r3, r3, #8
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	693a      	ldr	r2, [r7, #16]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cfb0:	f023 030c 	bic.w	r3, r3, #12
 800cfb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	69db      	ldr	r3, [r3, #28]
 800cfca:	021b      	lsls	r3, r3, #8
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	011a      	lsls	r2, r3, #4
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	031b      	lsls	r3, r3, #12
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cfee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cff6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	695b      	ldr	r3, [r3, #20]
 800d000:	011b      	lsls	r3, r3, #4
 800d002:	4313      	orrs	r3, r2
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	4313      	orrs	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <HAL_TIM_Encoder_Start+0x16>
 800d044:	2b04      	cmp	r3, #4
 800d046:	d008      	beq.n	800d05a <HAL_TIM_Encoder_Start+0x26>
 800d048:	e00f      	b.n	800d06a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2201      	movs	r2, #1
 800d050:	2100      	movs	r1, #0
 800d052:	4618      	mov	r0, r3
 800d054:	f000 fc6c 	bl	800d930 <TIM_CCxChannelCmd>
      break;
 800d058:	e016      	b.n	800d088 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2201      	movs	r2, #1
 800d060:	2104      	movs	r1, #4
 800d062:	4618      	mov	r0, r3
 800d064:	f000 fc64 	bl	800d930 <TIM_CCxChannelCmd>
      break;
 800d068:	e00e      	b.n	800d088 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2201      	movs	r2, #1
 800d070:	2100      	movs	r1, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f000 fc5c 	bl	800d930 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2201      	movs	r2, #1
 800d07e:	2104      	movs	r1, #4
 800d080:	4618      	mov	r0, r3
 800d082:	f000 fc55 	bl	800d930 <TIM_CCxChannelCmd>
      break;
 800d086:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f042 0201 	orr.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b082      	sub	sp, #8
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d122      	bne.n	800d0fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	f003 0302 	and.w	r3, r3, #2
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d11b      	bne.n	800d0fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f06f 0202 	mvn.w	r2, #2
 800d0ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	f003 0303 	and.w	r3, r3, #3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d003      	beq.n	800d0ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f9b5 	bl	800d454 <HAL_TIM_IC_CaptureCallback>
 800d0ea:	e005      	b.n	800d0f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f9a7 	bl	800d440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f9b8 	bl	800d468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	f003 0304 	and.w	r3, r3, #4
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d122      	bne.n	800d152 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	f003 0304 	and.w	r3, r3, #4
 800d116:	2b04      	cmp	r3, #4
 800d118:	d11b      	bne.n	800d152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f06f 0204 	mvn.w	r2, #4
 800d122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f98b 	bl	800d454 <HAL_TIM_IC_CaptureCallback>
 800d13e:	e005      	b.n	800d14c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f97d 	bl	800d440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f98e 	bl	800d468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	f003 0308 	and.w	r3, r3, #8
 800d15c:	2b08      	cmp	r3, #8
 800d15e:	d122      	bne.n	800d1a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	f003 0308 	and.w	r3, r3, #8
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	d11b      	bne.n	800d1a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f06f 0208 	mvn.w	r2, #8
 800d176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2204      	movs	r2, #4
 800d17c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	69db      	ldr	r3, [r3, #28]
 800d184:	f003 0303 	and.w	r3, r3, #3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d003      	beq.n	800d194 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f961 	bl	800d454 <HAL_TIM_IC_CaptureCallback>
 800d192:	e005      	b.n	800d1a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f953 	bl	800d440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f964 	bl	800d468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	f003 0310 	and.w	r3, r3, #16
 800d1b0:	2b10      	cmp	r3, #16
 800d1b2:	d122      	bne.n	800d1fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f003 0310 	and.w	r3, r3, #16
 800d1be:	2b10      	cmp	r3, #16
 800d1c0:	d11b      	bne.n	800d1fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f06f 0210 	mvn.w	r2, #16
 800d1ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2208      	movs	r2, #8
 800d1d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	69db      	ldr	r3, [r3, #28]
 800d1d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f937 	bl	800d454 <HAL_TIM_IC_CaptureCallback>
 800d1e6:	e005      	b.n	800d1f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f929 	bl	800d440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f93a 	bl	800d468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b01      	cmp	r3, #1
 800d206:	d10e      	bne.n	800d226 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b01      	cmp	r3, #1
 800d214:	d107      	bne.n	800d226 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f06f 0201 	mvn.w	r2, #1
 800d21e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7f7 fae5 	bl	80047f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d230:	2b80      	cmp	r3, #128	; 0x80
 800d232:	d10e      	bne.n	800d252 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d23e:	2b80      	cmp	r3, #128	; 0x80
 800d240:	d107      	bne.n	800d252 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d24a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fc6d 	bl	800db2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d25c:	2b40      	cmp	r3, #64	; 0x40
 800d25e:	d10e      	bne.n	800d27e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d26a:	2b40      	cmp	r3, #64	; 0x40
 800d26c:	d107      	bne.n	800d27e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f8ff 	bl	800d47c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	f003 0320 	and.w	r3, r3, #32
 800d288:	2b20      	cmp	r3, #32
 800d28a:	d10e      	bne.n	800d2aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	f003 0320 	and.w	r3, r3, #32
 800d296:	2b20      	cmp	r3, #32
 800d298:	d107      	bne.n	800d2aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f06f 0220 	mvn.w	r2, #32
 800d2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fc37 	bl	800db18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
	...

0800d2b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	e0b4      	b.n	800d438 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2202      	movs	r2, #2
 800d2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b0c      	cmp	r3, #12
 800d2e2:	f200 809f 	bhi.w	800d424 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d2e6:	a201      	add	r2, pc, #4	; (adr r2, 800d2ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ec:	0800d321 	.word	0x0800d321
 800d2f0:	0800d425 	.word	0x0800d425
 800d2f4:	0800d425 	.word	0x0800d425
 800d2f8:	0800d425 	.word	0x0800d425
 800d2fc:	0800d361 	.word	0x0800d361
 800d300:	0800d425 	.word	0x0800d425
 800d304:	0800d425 	.word	0x0800d425
 800d308:	0800d425 	.word	0x0800d425
 800d30c:	0800d3a3 	.word	0x0800d3a3
 800d310:	0800d425 	.word	0x0800d425
 800d314:	0800d425 	.word	0x0800d425
 800d318:	0800d425 	.word	0x0800d425
 800d31c:	0800d3e3 	.word	0x0800d3e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 f952 	bl	800d5d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	699a      	ldr	r2, [r3, #24]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f042 0208 	orr.w	r2, r2, #8
 800d33a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0204 	bic.w	r2, r2, #4
 800d34a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6999      	ldr	r1, [r3, #24]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	691a      	ldr	r2, [r3, #16]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	619a      	str	r2, [r3, #24]
      break;
 800d35e:	e062      	b.n	800d426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 f9a2 	bl	800d6b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	699a      	ldr	r2, [r3, #24]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	699a      	ldr	r2, [r3, #24]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6999      	ldr	r1, [r3, #24]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	021a      	lsls	r2, r3, #8
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	619a      	str	r2, [r3, #24]
      break;
 800d3a0:	e041      	b.n	800d426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 f9f7 	bl	800d79c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	69da      	ldr	r2, [r3, #28]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f042 0208 	orr.w	r2, r2, #8
 800d3bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	69da      	ldr	r2, [r3, #28]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f022 0204 	bic.w	r2, r2, #4
 800d3cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	69d9      	ldr	r1, [r3, #28]
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	691a      	ldr	r2, [r3, #16]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	430a      	orrs	r2, r1
 800d3de:	61da      	str	r2, [r3, #28]
      break;
 800d3e0:	e021      	b.n	800d426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fa4b 	bl	800d884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	69da      	ldr	r2, [r3, #28]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69da      	ldr	r2, [r3, #28]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	69d9      	ldr	r1, [r3, #28]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	021a      	lsls	r2, r3, #8
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	61da      	str	r2, [r3, #28]
      break;
 800d422:	e000      	b.n	800d426 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d424:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4a40      	ldr	r2, [pc, #256]	; (800d5a4 <TIM_Base_SetConfig+0x114>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d013      	beq.n	800d4d0 <TIM_Base_SetConfig+0x40>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ae:	d00f      	beq.n	800d4d0 <TIM_Base_SetConfig+0x40>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a3d      	ldr	r2, [pc, #244]	; (800d5a8 <TIM_Base_SetConfig+0x118>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d00b      	beq.n	800d4d0 <TIM_Base_SetConfig+0x40>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a3c      	ldr	r2, [pc, #240]	; (800d5ac <TIM_Base_SetConfig+0x11c>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d007      	beq.n	800d4d0 <TIM_Base_SetConfig+0x40>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a3b      	ldr	r2, [pc, #236]	; (800d5b0 <TIM_Base_SetConfig+0x120>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d003      	beq.n	800d4d0 <TIM_Base_SetConfig+0x40>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a3a      	ldr	r2, [pc, #232]	; (800d5b4 <TIM_Base_SetConfig+0x124>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d108      	bne.n	800d4e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a2f      	ldr	r2, [pc, #188]	; (800d5a4 <TIM_Base_SetConfig+0x114>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d02b      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4f0:	d027      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a2c      	ldr	r2, [pc, #176]	; (800d5a8 <TIM_Base_SetConfig+0x118>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d023      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a2b      	ldr	r2, [pc, #172]	; (800d5ac <TIM_Base_SetConfig+0x11c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d01f      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a2a      	ldr	r2, [pc, #168]	; (800d5b0 <TIM_Base_SetConfig+0x120>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d01b      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a29      	ldr	r2, [pc, #164]	; (800d5b4 <TIM_Base_SetConfig+0x124>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d017      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a28      	ldr	r2, [pc, #160]	; (800d5b8 <TIM_Base_SetConfig+0x128>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d013      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4a27      	ldr	r2, [pc, #156]	; (800d5bc <TIM_Base_SetConfig+0x12c>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d00f      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a26      	ldr	r2, [pc, #152]	; (800d5c0 <TIM_Base_SetConfig+0x130>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d00b      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a25      	ldr	r2, [pc, #148]	; (800d5c4 <TIM_Base_SetConfig+0x134>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d007      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a24      	ldr	r2, [pc, #144]	; (800d5c8 <TIM_Base_SetConfig+0x138>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d003      	beq.n	800d542 <TIM_Base_SetConfig+0xb2>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a23      	ldr	r2, [pc, #140]	; (800d5cc <TIM_Base_SetConfig+0x13c>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d108      	bne.n	800d554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	4313      	orrs	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	4313      	orrs	r3, r2
 800d560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	689a      	ldr	r2, [r3, #8]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a0a      	ldr	r2, [pc, #40]	; (800d5a4 <TIM_Base_SetConfig+0x114>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d003      	beq.n	800d588 <TIM_Base_SetConfig+0xf8>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a0c      	ldr	r2, [pc, #48]	; (800d5b4 <TIM_Base_SetConfig+0x124>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d103      	bne.n	800d590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	691a      	ldr	r2, [r3, #16]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	615a      	str	r2, [r3, #20]
}
 800d596:	bf00      	nop
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	40010000 	.word	0x40010000
 800d5a8:	40000400 	.word	0x40000400
 800d5ac:	40000800 	.word	0x40000800
 800d5b0:	40000c00 	.word	0x40000c00
 800d5b4:	40010400 	.word	0x40010400
 800d5b8:	40014000 	.word	0x40014000
 800d5bc:	40014400 	.word	0x40014400
 800d5c0:	40014800 	.word	0x40014800
 800d5c4:	40001800 	.word	0x40001800
 800d5c8:	40001c00 	.word	0x40001c00
 800d5cc:	40002000 	.word	0x40002000

0800d5d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	f023 0201 	bic.w	r2, r3, #1
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f023 0303 	bic.w	r3, r3, #3
 800d606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4313      	orrs	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f023 0302 	bic.w	r3, r3, #2
 800d618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	4313      	orrs	r3, r2
 800d622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a20      	ldr	r2, [pc, #128]	; (800d6a8 <TIM_OC1_SetConfig+0xd8>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d003      	beq.n	800d634 <TIM_OC1_SetConfig+0x64>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a1f      	ldr	r2, [pc, #124]	; (800d6ac <TIM_OC1_SetConfig+0xdc>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d10c      	bne.n	800d64e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	f023 0308 	bic.w	r3, r3, #8
 800d63a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	4313      	orrs	r3, r2
 800d644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f023 0304 	bic.w	r3, r3, #4
 800d64c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a15      	ldr	r2, [pc, #84]	; (800d6a8 <TIM_OC1_SetConfig+0xd8>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d003      	beq.n	800d65e <TIM_OC1_SetConfig+0x8e>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a14      	ldr	r2, [pc, #80]	; (800d6ac <TIM_OC1_SetConfig+0xdc>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d111      	bne.n	800d682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d66c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	4313      	orrs	r3, r2
 800d676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	4313      	orrs	r3, r2
 800d680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	693a      	ldr	r2, [r7, #16]
 800d686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	685a      	ldr	r2, [r3, #4]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	697a      	ldr	r2, [r7, #20]
 800d69a:	621a      	str	r2, [r3, #32]
}
 800d69c:	bf00      	nop
 800d69e:	371c      	adds	r7, #28
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	40010000 	.word	0x40010000
 800d6ac:	40010400 	.word	0x40010400

0800d6b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	f023 0210 	bic.w	r2, r3, #16
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a1b      	ldr	r3, [r3, #32]
 800d6ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	021b      	lsls	r3, r3, #8
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f023 0320 	bic.w	r3, r3, #32
 800d6fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	011b      	lsls	r3, r3, #4
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	4313      	orrs	r3, r2
 800d706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a22      	ldr	r2, [pc, #136]	; (800d794 <TIM_OC2_SetConfig+0xe4>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d003      	beq.n	800d718 <TIM_OC2_SetConfig+0x68>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4a21      	ldr	r2, [pc, #132]	; (800d798 <TIM_OC2_SetConfig+0xe8>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d10d      	bne.n	800d734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d71e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	011b      	lsls	r3, r3, #4
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	4313      	orrs	r3, r2
 800d72a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a17      	ldr	r2, [pc, #92]	; (800d794 <TIM_OC2_SetConfig+0xe4>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d003      	beq.n	800d744 <TIM_OC2_SetConfig+0x94>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a16      	ldr	r2, [pc, #88]	; (800d798 <TIM_OC2_SetConfig+0xe8>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d113      	bne.n	800d76c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d74a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	693a      	ldr	r2, [r7, #16]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	4313      	orrs	r3, r2
 800d76a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	697a      	ldr	r2, [r7, #20]
 800d784:	621a      	str	r2, [r3, #32]
}
 800d786:	bf00      	nop
 800d788:	371c      	adds	r7, #28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	40010000 	.word	0x40010000
 800d798:	40010400 	.word	0x40010400

0800d79c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b087      	sub	sp, #28
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a1b      	ldr	r3, [r3, #32]
 800d7aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	69db      	ldr	r3, [r3, #28]
 800d7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f023 0303 	bic.w	r3, r3, #3
 800d7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	021b      	lsls	r3, r3, #8
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a21      	ldr	r2, [pc, #132]	; (800d87c <TIM_OC3_SetConfig+0xe0>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d003      	beq.n	800d802 <TIM_OC3_SetConfig+0x66>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a20      	ldr	r2, [pc, #128]	; (800d880 <TIM_OC3_SetConfig+0xe4>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d10d      	bne.n	800d81e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	4313      	orrs	r3, r2
 800d814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d81c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a16      	ldr	r2, [pc, #88]	; (800d87c <TIM_OC3_SetConfig+0xe0>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d003      	beq.n	800d82e <TIM_OC3_SetConfig+0x92>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a15      	ldr	r2, [pc, #84]	; (800d880 <TIM_OC3_SetConfig+0xe4>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d113      	bne.n	800d856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d83c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	4313      	orrs	r3, r2
 800d848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	011b      	lsls	r3, r3, #4
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	4313      	orrs	r3, r2
 800d854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	621a      	str	r2, [r3, #32]
}
 800d870:	bf00      	nop
 800d872:	371c      	adds	r7, #28
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	40010000 	.word	0x40010000
 800d880:	40010400 	.word	0x40010400

0800d884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d884:	b480      	push	{r7}
 800d886:	b087      	sub	sp, #28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	021b      	lsls	r3, r3, #8
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	031b      	lsls	r3, r3, #12
 800d8d6:	693a      	ldr	r2, [r7, #16]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a12      	ldr	r2, [pc, #72]	; (800d928 <TIM_OC4_SetConfig+0xa4>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d003      	beq.n	800d8ec <TIM_OC4_SetConfig+0x68>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a11      	ldr	r2, [pc, #68]	; (800d92c <TIM_OC4_SetConfig+0xa8>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d109      	bne.n	800d900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	019b      	lsls	r3, r3, #6
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	621a      	str	r2, [r3, #32]
}
 800d91a:	bf00      	nop
 800d91c:	371c      	adds	r7, #28
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	40010000 	.word	0x40010000
 800d92c:	40010400 	.word	0x40010400

0800d930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	f003 031f 	and.w	r3, r3, #31
 800d942:	2201      	movs	r2, #1
 800d944:	fa02 f303 	lsl.w	r3, r2, r3
 800d948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a1a      	ldr	r2, [r3, #32]
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	43db      	mvns	r3, r3
 800d952:	401a      	ands	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6a1a      	ldr	r2, [r3, #32]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	f003 031f 	and.w	r3, r3, #31
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	fa01 f303 	lsl.w	r3, r1, r3
 800d968:	431a      	orrs	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	621a      	str	r2, [r3, #32]
}
 800d96e:	bf00      	nop
 800d970:	371c      	adds	r7, #28
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
	...

0800d97c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d101      	bne.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d990:	2302      	movs	r3, #2
 800d992:	e05a      	b.n	800da4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2202      	movs	r2, #2
 800d9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a21      	ldr	r2, [pc, #132]	; (800da58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d022      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9e0:	d01d      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a1d      	ldr	r2, [pc, #116]	; (800da5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d018      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a1b      	ldr	r2, [pc, #108]	; (800da60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d013      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a1a      	ldr	r2, [pc, #104]	; (800da64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d00e      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a18      	ldr	r2, [pc, #96]	; (800da68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d009      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a17      	ldr	r2, [pc, #92]	; (800da6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d004      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a15      	ldr	r2, [pc, #84]	; (800da70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d10c      	bne.n	800da38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3714      	adds	r7, #20
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	40010000 	.word	0x40010000
 800da5c:	40000400 	.word	0x40000400
 800da60:	40000800 	.word	0x40000800
 800da64:	40000c00 	.word	0x40000c00
 800da68:	40010400 	.word	0x40010400
 800da6c:	40014000 	.word	0x40014000
 800da70:	40001800 	.word	0x40001800

0800da74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da7e:	2300      	movs	r3, #0
 800da80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d101      	bne.n	800da90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da8c:	2302      	movs	r3, #2
 800da8e:	e03d      	b.n	800db0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4313      	orrs	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	691b      	ldr	r3, [r3, #16]
 800dada:	4313      	orrs	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	695b      	ldr	r3, [r3, #20]
 800dae8:	4313      	orrs	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db34:	bf00      	nop
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e03f      	b.n	800dbd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d106      	bne.n	800db6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7f8 fa94 	bl	8006094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2224      	movs	r2, #36	; 0x24
 800db70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68da      	ldr	r2, [r3, #12]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f829 	bl	800dbdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	691a      	ldr	r2, [r3, #16]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	695a      	ldr	r2, [r3, #20]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68da      	ldr	r2, [r3, #12]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dbb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2220      	movs	r2, #32
 800dbc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2220      	movs	r2, #32
 800dbcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
	...

0800dbdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	b085      	sub	sp, #20
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	689a      	ldr	r2, [r3, #8]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	431a      	orrs	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dc1e:	f023 030c 	bic.w	r3, r3, #12
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	6812      	ldr	r2, [r2, #0]
 800dc26:	68f9      	ldr	r1, [r7, #12]
 800dc28:	430b      	orrs	r3, r1
 800dc2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	699a      	ldr	r2, [r3, #24]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	430a      	orrs	r2, r1
 800dc40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	69db      	ldr	r3, [r3, #28]
 800dc46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc4a:	f040 818b 	bne.w	800df64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4ac1      	ldr	r2, [pc, #772]	; (800df58 <UART_SetConfig+0x37c>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d005      	beq.n	800dc64 <UART_SetConfig+0x88>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4abf      	ldr	r2, [pc, #764]	; (800df5c <UART_SetConfig+0x380>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	f040 80bd 	bne.w	800ddde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dc64:	f7fc fbcc 	bl	800a400 <HAL_RCC_GetPCLK2Freq>
 800dc68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	461d      	mov	r5, r3
 800dc6e:	f04f 0600 	mov.w	r6, #0
 800dc72:	46a8      	mov	r8, r5
 800dc74:	46b1      	mov	r9, r6
 800dc76:	eb18 0308 	adds.w	r3, r8, r8
 800dc7a:	eb49 0409 	adc.w	r4, r9, r9
 800dc7e:	4698      	mov	r8, r3
 800dc80:	46a1      	mov	r9, r4
 800dc82:	eb18 0805 	adds.w	r8, r8, r5
 800dc86:	eb49 0906 	adc.w	r9, r9, r6
 800dc8a:	f04f 0100 	mov.w	r1, #0
 800dc8e:	f04f 0200 	mov.w	r2, #0
 800dc92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dc96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dc9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dc9e:	4688      	mov	r8, r1
 800dca0:	4691      	mov	r9, r2
 800dca2:	eb18 0005 	adds.w	r0, r8, r5
 800dca6:	eb49 0106 	adc.w	r1, r9, r6
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	461d      	mov	r5, r3
 800dcb0:	f04f 0600 	mov.w	r6, #0
 800dcb4:	196b      	adds	r3, r5, r5
 800dcb6:	eb46 0406 	adc.w	r4, r6, r6
 800dcba:	461a      	mov	r2, r3
 800dcbc:	4623      	mov	r3, r4
 800dcbe:	f7f2 fffb 	bl	8000cb8 <__aeabi_uldivmod>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	4ba5      	ldr	r3, [pc, #660]	; (800df60 <UART_SetConfig+0x384>)
 800dcca:	fba3 2302 	umull	r2, r3, r3, r2
 800dcce:	095b      	lsrs	r3, r3, #5
 800dcd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	461d      	mov	r5, r3
 800dcd8:	f04f 0600 	mov.w	r6, #0
 800dcdc:	46a9      	mov	r9, r5
 800dcde:	46b2      	mov	sl, r6
 800dce0:	eb19 0309 	adds.w	r3, r9, r9
 800dce4:	eb4a 040a 	adc.w	r4, sl, sl
 800dce8:	4699      	mov	r9, r3
 800dcea:	46a2      	mov	sl, r4
 800dcec:	eb19 0905 	adds.w	r9, r9, r5
 800dcf0:	eb4a 0a06 	adc.w	sl, sl, r6
 800dcf4:	f04f 0100 	mov.w	r1, #0
 800dcf8:	f04f 0200 	mov.w	r2, #0
 800dcfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd08:	4689      	mov	r9, r1
 800dd0a:	4692      	mov	sl, r2
 800dd0c:	eb19 0005 	adds.w	r0, r9, r5
 800dd10:	eb4a 0106 	adc.w	r1, sl, r6
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	461d      	mov	r5, r3
 800dd1a:	f04f 0600 	mov.w	r6, #0
 800dd1e:	196b      	adds	r3, r5, r5
 800dd20:	eb46 0406 	adc.w	r4, r6, r6
 800dd24:	461a      	mov	r2, r3
 800dd26:	4623      	mov	r3, r4
 800dd28:	f7f2 ffc6 	bl	8000cb8 <__aeabi_uldivmod>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	460c      	mov	r4, r1
 800dd30:	461a      	mov	r2, r3
 800dd32:	4b8b      	ldr	r3, [pc, #556]	; (800df60 <UART_SetConfig+0x384>)
 800dd34:	fba3 1302 	umull	r1, r3, r3, r2
 800dd38:	095b      	lsrs	r3, r3, #5
 800dd3a:	2164      	movs	r1, #100	; 0x64
 800dd3c:	fb01 f303 	mul.w	r3, r1, r3
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	3332      	adds	r3, #50	; 0x32
 800dd46:	4a86      	ldr	r2, [pc, #536]	; (800df60 <UART_SetConfig+0x384>)
 800dd48:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4c:	095b      	lsrs	r3, r3, #5
 800dd4e:	005b      	lsls	r3, r3, #1
 800dd50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dd54:	4498      	add	r8, r3
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	461d      	mov	r5, r3
 800dd5a:	f04f 0600 	mov.w	r6, #0
 800dd5e:	46a9      	mov	r9, r5
 800dd60:	46b2      	mov	sl, r6
 800dd62:	eb19 0309 	adds.w	r3, r9, r9
 800dd66:	eb4a 040a 	adc.w	r4, sl, sl
 800dd6a:	4699      	mov	r9, r3
 800dd6c:	46a2      	mov	sl, r4
 800dd6e:	eb19 0905 	adds.w	r9, r9, r5
 800dd72:	eb4a 0a06 	adc.w	sl, sl, r6
 800dd76:	f04f 0100 	mov.w	r1, #0
 800dd7a:	f04f 0200 	mov.w	r2, #0
 800dd7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd8a:	4689      	mov	r9, r1
 800dd8c:	4692      	mov	sl, r2
 800dd8e:	eb19 0005 	adds.w	r0, r9, r5
 800dd92:	eb4a 0106 	adc.w	r1, sl, r6
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	461d      	mov	r5, r3
 800dd9c:	f04f 0600 	mov.w	r6, #0
 800dda0:	196b      	adds	r3, r5, r5
 800dda2:	eb46 0406 	adc.w	r4, r6, r6
 800dda6:	461a      	mov	r2, r3
 800dda8:	4623      	mov	r3, r4
 800ddaa:	f7f2 ff85 	bl	8000cb8 <__aeabi_uldivmod>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	460c      	mov	r4, r1
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	4b6a      	ldr	r3, [pc, #424]	; (800df60 <UART_SetConfig+0x384>)
 800ddb6:	fba3 1302 	umull	r1, r3, r3, r2
 800ddba:	095b      	lsrs	r3, r3, #5
 800ddbc:	2164      	movs	r1, #100	; 0x64
 800ddbe:	fb01 f303 	mul.w	r3, r1, r3
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	00db      	lsls	r3, r3, #3
 800ddc6:	3332      	adds	r3, #50	; 0x32
 800ddc8:	4a65      	ldr	r2, [pc, #404]	; (800df60 <UART_SetConfig+0x384>)
 800ddca:	fba2 2303 	umull	r2, r3, r2, r3
 800ddce:	095b      	lsrs	r3, r3, #5
 800ddd0:	f003 0207 	and.w	r2, r3, #7
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4442      	add	r2, r8
 800ddda:	609a      	str	r2, [r3, #8]
 800dddc:	e26f      	b.n	800e2be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ddde:	f7fc fafb 	bl	800a3d8 <HAL_RCC_GetPCLK1Freq>
 800dde2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	461d      	mov	r5, r3
 800dde8:	f04f 0600 	mov.w	r6, #0
 800ddec:	46a8      	mov	r8, r5
 800ddee:	46b1      	mov	r9, r6
 800ddf0:	eb18 0308 	adds.w	r3, r8, r8
 800ddf4:	eb49 0409 	adc.w	r4, r9, r9
 800ddf8:	4698      	mov	r8, r3
 800ddfa:	46a1      	mov	r9, r4
 800ddfc:	eb18 0805 	adds.w	r8, r8, r5
 800de00:	eb49 0906 	adc.w	r9, r9, r6
 800de04:	f04f 0100 	mov.w	r1, #0
 800de08:	f04f 0200 	mov.w	r2, #0
 800de0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800de10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800de14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800de18:	4688      	mov	r8, r1
 800de1a:	4691      	mov	r9, r2
 800de1c:	eb18 0005 	adds.w	r0, r8, r5
 800de20:	eb49 0106 	adc.w	r1, r9, r6
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	461d      	mov	r5, r3
 800de2a:	f04f 0600 	mov.w	r6, #0
 800de2e:	196b      	adds	r3, r5, r5
 800de30:	eb46 0406 	adc.w	r4, r6, r6
 800de34:	461a      	mov	r2, r3
 800de36:	4623      	mov	r3, r4
 800de38:	f7f2 ff3e 	bl	8000cb8 <__aeabi_uldivmod>
 800de3c:	4603      	mov	r3, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	461a      	mov	r2, r3
 800de42:	4b47      	ldr	r3, [pc, #284]	; (800df60 <UART_SetConfig+0x384>)
 800de44:	fba3 2302 	umull	r2, r3, r3, r2
 800de48:	095b      	lsrs	r3, r3, #5
 800de4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	461d      	mov	r5, r3
 800de52:	f04f 0600 	mov.w	r6, #0
 800de56:	46a9      	mov	r9, r5
 800de58:	46b2      	mov	sl, r6
 800de5a:	eb19 0309 	adds.w	r3, r9, r9
 800de5e:	eb4a 040a 	adc.w	r4, sl, sl
 800de62:	4699      	mov	r9, r3
 800de64:	46a2      	mov	sl, r4
 800de66:	eb19 0905 	adds.w	r9, r9, r5
 800de6a:	eb4a 0a06 	adc.w	sl, sl, r6
 800de6e:	f04f 0100 	mov.w	r1, #0
 800de72:	f04f 0200 	mov.w	r2, #0
 800de76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800de7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800de82:	4689      	mov	r9, r1
 800de84:	4692      	mov	sl, r2
 800de86:	eb19 0005 	adds.w	r0, r9, r5
 800de8a:	eb4a 0106 	adc.w	r1, sl, r6
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	461d      	mov	r5, r3
 800de94:	f04f 0600 	mov.w	r6, #0
 800de98:	196b      	adds	r3, r5, r5
 800de9a:	eb46 0406 	adc.w	r4, r6, r6
 800de9e:	461a      	mov	r2, r3
 800dea0:	4623      	mov	r3, r4
 800dea2:	f7f2 ff09 	bl	8000cb8 <__aeabi_uldivmod>
 800dea6:	4603      	mov	r3, r0
 800dea8:	460c      	mov	r4, r1
 800deaa:	461a      	mov	r2, r3
 800deac:	4b2c      	ldr	r3, [pc, #176]	; (800df60 <UART_SetConfig+0x384>)
 800deae:	fba3 1302 	umull	r1, r3, r3, r2
 800deb2:	095b      	lsrs	r3, r3, #5
 800deb4:	2164      	movs	r1, #100	; 0x64
 800deb6:	fb01 f303 	mul.w	r3, r1, r3
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	00db      	lsls	r3, r3, #3
 800debe:	3332      	adds	r3, #50	; 0x32
 800dec0:	4a27      	ldr	r2, [pc, #156]	; (800df60 <UART_SetConfig+0x384>)
 800dec2:	fba2 2303 	umull	r2, r3, r2, r3
 800dec6:	095b      	lsrs	r3, r3, #5
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dece:	4498      	add	r8, r3
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	461d      	mov	r5, r3
 800ded4:	f04f 0600 	mov.w	r6, #0
 800ded8:	46a9      	mov	r9, r5
 800deda:	46b2      	mov	sl, r6
 800dedc:	eb19 0309 	adds.w	r3, r9, r9
 800dee0:	eb4a 040a 	adc.w	r4, sl, sl
 800dee4:	4699      	mov	r9, r3
 800dee6:	46a2      	mov	sl, r4
 800dee8:	eb19 0905 	adds.w	r9, r9, r5
 800deec:	eb4a 0a06 	adc.w	sl, sl, r6
 800def0:	f04f 0100 	mov.w	r1, #0
 800def4:	f04f 0200 	mov.w	r2, #0
 800def8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800defc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800df00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df04:	4689      	mov	r9, r1
 800df06:	4692      	mov	sl, r2
 800df08:	eb19 0005 	adds.w	r0, r9, r5
 800df0c:	eb4a 0106 	adc.w	r1, sl, r6
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	461d      	mov	r5, r3
 800df16:	f04f 0600 	mov.w	r6, #0
 800df1a:	196b      	adds	r3, r5, r5
 800df1c:	eb46 0406 	adc.w	r4, r6, r6
 800df20:	461a      	mov	r2, r3
 800df22:	4623      	mov	r3, r4
 800df24:	f7f2 fec8 	bl	8000cb8 <__aeabi_uldivmod>
 800df28:	4603      	mov	r3, r0
 800df2a:	460c      	mov	r4, r1
 800df2c:	461a      	mov	r2, r3
 800df2e:	4b0c      	ldr	r3, [pc, #48]	; (800df60 <UART_SetConfig+0x384>)
 800df30:	fba3 1302 	umull	r1, r3, r3, r2
 800df34:	095b      	lsrs	r3, r3, #5
 800df36:	2164      	movs	r1, #100	; 0x64
 800df38:	fb01 f303 	mul.w	r3, r1, r3
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	3332      	adds	r3, #50	; 0x32
 800df42:	4a07      	ldr	r2, [pc, #28]	; (800df60 <UART_SetConfig+0x384>)
 800df44:	fba2 2303 	umull	r2, r3, r2, r3
 800df48:	095b      	lsrs	r3, r3, #5
 800df4a:	f003 0207 	and.w	r2, r3, #7
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4442      	add	r2, r8
 800df54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800df56:	e1b2      	b.n	800e2be <UART_SetConfig+0x6e2>
 800df58:	40011000 	.word	0x40011000
 800df5c:	40011400 	.word	0x40011400
 800df60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4ad7      	ldr	r2, [pc, #860]	; (800e2c8 <UART_SetConfig+0x6ec>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d005      	beq.n	800df7a <UART_SetConfig+0x39e>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4ad6      	ldr	r2, [pc, #856]	; (800e2cc <UART_SetConfig+0x6f0>)
 800df74:	4293      	cmp	r3, r2
 800df76:	f040 80d1 	bne.w	800e11c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800df7a:	f7fc fa41 	bl	800a400 <HAL_RCC_GetPCLK2Freq>
 800df7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	469a      	mov	sl, r3
 800df84:	f04f 0b00 	mov.w	fp, #0
 800df88:	46d0      	mov	r8, sl
 800df8a:	46d9      	mov	r9, fp
 800df8c:	eb18 0308 	adds.w	r3, r8, r8
 800df90:	eb49 0409 	adc.w	r4, r9, r9
 800df94:	4698      	mov	r8, r3
 800df96:	46a1      	mov	r9, r4
 800df98:	eb18 080a 	adds.w	r8, r8, sl
 800df9c:	eb49 090b 	adc.w	r9, r9, fp
 800dfa0:	f04f 0100 	mov.w	r1, #0
 800dfa4:	f04f 0200 	mov.w	r2, #0
 800dfa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dfac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dfb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dfb4:	4688      	mov	r8, r1
 800dfb6:	4691      	mov	r9, r2
 800dfb8:	eb1a 0508 	adds.w	r5, sl, r8
 800dfbc:	eb4b 0609 	adc.w	r6, fp, r9
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f04f 0200 	mov.w	r2, #0
 800dfca:	f04f 0300 	mov.w	r3, #0
 800dfce:	f04f 0400 	mov.w	r4, #0
 800dfd2:	0094      	lsls	r4, r2, #2
 800dfd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dfd8:	008b      	lsls	r3, r1, #2
 800dfda:	461a      	mov	r2, r3
 800dfdc:	4623      	mov	r3, r4
 800dfde:	4628      	mov	r0, r5
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	f7f2 fe69 	bl	8000cb8 <__aeabi_uldivmod>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	461a      	mov	r2, r3
 800dfec:	4bb8      	ldr	r3, [pc, #736]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800dfee:	fba3 2302 	umull	r2, r3, r3, r2
 800dff2:	095b      	lsrs	r3, r3, #5
 800dff4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	469b      	mov	fp, r3
 800dffc:	f04f 0c00 	mov.w	ip, #0
 800e000:	46d9      	mov	r9, fp
 800e002:	46e2      	mov	sl, ip
 800e004:	eb19 0309 	adds.w	r3, r9, r9
 800e008:	eb4a 040a 	adc.w	r4, sl, sl
 800e00c:	4699      	mov	r9, r3
 800e00e:	46a2      	mov	sl, r4
 800e010:	eb19 090b 	adds.w	r9, r9, fp
 800e014:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e018:	f04f 0100 	mov.w	r1, #0
 800e01c:	f04f 0200 	mov.w	r2, #0
 800e020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e02c:	4689      	mov	r9, r1
 800e02e:	4692      	mov	sl, r2
 800e030:	eb1b 0509 	adds.w	r5, fp, r9
 800e034:	eb4c 060a 	adc.w	r6, ip, sl
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	4619      	mov	r1, r3
 800e03e:	f04f 0200 	mov.w	r2, #0
 800e042:	f04f 0300 	mov.w	r3, #0
 800e046:	f04f 0400 	mov.w	r4, #0
 800e04a:	0094      	lsls	r4, r2, #2
 800e04c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e050:	008b      	lsls	r3, r1, #2
 800e052:	461a      	mov	r2, r3
 800e054:	4623      	mov	r3, r4
 800e056:	4628      	mov	r0, r5
 800e058:	4631      	mov	r1, r6
 800e05a:	f7f2 fe2d 	bl	8000cb8 <__aeabi_uldivmod>
 800e05e:	4603      	mov	r3, r0
 800e060:	460c      	mov	r4, r1
 800e062:	461a      	mov	r2, r3
 800e064:	4b9a      	ldr	r3, [pc, #616]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e066:	fba3 1302 	umull	r1, r3, r3, r2
 800e06a:	095b      	lsrs	r3, r3, #5
 800e06c:	2164      	movs	r1, #100	; 0x64
 800e06e:	fb01 f303 	mul.w	r3, r1, r3
 800e072:	1ad3      	subs	r3, r2, r3
 800e074:	011b      	lsls	r3, r3, #4
 800e076:	3332      	adds	r3, #50	; 0x32
 800e078:	4a95      	ldr	r2, [pc, #596]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e07a:	fba2 2303 	umull	r2, r3, r2, r3
 800e07e:	095b      	lsrs	r3, r3, #5
 800e080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e084:	4498      	add	r8, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	469b      	mov	fp, r3
 800e08a:	f04f 0c00 	mov.w	ip, #0
 800e08e:	46d9      	mov	r9, fp
 800e090:	46e2      	mov	sl, ip
 800e092:	eb19 0309 	adds.w	r3, r9, r9
 800e096:	eb4a 040a 	adc.w	r4, sl, sl
 800e09a:	4699      	mov	r9, r3
 800e09c:	46a2      	mov	sl, r4
 800e09e:	eb19 090b 	adds.w	r9, r9, fp
 800e0a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e0a6:	f04f 0100 	mov.w	r1, #0
 800e0aa:	f04f 0200 	mov.w	r2, #0
 800e0ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0ba:	4689      	mov	r9, r1
 800e0bc:	4692      	mov	sl, r2
 800e0be:	eb1b 0509 	adds.w	r5, fp, r9
 800e0c2:	eb4c 060a 	adc.w	r6, ip, sl
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	f04f 0200 	mov.w	r2, #0
 800e0d0:	f04f 0300 	mov.w	r3, #0
 800e0d4:	f04f 0400 	mov.w	r4, #0
 800e0d8:	0094      	lsls	r4, r2, #2
 800e0da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e0de:	008b      	lsls	r3, r1, #2
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	4623      	mov	r3, r4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	f7f2 fde6 	bl	8000cb8 <__aeabi_uldivmod>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	4b77      	ldr	r3, [pc, #476]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800e0f8:	095b      	lsrs	r3, r3, #5
 800e0fa:	2164      	movs	r1, #100	; 0x64
 800e0fc:	fb01 f303 	mul.w	r3, r1, r3
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	011b      	lsls	r3, r3, #4
 800e104:	3332      	adds	r3, #50	; 0x32
 800e106:	4a72      	ldr	r2, [pc, #456]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e108:	fba2 2303 	umull	r2, r3, r2, r3
 800e10c:	095b      	lsrs	r3, r3, #5
 800e10e:	f003 020f 	and.w	r2, r3, #15
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4442      	add	r2, r8
 800e118:	609a      	str	r2, [r3, #8]
 800e11a:	e0d0      	b.n	800e2be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e11c:	f7fc f95c 	bl	800a3d8 <HAL_RCC_GetPCLK1Freq>
 800e120:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	469a      	mov	sl, r3
 800e126:	f04f 0b00 	mov.w	fp, #0
 800e12a:	46d0      	mov	r8, sl
 800e12c:	46d9      	mov	r9, fp
 800e12e:	eb18 0308 	adds.w	r3, r8, r8
 800e132:	eb49 0409 	adc.w	r4, r9, r9
 800e136:	4698      	mov	r8, r3
 800e138:	46a1      	mov	r9, r4
 800e13a:	eb18 080a 	adds.w	r8, r8, sl
 800e13e:	eb49 090b 	adc.w	r9, r9, fp
 800e142:	f04f 0100 	mov.w	r1, #0
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e14e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e152:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e156:	4688      	mov	r8, r1
 800e158:	4691      	mov	r9, r2
 800e15a:	eb1a 0508 	adds.w	r5, sl, r8
 800e15e:	eb4b 0609 	adc.w	r6, fp, r9
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	4619      	mov	r1, r3
 800e168:	f04f 0200 	mov.w	r2, #0
 800e16c:	f04f 0300 	mov.w	r3, #0
 800e170:	f04f 0400 	mov.w	r4, #0
 800e174:	0094      	lsls	r4, r2, #2
 800e176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e17a:	008b      	lsls	r3, r1, #2
 800e17c:	461a      	mov	r2, r3
 800e17e:	4623      	mov	r3, r4
 800e180:	4628      	mov	r0, r5
 800e182:	4631      	mov	r1, r6
 800e184:	f7f2 fd98 	bl	8000cb8 <__aeabi_uldivmod>
 800e188:	4603      	mov	r3, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	461a      	mov	r2, r3
 800e18e:	4b50      	ldr	r3, [pc, #320]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e190:	fba3 2302 	umull	r2, r3, r3, r2
 800e194:	095b      	lsrs	r3, r3, #5
 800e196:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	469b      	mov	fp, r3
 800e19e:	f04f 0c00 	mov.w	ip, #0
 800e1a2:	46d9      	mov	r9, fp
 800e1a4:	46e2      	mov	sl, ip
 800e1a6:	eb19 0309 	adds.w	r3, r9, r9
 800e1aa:	eb4a 040a 	adc.w	r4, sl, sl
 800e1ae:	4699      	mov	r9, r3
 800e1b0:	46a2      	mov	sl, r4
 800e1b2:	eb19 090b 	adds.w	r9, r9, fp
 800e1b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e1ba:	f04f 0100 	mov.w	r1, #0
 800e1be:	f04f 0200 	mov.w	r2, #0
 800e1c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1ce:	4689      	mov	r9, r1
 800e1d0:	4692      	mov	sl, r2
 800e1d2:	eb1b 0509 	adds.w	r5, fp, r9
 800e1d6:	eb4c 060a 	adc.w	r6, ip, sl
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	f04f 0200 	mov.w	r2, #0
 800e1e4:	f04f 0300 	mov.w	r3, #0
 800e1e8:	f04f 0400 	mov.w	r4, #0
 800e1ec:	0094      	lsls	r4, r2, #2
 800e1ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e1f2:	008b      	lsls	r3, r1, #2
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	4623      	mov	r3, r4
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	f7f2 fd5c 	bl	8000cb8 <__aeabi_uldivmod>
 800e200:	4603      	mov	r3, r0
 800e202:	460c      	mov	r4, r1
 800e204:	461a      	mov	r2, r3
 800e206:	4b32      	ldr	r3, [pc, #200]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e208:	fba3 1302 	umull	r1, r3, r3, r2
 800e20c:	095b      	lsrs	r3, r3, #5
 800e20e:	2164      	movs	r1, #100	; 0x64
 800e210:	fb01 f303 	mul.w	r3, r1, r3
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	011b      	lsls	r3, r3, #4
 800e218:	3332      	adds	r3, #50	; 0x32
 800e21a:	4a2d      	ldr	r2, [pc, #180]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e21c:	fba2 2303 	umull	r2, r3, r2, r3
 800e220:	095b      	lsrs	r3, r3, #5
 800e222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e226:	4498      	add	r8, r3
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	469b      	mov	fp, r3
 800e22c:	f04f 0c00 	mov.w	ip, #0
 800e230:	46d9      	mov	r9, fp
 800e232:	46e2      	mov	sl, ip
 800e234:	eb19 0309 	adds.w	r3, r9, r9
 800e238:	eb4a 040a 	adc.w	r4, sl, sl
 800e23c:	4699      	mov	r9, r3
 800e23e:	46a2      	mov	sl, r4
 800e240:	eb19 090b 	adds.w	r9, r9, fp
 800e244:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e248:	f04f 0100 	mov.w	r1, #0
 800e24c:	f04f 0200 	mov.w	r2, #0
 800e250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e25c:	4689      	mov	r9, r1
 800e25e:	4692      	mov	sl, r2
 800e260:	eb1b 0509 	adds.w	r5, fp, r9
 800e264:	eb4c 060a 	adc.w	r6, ip, sl
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	4619      	mov	r1, r3
 800e26e:	f04f 0200 	mov.w	r2, #0
 800e272:	f04f 0300 	mov.w	r3, #0
 800e276:	f04f 0400 	mov.w	r4, #0
 800e27a:	0094      	lsls	r4, r2, #2
 800e27c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e280:	008b      	lsls	r3, r1, #2
 800e282:	461a      	mov	r2, r3
 800e284:	4623      	mov	r3, r4
 800e286:	4628      	mov	r0, r5
 800e288:	4631      	mov	r1, r6
 800e28a:	f7f2 fd15 	bl	8000cb8 <__aeabi_uldivmod>
 800e28e:	4603      	mov	r3, r0
 800e290:	460c      	mov	r4, r1
 800e292:	461a      	mov	r2, r3
 800e294:	4b0e      	ldr	r3, [pc, #56]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e296:	fba3 1302 	umull	r1, r3, r3, r2
 800e29a:	095b      	lsrs	r3, r3, #5
 800e29c:	2164      	movs	r1, #100	; 0x64
 800e29e:	fb01 f303 	mul.w	r3, r1, r3
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	011b      	lsls	r3, r3, #4
 800e2a6:	3332      	adds	r3, #50	; 0x32
 800e2a8:	4a09      	ldr	r2, [pc, #36]	; (800e2d0 <UART_SetConfig+0x6f4>)
 800e2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ae:	095b      	lsrs	r3, r3, #5
 800e2b0:	f003 020f 	and.w	r2, r3, #15
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4442      	add	r2, r8
 800e2ba:	609a      	str	r2, [r3, #8]
}
 800e2bc:	e7ff      	b.n	800e2be <UART_SetConfig+0x6e2>
 800e2be:	bf00      	nop
 800e2c0:	3714      	adds	r7, #20
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	40011000 	.word	0x40011000
 800e2cc:	40011400 	.word	0x40011400
 800e2d0:	51eb851f 	.word	0x51eb851f

0800e2d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e2d4:	b084      	sub	sp, #16
 800e2d6:	b480      	push	{r7}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	f107 001c 	add.w	r0, r7, #28
 800e2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e2ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e2ee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e2f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e2f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e2fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e2fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	4313      	orrs	r3, r2
 800e304:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e30e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	b004      	add	sp, #16
 800e328:	4770      	bx	lr

0800e32a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e32a:	b480      	push	{r7}
 800e32c:	b083      	sub	sp, #12
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e338:	4618      	mov	r0, r3
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr

0800e366 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e366:	b580      	push	{r7, lr}
 800e368:	b082      	sub	sp, #8
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2203      	movs	r2, #3
 800e372:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e374:	2002      	movs	r0, #2
 800e376:	f7f9 fbc5 	bl	8007b04 <HAL_Delay>
  
  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f003 0303 	and.w	r3, r3, #3
}
 800e394:	4618      	mov	r0, r3
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e3be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e3c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e3ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e3da:	f023 030f 	bic.w	r3, r3, #15
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	431a      	orrs	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	b2db      	uxtb	r3, r3
}
 800e402:	4618      	mov	r0, r3
 800e404:	370c      	adds	r7, #12
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr

0800e40e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e40e:	b480      	push	{r7}
 800e410:	b085      	sub	sp, #20
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
 800e416:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3314      	adds	r3, #20
 800e41c:	461a      	mov	r2, r3
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	4413      	add	r3, r2
 800e422:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
}  
 800e428:	4618      	mov	r0, r3
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e45a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e460:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e466:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e472:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	431a      	orrs	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e47e:	2300      	movs	r3, #0

}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b088      	sub	sp, #32
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e49a:	2310      	movs	r3, #16
 800e49c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e49e:	2340      	movs	r3, #64	; 0x40
 800e4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4ac:	f107 0308 	add.w	r3, r7, #8
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7ff ff74 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e4b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4bc:	2110      	movs	r1, #16
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fa40 	bl	800e944 <SDMMC_GetCmdResp1>
 800e4c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4c6:	69fb      	ldr	r3, [r7, #28]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e4de:	2311      	movs	r3, #17
 800e4e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4f0:	f107 0308 	add.w	r3, r7, #8
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ff52 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e500:	2111      	movs	r1, #17
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 fa1e 	bl	800e944 <SDMMC_GetCmdResp1>
 800e508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e50a:	69fb      	ldr	r3, [r7, #28]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b088      	sub	sp, #32
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e522:	2312      	movs	r3, #18
 800e524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e526:	2340      	movs	r3, #64	; 0x40
 800e528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e52a:	2300      	movs	r3, #0
 800e52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e534:	f107 0308 	add.w	r3, r7, #8
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff ff30 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e540:	f241 3288 	movw	r2, #5000	; 0x1388
 800e544:	2112      	movs	r1, #18
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f9fc 	bl	800e944 <SDMMC_GetCmdResp1>
 800e54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e54e:	69fb      	ldr	r3, [r7, #28]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e566:	2318      	movs	r3, #24
 800e568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e56a:	2340      	movs	r3, #64	; 0x40
 800e56c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e56e:	2300      	movs	r3, #0
 800e570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e578:	f107 0308 	add.w	r3, r7, #8
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff ff0e 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e584:	f241 3288 	movw	r2, #5000	; 0x1388
 800e588:	2118      	movs	r1, #24
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f9da 	bl	800e944 <SDMMC_GetCmdResp1>
 800e590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e592:	69fb      	ldr	r3, [r7, #28]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3720      	adds	r7, #32
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e5aa:	2319      	movs	r3, #25
 800e5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5ae:	2340      	movs	r3, #64	; 0x40
 800e5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5bc:	f107 0308 	add.w	r3, r7, #8
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7ff feec 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5cc:	2119      	movs	r1, #25
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f9b8 	bl	800e944 <SDMMC_GetCmdResp1>
 800e5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5d6:	69fb      	ldr	r3, [r7, #28]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3720      	adds	r7, #32
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e5ec:	230c      	movs	r3, #12
 800e5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5f0:	2340      	movs	r3, #64	; 0x40
 800e5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5fe:	f107 0308 	add.w	r3, r7, #8
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff fecb 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e60a:	4a05      	ldr	r2, [pc, #20]	; (800e620 <SDMMC_CmdStopTransfer+0x40>)
 800e60c:	210c      	movs	r1, #12
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f998 	bl	800e944 <SDMMC_GetCmdResp1>
 800e614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e616:	69fb      	ldr	r3, [r7, #28]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3720      	adds	r7, #32
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	05f5e100 	.word	0x05f5e100

0800e624 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08a      	sub	sp, #40	; 0x28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e634:	2307      	movs	r3, #7
 800e636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e638:	2340      	movs	r3, #64	; 0x40
 800e63a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e63c:	2300      	movs	r3, #0
 800e63e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e644:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e646:	f107 0310 	add.w	r3, r7, #16
 800e64a:	4619      	mov	r1, r3
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f7ff fea7 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e652:	f241 3288 	movw	r2, #5000	; 0x1388
 800e656:	2107      	movs	r1, #7
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f000 f973 	bl	800e944 <SDMMC_GetCmdResp1>
 800e65e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e662:	4618      	mov	r0, r3
 800e664:	3728      	adds	r7, #40	; 0x28
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b088      	sub	sp, #32
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e672:	2300      	movs	r3, #0
 800e674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e676:	2300      	movs	r3, #0
 800e678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e67a:	2300      	movs	r3, #0
 800e67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e67e:	2300      	movs	r3, #0
 800e680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e688:	f107 0308 	add.w	r3, r7, #8
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff fe86 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f92d 	bl	800e8f4 <SDMMC_GetCmdError>
 800e69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e69c:	69fb      	ldr	r3, [r7, #28]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3720      	adds	r7, #32
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b088      	sub	sp, #32
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e6ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e6b4:	2308      	movs	r3, #8
 800e6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6b8:	2340      	movs	r3, #64	; 0x40
 800e6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6c6:	f107 0308 	add.w	r3, r7, #8
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff fe67 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fb16 	bl	800ed04 <SDMMC_GetCmdResp7>
 800e6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6da:	69fb      	ldr	r3, [r7, #28]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3720      	adds	r7, #32
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b088      	sub	sp, #32
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e6f2:	2337      	movs	r3, #55	; 0x37
 800e6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6f6:	2340      	movs	r3, #64	; 0x40
 800e6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e704:	f107 0308 	add.w	r3, r7, #8
 800e708:	4619      	mov	r1, r3
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7ff fe48 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e710:	f241 3288 	movw	r2, #5000	; 0x1388
 800e714:	2137      	movs	r1, #55	; 0x37
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f914 	bl	800e944 <SDMMC_GetCmdResp1>
 800e71c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e71e:	69fb      	ldr	r3, [r7, #28]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3720      	adds	r7, #32
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b088      	sub	sp, #32
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e73e:	2329      	movs	r3, #41	; 0x29
 800e740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e742:	2340      	movs	r3, #64	; 0x40
 800e744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e74e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	4619      	mov	r1, r3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff fe22 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f000 fa23 	bl	800eba8 <SDMMC_GetCmdResp3>
 800e762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e764:	69fb      	ldr	r3, [r7, #28]
}
 800e766:	4618      	mov	r0, r3
 800e768:	3720      	adds	r7, #32
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b088      	sub	sp, #32
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e77c:	2306      	movs	r3, #6
 800e77e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e780:	2340      	movs	r3, #64	; 0x40
 800e782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e784:	2300      	movs	r3, #0
 800e786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e78c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e78e:	f107 0308 	add.w	r3, r7, #8
 800e792:	4619      	mov	r1, r3
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7ff fe03 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e79a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e79e:	2106      	movs	r1, #6
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f8cf 	bl	800e944 <SDMMC_GetCmdResp1>
 800e7a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7a8:	69fb      	ldr	r3, [r7, #28]
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3720      	adds	r7, #32
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b088      	sub	sp, #32
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e7be:	2333      	movs	r3, #51	; 0x33
 800e7c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7c2:	2340      	movs	r3, #64	; 0x40
 800e7c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7d0:	f107 0308 	add.w	r3, r7, #8
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fde2 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7e0:	2133      	movs	r1, #51	; 0x33
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f8ae 	bl	800e944 <SDMMC_GetCmdResp1>
 800e7e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7ea:	69fb      	ldr	r3, [r7, #28]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3720      	adds	r7, #32
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e800:	2302      	movs	r3, #2
 800e802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e804:	23c0      	movs	r3, #192	; 0xc0
 800e806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e808:	2300      	movs	r3, #0
 800e80a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e80c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e810:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e812:	f107 0308 	add.w	r3, r7, #8
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff fdc1 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f97c 	bl	800eb1c <SDMMC_GetCmdResp2>
 800e824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e826:	69fb      	ldr	r3, [r7, #28]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3720      	adds	r7, #32
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b088      	sub	sp, #32
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e83e:	2309      	movs	r3, #9
 800e840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e842:	23c0      	movs	r3, #192	; 0xc0
 800e844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e846:	2300      	movs	r3, #0
 800e848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e850:	f107 0308 	add.w	r3, r7, #8
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fda2 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 f95d 	bl	800eb1c <SDMMC_GetCmdResp2>
 800e862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e864:	69fb      	ldr	r3, [r7, #28]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3720      	adds	r7, #32
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b088      	sub	sp, #32
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e878:	2300      	movs	r3, #0
 800e87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e87c:	2303      	movs	r3, #3
 800e87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e880:	2340      	movs	r3, #64	; 0x40
 800e882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e884:	2300      	movs	r3, #0
 800e886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e88e:	f107 0308 	add.w	r3, r7, #8
 800e892:	4619      	mov	r1, r3
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff fd83 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e89a:	683a      	ldr	r2, [r7, #0]
 800e89c:	2103      	movs	r1, #3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f9bc 	bl	800ec1c <SDMMC_GetCmdResp6>
 800e8a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8a6:	69fb      	ldr	r3, [r7, #28]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b088      	sub	sp, #32
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e8be:	230d      	movs	r3, #13
 800e8c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8c2:	2340      	movs	r3, #64	; 0x40
 800e8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8d0:	f107 0308 	add.w	r3, r7, #8
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff fd62 	bl	800e3a0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8e0:	210d      	movs	r1, #13
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f82e 	bl	800e944 <SDMMC_GetCmdResp1>
 800e8e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8ea:	69fb      	ldr	r3, [r7, #28]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3720      	adds	r7, #32
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e8f4:	b490      	push	{r4, r7}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8fc:	4b0f      	ldr	r3, [pc, #60]	; (800e93c <SDMMC_GetCmdError+0x48>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a0f      	ldr	r2, [pc, #60]	; (800e940 <SDMMC_GetCmdError+0x4c>)
 800e902:	fba2 2303 	umull	r2, r3, r2, r3
 800e906:	0a5b      	lsrs	r3, r3, #9
 800e908:	f241 3288 	movw	r2, #5000	; 0x1388
 800e90c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e910:	4623      	mov	r3, r4
 800e912:	1e5c      	subs	r4, r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	d102      	bne.n	800e91e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e91c:	e009      	b.n	800e932 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e926:	2b00      	cmp	r3, #0
 800e928:	d0f2      	beq.n	800e910 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	22c5      	movs	r2, #197	; 0xc5
 800e92e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bc90      	pop	{r4, r7}
 800e93a:	4770      	bx	lr
 800e93c:	20000000 	.word	0x20000000
 800e940:	10624dd3 	.word	0x10624dd3

0800e944 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e944:	b590      	push	{r4, r7, lr}
 800e946:	b087      	sub	sp, #28
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	460b      	mov	r3, r1
 800e94e:	607a      	str	r2, [r7, #4]
 800e950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e952:	4b6f      	ldr	r3, [pc, #444]	; (800eb10 <SDMMC_GetCmdResp1+0x1cc>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a6f      	ldr	r2, [pc, #444]	; (800eb14 <SDMMC_GetCmdResp1+0x1d0>)
 800e958:	fba2 2303 	umull	r2, r3, r2, r3
 800e95c:	0a5b      	lsrs	r3, r3, #9
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e964:	4623      	mov	r3, r4
 800e966:	1e5c      	subs	r4, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d102      	bne.n	800e972 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e96c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e970:	e0c9      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e976:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0f0      	beq.n	800e964 <SDMMC_GetCmdResp1+0x20>
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1eb      	bne.n	800e964 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e990:	f003 0304 	and.w	r3, r3, #4
 800e994:	2b00      	cmp	r3, #0
 800e996:	d004      	beq.n	800e9a2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2204      	movs	r2, #4
 800e99c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e99e:	2304      	movs	r3, #4
 800e9a0:	e0b1      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a6:	f003 0301 	and.w	r3, r3, #1
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d004      	beq.n	800e9b8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e0a6      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	22c5      	movs	r2, #197	; 0xc5
 800e9bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f7ff fd18 	bl	800e3f4 <SDIO_GetCommandResponse>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d001      	beq.n	800e9d2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e099      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f7ff fd1a 	bl	800e40e <SDIO_GetResponse>
 800e9da:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e9dc:	693a      	ldr	r2, [r7, #16]
 800e9de:	4b4e      	ldr	r3, [pc, #312]	; (800eb18 <SDMMC_GetCmdResp1+0x1d4>)
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e08d      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	da02      	bge.n	800e9f6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e9f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9f4:	e087      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea00:	2340      	movs	r3, #64	; 0x40
 800ea02:	e080      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea0e:	2380      	movs	r3, #128	; 0x80
 800ea10:	e079      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ea1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea20:	e071      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ea2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea30:	e069      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea40:	e061      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea50:	e059      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea60:	e051      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea70:	e049      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ea7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ea80:	e041      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ea8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea90:	e039      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d002      	beq.n	800eaa2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800eaa0:	e031      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d002      	beq.n	800eab2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eaac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eab0:	e029      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eabc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eac0:	e021      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d002      	beq.n	800ead2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eacc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ead0:	e019      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d002      	beq.n	800eae2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eadc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eae0:	e011      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eaec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eaf0:	e009      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f003 0308 	and.w	r3, r3, #8
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eafc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eb00:	e001      	b.n	800eb06 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd90      	pop	{r4, r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	20000000 	.word	0x20000000
 800eb14:	10624dd3 	.word	0x10624dd3
 800eb18:	fdffe008 	.word	0xfdffe008

0800eb1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800eb1c:	b490      	push	{r4, r7}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb24:	4b1e      	ldr	r3, [pc, #120]	; (800eba0 <SDMMC_GetCmdResp2+0x84>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a1e      	ldr	r2, [pc, #120]	; (800eba4 <SDMMC_GetCmdResp2+0x88>)
 800eb2a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb2e:	0a5b      	lsrs	r3, r3, #9
 800eb30:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eb38:	4623      	mov	r3, r4
 800eb3a:	1e5c      	subs	r4, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d102      	bne.n	800eb46 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb44:	e026      	b.n	800eb94 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d0f0      	beq.n	800eb38 <SDMMC_GetCmdResp2+0x1c>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1eb      	bne.n	800eb38 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb64:	f003 0304 	and.w	r3, r3, #4
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d004      	beq.n	800eb76 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2204      	movs	r2, #4
 800eb70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb72:	2304      	movs	r3, #4
 800eb74:	e00e      	b.n	800eb94 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb7a:	f003 0301 	and.w	r3, r3, #1
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d004      	beq.n	800eb8c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2201      	movs	r2, #1
 800eb86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e003      	b.n	800eb94 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	22c5      	movs	r2, #197	; 0xc5
 800eb90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bc90      	pop	{r4, r7}
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	20000000 	.word	0x20000000
 800eba4:	10624dd3 	.word	0x10624dd3

0800eba8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800eba8:	b490      	push	{r4, r7}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ebb0:	4b18      	ldr	r3, [pc, #96]	; (800ec14 <SDMMC_GetCmdResp3+0x6c>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a18      	ldr	r2, [pc, #96]	; (800ec18 <SDMMC_GetCmdResp3+0x70>)
 800ebb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebba:	0a5b      	lsrs	r3, r3, #9
 800ebbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ebc4:	4623      	mov	r3, r4
 800ebc6:	1e5c      	subs	r4, r3, #1
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d102      	bne.n	800ebd2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebd0:	e01b      	b.n	800ec0a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0f0      	beq.n	800ebc4 <SDMMC_GetCmdResp3+0x1c>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1eb      	bne.n	800ebc4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf0:	f003 0304 	and.w	r3, r3, #4
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d004      	beq.n	800ec02 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2204      	movs	r2, #4
 800ebfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebfe:	2304      	movs	r3, #4
 800ec00:	e003      	b.n	800ec0a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	22c5      	movs	r2, #197	; 0xc5
 800ec06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bc90      	pop	{r4, r7}
 800ec12:	4770      	bx	lr
 800ec14:	20000000 	.word	0x20000000
 800ec18:	10624dd3 	.word	0x10624dd3

0800ec1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ec1c:	b590      	push	{r4, r7, lr}
 800ec1e:	b087      	sub	sp, #28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	460b      	mov	r3, r1
 800ec26:	607a      	str	r2, [r7, #4]
 800ec28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec2a:	4b34      	ldr	r3, [pc, #208]	; (800ecfc <SDMMC_GetCmdResp6+0xe0>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a34      	ldr	r2, [pc, #208]	; (800ed00 <SDMMC_GetCmdResp6+0xe4>)
 800ec30:	fba2 2303 	umull	r2, r3, r2, r3
 800ec34:	0a5b      	lsrs	r3, r3, #9
 800ec36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec3a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ec3e:	4623      	mov	r3, r4
 800ec40:	1e5c      	subs	r4, r3, #1
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec4a:	e052      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec50:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d0f0      	beq.n	800ec3e <SDMMC_GetCmdResp6+0x22>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1eb      	bne.n	800ec3e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec6a:	f003 0304 	and.w	r3, r3, #4
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d004      	beq.n	800ec7c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2204      	movs	r2, #4
 800ec76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec78:	2304      	movs	r3, #4
 800ec7a:	e03a      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec80:	f003 0301 	and.w	r3, r3, #1
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d004      	beq.n	800ec92 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e02f      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f7ff fbae 	bl	800e3f4 <SDIO_GetCommandResponse>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	7afb      	ldrb	r3, [r7, #11]
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d001      	beq.n	800eca6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eca2:	2301      	movs	r3, #1
 800eca4:	e025      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	22c5      	movs	r2, #197	; 0xc5
 800ecaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ecac:	2100      	movs	r1, #0
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7ff fbad 	bl	800e40e <SDIO_GetResponse>
 800ecb4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d106      	bne.n	800ecce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	0c1b      	lsrs	r3, r3, #16
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ecca:	2300      	movs	r3, #0
 800eccc:	e011      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ecd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ecdc:	e009      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ece8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecec:	e001      	b.n	800ecf2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd90      	pop	{r4, r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	20000000 	.word	0x20000000
 800ed00:	10624dd3 	.word	0x10624dd3

0800ed04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ed04:	b490      	push	{r4, r7}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ed0c:	4b21      	ldr	r3, [pc, #132]	; (800ed94 <SDMMC_GetCmdResp7+0x90>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a21      	ldr	r2, [pc, #132]	; (800ed98 <SDMMC_GetCmdResp7+0x94>)
 800ed12:	fba2 2303 	umull	r2, r3, r2, r3
 800ed16:	0a5b      	lsrs	r3, r3, #9
 800ed18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ed20:	4623      	mov	r3, r4
 800ed22:	1e5c      	subs	r4, r3, #1
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d102      	bne.n	800ed2e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed2c:	e02c      	b.n	800ed88 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d0f0      	beq.n	800ed20 <SDMMC_GetCmdResp7+0x1c>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1eb      	bne.n	800ed20 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed4c:	f003 0304 	and.w	r3, r3, #4
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d004      	beq.n	800ed5e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2204      	movs	r2, #4
 800ed58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed5a:	2304      	movs	r3, #4
 800ed5c:	e014      	b.n	800ed88 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed62:	f003 0301 	and.w	r3, r3, #1
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d004      	beq.n	800ed74 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed70:	2301      	movs	r3, #1
 800ed72:	e009      	b.n	800ed88 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2240      	movs	r2, #64	; 0x40
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ed86:	2300      	movs	r3, #0
  
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bc90      	pop	{r4, r7}
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	20000000 	.word	0x20000000
 800ed98:	10624dd3 	.word	0x10624dd3

0800ed9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eda0:	4904      	ldr	r1, [pc, #16]	; (800edb4 <MX_FATFS_Init+0x18>)
 800eda2:	4805      	ldr	r0, [pc, #20]	; (800edb8 <MX_FATFS_Init+0x1c>)
 800eda4:	f003 fb9c 	bl	80124e0 <FATFS_LinkDriver>
 800eda8:	4603      	mov	r3, r0
 800edaa:	461a      	mov	r2, r3
 800edac:	4b03      	ldr	r3, [pc, #12]	; (800edbc <MX_FATFS_Init+0x20>)
 800edae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800edb0:	bf00      	nop
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	20035f58 	.word	0x20035f58
 800edb8:	080189f4 	.word	0x080189f4
 800edbc:	20035f54 	.word	0x20035f54

0800edc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800edca:	f000 f896 	bl	800eefa <BSP_SD_IsDetected>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d001      	beq.n	800edd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800edd4:	2301      	movs	r3, #1
 800edd6:	e012      	b.n	800edfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800edd8:	480b      	ldr	r0, [pc, #44]	; (800ee08 <BSP_SD_Init+0x48>)
 800edda:	f7fb ffa5 	bl	800ad28 <HAL_SD_Init>
 800edde:	4603      	mov	r3, r0
 800ede0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d109      	bne.n	800edfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ede8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800edec:	4806      	ldr	r0, [pc, #24]	; (800ee08 <BSP_SD_Init+0x48>)
 800edee:	f7fc fd4f 	bl	800b890 <HAL_SD_ConfigWideBusOperation>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800edfc:	79fb      	ldrb	r3, [r7, #7]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20035d50 	.word	0x20035d50

0800ee0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	68f9      	ldr	r1, [r7, #12]
 800ee22:	4806      	ldr	r0, [pc, #24]	; (800ee3c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ee24:	f7fc f810 	bl	800ae48 <HAL_SD_ReadBlocks_DMA>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d001      	beq.n	800ee32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ee32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	20035d50 	.word	0x20035d50

0800ee40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68ba      	ldr	r2, [r7, #8]
 800ee54:	68f9      	ldr	r1, [r7, #12]
 800ee56:	4806      	ldr	r0, [pc, #24]	; (800ee70 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ee58:	f7fc f8de 	bl	800b018 <HAL_SD_WriteBlocks_DMA>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ee66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3718      	adds	r7, #24
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	20035d50 	.word	0x20035d50

0800ee74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ee78:	4805      	ldr	r0, [pc, #20]	; (800ee90 <BSP_SD_GetCardState+0x1c>)
 800ee7a:	f7fc fd85 	bl	800b988 <HAL_SD_GetCardState>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b04      	cmp	r3, #4
 800ee82:	bf14      	ite	ne
 800ee84:	2301      	movne	r3, #1
 800ee86:	2300      	moveq	r3, #0
 800ee88:	b2db      	uxtb	r3, r3
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20035d50 	.word	0x20035d50

0800ee94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	4803      	ldr	r0, [pc, #12]	; (800eeac <BSP_SD_GetCardInfo+0x18>)
 800eea0:	f7fc fcca 	bl	800b838 <HAL_SD_GetCardInfo>
}
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	20035d50 	.word	0x20035d50

0800eeb0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800eeb8:	f000 f818 	bl	800eeec <BSP_SD_AbortCallback>
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800eecc:	f000 f9a8 	bl	800f220 <BSP_SD_WriteCpltCallback>
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eee0:	f000 f9aa 	bl	800f238 <BSP_SD_ReadCpltCallback>
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0

}
 800eef0:	bf00      	nop
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b082      	sub	sp, #8
 800eefe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ef00:	2301      	movs	r3, #1
 800ef02:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ef04:	f000 f80c 	bl	800ef20 <BSP_PlatformIsDetected>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	b2db      	uxtb	r3, r3
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ef26:	2301      	movs	r3, #1
 800ef28:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ef2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ef2e:	4806      	ldr	r0, [pc, #24]	; (800ef48 <BSP_PlatformIsDetected+0x28>)
 800ef30:	f7fa f866 	bl	8009000 <HAL_GPIO_ReadPin>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ef3e:	79fb      	ldrb	r3, [r7, #7]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	40020000 	.word	0x40020000

0800ef4c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ef54:	f7f8 fdca 	bl	8007aec <HAL_GetTick>
 800ef58:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ef5a:	e006      	b.n	800ef6a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef5c:	f7ff ff8a 	bl	800ee74 <BSP_SD_GetCardState>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e009      	b.n	800ef7e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ef6a:	f7f8 fdbf 	bl	8007aec <HAL_GetTick>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d8f0      	bhi.n	800ef5c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ef7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
	...

0800ef88 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef92:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <SD_CheckStatus+0x38>)
 800ef94:	2201      	movs	r2, #1
 800ef96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ef98:	f7ff ff6c 	bl	800ee74 <BSP_SD_GetCardState>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d107      	bne.n	800efb2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800efa2:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <SD_CheckStatus+0x38>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	f023 0301 	bic.w	r3, r3, #1
 800efac:	b2da      	uxtb	r2, r3
 800efae:	4b04      	ldr	r3, [pc, #16]	; (800efc0 <SD_CheckStatus+0x38>)
 800efb0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800efb2:	4b03      	ldr	r3, [pc, #12]	; (800efc0 <SD_CheckStatus+0x38>)
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	b2db      	uxtb	r3, r3
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20000009 	.word	0x20000009

0800efc4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	4603      	mov	r3, r0
 800efcc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800efce:	f7ff fef7 	bl	800edc0 <BSP_SD_Init>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d107      	bne.n	800efe8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800efd8:	79fb      	ldrb	r3, [r7, #7]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7ff ffd4 	bl	800ef88 <SD_CheckStatus>
 800efe0:	4603      	mov	r3, r0
 800efe2:	461a      	mov	r2, r3
 800efe4:	4b04      	ldr	r3, [pc, #16]	; (800eff8 <SD_initialize+0x34>)
 800efe6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800efe8:	4b03      	ldr	r3, [pc, #12]	; (800eff8 <SD_initialize+0x34>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	b2db      	uxtb	r3, r3
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	20000009 	.word	0x20000009

0800effc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff ffbd 	bl	800ef88 <SD_CheckStatus>
 800f00e:	4603      	mov	r3, r0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60b9      	str	r1, [r7, #8]
 800f020:	607a      	str	r2, [r7, #4]
 800f022:	603b      	str	r3, [r7, #0]
 800f024:	4603      	mov	r3, r0
 800f026:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f02c:	f247 5030 	movw	r0, #30000	; 0x7530
 800f030:	f7ff ff8c 	bl	800ef4c <SD_CheckStatusWithTimeout>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	da01      	bge.n	800f03e <SD_read+0x26>
  {
    return res;
 800f03a:	7dfb      	ldrb	r3, [r7, #23]
 800f03c:	e03b      	b.n	800f0b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	68b8      	ldr	r0, [r7, #8]
 800f044:	f7ff fee2 	bl	800ee0c <BSP_SD_ReadBlocks_DMA>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d132      	bne.n	800f0b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f04e:	4b1c      	ldr	r3, [pc, #112]	; (800f0c0 <SD_read+0xa8>)
 800f050:	2200      	movs	r2, #0
 800f052:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f054:	f7f8 fd4a 	bl	8007aec <HAL_GetTick>
 800f058:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f05a:	bf00      	nop
 800f05c:	4b18      	ldr	r3, [pc, #96]	; (800f0c0 <SD_read+0xa8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d108      	bne.n	800f076 <SD_read+0x5e>
 800f064:	f7f8 fd42 	bl	8007aec <HAL_GetTick>
 800f068:	4602      	mov	r2, r0
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	f247 522f 	movw	r2, #29999	; 0x752f
 800f072:	4293      	cmp	r3, r2
 800f074:	d9f2      	bls.n	800f05c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800f076:	4b12      	ldr	r3, [pc, #72]	; (800f0c0 <SD_read+0xa8>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d102      	bne.n	800f084 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f07e:	2301      	movs	r3, #1
 800f080:	75fb      	strb	r3, [r7, #23]
 800f082:	e017      	b.n	800f0b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f084:	4b0e      	ldr	r3, [pc, #56]	; (800f0c0 <SD_read+0xa8>)
 800f086:	2200      	movs	r2, #0
 800f088:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f08a:	f7f8 fd2f 	bl	8007aec <HAL_GetTick>
 800f08e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f090:	e007      	b.n	800f0a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f092:	f7ff feef 	bl	800ee74 <BSP_SD_GetCardState>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d102      	bne.n	800f0a2 <SD_read+0x8a>
          {
            res = RES_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f0a0:	e008      	b.n	800f0b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f0a2:	f7f8 fd23 	bl	8007aec <HAL_GetTick>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d9ee      	bls.n	800f092 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3718      	adds	r7, #24
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	200335ec 	.word	0x200335ec

0800f0c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60b9      	str	r1, [r7, #8]
 800f0cc:	607a      	str	r2, [r7, #4]
 800f0ce:	603b      	str	r3, [r7, #0]
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f0d8:	4b24      	ldr	r3, [pc, #144]	; (800f16c <SD_write+0xa8>)
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f0de:	f247 5030 	movw	r0, #30000	; 0x7530
 800f0e2:	f7ff ff33 	bl	800ef4c <SD_CheckStatusWithTimeout>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	da01      	bge.n	800f0f0 <SD_write+0x2c>
  {
    return res;
 800f0ec:	7dfb      	ldrb	r3, [r7, #23]
 800f0ee:	e038      	b.n	800f162 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	68b8      	ldr	r0, [r7, #8]
 800f0f6:	f7ff fea3 	bl	800ee40 <BSP_SD_WriteBlocks_DMA>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d12f      	bne.n	800f160 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f100:	f7f8 fcf4 	bl	8007aec <HAL_GetTick>
 800f104:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f106:	bf00      	nop
 800f108:	4b18      	ldr	r3, [pc, #96]	; (800f16c <SD_write+0xa8>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d108      	bne.n	800f122 <SD_write+0x5e>
 800f110:	f7f8 fcec 	bl	8007aec <HAL_GetTick>
 800f114:	4602      	mov	r2, r0
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	f247 522f 	movw	r2, #29999	; 0x752f
 800f11e:	4293      	cmp	r3, r2
 800f120:	d9f2      	bls.n	800f108 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f122:	4b12      	ldr	r3, [pc, #72]	; (800f16c <SD_write+0xa8>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d102      	bne.n	800f130 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	75fb      	strb	r3, [r7, #23]
 800f12e:	e017      	b.n	800f160 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f130:	4b0e      	ldr	r3, [pc, #56]	; (800f16c <SD_write+0xa8>)
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f136:	f7f8 fcd9 	bl	8007aec <HAL_GetTick>
 800f13a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f13c:	e007      	b.n	800f14e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f13e:	f7ff fe99 	bl	800ee74 <BSP_SD_GetCardState>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d102      	bne.n	800f14e <SD_write+0x8a>
          {
            res = RES_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	75fb      	strb	r3, [r7, #23]
            break;
 800f14c:	e008      	b.n	800f160 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f14e:	f7f8 fccd 	bl	8007aec <HAL_GetTick>
 800f152:	4602      	mov	r2, r0
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	f247 522f 	movw	r2, #29999	; 0x752f
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d9ee      	bls.n	800f13e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f160:	7dfb      	ldrb	r3, [r7, #23]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3718      	adds	r7, #24
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	200335e8 	.word	0x200335e8

0800f170 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b08c      	sub	sp, #48	; 0x30
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	603a      	str	r2, [r7, #0]
 800f17a:	71fb      	strb	r3, [r7, #7]
 800f17c:	460b      	mov	r3, r1
 800f17e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f186:	4b25      	ldr	r3, [pc, #148]	; (800f21c <SD_ioctl+0xac>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d001      	beq.n	800f198 <SD_ioctl+0x28>
 800f194:	2303      	movs	r3, #3
 800f196:	e03c      	b.n	800f212 <SD_ioctl+0xa2>

  switch (cmd)
 800f198:	79bb      	ldrb	r3, [r7, #6]
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	d834      	bhi.n	800f208 <SD_ioctl+0x98>
 800f19e:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <SD_ioctl+0x34>)
 800f1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a4:	0800f1b5 	.word	0x0800f1b5
 800f1a8:	0800f1bd 	.word	0x0800f1bd
 800f1ac:	0800f1d5 	.word	0x0800f1d5
 800f1b0:	0800f1ef 	.word	0x0800f1ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1ba:	e028      	b.n	800f20e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1bc:	f107 030c 	add.w	r3, r7, #12
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff fe67 	bl	800ee94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1d2:	e01c      	b.n	800f20e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1d4:	f107 030c 	add.w	r3, r7, #12
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fe5b 	bl	800ee94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1ec:	e00f      	b.n	800f20e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1ee:	f107 030c 	add.w	r3, r7, #12
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7ff fe4e 	bl	800ee94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fa:	0a5a      	lsrs	r2, r3, #9
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f200:	2300      	movs	r3, #0
 800f202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f206:	e002      	b.n	800f20e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f208:	2304      	movs	r3, #4
 800f20a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f20e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f212:	4618      	mov	r0, r3
 800f214:	3730      	adds	r7, #48	; 0x30
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	20000009 	.word	0x20000009

0800f220 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f220:	b480      	push	{r7}
 800f222:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f224:	4b03      	ldr	r3, [pc, #12]	; (800f234 <BSP_SD_WriteCpltCallback+0x14>)
 800f226:	2201      	movs	r2, #1
 800f228:	601a      	str	r2, [r3, #0]
}
 800f22a:	bf00      	nop
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr
 800f234:	200335e8 	.word	0x200335e8

0800f238 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f238:	b480      	push	{r7}
 800f23a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f23c:	4b03      	ldr	r3, [pc, #12]	; (800f24c <BSP_SD_ReadCpltCallback+0x14>)
 800f23e:	2201      	movs	r2, #1
 800f240:	601a      	str	r2, [r3, #0]
}
 800f242:	bf00      	nop
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	200335ec 	.word	0x200335ec

0800f250 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	4a08      	ldr	r2, [pc, #32]	; (800f280 <disk_status+0x30>)
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4413      	add	r3, r2
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	79fa      	ldrb	r2, [r7, #7]
 800f268:	4905      	ldr	r1, [pc, #20]	; (800f280 <disk_status+0x30>)
 800f26a:	440a      	add	r2, r1
 800f26c:	7a12      	ldrb	r2, [r2, #8]
 800f26e:	4610      	mov	r0, r2
 800f270:	4798      	blx	r3
 800f272:	4603      	mov	r3, r0
 800f274:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f276:	7bfb      	ldrb	r3, [r7, #15]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20033618 	.word	0x20033618

0800f284 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f292:	79fb      	ldrb	r3, [r7, #7]
 800f294:	4a0d      	ldr	r2, [pc, #52]	; (800f2cc <disk_initialize+0x48>)
 800f296:	5cd3      	ldrb	r3, [r2, r3]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d111      	bne.n	800f2c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	4a0b      	ldr	r2, [pc, #44]	; (800f2cc <disk_initialize+0x48>)
 800f2a0:	2101      	movs	r1, #1
 800f2a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	4a09      	ldr	r2, [pc, #36]	; (800f2cc <disk_initialize+0x48>)
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4413      	add	r3, r2
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	79fa      	ldrb	r2, [r7, #7]
 800f2b2:	4906      	ldr	r1, [pc, #24]	; (800f2cc <disk_initialize+0x48>)
 800f2b4:	440a      	add	r2, r1
 800f2b6:	7a12      	ldrb	r2, [r2, #8]
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	4798      	blx	r3
 800f2bc:	4603      	mov	r3, r0
 800f2be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	20033618 	.word	0x20033618

0800f2d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f2d0:	b590      	push	{r4, r7, lr}
 800f2d2:	b087      	sub	sp, #28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60b9      	str	r1, [r7, #8]
 800f2d8:	607a      	str	r2, [r7, #4]
 800f2da:	603b      	str	r3, [r7, #0]
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	4a0a      	ldr	r2, [pc, #40]	; (800f30c <disk_read+0x3c>)
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	689c      	ldr	r4, [r3, #8]
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	4a07      	ldr	r2, [pc, #28]	; (800f30c <disk_read+0x3c>)
 800f2f0:	4413      	add	r3, r2
 800f2f2:	7a18      	ldrb	r0, [r3, #8]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	68b9      	ldr	r1, [r7, #8]
 800f2fa:	47a0      	blx	r4
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800f300:	7dfb      	ldrb	r3, [r7, #23]
}
 800f302:	4618      	mov	r0, r3
 800f304:	371c      	adds	r7, #28
 800f306:	46bd      	mov	sp, r7
 800f308:	bd90      	pop	{r4, r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20033618 	.word	0x20033618

0800f310 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b087      	sub	sp, #28
 800f314:	af00      	add	r7, sp, #0
 800f316:	60b9      	str	r1, [r7, #8]
 800f318:	607a      	str	r2, [r7, #4]
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	4603      	mov	r3, r0
 800f31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	4a0a      	ldr	r2, [pc, #40]	; (800f34c <disk_write+0x3c>)
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	4413      	add	r3, r2
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	68dc      	ldr	r4, [r3, #12]
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
 800f32e:	4a07      	ldr	r2, [pc, #28]	; (800f34c <disk_write+0x3c>)
 800f330:	4413      	add	r3, r2
 800f332:	7a18      	ldrb	r0, [r3, #8]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	68b9      	ldr	r1, [r7, #8]
 800f33a:	47a0      	blx	r4
 800f33c:	4603      	mov	r3, r0
 800f33e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f340:	7dfb      	ldrb	r3, [r7, #23]
}
 800f342:	4618      	mov	r0, r3
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	bd90      	pop	{r4, r7, pc}
 800f34a:	bf00      	nop
 800f34c:	20033618 	.word	0x20033618

0800f350 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	603a      	str	r2, [r7, #0]
 800f35a:	71fb      	strb	r3, [r7, #7]
 800f35c:	460b      	mov	r3, r1
 800f35e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	4a09      	ldr	r2, [pc, #36]	; (800f388 <disk_ioctl+0x38>)
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	79fa      	ldrb	r2, [r7, #7]
 800f36e:	4906      	ldr	r1, [pc, #24]	; (800f388 <disk_ioctl+0x38>)
 800f370:	440a      	add	r2, r1
 800f372:	7a10      	ldrb	r0, [r2, #8]
 800f374:	79b9      	ldrb	r1, [r7, #6]
 800f376:	683a      	ldr	r2, [r7, #0]
 800f378:	4798      	blx	r3
 800f37a:	4603      	mov	r3, r0
 800f37c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20033618 	.word	0x20033618

0800f38c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f38c:	b480      	push	{r7}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	3301      	adds	r3, #1
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f39c:	89fb      	ldrh	r3, [r7, #14]
 800f39e:	021b      	lsls	r3, r3, #8
 800f3a0:	b21a      	sxth	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	b21b      	sxth	r3, r3
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	b21b      	sxth	r3, r3
 800f3ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f3ae:	89fb      	ldrh	r3, [r7, #14]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3303      	adds	r3, #3
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	021b      	lsls	r3, r3, #8
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	3202      	adds	r2, #2
 800f3d4:	7812      	ldrb	r2, [r2, #0]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	021b      	lsls	r3, r3, #8
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	3201      	adds	r2, #1
 800f3e2:	7812      	ldrb	r2, [r2, #0]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	7812      	ldrb	r2, [r2, #0]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	460b      	mov	r3, r1
 800f40c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	887a      	ldrh	r2, [r7, #2]
 800f416:	b2d2      	uxtb	r2, r2
 800f418:	701a      	strb	r2, [r3, #0]
 800f41a:	887b      	ldrh	r3, [r7, #2]
 800f41c:	0a1b      	lsrs	r3, r3, #8
 800f41e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	607a      	str	r2, [r7, #4]
 800f426:	887a      	ldrh	r2, [r7, #2]
 800f428:	b2d2      	uxtb	r2, r2
 800f42a:	701a      	strb	r2, [r3, #0]
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	1c5a      	adds	r2, r3, #1
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	b2d2      	uxtb	r2, r2
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	0a1b      	lsrs	r3, r3, #8
 800f452:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	607a      	str	r2, [r7, #4]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	b2d2      	uxtb	r2, r2
 800f45e:	701a      	strb	r2, [r3, #0]
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	0a1b      	lsrs	r3, r3, #8
 800f464:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	b2d2      	uxtb	r2, r2
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	0a1b      	lsrs	r3, r3, #8
 800f476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	607a      	str	r2, [r7, #4]
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	701a      	strb	r2, [r3, #0]
}
 800f484:	bf00      	nop
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f490:	b480      	push	{r7}
 800f492:	b087      	sub	sp, #28
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00d      	beq.n	800f4c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f4aa:	693a      	ldr	r2, [r7, #16]
 800f4ac:	1c53      	adds	r3, r2, #1
 800f4ae:	613b      	str	r3, [r7, #16]
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	1c59      	adds	r1, r3, #1
 800f4b4:	6179      	str	r1, [r7, #20]
 800f4b6:	7812      	ldrb	r2, [r2, #0]
 800f4b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	607b      	str	r3, [r7, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1f1      	bne.n	800f4aa <mem_cpy+0x1a>
	}
}
 800f4c6:	bf00      	nop
 800f4c8:	371c      	adds	r7, #28
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f4d2:	b480      	push	{r7}
 800f4d4:	b087      	sub	sp, #28
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	60f8      	str	r0, [r7, #12]
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	1c5a      	adds	r2, r3, #1
 800f4e6:	617a      	str	r2, [r7, #20]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	b2d2      	uxtb	r2, r2
 800f4ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	607b      	str	r3, [r7, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1f3      	bne.n	800f4e2 <mem_set+0x10>
}
 800f4fa:	bf00      	nop
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f506:	b480      	push	{r7}
 800f508:	b089      	sub	sp, #36	; 0x24
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	60f8      	str	r0, [r7, #12]
 800f50e:	60b9      	str	r1, [r7, #8]
 800f510:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	61fb      	str	r3, [r7, #28]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	61fa      	str	r2, [r7, #28]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	4619      	mov	r1, r3
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	1c5a      	adds	r2, r3, #1
 800f52c:	61ba      	str	r2, [r7, #24]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	1acb      	subs	r3, r1, r3
 800f532:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3b01      	subs	r3, #1
 800f538:	607b      	str	r3, [r7, #4]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <mem_cmp+0x40>
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d0eb      	beq.n	800f51e <mem_cmp+0x18>

	return r;
 800f546:	697b      	ldr	r3, [r7, #20]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3724      	adds	r7, #36	; 0x24
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f55e:	e002      	b.n	800f566 <chk_chr+0x12>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	3301      	adds	r3, #1
 800f564:	607b      	str	r3, [r7, #4]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d005      	beq.n	800f57a <chk_chr+0x26>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	461a      	mov	r2, r3
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	4293      	cmp	r3, r2
 800f578:	d1f2      	bne.n	800f560 <chk_chr+0xc>
	return *str;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	781b      	ldrb	r3, [r3, #0]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	370c      	adds	r7, #12
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
	...

0800f58c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f596:	2300      	movs	r3, #0
 800f598:	60bb      	str	r3, [r7, #8]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	e029      	b.n	800f5f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f5a0:	4a27      	ldr	r2, [pc, #156]	; (800f640 <chk_lock+0xb4>)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	011b      	lsls	r3, r3, #4
 800f5a6:	4413      	add	r3, r2
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d01d      	beq.n	800f5ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f5ae:	4a24      	ldr	r2, [pc, #144]	; (800f640 <chk_lock+0xb4>)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	011b      	lsls	r3, r3, #4
 800f5b4:	4413      	add	r3, r2
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d116      	bne.n	800f5ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f5c0:	4a1f      	ldr	r2, [pc, #124]	; (800f640 <chk_lock+0xb4>)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	011b      	lsls	r3, r3, #4
 800f5c6:	4413      	add	r3, r2
 800f5c8:	3304      	adds	r3, #4
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d10c      	bne.n	800f5ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f5d4:	4a1a      	ldr	r2, [pc, #104]	; (800f640 <chk_lock+0xb4>)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	011b      	lsls	r3, r3, #4
 800f5da:	4413      	add	r3, r2
 800f5dc:	3308      	adds	r3, #8
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d102      	bne.n	800f5ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f5e8:	e007      	b.n	800f5fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d9d2      	bls.n	800f5a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d109      	bne.n	800f614 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d102      	bne.n	800f60c <chk_lock+0x80>
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d101      	bne.n	800f610 <chk_lock+0x84>
 800f60c:	2300      	movs	r3, #0
 800f60e:	e010      	b.n	800f632 <chk_lock+0xa6>
 800f610:	2312      	movs	r3, #18
 800f612:	e00e      	b.n	800f632 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d108      	bne.n	800f62c <chk_lock+0xa0>
 800f61a:	4a09      	ldr	r2, [pc, #36]	; (800f640 <chk_lock+0xb4>)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	011b      	lsls	r3, r3, #4
 800f620:	4413      	add	r3, r2
 800f622:	330c      	adds	r3, #12
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f62a:	d101      	bne.n	800f630 <chk_lock+0xa4>
 800f62c:	2310      	movs	r3, #16
 800f62e:	e000      	b.n	800f632 <chk_lock+0xa6>
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3714      	adds	r7, #20
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	200335f8 	.word	0x200335f8

0800f644 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f64a:	2300      	movs	r3, #0
 800f64c:	607b      	str	r3, [r7, #4]
 800f64e:	e002      	b.n	800f656 <enq_lock+0x12>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3301      	adds	r3, #1
 800f654:	607b      	str	r3, [r7, #4]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d806      	bhi.n	800f66a <enq_lock+0x26>
 800f65c:	4a09      	ldr	r2, [pc, #36]	; (800f684 <enq_lock+0x40>)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	011b      	lsls	r3, r3, #4
 800f662:	4413      	add	r3, r2
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1f2      	bne.n	800f650 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	bf14      	ite	ne
 800f670:	2301      	movne	r3, #1
 800f672:	2300      	moveq	r3, #0
 800f674:	b2db      	uxtb	r3, r3
}
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
 800f682:	bf00      	nop
 800f684:	200335f8 	.word	0x200335f8

0800f688 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f692:	2300      	movs	r3, #0
 800f694:	60fb      	str	r3, [r7, #12]
 800f696:	e01f      	b.n	800f6d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f698:	4a41      	ldr	r2, [pc, #260]	; (800f7a0 <inc_lock+0x118>)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	011b      	lsls	r3, r3, #4
 800f69e:	4413      	add	r3, r2
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d113      	bne.n	800f6d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f6aa:	4a3d      	ldr	r2, [pc, #244]	; (800f7a0 <inc_lock+0x118>)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	011b      	lsls	r3, r3, #4
 800f6b0:	4413      	add	r3, r2
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d109      	bne.n	800f6d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f6be:	4a38      	ldr	r2, [pc, #224]	; (800f7a0 <inc_lock+0x118>)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	4413      	add	r3, r2
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d006      	beq.n	800f6e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	60fb      	str	r3, [r7, #12]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d9dc      	bls.n	800f698 <inc_lock+0x10>
 800f6de:	e000      	b.n	800f6e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f6e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d132      	bne.n	800f74e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	e002      	b.n	800f6f4 <inc_lock+0x6c>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d806      	bhi.n	800f708 <inc_lock+0x80>
 800f6fa:	4a29      	ldr	r2, [pc, #164]	; (800f7a0 <inc_lock+0x118>)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	4413      	add	r3, r2
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1f2      	bne.n	800f6ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d101      	bne.n	800f712 <inc_lock+0x8a>
 800f70e:	2300      	movs	r3, #0
 800f710:	e040      	b.n	800f794 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	4922      	ldr	r1, [pc, #136]	; (800f7a0 <inc_lock+0x118>)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	011b      	lsls	r3, r3, #4
 800f71c:	440b      	add	r3, r1
 800f71e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	689a      	ldr	r2, [r3, #8]
 800f724:	491e      	ldr	r1, [pc, #120]	; (800f7a0 <inc_lock+0x118>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	440b      	add	r3, r1
 800f72c:	3304      	adds	r3, #4
 800f72e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	695a      	ldr	r2, [r3, #20]
 800f734:	491a      	ldr	r1, [pc, #104]	; (800f7a0 <inc_lock+0x118>)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	011b      	lsls	r3, r3, #4
 800f73a:	440b      	add	r3, r1
 800f73c:	3308      	adds	r3, #8
 800f73e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f740:	4a17      	ldr	r2, [pc, #92]	; (800f7a0 <inc_lock+0x118>)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	011b      	lsls	r3, r3, #4
 800f746:	4413      	add	r3, r2
 800f748:	330c      	adds	r3, #12
 800f74a:	2200      	movs	r2, #0
 800f74c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d009      	beq.n	800f768 <inc_lock+0xe0>
 800f754:	4a12      	ldr	r2, [pc, #72]	; (800f7a0 <inc_lock+0x118>)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	4413      	add	r3, r2
 800f75c:	330c      	adds	r3, #12
 800f75e:	881b      	ldrh	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <inc_lock+0xe0>
 800f764:	2300      	movs	r3, #0
 800f766:	e015      	b.n	800f794 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d108      	bne.n	800f780 <inc_lock+0xf8>
 800f76e:	4a0c      	ldr	r2, [pc, #48]	; (800f7a0 <inc_lock+0x118>)
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	4413      	add	r3, r2
 800f776:	330c      	adds	r3, #12
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	3301      	adds	r3, #1
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	e001      	b.n	800f784 <inc_lock+0xfc>
 800f780:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f784:	4906      	ldr	r1, [pc, #24]	; (800f7a0 <inc_lock+0x118>)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	011b      	lsls	r3, r3, #4
 800f78a:	440b      	add	r3, r1
 800f78c:	330c      	adds	r3, #12
 800f78e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3301      	adds	r3, #1
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	200335f8 	.word	0x200335f8

0800f7a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d825      	bhi.n	800f804 <dec_lock+0x60>
		n = Files[i].ctr;
 800f7b8:	4a17      	ldr	r2, [pc, #92]	; (800f818 <dec_lock+0x74>)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	011b      	lsls	r3, r3, #4
 800f7be:	4413      	add	r3, r2
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f7c6:	89fb      	ldrh	r3, [r7, #14]
 800f7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7cc:	d101      	bne.n	800f7d2 <dec_lock+0x2e>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f7d2:	89fb      	ldrh	r3, [r7, #14]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d002      	beq.n	800f7de <dec_lock+0x3a>
 800f7d8:	89fb      	ldrh	r3, [r7, #14]
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f7de:	4a0e      	ldr	r2, [pc, #56]	; (800f818 <dec_lock+0x74>)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	011b      	lsls	r3, r3, #4
 800f7e4:	4413      	add	r3, r2
 800f7e6:	330c      	adds	r3, #12
 800f7e8:	89fa      	ldrh	r2, [r7, #14]
 800f7ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f7ec:	89fb      	ldrh	r3, [r7, #14]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d105      	bne.n	800f7fe <dec_lock+0x5a>
 800f7f2:	4a09      	ldr	r2, [pc, #36]	; (800f818 <dec_lock+0x74>)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	011b      	lsls	r3, r3, #4
 800f7f8:	4413      	add	r3, r2
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	737b      	strb	r3, [r7, #13]
 800f802:	e001      	b.n	800f808 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f804:	2302      	movs	r3, #2
 800f806:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f808:	7b7b      	ldrb	r3, [r7, #13]
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	200335f8 	.word	0x200335f8

0800f81c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f824:	2300      	movs	r3, #0
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	e010      	b.n	800f84c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f82a:	4a0d      	ldr	r2, [pc, #52]	; (800f860 <clear_lock+0x44>)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	011b      	lsls	r3, r3, #4
 800f830:	4413      	add	r3, r2
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	429a      	cmp	r2, r3
 800f838:	d105      	bne.n	800f846 <clear_lock+0x2a>
 800f83a:	4a09      	ldr	r2, [pc, #36]	; (800f860 <clear_lock+0x44>)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	4413      	add	r3, r2
 800f842:	2200      	movs	r2, #0
 800f844:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3301      	adds	r3, #1
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d9eb      	bls.n	800f82a <clear_lock+0xe>
	}
}
 800f852:	bf00      	nop
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	200335f8 	.word	0x200335f8

0800f864 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	78db      	ldrb	r3, [r3, #3]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d034      	beq.n	800f8e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	7858      	ldrb	r0, [r3, #1]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f888:	2301      	movs	r3, #1
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	f7ff fd40 	bl	800f310 <disk_write>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f896:	2301      	movs	r3, #1
 800f898:	73fb      	strb	r3, [r7, #15]
 800f89a:	e022      	b.n	800f8e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	1ad2      	subs	r2, r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d217      	bcs.n	800f8e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	789b      	ldrb	r3, [r3, #2]
 800f8b6:	613b      	str	r3, [r7, #16]
 800f8b8:	e010      	b.n	800f8dc <sync_window+0x78>
					wsect += fs->fsize;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	7858      	ldrb	r0, [r3, #1]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	f7ff fd1d 	bl	800f310 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d8eb      	bhi.n	800f8ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	429a      	cmp	r2, r3
 800f902:	d01b      	beq.n	800f93c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7ff ffad 	bl	800f864 <sync_window>
 800f90a:	4603      	mov	r3, r0
 800f90c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d113      	bne.n	800f93c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7858      	ldrb	r0, [r3, #1]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f91e:	2301      	movs	r3, #1
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	f7ff fcd5 	bl	800f2d0 <disk_read>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295
 800f930:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f932:	2301      	movs	r3, #1
 800f934:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff87 	bl	800f864 <sync_window>
 800f956:	4603      	mov	r3, r0
 800f958:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d159      	bne.n	800fa14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b03      	cmp	r3, #3
 800f966:	d149      	bne.n	800f9fc <sync_fs+0xb4>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	791b      	ldrb	r3, [r3, #4]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d145      	bne.n	800f9fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	899b      	ldrh	r3, [r3, #12]
 800f97a:	461a      	mov	r2, r3
 800f97c:	2100      	movs	r1, #0
 800f97e:	f7ff fda8 	bl	800f4d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	3338      	adds	r3, #56	; 0x38
 800f986:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f98a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f98e:	4618      	mov	r0, r3
 800f990:	f7ff fd37 	bl	800f402 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	3338      	adds	r3, #56	; 0x38
 800f998:	4921      	ldr	r1, [pc, #132]	; (800fa20 <sync_fs+0xd8>)
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff fd4c 	bl	800f438 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	3338      	adds	r3, #56	; 0x38
 800f9a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f9a8:	491e      	ldr	r1, [pc, #120]	; (800fa24 <sync_fs+0xdc>)
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff fd44 	bl	800f438 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3338      	adds	r3, #56	; 0x38
 800f9b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	4619      	mov	r1, r3
 800f9be:	4610      	mov	r0, r2
 800f9c0:	f7ff fd3a 	bl	800f438 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3338      	adds	r3, #56	; 0x38
 800f9c8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	691b      	ldr	r3, [r3, #16]
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	f7ff fd30 	bl	800f438 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9dc:	1c5a      	adds	r2, r3, #1
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	7858      	ldrb	r0, [r3, #1]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	f7ff fc8d 	bl	800f310 <disk_write>
			fs->fsi_flag = 0;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	785b      	ldrb	r3, [r3, #1]
 800fa00:	2200      	movs	r2, #0
 800fa02:	2100      	movs	r1, #0
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7ff fca3 	bl	800f350 <disk_ioctl>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <sync_fs+0xcc>
 800fa10:	2301      	movs	r3, #1
 800fa12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	41615252 	.word	0x41615252
 800fa24:	61417272 	.word	0x61417272

0800fa28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	3b02      	subs	r3, #2
 800fa36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	69db      	ldr	r3, [r3, #28]
 800fa3c:	3b02      	subs	r3, #2
 800fa3e:	683a      	ldr	r2, [r7, #0]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d301      	bcc.n	800fa48 <clust2sect+0x20>
 800fa44:	2300      	movs	r3, #0
 800fa46:	e008      	b.n	800fa5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	895b      	ldrh	r3, [r3, #10]
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	fb03 f202 	mul.w	r2, r3, r2
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa58:	4413      	add	r3, r2
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b086      	sub	sp, #24
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
 800fa6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d904      	bls.n	800fa86 <get_fat+0x20>
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	69db      	ldr	r3, [r3, #28]
 800fa80:	683a      	ldr	r2, [r7, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d302      	bcc.n	800fa8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800fa86:	2301      	movs	r3, #1
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	e0b7      	b.n	800fbfc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2b02      	cmp	r3, #2
 800fa98:	d05a      	beq.n	800fb50 <get_fat+0xea>
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	d07d      	beq.n	800fb9a <get_fat+0x134>
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	f040 80a2 	bne.w	800fbe8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	60fb      	str	r3, [r7, #12]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	085b      	lsrs	r3, r3, #1
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	899b      	ldrh	r3, [r3, #12]
 800faba:	4619      	mov	r1, r3
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	fbb3 f3f1 	udiv	r3, r3, r1
 800fac2:	4413      	add	r3, r2
 800fac4:	4619      	mov	r1, r3
 800fac6:	6938      	ldr	r0, [r7, #16]
 800fac8:	f7ff ff10 	bl	800f8ec <move_window>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	f040 808d 	bne.w	800fbee <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	1c5a      	adds	r2, r3, #1
 800fad8:	60fa      	str	r2, [r7, #12]
 800fada:	693a      	ldr	r2, [r7, #16]
 800fadc:	8992      	ldrh	r2, [r2, #12]
 800fade:	fbb3 f1f2 	udiv	r1, r3, r2
 800fae2:	fb02 f201 	mul.w	r2, r2, r1
 800fae6:	1a9b      	subs	r3, r3, r2
 800fae8:	693a      	ldr	r2, [r7, #16]
 800faea:	4413      	add	r3, r2
 800faec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800faf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	899b      	ldrh	r3, [r3, #12]
 800fafa:	4619      	mov	r1, r3
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb02:	4413      	add	r3, r2
 800fb04:	4619      	mov	r1, r3
 800fb06:	6938      	ldr	r0, [r7, #16]
 800fb08:	f7ff fef0 	bl	800f8ec <move_window>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d16f      	bne.n	800fbf2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	899b      	ldrh	r3, [r3, #12]
 800fb16:	461a      	mov	r2, r3
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb1e:	fb02 f201 	mul.w	r2, r2, r1
 800fb22:	1a9b      	subs	r3, r3, r2
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	4413      	add	r3, r2
 800fb28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fb2c:	021b      	lsls	r3, r3, #8
 800fb2e:	461a      	mov	r2, r3
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	f003 0301 	and.w	r3, r3, #1
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d002      	beq.n	800fb46 <get_fat+0xe0>
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	091b      	lsrs	r3, r3, #4
 800fb44:	e002      	b.n	800fb4c <get_fat+0xe6>
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb4c:	617b      	str	r3, [r7, #20]
			break;
 800fb4e:	e055      	b.n	800fbfc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	899b      	ldrh	r3, [r3, #12]
 800fb58:	085b      	lsrs	r3, r3, #1
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb64:	4413      	add	r3, r2
 800fb66:	4619      	mov	r1, r3
 800fb68:	6938      	ldr	r0, [r7, #16]
 800fb6a:	f7ff febf 	bl	800f8ec <move_window>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d140      	bne.n	800fbf6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	693a      	ldr	r2, [r7, #16]
 800fb80:	8992      	ldrh	r2, [r2, #12]
 800fb82:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb86:	fb02 f200 	mul.w	r2, r2, r0
 800fb8a:	1a9b      	subs	r3, r3, r2
 800fb8c:	440b      	add	r3, r1
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fbfc 	bl	800f38c <ld_word>
 800fb94:	4603      	mov	r3, r0
 800fb96:	617b      	str	r3, [r7, #20]
			break;
 800fb98:	e030      	b.n	800fbfc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	899b      	ldrh	r3, [r3, #12]
 800fba2:	089b      	lsrs	r3, r3, #2
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	4619      	mov	r1, r3
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbae:	4413      	add	r3, r2
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	6938      	ldr	r0, [r7, #16]
 800fbb4:	f7ff fe9a 	bl	800f8ec <move_window>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d11d      	bne.n	800fbfa <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	8992      	ldrh	r2, [r2, #12]
 800fbcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbd0:	fb02 f200 	mul.w	r2, r2, r0
 800fbd4:	1a9b      	subs	r3, r3, r2
 800fbd6:	440b      	add	r3, r1
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff fbef 	bl	800f3bc <ld_dword>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fbe4:	617b      	str	r3, [r7, #20]
			break;
 800fbe6:	e009      	b.n	800fbfc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fbe8:	2301      	movs	r3, #1
 800fbea:	617b      	str	r3, [r7, #20]
 800fbec:	e006      	b.n	800fbfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbee:	bf00      	nop
 800fbf0:	e004      	b.n	800fbfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbf2:	bf00      	nop
 800fbf4:	e002      	b.n	800fbfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fbf6:	bf00      	nop
 800fbf8:	e000      	b.n	800fbfc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fbfa:	bf00      	nop
		}
	}

	return val;
 800fbfc:	697b      	ldr	r3, [r7, #20]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3718      	adds	r7, #24
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fc06:	b590      	push	{r4, r7, lr}
 800fc08:	b089      	sub	sp, #36	; 0x24
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	60b9      	str	r1, [r7, #8]
 800fc10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fc12:	2302      	movs	r3, #2
 800fc14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	f240 8106 	bls.w	800fe2a <put_fat+0x224>
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	69db      	ldr	r3, [r3, #28]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	f080 8100 	bcs.w	800fe2a <put_fat+0x224>
		switch (fs->fs_type) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	f000 8088 	beq.w	800fd44 <put_fat+0x13e>
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	f000 80b0 	beq.w	800fd9a <put_fat+0x194>
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	f040 80f5 	bne.w	800fe2a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	61bb      	str	r3, [r7, #24]
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	085b      	lsrs	r3, r3, #1
 800fc48:	69ba      	ldr	r2, [r7, #24]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	899b      	ldrh	r3, [r3, #12]
 800fc56:	4619      	mov	r1, r3
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc5e:	4413      	add	r3, r2
 800fc60:	4619      	mov	r1, r3
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7ff fe42 	bl	800f8ec <move_window>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc6c:	7ffb      	ldrb	r3, [r7, #31]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f040 80d4 	bne.w	800fe1c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	1c5a      	adds	r2, r3, #1
 800fc7e:	61ba      	str	r2, [r7, #24]
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	8992      	ldrh	r2, [r2, #12]
 800fc84:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc88:	fb02 f200 	mul.w	r2, r2, r0
 800fc8c:	1a9b      	subs	r3, r3, r2
 800fc8e:	440b      	add	r3, r1
 800fc90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	f003 0301 	and.w	r3, r3, #1
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00d      	beq.n	800fcb8 <put_fat+0xb2>
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	b25b      	sxtb	r3, r3
 800fca2:	f003 030f 	and.w	r3, r3, #15
 800fca6:	b25a      	sxtb	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	011b      	lsls	r3, r3, #4
 800fcae:	b25b      	sxtb	r3, r3
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	b25b      	sxtb	r3, r3
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	e001      	b.n	800fcbc <put_fat+0xb6>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	899b      	ldrh	r3, [r3, #12]
 800fcce:	4619      	mov	r1, r3
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	4619      	mov	r1, r3
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f7ff fe06 	bl	800f8ec <move_window>
 800fce0:	4603      	mov	r3, r0
 800fce2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fce4:	7ffb      	ldrb	r3, [r7, #31]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f040 809a 	bne.w	800fe20 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	899b      	ldrh	r3, [r3, #12]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcfe:	fb02 f200 	mul.w	r2, r2, r0
 800fd02:	1a9b      	subs	r3, r3, r2
 800fd04:	440b      	add	r3, r1
 800fd06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	f003 0301 	and.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <put_fat+0x114>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	091b      	lsrs	r3, r3, #4
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	e00e      	b.n	800fd38 <put_fat+0x132>
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	f023 030f 	bic.w	r3, r3, #15
 800fd24:	b25a      	sxtb	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	0a1b      	lsrs	r3, r3, #8
 800fd2a:	b25b      	sxtb	r3, r3
 800fd2c:	f003 030f 	and.w	r3, r3, #15
 800fd30:	b25b      	sxtb	r3, r3
 800fd32:	4313      	orrs	r3, r2
 800fd34:	b25b      	sxtb	r3, r3
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	70da      	strb	r2, [r3, #3]
			break;
 800fd42:	e072      	b.n	800fe2a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	899b      	ldrh	r3, [r3, #12]
 800fd4c:	085b      	lsrs	r3, r3, #1
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	4619      	mov	r1, r3
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd58:	4413      	add	r3, r2
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f7ff fdc5 	bl	800f8ec <move_window>
 800fd62:	4603      	mov	r3, r0
 800fd64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd66:	7ffb      	ldrb	r3, [r7, #31]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d15b      	bne.n	800fe24 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	005b      	lsls	r3, r3, #1
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	8992      	ldrh	r2, [r2, #12]
 800fd7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd7e:	fb02 f200 	mul.w	r2, r2, r0
 800fd82:	1a9b      	subs	r3, r3, r2
 800fd84:	440b      	add	r3, r1
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	b292      	uxth	r2, r2
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fb38 	bl	800f402 <st_word>
			fs->wflag = 1;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2201      	movs	r2, #1
 800fd96:	70da      	strb	r2, [r3, #3]
			break;
 800fd98:	e047      	b.n	800fe2a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	899b      	ldrh	r3, [r3, #12]
 800fda2:	089b      	lsrs	r3, r3, #2
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	4619      	mov	r1, r3
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800fdae:	4413      	add	r3, r2
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f7ff fd9a 	bl	800f8ec <move_window>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdbc:	7ffb      	ldrb	r3, [r7, #31]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d132      	bne.n	800fe28 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	8992      	ldrh	r2, [r2, #12]
 800fdd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdda:	fb02 f200 	mul.w	r2, r2, r0
 800fdde:	1a9b      	subs	r3, r3, r2
 800fde0:	440b      	add	r3, r1
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff faea 	bl	800f3bc <ld_dword>
 800fde8:	4603      	mov	r3, r0
 800fdea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fdee:	4323      	orrs	r3, r4
 800fdf0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	8992      	ldrh	r2, [r2, #12]
 800fe00:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe04:	fb02 f200 	mul.w	r2, r2, r0
 800fe08:	1a9b      	subs	r3, r3, r2
 800fe0a:	440b      	add	r3, r1
 800fe0c:	6879      	ldr	r1, [r7, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff fb12 	bl	800f438 <st_dword>
			fs->wflag = 1;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2201      	movs	r2, #1
 800fe18:	70da      	strb	r2, [r3, #3]
			break;
 800fe1a:	e006      	b.n	800fe2a <put_fat+0x224>
			if (res != FR_OK) break;
 800fe1c:	bf00      	nop
 800fe1e:	e004      	b.n	800fe2a <put_fat+0x224>
			if (res != FR_OK) break;
 800fe20:	bf00      	nop
 800fe22:	e002      	b.n	800fe2a <put_fat+0x224>
			if (res != FR_OK) break;
 800fe24:	bf00      	nop
 800fe26:	e000      	b.n	800fe2a <put_fat+0x224>
			if (res != FR_OK) break;
 800fe28:	bf00      	nop
		}
	}
	return res;
 800fe2a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3724      	adds	r7, #36	; 0x24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd90      	pop	{r4, r7, pc}

0800fe34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b088      	sub	sp, #32
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d904      	bls.n	800fe5a <remove_chain+0x26>
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d301      	bcc.n	800fe5e <remove_chain+0x2a>
 800fe5a:	2302      	movs	r3, #2
 800fe5c:	e04b      	b.n	800fef6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00c      	beq.n	800fe7e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	69b8      	ldr	r0, [r7, #24]
 800fe6c:	f7ff fecb 	bl	800fc06 <put_fat>
 800fe70:	4603      	mov	r3, r0
 800fe72:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fe74:	7ffb      	ldrb	r3, [r7, #31]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d001      	beq.n	800fe7e <remove_chain+0x4a>
 800fe7a:	7ffb      	ldrb	r3, [r7, #31]
 800fe7c:	e03b      	b.n	800fef6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fe7e:	68b9      	ldr	r1, [r7, #8]
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	f7ff fdf0 	bl	800fa66 <get_fat>
 800fe86:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d031      	beq.n	800fef2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d101      	bne.n	800fe98 <remove_chain+0x64>
 800fe94:	2302      	movs	r3, #2
 800fe96:	e02e      	b.n	800fef6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe9e:	d101      	bne.n	800fea4 <remove_chain+0x70>
 800fea0:	2301      	movs	r3, #1
 800fea2:	e028      	b.n	800fef6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fea4:	2200      	movs	r2, #0
 800fea6:	68b9      	ldr	r1, [r7, #8]
 800fea8:	69b8      	ldr	r0, [r7, #24]
 800feaa:	f7ff feac 	bl	800fc06 <put_fat>
 800feae:	4603      	mov	r3, r0
 800feb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800feb2:	7ffb      	ldrb	r3, [r7, #31]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <remove_chain+0x88>
 800feb8:	7ffb      	ldrb	r3, [r7, #31]
 800feba:	e01c      	b.n	800fef6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	695a      	ldr	r2, [r3, #20]
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	69db      	ldr	r3, [r3, #28]
 800fec4:	3b02      	subs	r3, #2
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d20b      	bcs.n	800fee2 <remove_chain+0xae>
			fs->free_clst++;
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	1c5a      	adds	r2, r3, #1
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	791b      	ldrb	r3, [r3, #4]
 800fed8:	f043 0301 	orr.w	r3, r3, #1
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	69db      	ldr	r3, [r3, #28]
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	429a      	cmp	r2, r3
 800feee:	d3c6      	bcc.n	800fe7e <remove_chain+0x4a>
 800fef0:	e000      	b.n	800fef4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fef2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3720      	adds	r7, #32
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}

0800fefe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fefe:	b580      	push	{r7, lr}
 800ff00:	b088      	sub	sp, #32
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
 800ff06:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d10d      	bne.n	800ff30 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	691b      	ldr	r3, [r3, #16]
 800ff18:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d004      	beq.n	800ff2a <create_chain+0x2c>
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	69db      	ldr	r3, [r3, #28]
 800ff24:	69ba      	ldr	r2, [r7, #24]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d31b      	bcc.n	800ff62 <create_chain+0x64>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	61bb      	str	r3, [r7, #24]
 800ff2e:	e018      	b.n	800ff62 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ff30:	6839      	ldr	r1, [r7, #0]
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7ff fd97 	bl	800fa66 <get_fat>
 800ff38:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d801      	bhi.n	800ff44 <create_chain+0x46>
 800ff40:	2301      	movs	r3, #1
 800ff42:	e070      	b.n	8010026 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4a:	d101      	bne.n	800ff50 <create_chain+0x52>
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	e06a      	b.n	8010026 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	69db      	ldr	r3, [r3, #28]
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d201      	bcs.n	800ff5e <create_chain+0x60>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	e063      	b.n	8010026 <create_chain+0x128>
		scl = clst;
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	69db      	ldr	r3, [r3, #28]
 800ff70:	69fa      	ldr	r2, [r7, #28]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d307      	bcc.n	800ff86 <create_chain+0x88>
				ncl = 2;
 800ff76:	2302      	movs	r3, #2
 800ff78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ff7a:	69fa      	ldr	r2, [r7, #28]
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d901      	bls.n	800ff86 <create_chain+0x88>
 800ff82:	2300      	movs	r3, #0
 800ff84:	e04f      	b.n	8010026 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ff86:	69f9      	ldr	r1, [r7, #28]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff fd6c 	bl	800fa66 <get_fat>
 800ff8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00e      	beq.n	800ffb4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d003      	beq.n	800ffa4 <create_chain+0xa6>
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa2:	d101      	bne.n	800ffa8 <create_chain+0xaa>
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	e03e      	b.n	8010026 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ffa8:	69fa      	ldr	r2, [r7, #28]
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d1da      	bne.n	800ff66 <create_chain+0x68>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	e038      	b.n	8010026 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ffb4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ffb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ffba:	69f9      	ldr	r1, [r7, #28]
 800ffbc:	6938      	ldr	r0, [r7, #16]
 800ffbe:	f7ff fe22 	bl	800fc06 <put_fat>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d109      	bne.n	800ffe0 <create_chain+0xe2>
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d006      	beq.n	800ffe0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ffd2:	69fa      	ldr	r2, [r7, #28]
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	6938      	ldr	r0, [r7, #16]
 800ffd8:	f7ff fe15 	bl	800fc06 <put_fat>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d116      	bne.n	8010014 <create_chain+0x116>
		fs->last_clst = ncl;
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	69fa      	ldr	r2, [r7, #28]
 800ffea:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	695a      	ldr	r2, [r3, #20]
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	69db      	ldr	r3, [r3, #28]
 800fff4:	3b02      	subs	r3, #2
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d804      	bhi.n	8010004 <create_chain+0x106>
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	695b      	ldr	r3, [r3, #20]
 800fffe:	1e5a      	subs	r2, r3, #1
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	791b      	ldrb	r3, [r3, #4]
 8010008:	f043 0301 	orr.w	r3, r3, #1
 801000c:	b2da      	uxtb	r2, r3
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	711a      	strb	r2, [r3, #4]
 8010012:	e007      	b.n	8010024 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	2b01      	cmp	r3, #1
 8010018:	d102      	bne.n	8010020 <create_chain+0x122>
 801001a:	f04f 33ff 	mov.w	r3, #4294967295
 801001e:	e000      	b.n	8010022 <create_chain+0x124>
 8010020:	2301      	movs	r3, #1
 8010022:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010024:	69fb      	ldr	r3, [r7, #28]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3720      	adds	r7, #32
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801002e:	b480      	push	{r7}
 8010030:	b087      	sub	sp, #28
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
 8010036:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010042:	3304      	adds	r3, #4
 8010044:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	899b      	ldrh	r3, [r3, #12]
 801004a:	461a      	mov	r2, r3
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	8952      	ldrh	r2, [r2, #10]
 8010056:	fbb3 f3f2 	udiv	r3, r3, r2
 801005a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	1d1a      	adds	r2, r3, #4
 8010060:	613a      	str	r2, [r7, #16]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d101      	bne.n	8010070 <clmt_clust+0x42>
 801006c:	2300      	movs	r3, #0
 801006e:	e010      	b.n	8010092 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	429a      	cmp	r2, r3
 8010076:	d307      	bcc.n	8010088 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010078:	697a      	ldr	r2, [r7, #20]
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	617b      	str	r3, [r7, #20]
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	3304      	adds	r3, #4
 8010084:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010086:	e7e9      	b.n	801005c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010088:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	4413      	add	r3, r2
}
 8010092:	4618      	mov	r0, r3
 8010094:	371c      	adds	r7, #28
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr

0801009e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b086      	sub	sp, #24
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100b4:	d204      	bcs.n	80100c0 <dir_sdi+0x22>
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	f003 031f 	and.w	r3, r3, #31
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d001      	beq.n	80100c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80100c0:	2302      	movs	r3, #2
 80100c2:	e071      	b.n	80101a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	683a      	ldr	r2, [r7, #0]
 80100c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	689b      	ldr	r3, [r3, #8]
 80100ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <dir_sdi+0x46>
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d902      	bls.n	80100e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d10c      	bne.n	8010104 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	095b      	lsrs	r3, r3, #5
 80100ee:	693a      	ldr	r2, [r7, #16]
 80100f0:	8912      	ldrh	r2, [r2, #8]
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d301      	bcc.n	80100fa <dir_sdi+0x5c>
 80100f6:	2302      	movs	r3, #2
 80100f8:	e056      	b.n	80101a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	61da      	str	r2, [r3, #28]
 8010102:	e02d      	b.n	8010160 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	895b      	ldrh	r3, [r3, #10]
 8010108:	461a      	mov	r2, r3
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	fb03 f302 	mul.w	r3, r3, r2
 8010112:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010114:	e019      	b.n	801014a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6979      	ldr	r1, [r7, #20]
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff fca3 	bl	800fa66 <get_fat>
 8010120:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010128:	d101      	bne.n	801012e <dir_sdi+0x90>
 801012a:	2301      	movs	r3, #1
 801012c:	e03c      	b.n	80101a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d904      	bls.n	801013e <dir_sdi+0xa0>
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	69db      	ldr	r3, [r3, #28]
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	429a      	cmp	r2, r3
 801013c:	d301      	bcc.n	8010142 <dir_sdi+0xa4>
 801013e:	2302      	movs	r3, #2
 8010140:	e032      	b.n	80101a8 <dir_sdi+0x10a>
			ofs -= csz;
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801014a:	683a      	ldr	r2, [r7, #0]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	429a      	cmp	r2, r3
 8010150:	d2e1      	bcs.n	8010116 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010152:	6979      	ldr	r1, [r7, #20]
 8010154:	6938      	ldr	r0, [r7, #16]
 8010156:	f7ff fc67 	bl	800fa28 <clust2sect>
 801015a:	4602      	mov	r2, r0
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	697a      	ldr	r2, [r7, #20]
 8010164:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <dir_sdi+0xd4>
 801016e:	2302      	movs	r3, #2
 8010170:	e01a      	b.n	80101a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	69da      	ldr	r2, [r3, #28]
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	899b      	ldrh	r3, [r3, #12]
 801017a:	4619      	mov	r1, r3
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010182:	441a      	add	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	899b      	ldrh	r3, [r3, #12]
 8010192:	461a      	mov	r2, r3
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	fbb3 f0f2 	udiv	r0, r3, r2
 801019a:	fb02 f200 	mul.w	r2, r2, r0
 801019e:	1a9b      	subs	r3, r3, r2
 80101a0:	18ca      	adds	r2, r1, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80101a6:	2300      	movs	r3, #0
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3718      	adds	r7, #24
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	3320      	adds	r3, #32
 80101c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	69db      	ldr	r3, [r3, #28]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d003      	beq.n	80101d8 <dir_next+0x28>
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101d6:	d301      	bcc.n	80101dc <dir_next+0x2c>
 80101d8:	2304      	movs	r3, #4
 80101da:	e0bb      	b.n	8010354 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	899b      	ldrh	r3, [r3, #12]
 80101e0:	461a      	mov	r2, r3
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80101e8:	fb02 f201 	mul.w	r2, r2, r1
 80101ec:	1a9b      	subs	r3, r3, r2
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f040 809d 	bne.w	801032e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	69db      	ldr	r3, [r3, #28]
 80101f8:	1c5a      	adds	r2, r3, #1
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	699b      	ldr	r3, [r3, #24]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d10b      	bne.n	801021e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	095b      	lsrs	r3, r3, #5
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	8912      	ldrh	r2, [r2, #8]
 801020e:	4293      	cmp	r3, r2
 8010210:	f0c0 808d 	bcc.w	801032e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2200      	movs	r2, #0
 8010218:	61da      	str	r2, [r3, #28]
 801021a:	2304      	movs	r3, #4
 801021c:	e09a      	b.n	8010354 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	899b      	ldrh	r3, [r3, #12]
 8010222:	461a      	mov	r2, r3
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	fbb3 f3f2 	udiv	r3, r3, r2
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	8952      	ldrh	r2, [r2, #10]
 801022e:	3a01      	subs	r2, #1
 8010230:	4013      	ands	r3, r2
 8010232:	2b00      	cmp	r3, #0
 8010234:	d17b      	bne.n	801032e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	4619      	mov	r1, r3
 801023e:	4610      	mov	r0, r2
 8010240:	f7ff fc11 	bl	800fa66 <get_fat>
 8010244:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d801      	bhi.n	8010250 <dir_next+0xa0>
 801024c:	2302      	movs	r3, #2
 801024e:	e081      	b.n	8010354 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010256:	d101      	bne.n	801025c <dir_next+0xac>
 8010258:	2301      	movs	r3, #1
 801025a:	e07b      	b.n	8010354 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	69db      	ldr	r3, [r3, #28]
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	429a      	cmp	r2, r3
 8010264:	d359      	bcc.n	801031a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d104      	bne.n	8010276 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	61da      	str	r2, [r3, #28]
 8010272:	2304      	movs	r3, #4
 8010274:	e06e      	b.n	8010354 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	699b      	ldr	r3, [r3, #24]
 801027c:	4619      	mov	r1, r3
 801027e:	4610      	mov	r0, r2
 8010280:	f7ff fe3d 	bl	800fefe <create_chain>
 8010284:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d101      	bne.n	8010290 <dir_next+0xe0>
 801028c:	2307      	movs	r3, #7
 801028e:	e061      	b.n	8010354 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d101      	bne.n	801029a <dir_next+0xea>
 8010296:	2302      	movs	r3, #2
 8010298:	e05c      	b.n	8010354 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a0:	d101      	bne.n	80102a6 <dir_next+0xf6>
 80102a2:	2301      	movs	r3, #1
 80102a4:	e056      	b.n	8010354 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff fadc 	bl	800f864 <sync_window>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <dir_next+0x106>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e04e      	b.n	8010354 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	899b      	ldrh	r3, [r3, #12]
 80102c0:	461a      	mov	r2, r3
 80102c2:	2100      	movs	r1, #0
 80102c4:	f7ff f905 	bl	800f4d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102c8:	2300      	movs	r3, #0
 80102ca:	613b      	str	r3, [r7, #16]
 80102cc:	6979      	ldr	r1, [r7, #20]
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f7ff fbaa 	bl	800fa28 <clust2sect>
 80102d4:	4602      	mov	r2, r0
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	635a      	str	r2, [r3, #52]	; 0x34
 80102da:	e012      	b.n	8010302 <dir_next+0x152>
						fs->wflag = 1;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2201      	movs	r2, #1
 80102e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f7ff fabe 	bl	800f864 <sync_window>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d001      	beq.n	80102f2 <dir_next+0x142>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e030      	b.n	8010354 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	3301      	adds	r3, #1
 80102f6:	613b      	str	r3, [r7, #16]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fc:	1c5a      	adds	r2, r3, #1
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	635a      	str	r2, [r3, #52]	; 0x34
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	895b      	ldrh	r3, [r3, #10]
 8010306:	461a      	mov	r2, r3
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	4293      	cmp	r3, r2
 801030c:	d3e6      	bcc.n	80102dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	1ad2      	subs	r2, r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	697a      	ldr	r2, [r7, #20]
 801031e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010320:	6979      	ldr	r1, [r7, #20]
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7ff fb80 	bl	800fa28 <clust2sect>
 8010328:	4602      	mov	r2, r0
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	68ba      	ldr	r2, [r7, #8]
 8010332:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	899b      	ldrh	r3, [r3, #12]
 801033e:	461a      	mov	r2, r3
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	fbb3 f0f2 	udiv	r0, r3, r2
 8010346:	fb02 f200 	mul.w	r2, r2, r0
 801034a:	1a9b      	subs	r3, r3, r2
 801034c:	18ca      	adds	r2, r1, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3718      	adds	r7, #24
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801036c:	2100      	movs	r1, #0
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff fe95 	bl	801009e <dir_sdi>
 8010374:	4603      	mov	r3, r0
 8010376:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010378:	7dfb      	ldrb	r3, [r7, #23]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d12b      	bne.n	80103d6 <dir_alloc+0x7a>
		n = 0;
 801037e:	2300      	movs	r3, #0
 8010380:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	69db      	ldr	r3, [r3, #28]
 8010386:	4619      	mov	r1, r3
 8010388:	68f8      	ldr	r0, [r7, #12]
 801038a:	f7ff faaf 	bl	800f8ec <move_window>
 801038e:	4603      	mov	r3, r0
 8010390:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010392:	7dfb      	ldrb	r3, [r7, #23]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d11d      	bne.n	80103d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a1b      	ldr	r3, [r3, #32]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	2be5      	cmp	r3, #229	; 0xe5
 80103a0:	d004      	beq.n	80103ac <dir_alloc+0x50>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6a1b      	ldr	r3, [r3, #32]
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d107      	bne.n	80103bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	3301      	adds	r3, #1
 80103b0:	613b      	str	r3, [r7, #16]
 80103b2:	693a      	ldr	r2, [r7, #16]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d102      	bne.n	80103c0 <dir_alloc+0x64>
 80103ba:	e00c      	b.n	80103d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80103bc:	2300      	movs	r3, #0
 80103be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80103c0:	2101      	movs	r1, #1
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f7ff fef4 	bl	80101b0 <dir_next>
 80103c8:	4603      	mov	r3, r0
 80103ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80103cc:	7dfb      	ldrb	r3, [r7, #23]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d0d7      	beq.n	8010382 <dir_alloc+0x26>
 80103d2:	e000      	b.n	80103d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80103d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80103d6:	7dfb      	ldrb	r3, [r7, #23]
 80103d8:	2b04      	cmp	r3, #4
 80103da:	d101      	bne.n	80103e0 <dir_alloc+0x84>
 80103dc:	2307      	movs	r3, #7
 80103de:	75fb      	strb	r3, [r7, #23]
	return res;
 80103e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3718      	adds	r7, #24
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b084      	sub	sp, #16
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
 80103f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	331a      	adds	r3, #26
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fe ffc7 	bl	800f38c <ld_word>
 80103fe:	4603      	mov	r3, r0
 8010400:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	2b03      	cmp	r3, #3
 8010408:	d109      	bne.n	801041e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	3314      	adds	r3, #20
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe ffbc 	bl	800f38c <ld_word>
 8010414:	4603      	mov	r3, r0
 8010416:	041b      	lsls	r3, r3, #16
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	4313      	orrs	r3, r2
 801041c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801041e:	68fb      	ldr	r3, [r7, #12]
}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	331a      	adds	r3, #26
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	b292      	uxth	r2, r2
 801043c:	4611      	mov	r1, r2
 801043e:	4618      	mov	r0, r3
 8010440:	f7fe ffdf 	bl	800f402 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	2b03      	cmp	r3, #3
 801044a:	d109      	bne.n	8010460 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	f103 0214 	add.w	r2, r3, #20
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	0c1b      	lsrs	r3, r3, #16
 8010456:	b29b      	uxth	r3, r3
 8010458:	4619      	mov	r1, r3
 801045a:	4610      	mov	r0, r2
 801045c:	f7fe ffd1 	bl	800f402 <st_word>
	}
}
 8010460:	bf00      	nop
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010472:	2304      	movs	r3, #4
 8010474:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801047c:	e03c      	b.n	80104f8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	69db      	ldr	r3, [r3, #28]
 8010482:	4619      	mov	r1, r3
 8010484:	6938      	ldr	r0, [r7, #16]
 8010486:	f7ff fa31 	bl	800f8ec <move_window>
 801048a:	4603      	mov	r3, r0
 801048c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801048e:	7dfb      	ldrb	r3, [r7, #23]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d136      	bne.n	8010502 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a1b      	ldr	r3, [r3, #32]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801049c:	7bfb      	ldrb	r3, [r7, #15]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d102      	bne.n	80104a8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80104a2:	2304      	movs	r3, #4
 80104a4:	75fb      	strb	r3, [r7, #23]
 80104a6:	e031      	b.n	801050c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a1b      	ldr	r3, [r3, #32]
 80104ac:	330b      	adds	r3, #11
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104b4:	73bb      	strb	r3, [r7, #14]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7bba      	ldrb	r2, [r7, #14]
 80104ba:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	2be5      	cmp	r3, #229	; 0xe5
 80104c0:	d011      	beq.n	80104e6 <dir_read+0x7e>
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	2b2e      	cmp	r3, #46	; 0x2e
 80104c6:	d00e      	beq.n	80104e6 <dir_read+0x7e>
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
 80104ca:	2b0f      	cmp	r3, #15
 80104cc:	d00b      	beq.n	80104e6 <dir_read+0x7e>
 80104ce:	7bbb      	ldrb	r3, [r7, #14]
 80104d0:	f023 0320 	bic.w	r3, r3, #32
 80104d4:	2b08      	cmp	r3, #8
 80104d6:	bf0c      	ite	eq
 80104d8:	2301      	moveq	r3, #1
 80104da:	2300      	movne	r3, #0
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	461a      	mov	r2, r3
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d00f      	beq.n	8010506 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80104e6:	2100      	movs	r1, #0
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff fe61 	bl	80101b0 <dir_next>
 80104ee:	4603      	mov	r3, r0
 80104f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104f2:	7dfb      	ldrb	r3, [r7, #23]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d108      	bne.n	801050a <dir_read+0xa2>
	while (dp->sect) {
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	69db      	ldr	r3, [r3, #28]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1be      	bne.n	801047e <dir_read+0x16>
 8010500:	e004      	b.n	801050c <dir_read+0xa4>
		if (res != FR_OK) break;
 8010502:	bf00      	nop
 8010504:	e002      	b.n	801050c <dir_read+0xa4>
				break;
 8010506:	bf00      	nop
 8010508:	e000      	b.n	801050c <dir_read+0xa4>
		if (res != FR_OK) break;
 801050a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801050c:	7dfb      	ldrb	r3, [r7, #23]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d002      	beq.n	8010518 <dir_read+0xb0>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	61da      	str	r2, [r3, #28]
	return res;
 8010518:	7dfb      	ldrb	r3, [r7, #23]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3718      	adds	r7, #24
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b086      	sub	sp, #24
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010530:	2100      	movs	r1, #0
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7ff fdb3 	bl	801009e <dir_sdi>
 8010538:	4603      	mov	r3, r0
 801053a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801053c:	7dfb      	ldrb	r3, [r7, #23]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <dir_find+0x24>
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	e03e      	b.n	80105c4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	69db      	ldr	r3, [r3, #28]
 801054a:	4619      	mov	r1, r3
 801054c:	6938      	ldr	r0, [r7, #16]
 801054e:	f7ff f9cd 	bl	800f8ec <move_window>
 8010552:	4603      	mov	r3, r0
 8010554:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010556:	7dfb      	ldrb	r3, [r7, #23]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d12f      	bne.n	80105bc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6a1b      	ldr	r3, [r3, #32]
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010564:	7bfb      	ldrb	r3, [r7, #15]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d102      	bne.n	8010570 <dir_find+0x4e>
 801056a:	2304      	movs	r3, #4
 801056c:	75fb      	strb	r3, [r7, #23]
 801056e:	e028      	b.n	80105c2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a1b      	ldr	r3, [r3, #32]
 8010574:	330b      	adds	r3, #11
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801057c:	b2da      	uxtb	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	330b      	adds	r3, #11
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	f003 0308 	and.w	r3, r3, #8
 801058e:	2b00      	cmp	r3, #0
 8010590:	d10a      	bne.n	80105a8 <dir_find+0x86>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a18      	ldr	r0, [r3, #32]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	3324      	adds	r3, #36	; 0x24
 801059a:	220b      	movs	r2, #11
 801059c:	4619      	mov	r1, r3
 801059e:	f7fe ffb2 	bl	800f506 <mem_cmp>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00b      	beq.n	80105c0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80105a8:	2100      	movs	r1, #0
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7ff fe00 	bl	80101b0 <dir_next>
 80105b0:	4603      	mov	r3, r0
 80105b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80105b4:	7dfb      	ldrb	r3, [r7, #23]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d0c5      	beq.n	8010546 <dir_find+0x24>
 80105ba:	e002      	b.n	80105c2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80105bc:	bf00      	nop
 80105be:	e000      	b.n	80105c2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80105c0:	bf00      	nop

	return res;
 80105c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3718      	adds	r7, #24
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80105da:	2101      	movs	r1, #1
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff febd 	bl	801035c <dir_alloc>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d11c      	bne.n	8010626 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	69db      	ldr	r3, [r3, #28]
 80105f0:	4619      	mov	r1, r3
 80105f2:	68b8      	ldr	r0, [r7, #8]
 80105f4:	f7ff f97a 	bl	800f8ec <move_window>
 80105f8:	4603      	mov	r3, r0
 80105fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80105fc:	7bfb      	ldrb	r3, [r7, #15]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d111      	bne.n	8010626 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	2220      	movs	r2, #32
 8010608:	2100      	movs	r1, #0
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe ff61 	bl	800f4d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6a18      	ldr	r0, [r3, #32]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3324      	adds	r3, #36	; 0x24
 8010618:	220b      	movs	r2, #11
 801061a:	4619      	mov	r1, r3
 801061c:	f7fe ff38 	bl	800f490 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	2201      	movs	r2, #1
 8010624:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010626:	7bfb      	ldrb	r3, [r7, #15]
}
 8010628:	4618      	mov	r0, r3
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b084      	sub	sp, #16
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	69db      	ldr	r3, [r3, #28]
 8010642:	4619      	mov	r1, r3
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7ff f951 	bl	800f8ec <move_window>
 801064a:	4603      	mov	r3, r0
 801064c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801064e:	7afb      	ldrb	r3, [r7, #11]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d106      	bne.n	8010662 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6a1b      	ldr	r3, [r3, #32]
 8010658:	22e5      	movs	r2, #229	; 0xe5
 801065a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2201      	movs	r2, #1
 8010660:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010662:	7afb      	ldrb	r3, [r7, #11]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b088      	sub	sp, #32
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	3324      	adds	r3, #36	; 0x24
 8010680:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010682:	220b      	movs	r2, #11
 8010684:	2120      	movs	r1, #32
 8010686:	68b8      	ldr	r0, [r7, #8]
 8010688:	f7fe ff23 	bl	800f4d2 <mem_set>
	si = i = 0; ni = 8;
 801068c:	2300      	movs	r3, #0
 801068e:	613b      	str	r3, [r7, #16]
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	617b      	str	r3, [r7, #20]
 8010694:	2308      	movs	r3, #8
 8010696:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	4413      	add	r3, r2
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	2b2e      	cmp	r3, #46	; 0x2e
 80106a2:	d12f      	bne.n	8010704 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	617a      	str	r2, [r7, #20]
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	4413      	add	r3, r2
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80106b2:	7ffb      	ldrb	r3, [r7, #31]
 80106b4:	2b2e      	cmp	r3, #46	; 0x2e
 80106b6:	d10a      	bne.n	80106ce <create_name+0x62>
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d807      	bhi.n	80106ce <create_name+0x62>
			sfn[i++] = c;
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	1c5a      	adds	r2, r3, #1
 80106c2:	613a      	str	r2, [r7, #16]
 80106c4:	68ba      	ldr	r2, [r7, #8]
 80106c6:	4413      	add	r3, r2
 80106c8:	7ffa      	ldrb	r2, [r7, #31]
 80106ca:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80106cc:	e7ea      	b.n	80106a4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80106ce:	7ffb      	ldrb	r3, [r7, #31]
 80106d0:	2b2f      	cmp	r3, #47	; 0x2f
 80106d2:	d007      	beq.n	80106e4 <create_name+0x78>
 80106d4:	7ffb      	ldrb	r3, [r7, #31]
 80106d6:	2b5c      	cmp	r3, #92	; 0x5c
 80106d8:	d004      	beq.n	80106e4 <create_name+0x78>
 80106da:	7ffb      	ldrb	r3, [r7, #31]
 80106dc:	2b20      	cmp	r3, #32
 80106de:	d901      	bls.n	80106e4 <create_name+0x78>
 80106e0:	2306      	movs	r3, #6
 80106e2:	e084      	b.n	80107ee <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	441a      	add	r2, r3
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80106ee:	7ffb      	ldrb	r3, [r7, #31]
 80106f0:	2b20      	cmp	r3, #32
 80106f2:	d801      	bhi.n	80106f8 <create_name+0x8c>
 80106f4:	2224      	movs	r2, #36	; 0x24
 80106f6:	e000      	b.n	80106fa <create_name+0x8e>
 80106f8:	2220      	movs	r2, #32
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	330b      	adds	r3, #11
 80106fe:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010700:	2300      	movs	r3, #0
 8010702:	e074      	b.n	80107ee <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	1c5a      	adds	r2, r3, #1
 8010708:	617a      	str	r2, [r7, #20]
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	4413      	add	r3, r2
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010712:	7ffb      	ldrb	r3, [r7, #31]
 8010714:	2b20      	cmp	r3, #32
 8010716:	d94e      	bls.n	80107b6 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010718:	7ffb      	ldrb	r3, [r7, #31]
 801071a:	2b2f      	cmp	r3, #47	; 0x2f
 801071c:	d006      	beq.n	801072c <create_name+0xc0>
 801071e:	7ffb      	ldrb	r3, [r7, #31]
 8010720:	2b5c      	cmp	r3, #92	; 0x5c
 8010722:	d110      	bne.n	8010746 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010724:	e002      	b.n	801072c <create_name+0xc0>
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	3301      	adds	r3, #1
 801072a:	617b      	str	r3, [r7, #20]
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	4413      	add	r3, r2
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	2b2f      	cmp	r3, #47	; 0x2f
 8010736:	d0f6      	beq.n	8010726 <create_name+0xba>
 8010738:	68fa      	ldr	r2, [r7, #12]
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	4413      	add	r3, r2
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2b5c      	cmp	r3, #92	; 0x5c
 8010742:	d0f0      	beq.n	8010726 <create_name+0xba>
			break;
 8010744:	e038      	b.n	80107b8 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010746:	7ffb      	ldrb	r3, [r7, #31]
 8010748:	2b2e      	cmp	r3, #46	; 0x2e
 801074a:	d003      	beq.n	8010754 <create_name+0xe8>
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	429a      	cmp	r2, r3
 8010752:	d30c      	bcc.n	801076e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	2b0b      	cmp	r3, #11
 8010758:	d002      	beq.n	8010760 <create_name+0xf4>
 801075a:	7ffb      	ldrb	r3, [r7, #31]
 801075c:	2b2e      	cmp	r3, #46	; 0x2e
 801075e:	d001      	beq.n	8010764 <create_name+0xf8>
 8010760:	2306      	movs	r3, #6
 8010762:	e044      	b.n	80107ee <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010764:	2308      	movs	r3, #8
 8010766:	613b      	str	r3, [r7, #16]
 8010768:	230b      	movs	r3, #11
 801076a:	61bb      	str	r3, [r7, #24]
			continue;
 801076c:	e022      	b.n	80107b4 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801076e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010772:	2b00      	cmp	r3, #0
 8010774:	da04      	bge.n	8010780 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010776:	7ffb      	ldrb	r3, [r7, #31]
 8010778:	3b80      	subs	r3, #128	; 0x80
 801077a:	4a1f      	ldr	r2, [pc, #124]	; (80107f8 <create_name+0x18c>)
 801077c:	5cd3      	ldrb	r3, [r2, r3]
 801077e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010780:	7ffb      	ldrb	r3, [r7, #31]
 8010782:	4619      	mov	r1, r3
 8010784:	481d      	ldr	r0, [pc, #116]	; (80107fc <create_name+0x190>)
 8010786:	f7fe fee5 	bl	800f554 <chk_chr>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d001      	beq.n	8010794 <create_name+0x128>
 8010790:	2306      	movs	r3, #6
 8010792:	e02c      	b.n	80107ee <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010794:	7ffb      	ldrb	r3, [r7, #31]
 8010796:	2b60      	cmp	r3, #96	; 0x60
 8010798:	d905      	bls.n	80107a6 <create_name+0x13a>
 801079a:	7ffb      	ldrb	r3, [r7, #31]
 801079c:	2b7a      	cmp	r3, #122	; 0x7a
 801079e:	d802      	bhi.n	80107a6 <create_name+0x13a>
 80107a0:	7ffb      	ldrb	r3, [r7, #31]
 80107a2:	3b20      	subs	r3, #32
 80107a4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	1c5a      	adds	r2, r3, #1
 80107aa:	613a      	str	r2, [r7, #16]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	4413      	add	r3, r2
 80107b0:	7ffa      	ldrb	r2, [r7, #31]
 80107b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80107b4:	e7a6      	b.n	8010704 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80107b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	441a      	add	r2, r3
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d101      	bne.n	80107cc <create_name+0x160>
 80107c8:	2306      	movs	r3, #6
 80107ca:	e010      	b.n	80107ee <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	2be5      	cmp	r3, #229	; 0xe5
 80107d2:	d102      	bne.n	80107da <create_name+0x16e>
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	2205      	movs	r2, #5
 80107d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80107da:	7ffb      	ldrb	r3, [r7, #31]
 80107dc:	2b20      	cmp	r3, #32
 80107de:	d801      	bhi.n	80107e4 <create_name+0x178>
 80107e0:	2204      	movs	r2, #4
 80107e2:	e000      	b.n	80107e6 <create_name+0x17a>
 80107e4:	2200      	movs	r2, #0
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	330b      	adds	r3, #11
 80107ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80107ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3720      	adds	r7, #32
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	08018a08 	.word	0x08018a08
 80107fc:	080189b8 	.word	0x080189b8

08010800 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2b2f      	cmp	r3, #47	; 0x2f
 801081a:	d00b      	beq.n	8010834 <follow_path+0x34>
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	2b5c      	cmp	r3, #92	; 0x5c
 8010822:	d007      	beq.n	8010834 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	699a      	ldr	r2, [r3, #24]
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	609a      	str	r2, [r3, #8]
 801082c:	e00d      	b.n	801084a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	3301      	adds	r3, #1
 8010832:	603b      	str	r3, [r7, #0]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2b2f      	cmp	r3, #47	; 0x2f
 801083a:	d0f8      	beq.n	801082e <follow_path+0x2e>
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	2b5c      	cmp	r3, #92	; 0x5c
 8010842:	d0f4      	beq.n	801082e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	2200      	movs	r2, #0
 8010848:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	2b1f      	cmp	r3, #31
 8010850:	d80a      	bhi.n	8010868 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2280      	movs	r2, #128	; 0x80
 8010856:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801085a:	2100      	movs	r1, #0
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7ff fc1e 	bl	801009e <dir_sdi>
 8010862:	4603      	mov	r3, r0
 8010864:	75fb      	strb	r3, [r7, #23]
 8010866:	e05b      	b.n	8010920 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010868:	463b      	mov	r3, r7
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff fefd 	bl	801066c <create_name>
 8010872:	4603      	mov	r3, r0
 8010874:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010876:	7dfb      	ldrb	r3, [r7, #23]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d14c      	bne.n	8010916 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f7ff fe50 	bl	8010522 <dir_find>
 8010882:	4603      	mov	r3, r0
 8010884:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801088c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801088e:	7dfb      	ldrb	r3, [r7, #23]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d01b      	beq.n	80108cc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010894:	7dfb      	ldrb	r3, [r7, #23]
 8010896:	2b04      	cmp	r3, #4
 8010898:	d13f      	bne.n	801091a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801089a:	7afb      	ldrb	r3, [r7, #11]
 801089c:	f003 0320 	and.w	r3, r3, #32
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00b      	beq.n	80108bc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80108a4:	7afb      	ldrb	r3, [r7, #11]
 80108a6:	f003 0304 	and.w	r3, r3, #4
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d031      	beq.n	8010912 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2280      	movs	r2, #128	; 0x80
 80108b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80108b6:	2300      	movs	r3, #0
 80108b8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80108ba:	e02e      	b.n	801091a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80108bc:	7afb      	ldrb	r3, [r7, #11]
 80108be:	f003 0304 	and.w	r3, r3, #4
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d129      	bne.n	801091a <follow_path+0x11a>
 80108c6:	2305      	movs	r3, #5
 80108c8:	75fb      	strb	r3, [r7, #23]
				break;
 80108ca:	e026      	b.n	801091a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80108cc:	7afb      	ldrb	r3, [r7, #11]
 80108ce:	f003 0304 	and.w	r3, r3, #4
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d123      	bne.n	801091e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	799b      	ldrb	r3, [r3, #6]
 80108da:	f003 0310 	and.w	r3, r3, #16
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d102      	bne.n	80108e8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80108e2:	2305      	movs	r3, #5
 80108e4:	75fb      	strb	r3, [r7, #23]
 80108e6:	e01b      	b.n	8010920 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	695b      	ldr	r3, [r3, #20]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	8992      	ldrh	r2, [r2, #12]
 80108f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80108fa:	fb02 f200 	mul.w	r2, r2, r0
 80108fe:	1a9b      	subs	r3, r3, r2
 8010900:	440b      	add	r3, r1
 8010902:	4619      	mov	r1, r3
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f7ff fd70 	bl	80103ea <ld_clust>
 801090a:	4602      	mov	r2, r0
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	609a      	str	r2, [r3, #8]
 8010910:	e7aa      	b.n	8010868 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010912:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010914:	e7a8      	b.n	8010868 <follow_path+0x68>
			if (res != FR_OK) break;
 8010916:	bf00      	nop
 8010918:	e002      	b.n	8010920 <follow_path+0x120>
				break;
 801091a:	bf00      	nop
 801091c:	e000      	b.n	8010920 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801091e:	bf00      	nop
			}
		}
	}

	return res;
 8010920:	7dfb      	ldrb	r3, [r7, #23]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801092a:	b480      	push	{r7}
 801092c:	b087      	sub	sp, #28
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010932:	f04f 33ff 	mov.w	r3, #4294967295
 8010936:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d031      	beq.n	80109a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	617b      	str	r3, [r7, #20]
 8010946:	e002      	b.n	801094e <get_ldnumber+0x24>
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	3301      	adds	r3, #1
 801094c:	617b      	str	r3, [r7, #20]
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	2b20      	cmp	r3, #32
 8010954:	d903      	bls.n	801095e <get_ldnumber+0x34>
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	2b3a      	cmp	r3, #58	; 0x3a
 801095c:	d1f4      	bne.n	8010948 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	2b3a      	cmp	r3, #58	; 0x3a
 8010964:	d11c      	bne.n	80109a0 <get_ldnumber+0x76>
			tp = *path;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	60fa      	str	r2, [r7, #12]
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	3b30      	subs	r3, #48	; 0x30
 8010976:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b09      	cmp	r3, #9
 801097c:	d80e      	bhi.n	801099c <get_ldnumber+0x72>
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	429a      	cmp	r2, r3
 8010984:	d10a      	bne.n	801099c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d107      	bne.n	801099c <get_ldnumber+0x72>
					vol = (int)i;
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	3301      	adds	r3, #1
 8010994:	617b      	str	r3, [r7, #20]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	697a      	ldr	r2, [r7, #20]
 801099a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	e002      	b.n	80109a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80109a0:	2300      	movs	r3, #0
 80109a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80109a4:	693b      	ldr	r3, [r7, #16]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
	...

080109b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2200      	movs	r2, #0
 80109c2:	70da      	strb	r2, [r3, #3]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80109cc:	6839      	ldr	r1, [r7, #0]
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7fe ff8c 	bl	800f8ec <move_window>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d001      	beq.n	80109de <check_fs+0x2a>
 80109da:	2304      	movs	r3, #4
 80109dc:	e038      	b.n	8010a50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	3338      	adds	r3, #56	; 0x38
 80109e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe fcd0 	bl	800f38c <ld_word>
 80109ec:	4603      	mov	r3, r0
 80109ee:	461a      	mov	r2, r3
 80109f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d001      	beq.n	80109fc <check_fs+0x48>
 80109f8:	2303      	movs	r3, #3
 80109fa:	e029      	b.n	8010a50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a02:	2be9      	cmp	r3, #233	; 0xe9
 8010a04:	d009      	beq.n	8010a1a <check_fs+0x66>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a0c:	2beb      	cmp	r3, #235	; 0xeb
 8010a0e:	d11e      	bne.n	8010a4e <check_fs+0x9a>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010a16:	2b90      	cmp	r3, #144	; 0x90
 8010a18:	d119      	bne.n	8010a4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	3338      	adds	r3, #56	; 0x38
 8010a1e:	3336      	adds	r3, #54	; 0x36
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fe fccb 	bl	800f3bc <ld_dword>
 8010a26:	4603      	mov	r3, r0
 8010a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a2c:	4a0a      	ldr	r2, [pc, #40]	; (8010a58 <check_fs+0xa4>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d101      	bne.n	8010a36 <check_fs+0x82>
 8010a32:	2300      	movs	r3, #0
 8010a34:	e00c      	b.n	8010a50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	3338      	adds	r3, #56	; 0x38
 8010a3a:	3352      	adds	r3, #82	; 0x52
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fe fcbd 	bl	800f3bc <ld_dword>
 8010a42:	4602      	mov	r2, r0
 8010a44:	4b05      	ldr	r3, [pc, #20]	; (8010a5c <check_fs+0xa8>)
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d101      	bne.n	8010a4e <check_fs+0x9a>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	e000      	b.n	8010a50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010a4e:	2302      	movs	r3, #2
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	00544146 	.word	0x00544146
 8010a5c:	33544146 	.word	0x33544146

08010a60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b096      	sub	sp, #88	; 0x58
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	2200      	movs	r2, #0
 8010a72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f7ff ff58 	bl	801092a <get_ldnumber>
 8010a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	da01      	bge.n	8010a86 <find_volume+0x26>
 8010a82:	230b      	movs	r3, #11
 8010a84:	e268      	b.n	8010f58 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010a86:	4ab0      	ldr	r2, [pc, #704]	; (8010d48 <find_volume+0x2e8>)
 8010a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <find_volume+0x3a>
 8010a96:	230c      	movs	r3, #12
 8010a98:	e25e      	b.n	8010f58 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	f023 0301 	bic.w	r3, r3, #1
 8010aa6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d01a      	beq.n	8010ae6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab2:	785b      	ldrb	r3, [r3, #1]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fe fbcb 	bl	800f250 <disk_status>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010ac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ac4:	f003 0301 	and.w	r3, r3, #1
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d10c      	bne.n	8010ae6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010acc:	79fb      	ldrb	r3, [r7, #7]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d007      	beq.n	8010ae2 <find_volume+0x82>
 8010ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ad6:	f003 0304 	and.w	r3, r3, #4
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d001      	beq.n	8010ae2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010ade:	230a      	movs	r3, #10
 8010ae0:	e23a      	b.n	8010f58 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e238      	b.n	8010f58 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae8:	2200      	movs	r2, #0
 8010aea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	785b      	ldrb	r3, [r3, #1]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fe fbc3 	bl	800f284 <disk_initialize>
 8010afe:	4603      	mov	r3, r0
 8010b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b08:	f003 0301 	and.w	r3, r3, #1
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d001      	beq.n	8010b14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010b10:	2303      	movs	r3, #3
 8010b12:	e221      	b.n	8010f58 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010b14:	79fb      	ldrb	r3, [r7, #7]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <find_volume+0xca>
 8010b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b1e:	f003 0304 	and.w	r3, r3, #4
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010b26:	230a      	movs	r3, #10
 8010b28:	e216      	b.n	8010f58 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2c:	7858      	ldrb	r0, [r3, #1]
 8010b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b30:	330c      	adds	r3, #12
 8010b32:	461a      	mov	r2, r3
 8010b34:	2102      	movs	r1, #2
 8010b36:	f7fe fc0b 	bl	800f350 <disk_ioctl>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d001      	beq.n	8010b44 <find_volume+0xe4>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e209      	b.n	8010f58 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b46:	899b      	ldrh	r3, [r3, #12]
 8010b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b4c:	d80d      	bhi.n	8010b6a <find_volume+0x10a>
 8010b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b50:	899b      	ldrh	r3, [r3, #12]
 8010b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b56:	d308      	bcc.n	8010b6a <find_volume+0x10a>
 8010b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5a:	899b      	ldrh	r3, [r3, #12]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b60:	899b      	ldrh	r3, [r3, #12]
 8010b62:	3b01      	subs	r3, #1
 8010b64:	4013      	ands	r3, r2
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <find_volume+0x10e>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e1f4      	b.n	8010f58 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b76:	f7ff ff1d 	bl	80109b4 <check_fs>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b84:	2b02      	cmp	r3, #2
 8010b86:	d14b      	bne.n	8010c20 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b88:	2300      	movs	r3, #0
 8010b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8010b8c:	e01f      	b.n	8010bce <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b96:	011b      	lsls	r3, r3, #4
 8010b98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010b9c:	4413      	add	r3, r2
 8010b9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d006      	beq.n	8010bb8 <find_volume+0x158>
 8010baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bac:	3308      	adds	r3, #8
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fe fc04 	bl	800f3bc <ld_dword>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	e000      	b.n	8010bba <find_volume+0x15a>
 8010bb8:	2200      	movs	r2, #0
 8010bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010bc2:	440b      	add	r3, r1
 8010bc4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bca:	3301      	adds	r3, #1
 8010bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8010bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bd0:	2b03      	cmp	r3, #3
 8010bd2:	d9dc      	bls.n	8010b8e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <find_volume+0x184>
 8010bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be0:	3b01      	subs	r3, #1
 8010be2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010bec:	4413      	add	r3, r2
 8010bee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010bf2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d005      	beq.n	8010c06 <find_volume+0x1a6>
 8010bfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010bfe:	f7ff fed9 	bl	80109b4 <check_fs>
 8010c02:	4603      	mov	r3, r0
 8010c04:	e000      	b.n	8010c08 <find_volume+0x1a8>
 8010c06:	2303      	movs	r3, #3
 8010c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d905      	bls.n	8010c20 <find_volume+0x1c0>
 8010c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c16:	3301      	adds	r3, #1
 8010c18:	643b      	str	r3, [r7, #64]	; 0x40
 8010c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c1c:	2b03      	cmp	r3, #3
 8010c1e:	d9e1      	bls.n	8010be4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c24:	2b04      	cmp	r3, #4
 8010c26:	d101      	bne.n	8010c2c <find_volume+0x1cc>
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e195      	b.n	8010f58 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d901      	bls.n	8010c38 <find_volume+0x1d8>
 8010c34:	230d      	movs	r3, #13
 8010c36:	e18f      	b.n	8010f58 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3a:	3338      	adds	r3, #56	; 0x38
 8010c3c:	330b      	adds	r3, #11
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fe fba4 	bl	800f38c <ld_word>
 8010c44:	4603      	mov	r3, r0
 8010c46:	461a      	mov	r2, r3
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	899b      	ldrh	r3, [r3, #12]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d001      	beq.n	8010c54 <find_volume+0x1f4>
 8010c50:	230d      	movs	r3, #13
 8010c52:	e181      	b.n	8010f58 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	3338      	adds	r3, #56	; 0x38
 8010c58:	3316      	adds	r3, #22
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fb96 	bl	800f38c <ld_word>
 8010c60:	4603      	mov	r3, r0
 8010c62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d106      	bne.n	8010c78 <find_volume+0x218>
 8010c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c6c:	3338      	adds	r3, #56	; 0x38
 8010c6e:	3324      	adds	r3, #36	; 0x24
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fe fba3 	bl	800f3bc <ld_dword>
 8010c76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c7c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c80:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8a:	789b      	ldrb	r3, [r3, #2]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d005      	beq.n	8010c9c <find_volume+0x23c>
 8010c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c92:	789b      	ldrb	r3, [r3, #2]
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d001      	beq.n	8010c9c <find_volume+0x23c>
 8010c98:	230d      	movs	r3, #13
 8010c9a:	e15d      	b.n	8010f58 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	789b      	ldrb	r3, [r3, #2]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ca4:	fb02 f303 	mul.w	r3, r2, r3
 8010ca8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cb0:	b29a      	uxth	r2, r3
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb8:	895b      	ldrh	r3, [r3, #10]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d008      	beq.n	8010cd0 <find_volume+0x270>
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc0:	895b      	ldrh	r3, [r3, #10]
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc6:	895b      	ldrh	r3, [r3, #10]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	4013      	ands	r3, r2
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d001      	beq.n	8010cd4 <find_volume+0x274>
 8010cd0:	230d      	movs	r3, #13
 8010cd2:	e141      	b.n	8010f58 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	3338      	adds	r3, #56	; 0x38
 8010cd8:	3311      	adds	r3, #17
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe fb56 	bl	800f38c <ld_word>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cea:	891b      	ldrh	r3, [r3, #8]
 8010cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cee:	8992      	ldrh	r2, [r2, #12]
 8010cf0:	0952      	lsrs	r2, r2, #5
 8010cf2:	b292      	uxth	r2, r2
 8010cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cf8:	fb02 f201 	mul.w	r2, r2, r1
 8010cfc:	1a9b      	subs	r3, r3, r2
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d001      	beq.n	8010d08 <find_volume+0x2a8>
 8010d04:	230d      	movs	r3, #13
 8010d06:	e127      	b.n	8010f58 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0a:	3338      	adds	r3, #56	; 0x38
 8010d0c:	3313      	adds	r3, #19
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fe fb3c 	bl	800f38c <ld_word>
 8010d14:	4603      	mov	r3, r0
 8010d16:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d106      	bne.n	8010d2c <find_volume+0x2cc>
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d20:	3338      	adds	r3, #56	; 0x38
 8010d22:	3320      	adds	r3, #32
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fe fb49 	bl	800f3bc <ld_dword>
 8010d2a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2e:	3338      	adds	r3, #56	; 0x38
 8010d30:	330e      	adds	r3, #14
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe fb2a 	bl	800f38c <ld_word>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010d3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d104      	bne.n	8010d4c <find_volume+0x2ec>
 8010d42:	230d      	movs	r3, #13
 8010d44:	e108      	b.n	8010f58 <find_volume+0x4f8>
 8010d46:	bf00      	nop
 8010d48:	200335f0 	.word	0x200335f0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010d4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d50:	4413      	add	r3, r2
 8010d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d54:	8911      	ldrh	r1, [r2, #8]
 8010d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d58:	8992      	ldrh	r2, [r2, #12]
 8010d5a:	0952      	lsrs	r2, r2, #5
 8010d5c:	b292      	uxth	r2, r2
 8010d5e:	fbb1 f2f2 	udiv	r2, r1, r2
 8010d62:	b292      	uxth	r2, r2
 8010d64:	4413      	add	r3, r2
 8010d66:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d201      	bcs.n	8010d74 <find_volume+0x314>
 8010d70:	230d      	movs	r3, #13
 8010d72:	e0f1      	b.n	8010f58 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d7c:	8952      	ldrh	r2, [r2, #10]
 8010d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d82:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d101      	bne.n	8010d8e <find_volume+0x32e>
 8010d8a:	230d      	movs	r3, #13
 8010d8c:	e0e4      	b.n	8010f58 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010d8e:	2303      	movs	r3, #3
 8010d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d96:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d802      	bhi.n	8010da4 <find_volume+0x344>
 8010d9e:	2302      	movs	r3, #2
 8010da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d802      	bhi.n	8010db4 <find_volume+0x354>
 8010dae:	2301      	movs	r3, #1
 8010db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	1c9a      	adds	r2, r3, #2
 8010db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dba:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dc0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010dc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc6:	441a      	add	r2, r3
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010dcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd0:	441a      	add	r2, r3
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dda:	2b03      	cmp	r3, #3
 8010ddc:	d11e      	bne.n	8010e1c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de0:	3338      	adds	r3, #56	; 0x38
 8010de2:	332a      	adds	r3, #42	; 0x2a
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fe fad1 	bl	800f38c <ld_word>
 8010dea:	4603      	mov	r3, r0
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d001      	beq.n	8010df4 <find_volume+0x394>
 8010df0:	230d      	movs	r3, #13
 8010df2:	e0b1      	b.n	8010f58 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df6:	891b      	ldrh	r3, [r3, #8]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <find_volume+0x3a0>
 8010dfc:	230d      	movs	r3, #13
 8010dfe:	e0ab      	b.n	8010f58 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e02:	3338      	adds	r3, #56	; 0x38
 8010e04:	332c      	adds	r3, #44	; 0x2c
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fe fad8 	bl	800f3bc <ld_dword>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e10:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e14:	69db      	ldr	r3, [r3, #28]
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	647b      	str	r3, [r7, #68]	; 0x44
 8010e1a:	e01f      	b.n	8010e5c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1e:	891b      	ldrh	r3, [r3, #8]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d101      	bne.n	8010e28 <find_volume+0x3c8>
 8010e24:	230d      	movs	r3, #13
 8010e26:	e097      	b.n	8010f58 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e2e:	441a      	add	r2, r3
 8010e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e32:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d103      	bne.n	8010e44 <find_volume+0x3e4>
 8010e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3e:	69db      	ldr	r3, [r3, #28]
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	e00a      	b.n	8010e5a <find_volume+0x3fa>
 8010e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e46:	69da      	ldr	r2, [r3, #28]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	4413      	add	r3, r2
 8010e4e:	085a      	lsrs	r2, r3, #1
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	69db      	ldr	r3, [r3, #28]
 8010e54:	f003 0301 	and.w	r3, r3, #1
 8010e58:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010e5a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5e:	6a1a      	ldr	r2, [r3, #32]
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	899b      	ldrh	r3, [r3, #12]
 8010e64:	4619      	mov	r1, r3
 8010e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e68:	440b      	add	r3, r1
 8010e6a:	3b01      	subs	r3, #1
 8010e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e6e:	8989      	ldrh	r1, [r1, #12]
 8010e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d201      	bcs.n	8010e7c <find_volume+0x41c>
 8010e78:	230d      	movs	r3, #13
 8010e7a:	e06d      	b.n	8010f58 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e82:	615a      	str	r2, [r3, #20]
 8010e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e86:	695a      	ldr	r2, [r3, #20]
 8010e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8e:	2280      	movs	r2, #128	; 0x80
 8010e90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010e92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e96:	2b03      	cmp	r3, #3
 8010e98:	d149      	bne.n	8010f2e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9c:	3338      	adds	r3, #56	; 0x38
 8010e9e:	3330      	adds	r3, #48	; 0x30
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fe fa73 	bl	800f38c <ld_word>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d140      	bne.n	8010f2e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eae:	3301      	adds	r3, #1
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010eb4:	f7fe fd1a 	bl	800f8ec <move_window>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d137      	bne.n	8010f2e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec6:	3338      	adds	r3, #56	; 0x38
 8010ec8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fa5d 	bl	800f38c <ld_word>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d127      	bne.n	8010f2e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	3338      	adds	r3, #56	; 0x38
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fe fa6a 	bl	800f3bc <ld_dword>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	4b1d      	ldr	r3, [pc, #116]	; (8010f60 <find_volume+0x500>)
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d11e      	bne.n	8010f2e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef2:	3338      	adds	r3, #56	; 0x38
 8010ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fe fa5f 	bl	800f3bc <ld_dword>
 8010efe:	4602      	mov	r2, r0
 8010f00:	4b18      	ldr	r3, [pc, #96]	; (8010f64 <find_volume+0x504>)
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d113      	bne.n	8010f2e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f08:	3338      	adds	r3, #56	; 0x38
 8010f0a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe fa54 	bl	800f3bc <ld_dword>
 8010f14:	4602      	mov	r2, r0
 8010f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f18:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1c:	3338      	adds	r3, #56	; 0x38
 8010f1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fe fa4a 	bl	800f3bc <ld_dword>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010f34:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010f36:	4b0c      	ldr	r3, [pc, #48]	; (8010f68 <find_volume+0x508>)
 8010f38:	881b      	ldrh	r3, [r3, #0]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	4b0a      	ldr	r3, [pc, #40]	; (8010f68 <find_volume+0x508>)
 8010f40:	801a      	strh	r2, [r3, #0]
 8010f42:	4b09      	ldr	r3, [pc, #36]	; (8010f68 <find_volume+0x508>)
 8010f44:	881a      	ldrh	r2, [r3, #0]
 8010f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f48:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010f50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f52:	f7fe fc63 	bl	800f81c <clear_lock>
#endif
	return FR_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3758      	adds	r7, #88	; 0x58
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	41615252 	.word	0x41615252
 8010f64:	61417272 	.word	0x61417272
 8010f68:	200335f4 	.word	0x200335f4

08010f6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010f76:	2309      	movs	r3, #9
 8010f78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d01c      	beq.n	8010fba <validate+0x4e>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d018      	beq.n	8010fba <validate+0x4e>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d013      	beq.n	8010fba <validate+0x4e>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	889a      	ldrh	r2, [r3, #4]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	88db      	ldrh	r3, [r3, #6]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d10c      	bne.n	8010fba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	785b      	ldrb	r3, [r3, #1]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe f952 	bl	800f250 <disk_status>
 8010fac:	4603      	mov	r3, r0
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d101      	bne.n	8010fba <validate+0x4e>
			res = FR_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010fba:	7bfb      	ldrb	r3, [r7, #15]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <validate+0x5a>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	e000      	b.n	8010fc8 <validate+0x5c>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	683a      	ldr	r2, [r7, #0]
 8010fca:	6013      	str	r3, [r2, #0]
	return res;
 8010fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
	...

08010fd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b088      	sub	sp, #32
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010fea:	f107 0310 	add.w	r3, r7, #16
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff fc9b 	bl	801092a <get_ldnumber>
 8010ff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	da01      	bge.n	8011000 <f_mount+0x28>
 8010ffc:	230b      	movs	r3, #11
 8010ffe:	e02b      	b.n	8011058 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011000:	4a17      	ldr	r2, [pc, #92]	; (8011060 <f_mount+0x88>)
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d005      	beq.n	801101c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011010:	69b8      	ldr	r0, [r7, #24]
 8011012:	f7fe fc03 	bl	800f81c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	2200      	movs	r2, #0
 801101a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d002      	beq.n	8011028 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2200      	movs	r2, #0
 8011026:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011028:	68fa      	ldr	r2, [r7, #12]
 801102a:	490d      	ldr	r1, [pc, #52]	; (8011060 <f_mount+0x88>)
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <f_mount+0x66>
 8011038:	79fb      	ldrb	r3, [r7, #7]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d001      	beq.n	8011042 <f_mount+0x6a>
 801103e:	2300      	movs	r3, #0
 8011040:	e00a      	b.n	8011058 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011042:	f107 010c 	add.w	r1, r7, #12
 8011046:	f107 0308 	add.w	r3, r7, #8
 801104a:	2200      	movs	r2, #0
 801104c:	4618      	mov	r0, r3
 801104e:	f7ff fd07 	bl	8010a60 <find_volume>
 8011052:	4603      	mov	r3, r0
 8011054:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011056:	7dfb      	ldrb	r3, [r7, #23]
}
 8011058:	4618      	mov	r0, r3
 801105a:	3720      	adds	r7, #32
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}
 8011060:	200335f0 	.word	0x200335f0

08011064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b098      	sub	sp, #96	; 0x60
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	4613      	mov	r3, r2
 8011070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d101      	bne.n	801107c <f_open+0x18>
 8011078:	2309      	movs	r3, #9
 801107a:	e1ba      	b.n	80113f2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801107c:	79fb      	ldrb	r3, [r7, #7]
 801107e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011084:	79fa      	ldrb	r2, [r7, #7]
 8011086:	f107 0110 	add.w	r1, r7, #16
 801108a:	f107 0308 	add.w	r3, r7, #8
 801108e:	4618      	mov	r0, r3
 8011090:	f7ff fce6 	bl	8010a60 <find_volume>
 8011094:	4603      	mov	r3, r0
 8011096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f040 819e 	bne.w	80113e0 <f_open+0x37c>
		dj.obj.fs = fs;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80110a8:	68ba      	ldr	r2, [r7, #8]
 80110aa:	f107 0314 	add.w	r3, r7, #20
 80110ae:	4611      	mov	r1, r2
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7ff fba5 	bl	8010800 <follow_path>
 80110b6:	4603      	mov	r3, r0
 80110b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80110bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d11a      	bne.n	80110fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80110c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80110c8:	b25b      	sxtb	r3, r3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	da03      	bge.n	80110d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80110ce:	2306      	movs	r3, #6
 80110d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80110d4:	e011      	b.n	80110fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110d6:	79fb      	ldrb	r3, [r7, #7]
 80110d8:	f023 0301 	bic.w	r3, r3, #1
 80110dc:	2b00      	cmp	r3, #0
 80110de:	bf14      	ite	ne
 80110e0:	2301      	movne	r3, #1
 80110e2:	2300      	moveq	r3, #0
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	461a      	mov	r2, r3
 80110e8:	f107 0314 	add.w	r3, r7, #20
 80110ec:	4611      	mov	r1, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fe fa4c 	bl	800f58c <chk_lock>
 80110f4:	4603      	mov	r3, r0
 80110f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80110fa:	79fb      	ldrb	r3, [r7, #7]
 80110fc:	f003 031c 	and.w	r3, r3, #28
 8011100:	2b00      	cmp	r3, #0
 8011102:	d07e      	beq.n	8011202 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8011104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011108:	2b00      	cmp	r3, #0
 801110a:	d017      	beq.n	801113c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801110c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011110:	2b04      	cmp	r3, #4
 8011112:	d10e      	bne.n	8011132 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011114:	f7fe fa96 	bl	800f644 <enq_lock>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d006      	beq.n	801112c <f_open+0xc8>
 801111e:	f107 0314 	add.w	r3, r7, #20
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff fa52 	bl	80105cc <dir_register>
 8011128:	4603      	mov	r3, r0
 801112a:	e000      	b.n	801112e <f_open+0xca>
 801112c:	2312      	movs	r3, #18
 801112e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	f043 0308 	orr.w	r3, r3, #8
 8011138:	71fb      	strb	r3, [r7, #7]
 801113a:	e010      	b.n	801115e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801113c:	7ebb      	ldrb	r3, [r7, #26]
 801113e:	f003 0311 	and.w	r3, r3, #17
 8011142:	2b00      	cmp	r3, #0
 8011144:	d003      	beq.n	801114e <f_open+0xea>
					res = FR_DENIED;
 8011146:	2307      	movs	r3, #7
 8011148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801114c:	e007      	b.n	801115e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801114e:	79fb      	ldrb	r3, [r7, #7]
 8011150:	f003 0304 	and.w	r3, r3, #4
 8011154:	2b00      	cmp	r3, #0
 8011156:	d002      	beq.n	801115e <f_open+0xfa>
 8011158:	2308      	movs	r3, #8
 801115a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801115e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011162:	2b00      	cmp	r3, #0
 8011164:	d167      	bne.n	8011236 <f_open+0x1d2>
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	f003 0308 	and.w	r3, r3, #8
 801116c:	2b00      	cmp	r3, #0
 801116e:	d062      	beq.n	8011236 <f_open+0x1d2>
				dw = GET_FATTIME();
 8011170:	4ba2      	ldr	r3, [pc, #648]	; (80113fc <f_open+0x398>)
 8011172:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011176:	330e      	adds	r3, #14
 8011178:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801117a:	4618      	mov	r0, r3
 801117c:	f7fe f95c 	bl	800f438 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011182:	3316      	adds	r3, #22
 8011184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011186:	4618      	mov	r0, r3
 8011188:	f7fe f956 	bl	800f438 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118e:	330b      	adds	r3, #11
 8011190:	2220      	movs	r2, #32
 8011192:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011198:	4611      	mov	r1, r2
 801119a:	4618      	mov	r0, r3
 801119c:	f7ff f925 	bl	80103ea <ld_clust>
 80111a0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80111a6:	2200      	movs	r2, #0
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff f93d 	bl	8010428 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80111ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b0:	331c      	adds	r3, #28
 80111b2:	2100      	movs	r1, #0
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe f93f 	bl	800f438 <st_dword>
					fs->wflag = 1;
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	2201      	movs	r2, #1
 80111be:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80111c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d037      	beq.n	8011236 <f_open+0x1d2>
						dw = fs->winsect;
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ca:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80111cc:	f107 0314 	add.w	r3, r7, #20
 80111d0:	2200      	movs	r2, #0
 80111d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fe fe2d 	bl	800fe34 <remove_chain>
 80111da:	4603      	mov	r3, r0
 80111dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80111e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d126      	bne.n	8011236 <f_open+0x1d2>
							res = move_window(fs, dw);
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fe fb7d 	bl	800f8ec <move_window>
 80111f2:	4603      	mov	r3, r0
 80111f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111fc:	3a01      	subs	r2, #1
 80111fe:	611a      	str	r2, [r3, #16]
 8011200:	e019      	b.n	8011236 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011206:	2b00      	cmp	r3, #0
 8011208:	d115      	bne.n	8011236 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801120a:	7ebb      	ldrb	r3, [r7, #26]
 801120c:	f003 0310 	and.w	r3, r3, #16
 8011210:	2b00      	cmp	r3, #0
 8011212:	d003      	beq.n	801121c <f_open+0x1b8>
					res = FR_NO_FILE;
 8011214:	2304      	movs	r3, #4
 8011216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801121a:	e00c      	b.n	8011236 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801121c:	79fb      	ldrb	r3, [r7, #7]
 801121e:	f003 0302 	and.w	r3, r3, #2
 8011222:	2b00      	cmp	r3, #0
 8011224:	d007      	beq.n	8011236 <f_open+0x1d2>
 8011226:	7ebb      	ldrb	r3, [r7, #26]
 8011228:	f003 0301 	and.w	r3, r3, #1
 801122c:	2b00      	cmp	r3, #0
 801122e:	d002      	beq.n	8011236 <f_open+0x1d2>
						res = FR_DENIED;
 8011230:	2307      	movs	r3, #7
 8011232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801123a:	2b00      	cmp	r3, #0
 801123c:	d128      	bne.n	8011290 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	f003 0308 	and.w	r3, r3, #8
 8011244:	2b00      	cmp	r3, #0
 8011246:	d003      	beq.n	8011250 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011248:	79fb      	ldrb	r3, [r7, #7]
 801124a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801124e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801125e:	79fb      	ldrb	r3, [r7, #7]
 8011260:	f023 0301 	bic.w	r3, r3, #1
 8011264:	2b00      	cmp	r3, #0
 8011266:	bf14      	ite	ne
 8011268:	2301      	movne	r3, #1
 801126a:	2300      	moveq	r3, #0
 801126c:	b2db      	uxtb	r3, r3
 801126e:	461a      	mov	r2, r3
 8011270:	f107 0314 	add.w	r3, r7, #20
 8011274:	4611      	mov	r1, r2
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe fa06 	bl	800f688 <inc_lock>
 801127c:	4602      	mov	r2, r0
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d102      	bne.n	8011290 <f_open+0x22c>
 801128a:	2302      	movs	r3, #2
 801128c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011294:	2b00      	cmp	r3, #0
 8011296:	f040 80a3 	bne.w	80113e0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801129e:	4611      	mov	r1, r2
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff f8a2 	bl	80103ea <ld_clust>
 80112a6:	4602      	mov	r2, r0
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80112ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ae:	331c      	adds	r3, #28
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7fe f883 	bl	800f3bc <ld_dword>
 80112b6:	4602      	mov	r2, r0
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2200      	movs	r2, #0
 80112c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80112c2:	693a      	ldr	r2, [r7, #16]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	88da      	ldrh	r2, [r3, #6]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	79fa      	ldrb	r2, [r7, #7]
 80112d4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2200      	movs	r2, #0
 80112e0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	3330      	adds	r3, #48	; 0x30
 80112ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80112f0:	2100      	movs	r1, #0
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fe f8ed 	bl	800f4d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	f003 0320 	and.w	r3, r3, #32
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d06e      	beq.n	80113e0 <f_open+0x37c>
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d06a      	beq.n	80113e0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	68da      	ldr	r2, [r3, #12]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	895b      	ldrh	r3, [r3, #10]
 8011316:	461a      	mov	r2, r3
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	899b      	ldrh	r3, [r3, #12]
 801131c:	fb03 f302 	mul.w	r3, r3, r2
 8011320:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	657b      	str	r3, [r7, #84]	; 0x54
 801132e:	e016      	b.n	801135e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011334:	4618      	mov	r0, r3
 8011336:	f7fe fb96 	bl	800fa66 <get_fat>
 801133a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801133c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801133e:	2b01      	cmp	r3, #1
 8011340:	d802      	bhi.n	8011348 <f_open+0x2e4>
 8011342:	2302      	movs	r3, #2
 8011344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801134a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801134e:	d102      	bne.n	8011356 <f_open+0x2f2>
 8011350:	2301      	movs	r3, #1
 8011352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	657b      	str	r3, [r7, #84]	; 0x54
 801135e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011362:	2b00      	cmp	r3, #0
 8011364:	d103      	bne.n	801136e <f_open+0x30a>
 8011366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801136a:	429a      	cmp	r2, r3
 801136c:	d8e0      	bhi.n	8011330 <f_open+0x2cc>
				}
				fp->clust = clst;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011372:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011378:	2b00      	cmp	r3, #0
 801137a:	d131      	bne.n	80113e0 <f_open+0x37c>
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	899b      	ldrh	r3, [r3, #12]
 8011380:	461a      	mov	r2, r3
 8011382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011384:	fbb3 f1f2 	udiv	r1, r3, r2
 8011388:	fb02 f201 	mul.w	r2, r2, r1
 801138c:	1a9b      	subs	r3, r3, r2
 801138e:	2b00      	cmp	r3, #0
 8011390:	d026      	beq.n	80113e0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011396:	4618      	mov	r0, r3
 8011398:	f7fe fb46 	bl	800fa28 <clust2sect>
 801139c:	6478      	str	r0, [r7, #68]	; 0x44
 801139e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d103      	bne.n	80113ac <f_open+0x348>
						res = FR_INT_ERR;
 80113a4:	2302      	movs	r3, #2
 80113a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80113aa:	e019      	b.n	80113e0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	899b      	ldrh	r3, [r3, #12]
 80113b0:	461a      	mov	r2, r3
 80113b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80113b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113ba:	441a      	add	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	7858      	ldrb	r0, [r3, #1]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6a1a      	ldr	r2, [r3, #32]
 80113ce:	2301      	movs	r3, #1
 80113d0:	f7fd ff7e 	bl	800f2d0 <disk_read>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d002      	beq.n	80113e0 <f_open+0x37c>
 80113da:	2301      	movs	r3, #1
 80113dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80113e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <f_open+0x38a>
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80113ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3760      	adds	r7, #96	; 0x60
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	274a0000 	.word	0x274a0000

08011400 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b08e      	sub	sp, #56	; 0x38
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	607a      	str	r2, [r7, #4]
 801140c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2200      	movs	r2, #0
 8011416:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f107 0214 	add.w	r2, r7, #20
 801141e:	4611      	mov	r1, r2
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff fda3 	bl	8010f6c <validate>
 8011426:	4603      	mov	r3, r0
 8011428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801142c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011430:	2b00      	cmp	r3, #0
 8011432:	d107      	bne.n	8011444 <f_read+0x44>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	7d5b      	ldrb	r3, [r3, #21]
 8011438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801143c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011440:	2b00      	cmp	r3, #0
 8011442:	d002      	beq.n	801144a <f_read+0x4a>
 8011444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011448:	e135      	b.n	80116b6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	7d1b      	ldrb	r3, [r3, #20]
 801144e:	f003 0301 	and.w	r3, r3, #1
 8011452:	2b00      	cmp	r3, #0
 8011454:	d101      	bne.n	801145a <f_read+0x5a>
 8011456:	2307      	movs	r3, #7
 8011458:	e12d      	b.n	80116b6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	68da      	ldr	r2, [r3, #12]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	699b      	ldr	r3, [r3, #24]
 8011462:	1ad3      	subs	r3, r2, r3
 8011464:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	429a      	cmp	r2, r3
 801146c:	f240 811e 	bls.w	80116ac <f_read+0x2ac>
 8011470:	6a3b      	ldr	r3, [r7, #32]
 8011472:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011474:	e11a      	b.n	80116ac <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	699b      	ldr	r3, [r3, #24]
 801147a:	697a      	ldr	r2, [r7, #20]
 801147c:	8992      	ldrh	r2, [r2, #12]
 801147e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011482:	fb02 f201 	mul.w	r2, r2, r1
 8011486:	1a9b      	subs	r3, r3, r2
 8011488:	2b00      	cmp	r3, #0
 801148a:	f040 80d5 	bne.w	8011638 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	699b      	ldr	r3, [r3, #24]
 8011492:	697a      	ldr	r2, [r7, #20]
 8011494:	8992      	ldrh	r2, [r2, #12]
 8011496:	fbb3 f3f2 	udiv	r3, r3, r2
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	8952      	ldrh	r2, [r2, #10]
 801149e:	3a01      	subs	r2, #1
 80114a0:	4013      	ands	r3, r2
 80114a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d12f      	bne.n	801150a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	699b      	ldr	r3, [r3, #24]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d103      	bne.n	80114ba <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	689b      	ldr	r3, [r3, #8]
 80114b6:	633b      	str	r3, [r7, #48]	; 0x30
 80114b8:	e013      	b.n	80114e2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d007      	beq.n	80114d2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	699b      	ldr	r3, [r3, #24]
 80114c6:	4619      	mov	r1, r3
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	f7fe fdb0 	bl	801002e <clmt_clust>
 80114ce:	6338      	str	r0, [r7, #48]	; 0x30
 80114d0:	e007      	b.n	80114e2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80114d2:	68fa      	ldr	r2, [r7, #12]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	69db      	ldr	r3, [r3, #28]
 80114d8:	4619      	mov	r1, r3
 80114da:	4610      	mov	r0, r2
 80114dc:	f7fe fac3 	bl	800fa66 <get_fat>
 80114e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80114e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d804      	bhi.n	80114f2 <f_read+0xf2>
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2202      	movs	r2, #2
 80114ec:	755a      	strb	r2, [r3, #21]
 80114ee:	2302      	movs	r3, #2
 80114f0:	e0e1      	b.n	80116b6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80114f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f8:	d104      	bne.n	8011504 <f_read+0x104>
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2201      	movs	r2, #1
 80114fe:	755a      	strb	r2, [r3, #21]
 8011500:	2301      	movs	r3, #1
 8011502:	e0d8      	b.n	80116b6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011508:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801150a:	697a      	ldr	r2, [r7, #20]
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	69db      	ldr	r3, [r3, #28]
 8011510:	4619      	mov	r1, r3
 8011512:	4610      	mov	r0, r2
 8011514:	f7fe fa88 	bl	800fa28 <clust2sect>
 8011518:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d104      	bne.n	801152a <f_read+0x12a>
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2202      	movs	r2, #2
 8011524:	755a      	strb	r2, [r3, #21]
 8011526:	2302      	movs	r3, #2
 8011528:	e0c5      	b.n	80116b6 <f_read+0x2b6>
			sect += csect;
 801152a:	69ba      	ldr	r2, [r7, #24]
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	4413      	add	r3, r2
 8011530:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	899b      	ldrh	r3, [r3, #12]
 8011536:	461a      	mov	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	fbb3 f3f2 	udiv	r3, r3, r2
 801153e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	2b00      	cmp	r3, #0
 8011544:	d041      	beq.n	80115ca <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011546:	69fa      	ldr	r2, [r7, #28]
 8011548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154a:	4413      	add	r3, r2
 801154c:	697a      	ldr	r2, [r7, #20]
 801154e:	8952      	ldrh	r2, [r2, #10]
 8011550:	4293      	cmp	r3, r2
 8011552:	d905      	bls.n	8011560 <f_read+0x160>
					cc = fs->csize - csect;
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	895b      	ldrh	r3, [r3, #10]
 8011558:	461a      	mov	r2, r3
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	7858      	ldrb	r0, [r3, #1]
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	69ba      	ldr	r2, [r7, #24]
 8011568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801156a:	f7fd feb1 	bl	800f2d0 <disk_read>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d004      	beq.n	801157e <f_read+0x17e>
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2201      	movs	r2, #1
 8011578:	755a      	strb	r2, [r3, #21]
 801157a:	2301      	movs	r3, #1
 801157c:	e09b      	b.n	80116b6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	7d1b      	ldrb	r3, [r3, #20]
 8011582:	b25b      	sxtb	r3, r3
 8011584:	2b00      	cmp	r3, #0
 8011586:	da18      	bge.n	80115ba <f_read+0x1ba>
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6a1a      	ldr	r2, [r3, #32]
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011592:	429a      	cmp	r2, r3
 8011594:	d911      	bls.n	80115ba <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	6a1a      	ldr	r2, [r3, #32]
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	8992      	ldrh	r2, [r2, #12]
 80115a2:	fb02 f303 	mul.w	r3, r2, r3
 80115a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115a8:	18d0      	adds	r0, r2, r3
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	899b      	ldrh	r3, [r3, #12]
 80115b4:	461a      	mov	r2, r3
 80115b6:	f7fd ff6b 	bl	800f490 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	461a      	mov	r2, r3
 80115c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c2:	fb02 f303 	mul.w	r3, r2, r3
 80115c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80115c8:	e05c      	b.n	8011684 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	6a1b      	ldr	r3, [r3, #32]
 80115ce:	69ba      	ldr	r2, [r7, #24]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d02e      	beq.n	8011632 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	7d1b      	ldrb	r3, [r3, #20]
 80115d8:	b25b      	sxtb	r3, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	da18      	bge.n	8011610 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	7858      	ldrb	r0, [r3, #1]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	6a1a      	ldr	r2, [r3, #32]
 80115ec:	2301      	movs	r3, #1
 80115ee:	f7fd fe8f 	bl	800f310 <disk_write>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d004      	beq.n	8011602 <f_read+0x202>
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2201      	movs	r2, #1
 80115fc:	755a      	strb	r2, [r3, #21]
 80115fe:	2301      	movs	r3, #1
 8011600:	e059      	b.n	80116b6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	7d1b      	ldrb	r3, [r3, #20]
 8011606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801160a:	b2da      	uxtb	r2, r3
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	7858      	ldrb	r0, [r3, #1]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801161a:	2301      	movs	r3, #1
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	f7fd fe57 	bl	800f2d0 <disk_read>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d004      	beq.n	8011632 <f_read+0x232>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2201      	movs	r2, #1
 801162c:	755a      	strb	r2, [r3, #21]
 801162e:	2301      	movs	r3, #1
 8011630:	e041      	b.n	80116b6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	69ba      	ldr	r2, [r7, #24]
 8011636:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	899b      	ldrh	r3, [r3, #12]
 801163c:	4618      	mov	r0, r3
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	699b      	ldr	r3, [r3, #24]
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	8992      	ldrh	r2, [r2, #12]
 8011646:	fbb3 f1f2 	udiv	r1, r3, r2
 801164a:	fb02 f201 	mul.w	r2, r2, r1
 801164e:	1a9b      	subs	r3, r3, r2
 8011650:	1ac3      	subs	r3, r0, r3
 8011652:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	429a      	cmp	r2, r3
 801165a:	d901      	bls.n	8011660 <f_read+0x260>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	697a      	ldr	r2, [r7, #20]
 801166c:	8992      	ldrh	r2, [r2, #12]
 801166e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011672:	fb02 f200 	mul.w	r2, r2, r0
 8011676:	1a9b      	subs	r3, r3, r2
 8011678:	440b      	add	r3, r1
 801167a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801167c:	4619      	mov	r1, r3
 801167e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011680:	f7fd ff06 	bl	800f490 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011688:	4413      	add	r3, r2
 801168a:	627b      	str	r3, [r7, #36]	; 0x24
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	699a      	ldr	r2, [r3, #24]
 8011690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011692:	441a      	add	r2, r3
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	619a      	str	r2, [r3, #24]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169e:	441a      	add	r2, r3
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	601a      	str	r2, [r3, #0]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	f47f aee1 	bne.w	8011476 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80116b4:	2300      	movs	r3, #0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3738      	adds	r7, #56	; 0x38
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b08c      	sub	sp, #48	; 0x30
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	60f8      	str	r0, [r7, #12]
 80116c6:	60b9      	str	r1, [r7, #8]
 80116c8:	607a      	str	r2, [r7, #4]
 80116ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	2200      	movs	r2, #0
 80116d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f107 0210 	add.w	r2, r7, #16
 80116dc:	4611      	mov	r1, r2
 80116de:	4618      	mov	r0, r3
 80116e0:	f7ff fc44 	bl	8010f6c <validate>
 80116e4:	4603      	mov	r3, r0
 80116e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80116ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d107      	bne.n	8011702 <f_write+0x44>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	7d5b      	ldrb	r3, [r3, #21]
 80116f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80116fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d002      	beq.n	8011708 <f_write+0x4a>
 8011702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011706:	e16a      	b.n	80119de <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	7d1b      	ldrb	r3, [r3, #20]
 801170c:	f003 0302 	and.w	r3, r3, #2
 8011710:	2b00      	cmp	r3, #0
 8011712:	d101      	bne.n	8011718 <f_write+0x5a>
 8011714:	2307      	movs	r3, #7
 8011716:	e162      	b.n	80119de <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	699a      	ldr	r2, [r3, #24]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	441a      	add	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	699b      	ldr	r3, [r3, #24]
 8011724:	429a      	cmp	r2, r3
 8011726:	f080 814c 	bcs.w	80119c2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	699b      	ldr	r3, [r3, #24]
 801172e:	43db      	mvns	r3, r3
 8011730:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011732:	e146      	b.n	80119c2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	693a      	ldr	r2, [r7, #16]
 801173a:	8992      	ldrh	r2, [r2, #12]
 801173c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011740:	fb02 f201 	mul.w	r2, r2, r1
 8011744:	1a9b      	subs	r3, r3, r2
 8011746:	2b00      	cmp	r3, #0
 8011748:	f040 80f1 	bne.w	801192e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	699b      	ldr	r3, [r3, #24]
 8011750:	693a      	ldr	r2, [r7, #16]
 8011752:	8992      	ldrh	r2, [r2, #12]
 8011754:	fbb3 f3f2 	udiv	r3, r3, r2
 8011758:	693a      	ldr	r2, [r7, #16]
 801175a:	8952      	ldrh	r2, [r2, #10]
 801175c:	3a01      	subs	r2, #1
 801175e:	4013      	ands	r3, r2
 8011760:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011762:	69bb      	ldr	r3, [r7, #24]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d143      	bne.n	80117f0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	699b      	ldr	r3, [r3, #24]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d10c      	bne.n	801178a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	689b      	ldr	r3, [r3, #8]
 8011774:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011778:	2b00      	cmp	r3, #0
 801177a:	d11a      	bne.n	80117b2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2100      	movs	r1, #0
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fbbc 	bl	800fefe <create_chain>
 8011786:	62b8      	str	r0, [r7, #40]	; 0x28
 8011788:	e013      	b.n	80117b2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178e:	2b00      	cmp	r3, #0
 8011790:	d007      	beq.n	80117a2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	4619      	mov	r1, r3
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7fe fc48 	bl	801002e <clmt_clust>
 801179e:	62b8      	str	r0, [r7, #40]	; 0x28
 80117a0:	e007      	b.n	80117b2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	69db      	ldr	r3, [r3, #28]
 80117a8:	4619      	mov	r1, r3
 80117aa:	4610      	mov	r0, r2
 80117ac:	f7fe fba7 	bl	800fefe <create_chain>
 80117b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80117b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f000 8109 	beq.w	80119cc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80117ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d104      	bne.n	80117ca <f_write+0x10c>
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2202      	movs	r2, #2
 80117c4:	755a      	strb	r2, [r3, #21]
 80117c6:	2302      	movs	r3, #2
 80117c8:	e109      	b.n	80119de <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80117ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117d0:	d104      	bne.n	80117dc <f_write+0x11e>
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2201      	movs	r2, #1
 80117d6:	755a      	strb	r2, [r3, #21]
 80117d8:	2301      	movs	r3, #1
 80117da:	e100      	b.n	80119de <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d102      	bne.n	80117f0 <f_write+0x132>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	7d1b      	ldrb	r3, [r3, #20]
 80117f4:	b25b      	sxtb	r3, r3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	da18      	bge.n	801182c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	7858      	ldrb	r0, [r3, #1]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6a1a      	ldr	r2, [r3, #32]
 8011808:	2301      	movs	r3, #1
 801180a:	f7fd fd81 	bl	800f310 <disk_write>
 801180e:	4603      	mov	r3, r0
 8011810:	2b00      	cmp	r3, #0
 8011812:	d004      	beq.n	801181e <f_write+0x160>
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2201      	movs	r2, #1
 8011818:	755a      	strb	r2, [r3, #21]
 801181a:	2301      	movs	r3, #1
 801181c:	e0df      	b.n	80119de <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	7d1b      	ldrb	r3, [r3, #20]
 8011822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011826:	b2da      	uxtb	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801182c:	693a      	ldr	r2, [r7, #16]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	69db      	ldr	r3, [r3, #28]
 8011832:	4619      	mov	r1, r3
 8011834:	4610      	mov	r0, r2
 8011836:	f7fe f8f7 	bl	800fa28 <clust2sect>
 801183a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d104      	bne.n	801184c <f_write+0x18e>
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2202      	movs	r2, #2
 8011846:	755a      	strb	r2, [r3, #21]
 8011848:	2302      	movs	r3, #2
 801184a:	e0c8      	b.n	80119de <f_write+0x320>
			sect += csect;
 801184c:	697a      	ldr	r2, [r7, #20]
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	4413      	add	r3, r2
 8011852:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	899b      	ldrh	r3, [r3, #12]
 8011858:	461a      	mov	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011860:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011862:	6a3b      	ldr	r3, [r7, #32]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d043      	beq.n	80118f0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011868:	69ba      	ldr	r2, [r7, #24]
 801186a:	6a3b      	ldr	r3, [r7, #32]
 801186c:	4413      	add	r3, r2
 801186e:	693a      	ldr	r2, [r7, #16]
 8011870:	8952      	ldrh	r2, [r2, #10]
 8011872:	4293      	cmp	r3, r2
 8011874:	d905      	bls.n	8011882 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	895b      	ldrh	r3, [r3, #10]
 801187a:	461a      	mov	r2, r3
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	7858      	ldrb	r0, [r3, #1]
 8011886:	6a3b      	ldr	r3, [r7, #32]
 8011888:	697a      	ldr	r2, [r7, #20]
 801188a:	69f9      	ldr	r1, [r7, #28]
 801188c:	f7fd fd40 	bl	800f310 <disk_write>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	d004      	beq.n	80118a0 <f_write+0x1e2>
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2201      	movs	r2, #1
 801189a:	755a      	strb	r2, [r3, #21]
 801189c:	2301      	movs	r3, #1
 801189e:	e09e      	b.n	80119de <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	6a1a      	ldr	r2, [r3, #32]
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	1ad3      	subs	r3, r2, r3
 80118a8:	6a3a      	ldr	r2, [r7, #32]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d918      	bls.n	80118e0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	6a1a      	ldr	r2, [r3, #32]
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	693a      	ldr	r2, [r7, #16]
 80118be:	8992      	ldrh	r2, [r2, #12]
 80118c0:	fb02 f303 	mul.w	r3, r2, r3
 80118c4:	69fa      	ldr	r2, [r7, #28]
 80118c6:	18d1      	adds	r1, r2, r3
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	899b      	ldrh	r3, [r3, #12]
 80118cc:	461a      	mov	r2, r3
 80118ce:	f7fd fddf 	bl	800f490 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	7d1b      	ldrb	r3, [r3, #20]
 80118d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	899b      	ldrh	r3, [r3, #12]
 80118e4:	461a      	mov	r2, r3
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	fb02 f303 	mul.w	r3, r2, r3
 80118ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80118ee:	e04b      	b.n	8011988 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6a1b      	ldr	r3, [r3, #32]
 80118f4:	697a      	ldr	r2, [r7, #20]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d016      	beq.n	8011928 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	699a      	ldr	r2, [r3, #24]
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011902:	429a      	cmp	r2, r3
 8011904:	d210      	bcs.n	8011928 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	7858      	ldrb	r0, [r3, #1]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011910:	2301      	movs	r3, #1
 8011912:	697a      	ldr	r2, [r7, #20]
 8011914:	f7fd fcdc 	bl	800f2d0 <disk_read>
 8011918:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801191a:	2b00      	cmp	r3, #0
 801191c:	d004      	beq.n	8011928 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2201      	movs	r2, #1
 8011922:	755a      	strb	r2, [r3, #21]
 8011924:	2301      	movs	r3, #1
 8011926:	e05a      	b.n	80119de <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	697a      	ldr	r2, [r7, #20]
 801192c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	899b      	ldrh	r3, [r3, #12]
 8011932:	4618      	mov	r0, r3
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	693a      	ldr	r2, [r7, #16]
 801193a:	8992      	ldrh	r2, [r2, #12]
 801193c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011940:	fb02 f201 	mul.w	r2, r2, r1
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	1ac3      	subs	r3, r0, r3
 8011948:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	429a      	cmp	r2, r3
 8011950:	d901      	bls.n	8011956 <f_write+0x298>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	699b      	ldr	r3, [r3, #24]
 8011960:	693a      	ldr	r2, [r7, #16]
 8011962:	8992      	ldrh	r2, [r2, #12]
 8011964:	fbb3 f0f2 	udiv	r0, r3, r2
 8011968:	fb02 f200 	mul.w	r2, r2, r0
 801196c:	1a9b      	subs	r3, r3, r2
 801196e:	440b      	add	r3, r1
 8011970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011972:	69f9      	ldr	r1, [r7, #28]
 8011974:	4618      	mov	r0, r3
 8011976:	f7fd fd8b 	bl	800f490 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	7d1b      	ldrb	r3, [r3, #20]
 801197e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011982:	b2da      	uxtb	r2, r3
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011988:	69fa      	ldr	r2, [r7, #28]
 801198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198c:	4413      	add	r3, r2
 801198e:	61fb      	str	r3, [r7, #28]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	699a      	ldr	r2, [r3, #24]
 8011994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011996:	441a      	add	r2, r3
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	619a      	str	r2, [r3, #24]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	68da      	ldr	r2, [r3, #12]
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	699b      	ldr	r3, [r3, #24]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	bf38      	it	cc
 80119a8:	461a      	movcc	r2, r3
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	60da      	str	r2, [r3, #12]
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	681a      	ldr	r2, [r3, #0]
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	441a      	add	r2, r3
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f47f aeb5 	bne.w	8011734 <f_write+0x76>
 80119ca:	e000      	b.n	80119ce <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80119cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	7d1b      	ldrb	r3, [r3, #20]
 80119d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d6:	b2da      	uxtb	r2, r3
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3730      	adds	r7, #48	; 0x30
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
	...

080119e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f107 0208 	add.w	r2, r7, #8
 80119f6:	4611      	mov	r1, r2
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7ff fab7 	bl	8010f6c <validate>
 80119fe:	4603      	mov	r3, r0
 8011a00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011a02:	7dfb      	ldrb	r3, [r7, #23]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d167      	bne.n	8011ad8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
 8011a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d061      	beq.n	8011ad8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	7d1b      	ldrb	r3, [r3, #20]
 8011a18:	b25b      	sxtb	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	da15      	bge.n	8011a4a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	7858      	ldrb	r0, [r3, #1]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a1a      	ldr	r2, [r3, #32]
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	f7fd fc6f 	bl	800f310 <disk_write>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <f_sync+0x54>
 8011a38:	2301      	movs	r3, #1
 8011a3a:	e04e      	b.n	8011ada <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
 8011a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011a4a:	4b26      	ldr	r3, [pc, #152]	; (8011ae4 <f_sync+0xfc>)
 8011a4c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011a4e:	68ba      	ldr	r2, [r7, #8]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a54:	4619      	mov	r1, r3
 8011a56:	4610      	mov	r0, r2
 8011a58:	f7fd ff48 	bl	800f8ec <move_window>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011a60:	7dfb      	ldrb	r3, [r7, #23]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d138      	bne.n	8011ad8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a6a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	330b      	adds	r3, #11
 8011a70:	781a      	ldrb	r2, [r3, #0]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	330b      	adds	r3, #11
 8011a76:	f042 0220 	orr.w	r2, r2, #32
 8011a7a:	b2d2      	uxtb	r2, r2
 8011a7c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6818      	ldr	r0, [r3, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	461a      	mov	r2, r3
 8011a88:	68f9      	ldr	r1, [r7, #12]
 8011a8a:	f7fe fccd 	bl	8010428 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f103 021c 	add.w	r2, r3, #28
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	f7fd fccc 	bl	800f438 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	3316      	adds	r3, #22
 8011aa4:	6939      	ldr	r1, [r7, #16]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fd fcc6 	bl	800f438 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	3312      	adds	r3, #18
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fd fca5 	bl	800f402 <st_word>
					fs->wflag = 1;
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2201      	movs	r2, #1
 8011abc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fd ff41 	bl	800f948 <sync_fs>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	7d1b      	ldrb	r3, [r3, #20]
 8011ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3718      	adds	r7, #24
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	274a0000 	.word	0x274a0000

08011ae8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7ff ff79 	bl	80119e8 <f_sync>
 8011af6:	4603      	mov	r3, r0
 8011af8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011afa:	7bfb      	ldrb	r3, [r7, #15]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d118      	bne.n	8011b32 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f107 0208 	add.w	r2, r7, #8
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff fa2f 	bl	8010f6c <validate>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011b12:	7bfb      	ldrb	r3, [r7, #15]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10c      	bne.n	8011b32 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	691b      	ldr	r3, [r3, #16]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fd fe41 	bl	800f7a4 <dec_lock>
 8011b22:	4603      	mov	r3, r0
 8011b24:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d102      	bne.n	8011b32 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3710      	adds	r7, #16
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011b3c:	b590      	push	{r4, r7, lr}
 8011b3e:	b091      	sub	sp, #68	; 0x44
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011b44:	f107 0108 	add.w	r1, r7, #8
 8011b48:	1d3b      	adds	r3, r7, #4
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fe ff87 	bl	8010a60 <find_volume>
 8011b52:	4603      	mov	r3, r0
 8011b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011b58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d131      	bne.n	8011bc4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	f107 030c 	add.w	r3, r7, #12
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fe fe47 	bl	8010800 <follow_path>
 8011b72:	4603      	mov	r3, r0
 8011b74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011b78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d11a      	bne.n	8011bb6 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011b80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011b84:	b25b      	sxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	da03      	bge.n	8011b92 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	697a      	ldr	r2, [r7, #20]
 8011b8e:	619a      	str	r2, [r3, #24]
 8011b90:	e011      	b.n	8011bb6 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011b92:	7cbb      	ldrb	r3, [r7, #18]
 8011b94:	f003 0310 	and.w	r3, r3, #16
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d009      	beq.n	8011bb0 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ba0:	68bc      	ldr	r4, [r7, #8]
 8011ba2:	4611      	mov	r1, r2
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7fe fc20 	bl	80103ea <ld_clust>
 8011baa:	4603      	mov	r3, r0
 8011bac:	61a3      	str	r3, [r4, #24]
 8011bae:	e002      	b.n	8011bb6 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011bb0:	2305      	movs	r3, #5
 8011bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011bb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011bba:	2b04      	cmp	r3, #4
 8011bbc:	d102      	bne.n	8011bc4 <f_chdir+0x88>
 8011bbe:	2305      	movs	r3, #5
 8011bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011bc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3744      	adds	r7, #68	; 0x44
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd90      	pop	{r4, r7, pc}

08011bd0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b090      	sub	sp, #64	; 0x40
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f107 0208 	add.w	r2, r7, #8
 8011be0:	4611      	mov	r1, r2
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff f9c2 	bl	8010f6c <validate>
 8011be8:	4603      	mov	r3, r0
 8011bea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011bee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d103      	bne.n	8011bfe <f_lseek+0x2e>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	7d5b      	ldrb	r3, [r3, #21]
 8011bfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011bfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <f_lseek+0x3c>
 8011c06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011c0a:	e201      	b.n	8012010 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f000 80d9 	beq.w	8011dc8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c1c:	d15a      	bne.n	8011cd4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c22:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	1d1a      	adds	r2, r3, #4
 8011c28:	627a      	str	r2, [r7, #36]	; 0x24
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	617b      	str	r3, [r7, #20]
 8011c2e:	2302      	movs	r3, #2
 8011c30:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	689b      	ldr	r3, [r3, #8]
 8011c36:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d03a      	beq.n	8011cb4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c40:	613b      	str	r3, [r7, #16]
 8011c42:	2300      	movs	r3, #0
 8011c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c48:	3302      	adds	r3, #2
 8011c4a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4e:	60fb      	str	r3, [r7, #12]
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	3301      	adds	r3, #1
 8011c54:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fd ff03 	bl	800fa66 <get_fat>
 8011c60:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d804      	bhi.n	8011c72 <f_lseek+0xa2>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2202      	movs	r2, #2
 8011c6c:	755a      	strb	r2, [r3, #21]
 8011c6e:	2302      	movs	r3, #2
 8011c70:	e1ce      	b.n	8012010 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c78:	d104      	bne.n	8011c84 <f_lseek+0xb4>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	755a      	strb	r2, [r3, #21]
 8011c80:	2301      	movs	r3, #1
 8011c82:	e1c5      	b.n	8012010 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	3301      	adds	r3, #1
 8011c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d0de      	beq.n	8011c4c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d809      	bhi.n	8011caa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c98:	1d1a      	adds	r2, r3, #4
 8011c9a:	627a      	str	r2, [r7, #36]	; 0x24
 8011c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	1d1a      	adds	r2, r3, #4
 8011ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8011ca6:	693a      	ldr	r2, [r7, #16]
 8011ca8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	69db      	ldr	r3, [r3, #28]
 8011cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d3c4      	bcc.n	8011c3e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d803      	bhi.n	8011ccc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	e19f      	b.n	801200c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011ccc:	2311      	movs	r3, #17
 8011cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011cd2:	e19b      	b.n	801200c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d902      	bls.n	8011ce4 <f_lseek+0x114>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f000 818d 	beq.w	801200c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7fe f998 	bl	801002e <clmt_clust>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	69db      	ldr	r3, [r3, #28]
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	4610      	mov	r0, r2
 8011d0e:	f7fd fe8b 	bl	800fa28 <clust2sect>
 8011d12:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d104      	bne.n	8011d24 <f_lseek+0x154>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2202      	movs	r2, #2
 8011d1e:	755a      	strb	r2, [r3, #21]
 8011d20:	2302      	movs	r3, #2
 8011d22:	e175      	b.n	8012010 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	3b01      	subs	r3, #1
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	8992      	ldrh	r2, [r2, #12]
 8011d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d30:	68ba      	ldr	r2, [r7, #8]
 8011d32:	8952      	ldrh	r2, [r2, #10]
 8011d34:	3a01      	subs	r2, #1
 8011d36:	4013      	ands	r3, r2
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	699b      	ldr	r3, [r3, #24]
 8011d42:	68ba      	ldr	r2, [r7, #8]
 8011d44:	8992      	ldrh	r2, [r2, #12]
 8011d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d4a:	fb02 f201 	mul.w	r2, r2, r1
 8011d4e:	1a9b      	subs	r3, r3, r2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f000 815b 	beq.w	801200c <f_lseek+0x43c>
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a1b      	ldr	r3, [r3, #32]
 8011d5a:	69ba      	ldr	r2, [r7, #24]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	f000 8155 	beq.w	801200c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	7d1b      	ldrb	r3, [r3, #20]
 8011d66:	b25b      	sxtb	r3, r3
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	da18      	bge.n	8011d9e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	7858      	ldrb	r0, [r3, #1]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6a1a      	ldr	r2, [r3, #32]
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	f7fd fac8 	bl	800f310 <disk_write>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d004      	beq.n	8011d90 <f_lseek+0x1c0>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2201      	movs	r2, #1
 8011d8a:	755a      	strb	r2, [r3, #21]
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e13f      	b.n	8012010 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	7d1b      	ldrb	r3, [r3, #20]
 8011d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	7858      	ldrb	r0, [r3, #1]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011da8:	2301      	movs	r3, #1
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	f7fd fa90 	bl	800f2d0 <disk_read>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d004      	beq.n	8011dc0 <f_lseek+0x1f0>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2201      	movs	r2, #1
 8011dba:	755a      	strb	r2, [r3, #21]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e127      	b.n	8012010 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	69ba      	ldr	r2, [r7, #24]
 8011dc4:	621a      	str	r2, [r3, #32]
 8011dc6:	e121      	b.n	801200c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d908      	bls.n	8011de4 <f_lseek+0x214>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	7d1b      	ldrb	r3, [r3, #20]
 8011dd6:	f003 0302 	and.w	r3, r3, #2
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d102      	bne.n	8011de4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	699b      	ldr	r3, [r3, #24]
 8011de8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011dea:	2300      	movs	r3, #0
 8011dec:	637b      	str	r3, [r7, #52]	; 0x34
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011df2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f000 80b5 	beq.w	8011f66 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	895b      	ldrh	r3, [r3, #10]
 8011e00:	461a      	mov	r2, r3
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	899b      	ldrh	r3, [r3, #12]
 8011e06:	fb03 f302 	mul.w	r3, r3, r2
 8011e0a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011e0c:	6a3b      	ldr	r3, [r7, #32]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d01b      	beq.n	8011e4a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	1e5a      	subs	r2, r3, #1
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8011e1c:	6a3b      	ldr	r3, [r7, #32]
 8011e1e:	1e59      	subs	r1, r3, #1
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d30f      	bcc.n	8011e4a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011e2a:	6a3b      	ldr	r3, [r7, #32]
 8011e2c:	1e5a      	subs	r2, r3, #1
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	425b      	negs	r3, r3
 8011e32:	401a      	ands	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	699b      	ldr	r3, [r3, #24]
 8011e3c:	683a      	ldr	r2, [r7, #0]
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	69db      	ldr	r3, [r3, #28]
 8011e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e48:	e022      	b.n	8011e90 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d119      	bne.n	8011e8a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2100      	movs	r1, #0
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fe f84f 	bl	800fefe <create_chain>
 8011e60:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d104      	bne.n	8011e72 <f_lseek+0x2a2>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2202      	movs	r2, #2
 8011e6c:	755a      	strb	r2, [r3, #21]
 8011e6e:	2302      	movs	r3, #2
 8011e70:	e0ce      	b.n	8012010 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e78:	d104      	bne.n	8011e84 <f_lseek+0x2b4>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	755a      	strb	r2, [r3, #21]
 8011e80:	2301      	movs	r3, #1
 8011e82:	e0c5      	b.n	8012010 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e88:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e8e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d067      	beq.n	8011f66 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011e96:	e03a      	b.n	8011f0e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011e98:	683a      	ldr	r2, [r7, #0]
 8011e9a:	69fb      	ldr	r3, [r7, #28]
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	603b      	str	r3, [r7, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	699a      	ldr	r2, [r3, #24]
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	441a      	add	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	7d1b      	ldrb	r3, [r3, #20]
 8011eb0:	f003 0302 	and.w	r3, r3, #2
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00b      	beq.n	8011ed0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fe f81e 	bl	800fefe <create_chain>
 8011ec2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d108      	bne.n	8011edc <f_lseek+0x30c>
							ofs = 0; break;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	603b      	str	r3, [r7, #0]
 8011ece:	e022      	b.n	8011f16 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fd fdc6 	bl	800fa66 <get_fat>
 8011eda:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee2:	d104      	bne.n	8011eee <f_lseek+0x31e>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	755a      	strb	r2, [r3, #21]
 8011eea:	2301      	movs	r3, #1
 8011eec:	e090      	b.n	8012010 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d904      	bls.n	8011efe <f_lseek+0x32e>
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	69db      	ldr	r3, [r3, #28]
 8011ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d304      	bcc.n	8011f08 <f_lseek+0x338>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2202      	movs	r2, #2
 8011f02:	755a      	strb	r2, [r3, #21]
 8011f04:	2302      	movs	r3, #2
 8011f06:	e083      	b.n	8012010 <f_lseek+0x440>
					fp->clust = clst;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f0c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011f0e:	683a      	ldr	r2, [r7, #0]
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d8c0      	bhi.n	8011e98 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	699a      	ldr	r2, [r3, #24]
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	441a      	add	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	899b      	ldrh	r3, [r3, #12]
 8011f26:	461a      	mov	r2, r3
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f2e:	fb02 f201 	mul.w	r2, r2, r1
 8011f32:	1a9b      	subs	r3, r3, r2
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d016      	beq.n	8011f66 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fd fd73 	bl	800fa28 <clust2sect>
 8011f42:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d104      	bne.n	8011f54 <f_lseek+0x384>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2202      	movs	r2, #2
 8011f4e:	755a      	strb	r2, [r3, #21]
 8011f50:	2302      	movs	r3, #2
 8011f52:	e05d      	b.n	8012010 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	899b      	ldrh	r3, [r3, #12]
 8011f58:	461a      	mov	r2, r3
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f62:	4413      	add	r3, r2
 8011f64:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	699a      	ldr	r2, [r3, #24]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d90a      	bls.n	8011f88 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	699a      	ldr	r2, [r3, #24]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	7d1b      	ldrb	r3, [r3, #20]
 8011f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f82:	b2da      	uxtb	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	699b      	ldr	r3, [r3, #24]
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	8992      	ldrh	r2, [r2, #12]
 8011f90:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f94:	fb02 f201 	mul.w	r2, r2, r1
 8011f98:	1a9b      	subs	r3, r3, r2
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d036      	beq.n	801200c <f_lseek+0x43c>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6a1b      	ldr	r3, [r3, #32]
 8011fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d031      	beq.n	801200c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	7d1b      	ldrb	r3, [r3, #20]
 8011fac:	b25b      	sxtb	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	da18      	bge.n	8011fe4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	7858      	ldrb	r0, [r3, #1]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6a1a      	ldr	r2, [r3, #32]
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	f7fd f9a5 	bl	800f310 <disk_write>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d004      	beq.n	8011fd6 <f_lseek+0x406>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	755a      	strb	r2, [r3, #21]
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e01c      	b.n	8012010 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	7d1b      	ldrb	r3, [r3, #20]
 8011fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	7858      	ldrb	r0, [r3, #1]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011fee:	2301      	movs	r3, #1
 8011ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ff2:	f7fd f96d 	bl	800f2d0 <disk_read>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d004      	beq.n	8012006 <f_lseek+0x436>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2201      	movs	r2, #1
 8012000:	755a      	strb	r2, [r3, #21]
 8012002:	2301      	movs	r3, #1
 8012004:	e004      	b.n	8012010 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801200a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801200c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012010:	4618      	mov	r0, r3
 8012012:	3740      	adds	r7, #64	; 0x40
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b09e      	sub	sp, #120	; 0x78
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8012020:	2300      	movs	r3, #0
 8012022:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012024:	f107 010c 	add.w	r1, r7, #12
 8012028:	1d3b      	adds	r3, r7, #4
 801202a:	2202      	movs	r2, #2
 801202c:	4618      	mov	r0, r3
 801202e:	f7fe fd17 	bl	8010a60 <find_volume>
 8012032:	4603      	mov	r3, r0
 8012034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801203c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012040:	2b00      	cmp	r3, #0
 8012042:	f040 80a4 	bne.w	801218e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801204c:	4611      	mov	r1, r2
 801204e:	4618      	mov	r0, r3
 8012050:	f7fe fbd6 	bl	8010800 <follow_path>
 8012054:	4603      	mov	r3, r0
 8012056:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801205a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801205e:	2b00      	cmp	r3, #0
 8012060:	d108      	bne.n	8012074 <f_unlink+0x5c>
 8012062:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012066:	f003 0320 	and.w	r3, r3, #32
 801206a:	2b00      	cmp	r3, #0
 801206c:	d002      	beq.n	8012074 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801206e:	2306      	movs	r3, #6
 8012070:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8012074:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012078:	2b00      	cmp	r3, #0
 801207a:	d108      	bne.n	801208e <f_unlink+0x76>
 801207c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012080:	2102      	movs	r1, #2
 8012082:	4618      	mov	r0, r3
 8012084:	f7fd fa82 	bl	800f58c <chk_lock>
 8012088:	4603      	mov	r3, r0
 801208a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801208e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012092:	2b00      	cmp	r3, #0
 8012094:	d17b      	bne.n	801218e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012096:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801209a:	b25b      	sxtb	r3, r3
 801209c:	2b00      	cmp	r3, #0
 801209e:	da03      	bge.n	80120a8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80120a0:	2306      	movs	r3, #6
 80120a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80120a6:	e008      	b.n	80120ba <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80120a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80120ac:	f003 0301 	and.w	r3, r3, #1
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d002      	beq.n	80120ba <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80120b4:	2307      	movs	r3, #7
 80120b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80120ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d13d      	bne.n	801213e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80120c6:	4611      	mov	r1, r2
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fe f98e 	bl	80103ea <ld_clust>
 80120ce:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80120d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80120d4:	f003 0310 	and.w	r3, r3, #16
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d030      	beq.n	801213e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	699b      	ldr	r3, [r3, #24]
 80120e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d103      	bne.n	80120ee <f_unlink+0xd6>
						res = FR_DENIED;
 80120e6:	2307      	movs	r3, #7
 80120e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80120ec:	e027      	b.n	801213e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80120f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80120f4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80120f6:	f107 0310 	add.w	r3, r7, #16
 80120fa:	2100      	movs	r1, #0
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fd ffce 	bl	801009e <dir_sdi>
 8012102:	4603      	mov	r3, r0
 8012104:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8012108:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801210c:	2b00      	cmp	r3, #0
 801210e:	d116      	bne.n	801213e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012110:	f107 0310 	add.w	r3, r7, #16
 8012114:	2100      	movs	r1, #0
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe f9a6 	bl	8010468 <dir_read>
 801211c:	4603      	mov	r3, r0
 801211e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012122:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012126:	2b00      	cmp	r3, #0
 8012128:	d102      	bne.n	8012130 <f_unlink+0x118>
 801212a:	2307      	movs	r3, #7
 801212c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012130:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012134:	2b04      	cmp	r3, #4
 8012136:	d102      	bne.n	801213e <f_unlink+0x126>
 8012138:	2300      	movs	r3, #0
 801213a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801213e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012142:	2b00      	cmp	r3, #0
 8012144:	d123      	bne.n	801218e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801214a:	4618      	mov	r0, r3
 801214c:	f7fe fa70 	bl	8010630 <dir_remove>
 8012150:	4603      	mov	r3, r0
 8012152:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012156:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801215a:	2b00      	cmp	r3, #0
 801215c:	d10c      	bne.n	8012178 <f_unlink+0x160>
 801215e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012160:	2b00      	cmp	r3, #0
 8012162:	d009      	beq.n	8012178 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012168:	2200      	movs	r2, #0
 801216a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801216c:	4618      	mov	r0, r3
 801216e:	f7fd fe61 	bl	800fe34 <remove_chain>
 8012172:	4603      	mov	r3, r0
 8012174:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012178:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801217c:	2b00      	cmp	r3, #0
 801217e:	d106      	bne.n	801218e <f_unlink+0x176>
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	4618      	mov	r0, r3
 8012184:	f7fd fbe0 	bl	800f948 <sync_fs>
 8012188:	4603      	mov	r3, r0
 801218a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801218e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012192:	4618      	mov	r0, r3
 8012194:	3778      	adds	r7, #120	; 0x78
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
	...

0801219c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b096      	sub	sp, #88	; 0x58
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80121a4:	f107 0108 	add.w	r1, r7, #8
 80121a8:	1d3b      	adds	r3, r7, #4
 80121aa:	2202      	movs	r2, #2
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fe fc57 	bl	8010a60 <find_volume>
 80121b2:	4603      	mov	r3, r0
 80121b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80121bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f040 80fe 	bne.w	80123c2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	f107 030c 	add.w	r3, r7, #12
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fe fb16 	bl	8010800 <follow_path>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80121da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d102      	bne.n	80121e8 <f_mkdir+0x4c>
 80121e2:	2308      	movs	r3, #8
 80121e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80121e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121ec:	2b04      	cmp	r3, #4
 80121ee:	d108      	bne.n	8012202 <f_mkdir+0x66>
 80121f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80121f4:	f003 0320 	and.w	r3, r3, #32
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d002      	beq.n	8012202 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80121fc:	2306      	movs	r3, #6
 80121fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012206:	2b04      	cmp	r3, #4
 8012208:	f040 80db 	bne.w	80123c2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801220c:	f107 030c 	add.w	r3, r7, #12
 8012210:	2100      	movs	r1, #0
 8012212:	4618      	mov	r0, r3
 8012214:	f7fd fe73 	bl	800fefe <create_chain>
 8012218:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	895b      	ldrh	r3, [r3, #10]
 801221e:	461a      	mov	r2, r3
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	899b      	ldrh	r3, [r3, #12]
 8012224:	fb03 f302 	mul.w	r3, r3, r2
 8012228:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801222a:	2300      	movs	r3, #0
 801222c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012232:	2b00      	cmp	r3, #0
 8012234:	d102      	bne.n	801223c <f_mkdir+0xa0>
 8012236:	2307      	movs	r3, #7
 8012238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801223c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801223e:	2b01      	cmp	r3, #1
 8012240:	d102      	bne.n	8012248 <f_mkdir+0xac>
 8012242:	2302      	movs	r3, #2
 8012244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224e:	d102      	bne.n	8012256 <f_mkdir+0xba>
 8012250:	2301      	movs	r3, #1
 8012252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <f_mkdir+0xd0>
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	4618      	mov	r0, r3
 8012262:	f7fd faff 	bl	800f864 <sync_window>
 8012266:	4603      	mov	r3, r0
 8012268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801226c:	4b58      	ldr	r3, [pc, #352]	; (80123d0 <f_mkdir+0x234>)
 801226e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012274:	2b00      	cmp	r3, #0
 8012276:	d16c      	bne.n	8012352 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801227c:	4618      	mov	r0, r3
 801227e:	f7fd fbd3 	bl	800fa28 <clust2sect>
 8012282:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	3338      	adds	r3, #56	; 0x38
 8012288:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	899b      	ldrh	r3, [r3, #12]
 801228e:	461a      	mov	r2, r3
 8012290:	2100      	movs	r1, #0
 8012292:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012294:	f7fd f91d 	bl	800f4d2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012298:	220b      	movs	r2, #11
 801229a:	2120      	movs	r1, #32
 801229c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801229e:	f7fd f918 	bl	800f4d2 <mem_set>
					dir[DIR_Name] = '.';
 80122a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122a4:	222e      	movs	r2, #46	; 0x2e
 80122a6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80122a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122aa:	330b      	adds	r3, #11
 80122ac:	2210      	movs	r2, #16
 80122ae:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80122b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122b2:	3316      	adds	r3, #22
 80122b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7fd f8be 	bl	800f438 <st_dword>
					st_clust(fs, dir, dcl);
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fe f8b0 	bl	8010428 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80122c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ca:	3320      	adds	r3, #32
 80122cc:	2220      	movs	r2, #32
 80122ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7fd f8dd 	bl	800f490 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80122d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d8:	3321      	adds	r3, #33	; 0x21
 80122da:	222e      	movs	r2, #46	; 0x2e
 80122dc:	701a      	strb	r2, [r3, #0]
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	2b03      	cmp	r3, #3
 80122e8:	d106      	bne.n	80122f8 <f_mkdir+0x15c>
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d101      	bne.n	80122f8 <f_mkdir+0x15c>
 80122f4:	2300      	movs	r3, #0
 80122f6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80122f8:	68b8      	ldr	r0, [r7, #8]
 80122fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fc:	3320      	adds	r3, #32
 80122fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012300:	4619      	mov	r1, r3
 8012302:	f7fe f891 	bl	8010428 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	895b      	ldrh	r3, [r3, #10]
 801230a:	653b      	str	r3, [r7, #80]	; 0x50
 801230c:	e01c      	b.n	8012348 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801230e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012310:	1c5a      	adds	r2, r3, #1
 8012312:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012314:	68ba      	ldr	r2, [r7, #8]
 8012316:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	2201      	movs	r2, #1
 801231c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	4618      	mov	r0, r3
 8012322:	f7fd fa9f 	bl	800f864 <sync_window>
 8012326:	4603      	mov	r3, r0
 8012328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801232c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012330:	2b00      	cmp	r3, #0
 8012332:	d10d      	bne.n	8012350 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	899b      	ldrh	r3, [r3, #12]
 8012338:	461a      	mov	r2, r3
 801233a:	2100      	movs	r1, #0
 801233c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801233e:	f7fd f8c8 	bl	800f4d2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012344:	3b01      	subs	r3, #1
 8012346:	653b      	str	r3, [r7, #80]	; 0x50
 8012348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1df      	bne.n	801230e <f_mkdir+0x172>
 801234e:	e000      	b.n	8012352 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012350:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012356:	2b00      	cmp	r3, #0
 8012358:	d107      	bne.n	801236a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801235a:	f107 030c 	add.w	r3, r7, #12
 801235e:	4618      	mov	r0, r3
 8012360:	f7fe f934 	bl	80105cc <dir_register>
 8012364:	4603      	mov	r3, r0
 8012366:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801236a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801236e:	2b00      	cmp	r3, #0
 8012370:	d120      	bne.n	80123b4 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012374:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012378:	3316      	adds	r3, #22
 801237a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801237c:	4618      	mov	r0, r3
 801237e:	f7fd f85b 	bl	800f438 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012388:	4618      	mov	r0, r3
 801238a:	f7fe f84d 	bl	8010428 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012390:	330b      	adds	r3, #11
 8012392:	2210      	movs	r2, #16
 8012394:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	2201      	movs	r2, #1
 801239a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801239c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d10e      	bne.n	80123c2 <f_mkdir+0x226>
					res = sync_fs(fs);
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fd face 	bl	800f948 <sync_fs>
 80123ac:	4603      	mov	r3, r0
 80123ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80123b2:	e006      	b.n	80123c2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80123b4:	f107 030c 	add.w	r3, r7, #12
 80123b8:	2200      	movs	r2, #0
 80123ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fd fd39 	bl	800fe34 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80123c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3758      	adds	r7, #88	; 0x58
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	274a0000 	.word	0x274a0000

080123d4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b088      	sub	sp, #32
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
	int n = 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80123e8:	e017      	b.n	801241a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80123ea:	f107 0310 	add.w	r3, r7, #16
 80123ee:	f107 0114 	add.w	r1, r7, #20
 80123f2:	2201      	movs	r2, #1
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7ff f803 	bl	8011400 <f_read>
		if (rc != 1) break;
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d112      	bne.n	8012426 <f_gets+0x52>
		c = s[0];
 8012400:	7d3b      	ldrb	r3, [r7, #20]
 8012402:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	1c5a      	adds	r2, r3, #1
 8012408:	61ba      	str	r2, [r7, #24]
 801240a:	7dfa      	ldrb	r2, [r7, #23]
 801240c:	701a      	strb	r2, [r3, #0]
		n++;
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	3301      	adds	r3, #1
 8012412:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012414:	7dfb      	ldrb	r3, [r7, #23]
 8012416:	2b0a      	cmp	r3, #10
 8012418:	d007      	beq.n	801242a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	3b01      	subs	r3, #1
 801241e:	69fa      	ldr	r2, [r7, #28]
 8012420:	429a      	cmp	r2, r3
 8012422:	dbe2      	blt.n	80123ea <f_gets+0x16>
 8012424:	e002      	b.n	801242c <f_gets+0x58>
		if (rc != 1) break;
 8012426:	bf00      	nop
 8012428:	e000      	b.n	801242c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801242a:	bf00      	nop
	}
	*p = 0;
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	2200      	movs	r2, #0
 8012430:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <f_gets+0x68>
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	e000      	b.n	801243e <f_gets+0x6a>
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3720      	adds	r7, #32
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
	...

08012448 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012448:	b480      	push	{r7}
 801244a:	b087      	sub	sp, #28
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	4613      	mov	r3, r2
 8012454:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012456:	2301      	movs	r3, #1
 8012458:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801245a:	2300      	movs	r3, #0
 801245c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801245e:	4b1f      	ldr	r3, [pc, #124]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 8012460:	7a5b      	ldrb	r3, [r3, #9]
 8012462:	b2db      	uxtb	r3, r3
 8012464:	2b00      	cmp	r3, #0
 8012466:	d131      	bne.n	80124cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012468:	4b1c      	ldr	r3, [pc, #112]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 801246a:	7a5b      	ldrb	r3, [r3, #9]
 801246c:	b2db      	uxtb	r3, r3
 801246e:	461a      	mov	r2, r3
 8012470:	4b1a      	ldr	r3, [pc, #104]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 8012472:	2100      	movs	r1, #0
 8012474:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012476:	4b19      	ldr	r3, [pc, #100]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 8012478:	7a5b      	ldrb	r3, [r3, #9]
 801247a:	b2db      	uxtb	r3, r3
 801247c:	4a17      	ldr	r2, [pc, #92]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 801247e:	009b      	lsls	r3, r3, #2
 8012480:	4413      	add	r3, r2
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012486:	4b15      	ldr	r3, [pc, #84]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 8012488:	7a5b      	ldrb	r3, [r3, #9]
 801248a:	b2db      	uxtb	r3, r3
 801248c:	461a      	mov	r2, r3
 801248e:	4b13      	ldr	r3, [pc, #76]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 8012490:	4413      	add	r3, r2
 8012492:	79fa      	ldrb	r2, [r7, #7]
 8012494:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012496:	4b11      	ldr	r3, [pc, #68]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 8012498:	7a5b      	ldrb	r3, [r3, #9]
 801249a:	b2db      	uxtb	r3, r3
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	b2d1      	uxtb	r1, r2
 80124a0:	4a0e      	ldr	r2, [pc, #56]	; (80124dc <FATFS_LinkDriverEx+0x94>)
 80124a2:	7251      	strb	r1, [r2, #9]
 80124a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80124a6:	7dbb      	ldrb	r3, [r7, #22]
 80124a8:	3330      	adds	r3, #48	; 0x30
 80124aa:	b2da      	uxtb	r2, r3
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	3301      	adds	r3, #1
 80124b4:	223a      	movs	r2, #58	; 0x3a
 80124b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	3302      	adds	r3, #2
 80124bc:	222f      	movs	r2, #47	; 0x2f
 80124be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	3303      	adds	r3, #3
 80124c4:	2200      	movs	r2, #0
 80124c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80124c8:	2300      	movs	r3, #0
 80124ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80124cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	371c      	adds	r7, #28
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	20033618 	.word	0x20033618

080124e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80124ea:	2200      	movs	r2, #0
 80124ec:	6839      	ldr	r1, [r7, #0]
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff ffaa 	bl	8012448 <FATFS_LinkDriverEx>
 80124f4:	4603      	mov	r3, r0
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3708      	adds	r7, #8
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}

080124fe <__cxa_guard_acquire>:
 80124fe:	6803      	ldr	r3, [r0, #0]
 8012500:	07db      	lsls	r3, r3, #31
 8012502:	d406      	bmi.n	8012512 <__cxa_guard_acquire+0x14>
 8012504:	7843      	ldrb	r3, [r0, #1]
 8012506:	b103      	cbz	r3, 801250a <__cxa_guard_acquire+0xc>
 8012508:	deff      	udf	#255	; 0xff
 801250a:	2301      	movs	r3, #1
 801250c:	7043      	strb	r3, [r0, #1]
 801250e:	4618      	mov	r0, r3
 8012510:	4770      	bx	lr
 8012512:	2000      	movs	r0, #0
 8012514:	4770      	bx	lr

08012516 <__cxa_guard_release>:
 8012516:	2301      	movs	r3, #1
 8012518:	6003      	str	r3, [r0, #0]
 801251a:	4770      	bx	lr
 801251c:	0000      	movs	r0, r0
	...

08012520 <cos>:
 8012520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012522:	ec51 0b10 	vmov	r0, r1, d0
 8012526:	4a1e      	ldr	r2, [pc, #120]	; (80125a0 <cos+0x80>)
 8012528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801252c:	4293      	cmp	r3, r2
 801252e:	dc06      	bgt.n	801253e <cos+0x1e>
 8012530:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012598 <cos+0x78>
 8012534:	f000 fa74 	bl	8012a20 <__kernel_cos>
 8012538:	ec51 0b10 	vmov	r0, r1, d0
 801253c:	e007      	b.n	801254e <cos+0x2e>
 801253e:	4a19      	ldr	r2, [pc, #100]	; (80125a4 <cos+0x84>)
 8012540:	4293      	cmp	r3, r2
 8012542:	dd09      	ble.n	8012558 <cos+0x38>
 8012544:	ee10 2a10 	vmov	r2, s0
 8012548:	460b      	mov	r3, r1
 801254a:	f7ed feb5 	bl	80002b8 <__aeabi_dsub>
 801254e:	ec41 0b10 	vmov	d0, r0, r1
 8012552:	b005      	add	sp, #20
 8012554:	f85d fb04 	ldr.w	pc, [sp], #4
 8012558:	4668      	mov	r0, sp
 801255a:	f000 f86d 	bl	8012638 <__ieee754_rem_pio2>
 801255e:	f000 0003 	and.w	r0, r0, #3
 8012562:	2801      	cmp	r0, #1
 8012564:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012568:	ed9d 0b00 	vldr	d0, [sp]
 801256c:	d007      	beq.n	801257e <cos+0x5e>
 801256e:	2802      	cmp	r0, #2
 8012570:	d00e      	beq.n	8012590 <cos+0x70>
 8012572:	2800      	cmp	r0, #0
 8012574:	d0de      	beq.n	8012534 <cos+0x14>
 8012576:	2001      	movs	r0, #1
 8012578:	f000 fe5a 	bl	8013230 <__kernel_sin>
 801257c:	e7dc      	b.n	8012538 <cos+0x18>
 801257e:	f000 fe57 	bl	8013230 <__kernel_sin>
 8012582:	ec53 2b10 	vmov	r2, r3, d0
 8012586:	ee10 0a10 	vmov	r0, s0
 801258a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801258e:	e7de      	b.n	801254e <cos+0x2e>
 8012590:	f000 fa46 	bl	8012a20 <__kernel_cos>
 8012594:	e7f5      	b.n	8012582 <cos+0x62>
 8012596:	bf00      	nop
	...
 80125a0:	3fe921fb 	.word	0x3fe921fb
 80125a4:	7fefffff 	.word	0x7fefffff

080125a8 <sin>:
 80125a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125aa:	ec51 0b10 	vmov	r0, r1, d0
 80125ae:	4a20      	ldr	r2, [pc, #128]	; (8012630 <sin+0x88>)
 80125b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125b4:	4293      	cmp	r3, r2
 80125b6:	dc07      	bgt.n	80125c8 <sin+0x20>
 80125b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012628 <sin+0x80>
 80125bc:	2000      	movs	r0, #0
 80125be:	f000 fe37 	bl	8013230 <__kernel_sin>
 80125c2:	ec51 0b10 	vmov	r0, r1, d0
 80125c6:	e007      	b.n	80125d8 <sin+0x30>
 80125c8:	4a1a      	ldr	r2, [pc, #104]	; (8012634 <sin+0x8c>)
 80125ca:	4293      	cmp	r3, r2
 80125cc:	dd09      	ble.n	80125e2 <sin+0x3a>
 80125ce:	ee10 2a10 	vmov	r2, s0
 80125d2:	460b      	mov	r3, r1
 80125d4:	f7ed fe70 	bl	80002b8 <__aeabi_dsub>
 80125d8:	ec41 0b10 	vmov	d0, r0, r1
 80125dc:	b005      	add	sp, #20
 80125de:	f85d fb04 	ldr.w	pc, [sp], #4
 80125e2:	4668      	mov	r0, sp
 80125e4:	f000 f828 	bl	8012638 <__ieee754_rem_pio2>
 80125e8:	f000 0003 	and.w	r0, r0, #3
 80125ec:	2801      	cmp	r0, #1
 80125ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125f2:	ed9d 0b00 	vldr	d0, [sp]
 80125f6:	d004      	beq.n	8012602 <sin+0x5a>
 80125f8:	2802      	cmp	r0, #2
 80125fa:	d005      	beq.n	8012608 <sin+0x60>
 80125fc:	b970      	cbnz	r0, 801261c <sin+0x74>
 80125fe:	2001      	movs	r0, #1
 8012600:	e7dd      	b.n	80125be <sin+0x16>
 8012602:	f000 fa0d 	bl	8012a20 <__kernel_cos>
 8012606:	e7dc      	b.n	80125c2 <sin+0x1a>
 8012608:	2001      	movs	r0, #1
 801260a:	f000 fe11 	bl	8013230 <__kernel_sin>
 801260e:	ec53 2b10 	vmov	r2, r3, d0
 8012612:	ee10 0a10 	vmov	r0, s0
 8012616:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801261a:	e7dd      	b.n	80125d8 <sin+0x30>
 801261c:	f000 fa00 	bl	8012a20 <__kernel_cos>
 8012620:	e7f5      	b.n	801260e <sin+0x66>
 8012622:	bf00      	nop
 8012624:	f3af 8000 	nop.w
	...
 8012630:	3fe921fb 	.word	0x3fe921fb
 8012634:	7fefffff 	.word	0x7fefffff

08012638 <__ieee754_rem_pio2>:
 8012638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263c:	ec57 6b10 	vmov	r6, r7, d0
 8012640:	4bc3      	ldr	r3, [pc, #780]	; (8012950 <__ieee754_rem_pio2+0x318>)
 8012642:	b08d      	sub	sp, #52	; 0x34
 8012644:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012648:	4598      	cmp	r8, r3
 801264a:	4604      	mov	r4, r0
 801264c:	9704      	str	r7, [sp, #16]
 801264e:	dc07      	bgt.n	8012660 <__ieee754_rem_pio2+0x28>
 8012650:	2200      	movs	r2, #0
 8012652:	2300      	movs	r3, #0
 8012654:	ed84 0b00 	vstr	d0, [r4]
 8012658:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801265c:	2500      	movs	r5, #0
 801265e:	e027      	b.n	80126b0 <__ieee754_rem_pio2+0x78>
 8012660:	4bbc      	ldr	r3, [pc, #752]	; (8012954 <__ieee754_rem_pio2+0x31c>)
 8012662:	4598      	cmp	r8, r3
 8012664:	dc75      	bgt.n	8012752 <__ieee754_rem_pio2+0x11a>
 8012666:	9b04      	ldr	r3, [sp, #16]
 8012668:	4dbb      	ldr	r5, [pc, #748]	; (8012958 <__ieee754_rem_pio2+0x320>)
 801266a:	2b00      	cmp	r3, #0
 801266c:	ee10 0a10 	vmov	r0, s0
 8012670:	a3a9      	add	r3, pc, #676	; (adr r3, 8012918 <__ieee754_rem_pio2+0x2e0>)
 8012672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012676:	4639      	mov	r1, r7
 8012678:	dd36      	ble.n	80126e8 <__ieee754_rem_pio2+0xb0>
 801267a:	f7ed fe1d 	bl	80002b8 <__aeabi_dsub>
 801267e:	45a8      	cmp	r8, r5
 8012680:	4606      	mov	r6, r0
 8012682:	460f      	mov	r7, r1
 8012684:	d018      	beq.n	80126b8 <__ieee754_rem_pio2+0x80>
 8012686:	a3a6      	add	r3, pc, #664	; (adr r3, 8012920 <__ieee754_rem_pio2+0x2e8>)
 8012688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268c:	f7ed fe14 	bl	80002b8 <__aeabi_dsub>
 8012690:	4602      	mov	r2, r0
 8012692:	460b      	mov	r3, r1
 8012694:	e9c4 2300 	strd	r2, r3, [r4]
 8012698:	4630      	mov	r0, r6
 801269a:	4639      	mov	r1, r7
 801269c:	f7ed fe0c 	bl	80002b8 <__aeabi_dsub>
 80126a0:	a39f      	add	r3, pc, #636	; (adr r3, 8012920 <__ieee754_rem_pio2+0x2e8>)
 80126a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a6:	f7ed fe07 	bl	80002b8 <__aeabi_dsub>
 80126aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80126ae:	2501      	movs	r5, #1
 80126b0:	4628      	mov	r0, r5
 80126b2:	b00d      	add	sp, #52	; 0x34
 80126b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b8:	a39b      	add	r3, pc, #620	; (adr r3, 8012928 <__ieee754_rem_pio2+0x2f0>)
 80126ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126be:	f7ed fdfb 	bl	80002b8 <__aeabi_dsub>
 80126c2:	a39b      	add	r3, pc, #620	; (adr r3, 8012930 <__ieee754_rem_pio2+0x2f8>)
 80126c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c8:	4606      	mov	r6, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	f7ed fdf4 	bl	80002b8 <__aeabi_dsub>
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	e9c4 2300 	strd	r2, r3, [r4]
 80126d8:	4630      	mov	r0, r6
 80126da:	4639      	mov	r1, r7
 80126dc:	f7ed fdec 	bl	80002b8 <__aeabi_dsub>
 80126e0:	a393      	add	r3, pc, #588	; (adr r3, 8012930 <__ieee754_rem_pio2+0x2f8>)
 80126e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e6:	e7de      	b.n	80126a6 <__ieee754_rem_pio2+0x6e>
 80126e8:	f7ed fde8 	bl	80002bc <__adddf3>
 80126ec:	45a8      	cmp	r8, r5
 80126ee:	4606      	mov	r6, r0
 80126f0:	460f      	mov	r7, r1
 80126f2:	d016      	beq.n	8012722 <__ieee754_rem_pio2+0xea>
 80126f4:	a38a      	add	r3, pc, #552	; (adr r3, 8012920 <__ieee754_rem_pio2+0x2e8>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	f7ed fddf 	bl	80002bc <__adddf3>
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	e9c4 2300 	strd	r2, r3, [r4]
 8012706:	4630      	mov	r0, r6
 8012708:	4639      	mov	r1, r7
 801270a:	f7ed fdd5 	bl	80002b8 <__aeabi_dsub>
 801270e:	a384      	add	r3, pc, #528	; (adr r3, 8012920 <__ieee754_rem_pio2+0x2e8>)
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	f7ed fdd2 	bl	80002bc <__adddf3>
 8012718:	f04f 35ff 	mov.w	r5, #4294967295
 801271c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012720:	e7c6      	b.n	80126b0 <__ieee754_rem_pio2+0x78>
 8012722:	a381      	add	r3, pc, #516	; (adr r3, 8012928 <__ieee754_rem_pio2+0x2f0>)
 8012724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012728:	f7ed fdc8 	bl	80002bc <__adddf3>
 801272c:	a380      	add	r3, pc, #512	; (adr r3, 8012930 <__ieee754_rem_pio2+0x2f8>)
 801272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012732:	4606      	mov	r6, r0
 8012734:	460f      	mov	r7, r1
 8012736:	f7ed fdc1 	bl	80002bc <__adddf3>
 801273a:	4602      	mov	r2, r0
 801273c:	460b      	mov	r3, r1
 801273e:	e9c4 2300 	strd	r2, r3, [r4]
 8012742:	4630      	mov	r0, r6
 8012744:	4639      	mov	r1, r7
 8012746:	f7ed fdb7 	bl	80002b8 <__aeabi_dsub>
 801274a:	a379      	add	r3, pc, #484	; (adr r3, 8012930 <__ieee754_rem_pio2+0x2f8>)
 801274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012750:	e7e0      	b.n	8012714 <__ieee754_rem_pio2+0xdc>
 8012752:	4b82      	ldr	r3, [pc, #520]	; (801295c <__ieee754_rem_pio2+0x324>)
 8012754:	4598      	cmp	r8, r3
 8012756:	f300 80d0 	bgt.w	80128fa <__ieee754_rem_pio2+0x2c2>
 801275a:	f000 fe23 	bl	80133a4 <fabs>
 801275e:	ec57 6b10 	vmov	r6, r7, d0
 8012762:	ee10 0a10 	vmov	r0, s0
 8012766:	a374      	add	r3, pc, #464	; (adr r3, 8012938 <__ieee754_rem_pio2+0x300>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	4639      	mov	r1, r7
 801276e:	f7ed ff5b 	bl	8000628 <__aeabi_dmul>
 8012772:	2200      	movs	r2, #0
 8012774:	4b7a      	ldr	r3, [pc, #488]	; (8012960 <__ieee754_rem_pio2+0x328>)
 8012776:	f7ed fda1 	bl	80002bc <__adddf3>
 801277a:	f7ee fa05 	bl	8000b88 <__aeabi_d2iz>
 801277e:	4605      	mov	r5, r0
 8012780:	f7ed fee8 	bl	8000554 <__aeabi_i2d>
 8012784:	a364      	add	r3, pc, #400	; (adr r3, 8012918 <__ieee754_rem_pio2+0x2e0>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801278e:	f7ed ff4b 	bl	8000628 <__aeabi_dmul>
 8012792:	4602      	mov	r2, r0
 8012794:	460b      	mov	r3, r1
 8012796:	4630      	mov	r0, r6
 8012798:	4639      	mov	r1, r7
 801279a:	f7ed fd8d 	bl	80002b8 <__aeabi_dsub>
 801279e:	a360      	add	r3, pc, #384	; (adr r3, 8012920 <__ieee754_rem_pio2+0x2e8>)
 80127a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a4:	4682      	mov	sl, r0
 80127a6:	468b      	mov	fp, r1
 80127a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ac:	f7ed ff3c 	bl	8000628 <__aeabi_dmul>
 80127b0:	2d1f      	cmp	r5, #31
 80127b2:	4606      	mov	r6, r0
 80127b4:	460f      	mov	r7, r1
 80127b6:	dc0c      	bgt.n	80127d2 <__ieee754_rem_pio2+0x19a>
 80127b8:	1e6a      	subs	r2, r5, #1
 80127ba:	4b6a      	ldr	r3, [pc, #424]	; (8012964 <__ieee754_rem_pio2+0x32c>)
 80127bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127c0:	4543      	cmp	r3, r8
 80127c2:	d006      	beq.n	80127d2 <__ieee754_rem_pio2+0x19a>
 80127c4:	4632      	mov	r2, r6
 80127c6:	463b      	mov	r3, r7
 80127c8:	4650      	mov	r0, sl
 80127ca:	4659      	mov	r1, fp
 80127cc:	f7ed fd74 	bl	80002b8 <__aeabi_dsub>
 80127d0:	e00e      	b.n	80127f0 <__ieee754_rem_pio2+0x1b8>
 80127d2:	4632      	mov	r2, r6
 80127d4:	463b      	mov	r3, r7
 80127d6:	4650      	mov	r0, sl
 80127d8:	4659      	mov	r1, fp
 80127da:	f7ed fd6d 	bl	80002b8 <__aeabi_dsub>
 80127de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80127e2:	9305      	str	r3, [sp, #20]
 80127e4:	9a05      	ldr	r2, [sp, #20]
 80127e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	2b10      	cmp	r3, #16
 80127ee:	dc02      	bgt.n	80127f6 <__ieee754_rem_pio2+0x1be>
 80127f0:	e9c4 0100 	strd	r0, r1, [r4]
 80127f4:	e039      	b.n	801286a <__ieee754_rem_pio2+0x232>
 80127f6:	a34c      	add	r3, pc, #304	; (adr r3, 8012928 <__ieee754_rem_pio2+0x2f0>)
 80127f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012800:	f7ed ff12 	bl	8000628 <__aeabi_dmul>
 8012804:	4606      	mov	r6, r0
 8012806:	460f      	mov	r7, r1
 8012808:	4602      	mov	r2, r0
 801280a:	460b      	mov	r3, r1
 801280c:	4650      	mov	r0, sl
 801280e:	4659      	mov	r1, fp
 8012810:	f7ed fd52 	bl	80002b8 <__aeabi_dsub>
 8012814:	4602      	mov	r2, r0
 8012816:	460b      	mov	r3, r1
 8012818:	4680      	mov	r8, r0
 801281a:	4689      	mov	r9, r1
 801281c:	4650      	mov	r0, sl
 801281e:	4659      	mov	r1, fp
 8012820:	f7ed fd4a 	bl	80002b8 <__aeabi_dsub>
 8012824:	4632      	mov	r2, r6
 8012826:	463b      	mov	r3, r7
 8012828:	f7ed fd46 	bl	80002b8 <__aeabi_dsub>
 801282c:	a340      	add	r3, pc, #256	; (adr r3, 8012930 <__ieee754_rem_pio2+0x2f8>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	4606      	mov	r6, r0
 8012834:	460f      	mov	r7, r1
 8012836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801283a:	f7ed fef5 	bl	8000628 <__aeabi_dmul>
 801283e:	4632      	mov	r2, r6
 8012840:	463b      	mov	r3, r7
 8012842:	f7ed fd39 	bl	80002b8 <__aeabi_dsub>
 8012846:	4602      	mov	r2, r0
 8012848:	460b      	mov	r3, r1
 801284a:	4606      	mov	r6, r0
 801284c:	460f      	mov	r7, r1
 801284e:	4640      	mov	r0, r8
 8012850:	4649      	mov	r1, r9
 8012852:	f7ed fd31 	bl	80002b8 <__aeabi_dsub>
 8012856:	9a05      	ldr	r2, [sp, #20]
 8012858:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	2b31      	cmp	r3, #49	; 0x31
 8012860:	dc20      	bgt.n	80128a4 <__ieee754_rem_pio2+0x26c>
 8012862:	e9c4 0100 	strd	r0, r1, [r4]
 8012866:	46c2      	mov	sl, r8
 8012868:	46cb      	mov	fp, r9
 801286a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801286e:	4650      	mov	r0, sl
 8012870:	4642      	mov	r2, r8
 8012872:	464b      	mov	r3, r9
 8012874:	4659      	mov	r1, fp
 8012876:	f7ed fd1f 	bl	80002b8 <__aeabi_dsub>
 801287a:	463b      	mov	r3, r7
 801287c:	4632      	mov	r2, r6
 801287e:	f7ed fd1b 	bl	80002b8 <__aeabi_dsub>
 8012882:	9b04      	ldr	r3, [sp, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801288a:	f6bf af11 	bge.w	80126b0 <__ieee754_rem_pio2+0x78>
 801288e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012892:	6063      	str	r3, [r4, #4]
 8012894:	f8c4 8000 	str.w	r8, [r4]
 8012898:	60a0      	str	r0, [r4, #8]
 801289a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801289e:	60e3      	str	r3, [r4, #12]
 80128a0:	426d      	negs	r5, r5
 80128a2:	e705      	b.n	80126b0 <__ieee754_rem_pio2+0x78>
 80128a4:	a326      	add	r3, pc, #152	; (adr r3, 8012940 <__ieee754_rem_pio2+0x308>)
 80128a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ae:	f7ed febb 	bl	8000628 <__aeabi_dmul>
 80128b2:	4606      	mov	r6, r0
 80128b4:	460f      	mov	r7, r1
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	4640      	mov	r0, r8
 80128bc:	4649      	mov	r1, r9
 80128be:	f7ed fcfb 	bl	80002b8 <__aeabi_dsub>
 80128c2:	4602      	mov	r2, r0
 80128c4:	460b      	mov	r3, r1
 80128c6:	4682      	mov	sl, r0
 80128c8:	468b      	mov	fp, r1
 80128ca:	4640      	mov	r0, r8
 80128cc:	4649      	mov	r1, r9
 80128ce:	f7ed fcf3 	bl	80002b8 <__aeabi_dsub>
 80128d2:	4632      	mov	r2, r6
 80128d4:	463b      	mov	r3, r7
 80128d6:	f7ed fcef 	bl	80002b8 <__aeabi_dsub>
 80128da:	a31b      	add	r3, pc, #108	; (adr r3, 8012948 <__ieee754_rem_pio2+0x310>)
 80128dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e0:	4606      	mov	r6, r0
 80128e2:	460f      	mov	r7, r1
 80128e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128e8:	f7ed fe9e 	bl	8000628 <__aeabi_dmul>
 80128ec:	4632      	mov	r2, r6
 80128ee:	463b      	mov	r3, r7
 80128f0:	f7ed fce2 	bl	80002b8 <__aeabi_dsub>
 80128f4:	4606      	mov	r6, r0
 80128f6:	460f      	mov	r7, r1
 80128f8:	e764      	b.n	80127c4 <__ieee754_rem_pio2+0x18c>
 80128fa:	4b1b      	ldr	r3, [pc, #108]	; (8012968 <__ieee754_rem_pio2+0x330>)
 80128fc:	4598      	cmp	r8, r3
 80128fe:	dd35      	ble.n	801296c <__ieee754_rem_pio2+0x334>
 8012900:	ee10 2a10 	vmov	r2, s0
 8012904:	463b      	mov	r3, r7
 8012906:	4630      	mov	r0, r6
 8012908:	4639      	mov	r1, r7
 801290a:	f7ed fcd5 	bl	80002b8 <__aeabi_dsub>
 801290e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012912:	e9c4 0100 	strd	r0, r1, [r4]
 8012916:	e6a1      	b.n	801265c <__ieee754_rem_pio2+0x24>
 8012918:	54400000 	.word	0x54400000
 801291c:	3ff921fb 	.word	0x3ff921fb
 8012920:	1a626331 	.word	0x1a626331
 8012924:	3dd0b461 	.word	0x3dd0b461
 8012928:	1a600000 	.word	0x1a600000
 801292c:	3dd0b461 	.word	0x3dd0b461
 8012930:	2e037073 	.word	0x2e037073
 8012934:	3ba3198a 	.word	0x3ba3198a
 8012938:	6dc9c883 	.word	0x6dc9c883
 801293c:	3fe45f30 	.word	0x3fe45f30
 8012940:	2e000000 	.word	0x2e000000
 8012944:	3ba3198a 	.word	0x3ba3198a
 8012948:	252049c1 	.word	0x252049c1
 801294c:	397b839a 	.word	0x397b839a
 8012950:	3fe921fb 	.word	0x3fe921fb
 8012954:	4002d97b 	.word	0x4002d97b
 8012958:	3ff921fb 	.word	0x3ff921fb
 801295c:	413921fb 	.word	0x413921fb
 8012960:	3fe00000 	.word	0x3fe00000
 8012964:	08018a88 	.word	0x08018a88
 8012968:	7fefffff 	.word	0x7fefffff
 801296c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012970:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8012974:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012978:	4630      	mov	r0, r6
 801297a:	460f      	mov	r7, r1
 801297c:	f7ee f904 	bl	8000b88 <__aeabi_d2iz>
 8012980:	f7ed fde8 	bl	8000554 <__aeabi_i2d>
 8012984:	4602      	mov	r2, r0
 8012986:	460b      	mov	r3, r1
 8012988:	4630      	mov	r0, r6
 801298a:	4639      	mov	r1, r7
 801298c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012990:	f7ed fc92 	bl	80002b8 <__aeabi_dsub>
 8012994:	2200      	movs	r2, #0
 8012996:	4b1f      	ldr	r3, [pc, #124]	; (8012a14 <__ieee754_rem_pio2+0x3dc>)
 8012998:	f7ed fe46 	bl	8000628 <__aeabi_dmul>
 801299c:	460f      	mov	r7, r1
 801299e:	4606      	mov	r6, r0
 80129a0:	f7ee f8f2 	bl	8000b88 <__aeabi_d2iz>
 80129a4:	f7ed fdd6 	bl	8000554 <__aeabi_i2d>
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	4630      	mov	r0, r6
 80129ae:	4639      	mov	r1, r7
 80129b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80129b4:	f7ed fc80 	bl	80002b8 <__aeabi_dsub>
 80129b8:	2200      	movs	r2, #0
 80129ba:	4b16      	ldr	r3, [pc, #88]	; (8012a14 <__ieee754_rem_pio2+0x3dc>)
 80129bc:	f7ed fe34 	bl	8000628 <__aeabi_dmul>
 80129c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80129c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80129c8:	f04f 0803 	mov.w	r8, #3
 80129cc:	2600      	movs	r6, #0
 80129ce:	2700      	movs	r7, #0
 80129d0:	4632      	mov	r2, r6
 80129d2:	463b      	mov	r3, r7
 80129d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80129d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80129dc:	f7ee f88c 	bl	8000af8 <__aeabi_dcmpeq>
 80129e0:	b9b0      	cbnz	r0, 8012a10 <__ieee754_rem_pio2+0x3d8>
 80129e2:	4b0d      	ldr	r3, [pc, #52]	; (8012a18 <__ieee754_rem_pio2+0x3e0>)
 80129e4:	9301      	str	r3, [sp, #4]
 80129e6:	2302      	movs	r3, #2
 80129e8:	9300      	str	r3, [sp, #0]
 80129ea:	462a      	mov	r2, r5
 80129ec:	4643      	mov	r3, r8
 80129ee:	4621      	mov	r1, r4
 80129f0:	a806      	add	r0, sp, #24
 80129f2:	f000 f8dd 	bl	8012bb0 <__kernel_rem_pio2>
 80129f6:	9b04      	ldr	r3, [sp, #16]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	4605      	mov	r5, r0
 80129fc:	f6bf ae58 	bge.w	80126b0 <__ieee754_rem_pio2+0x78>
 8012a00:	6863      	ldr	r3, [r4, #4]
 8012a02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012a06:	6063      	str	r3, [r4, #4]
 8012a08:	68e3      	ldr	r3, [r4, #12]
 8012a0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012a0e:	e746      	b.n	801289e <__ieee754_rem_pio2+0x266>
 8012a10:	46d0      	mov	r8, sl
 8012a12:	e7dd      	b.n	80129d0 <__ieee754_rem_pio2+0x398>
 8012a14:	41700000 	.word	0x41700000
 8012a18:	08018b08 	.word	0x08018b08
 8012a1c:	00000000 	.word	0x00000000

08012a20 <__kernel_cos>:
 8012a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a24:	ec59 8b10 	vmov	r8, r9, d0
 8012a28:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012a2c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012a30:	ed2d 8b02 	vpush	{d8}
 8012a34:	eeb0 8a41 	vmov.f32	s16, s2
 8012a38:	eef0 8a61 	vmov.f32	s17, s3
 8012a3c:	da07      	bge.n	8012a4e <__kernel_cos+0x2e>
 8012a3e:	ee10 0a10 	vmov	r0, s0
 8012a42:	4649      	mov	r1, r9
 8012a44:	f7ee f8a0 	bl	8000b88 <__aeabi_d2iz>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	f000 8089 	beq.w	8012b60 <__kernel_cos+0x140>
 8012a4e:	4642      	mov	r2, r8
 8012a50:	464b      	mov	r3, r9
 8012a52:	4640      	mov	r0, r8
 8012a54:	4649      	mov	r1, r9
 8012a56:	f7ed fde7 	bl	8000628 <__aeabi_dmul>
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	4b4e      	ldr	r3, [pc, #312]	; (8012b98 <__kernel_cos+0x178>)
 8012a5e:	4604      	mov	r4, r0
 8012a60:	460d      	mov	r5, r1
 8012a62:	f7ed fde1 	bl	8000628 <__aeabi_dmul>
 8012a66:	a340      	add	r3, pc, #256	; (adr r3, 8012b68 <__kernel_cos+0x148>)
 8012a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6c:	4682      	mov	sl, r0
 8012a6e:	468b      	mov	fp, r1
 8012a70:	4620      	mov	r0, r4
 8012a72:	4629      	mov	r1, r5
 8012a74:	f7ed fdd8 	bl	8000628 <__aeabi_dmul>
 8012a78:	a33d      	add	r3, pc, #244	; (adr r3, 8012b70 <__kernel_cos+0x150>)
 8012a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7e:	f7ed fc1d 	bl	80002bc <__adddf3>
 8012a82:	4622      	mov	r2, r4
 8012a84:	462b      	mov	r3, r5
 8012a86:	f7ed fdcf 	bl	8000628 <__aeabi_dmul>
 8012a8a:	a33b      	add	r3, pc, #236	; (adr r3, 8012b78 <__kernel_cos+0x158>)
 8012a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a90:	f7ed fc12 	bl	80002b8 <__aeabi_dsub>
 8012a94:	4622      	mov	r2, r4
 8012a96:	462b      	mov	r3, r5
 8012a98:	f7ed fdc6 	bl	8000628 <__aeabi_dmul>
 8012a9c:	a338      	add	r3, pc, #224	; (adr r3, 8012b80 <__kernel_cos+0x160>)
 8012a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa2:	f7ed fc0b 	bl	80002bc <__adddf3>
 8012aa6:	4622      	mov	r2, r4
 8012aa8:	462b      	mov	r3, r5
 8012aaa:	f7ed fdbd 	bl	8000628 <__aeabi_dmul>
 8012aae:	a336      	add	r3, pc, #216	; (adr r3, 8012b88 <__kernel_cos+0x168>)
 8012ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab4:	f7ed fc00 	bl	80002b8 <__aeabi_dsub>
 8012ab8:	4622      	mov	r2, r4
 8012aba:	462b      	mov	r3, r5
 8012abc:	f7ed fdb4 	bl	8000628 <__aeabi_dmul>
 8012ac0:	a333      	add	r3, pc, #204	; (adr r3, 8012b90 <__kernel_cos+0x170>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	f7ed fbf9 	bl	80002bc <__adddf3>
 8012aca:	4622      	mov	r2, r4
 8012acc:	462b      	mov	r3, r5
 8012ace:	f7ed fdab 	bl	8000628 <__aeabi_dmul>
 8012ad2:	4622      	mov	r2, r4
 8012ad4:	462b      	mov	r3, r5
 8012ad6:	f7ed fda7 	bl	8000628 <__aeabi_dmul>
 8012ada:	ec53 2b18 	vmov	r2, r3, d8
 8012ade:	4604      	mov	r4, r0
 8012ae0:	460d      	mov	r5, r1
 8012ae2:	4640      	mov	r0, r8
 8012ae4:	4649      	mov	r1, r9
 8012ae6:	f7ed fd9f 	bl	8000628 <__aeabi_dmul>
 8012aea:	460b      	mov	r3, r1
 8012aec:	4602      	mov	r2, r0
 8012aee:	4629      	mov	r1, r5
 8012af0:	4620      	mov	r0, r4
 8012af2:	f7ed fbe1 	bl	80002b8 <__aeabi_dsub>
 8012af6:	4b29      	ldr	r3, [pc, #164]	; (8012b9c <__kernel_cos+0x17c>)
 8012af8:	429e      	cmp	r6, r3
 8012afa:	4680      	mov	r8, r0
 8012afc:	4689      	mov	r9, r1
 8012afe:	dc11      	bgt.n	8012b24 <__kernel_cos+0x104>
 8012b00:	4602      	mov	r2, r0
 8012b02:	460b      	mov	r3, r1
 8012b04:	4650      	mov	r0, sl
 8012b06:	4659      	mov	r1, fp
 8012b08:	f7ed fbd6 	bl	80002b8 <__aeabi_dsub>
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	4924      	ldr	r1, [pc, #144]	; (8012ba0 <__kernel_cos+0x180>)
 8012b10:	4602      	mov	r2, r0
 8012b12:	2000      	movs	r0, #0
 8012b14:	f7ed fbd0 	bl	80002b8 <__aeabi_dsub>
 8012b18:	ecbd 8b02 	vpop	{d8}
 8012b1c:	ec41 0b10 	vmov	d0, r0, r1
 8012b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b24:	4b1f      	ldr	r3, [pc, #124]	; (8012ba4 <__kernel_cos+0x184>)
 8012b26:	491e      	ldr	r1, [pc, #120]	; (8012ba0 <__kernel_cos+0x180>)
 8012b28:	429e      	cmp	r6, r3
 8012b2a:	bfcc      	ite	gt
 8012b2c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012ba8 <__kernel_cos+0x188>)
 8012b2e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012b32:	2400      	movs	r4, #0
 8012b34:	4622      	mov	r2, r4
 8012b36:	462b      	mov	r3, r5
 8012b38:	2000      	movs	r0, #0
 8012b3a:	f7ed fbbd 	bl	80002b8 <__aeabi_dsub>
 8012b3e:	4622      	mov	r2, r4
 8012b40:	4606      	mov	r6, r0
 8012b42:	460f      	mov	r7, r1
 8012b44:	462b      	mov	r3, r5
 8012b46:	4650      	mov	r0, sl
 8012b48:	4659      	mov	r1, fp
 8012b4a:	f7ed fbb5 	bl	80002b8 <__aeabi_dsub>
 8012b4e:	4642      	mov	r2, r8
 8012b50:	464b      	mov	r3, r9
 8012b52:	f7ed fbb1 	bl	80002b8 <__aeabi_dsub>
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	e7d9      	b.n	8012b14 <__kernel_cos+0xf4>
 8012b60:	2000      	movs	r0, #0
 8012b62:	490f      	ldr	r1, [pc, #60]	; (8012ba0 <__kernel_cos+0x180>)
 8012b64:	e7d8      	b.n	8012b18 <__kernel_cos+0xf8>
 8012b66:	bf00      	nop
 8012b68:	be8838d4 	.word	0xbe8838d4
 8012b6c:	bda8fae9 	.word	0xbda8fae9
 8012b70:	bdb4b1c4 	.word	0xbdb4b1c4
 8012b74:	3e21ee9e 	.word	0x3e21ee9e
 8012b78:	809c52ad 	.word	0x809c52ad
 8012b7c:	3e927e4f 	.word	0x3e927e4f
 8012b80:	19cb1590 	.word	0x19cb1590
 8012b84:	3efa01a0 	.word	0x3efa01a0
 8012b88:	16c15177 	.word	0x16c15177
 8012b8c:	3f56c16c 	.word	0x3f56c16c
 8012b90:	5555554c 	.word	0x5555554c
 8012b94:	3fa55555 	.word	0x3fa55555
 8012b98:	3fe00000 	.word	0x3fe00000
 8012b9c:	3fd33332 	.word	0x3fd33332
 8012ba0:	3ff00000 	.word	0x3ff00000
 8012ba4:	3fe90000 	.word	0x3fe90000
 8012ba8:	3fd20000 	.word	0x3fd20000
 8012bac:	00000000 	.word	0x00000000

08012bb0 <__kernel_rem_pio2>:
 8012bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb4:	ed2d 8b02 	vpush	{d8}
 8012bb8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012bbc:	1ed4      	subs	r4, r2, #3
 8012bbe:	9308      	str	r3, [sp, #32]
 8012bc0:	9101      	str	r1, [sp, #4]
 8012bc2:	4bc5      	ldr	r3, [pc, #788]	; (8012ed8 <__kernel_rem_pio2+0x328>)
 8012bc4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012bc6:	9009      	str	r0, [sp, #36]	; 0x24
 8012bc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bcc:	9304      	str	r3, [sp, #16]
 8012bce:	9b08      	ldr	r3, [sp, #32]
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	9307      	str	r3, [sp, #28]
 8012bd4:	2318      	movs	r3, #24
 8012bd6:	fb94 f4f3 	sdiv	r4, r4, r3
 8012bda:	f06f 0317 	mvn.w	r3, #23
 8012bde:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012be2:	fb04 3303 	mla	r3, r4, r3, r3
 8012be6:	eb03 0a02 	add.w	sl, r3, r2
 8012bea:	9b04      	ldr	r3, [sp, #16]
 8012bec:	9a07      	ldr	r2, [sp, #28]
 8012bee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012ec8 <__kernel_rem_pio2+0x318>
 8012bf2:	eb03 0802 	add.w	r8, r3, r2
 8012bf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012bf8:	1aa7      	subs	r7, r4, r2
 8012bfa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012bfe:	ae22      	add	r6, sp, #136	; 0x88
 8012c00:	2500      	movs	r5, #0
 8012c02:	4545      	cmp	r5, r8
 8012c04:	dd13      	ble.n	8012c2e <__kernel_rem_pio2+0x7e>
 8012c06:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012ec8 <__kernel_rem_pio2+0x318>
 8012c0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012c0e:	2600      	movs	r6, #0
 8012c10:	9b04      	ldr	r3, [sp, #16]
 8012c12:	429e      	cmp	r6, r3
 8012c14:	dc32      	bgt.n	8012c7c <__kernel_rem_pio2+0xcc>
 8012c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c18:	9302      	str	r3, [sp, #8]
 8012c1a:	9b08      	ldr	r3, [sp, #32]
 8012c1c:	199d      	adds	r5, r3, r6
 8012c1e:	ab22      	add	r3, sp, #136	; 0x88
 8012c20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012c24:	9306      	str	r3, [sp, #24]
 8012c26:	ec59 8b18 	vmov	r8, r9, d8
 8012c2a:	2700      	movs	r7, #0
 8012c2c:	e01f      	b.n	8012c6e <__kernel_rem_pio2+0xbe>
 8012c2e:	42ef      	cmn	r7, r5
 8012c30:	d407      	bmi.n	8012c42 <__kernel_rem_pio2+0x92>
 8012c32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012c36:	f7ed fc8d 	bl	8000554 <__aeabi_i2d>
 8012c3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012c3e:	3501      	adds	r5, #1
 8012c40:	e7df      	b.n	8012c02 <__kernel_rem_pio2+0x52>
 8012c42:	ec51 0b18 	vmov	r0, r1, d8
 8012c46:	e7f8      	b.n	8012c3a <__kernel_rem_pio2+0x8a>
 8012c48:	9906      	ldr	r1, [sp, #24]
 8012c4a:	9d02      	ldr	r5, [sp, #8]
 8012c4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012c50:	9106      	str	r1, [sp, #24]
 8012c52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012c56:	9502      	str	r5, [sp, #8]
 8012c58:	f7ed fce6 	bl	8000628 <__aeabi_dmul>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4640      	mov	r0, r8
 8012c62:	4649      	mov	r1, r9
 8012c64:	f7ed fb2a 	bl	80002bc <__adddf3>
 8012c68:	3701      	adds	r7, #1
 8012c6a:	4680      	mov	r8, r0
 8012c6c:	4689      	mov	r9, r1
 8012c6e:	9b07      	ldr	r3, [sp, #28]
 8012c70:	429f      	cmp	r7, r3
 8012c72:	dde9      	ble.n	8012c48 <__kernel_rem_pio2+0x98>
 8012c74:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012c78:	3601      	adds	r6, #1
 8012c7a:	e7c9      	b.n	8012c10 <__kernel_rem_pio2+0x60>
 8012c7c:	9b04      	ldr	r3, [sp, #16]
 8012c7e:	aa0e      	add	r2, sp, #56	; 0x38
 8012c80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c84:	930c      	str	r3, [sp, #48]	; 0x30
 8012c86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012c88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012c8c:	9c04      	ldr	r4, [sp, #16]
 8012c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c90:	ab9a      	add	r3, sp, #616	; 0x268
 8012c92:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012c96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012ca2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012ca6:	ab9a      	add	r3, sp, #616	; 0x268
 8012ca8:	445b      	add	r3, fp
 8012caa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012cae:	2500      	movs	r5, #0
 8012cb0:	1b63      	subs	r3, r4, r5
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	dc78      	bgt.n	8012da8 <__kernel_rem_pio2+0x1f8>
 8012cb6:	4650      	mov	r0, sl
 8012cb8:	ec49 8b10 	vmov	d0, r8, r9
 8012cbc:	f000 fc00 	bl	80134c0 <scalbn>
 8012cc0:	ec57 6b10 	vmov	r6, r7, d0
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012cca:	ee10 0a10 	vmov	r0, s0
 8012cce:	4639      	mov	r1, r7
 8012cd0:	f7ed fcaa 	bl	8000628 <__aeabi_dmul>
 8012cd4:	ec41 0b10 	vmov	d0, r0, r1
 8012cd8:	f000 fb6e 	bl	80133b8 <floor>
 8012cdc:	2200      	movs	r2, #0
 8012cde:	ec51 0b10 	vmov	r0, r1, d0
 8012ce2:	4b7e      	ldr	r3, [pc, #504]	; (8012edc <__kernel_rem_pio2+0x32c>)
 8012ce4:	f7ed fca0 	bl	8000628 <__aeabi_dmul>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	460b      	mov	r3, r1
 8012cec:	4630      	mov	r0, r6
 8012cee:	4639      	mov	r1, r7
 8012cf0:	f7ed fae2 	bl	80002b8 <__aeabi_dsub>
 8012cf4:	460f      	mov	r7, r1
 8012cf6:	4606      	mov	r6, r0
 8012cf8:	f7ed ff46 	bl	8000b88 <__aeabi_d2iz>
 8012cfc:	9006      	str	r0, [sp, #24]
 8012cfe:	f7ed fc29 	bl	8000554 <__aeabi_i2d>
 8012d02:	4602      	mov	r2, r0
 8012d04:	460b      	mov	r3, r1
 8012d06:	4630      	mov	r0, r6
 8012d08:	4639      	mov	r1, r7
 8012d0a:	f7ed fad5 	bl	80002b8 <__aeabi_dsub>
 8012d0e:	f1ba 0f00 	cmp.w	sl, #0
 8012d12:	4606      	mov	r6, r0
 8012d14:	460f      	mov	r7, r1
 8012d16:	dd6c      	ble.n	8012df2 <__kernel_rem_pio2+0x242>
 8012d18:	1e62      	subs	r2, r4, #1
 8012d1a:	ab0e      	add	r3, sp, #56	; 0x38
 8012d1c:	f1ca 0118 	rsb	r1, sl, #24
 8012d20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d24:	9d06      	ldr	r5, [sp, #24]
 8012d26:	fa40 f301 	asr.w	r3, r0, r1
 8012d2a:	441d      	add	r5, r3
 8012d2c:	408b      	lsls	r3, r1
 8012d2e:	1ac0      	subs	r0, r0, r3
 8012d30:	ab0e      	add	r3, sp, #56	; 0x38
 8012d32:	9506      	str	r5, [sp, #24]
 8012d34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012d38:	f1ca 0317 	rsb	r3, sl, #23
 8012d3c:	fa40 f303 	asr.w	r3, r0, r3
 8012d40:	9302      	str	r3, [sp, #8]
 8012d42:	9b02      	ldr	r3, [sp, #8]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	dd62      	ble.n	8012e0e <__kernel_rem_pio2+0x25e>
 8012d48:	9b06      	ldr	r3, [sp, #24]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	9306      	str	r3, [sp, #24]
 8012d50:	4615      	mov	r5, r2
 8012d52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012d56:	4294      	cmp	r4, r2
 8012d58:	f300 8095 	bgt.w	8012e86 <__kernel_rem_pio2+0x2d6>
 8012d5c:	f1ba 0f00 	cmp.w	sl, #0
 8012d60:	dd07      	ble.n	8012d72 <__kernel_rem_pio2+0x1c2>
 8012d62:	f1ba 0f01 	cmp.w	sl, #1
 8012d66:	f000 80a2 	beq.w	8012eae <__kernel_rem_pio2+0x2fe>
 8012d6a:	f1ba 0f02 	cmp.w	sl, #2
 8012d6e:	f000 80c1 	beq.w	8012ef4 <__kernel_rem_pio2+0x344>
 8012d72:	9b02      	ldr	r3, [sp, #8]
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d14a      	bne.n	8012e0e <__kernel_rem_pio2+0x25e>
 8012d78:	4632      	mov	r2, r6
 8012d7a:	463b      	mov	r3, r7
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	4958      	ldr	r1, [pc, #352]	; (8012ee0 <__kernel_rem_pio2+0x330>)
 8012d80:	f7ed fa9a 	bl	80002b8 <__aeabi_dsub>
 8012d84:	4606      	mov	r6, r0
 8012d86:	460f      	mov	r7, r1
 8012d88:	2d00      	cmp	r5, #0
 8012d8a:	d040      	beq.n	8012e0e <__kernel_rem_pio2+0x25e>
 8012d8c:	4650      	mov	r0, sl
 8012d8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012ed0 <__kernel_rem_pio2+0x320>
 8012d92:	f000 fb95 	bl	80134c0 <scalbn>
 8012d96:	4630      	mov	r0, r6
 8012d98:	4639      	mov	r1, r7
 8012d9a:	ec53 2b10 	vmov	r2, r3, d0
 8012d9e:	f7ed fa8b 	bl	80002b8 <__aeabi_dsub>
 8012da2:	4606      	mov	r6, r0
 8012da4:	460f      	mov	r7, r1
 8012da6:	e032      	b.n	8012e0e <__kernel_rem_pio2+0x25e>
 8012da8:	2200      	movs	r2, #0
 8012daa:	4b4e      	ldr	r3, [pc, #312]	; (8012ee4 <__kernel_rem_pio2+0x334>)
 8012dac:	4640      	mov	r0, r8
 8012dae:	4649      	mov	r1, r9
 8012db0:	f7ed fc3a 	bl	8000628 <__aeabi_dmul>
 8012db4:	f7ed fee8 	bl	8000b88 <__aeabi_d2iz>
 8012db8:	f7ed fbcc 	bl	8000554 <__aeabi_i2d>
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	4b4a      	ldr	r3, [pc, #296]	; (8012ee8 <__kernel_rem_pio2+0x338>)
 8012dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dc4:	f7ed fc30 	bl	8000628 <__aeabi_dmul>
 8012dc8:	4602      	mov	r2, r0
 8012dca:	460b      	mov	r3, r1
 8012dcc:	4640      	mov	r0, r8
 8012dce:	4649      	mov	r1, r9
 8012dd0:	f7ed fa72 	bl	80002b8 <__aeabi_dsub>
 8012dd4:	f7ed fed8 	bl	8000b88 <__aeabi_d2iz>
 8012dd8:	ab0e      	add	r3, sp, #56	; 0x38
 8012dda:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012dde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012de6:	f7ed fa69 	bl	80002bc <__adddf3>
 8012dea:	3501      	adds	r5, #1
 8012dec:	4680      	mov	r8, r0
 8012dee:	4689      	mov	r9, r1
 8012df0:	e75e      	b.n	8012cb0 <__kernel_rem_pio2+0x100>
 8012df2:	d105      	bne.n	8012e00 <__kernel_rem_pio2+0x250>
 8012df4:	1e63      	subs	r3, r4, #1
 8012df6:	aa0e      	add	r2, sp, #56	; 0x38
 8012df8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012dfc:	15c3      	asrs	r3, r0, #23
 8012dfe:	e79f      	b.n	8012d40 <__kernel_rem_pio2+0x190>
 8012e00:	2200      	movs	r2, #0
 8012e02:	4b3a      	ldr	r3, [pc, #232]	; (8012eec <__kernel_rem_pio2+0x33c>)
 8012e04:	f7ed fe96 	bl	8000b34 <__aeabi_dcmpge>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d139      	bne.n	8012e80 <__kernel_rem_pio2+0x2d0>
 8012e0c:	9002      	str	r0, [sp, #8]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	2300      	movs	r3, #0
 8012e12:	4630      	mov	r0, r6
 8012e14:	4639      	mov	r1, r7
 8012e16:	f7ed fe6f 	bl	8000af8 <__aeabi_dcmpeq>
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	f000 80c7 	beq.w	8012fae <__kernel_rem_pio2+0x3fe>
 8012e20:	1e65      	subs	r5, r4, #1
 8012e22:	462b      	mov	r3, r5
 8012e24:	2200      	movs	r2, #0
 8012e26:	9904      	ldr	r1, [sp, #16]
 8012e28:	428b      	cmp	r3, r1
 8012e2a:	da6a      	bge.n	8012f02 <__kernel_rem_pio2+0x352>
 8012e2c:	2a00      	cmp	r2, #0
 8012e2e:	f000 8088 	beq.w	8012f42 <__kernel_rem_pio2+0x392>
 8012e32:	ab0e      	add	r3, sp, #56	; 0x38
 8012e34:	f1aa 0a18 	sub.w	sl, sl, #24
 8012e38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f000 80b4 	beq.w	8012faa <__kernel_rem_pio2+0x3fa>
 8012e42:	4650      	mov	r0, sl
 8012e44:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012ed0 <__kernel_rem_pio2+0x320>
 8012e48:	f000 fb3a 	bl	80134c0 <scalbn>
 8012e4c:	00ec      	lsls	r4, r5, #3
 8012e4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012e50:	191e      	adds	r6, r3, r4
 8012e52:	ec59 8b10 	vmov	r8, r9, d0
 8012e56:	f106 0a08 	add.w	sl, r6, #8
 8012e5a:	462f      	mov	r7, r5
 8012e5c:	2f00      	cmp	r7, #0
 8012e5e:	f280 80df 	bge.w	8013020 <__kernel_rem_pio2+0x470>
 8012e62:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012ec8 <__kernel_rem_pio2+0x318>
 8012e66:	f04f 0a00 	mov.w	sl, #0
 8012e6a:	eba5 030a 	sub.w	r3, r5, sl
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	f2c0 810a 	blt.w	8013088 <__kernel_rem_pio2+0x4d8>
 8012e74:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012ef0 <__kernel_rem_pio2+0x340>
 8012e78:	ec59 8b18 	vmov	r8, r9, d8
 8012e7c:	2700      	movs	r7, #0
 8012e7e:	e0f5      	b.n	801306c <__kernel_rem_pio2+0x4bc>
 8012e80:	2302      	movs	r3, #2
 8012e82:	9302      	str	r3, [sp, #8]
 8012e84:	e760      	b.n	8012d48 <__kernel_rem_pio2+0x198>
 8012e86:	ab0e      	add	r3, sp, #56	; 0x38
 8012e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e8c:	b94d      	cbnz	r5, 8012ea2 <__kernel_rem_pio2+0x2f2>
 8012e8e:	b12b      	cbz	r3, 8012e9c <__kernel_rem_pio2+0x2ec>
 8012e90:	a80e      	add	r0, sp, #56	; 0x38
 8012e92:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012e96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	3201      	adds	r2, #1
 8012e9e:	461d      	mov	r5, r3
 8012ea0:	e759      	b.n	8012d56 <__kernel_rem_pio2+0x1a6>
 8012ea2:	a80e      	add	r0, sp, #56	; 0x38
 8012ea4:	1acb      	subs	r3, r1, r3
 8012ea6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012eaa:	462b      	mov	r3, r5
 8012eac:	e7f6      	b.n	8012e9c <__kernel_rem_pio2+0x2ec>
 8012eae:	1e62      	subs	r2, r4, #1
 8012eb0:	ab0e      	add	r3, sp, #56	; 0x38
 8012eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012eba:	a90e      	add	r1, sp, #56	; 0x38
 8012ebc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ec0:	e757      	b.n	8012d72 <__kernel_rem_pio2+0x1c2>
 8012ec2:	bf00      	nop
 8012ec4:	f3af 8000 	nop.w
	...
 8012ed4:	3ff00000 	.word	0x3ff00000
 8012ed8:	08018c50 	.word	0x08018c50
 8012edc:	40200000 	.word	0x40200000
 8012ee0:	3ff00000 	.word	0x3ff00000
 8012ee4:	3e700000 	.word	0x3e700000
 8012ee8:	41700000 	.word	0x41700000
 8012eec:	3fe00000 	.word	0x3fe00000
 8012ef0:	08018c10 	.word	0x08018c10
 8012ef4:	1e62      	subs	r2, r4, #1
 8012ef6:	ab0e      	add	r3, sp, #56	; 0x38
 8012ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012efc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012f00:	e7db      	b.n	8012eba <__kernel_rem_pio2+0x30a>
 8012f02:	a90e      	add	r1, sp, #56	; 0x38
 8012f04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	430a      	orrs	r2, r1
 8012f0c:	e78b      	b.n	8012e26 <__kernel_rem_pio2+0x276>
 8012f0e:	3301      	adds	r3, #1
 8012f10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012f14:	2900      	cmp	r1, #0
 8012f16:	d0fa      	beq.n	8012f0e <__kernel_rem_pio2+0x35e>
 8012f18:	9a08      	ldr	r2, [sp, #32]
 8012f1a:	4422      	add	r2, r4
 8012f1c:	00d2      	lsls	r2, r2, #3
 8012f1e:	a922      	add	r1, sp, #136	; 0x88
 8012f20:	18e3      	adds	r3, r4, r3
 8012f22:	9206      	str	r2, [sp, #24]
 8012f24:	440a      	add	r2, r1
 8012f26:	9302      	str	r3, [sp, #8]
 8012f28:	f10b 0108 	add.w	r1, fp, #8
 8012f2c:	f102 0308 	add.w	r3, r2, #8
 8012f30:	1c66      	adds	r6, r4, #1
 8012f32:	910a      	str	r1, [sp, #40]	; 0x28
 8012f34:	2500      	movs	r5, #0
 8012f36:	930d      	str	r3, [sp, #52]	; 0x34
 8012f38:	9b02      	ldr	r3, [sp, #8]
 8012f3a:	42b3      	cmp	r3, r6
 8012f3c:	da04      	bge.n	8012f48 <__kernel_rem_pio2+0x398>
 8012f3e:	461c      	mov	r4, r3
 8012f40:	e6a6      	b.n	8012c90 <__kernel_rem_pio2+0xe0>
 8012f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f44:	2301      	movs	r3, #1
 8012f46:	e7e3      	b.n	8012f10 <__kernel_rem_pio2+0x360>
 8012f48:	9b06      	ldr	r3, [sp, #24]
 8012f4a:	18ef      	adds	r7, r5, r3
 8012f4c:	ab22      	add	r3, sp, #136	; 0x88
 8012f4e:	441f      	add	r7, r3
 8012f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012f56:	f7ed fafd 	bl	8000554 <__aeabi_i2d>
 8012f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f5c:	461c      	mov	r4, r3
 8012f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f60:	e9c7 0100 	strd	r0, r1, [r7]
 8012f64:	eb03 0b05 	add.w	fp, r3, r5
 8012f68:	2700      	movs	r7, #0
 8012f6a:	f04f 0800 	mov.w	r8, #0
 8012f6e:	f04f 0900 	mov.w	r9, #0
 8012f72:	9b07      	ldr	r3, [sp, #28]
 8012f74:	429f      	cmp	r7, r3
 8012f76:	dd08      	ble.n	8012f8a <__kernel_rem_pio2+0x3da>
 8012f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f7a:	aa72      	add	r2, sp, #456	; 0x1c8
 8012f7c:	18eb      	adds	r3, r5, r3
 8012f7e:	4413      	add	r3, r2
 8012f80:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012f84:	3601      	adds	r6, #1
 8012f86:	3508      	adds	r5, #8
 8012f88:	e7d6      	b.n	8012f38 <__kernel_rem_pio2+0x388>
 8012f8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012f8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012f92:	f7ed fb49 	bl	8000628 <__aeabi_dmul>
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	4649      	mov	r1, r9
 8012f9e:	f7ed f98d 	bl	80002bc <__adddf3>
 8012fa2:	3701      	adds	r7, #1
 8012fa4:	4680      	mov	r8, r0
 8012fa6:	4689      	mov	r9, r1
 8012fa8:	e7e3      	b.n	8012f72 <__kernel_rem_pio2+0x3c2>
 8012faa:	3d01      	subs	r5, #1
 8012fac:	e741      	b.n	8012e32 <__kernel_rem_pio2+0x282>
 8012fae:	f1ca 0000 	rsb	r0, sl, #0
 8012fb2:	ec47 6b10 	vmov	d0, r6, r7
 8012fb6:	f000 fa83 	bl	80134c0 <scalbn>
 8012fba:	ec57 6b10 	vmov	r6, r7, d0
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	4b99      	ldr	r3, [pc, #612]	; (8013228 <__kernel_rem_pio2+0x678>)
 8012fc2:	ee10 0a10 	vmov	r0, s0
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	f7ed fdb4 	bl	8000b34 <__aeabi_dcmpge>
 8012fcc:	b1f8      	cbz	r0, 801300e <__kernel_rem_pio2+0x45e>
 8012fce:	2200      	movs	r2, #0
 8012fd0:	4b96      	ldr	r3, [pc, #600]	; (801322c <__kernel_rem_pio2+0x67c>)
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	4639      	mov	r1, r7
 8012fd6:	f7ed fb27 	bl	8000628 <__aeabi_dmul>
 8012fda:	f7ed fdd5 	bl	8000b88 <__aeabi_d2iz>
 8012fde:	4680      	mov	r8, r0
 8012fe0:	f7ed fab8 	bl	8000554 <__aeabi_i2d>
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	4b90      	ldr	r3, [pc, #576]	; (8013228 <__kernel_rem_pio2+0x678>)
 8012fe8:	f7ed fb1e 	bl	8000628 <__aeabi_dmul>
 8012fec:	460b      	mov	r3, r1
 8012fee:	4602      	mov	r2, r0
 8012ff0:	4639      	mov	r1, r7
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	f7ed f960 	bl	80002b8 <__aeabi_dsub>
 8012ff8:	f7ed fdc6 	bl	8000b88 <__aeabi_d2iz>
 8012ffc:	1c65      	adds	r5, r4, #1
 8012ffe:	ab0e      	add	r3, sp, #56	; 0x38
 8013000:	f10a 0a18 	add.w	sl, sl, #24
 8013004:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013008:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801300c:	e719      	b.n	8012e42 <__kernel_rem_pio2+0x292>
 801300e:	4630      	mov	r0, r6
 8013010:	4639      	mov	r1, r7
 8013012:	f7ed fdb9 	bl	8000b88 <__aeabi_d2iz>
 8013016:	ab0e      	add	r3, sp, #56	; 0x38
 8013018:	4625      	mov	r5, r4
 801301a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801301e:	e710      	b.n	8012e42 <__kernel_rem_pio2+0x292>
 8013020:	ab0e      	add	r3, sp, #56	; 0x38
 8013022:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013026:	f7ed fa95 	bl	8000554 <__aeabi_i2d>
 801302a:	4642      	mov	r2, r8
 801302c:	464b      	mov	r3, r9
 801302e:	f7ed fafb 	bl	8000628 <__aeabi_dmul>
 8013032:	2200      	movs	r2, #0
 8013034:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013038:	4b7c      	ldr	r3, [pc, #496]	; (801322c <__kernel_rem_pio2+0x67c>)
 801303a:	4640      	mov	r0, r8
 801303c:	4649      	mov	r1, r9
 801303e:	f7ed faf3 	bl	8000628 <__aeabi_dmul>
 8013042:	3f01      	subs	r7, #1
 8013044:	4680      	mov	r8, r0
 8013046:	4689      	mov	r9, r1
 8013048:	e708      	b.n	8012e5c <__kernel_rem_pio2+0x2ac>
 801304a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013052:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013056:	f7ed fae7 	bl	8000628 <__aeabi_dmul>
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	4640      	mov	r0, r8
 8013060:	4649      	mov	r1, r9
 8013062:	f7ed f92b 	bl	80002bc <__adddf3>
 8013066:	3701      	adds	r7, #1
 8013068:	4680      	mov	r8, r0
 801306a:	4689      	mov	r9, r1
 801306c:	9b04      	ldr	r3, [sp, #16]
 801306e:	429f      	cmp	r7, r3
 8013070:	dc01      	bgt.n	8013076 <__kernel_rem_pio2+0x4c6>
 8013072:	45ba      	cmp	sl, r7
 8013074:	dae9      	bge.n	801304a <__kernel_rem_pio2+0x49a>
 8013076:	ab4a      	add	r3, sp, #296	; 0x128
 8013078:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801307c:	e9c3 8900 	strd	r8, r9, [r3]
 8013080:	f10a 0a01 	add.w	sl, sl, #1
 8013084:	3e08      	subs	r6, #8
 8013086:	e6f0      	b.n	8012e6a <__kernel_rem_pio2+0x2ba>
 8013088:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801308a:	2b03      	cmp	r3, #3
 801308c:	d85b      	bhi.n	8013146 <__kernel_rem_pio2+0x596>
 801308e:	e8df f003 	tbb	[pc, r3]
 8013092:	264a      	.short	0x264a
 8013094:	0226      	.short	0x0226
 8013096:	ab9a      	add	r3, sp, #616	; 0x268
 8013098:	441c      	add	r4, r3
 801309a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801309e:	46a2      	mov	sl, r4
 80130a0:	46ab      	mov	fp, r5
 80130a2:	f1bb 0f00 	cmp.w	fp, #0
 80130a6:	dc6c      	bgt.n	8013182 <__kernel_rem_pio2+0x5d2>
 80130a8:	46a2      	mov	sl, r4
 80130aa:	46ab      	mov	fp, r5
 80130ac:	f1bb 0f01 	cmp.w	fp, #1
 80130b0:	f300 8086 	bgt.w	80131c0 <__kernel_rem_pio2+0x610>
 80130b4:	2000      	movs	r0, #0
 80130b6:	2100      	movs	r1, #0
 80130b8:	2d01      	cmp	r5, #1
 80130ba:	f300 80a0 	bgt.w	80131fe <__kernel_rem_pio2+0x64e>
 80130be:	9b02      	ldr	r3, [sp, #8]
 80130c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80130c4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f040 809e 	bne.w	801320a <__kernel_rem_pio2+0x65a>
 80130ce:	9b01      	ldr	r3, [sp, #4]
 80130d0:	e9c3 7800 	strd	r7, r8, [r3]
 80130d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80130d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80130dc:	e033      	b.n	8013146 <__kernel_rem_pio2+0x596>
 80130de:	3408      	adds	r4, #8
 80130e0:	ab4a      	add	r3, sp, #296	; 0x128
 80130e2:	441c      	add	r4, r3
 80130e4:	462e      	mov	r6, r5
 80130e6:	2000      	movs	r0, #0
 80130e8:	2100      	movs	r1, #0
 80130ea:	2e00      	cmp	r6, #0
 80130ec:	da3a      	bge.n	8013164 <__kernel_rem_pio2+0x5b4>
 80130ee:	9b02      	ldr	r3, [sp, #8]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d03d      	beq.n	8013170 <__kernel_rem_pio2+0x5c0>
 80130f4:	4602      	mov	r2, r0
 80130f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130fa:	9c01      	ldr	r4, [sp, #4]
 80130fc:	e9c4 2300 	strd	r2, r3, [r4]
 8013100:	4602      	mov	r2, r0
 8013102:	460b      	mov	r3, r1
 8013104:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013108:	f7ed f8d6 	bl	80002b8 <__aeabi_dsub>
 801310c:	ae4c      	add	r6, sp, #304	; 0x130
 801310e:	2401      	movs	r4, #1
 8013110:	42a5      	cmp	r5, r4
 8013112:	da30      	bge.n	8013176 <__kernel_rem_pio2+0x5c6>
 8013114:	9b02      	ldr	r3, [sp, #8]
 8013116:	b113      	cbz	r3, 801311e <__kernel_rem_pio2+0x56e>
 8013118:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801311c:	4619      	mov	r1, r3
 801311e:	9b01      	ldr	r3, [sp, #4]
 8013120:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013124:	e00f      	b.n	8013146 <__kernel_rem_pio2+0x596>
 8013126:	ab9a      	add	r3, sp, #616	; 0x268
 8013128:	441c      	add	r4, r3
 801312a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801312e:	2000      	movs	r0, #0
 8013130:	2100      	movs	r1, #0
 8013132:	2d00      	cmp	r5, #0
 8013134:	da10      	bge.n	8013158 <__kernel_rem_pio2+0x5a8>
 8013136:	9b02      	ldr	r3, [sp, #8]
 8013138:	b113      	cbz	r3, 8013140 <__kernel_rem_pio2+0x590>
 801313a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801313e:	4619      	mov	r1, r3
 8013140:	9b01      	ldr	r3, [sp, #4]
 8013142:	e9c3 0100 	strd	r0, r1, [r3]
 8013146:	9b06      	ldr	r3, [sp, #24]
 8013148:	f003 0007 	and.w	r0, r3, #7
 801314c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013150:	ecbd 8b02 	vpop	{d8}
 8013154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013158:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801315c:	f7ed f8ae 	bl	80002bc <__adddf3>
 8013160:	3d01      	subs	r5, #1
 8013162:	e7e6      	b.n	8013132 <__kernel_rem_pio2+0x582>
 8013164:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013168:	f7ed f8a8 	bl	80002bc <__adddf3>
 801316c:	3e01      	subs	r6, #1
 801316e:	e7bc      	b.n	80130ea <__kernel_rem_pio2+0x53a>
 8013170:	4602      	mov	r2, r0
 8013172:	460b      	mov	r3, r1
 8013174:	e7c1      	b.n	80130fa <__kernel_rem_pio2+0x54a>
 8013176:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801317a:	f7ed f89f 	bl	80002bc <__adddf3>
 801317e:	3401      	adds	r4, #1
 8013180:	e7c6      	b.n	8013110 <__kernel_rem_pio2+0x560>
 8013182:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013186:	ed3a 7b02 	vldmdb	sl!, {d7}
 801318a:	4640      	mov	r0, r8
 801318c:	ec53 2b17 	vmov	r2, r3, d7
 8013190:	4649      	mov	r1, r9
 8013192:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013196:	f7ed f891 	bl	80002bc <__adddf3>
 801319a:	4602      	mov	r2, r0
 801319c:	460b      	mov	r3, r1
 801319e:	4606      	mov	r6, r0
 80131a0:	460f      	mov	r7, r1
 80131a2:	4640      	mov	r0, r8
 80131a4:	4649      	mov	r1, r9
 80131a6:	f7ed f887 	bl	80002b8 <__aeabi_dsub>
 80131aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131ae:	f7ed f885 	bl	80002bc <__adddf3>
 80131b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131b6:	e9ca 0100 	strd	r0, r1, [sl]
 80131ba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80131be:	e770      	b.n	80130a2 <__kernel_rem_pio2+0x4f2>
 80131c0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80131c4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80131c8:	4630      	mov	r0, r6
 80131ca:	ec53 2b17 	vmov	r2, r3, d7
 80131ce:	4639      	mov	r1, r7
 80131d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80131d4:	f7ed f872 	bl	80002bc <__adddf3>
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	4680      	mov	r8, r0
 80131de:	4689      	mov	r9, r1
 80131e0:	4630      	mov	r0, r6
 80131e2:	4639      	mov	r1, r7
 80131e4:	f7ed f868 	bl	80002b8 <__aeabi_dsub>
 80131e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131ec:	f7ed f866 	bl	80002bc <__adddf3>
 80131f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131f4:	e9ca 0100 	strd	r0, r1, [sl]
 80131f8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80131fc:	e756      	b.n	80130ac <__kernel_rem_pio2+0x4fc>
 80131fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013202:	f7ed f85b 	bl	80002bc <__adddf3>
 8013206:	3d01      	subs	r5, #1
 8013208:	e756      	b.n	80130b8 <__kernel_rem_pio2+0x508>
 801320a:	9b01      	ldr	r3, [sp, #4]
 801320c:	9a01      	ldr	r2, [sp, #4]
 801320e:	601f      	str	r7, [r3, #0]
 8013210:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013214:	605c      	str	r4, [r3, #4]
 8013216:	609d      	str	r5, [r3, #8]
 8013218:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801321c:	60d3      	str	r3, [r2, #12]
 801321e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013222:	6110      	str	r0, [r2, #16]
 8013224:	6153      	str	r3, [r2, #20]
 8013226:	e78e      	b.n	8013146 <__kernel_rem_pio2+0x596>
 8013228:	41700000 	.word	0x41700000
 801322c:	3e700000 	.word	0x3e700000

08013230 <__kernel_sin>:
 8013230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013234:	ec55 4b10 	vmov	r4, r5, d0
 8013238:	b085      	sub	sp, #20
 801323a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801323e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013242:	ed8d 1b00 	vstr	d1, [sp]
 8013246:	9002      	str	r0, [sp, #8]
 8013248:	da06      	bge.n	8013258 <__kernel_sin+0x28>
 801324a:	ee10 0a10 	vmov	r0, s0
 801324e:	4629      	mov	r1, r5
 8013250:	f7ed fc9a 	bl	8000b88 <__aeabi_d2iz>
 8013254:	2800      	cmp	r0, #0
 8013256:	d051      	beq.n	80132fc <__kernel_sin+0xcc>
 8013258:	4622      	mov	r2, r4
 801325a:	462b      	mov	r3, r5
 801325c:	4620      	mov	r0, r4
 801325e:	4629      	mov	r1, r5
 8013260:	f7ed f9e2 	bl	8000628 <__aeabi_dmul>
 8013264:	4682      	mov	sl, r0
 8013266:	468b      	mov	fp, r1
 8013268:	4602      	mov	r2, r0
 801326a:	460b      	mov	r3, r1
 801326c:	4620      	mov	r0, r4
 801326e:	4629      	mov	r1, r5
 8013270:	f7ed f9da 	bl	8000628 <__aeabi_dmul>
 8013274:	a341      	add	r3, pc, #260	; (adr r3, 801337c <__kernel_sin+0x14c>)
 8013276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327a:	4680      	mov	r8, r0
 801327c:	4689      	mov	r9, r1
 801327e:	4650      	mov	r0, sl
 8013280:	4659      	mov	r1, fp
 8013282:	f7ed f9d1 	bl	8000628 <__aeabi_dmul>
 8013286:	a33f      	add	r3, pc, #252	; (adr r3, 8013384 <__kernel_sin+0x154>)
 8013288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328c:	f7ed f814 	bl	80002b8 <__aeabi_dsub>
 8013290:	4652      	mov	r2, sl
 8013292:	465b      	mov	r3, fp
 8013294:	f7ed f9c8 	bl	8000628 <__aeabi_dmul>
 8013298:	a33c      	add	r3, pc, #240	; (adr r3, 801338c <__kernel_sin+0x15c>)
 801329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329e:	f7ed f80d 	bl	80002bc <__adddf3>
 80132a2:	4652      	mov	r2, sl
 80132a4:	465b      	mov	r3, fp
 80132a6:	f7ed f9bf 	bl	8000628 <__aeabi_dmul>
 80132aa:	a33a      	add	r3, pc, #232	; (adr r3, 8013394 <__kernel_sin+0x164>)
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	f7ed f802 	bl	80002b8 <__aeabi_dsub>
 80132b4:	4652      	mov	r2, sl
 80132b6:	465b      	mov	r3, fp
 80132b8:	f7ed f9b6 	bl	8000628 <__aeabi_dmul>
 80132bc:	a337      	add	r3, pc, #220	; (adr r3, 801339c <__kernel_sin+0x16c>)
 80132be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c2:	f7ec fffb 	bl	80002bc <__adddf3>
 80132c6:	9b02      	ldr	r3, [sp, #8]
 80132c8:	4606      	mov	r6, r0
 80132ca:	460f      	mov	r7, r1
 80132cc:	b9db      	cbnz	r3, 8013306 <__kernel_sin+0xd6>
 80132ce:	4602      	mov	r2, r0
 80132d0:	460b      	mov	r3, r1
 80132d2:	4650      	mov	r0, sl
 80132d4:	4659      	mov	r1, fp
 80132d6:	f7ed f9a7 	bl	8000628 <__aeabi_dmul>
 80132da:	a325      	add	r3, pc, #148	; (adr r3, 8013370 <__kernel_sin+0x140>)
 80132dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e0:	f7ec ffea 	bl	80002b8 <__aeabi_dsub>
 80132e4:	4642      	mov	r2, r8
 80132e6:	464b      	mov	r3, r9
 80132e8:	f7ed f99e 	bl	8000628 <__aeabi_dmul>
 80132ec:	4602      	mov	r2, r0
 80132ee:	460b      	mov	r3, r1
 80132f0:	4620      	mov	r0, r4
 80132f2:	4629      	mov	r1, r5
 80132f4:	f7ec ffe2 	bl	80002bc <__adddf3>
 80132f8:	4604      	mov	r4, r0
 80132fa:	460d      	mov	r5, r1
 80132fc:	ec45 4b10 	vmov	d0, r4, r5
 8013300:	b005      	add	sp, #20
 8013302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013306:	2200      	movs	r2, #0
 8013308:	4b1b      	ldr	r3, [pc, #108]	; (8013378 <__kernel_sin+0x148>)
 801330a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801330e:	f7ed f98b 	bl	8000628 <__aeabi_dmul>
 8013312:	4632      	mov	r2, r6
 8013314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013318:	463b      	mov	r3, r7
 801331a:	4640      	mov	r0, r8
 801331c:	4649      	mov	r1, r9
 801331e:	f7ed f983 	bl	8000628 <__aeabi_dmul>
 8013322:	4602      	mov	r2, r0
 8013324:	460b      	mov	r3, r1
 8013326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801332a:	f7ec ffc5 	bl	80002b8 <__aeabi_dsub>
 801332e:	4652      	mov	r2, sl
 8013330:	465b      	mov	r3, fp
 8013332:	f7ed f979 	bl	8000628 <__aeabi_dmul>
 8013336:	e9dd 2300 	ldrd	r2, r3, [sp]
 801333a:	f7ec ffbd 	bl	80002b8 <__aeabi_dsub>
 801333e:	a30c      	add	r3, pc, #48	; (adr r3, 8013370 <__kernel_sin+0x140>)
 8013340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013344:	4606      	mov	r6, r0
 8013346:	460f      	mov	r7, r1
 8013348:	4640      	mov	r0, r8
 801334a:	4649      	mov	r1, r9
 801334c:	f7ed f96c 	bl	8000628 <__aeabi_dmul>
 8013350:	4602      	mov	r2, r0
 8013352:	460b      	mov	r3, r1
 8013354:	4630      	mov	r0, r6
 8013356:	4639      	mov	r1, r7
 8013358:	f7ec ffb0 	bl	80002bc <__adddf3>
 801335c:	4602      	mov	r2, r0
 801335e:	460b      	mov	r3, r1
 8013360:	4620      	mov	r0, r4
 8013362:	4629      	mov	r1, r5
 8013364:	f7ec ffa8 	bl	80002b8 <__aeabi_dsub>
 8013368:	e7c6      	b.n	80132f8 <__kernel_sin+0xc8>
 801336a:	bf00      	nop
 801336c:	f3af 8000 	nop.w
 8013370:	55555549 	.word	0x55555549
 8013374:	3fc55555 	.word	0x3fc55555
 8013378:	3fe00000 	.word	0x3fe00000
 801337c:	5acfd57c 	.word	0x5acfd57c
 8013380:	3de5d93a 	.word	0x3de5d93a
 8013384:	8a2b9ceb 	.word	0x8a2b9ceb
 8013388:	3e5ae5e6 	.word	0x3e5ae5e6
 801338c:	57b1fe7d 	.word	0x57b1fe7d
 8013390:	3ec71de3 	.word	0x3ec71de3
 8013394:	19c161d5 	.word	0x19c161d5
 8013398:	3f2a01a0 	.word	0x3f2a01a0
 801339c:	1110f8a6 	.word	0x1110f8a6
 80133a0:	3f811111 	.word	0x3f811111

080133a4 <fabs>:
 80133a4:	ec51 0b10 	vmov	r0, r1, d0
 80133a8:	ee10 2a10 	vmov	r2, s0
 80133ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80133b0:	ec43 2b10 	vmov	d0, r2, r3
 80133b4:	4770      	bx	lr
	...

080133b8 <floor>:
 80133b8:	ec51 0b10 	vmov	r0, r1, d0
 80133bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80133c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80133c8:	2e13      	cmp	r6, #19
 80133ca:	460c      	mov	r4, r1
 80133cc:	ee10 5a10 	vmov	r5, s0
 80133d0:	4680      	mov	r8, r0
 80133d2:	dc34      	bgt.n	801343e <floor+0x86>
 80133d4:	2e00      	cmp	r6, #0
 80133d6:	da16      	bge.n	8013406 <floor+0x4e>
 80133d8:	a335      	add	r3, pc, #212	; (adr r3, 80134b0 <floor+0xf8>)
 80133da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133de:	f7ec ff6d 	bl	80002bc <__adddf3>
 80133e2:	2200      	movs	r2, #0
 80133e4:	2300      	movs	r3, #0
 80133e6:	f7ed fbaf 	bl	8000b48 <__aeabi_dcmpgt>
 80133ea:	b148      	cbz	r0, 8013400 <floor+0x48>
 80133ec:	2c00      	cmp	r4, #0
 80133ee:	da59      	bge.n	80134a4 <floor+0xec>
 80133f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80133f4:	4a30      	ldr	r2, [pc, #192]	; (80134b8 <floor+0x100>)
 80133f6:	432b      	orrs	r3, r5
 80133f8:	2500      	movs	r5, #0
 80133fa:	42ab      	cmp	r3, r5
 80133fc:	bf18      	it	ne
 80133fe:	4614      	movne	r4, r2
 8013400:	4621      	mov	r1, r4
 8013402:	4628      	mov	r0, r5
 8013404:	e025      	b.n	8013452 <floor+0x9a>
 8013406:	4f2d      	ldr	r7, [pc, #180]	; (80134bc <floor+0x104>)
 8013408:	4137      	asrs	r7, r6
 801340a:	ea01 0307 	and.w	r3, r1, r7
 801340e:	4303      	orrs	r3, r0
 8013410:	d01f      	beq.n	8013452 <floor+0x9a>
 8013412:	a327      	add	r3, pc, #156	; (adr r3, 80134b0 <floor+0xf8>)
 8013414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013418:	f7ec ff50 	bl	80002bc <__adddf3>
 801341c:	2200      	movs	r2, #0
 801341e:	2300      	movs	r3, #0
 8013420:	f7ed fb92 	bl	8000b48 <__aeabi_dcmpgt>
 8013424:	2800      	cmp	r0, #0
 8013426:	d0eb      	beq.n	8013400 <floor+0x48>
 8013428:	2c00      	cmp	r4, #0
 801342a:	bfbe      	ittt	lt
 801342c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013430:	fa43 f606 	asrlt.w	r6, r3, r6
 8013434:	19a4      	addlt	r4, r4, r6
 8013436:	ea24 0407 	bic.w	r4, r4, r7
 801343a:	2500      	movs	r5, #0
 801343c:	e7e0      	b.n	8013400 <floor+0x48>
 801343e:	2e33      	cmp	r6, #51	; 0x33
 8013440:	dd0b      	ble.n	801345a <floor+0xa2>
 8013442:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013446:	d104      	bne.n	8013452 <floor+0x9a>
 8013448:	ee10 2a10 	vmov	r2, s0
 801344c:	460b      	mov	r3, r1
 801344e:	f7ec ff35 	bl	80002bc <__adddf3>
 8013452:	ec41 0b10 	vmov	d0, r0, r1
 8013456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801345a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801345e:	f04f 33ff 	mov.w	r3, #4294967295
 8013462:	fa23 f707 	lsr.w	r7, r3, r7
 8013466:	4207      	tst	r7, r0
 8013468:	d0f3      	beq.n	8013452 <floor+0x9a>
 801346a:	a311      	add	r3, pc, #68	; (adr r3, 80134b0 <floor+0xf8>)
 801346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013470:	f7ec ff24 	bl	80002bc <__adddf3>
 8013474:	2200      	movs	r2, #0
 8013476:	2300      	movs	r3, #0
 8013478:	f7ed fb66 	bl	8000b48 <__aeabi_dcmpgt>
 801347c:	2800      	cmp	r0, #0
 801347e:	d0bf      	beq.n	8013400 <floor+0x48>
 8013480:	2c00      	cmp	r4, #0
 8013482:	da02      	bge.n	801348a <floor+0xd2>
 8013484:	2e14      	cmp	r6, #20
 8013486:	d103      	bne.n	8013490 <floor+0xd8>
 8013488:	3401      	adds	r4, #1
 801348a:	ea25 0507 	bic.w	r5, r5, r7
 801348e:	e7b7      	b.n	8013400 <floor+0x48>
 8013490:	2301      	movs	r3, #1
 8013492:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013496:	fa03 f606 	lsl.w	r6, r3, r6
 801349a:	4435      	add	r5, r6
 801349c:	4545      	cmp	r5, r8
 801349e:	bf38      	it	cc
 80134a0:	18e4      	addcc	r4, r4, r3
 80134a2:	e7f2      	b.n	801348a <floor+0xd2>
 80134a4:	2500      	movs	r5, #0
 80134a6:	462c      	mov	r4, r5
 80134a8:	e7aa      	b.n	8013400 <floor+0x48>
 80134aa:	bf00      	nop
 80134ac:	f3af 8000 	nop.w
 80134b0:	8800759c 	.word	0x8800759c
 80134b4:	7e37e43c 	.word	0x7e37e43c
 80134b8:	bff00000 	.word	0xbff00000
 80134bc:	000fffff 	.word	0x000fffff

080134c0 <scalbn>:
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	ec55 4b10 	vmov	r4, r5, d0
 80134c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80134ca:	4606      	mov	r6, r0
 80134cc:	462b      	mov	r3, r5
 80134ce:	b9aa      	cbnz	r2, 80134fc <scalbn+0x3c>
 80134d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80134d4:	4323      	orrs	r3, r4
 80134d6:	d03b      	beq.n	8013550 <scalbn+0x90>
 80134d8:	4b31      	ldr	r3, [pc, #196]	; (80135a0 <scalbn+0xe0>)
 80134da:	4629      	mov	r1, r5
 80134dc:	2200      	movs	r2, #0
 80134de:	ee10 0a10 	vmov	r0, s0
 80134e2:	f7ed f8a1 	bl	8000628 <__aeabi_dmul>
 80134e6:	4b2f      	ldr	r3, [pc, #188]	; (80135a4 <scalbn+0xe4>)
 80134e8:	429e      	cmp	r6, r3
 80134ea:	4604      	mov	r4, r0
 80134ec:	460d      	mov	r5, r1
 80134ee:	da12      	bge.n	8013516 <scalbn+0x56>
 80134f0:	a327      	add	r3, pc, #156	; (adr r3, 8013590 <scalbn+0xd0>)
 80134f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f6:	f7ed f897 	bl	8000628 <__aeabi_dmul>
 80134fa:	e009      	b.n	8013510 <scalbn+0x50>
 80134fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013500:	428a      	cmp	r2, r1
 8013502:	d10c      	bne.n	801351e <scalbn+0x5e>
 8013504:	ee10 2a10 	vmov	r2, s0
 8013508:	4620      	mov	r0, r4
 801350a:	4629      	mov	r1, r5
 801350c:	f7ec fed6 	bl	80002bc <__adddf3>
 8013510:	4604      	mov	r4, r0
 8013512:	460d      	mov	r5, r1
 8013514:	e01c      	b.n	8013550 <scalbn+0x90>
 8013516:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801351a:	460b      	mov	r3, r1
 801351c:	3a36      	subs	r2, #54	; 0x36
 801351e:	4432      	add	r2, r6
 8013520:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013524:	428a      	cmp	r2, r1
 8013526:	dd0b      	ble.n	8013540 <scalbn+0x80>
 8013528:	ec45 4b11 	vmov	d1, r4, r5
 801352c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013598 <scalbn+0xd8>
 8013530:	f000 f83c 	bl	80135ac <copysign>
 8013534:	a318      	add	r3, pc, #96	; (adr r3, 8013598 <scalbn+0xd8>)
 8013536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353a:	ec51 0b10 	vmov	r0, r1, d0
 801353e:	e7da      	b.n	80134f6 <scalbn+0x36>
 8013540:	2a00      	cmp	r2, #0
 8013542:	dd08      	ble.n	8013556 <scalbn+0x96>
 8013544:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013548:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801354c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013550:	ec45 4b10 	vmov	d0, r4, r5
 8013554:	bd70      	pop	{r4, r5, r6, pc}
 8013556:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801355a:	da0d      	bge.n	8013578 <scalbn+0xb8>
 801355c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013560:	429e      	cmp	r6, r3
 8013562:	ec45 4b11 	vmov	d1, r4, r5
 8013566:	dce1      	bgt.n	801352c <scalbn+0x6c>
 8013568:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013590 <scalbn+0xd0>
 801356c:	f000 f81e 	bl	80135ac <copysign>
 8013570:	a307      	add	r3, pc, #28	; (adr r3, 8013590 <scalbn+0xd0>)
 8013572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013576:	e7e0      	b.n	801353a <scalbn+0x7a>
 8013578:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801357c:	3236      	adds	r2, #54	; 0x36
 801357e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013582:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013586:	4620      	mov	r0, r4
 8013588:	4629      	mov	r1, r5
 801358a:	2200      	movs	r2, #0
 801358c:	4b06      	ldr	r3, [pc, #24]	; (80135a8 <scalbn+0xe8>)
 801358e:	e7b2      	b.n	80134f6 <scalbn+0x36>
 8013590:	c2f8f359 	.word	0xc2f8f359
 8013594:	01a56e1f 	.word	0x01a56e1f
 8013598:	8800759c 	.word	0x8800759c
 801359c:	7e37e43c 	.word	0x7e37e43c
 80135a0:	43500000 	.word	0x43500000
 80135a4:	ffff3cb0 	.word	0xffff3cb0
 80135a8:	3c900000 	.word	0x3c900000

080135ac <copysign>:
 80135ac:	ec51 0b10 	vmov	r0, r1, d0
 80135b0:	ee11 0a90 	vmov	r0, s3
 80135b4:	ee10 2a10 	vmov	r2, s0
 80135b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80135bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80135c0:	ea41 0300 	orr.w	r3, r1, r0
 80135c4:	ec43 2b10 	vmov	d0, r2, r3
 80135c8:	4770      	bx	lr
	...

080135cc <__errno>:
 80135cc:	4b01      	ldr	r3, [pc, #4]	; (80135d4 <__errno+0x8>)
 80135ce:	6818      	ldr	r0, [r3, #0]
 80135d0:	4770      	bx	lr
 80135d2:	bf00      	nop
 80135d4:	2000000c 	.word	0x2000000c

080135d8 <__libc_init_array>:
 80135d8:	b570      	push	{r4, r5, r6, lr}
 80135da:	4e0d      	ldr	r6, [pc, #52]	; (8013610 <__libc_init_array+0x38>)
 80135dc:	4c0d      	ldr	r4, [pc, #52]	; (8013614 <__libc_init_array+0x3c>)
 80135de:	1ba4      	subs	r4, r4, r6
 80135e0:	10a4      	asrs	r4, r4, #2
 80135e2:	2500      	movs	r5, #0
 80135e4:	42a5      	cmp	r5, r4
 80135e6:	d109      	bne.n	80135fc <__libc_init_array+0x24>
 80135e8:	4e0b      	ldr	r6, [pc, #44]	; (8013618 <__libc_init_array+0x40>)
 80135ea:	4c0c      	ldr	r4, [pc, #48]	; (801361c <__libc_init_array+0x44>)
 80135ec:	f004 ff38 	bl	8018460 <_init>
 80135f0:	1ba4      	subs	r4, r4, r6
 80135f2:	10a4      	asrs	r4, r4, #2
 80135f4:	2500      	movs	r5, #0
 80135f6:	42a5      	cmp	r5, r4
 80135f8:	d105      	bne.n	8013606 <__libc_init_array+0x2e>
 80135fa:	bd70      	pop	{r4, r5, r6, pc}
 80135fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013600:	4798      	blx	r3
 8013602:	3501      	adds	r5, #1
 8013604:	e7ee      	b.n	80135e4 <__libc_init_array+0xc>
 8013606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801360a:	4798      	blx	r3
 801360c:	3501      	adds	r5, #1
 801360e:	e7f2      	b.n	80135f6 <__libc_init_array+0x1e>
 8013610:	08018fa4 	.word	0x08018fa4
 8013614:	08018fa4 	.word	0x08018fa4
 8013618:	08018fa4 	.word	0x08018fa4
 801361c:	08018fac 	.word	0x08018fac

08013620 <memcpy>:
 8013620:	b510      	push	{r4, lr}
 8013622:	1e43      	subs	r3, r0, #1
 8013624:	440a      	add	r2, r1
 8013626:	4291      	cmp	r1, r2
 8013628:	d100      	bne.n	801362c <memcpy+0xc>
 801362a:	bd10      	pop	{r4, pc}
 801362c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013634:	e7f7      	b.n	8013626 <memcpy+0x6>

08013636 <memset>:
 8013636:	4402      	add	r2, r0
 8013638:	4603      	mov	r3, r0
 801363a:	4293      	cmp	r3, r2
 801363c:	d100      	bne.n	8013640 <memset+0xa>
 801363e:	4770      	bx	lr
 8013640:	f803 1b01 	strb.w	r1, [r3], #1
 8013644:	e7f9      	b.n	801363a <memset+0x4>

08013646 <__cvt>:
 8013646:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801364a:	ec55 4b10 	vmov	r4, r5, d0
 801364e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013654:	2d00      	cmp	r5, #0
 8013656:	460e      	mov	r6, r1
 8013658:	4691      	mov	r9, r2
 801365a:	4619      	mov	r1, r3
 801365c:	bfb8      	it	lt
 801365e:	4622      	movlt	r2, r4
 8013660:	462b      	mov	r3, r5
 8013662:	f027 0720 	bic.w	r7, r7, #32
 8013666:	bfbb      	ittet	lt
 8013668:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801366c:	461d      	movlt	r5, r3
 801366e:	2300      	movge	r3, #0
 8013670:	232d      	movlt	r3, #45	; 0x2d
 8013672:	bfb8      	it	lt
 8013674:	4614      	movlt	r4, r2
 8013676:	2f46      	cmp	r7, #70	; 0x46
 8013678:	700b      	strb	r3, [r1, #0]
 801367a:	d004      	beq.n	8013686 <__cvt+0x40>
 801367c:	2f45      	cmp	r7, #69	; 0x45
 801367e:	d100      	bne.n	8013682 <__cvt+0x3c>
 8013680:	3601      	adds	r6, #1
 8013682:	2102      	movs	r1, #2
 8013684:	e000      	b.n	8013688 <__cvt+0x42>
 8013686:	2103      	movs	r1, #3
 8013688:	ab03      	add	r3, sp, #12
 801368a:	9301      	str	r3, [sp, #4]
 801368c:	ab02      	add	r3, sp, #8
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	4632      	mov	r2, r6
 8013692:	4653      	mov	r3, sl
 8013694:	ec45 4b10 	vmov	d0, r4, r5
 8013698:	f001 ffb2 	bl	8015600 <_dtoa_r>
 801369c:	2f47      	cmp	r7, #71	; 0x47
 801369e:	4680      	mov	r8, r0
 80136a0:	d102      	bne.n	80136a8 <__cvt+0x62>
 80136a2:	f019 0f01 	tst.w	r9, #1
 80136a6:	d026      	beq.n	80136f6 <__cvt+0xb0>
 80136a8:	2f46      	cmp	r7, #70	; 0x46
 80136aa:	eb08 0906 	add.w	r9, r8, r6
 80136ae:	d111      	bne.n	80136d4 <__cvt+0x8e>
 80136b0:	f898 3000 	ldrb.w	r3, [r8]
 80136b4:	2b30      	cmp	r3, #48	; 0x30
 80136b6:	d10a      	bne.n	80136ce <__cvt+0x88>
 80136b8:	2200      	movs	r2, #0
 80136ba:	2300      	movs	r3, #0
 80136bc:	4620      	mov	r0, r4
 80136be:	4629      	mov	r1, r5
 80136c0:	f7ed fa1a 	bl	8000af8 <__aeabi_dcmpeq>
 80136c4:	b918      	cbnz	r0, 80136ce <__cvt+0x88>
 80136c6:	f1c6 0601 	rsb	r6, r6, #1
 80136ca:	f8ca 6000 	str.w	r6, [sl]
 80136ce:	f8da 3000 	ldr.w	r3, [sl]
 80136d2:	4499      	add	r9, r3
 80136d4:	2200      	movs	r2, #0
 80136d6:	2300      	movs	r3, #0
 80136d8:	4620      	mov	r0, r4
 80136da:	4629      	mov	r1, r5
 80136dc:	f7ed fa0c 	bl	8000af8 <__aeabi_dcmpeq>
 80136e0:	b938      	cbnz	r0, 80136f2 <__cvt+0xac>
 80136e2:	2230      	movs	r2, #48	; 0x30
 80136e4:	9b03      	ldr	r3, [sp, #12]
 80136e6:	454b      	cmp	r3, r9
 80136e8:	d205      	bcs.n	80136f6 <__cvt+0xb0>
 80136ea:	1c59      	adds	r1, r3, #1
 80136ec:	9103      	str	r1, [sp, #12]
 80136ee:	701a      	strb	r2, [r3, #0]
 80136f0:	e7f8      	b.n	80136e4 <__cvt+0x9e>
 80136f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80136f6:	9b03      	ldr	r3, [sp, #12]
 80136f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136fa:	eba3 0308 	sub.w	r3, r3, r8
 80136fe:	4640      	mov	r0, r8
 8013700:	6013      	str	r3, [r2, #0]
 8013702:	b004      	add	sp, #16
 8013704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013708 <__exponent>:
 8013708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801370a:	2900      	cmp	r1, #0
 801370c:	4604      	mov	r4, r0
 801370e:	bfba      	itte	lt
 8013710:	4249      	neglt	r1, r1
 8013712:	232d      	movlt	r3, #45	; 0x2d
 8013714:	232b      	movge	r3, #43	; 0x2b
 8013716:	2909      	cmp	r1, #9
 8013718:	f804 2b02 	strb.w	r2, [r4], #2
 801371c:	7043      	strb	r3, [r0, #1]
 801371e:	dd20      	ble.n	8013762 <__exponent+0x5a>
 8013720:	f10d 0307 	add.w	r3, sp, #7
 8013724:	461f      	mov	r7, r3
 8013726:	260a      	movs	r6, #10
 8013728:	fb91 f5f6 	sdiv	r5, r1, r6
 801372c:	fb06 1115 	mls	r1, r6, r5, r1
 8013730:	3130      	adds	r1, #48	; 0x30
 8013732:	2d09      	cmp	r5, #9
 8013734:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013738:	f103 32ff 	add.w	r2, r3, #4294967295
 801373c:	4629      	mov	r1, r5
 801373e:	dc09      	bgt.n	8013754 <__exponent+0x4c>
 8013740:	3130      	adds	r1, #48	; 0x30
 8013742:	3b02      	subs	r3, #2
 8013744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013748:	42bb      	cmp	r3, r7
 801374a:	4622      	mov	r2, r4
 801374c:	d304      	bcc.n	8013758 <__exponent+0x50>
 801374e:	1a10      	subs	r0, r2, r0
 8013750:	b003      	add	sp, #12
 8013752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013754:	4613      	mov	r3, r2
 8013756:	e7e7      	b.n	8013728 <__exponent+0x20>
 8013758:	f813 2b01 	ldrb.w	r2, [r3], #1
 801375c:	f804 2b01 	strb.w	r2, [r4], #1
 8013760:	e7f2      	b.n	8013748 <__exponent+0x40>
 8013762:	2330      	movs	r3, #48	; 0x30
 8013764:	4419      	add	r1, r3
 8013766:	7083      	strb	r3, [r0, #2]
 8013768:	1d02      	adds	r2, r0, #4
 801376a:	70c1      	strb	r1, [r0, #3]
 801376c:	e7ef      	b.n	801374e <__exponent+0x46>
	...

08013770 <_printf_float>:
 8013770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013774:	b08d      	sub	sp, #52	; 0x34
 8013776:	460c      	mov	r4, r1
 8013778:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801377c:	4616      	mov	r6, r2
 801377e:	461f      	mov	r7, r3
 8013780:	4605      	mov	r5, r0
 8013782:	f003 f9a9 	bl	8016ad8 <_localeconv_r>
 8013786:	6803      	ldr	r3, [r0, #0]
 8013788:	9304      	str	r3, [sp, #16]
 801378a:	4618      	mov	r0, r3
 801378c:	f7ec fd38 	bl	8000200 <strlen>
 8013790:	2300      	movs	r3, #0
 8013792:	930a      	str	r3, [sp, #40]	; 0x28
 8013794:	f8d8 3000 	ldr.w	r3, [r8]
 8013798:	9005      	str	r0, [sp, #20]
 801379a:	3307      	adds	r3, #7
 801379c:	f023 0307 	bic.w	r3, r3, #7
 80137a0:	f103 0208 	add.w	r2, r3, #8
 80137a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80137a8:	f8d4 b000 	ldr.w	fp, [r4]
 80137ac:	f8c8 2000 	str.w	r2, [r8]
 80137b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80137b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80137bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80137c0:	9307      	str	r3, [sp, #28]
 80137c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80137c6:	f04f 32ff 	mov.w	r2, #4294967295
 80137ca:	4ba7      	ldr	r3, [pc, #668]	; (8013a68 <_printf_float+0x2f8>)
 80137cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137d0:	f7ed f9c4 	bl	8000b5c <__aeabi_dcmpun>
 80137d4:	bb70      	cbnz	r0, 8013834 <_printf_float+0xc4>
 80137d6:	f04f 32ff 	mov.w	r2, #4294967295
 80137da:	4ba3      	ldr	r3, [pc, #652]	; (8013a68 <_printf_float+0x2f8>)
 80137dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137e0:	f7ed f99e 	bl	8000b20 <__aeabi_dcmple>
 80137e4:	bb30      	cbnz	r0, 8013834 <_printf_float+0xc4>
 80137e6:	2200      	movs	r2, #0
 80137e8:	2300      	movs	r3, #0
 80137ea:	4640      	mov	r0, r8
 80137ec:	4649      	mov	r1, r9
 80137ee:	f7ed f98d 	bl	8000b0c <__aeabi_dcmplt>
 80137f2:	b110      	cbz	r0, 80137fa <_printf_float+0x8a>
 80137f4:	232d      	movs	r3, #45	; 0x2d
 80137f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137fa:	4a9c      	ldr	r2, [pc, #624]	; (8013a6c <_printf_float+0x2fc>)
 80137fc:	4b9c      	ldr	r3, [pc, #624]	; (8013a70 <_printf_float+0x300>)
 80137fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013802:	bf8c      	ite	hi
 8013804:	4690      	movhi	r8, r2
 8013806:	4698      	movls	r8, r3
 8013808:	2303      	movs	r3, #3
 801380a:	f02b 0204 	bic.w	r2, fp, #4
 801380e:	6123      	str	r3, [r4, #16]
 8013810:	6022      	str	r2, [r4, #0]
 8013812:	f04f 0900 	mov.w	r9, #0
 8013816:	9700      	str	r7, [sp, #0]
 8013818:	4633      	mov	r3, r6
 801381a:	aa0b      	add	r2, sp, #44	; 0x2c
 801381c:	4621      	mov	r1, r4
 801381e:	4628      	mov	r0, r5
 8013820:	f000 f9e6 	bl	8013bf0 <_printf_common>
 8013824:	3001      	adds	r0, #1
 8013826:	f040 808d 	bne.w	8013944 <_printf_float+0x1d4>
 801382a:	f04f 30ff 	mov.w	r0, #4294967295
 801382e:	b00d      	add	sp, #52	; 0x34
 8013830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013834:	4642      	mov	r2, r8
 8013836:	464b      	mov	r3, r9
 8013838:	4640      	mov	r0, r8
 801383a:	4649      	mov	r1, r9
 801383c:	f7ed f98e 	bl	8000b5c <__aeabi_dcmpun>
 8013840:	b110      	cbz	r0, 8013848 <_printf_float+0xd8>
 8013842:	4a8c      	ldr	r2, [pc, #560]	; (8013a74 <_printf_float+0x304>)
 8013844:	4b8c      	ldr	r3, [pc, #560]	; (8013a78 <_printf_float+0x308>)
 8013846:	e7da      	b.n	80137fe <_printf_float+0x8e>
 8013848:	6861      	ldr	r1, [r4, #4]
 801384a:	1c4b      	adds	r3, r1, #1
 801384c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013850:	a80a      	add	r0, sp, #40	; 0x28
 8013852:	d13e      	bne.n	80138d2 <_printf_float+0x162>
 8013854:	2306      	movs	r3, #6
 8013856:	6063      	str	r3, [r4, #4]
 8013858:	2300      	movs	r3, #0
 801385a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801385e:	ab09      	add	r3, sp, #36	; 0x24
 8013860:	9300      	str	r3, [sp, #0]
 8013862:	ec49 8b10 	vmov	d0, r8, r9
 8013866:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801386a:	6022      	str	r2, [r4, #0]
 801386c:	f8cd a004 	str.w	sl, [sp, #4]
 8013870:	6861      	ldr	r1, [r4, #4]
 8013872:	4628      	mov	r0, r5
 8013874:	f7ff fee7 	bl	8013646 <__cvt>
 8013878:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801387c:	2b47      	cmp	r3, #71	; 0x47
 801387e:	4680      	mov	r8, r0
 8013880:	d109      	bne.n	8013896 <_printf_float+0x126>
 8013882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013884:	1cd8      	adds	r0, r3, #3
 8013886:	db02      	blt.n	801388e <_printf_float+0x11e>
 8013888:	6862      	ldr	r2, [r4, #4]
 801388a:	4293      	cmp	r3, r2
 801388c:	dd47      	ble.n	801391e <_printf_float+0x1ae>
 801388e:	f1aa 0a02 	sub.w	sl, sl, #2
 8013892:	fa5f fa8a 	uxtb.w	sl, sl
 8013896:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801389a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801389c:	d824      	bhi.n	80138e8 <_printf_float+0x178>
 801389e:	3901      	subs	r1, #1
 80138a0:	4652      	mov	r2, sl
 80138a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80138a6:	9109      	str	r1, [sp, #36]	; 0x24
 80138a8:	f7ff ff2e 	bl	8013708 <__exponent>
 80138ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138ae:	1813      	adds	r3, r2, r0
 80138b0:	2a01      	cmp	r2, #1
 80138b2:	4681      	mov	r9, r0
 80138b4:	6123      	str	r3, [r4, #16]
 80138b6:	dc02      	bgt.n	80138be <_printf_float+0x14e>
 80138b8:	6822      	ldr	r2, [r4, #0]
 80138ba:	07d1      	lsls	r1, r2, #31
 80138bc:	d501      	bpl.n	80138c2 <_printf_float+0x152>
 80138be:	3301      	adds	r3, #1
 80138c0:	6123      	str	r3, [r4, #16]
 80138c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d0a5      	beq.n	8013816 <_printf_float+0xa6>
 80138ca:	232d      	movs	r3, #45	; 0x2d
 80138cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138d0:	e7a1      	b.n	8013816 <_printf_float+0xa6>
 80138d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80138d6:	f000 8177 	beq.w	8013bc8 <_printf_float+0x458>
 80138da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80138de:	d1bb      	bne.n	8013858 <_printf_float+0xe8>
 80138e0:	2900      	cmp	r1, #0
 80138e2:	d1b9      	bne.n	8013858 <_printf_float+0xe8>
 80138e4:	2301      	movs	r3, #1
 80138e6:	e7b6      	b.n	8013856 <_printf_float+0xe6>
 80138e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80138ec:	d119      	bne.n	8013922 <_printf_float+0x1b2>
 80138ee:	2900      	cmp	r1, #0
 80138f0:	6863      	ldr	r3, [r4, #4]
 80138f2:	dd0c      	ble.n	801390e <_printf_float+0x19e>
 80138f4:	6121      	str	r1, [r4, #16]
 80138f6:	b913      	cbnz	r3, 80138fe <_printf_float+0x18e>
 80138f8:	6822      	ldr	r2, [r4, #0]
 80138fa:	07d2      	lsls	r2, r2, #31
 80138fc:	d502      	bpl.n	8013904 <_printf_float+0x194>
 80138fe:	3301      	adds	r3, #1
 8013900:	440b      	add	r3, r1
 8013902:	6123      	str	r3, [r4, #16]
 8013904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013906:	65a3      	str	r3, [r4, #88]	; 0x58
 8013908:	f04f 0900 	mov.w	r9, #0
 801390c:	e7d9      	b.n	80138c2 <_printf_float+0x152>
 801390e:	b913      	cbnz	r3, 8013916 <_printf_float+0x1a6>
 8013910:	6822      	ldr	r2, [r4, #0]
 8013912:	07d0      	lsls	r0, r2, #31
 8013914:	d501      	bpl.n	801391a <_printf_float+0x1aa>
 8013916:	3302      	adds	r3, #2
 8013918:	e7f3      	b.n	8013902 <_printf_float+0x192>
 801391a:	2301      	movs	r3, #1
 801391c:	e7f1      	b.n	8013902 <_printf_float+0x192>
 801391e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013922:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013926:	4293      	cmp	r3, r2
 8013928:	db05      	blt.n	8013936 <_printf_float+0x1c6>
 801392a:	6822      	ldr	r2, [r4, #0]
 801392c:	6123      	str	r3, [r4, #16]
 801392e:	07d1      	lsls	r1, r2, #31
 8013930:	d5e8      	bpl.n	8013904 <_printf_float+0x194>
 8013932:	3301      	adds	r3, #1
 8013934:	e7e5      	b.n	8013902 <_printf_float+0x192>
 8013936:	2b00      	cmp	r3, #0
 8013938:	bfd4      	ite	le
 801393a:	f1c3 0302 	rsble	r3, r3, #2
 801393e:	2301      	movgt	r3, #1
 8013940:	4413      	add	r3, r2
 8013942:	e7de      	b.n	8013902 <_printf_float+0x192>
 8013944:	6823      	ldr	r3, [r4, #0]
 8013946:	055a      	lsls	r2, r3, #21
 8013948:	d407      	bmi.n	801395a <_printf_float+0x1ea>
 801394a:	6923      	ldr	r3, [r4, #16]
 801394c:	4642      	mov	r2, r8
 801394e:	4631      	mov	r1, r6
 8013950:	4628      	mov	r0, r5
 8013952:	47b8      	blx	r7
 8013954:	3001      	adds	r0, #1
 8013956:	d12b      	bne.n	80139b0 <_printf_float+0x240>
 8013958:	e767      	b.n	801382a <_printf_float+0xba>
 801395a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801395e:	f240 80dc 	bls.w	8013b1a <_printf_float+0x3aa>
 8013962:	2200      	movs	r2, #0
 8013964:	2300      	movs	r3, #0
 8013966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801396a:	f7ed f8c5 	bl	8000af8 <__aeabi_dcmpeq>
 801396e:	2800      	cmp	r0, #0
 8013970:	d033      	beq.n	80139da <_printf_float+0x26a>
 8013972:	2301      	movs	r3, #1
 8013974:	4a41      	ldr	r2, [pc, #260]	; (8013a7c <_printf_float+0x30c>)
 8013976:	4631      	mov	r1, r6
 8013978:	4628      	mov	r0, r5
 801397a:	47b8      	blx	r7
 801397c:	3001      	adds	r0, #1
 801397e:	f43f af54 	beq.w	801382a <_printf_float+0xba>
 8013982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013986:	429a      	cmp	r2, r3
 8013988:	db02      	blt.n	8013990 <_printf_float+0x220>
 801398a:	6823      	ldr	r3, [r4, #0]
 801398c:	07d8      	lsls	r0, r3, #31
 801398e:	d50f      	bpl.n	80139b0 <_printf_float+0x240>
 8013990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013994:	4631      	mov	r1, r6
 8013996:	4628      	mov	r0, r5
 8013998:	47b8      	blx	r7
 801399a:	3001      	adds	r0, #1
 801399c:	f43f af45 	beq.w	801382a <_printf_float+0xba>
 80139a0:	f04f 0800 	mov.w	r8, #0
 80139a4:	f104 091a 	add.w	r9, r4, #26
 80139a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139aa:	3b01      	subs	r3, #1
 80139ac:	4543      	cmp	r3, r8
 80139ae:	dc09      	bgt.n	80139c4 <_printf_float+0x254>
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	079b      	lsls	r3, r3, #30
 80139b4:	f100 8103 	bmi.w	8013bbe <_printf_float+0x44e>
 80139b8:	68e0      	ldr	r0, [r4, #12]
 80139ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139bc:	4298      	cmp	r0, r3
 80139be:	bfb8      	it	lt
 80139c0:	4618      	movlt	r0, r3
 80139c2:	e734      	b.n	801382e <_printf_float+0xbe>
 80139c4:	2301      	movs	r3, #1
 80139c6:	464a      	mov	r2, r9
 80139c8:	4631      	mov	r1, r6
 80139ca:	4628      	mov	r0, r5
 80139cc:	47b8      	blx	r7
 80139ce:	3001      	adds	r0, #1
 80139d0:	f43f af2b 	beq.w	801382a <_printf_float+0xba>
 80139d4:	f108 0801 	add.w	r8, r8, #1
 80139d8:	e7e6      	b.n	80139a8 <_printf_float+0x238>
 80139da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139dc:	2b00      	cmp	r3, #0
 80139de:	dc2b      	bgt.n	8013a38 <_printf_float+0x2c8>
 80139e0:	2301      	movs	r3, #1
 80139e2:	4a26      	ldr	r2, [pc, #152]	; (8013a7c <_printf_float+0x30c>)
 80139e4:	4631      	mov	r1, r6
 80139e6:	4628      	mov	r0, r5
 80139e8:	47b8      	blx	r7
 80139ea:	3001      	adds	r0, #1
 80139ec:	f43f af1d 	beq.w	801382a <_printf_float+0xba>
 80139f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139f2:	b923      	cbnz	r3, 80139fe <_printf_float+0x28e>
 80139f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139f6:	b913      	cbnz	r3, 80139fe <_printf_float+0x28e>
 80139f8:	6823      	ldr	r3, [r4, #0]
 80139fa:	07d9      	lsls	r1, r3, #31
 80139fc:	d5d8      	bpl.n	80139b0 <_printf_float+0x240>
 80139fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a02:	4631      	mov	r1, r6
 8013a04:	4628      	mov	r0, r5
 8013a06:	47b8      	blx	r7
 8013a08:	3001      	adds	r0, #1
 8013a0a:	f43f af0e 	beq.w	801382a <_printf_float+0xba>
 8013a0e:	f04f 0900 	mov.w	r9, #0
 8013a12:	f104 0a1a 	add.w	sl, r4, #26
 8013a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a18:	425b      	negs	r3, r3
 8013a1a:	454b      	cmp	r3, r9
 8013a1c:	dc01      	bgt.n	8013a22 <_printf_float+0x2b2>
 8013a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a20:	e794      	b.n	801394c <_printf_float+0x1dc>
 8013a22:	2301      	movs	r3, #1
 8013a24:	4652      	mov	r2, sl
 8013a26:	4631      	mov	r1, r6
 8013a28:	4628      	mov	r0, r5
 8013a2a:	47b8      	blx	r7
 8013a2c:	3001      	adds	r0, #1
 8013a2e:	f43f aefc 	beq.w	801382a <_printf_float+0xba>
 8013a32:	f109 0901 	add.w	r9, r9, #1
 8013a36:	e7ee      	b.n	8013a16 <_printf_float+0x2a6>
 8013a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	bfa8      	it	ge
 8013a40:	461a      	movge	r2, r3
 8013a42:	2a00      	cmp	r2, #0
 8013a44:	4691      	mov	r9, r2
 8013a46:	dd07      	ble.n	8013a58 <_printf_float+0x2e8>
 8013a48:	4613      	mov	r3, r2
 8013a4a:	4631      	mov	r1, r6
 8013a4c:	4642      	mov	r2, r8
 8013a4e:	4628      	mov	r0, r5
 8013a50:	47b8      	blx	r7
 8013a52:	3001      	adds	r0, #1
 8013a54:	f43f aee9 	beq.w	801382a <_printf_float+0xba>
 8013a58:	f104 031a 	add.w	r3, r4, #26
 8013a5c:	f04f 0b00 	mov.w	fp, #0
 8013a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a64:	9306      	str	r3, [sp, #24]
 8013a66:	e015      	b.n	8013a94 <_printf_float+0x324>
 8013a68:	7fefffff 	.word	0x7fefffff
 8013a6c:	08018c68 	.word	0x08018c68
 8013a70:	08018c64 	.word	0x08018c64
 8013a74:	08018c70 	.word	0x08018c70
 8013a78:	08018c6c 	.word	0x08018c6c
 8013a7c:	08018e93 	.word	0x08018e93
 8013a80:	2301      	movs	r3, #1
 8013a82:	9a06      	ldr	r2, [sp, #24]
 8013a84:	4631      	mov	r1, r6
 8013a86:	4628      	mov	r0, r5
 8013a88:	47b8      	blx	r7
 8013a8a:	3001      	adds	r0, #1
 8013a8c:	f43f aecd 	beq.w	801382a <_printf_float+0xba>
 8013a90:	f10b 0b01 	add.w	fp, fp, #1
 8013a94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013a98:	ebaa 0309 	sub.w	r3, sl, r9
 8013a9c:	455b      	cmp	r3, fp
 8013a9e:	dcef      	bgt.n	8013a80 <_printf_float+0x310>
 8013aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	44d0      	add	r8, sl
 8013aa8:	db15      	blt.n	8013ad6 <_printf_float+0x366>
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	07da      	lsls	r2, r3, #31
 8013aae:	d412      	bmi.n	8013ad6 <_printf_float+0x366>
 8013ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ab4:	eba3 020a 	sub.w	r2, r3, sl
 8013ab8:	eba3 0a01 	sub.w	sl, r3, r1
 8013abc:	4592      	cmp	sl, r2
 8013abe:	bfa8      	it	ge
 8013ac0:	4692      	movge	sl, r2
 8013ac2:	f1ba 0f00 	cmp.w	sl, #0
 8013ac6:	dc0e      	bgt.n	8013ae6 <_printf_float+0x376>
 8013ac8:	f04f 0800 	mov.w	r8, #0
 8013acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ad0:	f104 091a 	add.w	r9, r4, #26
 8013ad4:	e019      	b.n	8013b0a <_printf_float+0x39a>
 8013ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ada:	4631      	mov	r1, r6
 8013adc:	4628      	mov	r0, r5
 8013ade:	47b8      	blx	r7
 8013ae0:	3001      	adds	r0, #1
 8013ae2:	d1e5      	bne.n	8013ab0 <_printf_float+0x340>
 8013ae4:	e6a1      	b.n	801382a <_printf_float+0xba>
 8013ae6:	4653      	mov	r3, sl
 8013ae8:	4642      	mov	r2, r8
 8013aea:	4631      	mov	r1, r6
 8013aec:	4628      	mov	r0, r5
 8013aee:	47b8      	blx	r7
 8013af0:	3001      	adds	r0, #1
 8013af2:	d1e9      	bne.n	8013ac8 <_printf_float+0x358>
 8013af4:	e699      	b.n	801382a <_printf_float+0xba>
 8013af6:	2301      	movs	r3, #1
 8013af8:	464a      	mov	r2, r9
 8013afa:	4631      	mov	r1, r6
 8013afc:	4628      	mov	r0, r5
 8013afe:	47b8      	blx	r7
 8013b00:	3001      	adds	r0, #1
 8013b02:	f43f ae92 	beq.w	801382a <_printf_float+0xba>
 8013b06:	f108 0801 	add.w	r8, r8, #1
 8013b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b0e:	1a9b      	subs	r3, r3, r2
 8013b10:	eba3 030a 	sub.w	r3, r3, sl
 8013b14:	4543      	cmp	r3, r8
 8013b16:	dcee      	bgt.n	8013af6 <_printf_float+0x386>
 8013b18:	e74a      	b.n	80139b0 <_printf_float+0x240>
 8013b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b1c:	2a01      	cmp	r2, #1
 8013b1e:	dc01      	bgt.n	8013b24 <_printf_float+0x3b4>
 8013b20:	07db      	lsls	r3, r3, #31
 8013b22:	d53a      	bpl.n	8013b9a <_printf_float+0x42a>
 8013b24:	2301      	movs	r3, #1
 8013b26:	4642      	mov	r2, r8
 8013b28:	4631      	mov	r1, r6
 8013b2a:	4628      	mov	r0, r5
 8013b2c:	47b8      	blx	r7
 8013b2e:	3001      	adds	r0, #1
 8013b30:	f43f ae7b 	beq.w	801382a <_printf_float+0xba>
 8013b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b38:	4631      	mov	r1, r6
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	47b8      	blx	r7
 8013b3e:	3001      	adds	r0, #1
 8013b40:	f108 0801 	add.w	r8, r8, #1
 8013b44:	f43f ae71 	beq.w	801382a <_printf_float+0xba>
 8013b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	f103 3aff 	add.w	sl, r3, #4294967295
 8013b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013b54:	2300      	movs	r3, #0
 8013b56:	f7ec ffcf 	bl	8000af8 <__aeabi_dcmpeq>
 8013b5a:	b9c8      	cbnz	r0, 8013b90 <_printf_float+0x420>
 8013b5c:	4653      	mov	r3, sl
 8013b5e:	4642      	mov	r2, r8
 8013b60:	4631      	mov	r1, r6
 8013b62:	4628      	mov	r0, r5
 8013b64:	47b8      	blx	r7
 8013b66:	3001      	adds	r0, #1
 8013b68:	d10e      	bne.n	8013b88 <_printf_float+0x418>
 8013b6a:	e65e      	b.n	801382a <_printf_float+0xba>
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	4652      	mov	r2, sl
 8013b70:	4631      	mov	r1, r6
 8013b72:	4628      	mov	r0, r5
 8013b74:	47b8      	blx	r7
 8013b76:	3001      	adds	r0, #1
 8013b78:	f43f ae57 	beq.w	801382a <_printf_float+0xba>
 8013b7c:	f108 0801 	add.w	r8, r8, #1
 8013b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b82:	3b01      	subs	r3, #1
 8013b84:	4543      	cmp	r3, r8
 8013b86:	dcf1      	bgt.n	8013b6c <_printf_float+0x3fc>
 8013b88:	464b      	mov	r3, r9
 8013b8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013b8e:	e6de      	b.n	801394e <_printf_float+0x1de>
 8013b90:	f04f 0800 	mov.w	r8, #0
 8013b94:	f104 0a1a 	add.w	sl, r4, #26
 8013b98:	e7f2      	b.n	8013b80 <_printf_float+0x410>
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	e7df      	b.n	8013b5e <_printf_float+0x3ee>
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	464a      	mov	r2, r9
 8013ba2:	4631      	mov	r1, r6
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	47b8      	blx	r7
 8013ba8:	3001      	adds	r0, #1
 8013baa:	f43f ae3e 	beq.w	801382a <_printf_float+0xba>
 8013bae:	f108 0801 	add.w	r8, r8, #1
 8013bb2:	68e3      	ldr	r3, [r4, #12]
 8013bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bb6:	1a9b      	subs	r3, r3, r2
 8013bb8:	4543      	cmp	r3, r8
 8013bba:	dcf0      	bgt.n	8013b9e <_printf_float+0x42e>
 8013bbc:	e6fc      	b.n	80139b8 <_printf_float+0x248>
 8013bbe:	f04f 0800 	mov.w	r8, #0
 8013bc2:	f104 0919 	add.w	r9, r4, #25
 8013bc6:	e7f4      	b.n	8013bb2 <_printf_float+0x442>
 8013bc8:	2900      	cmp	r1, #0
 8013bca:	f43f ae8b 	beq.w	80138e4 <_printf_float+0x174>
 8013bce:	2300      	movs	r3, #0
 8013bd0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013bd4:	ab09      	add	r3, sp, #36	; 0x24
 8013bd6:	9300      	str	r3, [sp, #0]
 8013bd8:	ec49 8b10 	vmov	d0, r8, r9
 8013bdc:	6022      	str	r2, [r4, #0]
 8013bde:	f8cd a004 	str.w	sl, [sp, #4]
 8013be2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013be6:	4628      	mov	r0, r5
 8013be8:	f7ff fd2d 	bl	8013646 <__cvt>
 8013bec:	4680      	mov	r8, r0
 8013bee:	e648      	b.n	8013882 <_printf_float+0x112>

08013bf0 <_printf_common>:
 8013bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bf4:	4691      	mov	r9, r2
 8013bf6:	461f      	mov	r7, r3
 8013bf8:	688a      	ldr	r2, [r1, #8]
 8013bfa:	690b      	ldr	r3, [r1, #16]
 8013bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c00:	4293      	cmp	r3, r2
 8013c02:	bfb8      	it	lt
 8013c04:	4613      	movlt	r3, r2
 8013c06:	f8c9 3000 	str.w	r3, [r9]
 8013c0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c0e:	4606      	mov	r6, r0
 8013c10:	460c      	mov	r4, r1
 8013c12:	b112      	cbz	r2, 8013c1a <_printf_common+0x2a>
 8013c14:	3301      	adds	r3, #1
 8013c16:	f8c9 3000 	str.w	r3, [r9]
 8013c1a:	6823      	ldr	r3, [r4, #0]
 8013c1c:	0699      	lsls	r1, r3, #26
 8013c1e:	bf42      	ittt	mi
 8013c20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013c24:	3302      	addmi	r3, #2
 8013c26:	f8c9 3000 	strmi.w	r3, [r9]
 8013c2a:	6825      	ldr	r5, [r4, #0]
 8013c2c:	f015 0506 	ands.w	r5, r5, #6
 8013c30:	d107      	bne.n	8013c42 <_printf_common+0x52>
 8013c32:	f104 0a19 	add.w	sl, r4, #25
 8013c36:	68e3      	ldr	r3, [r4, #12]
 8013c38:	f8d9 2000 	ldr.w	r2, [r9]
 8013c3c:	1a9b      	subs	r3, r3, r2
 8013c3e:	42ab      	cmp	r3, r5
 8013c40:	dc28      	bgt.n	8013c94 <_printf_common+0xa4>
 8013c42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013c46:	6822      	ldr	r2, [r4, #0]
 8013c48:	3300      	adds	r3, #0
 8013c4a:	bf18      	it	ne
 8013c4c:	2301      	movne	r3, #1
 8013c4e:	0692      	lsls	r2, r2, #26
 8013c50:	d42d      	bmi.n	8013cae <_printf_common+0xbe>
 8013c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c56:	4639      	mov	r1, r7
 8013c58:	4630      	mov	r0, r6
 8013c5a:	47c0      	blx	r8
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	d020      	beq.n	8013ca2 <_printf_common+0xb2>
 8013c60:	6823      	ldr	r3, [r4, #0]
 8013c62:	68e5      	ldr	r5, [r4, #12]
 8013c64:	f8d9 2000 	ldr.w	r2, [r9]
 8013c68:	f003 0306 	and.w	r3, r3, #6
 8013c6c:	2b04      	cmp	r3, #4
 8013c6e:	bf08      	it	eq
 8013c70:	1aad      	subeq	r5, r5, r2
 8013c72:	68a3      	ldr	r3, [r4, #8]
 8013c74:	6922      	ldr	r2, [r4, #16]
 8013c76:	bf0c      	ite	eq
 8013c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c7c:	2500      	movne	r5, #0
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	bfc4      	itt	gt
 8013c82:	1a9b      	subgt	r3, r3, r2
 8013c84:	18ed      	addgt	r5, r5, r3
 8013c86:	f04f 0900 	mov.w	r9, #0
 8013c8a:	341a      	adds	r4, #26
 8013c8c:	454d      	cmp	r5, r9
 8013c8e:	d11a      	bne.n	8013cc6 <_printf_common+0xd6>
 8013c90:	2000      	movs	r0, #0
 8013c92:	e008      	b.n	8013ca6 <_printf_common+0xb6>
 8013c94:	2301      	movs	r3, #1
 8013c96:	4652      	mov	r2, sl
 8013c98:	4639      	mov	r1, r7
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	47c0      	blx	r8
 8013c9e:	3001      	adds	r0, #1
 8013ca0:	d103      	bne.n	8013caa <_printf_common+0xba>
 8013ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013caa:	3501      	adds	r5, #1
 8013cac:	e7c3      	b.n	8013c36 <_printf_common+0x46>
 8013cae:	18e1      	adds	r1, r4, r3
 8013cb0:	1c5a      	adds	r2, r3, #1
 8013cb2:	2030      	movs	r0, #48	; 0x30
 8013cb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013cb8:	4422      	add	r2, r4
 8013cba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013cc2:	3302      	adds	r3, #2
 8013cc4:	e7c5      	b.n	8013c52 <_printf_common+0x62>
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	4622      	mov	r2, r4
 8013cca:	4639      	mov	r1, r7
 8013ccc:	4630      	mov	r0, r6
 8013cce:	47c0      	blx	r8
 8013cd0:	3001      	adds	r0, #1
 8013cd2:	d0e6      	beq.n	8013ca2 <_printf_common+0xb2>
 8013cd4:	f109 0901 	add.w	r9, r9, #1
 8013cd8:	e7d8      	b.n	8013c8c <_printf_common+0x9c>
	...

08013cdc <_printf_i>:
 8013cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ce0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013ce4:	460c      	mov	r4, r1
 8013ce6:	7e09      	ldrb	r1, [r1, #24]
 8013ce8:	b085      	sub	sp, #20
 8013cea:	296e      	cmp	r1, #110	; 0x6e
 8013cec:	4617      	mov	r7, r2
 8013cee:	4606      	mov	r6, r0
 8013cf0:	4698      	mov	r8, r3
 8013cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cf4:	f000 80b3 	beq.w	8013e5e <_printf_i+0x182>
 8013cf8:	d822      	bhi.n	8013d40 <_printf_i+0x64>
 8013cfa:	2963      	cmp	r1, #99	; 0x63
 8013cfc:	d036      	beq.n	8013d6c <_printf_i+0x90>
 8013cfe:	d80a      	bhi.n	8013d16 <_printf_i+0x3a>
 8013d00:	2900      	cmp	r1, #0
 8013d02:	f000 80b9 	beq.w	8013e78 <_printf_i+0x19c>
 8013d06:	2958      	cmp	r1, #88	; 0x58
 8013d08:	f000 8083 	beq.w	8013e12 <_printf_i+0x136>
 8013d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013d14:	e032      	b.n	8013d7c <_printf_i+0xa0>
 8013d16:	2964      	cmp	r1, #100	; 0x64
 8013d18:	d001      	beq.n	8013d1e <_printf_i+0x42>
 8013d1a:	2969      	cmp	r1, #105	; 0x69
 8013d1c:	d1f6      	bne.n	8013d0c <_printf_i+0x30>
 8013d1e:	6820      	ldr	r0, [r4, #0]
 8013d20:	6813      	ldr	r3, [r2, #0]
 8013d22:	0605      	lsls	r5, r0, #24
 8013d24:	f103 0104 	add.w	r1, r3, #4
 8013d28:	d52a      	bpl.n	8013d80 <_printf_i+0xa4>
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	6011      	str	r1, [r2, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	da03      	bge.n	8013d3a <_printf_i+0x5e>
 8013d32:	222d      	movs	r2, #45	; 0x2d
 8013d34:	425b      	negs	r3, r3
 8013d36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013d3a:	486f      	ldr	r0, [pc, #444]	; (8013ef8 <_printf_i+0x21c>)
 8013d3c:	220a      	movs	r2, #10
 8013d3e:	e039      	b.n	8013db4 <_printf_i+0xd8>
 8013d40:	2973      	cmp	r1, #115	; 0x73
 8013d42:	f000 809d 	beq.w	8013e80 <_printf_i+0x1a4>
 8013d46:	d808      	bhi.n	8013d5a <_printf_i+0x7e>
 8013d48:	296f      	cmp	r1, #111	; 0x6f
 8013d4a:	d020      	beq.n	8013d8e <_printf_i+0xb2>
 8013d4c:	2970      	cmp	r1, #112	; 0x70
 8013d4e:	d1dd      	bne.n	8013d0c <_printf_i+0x30>
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	f043 0320 	orr.w	r3, r3, #32
 8013d56:	6023      	str	r3, [r4, #0]
 8013d58:	e003      	b.n	8013d62 <_printf_i+0x86>
 8013d5a:	2975      	cmp	r1, #117	; 0x75
 8013d5c:	d017      	beq.n	8013d8e <_printf_i+0xb2>
 8013d5e:	2978      	cmp	r1, #120	; 0x78
 8013d60:	d1d4      	bne.n	8013d0c <_printf_i+0x30>
 8013d62:	2378      	movs	r3, #120	; 0x78
 8013d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d68:	4864      	ldr	r0, [pc, #400]	; (8013efc <_printf_i+0x220>)
 8013d6a:	e055      	b.n	8013e18 <_printf_i+0x13c>
 8013d6c:	6813      	ldr	r3, [r2, #0]
 8013d6e:	1d19      	adds	r1, r3, #4
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	6011      	str	r1, [r2, #0]
 8013d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e08c      	b.n	8013e9a <_printf_i+0x1be>
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	6011      	str	r1, [r2, #0]
 8013d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d88:	bf18      	it	ne
 8013d8a:	b21b      	sxthne	r3, r3
 8013d8c:	e7cf      	b.n	8013d2e <_printf_i+0x52>
 8013d8e:	6813      	ldr	r3, [r2, #0]
 8013d90:	6825      	ldr	r5, [r4, #0]
 8013d92:	1d18      	adds	r0, r3, #4
 8013d94:	6010      	str	r0, [r2, #0]
 8013d96:	0628      	lsls	r0, r5, #24
 8013d98:	d501      	bpl.n	8013d9e <_printf_i+0xc2>
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	e002      	b.n	8013da4 <_printf_i+0xc8>
 8013d9e:	0668      	lsls	r0, r5, #25
 8013da0:	d5fb      	bpl.n	8013d9a <_printf_i+0xbe>
 8013da2:	881b      	ldrh	r3, [r3, #0]
 8013da4:	4854      	ldr	r0, [pc, #336]	; (8013ef8 <_printf_i+0x21c>)
 8013da6:	296f      	cmp	r1, #111	; 0x6f
 8013da8:	bf14      	ite	ne
 8013daa:	220a      	movne	r2, #10
 8013dac:	2208      	moveq	r2, #8
 8013dae:	2100      	movs	r1, #0
 8013db0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013db4:	6865      	ldr	r5, [r4, #4]
 8013db6:	60a5      	str	r5, [r4, #8]
 8013db8:	2d00      	cmp	r5, #0
 8013dba:	f2c0 8095 	blt.w	8013ee8 <_printf_i+0x20c>
 8013dbe:	6821      	ldr	r1, [r4, #0]
 8013dc0:	f021 0104 	bic.w	r1, r1, #4
 8013dc4:	6021      	str	r1, [r4, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d13d      	bne.n	8013e46 <_printf_i+0x16a>
 8013dca:	2d00      	cmp	r5, #0
 8013dcc:	f040 808e 	bne.w	8013eec <_printf_i+0x210>
 8013dd0:	4665      	mov	r5, ip
 8013dd2:	2a08      	cmp	r2, #8
 8013dd4:	d10b      	bne.n	8013dee <_printf_i+0x112>
 8013dd6:	6823      	ldr	r3, [r4, #0]
 8013dd8:	07db      	lsls	r3, r3, #31
 8013dda:	d508      	bpl.n	8013dee <_printf_i+0x112>
 8013ddc:	6923      	ldr	r3, [r4, #16]
 8013dde:	6862      	ldr	r2, [r4, #4]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	bfde      	ittt	le
 8013de4:	2330      	movle	r3, #48	; 0x30
 8013de6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013dea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013dee:	ebac 0305 	sub.w	r3, ip, r5
 8013df2:	6123      	str	r3, [r4, #16]
 8013df4:	f8cd 8000 	str.w	r8, [sp]
 8013df8:	463b      	mov	r3, r7
 8013dfa:	aa03      	add	r2, sp, #12
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f7ff fef6 	bl	8013bf0 <_printf_common>
 8013e04:	3001      	adds	r0, #1
 8013e06:	d14d      	bne.n	8013ea4 <_printf_i+0x1c8>
 8013e08:	f04f 30ff 	mov.w	r0, #4294967295
 8013e0c:	b005      	add	sp, #20
 8013e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e12:	4839      	ldr	r0, [pc, #228]	; (8013ef8 <_printf_i+0x21c>)
 8013e14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013e18:	6813      	ldr	r3, [r2, #0]
 8013e1a:	6821      	ldr	r1, [r4, #0]
 8013e1c:	1d1d      	adds	r5, r3, #4
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	6015      	str	r5, [r2, #0]
 8013e22:	060a      	lsls	r2, r1, #24
 8013e24:	d50b      	bpl.n	8013e3e <_printf_i+0x162>
 8013e26:	07ca      	lsls	r2, r1, #31
 8013e28:	bf44      	itt	mi
 8013e2a:	f041 0120 	orrmi.w	r1, r1, #32
 8013e2e:	6021      	strmi	r1, [r4, #0]
 8013e30:	b91b      	cbnz	r3, 8013e3a <_printf_i+0x15e>
 8013e32:	6822      	ldr	r2, [r4, #0]
 8013e34:	f022 0220 	bic.w	r2, r2, #32
 8013e38:	6022      	str	r2, [r4, #0]
 8013e3a:	2210      	movs	r2, #16
 8013e3c:	e7b7      	b.n	8013dae <_printf_i+0xd2>
 8013e3e:	064d      	lsls	r5, r1, #25
 8013e40:	bf48      	it	mi
 8013e42:	b29b      	uxthmi	r3, r3
 8013e44:	e7ef      	b.n	8013e26 <_printf_i+0x14a>
 8013e46:	4665      	mov	r5, ip
 8013e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e4c:	fb02 3311 	mls	r3, r2, r1, r3
 8013e50:	5cc3      	ldrb	r3, [r0, r3]
 8013e52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013e56:	460b      	mov	r3, r1
 8013e58:	2900      	cmp	r1, #0
 8013e5a:	d1f5      	bne.n	8013e48 <_printf_i+0x16c>
 8013e5c:	e7b9      	b.n	8013dd2 <_printf_i+0xf6>
 8013e5e:	6813      	ldr	r3, [r2, #0]
 8013e60:	6825      	ldr	r5, [r4, #0]
 8013e62:	6961      	ldr	r1, [r4, #20]
 8013e64:	1d18      	adds	r0, r3, #4
 8013e66:	6010      	str	r0, [r2, #0]
 8013e68:	0628      	lsls	r0, r5, #24
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	d501      	bpl.n	8013e72 <_printf_i+0x196>
 8013e6e:	6019      	str	r1, [r3, #0]
 8013e70:	e002      	b.n	8013e78 <_printf_i+0x19c>
 8013e72:	066a      	lsls	r2, r5, #25
 8013e74:	d5fb      	bpl.n	8013e6e <_printf_i+0x192>
 8013e76:	8019      	strh	r1, [r3, #0]
 8013e78:	2300      	movs	r3, #0
 8013e7a:	6123      	str	r3, [r4, #16]
 8013e7c:	4665      	mov	r5, ip
 8013e7e:	e7b9      	b.n	8013df4 <_printf_i+0x118>
 8013e80:	6813      	ldr	r3, [r2, #0]
 8013e82:	1d19      	adds	r1, r3, #4
 8013e84:	6011      	str	r1, [r2, #0]
 8013e86:	681d      	ldr	r5, [r3, #0]
 8013e88:	6862      	ldr	r2, [r4, #4]
 8013e8a:	2100      	movs	r1, #0
 8013e8c:	4628      	mov	r0, r5
 8013e8e:	f7ec f9bf 	bl	8000210 <memchr>
 8013e92:	b108      	cbz	r0, 8013e98 <_printf_i+0x1bc>
 8013e94:	1b40      	subs	r0, r0, r5
 8013e96:	6060      	str	r0, [r4, #4]
 8013e98:	6863      	ldr	r3, [r4, #4]
 8013e9a:	6123      	str	r3, [r4, #16]
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ea2:	e7a7      	b.n	8013df4 <_printf_i+0x118>
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	462a      	mov	r2, r5
 8013ea8:	4639      	mov	r1, r7
 8013eaa:	4630      	mov	r0, r6
 8013eac:	47c0      	blx	r8
 8013eae:	3001      	adds	r0, #1
 8013eb0:	d0aa      	beq.n	8013e08 <_printf_i+0x12c>
 8013eb2:	6823      	ldr	r3, [r4, #0]
 8013eb4:	079b      	lsls	r3, r3, #30
 8013eb6:	d413      	bmi.n	8013ee0 <_printf_i+0x204>
 8013eb8:	68e0      	ldr	r0, [r4, #12]
 8013eba:	9b03      	ldr	r3, [sp, #12]
 8013ebc:	4298      	cmp	r0, r3
 8013ebe:	bfb8      	it	lt
 8013ec0:	4618      	movlt	r0, r3
 8013ec2:	e7a3      	b.n	8013e0c <_printf_i+0x130>
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	464a      	mov	r2, r9
 8013ec8:	4639      	mov	r1, r7
 8013eca:	4630      	mov	r0, r6
 8013ecc:	47c0      	blx	r8
 8013ece:	3001      	adds	r0, #1
 8013ed0:	d09a      	beq.n	8013e08 <_printf_i+0x12c>
 8013ed2:	3501      	adds	r5, #1
 8013ed4:	68e3      	ldr	r3, [r4, #12]
 8013ed6:	9a03      	ldr	r2, [sp, #12]
 8013ed8:	1a9b      	subs	r3, r3, r2
 8013eda:	42ab      	cmp	r3, r5
 8013edc:	dcf2      	bgt.n	8013ec4 <_printf_i+0x1e8>
 8013ede:	e7eb      	b.n	8013eb8 <_printf_i+0x1dc>
 8013ee0:	2500      	movs	r5, #0
 8013ee2:	f104 0919 	add.w	r9, r4, #25
 8013ee6:	e7f5      	b.n	8013ed4 <_printf_i+0x1f8>
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d1ac      	bne.n	8013e46 <_printf_i+0x16a>
 8013eec:	7803      	ldrb	r3, [r0, #0]
 8013eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ef6:	e76c      	b.n	8013dd2 <_printf_i+0xf6>
 8013ef8:	08018c74 	.word	0x08018c74
 8013efc:	08018c85 	.word	0x08018c85

08013f00 <_scanf_float>:
 8013f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f04:	469a      	mov	sl, r3
 8013f06:	688b      	ldr	r3, [r1, #8]
 8013f08:	4616      	mov	r6, r2
 8013f0a:	1e5a      	subs	r2, r3, #1
 8013f0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013f10:	b087      	sub	sp, #28
 8013f12:	bf83      	ittte	hi
 8013f14:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013f18:	189b      	addhi	r3, r3, r2
 8013f1a:	9301      	strhi	r3, [sp, #4]
 8013f1c:	2300      	movls	r3, #0
 8013f1e:	bf86      	itte	hi
 8013f20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013f24:	608b      	strhi	r3, [r1, #8]
 8013f26:	9301      	strls	r3, [sp, #4]
 8013f28:	680b      	ldr	r3, [r1, #0]
 8013f2a:	4688      	mov	r8, r1
 8013f2c:	f04f 0b00 	mov.w	fp, #0
 8013f30:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013f34:	f848 3b1c 	str.w	r3, [r8], #28
 8013f38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	460c      	mov	r4, r1
 8013f40:	4645      	mov	r5, r8
 8013f42:	465a      	mov	r2, fp
 8013f44:	46d9      	mov	r9, fp
 8013f46:	f8cd b008 	str.w	fp, [sp, #8]
 8013f4a:	68a1      	ldr	r1, [r4, #8]
 8013f4c:	b181      	cbz	r1, 8013f70 <_scanf_float+0x70>
 8013f4e:	6833      	ldr	r3, [r6, #0]
 8013f50:	781b      	ldrb	r3, [r3, #0]
 8013f52:	2b49      	cmp	r3, #73	; 0x49
 8013f54:	d071      	beq.n	801403a <_scanf_float+0x13a>
 8013f56:	d84d      	bhi.n	8013ff4 <_scanf_float+0xf4>
 8013f58:	2b39      	cmp	r3, #57	; 0x39
 8013f5a:	d840      	bhi.n	8013fde <_scanf_float+0xde>
 8013f5c:	2b31      	cmp	r3, #49	; 0x31
 8013f5e:	f080 8088 	bcs.w	8014072 <_scanf_float+0x172>
 8013f62:	2b2d      	cmp	r3, #45	; 0x2d
 8013f64:	f000 8090 	beq.w	8014088 <_scanf_float+0x188>
 8013f68:	d815      	bhi.n	8013f96 <_scanf_float+0x96>
 8013f6a:	2b2b      	cmp	r3, #43	; 0x2b
 8013f6c:	f000 808c 	beq.w	8014088 <_scanf_float+0x188>
 8013f70:	f1b9 0f00 	cmp.w	r9, #0
 8013f74:	d003      	beq.n	8013f7e <_scanf_float+0x7e>
 8013f76:	6823      	ldr	r3, [r4, #0]
 8013f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f7c:	6023      	str	r3, [r4, #0]
 8013f7e:	3a01      	subs	r2, #1
 8013f80:	2a01      	cmp	r2, #1
 8013f82:	f200 80ea 	bhi.w	801415a <_scanf_float+0x25a>
 8013f86:	4545      	cmp	r5, r8
 8013f88:	f200 80dc 	bhi.w	8014144 <_scanf_float+0x244>
 8013f8c:	2601      	movs	r6, #1
 8013f8e:	4630      	mov	r0, r6
 8013f90:	b007      	add	sp, #28
 8013f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f96:	2b2e      	cmp	r3, #46	; 0x2e
 8013f98:	f000 809f 	beq.w	80140da <_scanf_float+0x1da>
 8013f9c:	2b30      	cmp	r3, #48	; 0x30
 8013f9e:	d1e7      	bne.n	8013f70 <_scanf_float+0x70>
 8013fa0:	6820      	ldr	r0, [r4, #0]
 8013fa2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013fa6:	d064      	beq.n	8014072 <_scanf_float+0x172>
 8013fa8:	9b01      	ldr	r3, [sp, #4]
 8013faa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013fae:	6020      	str	r0, [r4, #0]
 8013fb0:	f109 0901 	add.w	r9, r9, #1
 8013fb4:	b11b      	cbz	r3, 8013fbe <_scanf_float+0xbe>
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	3101      	adds	r1, #1
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	60a1      	str	r1, [r4, #8]
 8013fbe:	68a3      	ldr	r3, [r4, #8]
 8013fc0:	3b01      	subs	r3, #1
 8013fc2:	60a3      	str	r3, [r4, #8]
 8013fc4:	6923      	ldr	r3, [r4, #16]
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	6123      	str	r3, [r4, #16]
 8013fca:	6873      	ldr	r3, [r6, #4]
 8013fcc:	3b01      	subs	r3, #1
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	6073      	str	r3, [r6, #4]
 8013fd2:	f340 80ac 	ble.w	801412e <_scanf_float+0x22e>
 8013fd6:	6833      	ldr	r3, [r6, #0]
 8013fd8:	3301      	adds	r3, #1
 8013fda:	6033      	str	r3, [r6, #0]
 8013fdc:	e7b5      	b.n	8013f4a <_scanf_float+0x4a>
 8013fde:	2b45      	cmp	r3, #69	; 0x45
 8013fe0:	f000 8085 	beq.w	80140ee <_scanf_float+0x1ee>
 8013fe4:	2b46      	cmp	r3, #70	; 0x46
 8013fe6:	d06a      	beq.n	80140be <_scanf_float+0x1be>
 8013fe8:	2b41      	cmp	r3, #65	; 0x41
 8013fea:	d1c1      	bne.n	8013f70 <_scanf_float+0x70>
 8013fec:	2a01      	cmp	r2, #1
 8013fee:	d1bf      	bne.n	8013f70 <_scanf_float+0x70>
 8013ff0:	2202      	movs	r2, #2
 8013ff2:	e046      	b.n	8014082 <_scanf_float+0x182>
 8013ff4:	2b65      	cmp	r3, #101	; 0x65
 8013ff6:	d07a      	beq.n	80140ee <_scanf_float+0x1ee>
 8013ff8:	d818      	bhi.n	801402c <_scanf_float+0x12c>
 8013ffa:	2b54      	cmp	r3, #84	; 0x54
 8013ffc:	d066      	beq.n	80140cc <_scanf_float+0x1cc>
 8013ffe:	d811      	bhi.n	8014024 <_scanf_float+0x124>
 8014000:	2b4e      	cmp	r3, #78	; 0x4e
 8014002:	d1b5      	bne.n	8013f70 <_scanf_float+0x70>
 8014004:	2a00      	cmp	r2, #0
 8014006:	d146      	bne.n	8014096 <_scanf_float+0x196>
 8014008:	f1b9 0f00 	cmp.w	r9, #0
 801400c:	d145      	bne.n	801409a <_scanf_float+0x19a>
 801400e:	6821      	ldr	r1, [r4, #0]
 8014010:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014014:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014018:	d13f      	bne.n	801409a <_scanf_float+0x19a>
 801401a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801401e:	6021      	str	r1, [r4, #0]
 8014020:	2201      	movs	r2, #1
 8014022:	e02e      	b.n	8014082 <_scanf_float+0x182>
 8014024:	2b59      	cmp	r3, #89	; 0x59
 8014026:	d01e      	beq.n	8014066 <_scanf_float+0x166>
 8014028:	2b61      	cmp	r3, #97	; 0x61
 801402a:	e7de      	b.n	8013fea <_scanf_float+0xea>
 801402c:	2b6e      	cmp	r3, #110	; 0x6e
 801402e:	d0e9      	beq.n	8014004 <_scanf_float+0x104>
 8014030:	d815      	bhi.n	801405e <_scanf_float+0x15e>
 8014032:	2b66      	cmp	r3, #102	; 0x66
 8014034:	d043      	beq.n	80140be <_scanf_float+0x1be>
 8014036:	2b69      	cmp	r3, #105	; 0x69
 8014038:	d19a      	bne.n	8013f70 <_scanf_float+0x70>
 801403a:	f1bb 0f00 	cmp.w	fp, #0
 801403e:	d138      	bne.n	80140b2 <_scanf_float+0x1b2>
 8014040:	f1b9 0f00 	cmp.w	r9, #0
 8014044:	d197      	bne.n	8013f76 <_scanf_float+0x76>
 8014046:	6821      	ldr	r1, [r4, #0]
 8014048:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801404c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014050:	d195      	bne.n	8013f7e <_scanf_float+0x7e>
 8014052:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014056:	6021      	str	r1, [r4, #0]
 8014058:	f04f 0b01 	mov.w	fp, #1
 801405c:	e011      	b.n	8014082 <_scanf_float+0x182>
 801405e:	2b74      	cmp	r3, #116	; 0x74
 8014060:	d034      	beq.n	80140cc <_scanf_float+0x1cc>
 8014062:	2b79      	cmp	r3, #121	; 0x79
 8014064:	d184      	bne.n	8013f70 <_scanf_float+0x70>
 8014066:	f1bb 0f07 	cmp.w	fp, #7
 801406a:	d181      	bne.n	8013f70 <_scanf_float+0x70>
 801406c:	f04f 0b08 	mov.w	fp, #8
 8014070:	e007      	b.n	8014082 <_scanf_float+0x182>
 8014072:	eb12 0f0b 	cmn.w	r2, fp
 8014076:	f47f af7b 	bne.w	8013f70 <_scanf_float+0x70>
 801407a:	6821      	ldr	r1, [r4, #0]
 801407c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014080:	6021      	str	r1, [r4, #0]
 8014082:	702b      	strb	r3, [r5, #0]
 8014084:	3501      	adds	r5, #1
 8014086:	e79a      	b.n	8013fbe <_scanf_float+0xbe>
 8014088:	6821      	ldr	r1, [r4, #0]
 801408a:	0608      	lsls	r0, r1, #24
 801408c:	f57f af70 	bpl.w	8013f70 <_scanf_float+0x70>
 8014090:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014094:	e7f4      	b.n	8014080 <_scanf_float+0x180>
 8014096:	2a02      	cmp	r2, #2
 8014098:	d047      	beq.n	801412a <_scanf_float+0x22a>
 801409a:	f1bb 0f01 	cmp.w	fp, #1
 801409e:	d003      	beq.n	80140a8 <_scanf_float+0x1a8>
 80140a0:	f1bb 0f04 	cmp.w	fp, #4
 80140a4:	f47f af64 	bne.w	8013f70 <_scanf_float+0x70>
 80140a8:	f10b 0b01 	add.w	fp, fp, #1
 80140ac:	fa5f fb8b 	uxtb.w	fp, fp
 80140b0:	e7e7      	b.n	8014082 <_scanf_float+0x182>
 80140b2:	f1bb 0f03 	cmp.w	fp, #3
 80140b6:	d0f7      	beq.n	80140a8 <_scanf_float+0x1a8>
 80140b8:	f1bb 0f05 	cmp.w	fp, #5
 80140bc:	e7f2      	b.n	80140a4 <_scanf_float+0x1a4>
 80140be:	f1bb 0f02 	cmp.w	fp, #2
 80140c2:	f47f af55 	bne.w	8013f70 <_scanf_float+0x70>
 80140c6:	f04f 0b03 	mov.w	fp, #3
 80140ca:	e7da      	b.n	8014082 <_scanf_float+0x182>
 80140cc:	f1bb 0f06 	cmp.w	fp, #6
 80140d0:	f47f af4e 	bne.w	8013f70 <_scanf_float+0x70>
 80140d4:	f04f 0b07 	mov.w	fp, #7
 80140d8:	e7d3      	b.n	8014082 <_scanf_float+0x182>
 80140da:	6821      	ldr	r1, [r4, #0]
 80140dc:	0588      	lsls	r0, r1, #22
 80140de:	f57f af47 	bpl.w	8013f70 <_scanf_float+0x70>
 80140e2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80140e6:	6021      	str	r1, [r4, #0]
 80140e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80140ec:	e7c9      	b.n	8014082 <_scanf_float+0x182>
 80140ee:	6821      	ldr	r1, [r4, #0]
 80140f0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80140f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80140f8:	d006      	beq.n	8014108 <_scanf_float+0x208>
 80140fa:	0548      	lsls	r0, r1, #21
 80140fc:	f57f af38 	bpl.w	8013f70 <_scanf_float+0x70>
 8014100:	f1b9 0f00 	cmp.w	r9, #0
 8014104:	f43f af3b 	beq.w	8013f7e <_scanf_float+0x7e>
 8014108:	0588      	lsls	r0, r1, #22
 801410a:	bf58      	it	pl
 801410c:	9802      	ldrpl	r0, [sp, #8]
 801410e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014112:	bf58      	it	pl
 8014114:	eba9 0000 	subpl.w	r0, r9, r0
 8014118:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801411c:	bf58      	it	pl
 801411e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014122:	6021      	str	r1, [r4, #0]
 8014124:	f04f 0900 	mov.w	r9, #0
 8014128:	e7ab      	b.n	8014082 <_scanf_float+0x182>
 801412a:	2203      	movs	r2, #3
 801412c:	e7a9      	b.n	8014082 <_scanf_float+0x182>
 801412e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014132:	9205      	str	r2, [sp, #20]
 8014134:	4631      	mov	r1, r6
 8014136:	4638      	mov	r0, r7
 8014138:	4798      	blx	r3
 801413a:	9a05      	ldr	r2, [sp, #20]
 801413c:	2800      	cmp	r0, #0
 801413e:	f43f af04 	beq.w	8013f4a <_scanf_float+0x4a>
 8014142:	e715      	b.n	8013f70 <_scanf_float+0x70>
 8014144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014148:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801414c:	4632      	mov	r2, r6
 801414e:	4638      	mov	r0, r7
 8014150:	4798      	blx	r3
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	3b01      	subs	r3, #1
 8014156:	6123      	str	r3, [r4, #16]
 8014158:	e715      	b.n	8013f86 <_scanf_float+0x86>
 801415a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801415e:	2b06      	cmp	r3, #6
 8014160:	d80a      	bhi.n	8014178 <_scanf_float+0x278>
 8014162:	f1bb 0f02 	cmp.w	fp, #2
 8014166:	d968      	bls.n	801423a <_scanf_float+0x33a>
 8014168:	f1ab 0b03 	sub.w	fp, fp, #3
 801416c:	fa5f fb8b 	uxtb.w	fp, fp
 8014170:	eba5 0b0b 	sub.w	fp, r5, fp
 8014174:	455d      	cmp	r5, fp
 8014176:	d14b      	bne.n	8014210 <_scanf_float+0x310>
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	05da      	lsls	r2, r3, #23
 801417c:	d51f      	bpl.n	80141be <_scanf_float+0x2be>
 801417e:	055b      	lsls	r3, r3, #21
 8014180:	d468      	bmi.n	8014254 <_scanf_float+0x354>
 8014182:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014186:	6923      	ldr	r3, [r4, #16]
 8014188:	2965      	cmp	r1, #101	; 0x65
 801418a:	f103 33ff 	add.w	r3, r3, #4294967295
 801418e:	f105 3bff 	add.w	fp, r5, #4294967295
 8014192:	6123      	str	r3, [r4, #16]
 8014194:	d00d      	beq.n	80141b2 <_scanf_float+0x2b2>
 8014196:	2945      	cmp	r1, #69	; 0x45
 8014198:	d00b      	beq.n	80141b2 <_scanf_float+0x2b2>
 801419a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801419e:	4632      	mov	r2, r6
 80141a0:	4638      	mov	r0, r7
 80141a2:	4798      	blx	r3
 80141a4:	6923      	ldr	r3, [r4, #16]
 80141a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80141aa:	3b01      	subs	r3, #1
 80141ac:	f1a5 0b02 	sub.w	fp, r5, #2
 80141b0:	6123      	str	r3, [r4, #16]
 80141b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141b6:	4632      	mov	r2, r6
 80141b8:	4638      	mov	r0, r7
 80141ba:	4798      	blx	r3
 80141bc:	465d      	mov	r5, fp
 80141be:	6826      	ldr	r6, [r4, #0]
 80141c0:	f016 0610 	ands.w	r6, r6, #16
 80141c4:	d17a      	bne.n	80142bc <_scanf_float+0x3bc>
 80141c6:	702e      	strb	r6, [r5, #0]
 80141c8:	6823      	ldr	r3, [r4, #0]
 80141ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80141ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80141d2:	d142      	bne.n	801425a <_scanf_float+0x35a>
 80141d4:	9b02      	ldr	r3, [sp, #8]
 80141d6:	eba9 0303 	sub.w	r3, r9, r3
 80141da:	425a      	negs	r2, r3
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d149      	bne.n	8014274 <_scanf_float+0x374>
 80141e0:	2200      	movs	r2, #0
 80141e2:	4641      	mov	r1, r8
 80141e4:	4638      	mov	r0, r7
 80141e6:	f000 ffdf 	bl	80151a8 <_strtod_r>
 80141ea:	6825      	ldr	r5, [r4, #0]
 80141ec:	f8da 3000 	ldr.w	r3, [sl]
 80141f0:	f015 0f02 	tst.w	r5, #2
 80141f4:	f103 0204 	add.w	r2, r3, #4
 80141f8:	ec59 8b10 	vmov	r8, r9, d0
 80141fc:	f8ca 2000 	str.w	r2, [sl]
 8014200:	d043      	beq.n	801428a <_scanf_float+0x38a>
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	e9c3 8900 	strd	r8, r9, [r3]
 8014208:	68e3      	ldr	r3, [r4, #12]
 801420a:	3301      	adds	r3, #1
 801420c:	60e3      	str	r3, [r4, #12]
 801420e:	e6be      	b.n	8013f8e <_scanf_float+0x8e>
 8014210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014214:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014218:	4632      	mov	r2, r6
 801421a:	4638      	mov	r0, r7
 801421c:	4798      	blx	r3
 801421e:	6923      	ldr	r3, [r4, #16]
 8014220:	3b01      	subs	r3, #1
 8014222:	6123      	str	r3, [r4, #16]
 8014224:	e7a6      	b.n	8014174 <_scanf_float+0x274>
 8014226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801422a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801422e:	4632      	mov	r2, r6
 8014230:	4638      	mov	r0, r7
 8014232:	4798      	blx	r3
 8014234:	6923      	ldr	r3, [r4, #16]
 8014236:	3b01      	subs	r3, #1
 8014238:	6123      	str	r3, [r4, #16]
 801423a:	4545      	cmp	r5, r8
 801423c:	d8f3      	bhi.n	8014226 <_scanf_float+0x326>
 801423e:	e6a5      	b.n	8013f8c <_scanf_float+0x8c>
 8014240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014244:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014248:	4632      	mov	r2, r6
 801424a:	4638      	mov	r0, r7
 801424c:	4798      	blx	r3
 801424e:	6923      	ldr	r3, [r4, #16]
 8014250:	3b01      	subs	r3, #1
 8014252:	6123      	str	r3, [r4, #16]
 8014254:	4545      	cmp	r5, r8
 8014256:	d8f3      	bhi.n	8014240 <_scanf_float+0x340>
 8014258:	e698      	b.n	8013f8c <_scanf_float+0x8c>
 801425a:	9b03      	ldr	r3, [sp, #12]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d0bf      	beq.n	80141e0 <_scanf_float+0x2e0>
 8014260:	9904      	ldr	r1, [sp, #16]
 8014262:	230a      	movs	r3, #10
 8014264:	4632      	mov	r2, r6
 8014266:	3101      	adds	r1, #1
 8014268:	4638      	mov	r0, r7
 801426a:	f001 f829 	bl	80152c0 <_strtol_r>
 801426e:	9b03      	ldr	r3, [sp, #12]
 8014270:	9d04      	ldr	r5, [sp, #16]
 8014272:	1ac2      	subs	r2, r0, r3
 8014274:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014278:	429d      	cmp	r5, r3
 801427a:	bf28      	it	cs
 801427c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014280:	490f      	ldr	r1, [pc, #60]	; (80142c0 <_scanf_float+0x3c0>)
 8014282:	4628      	mov	r0, r5
 8014284:	f000 f8e8 	bl	8014458 <siprintf>
 8014288:	e7aa      	b.n	80141e0 <_scanf_float+0x2e0>
 801428a:	f015 0504 	ands.w	r5, r5, #4
 801428e:	d1b8      	bne.n	8014202 <_scanf_float+0x302>
 8014290:	681f      	ldr	r7, [r3, #0]
 8014292:	ee10 2a10 	vmov	r2, s0
 8014296:	464b      	mov	r3, r9
 8014298:	ee10 0a10 	vmov	r0, s0
 801429c:	4649      	mov	r1, r9
 801429e:	f7ec fc5d 	bl	8000b5c <__aeabi_dcmpun>
 80142a2:	b128      	cbz	r0, 80142b0 <_scanf_float+0x3b0>
 80142a4:	4628      	mov	r0, r5
 80142a6:	f000 f89d 	bl	80143e4 <nanf>
 80142aa:	ed87 0a00 	vstr	s0, [r7]
 80142ae:	e7ab      	b.n	8014208 <_scanf_float+0x308>
 80142b0:	4640      	mov	r0, r8
 80142b2:	4649      	mov	r1, r9
 80142b4:	f7ec fcb0 	bl	8000c18 <__aeabi_d2f>
 80142b8:	6038      	str	r0, [r7, #0]
 80142ba:	e7a5      	b.n	8014208 <_scanf_float+0x308>
 80142bc:	2600      	movs	r6, #0
 80142be:	e666      	b.n	8013f8e <_scanf_float+0x8e>
 80142c0:	08018c96 	.word	0x08018c96

080142c4 <iprintf>:
 80142c4:	b40f      	push	{r0, r1, r2, r3}
 80142c6:	4b0a      	ldr	r3, [pc, #40]	; (80142f0 <iprintf+0x2c>)
 80142c8:	b513      	push	{r0, r1, r4, lr}
 80142ca:	681c      	ldr	r4, [r3, #0]
 80142cc:	b124      	cbz	r4, 80142d8 <iprintf+0x14>
 80142ce:	69a3      	ldr	r3, [r4, #24]
 80142d0:	b913      	cbnz	r3, 80142d8 <iprintf+0x14>
 80142d2:	4620      	mov	r0, r4
 80142d4:	f002 f83c 	bl	8016350 <__sinit>
 80142d8:	ab05      	add	r3, sp, #20
 80142da:	9a04      	ldr	r2, [sp, #16]
 80142dc:	68a1      	ldr	r1, [r4, #8]
 80142de:	9301      	str	r3, [sp, #4]
 80142e0:	4620      	mov	r0, r4
 80142e2:	f003 fc73 	bl	8017bcc <_vfiprintf_r>
 80142e6:	b002      	add	sp, #8
 80142e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142ec:	b004      	add	sp, #16
 80142ee:	4770      	bx	lr
 80142f0:	2000000c 	.word	0x2000000c

080142f4 <putchar>:
 80142f4:	b538      	push	{r3, r4, r5, lr}
 80142f6:	4b08      	ldr	r3, [pc, #32]	; (8014318 <putchar+0x24>)
 80142f8:	681c      	ldr	r4, [r3, #0]
 80142fa:	4605      	mov	r5, r0
 80142fc:	b124      	cbz	r4, 8014308 <putchar+0x14>
 80142fe:	69a3      	ldr	r3, [r4, #24]
 8014300:	b913      	cbnz	r3, 8014308 <putchar+0x14>
 8014302:	4620      	mov	r0, r4
 8014304:	f002 f824 	bl	8016350 <__sinit>
 8014308:	68a2      	ldr	r2, [r4, #8]
 801430a:	4629      	mov	r1, r5
 801430c:	4620      	mov	r0, r4
 801430e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014312:	f003 bec9 	b.w	80180a8 <_putc_r>
 8014316:	bf00      	nop
 8014318:	2000000c 	.word	0x2000000c

0801431c <_puts_r>:
 801431c:	b570      	push	{r4, r5, r6, lr}
 801431e:	460e      	mov	r6, r1
 8014320:	4605      	mov	r5, r0
 8014322:	b118      	cbz	r0, 801432c <_puts_r+0x10>
 8014324:	6983      	ldr	r3, [r0, #24]
 8014326:	b90b      	cbnz	r3, 801432c <_puts_r+0x10>
 8014328:	f002 f812 	bl	8016350 <__sinit>
 801432c:	69ab      	ldr	r3, [r5, #24]
 801432e:	68ac      	ldr	r4, [r5, #8]
 8014330:	b913      	cbnz	r3, 8014338 <_puts_r+0x1c>
 8014332:	4628      	mov	r0, r5
 8014334:	f002 f80c 	bl	8016350 <__sinit>
 8014338:	4b23      	ldr	r3, [pc, #140]	; (80143c8 <_puts_r+0xac>)
 801433a:	429c      	cmp	r4, r3
 801433c:	d117      	bne.n	801436e <_puts_r+0x52>
 801433e:	686c      	ldr	r4, [r5, #4]
 8014340:	89a3      	ldrh	r3, [r4, #12]
 8014342:	071b      	lsls	r3, r3, #28
 8014344:	d51d      	bpl.n	8014382 <_puts_r+0x66>
 8014346:	6923      	ldr	r3, [r4, #16]
 8014348:	b1db      	cbz	r3, 8014382 <_puts_r+0x66>
 801434a:	3e01      	subs	r6, #1
 801434c:	68a3      	ldr	r3, [r4, #8]
 801434e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014352:	3b01      	subs	r3, #1
 8014354:	60a3      	str	r3, [r4, #8]
 8014356:	b9e9      	cbnz	r1, 8014394 <_puts_r+0x78>
 8014358:	2b00      	cmp	r3, #0
 801435a:	da2e      	bge.n	80143ba <_puts_r+0x9e>
 801435c:	4622      	mov	r2, r4
 801435e:	210a      	movs	r1, #10
 8014360:	4628      	mov	r0, r5
 8014362:	f000 ffdf 	bl	8015324 <__swbuf_r>
 8014366:	3001      	adds	r0, #1
 8014368:	d011      	beq.n	801438e <_puts_r+0x72>
 801436a:	200a      	movs	r0, #10
 801436c:	e011      	b.n	8014392 <_puts_r+0x76>
 801436e:	4b17      	ldr	r3, [pc, #92]	; (80143cc <_puts_r+0xb0>)
 8014370:	429c      	cmp	r4, r3
 8014372:	d101      	bne.n	8014378 <_puts_r+0x5c>
 8014374:	68ac      	ldr	r4, [r5, #8]
 8014376:	e7e3      	b.n	8014340 <_puts_r+0x24>
 8014378:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <_puts_r+0xb4>)
 801437a:	429c      	cmp	r4, r3
 801437c:	bf08      	it	eq
 801437e:	68ec      	ldreq	r4, [r5, #12]
 8014380:	e7de      	b.n	8014340 <_puts_r+0x24>
 8014382:	4621      	mov	r1, r4
 8014384:	4628      	mov	r0, r5
 8014386:	f001 f831 	bl	80153ec <__swsetup_r>
 801438a:	2800      	cmp	r0, #0
 801438c:	d0dd      	beq.n	801434a <_puts_r+0x2e>
 801438e:	f04f 30ff 	mov.w	r0, #4294967295
 8014392:	bd70      	pop	{r4, r5, r6, pc}
 8014394:	2b00      	cmp	r3, #0
 8014396:	da04      	bge.n	80143a2 <_puts_r+0x86>
 8014398:	69a2      	ldr	r2, [r4, #24]
 801439a:	429a      	cmp	r2, r3
 801439c:	dc06      	bgt.n	80143ac <_puts_r+0x90>
 801439e:	290a      	cmp	r1, #10
 80143a0:	d004      	beq.n	80143ac <_puts_r+0x90>
 80143a2:	6823      	ldr	r3, [r4, #0]
 80143a4:	1c5a      	adds	r2, r3, #1
 80143a6:	6022      	str	r2, [r4, #0]
 80143a8:	7019      	strb	r1, [r3, #0]
 80143aa:	e7cf      	b.n	801434c <_puts_r+0x30>
 80143ac:	4622      	mov	r2, r4
 80143ae:	4628      	mov	r0, r5
 80143b0:	f000 ffb8 	bl	8015324 <__swbuf_r>
 80143b4:	3001      	adds	r0, #1
 80143b6:	d1c9      	bne.n	801434c <_puts_r+0x30>
 80143b8:	e7e9      	b.n	801438e <_puts_r+0x72>
 80143ba:	6823      	ldr	r3, [r4, #0]
 80143bc:	200a      	movs	r0, #10
 80143be:	1c5a      	adds	r2, r3, #1
 80143c0:	6022      	str	r2, [r4, #0]
 80143c2:	7018      	strb	r0, [r3, #0]
 80143c4:	e7e5      	b.n	8014392 <_puts_r+0x76>
 80143c6:	bf00      	nop
 80143c8:	08018d20 	.word	0x08018d20
 80143cc:	08018d40 	.word	0x08018d40
 80143d0:	08018d00 	.word	0x08018d00

080143d4 <puts>:
 80143d4:	4b02      	ldr	r3, [pc, #8]	; (80143e0 <puts+0xc>)
 80143d6:	4601      	mov	r1, r0
 80143d8:	6818      	ldr	r0, [r3, #0]
 80143da:	f7ff bf9f 	b.w	801431c <_puts_r>
 80143de:	bf00      	nop
 80143e0:	2000000c 	.word	0x2000000c

080143e4 <nanf>:
 80143e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80143ec <nanf+0x8>
 80143e8:	4770      	bx	lr
 80143ea:	bf00      	nop
 80143ec:	7fc00000 	.word	0x7fc00000

080143f0 <sniprintf>:
 80143f0:	b40c      	push	{r2, r3}
 80143f2:	b530      	push	{r4, r5, lr}
 80143f4:	4b17      	ldr	r3, [pc, #92]	; (8014454 <sniprintf+0x64>)
 80143f6:	1e0c      	subs	r4, r1, #0
 80143f8:	b09d      	sub	sp, #116	; 0x74
 80143fa:	681d      	ldr	r5, [r3, #0]
 80143fc:	da08      	bge.n	8014410 <sniprintf+0x20>
 80143fe:	238b      	movs	r3, #139	; 0x8b
 8014400:	602b      	str	r3, [r5, #0]
 8014402:	f04f 30ff 	mov.w	r0, #4294967295
 8014406:	b01d      	add	sp, #116	; 0x74
 8014408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801440c:	b002      	add	sp, #8
 801440e:	4770      	bx	lr
 8014410:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014418:	bf14      	ite	ne
 801441a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801441e:	4623      	moveq	r3, r4
 8014420:	9304      	str	r3, [sp, #16]
 8014422:	9307      	str	r3, [sp, #28]
 8014424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014428:	9002      	str	r0, [sp, #8]
 801442a:	9006      	str	r0, [sp, #24]
 801442c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014430:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014432:	ab21      	add	r3, sp, #132	; 0x84
 8014434:	a902      	add	r1, sp, #8
 8014436:	4628      	mov	r0, r5
 8014438:	9301      	str	r3, [sp, #4]
 801443a:	f003 f8fb 	bl	8017634 <_svfiprintf_r>
 801443e:	1c43      	adds	r3, r0, #1
 8014440:	bfbc      	itt	lt
 8014442:	238b      	movlt	r3, #139	; 0x8b
 8014444:	602b      	strlt	r3, [r5, #0]
 8014446:	2c00      	cmp	r4, #0
 8014448:	d0dd      	beq.n	8014406 <sniprintf+0x16>
 801444a:	9b02      	ldr	r3, [sp, #8]
 801444c:	2200      	movs	r2, #0
 801444e:	701a      	strb	r2, [r3, #0]
 8014450:	e7d9      	b.n	8014406 <sniprintf+0x16>
 8014452:	bf00      	nop
 8014454:	2000000c 	.word	0x2000000c

08014458 <siprintf>:
 8014458:	b40e      	push	{r1, r2, r3}
 801445a:	b500      	push	{lr}
 801445c:	b09c      	sub	sp, #112	; 0x70
 801445e:	ab1d      	add	r3, sp, #116	; 0x74
 8014460:	9002      	str	r0, [sp, #8]
 8014462:	9006      	str	r0, [sp, #24]
 8014464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014468:	4809      	ldr	r0, [pc, #36]	; (8014490 <siprintf+0x38>)
 801446a:	9107      	str	r1, [sp, #28]
 801446c:	9104      	str	r1, [sp, #16]
 801446e:	4909      	ldr	r1, [pc, #36]	; (8014494 <siprintf+0x3c>)
 8014470:	f853 2b04 	ldr.w	r2, [r3], #4
 8014474:	9105      	str	r1, [sp, #20]
 8014476:	6800      	ldr	r0, [r0, #0]
 8014478:	9301      	str	r3, [sp, #4]
 801447a:	a902      	add	r1, sp, #8
 801447c:	f003 f8da 	bl	8017634 <_svfiprintf_r>
 8014480:	9b02      	ldr	r3, [sp, #8]
 8014482:	2200      	movs	r2, #0
 8014484:	701a      	strb	r2, [r3, #0]
 8014486:	b01c      	add	sp, #112	; 0x70
 8014488:	f85d eb04 	ldr.w	lr, [sp], #4
 801448c:	b003      	add	sp, #12
 801448e:	4770      	bx	lr
 8014490:	2000000c 	.word	0x2000000c
 8014494:	ffff0208 	.word	0xffff0208

08014498 <siscanf>:
 8014498:	b40e      	push	{r1, r2, r3}
 801449a:	b530      	push	{r4, r5, lr}
 801449c:	b09c      	sub	sp, #112	; 0x70
 801449e:	ac1f      	add	r4, sp, #124	; 0x7c
 80144a0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80144a4:	f854 5b04 	ldr.w	r5, [r4], #4
 80144a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80144ac:	9002      	str	r0, [sp, #8]
 80144ae:	9006      	str	r0, [sp, #24]
 80144b0:	f7eb fea6 	bl	8000200 <strlen>
 80144b4:	4b0b      	ldr	r3, [pc, #44]	; (80144e4 <siscanf+0x4c>)
 80144b6:	9003      	str	r0, [sp, #12]
 80144b8:	9007      	str	r0, [sp, #28]
 80144ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80144bc:	480a      	ldr	r0, [pc, #40]	; (80144e8 <siscanf+0x50>)
 80144be:	9401      	str	r4, [sp, #4]
 80144c0:	2300      	movs	r3, #0
 80144c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80144c4:	9314      	str	r3, [sp, #80]	; 0x50
 80144c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80144ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80144ce:	462a      	mov	r2, r5
 80144d0:	4623      	mov	r3, r4
 80144d2:	a902      	add	r1, sp, #8
 80144d4:	6800      	ldr	r0, [r0, #0]
 80144d6:	f003 f9ff 	bl	80178d8 <__ssvfiscanf_r>
 80144da:	b01c      	add	sp, #112	; 0x70
 80144dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144e0:	b003      	add	sp, #12
 80144e2:	4770      	bx	lr
 80144e4:	0801450f 	.word	0x0801450f
 80144e8:	2000000c 	.word	0x2000000c

080144ec <__sread>:
 80144ec:	b510      	push	{r4, lr}
 80144ee:	460c      	mov	r4, r1
 80144f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144f4:	f003 fe0e 	bl	8018114 <_read_r>
 80144f8:	2800      	cmp	r0, #0
 80144fa:	bfab      	itete	ge
 80144fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80144fe:	89a3      	ldrhlt	r3, [r4, #12]
 8014500:	181b      	addge	r3, r3, r0
 8014502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014506:	bfac      	ite	ge
 8014508:	6563      	strge	r3, [r4, #84]	; 0x54
 801450a:	81a3      	strhlt	r3, [r4, #12]
 801450c:	bd10      	pop	{r4, pc}

0801450e <__seofread>:
 801450e:	2000      	movs	r0, #0
 8014510:	4770      	bx	lr

08014512 <__swrite>:
 8014512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014516:	461f      	mov	r7, r3
 8014518:	898b      	ldrh	r3, [r1, #12]
 801451a:	05db      	lsls	r3, r3, #23
 801451c:	4605      	mov	r5, r0
 801451e:	460c      	mov	r4, r1
 8014520:	4616      	mov	r6, r2
 8014522:	d505      	bpl.n	8014530 <__swrite+0x1e>
 8014524:	2302      	movs	r3, #2
 8014526:	2200      	movs	r2, #0
 8014528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801452c:	f002 fae2 	bl	8016af4 <_lseek_r>
 8014530:	89a3      	ldrh	r3, [r4, #12]
 8014532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801453a:	81a3      	strh	r3, [r4, #12]
 801453c:	4632      	mov	r2, r6
 801453e:	463b      	mov	r3, r7
 8014540:	4628      	mov	r0, r5
 8014542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014546:	f000 bf3f 	b.w	80153c8 <_write_r>

0801454a <__sseek>:
 801454a:	b510      	push	{r4, lr}
 801454c:	460c      	mov	r4, r1
 801454e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014552:	f002 facf 	bl	8016af4 <_lseek_r>
 8014556:	1c43      	adds	r3, r0, #1
 8014558:	89a3      	ldrh	r3, [r4, #12]
 801455a:	bf15      	itete	ne
 801455c:	6560      	strne	r0, [r4, #84]	; 0x54
 801455e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014566:	81a3      	strheq	r3, [r4, #12]
 8014568:	bf18      	it	ne
 801456a:	81a3      	strhne	r3, [r4, #12]
 801456c:	bd10      	pop	{r4, pc}

0801456e <__sclose>:
 801456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014572:	f000 bfa9 	b.w	80154c8 <_close_r>

08014576 <strcpy>:
 8014576:	4603      	mov	r3, r0
 8014578:	f811 2b01 	ldrb.w	r2, [r1], #1
 801457c:	f803 2b01 	strb.w	r2, [r3], #1
 8014580:	2a00      	cmp	r2, #0
 8014582:	d1f9      	bne.n	8014578 <strcpy+0x2>
 8014584:	4770      	bx	lr

08014586 <sulp>:
 8014586:	b570      	push	{r4, r5, r6, lr}
 8014588:	4604      	mov	r4, r0
 801458a:	460d      	mov	r5, r1
 801458c:	ec45 4b10 	vmov	d0, r4, r5
 8014590:	4616      	mov	r6, r2
 8014592:	f002 fe0b 	bl	80171ac <__ulp>
 8014596:	ec51 0b10 	vmov	r0, r1, d0
 801459a:	b17e      	cbz	r6, 80145bc <sulp+0x36>
 801459c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80145a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	dd09      	ble.n	80145bc <sulp+0x36>
 80145a8:	051b      	lsls	r3, r3, #20
 80145aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80145ae:	2400      	movs	r4, #0
 80145b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80145b4:	4622      	mov	r2, r4
 80145b6:	462b      	mov	r3, r5
 80145b8:	f7ec f836 	bl	8000628 <__aeabi_dmul>
 80145bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080145c0 <_strtod_l>:
 80145c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c4:	461f      	mov	r7, r3
 80145c6:	b0a1      	sub	sp, #132	; 0x84
 80145c8:	2300      	movs	r3, #0
 80145ca:	4681      	mov	r9, r0
 80145cc:	4638      	mov	r0, r7
 80145ce:	460e      	mov	r6, r1
 80145d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80145d2:	931c      	str	r3, [sp, #112]	; 0x70
 80145d4:	f002 fa7e 	bl	8016ad4 <__localeconv_l>
 80145d8:	4680      	mov	r8, r0
 80145da:	6800      	ldr	r0, [r0, #0]
 80145dc:	f7eb fe10 	bl	8000200 <strlen>
 80145e0:	f04f 0a00 	mov.w	sl, #0
 80145e4:	4604      	mov	r4, r0
 80145e6:	f04f 0b00 	mov.w	fp, #0
 80145ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80145ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145ee:	781a      	ldrb	r2, [r3, #0]
 80145f0:	2a0d      	cmp	r2, #13
 80145f2:	d832      	bhi.n	801465a <_strtod_l+0x9a>
 80145f4:	2a09      	cmp	r2, #9
 80145f6:	d236      	bcs.n	8014666 <_strtod_l+0xa6>
 80145f8:	2a00      	cmp	r2, #0
 80145fa:	d03e      	beq.n	801467a <_strtod_l+0xba>
 80145fc:	2300      	movs	r3, #0
 80145fe:	930d      	str	r3, [sp, #52]	; 0x34
 8014600:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014602:	782b      	ldrb	r3, [r5, #0]
 8014604:	2b30      	cmp	r3, #48	; 0x30
 8014606:	f040 80ac 	bne.w	8014762 <_strtod_l+0x1a2>
 801460a:	786b      	ldrb	r3, [r5, #1]
 801460c:	2b58      	cmp	r3, #88	; 0x58
 801460e:	d001      	beq.n	8014614 <_strtod_l+0x54>
 8014610:	2b78      	cmp	r3, #120	; 0x78
 8014612:	d167      	bne.n	80146e4 <_strtod_l+0x124>
 8014614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014616:	9301      	str	r3, [sp, #4]
 8014618:	ab1c      	add	r3, sp, #112	; 0x70
 801461a:	9300      	str	r3, [sp, #0]
 801461c:	9702      	str	r7, [sp, #8]
 801461e:	ab1d      	add	r3, sp, #116	; 0x74
 8014620:	4a88      	ldr	r2, [pc, #544]	; (8014844 <_strtod_l+0x284>)
 8014622:	a91b      	add	r1, sp, #108	; 0x6c
 8014624:	4648      	mov	r0, r9
 8014626:	f001 ff6c 	bl	8016502 <__gethex>
 801462a:	f010 0407 	ands.w	r4, r0, #7
 801462e:	4606      	mov	r6, r0
 8014630:	d005      	beq.n	801463e <_strtod_l+0x7e>
 8014632:	2c06      	cmp	r4, #6
 8014634:	d12b      	bne.n	801468e <_strtod_l+0xce>
 8014636:	3501      	adds	r5, #1
 8014638:	2300      	movs	r3, #0
 801463a:	951b      	str	r5, [sp, #108]	; 0x6c
 801463c:	930d      	str	r3, [sp, #52]	; 0x34
 801463e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014640:	2b00      	cmp	r3, #0
 8014642:	f040 859a 	bne.w	801517a <_strtod_l+0xbba>
 8014646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014648:	b1e3      	cbz	r3, 8014684 <_strtod_l+0xc4>
 801464a:	4652      	mov	r2, sl
 801464c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014650:	ec43 2b10 	vmov	d0, r2, r3
 8014654:	b021      	add	sp, #132	; 0x84
 8014656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801465a:	2a2b      	cmp	r2, #43	; 0x2b
 801465c:	d015      	beq.n	801468a <_strtod_l+0xca>
 801465e:	2a2d      	cmp	r2, #45	; 0x2d
 8014660:	d004      	beq.n	801466c <_strtod_l+0xac>
 8014662:	2a20      	cmp	r2, #32
 8014664:	d1ca      	bne.n	80145fc <_strtod_l+0x3c>
 8014666:	3301      	adds	r3, #1
 8014668:	931b      	str	r3, [sp, #108]	; 0x6c
 801466a:	e7bf      	b.n	80145ec <_strtod_l+0x2c>
 801466c:	2201      	movs	r2, #1
 801466e:	920d      	str	r2, [sp, #52]	; 0x34
 8014670:	1c5a      	adds	r2, r3, #1
 8014672:	921b      	str	r2, [sp, #108]	; 0x6c
 8014674:	785b      	ldrb	r3, [r3, #1]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d1c2      	bne.n	8014600 <_strtod_l+0x40>
 801467a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801467c:	961b      	str	r6, [sp, #108]	; 0x6c
 801467e:	2b00      	cmp	r3, #0
 8014680:	f040 8579 	bne.w	8015176 <_strtod_l+0xbb6>
 8014684:	4652      	mov	r2, sl
 8014686:	465b      	mov	r3, fp
 8014688:	e7e2      	b.n	8014650 <_strtod_l+0x90>
 801468a:	2200      	movs	r2, #0
 801468c:	e7ef      	b.n	801466e <_strtod_l+0xae>
 801468e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014690:	b13a      	cbz	r2, 80146a2 <_strtod_l+0xe2>
 8014692:	2135      	movs	r1, #53	; 0x35
 8014694:	a81e      	add	r0, sp, #120	; 0x78
 8014696:	f002 fe81 	bl	801739c <__copybits>
 801469a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801469c:	4648      	mov	r0, r9
 801469e:	f002 faed 	bl	8016c7c <_Bfree>
 80146a2:	3c01      	subs	r4, #1
 80146a4:	2c04      	cmp	r4, #4
 80146a6:	d806      	bhi.n	80146b6 <_strtod_l+0xf6>
 80146a8:	e8df f004 	tbb	[pc, r4]
 80146ac:	1714030a 	.word	0x1714030a
 80146b0:	0a          	.byte	0x0a
 80146b1:	00          	.byte	0x00
 80146b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80146b6:	0730      	lsls	r0, r6, #28
 80146b8:	d5c1      	bpl.n	801463e <_strtod_l+0x7e>
 80146ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80146be:	e7be      	b.n	801463e <_strtod_l+0x7e>
 80146c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80146c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80146c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80146ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80146ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80146d2:	e7f0      	b.n	80146b6 <_strtod_l+0xf6>
 80146d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014848 <_strtod_l+0x288>
 80146d8:	e7ed      	b.n	80146b6 <_strtod_l+0xf6>
 80146da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80146de:	f04f 3aff 	mov.w	sl, #4294967295
 80146e2:	e7e8      	b.n	80146b6 <_strtod_l+0xf6>
 80146e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146e6:	1c5a      	adds	r2, r3, #1
 80146e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80146ea:	785b      	ldrb	r3, [r3, #1]
 80146ec:	2b30      	cmp	r3, #48	; 0x30
 80146ee:	d0f9      	beq.n	80146e4 <_strtod_l+0x124>
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d0a4      	beq.n	801463e <_strtod_l+0x7e>
 80146f4:	2301      	movs	r3, #1
 80146f6:	2500      	movs	r5, #0
 80146f8:	9306      	str	r3, [sp, #24]
 80146fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146fc:	9308      	str	r3, [sp, #32]
 80146fe:	9507      	str	r5, [sp, #28]
 8014700:	9505      	str	r5, [sp, #20]
 8014702:	220a      	movs	r2, #10
 8014704:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014706:	7807      	ldrb	r7, [r0, #0]
 8014708:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801470c:	b2d9      	uxtb	r1, r3
 801470e:	2909      	cmp	r1, #9
 8014710:	d929      	bls.n	8014766 <_strtod_l+0x1a6>
 8014712:	4622      	mov	r2, r4
 8014714:	f8d8 1000 	ldr.w	r1, [r8]
 8014718:	f003 fd50 	bl	80181bc <strncmp>
 801471c:	2800      	cmp	r0, #0
 801471e:	d031      	beq.n	8014784 <_strtod_l+0x1c4>
 8014720:	2000      	movs	r0, #0
 8014722:	9c05      	ldr	r4, [sp, #20]
 8014724:	9004      	str	r0, [sp, #16]
 8014726:	463b      	mov	r3, r7
 8014728:	4602      	mov	r2, r0
 801472a:	2b65      	cmp	r3, #101	; 0x65
 801472c:	d001      	beq.n	8014732 <_strtod_l+0x172>
 801472e:	2b45      	cmp	r3, #69	; 0x45
 8014730:	d114      	bne.n	801475c <_strtod_l+0x19c>
 8014732:	b924      	cbnz	r4, 801473e <_strtod_l+0x17e>
 8014734:	b910      	cbnz	r0, 801473c <_strtod_l+0x17c>
 8014736:	9b06      	ldr	r3, [sp, #24]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d09e      	beq.n	801467a <_strtod_l+0xba>
 801473c:	2400      	movs	r4, #0
 801473e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014740:	1c73      	adds	r3, r6, #1
 8014742:	931b      	str	r3, [sp, #108]	; 0x6c
 8014744:	7873      	ldrb	r3, [r6, #1]
 8014746:	2b2b      	cmp	r3, #43	; 0x2b
 8014748:	d078      	beq.n	801483c <_strtod_l+0x27c>
 801474a:	2b2d      	cmp	r3, #45	; 0x2d
 801474c:	d070      	beq.n	8014830 <_strtod_l+0x270>
 801474e:	f04f 0c00 	mov.w	ip, #0
 8014752:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014756:	2f09      	cmp	r7, #9
 8014758:	d97c      	bls.n	8014854 <_strtod_l+0x294>
 801475a:	961b      	str	r6, [sp, #108]	; 0x6c
 801475c:	f04f 0e00 	mov.w	lr, #0
 8014760:	e09a      	b.n	8014898 <_strtod_l+0x2d8>
 8014762:	2300      	movs	r3, #0
 8014764:	e7c7      	b.n	80146f6 <_strtod_l+0x136>
 8014766:	9905      	ldr	r1, [sp, #20]
 8014768:	2908      	cmp	r1, #8
 801476a:	bfdd      	ittte	le
 801476c:	9907      	ldrle	r1, [sp, #28]
 801476e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014772:	9307      	strle	r3, [sp, #28]
 8014774:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014778:	9b05      	ldr	r3, [sp, #20]
 801477a:	3001      	adds	r0, #1
 801477c:	3301      	adds	r3, #1
 801477e:	9305      	str	r3, [sp, #20]
 8014780:	901b      	str	r0, [sp, #108]	; 0x6c
 8014782:	e7bf      	b.n	8014704 <_strtod_l+0x144>
 8014784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014786:	191a      	adds	r2, r3, r4
 8014788:	921b      	str	r2, [sp, #108]	; 0x6c
 801478a:	9a05      	ldr	r2, [sp, #20]
 801478c:	5d1b      	ldrb	r3, [r3, r4]
 801478e:	2a00      	cmp	r2, #0
 8014790:	d037      	beq.n	8014802 <_strtod_l+0x242>
 8014792:	9c05      	ldr	r4, [sp, #20]
 8014794:	4602      	mov	r2, r0
 8014796:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801479a:	2909      	cmp	r1, #9
 801479c:	d913      	bls.n	80147c6 <_strtod_l+0x206>
 801479e:	2101      	movs	r1, #1
 80147a0:	9104      	str	r1, [sp, #16]
 80147a2:	e7c2      	b.n	801472a <_strtod_l+0x16a>
 80147a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147a6:	1c5a      	adds	r2, r3, #1
 80147a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80147aa:	785b      	ldrb	r3, [r3, #1]
 80147ac:	3001      	adds	r0, #1
 80147ae:	2b30      	cmp	r3, #48	; 0x30
 80147b0:	d0f8      	beq.n	80147a4 <_strtod_l+0x1e4>
 80147b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80147b6:	2a08      	cmp	r2, #8
 80147b8:	f200 84e4 	bhi.w	8015184 <_strtod_l+0xbc4>
 80147bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80147be:	9208      	str	r2, [sp, #32]
 80147c0:	4602      	mov	r2, r0
 80147c2:	2000      	movs	r0, #0
 80147c4:	4604      	mov	r4, r0
 80147c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80147ca:	f100 0101 	add.w	r1, r0, #1
 80147ce:	d012      	beq.n	80147f6 <_strtod_l+0x236>
 80147d0:	440a      	add	r2, r1
 80147d2:	eb00 0c04 	add.w	ip, r0, r4
 80147d6:	4621      	mov	r1, r4
 80147d8:	270a      	movs	r7, #10
 80147da:	458c      	cmp	ip, r1
 80147dc:	d113      	bne.n	8014806 <_strtod_l+0x246>
 80147de:	1821      	adds	r1, r4, r0
 80147e0:	2908      	cmp	r1, #8
 80147e2:	f104 0401 	add.w	r4, r4, #1
 80147e6:	4404      	add	r4, r0
 80147e8:	dc19      	bgt.n	801481e <_strtod_l+0x25e>
 80147ea:	9b07      	ldr	r3, [sp, #28]
 80147ec:	210a      	movs	r1, #10
 80147ee:	fb01 e303 	mla	r3, r1, r3, lr
 80147f2:	9307      	str	r3, [sp, #28]
 80147f4:	2100      	movs	r1, #0
 80147f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147f8:	1c58      	adds	r0, r3, #1
 80147fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80147fc:	785b      	ldrb	r3, [r3, #1]
 80147fe:	4608      	mov	r0, r1
 8014800:	e7c9      	b.n	8014796 <_strtod_l+0x1d6>
 8014802:	9805      	ldr	r0, [sp, #20]
 8014804:	e7d3      	b.n	80147ae <_strtod_l+0x1ee>
 8014806:	2908      	cmp	r1, #8
 8014808:	f101 0101 	add.w	r1, r1, #1
 801480c:	dc03      	bgt.n	8014816 <_strtod_l+0x256>
 801480e:	9b07      	ldr	r3, [sp, #28]
 8014810:	437b      	muls	r3, r7
 8014812:	9307      	str	r3, [sp, #28]
 8014814:	e7e1      	b.n	80147da <_strtod_l+0x21a>
 8014816:	2910      	cmp	r1, #16
 8014818:	bfd8      	it	le
 801481a:	437d      	mulle	r5, r7
 801481c:	e7dd      	b.n	80147da <_strtod_l+0x21a>
 801481e:	2c10      	cmp	r4, #16
 8014820:	bfdc      	itt	le
 8014822:	210a      	movle	r1, #10
 8014824:	fb01 e505 	mlale	r5, r1, r5, lr
 8014828:	e7e4      	b.n	80147f4 <_strtod_l+0x234>
 801482a:	2301      	movs	r3, #1
 801482c:	9304      	str	r3, [sp, #16]
 801482e:	e781      	b.n	8014734 <_strtod_l+0x174>
 8014830:	f04f 0c01 	mov.w	ip, #1
 8014834:	1cb3      	adds	r3, r6, #2
 8014836:	931b      	str	r3, [sp, #108]	; 0x6c
 8014838:	78b3      	ldrb	r3, [r6, #2]
 801483a:	e78a      	b.n	8014752 <_strtod_l+0x192>
 801483c:	f04f 0c00 	mov.w	ip, #0
 8014840:	e7f8      	b.n	8014834 <_strtod_l+0x274>
 8014842:	bf00      	nop
 8014844:	08018c9c 	.word	0x08018c9c
 8014848:	7ff00000 	.word	0x7ff00000
 801484c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801484e:	1c5f      	adds	r7, r3, #1
 8014850:	971b      	str	r7, [sp, #108]	; 0x6c
 8014852:	785b      	ldrb	r3, [r3, #1]
 8014854:	2b30      	cmp	r3, #48	; 0x30
 8014856:	d0f9      	beq.n	801484c <_strtod_l+0x28c>
 8014858:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801485c:	2f08      	cmp	r7, #8
 801485e:	f63f af7d 	bhi.w	801475c <_strtod_l+0x19c>
 8014862:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014868:	930a      	str	r3, [sp, #40]	; 0x28
 801486a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801486c:	1c5f      	adds	r7, r3, #1
 801486e:	971b      	str	r7, [sp, #108]	; 0x6c
 8014870:	785b      	ldrb	r3, [r3, #1]
 8014872:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014876:	f1b8 0f09 	cmp.w	r8, #9
 801487a:	d937      	bls.n	80148ec <_strtod_l+0x32c>
 801487c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801487e:	1a7f      	subs	r7, r7, r1
 8014880:	2f08      	cmp	r7, #8
 8014882:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014886:	dc37      	bgt.n	80148f8 <_strtod_l+0x338>
 8014888:	45be      	cmp	lr, r7
 801488a:	bfa8      	it	ge
 801488c:	46be      	movge	lr, r7
 801488e:	f1bc 0f00 	cmp.w	ip, #0
 8014892:	d001      	beq.n	8014898 <_strtod_l+0x2d8>
 8014894:	f1ce 0e00 	rsb	lr, lr, #0
 8014898:	2c00      	cmp	r4, #0
 801489a:	d151      	bne.n	8014940 <_strtod_l+0x380>
 801489c:	2800      	cmp	r0, #0
 801489e:	f47f aece 	bne.w	801463e <_strtod_l+0x7e>
 80148a2:	9a06      	ldr	r2, [sp, #24]
 80148a4:	2a00      	cmp	r2, #0
 80148a6:	f47f aeca 	bne.w	801463e <_strtod_l+0x7e>
 80148aa:	9a04      	ldr	r2, [sp, #16]
 80148ac:	2a00      	cmp	r2, #0
 80148ae:	f47f aee4 	bne.w	801467a <_strtod_l+0xba>
 80148b2:	2b4e      	cmp	r3, #78	; 0x4e
 80148b4:	d027      	beq.n	8014906 <_strtod_l+0x346>
 80148b6:	dc21      	bgt.n	80148fc <_strtod_l+0x33c>
 80148b8:	2b49      	cmp	r3, #73	; 0x49
 80148ba:	f47f aede 	bne.w	801467a <_strtod_l+0xba>
 80148be:	49a0      	ldr	r1, [pc, #640]	; (8014b40 <_strtod_l+0x580>)
 80148c0:	a81b      	add	r0, sp, #108	; 0x6c
 80148c2:	f002 f851 	bl	8016968 <__match>
 80148c6:	2800      	cmp	r0, #0
 80148c8:	f43f aed7 	beq.w	801467a <_strtod_l+0xba>
 80148cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80148ce:	499d      	ldr	r1, [pc, #628]	; (8014b44 <_strtod_l+0x584>)
 80148d0:	3b01      	subs	r3, #1
 80148d2:	a81b      	add	r0, sp, #108	; 0x6c
 80148d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80148d6:	f002 f847 	bl	8016968 <__match>
 80148da:	b910      	cbnz	r0, 80148e2 <_strtod_l+0x322>
 80148dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80148de:	3301      	adds	r3, #1
 80148e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80148e2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014b58 <_strtod_l+0x598>
 80148e6:	f04f 0a00 	mov.w	sl, #0
 80148ea:	e6a8      	b.n	801463e <_strtod_l+0x7e>
 80148ec:	210a      	movs	r1, #10
 80148ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 80148f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80148f6:	e7b8      	b.n	801486a <_strtod_l+0x2aa>
 80148f8:	46be      	mov	lr, r7
 80148fa:	e7c8      	b.n	801488e <_strtod_l+0x2ce>
 80148fc:	2b69      	cmp	r3, #105	; 0x69
 80148fe:	d0de      	beq.n	80148be <_strtod_l+0x2fe>
 8014900:	2b6e      	cmp	r3, #110	; 0x6e
 8014902:	f47f aeba 	bne.w	801467a <_strtod_l+0xba>
 8014906:	4990      	ldr	r1, [pc, #576]	; (8014b48 <_strtod_l+0x588>)
 8014908:	a81b      	add	r0, sp, #108	; 0x6c
 801490a:	f002 f82d 	bl	8016968 <__match>
 801490e:	2800      	cmp	r0, #0
 8014910:	f43f aeb3 	beq.w	801467a <_strtod_l+0xba>
 8014914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	2b28      	cmp	r3, #40	; 0x28
 801491a:	d10e      	bne.n	801493a <_strtod_l+0x37a>
 801491c:	aa1e      	add	r2, sp, #120	; 0x78
 801491e:	498b      	ldr	r1, [pc, #556]	; (8014b4c <_strtod_l+0x58c>)
 8014920:	a81b      	add	r0, sp, #108	; 0x6c
 8014922:	f002 f835 	bl	8016990 <__hexnan>
 8014926:	2805      	cmp	r0, #5
 8014928:	d107      	bne.n	801493a <_strtod_l+0x37a>
 801492a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801492c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014930:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014934:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014938:	e681      	b.n	801463e <_strtod_l+0x7e>
 801493a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014b60 <_strtod_l+0x5a0>
 801493e:	e7d2      	b.n	80148e6 <_strtod_l+0x326>
 8014940:	ebae 0302 	sub.w	r3, lr, r2
 8014944:	9306      	str	r3, [sp, #24]
 8014946:	9b05      	ldr	r3, [sp, #20]
 8014948:	9807      	ldr	r0, [sp, #28]
 801494a:	2b00      	cmp	r3, #0
 801494c:	bf08      	it	eq
 801494e:	4623      	moveq	r3, r4
 8014950:	2c10      	cmp	r4, #16
 8014952:	9305      	str	r3, [sp, #20]
 8014954:	46a0      	mov	r8, r4
 8014956:	bfa8      	it	ge
 8014958:	f04f 0810 	movge.w	r8, #16
 801495c:	f7eb fdea 	bl	8000534 <__aeabi_ui2d>
 8014960:	2c09      	cmp	r4, #9
 8014962:	4682      	mov	sl, r0
 8014964:	468b      	mov	fp, r1
 8014966:	dc13      	bgt.n	8014990 <_strtod_l+0x3d0>
 8014968:	9b06      	ldr	r3, [sp, #24]
 801496a:	2b00      	cmp	r3, #0
 801496c:	f43f ae67 	beq.w	801463e <_strtod_l+0x7e>
 8014970:	9b06      	ldr	r3, [sp, #24]
 8014972:	dd7a      	ble.n	8014a6a <_strtod_l+0x4aa>
 8014974:	2b16      	cmp	r3, #22
 8014976:	dc61      	bgt.n	8014a3c <_strtod_l+0x47c>
 8014978:	4a75      	ldr	r2, [pc, #468]	; (8014b50 <_strtod_l+0x590>)
 801497a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801497e:	e9de 0100 	ldrd	r0, r1, [lr]
 8014982:	4652      	mov	r2, sl
 8014984:	465b      	mov	r3, fp
 8014986:	f7eb fe4f 	bl	8000628 <__aeabi_dmul>
 801498a:	4682      	mov	sl, r0
 801498c:	468b      	mov	fp, r1
 801498e:	e656      	b.n	801463e <_strtod_l+0x7e>
 8014990:	4b6f      	ldr	r3, [pc, #444]	; (8014b50 <_strtod_l+0x590>)
 8014992:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014996:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801499a:	f7eb fe45 	bl	8000628 <__aeabi_dmul>
 801499e:	4606      	mov	r6, r0
 80149a0:	4628      	mov	r0, r5
 80149a2:	460f      	mov	r7, r1
 80149a4:	f7eb fdc6 	bl	8000534 <__aeabi_ui2d>
 80149a8:	4602      	mov	r2, r0
 80149aa:	460b      	mov	r3, r1
 80149ac:	4630      	mov	r0, r6
 80149ae:	4639      	mov	r1, r7
 80149b0:	f7eb fc84 	bl	80002bc <__adddf3>
 80149b4:	2c0f      	cmp	r4, #15
 80149b6:	4682      	mov	sl, r0
 80149b8:	468b      	mov	fp, r1
 80149ba:	ddd5      	ble.n	8014968 <_strtod_l+0x3a8>
 80149bc:	9b06      	ldr	r3, [sp, #24]
 80149be:	eba4 0808 	sub.w	r8, r4, r8
 80149c2:	4498      	add	r8, r3
 80149c4:	f1b8 0f00 	cmp.w	r8, #0
 80149c8:	f340 8096 	ble.w	8014af8 <_strtod_l+0x538>
 80149cc:	f018 030f 	ands.w	r3, r8, #15
 80149d0:	d00a      	beq.n	80149e8 <_strtod_l+0x428>
 80149d2:	495f      	ldr	r1, [pc, #380]	; (8014b50 <_strtod_l+0x590>)
 80149d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80149d8:	4652      	mov	r2, sl
 80149da:	465b      	mov	r3, fp
 80149dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149e0:	f7eb fe22 	bl	8000628 <__aeabi_dmul>
 80149e4:	4682      	mov	sl, r0
 80149e6:	468b      	mov	fp, r1
 80149e8:	f038 080f 	bics.w	r8, r8, #15
 80149ec:	d073      	beq.n	8014ad6 <_strtod_l+0x516>
 80149ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80149f2:	dd47      	ble.n	8014a84 <_strtod_l+0x4c4>
 80149f4:	2400      	movs	r4, #0
 80149f6:	46a0      	mov	r8, r4
 80149f8:	9407      	str	r4, [sp, #28]
 80149fa:	9405      	str	r4, [sp, #20]
 80149fc:	2322      	movs	r3, #34	; 0x22
 80149fe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014b58 <_strtod_l+0x598>
 8014a02:	f8c9 3000 	str.w	r3, [r9]
 8014a06:	f04f 0a00 	mov.w	sl, #0
 8014a0a:	9b07      	ldr	r3, [sp, #28]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	f43f ae16 	beq.w	801463e <_strtod_l+0x7e>
 8014a12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014a14:	4648      	mov	r0, r9
 8014a16:	f002 f931 	bl	8016c7c <_Bfree>
 8014a1a:	9905      	ldr	r1, [sp, #20]
 8014a1c:	4648      	mov	r0, r9
 8014a1e:	f002 f92d 	bl	8016c7c <_Bfree>
 8014a22:	4641      	mov	r1, r8
 8014a24:	4648      	mov	r0, r9
 8014a26:	f002 f929 	bl	8016c7c <_Bfree>
 8014a2a:	9907      	ldr	r1, [sp, #28]
 8014a2c:	4648      	mov	r0, r9
 8014a2e:	f002 f925 	bl	8016c7c <_Bfree>
 8014a32:	4621      	mov	r1, r4
 8014a34:	4648      	mov	r0, r9
 8014a36:	f002 f921 	bl	8016c7c <_Bfree>
 8014a3a:	e600      	b.n	801463e <_strtod_l+0x7e>
 8014a3c:	9a06      	ldr	r2, [sp, #24]
 8014a3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014a42:	4293      	cmp	r3, r2
 8014a44:	dbba      	blt.n	80149bc <_strtod_l+0x3fc>
 8014a46:	4d42      	ldr	r5, [pc, #264]	; (8014b50 <_strtod_l+0x590>)
 8014a48:	f1c4 040f 	rsb	r4, r4, #15
 8014a4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014a50:	4652      	mov	r2, sl
 8014a52:	465b      	mov	r3, fp
 8014a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a58:	f7eb fde6 	bl	8000628 <__aeabi_dmul>
 8014a5c:	9b06      	ldr	r3, [sp, #24]
 8014a5e:	1b1c      	subs	r4, r3, r4
 8014a60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014a64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014a68:	e78d      	b.n	8014986 <_strtod_l+0x3c6>
 8014a6a:	f113 0f16 	cmn.w	r3, #22
 8014a6e:	dba5      	blt.n	80149bc <_strtod_l+0x3fc>
 8014a70:	4a37      	ldr	r2, [pc, #220]	; (8014b50 <_strtod_l+0x590>)
 8014a72:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014a76:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014a7a:	4650      	mov	r0, sl
 8014a7c:	4659      	mov	r1, fp
 8014a7e:	f7eb fefd 	bl	800087c <__aeabi_ddiv>
 8014a82:	e782      	b.n	801498a <_strtod_l+0x3ca>
 8014a84:	2300      	movs	r3, #0
 8014a86:	4e33      	ldr	r6, [pc, #204]	; (8014b54 <_strtod_l+0x594>)
 8014a88:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014a8c:	4650      	mov	r0, sl
 8014a8e:	4659      	mov	r1, fp
 8014a90:	461d      	mov	r5, r3
 8014a92:	f1b8 0f01 	cmp.w	r8, #1
 8014a96:	dc21      	bgt.n	8014adc <_strtod_l+0x51c>
 8014a98:	b10b      	cbz	r3, 8014a9e <_strtod_l+0x4de>
 8014a9a:	4682      	mov	sl, r0
 8014a9c:	468b      	mov	fp, r1
 8014a9e:	4b2d      	ldr	r3, [pc, #180]	; (8014b54 <_strtod_l+0x594>)
 8014aa0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014aa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014aa8:	4652      	mov	r2, sl
 8014aaa:	465b      	mov	r3, fp
 8014aac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014ab0:	f7eb fdba 	bl	8000628 <__aeabi_dmul>
 8014ab4:	4b28      	ldr	r3, [pc, #160]	; (8014b58 <_strtod_l+0x598>)
 8014ab6:	460a      	mov	r2, r1
 8014ab8:	400b      	ands	r3, r1
 8014aba:	4928      	ldr	r1, [pc, #160]	; (8014b5c <_strtod_l+0x59c>)
 8014abc:	428b      	cmp	r3, r1
 8014abe:	4682      	mov	sl, r0
 8014ac0:	d898      	bhi.n	80149f4 <_strtod_l+0x434>
 8014ac2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014ac6:	428b      	cmp	r3, r1
 8014ac8:	bf86      	itte	hi
 8014aca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014b64 <_strtod_l+0x5a4>
 8014ace:	f04f 3aff 	movhi.w	sl, #4294967295
 8014ad2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	9304      	str	r3, [sp, #16]
 8014ada:	e077      	b.n	8014bcc <_strtod_l+0x60c>
 8014adc:	f018 0f01 	tst.w	r8, #1
 8014ae0:	d006      	beq.n	8014af0 <_strtod_l+0x530>
 8014ae2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aea:	f7eb fd9d 	bl	8000628 <__aeabi_dmul>
 8014aee:	2301      	movs	r3, #1
 8014af0:	3501      	adds	r5, #1
 8014af2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014af6:	e7cc      	b.n	8014a92 <_strtod_l+0x4d2>
 8014af8:	d0ed      	beq.n	8014ad6 <_strtod_l+0x516>
 8014afa:	f1c8 0800 	rsb	r8, r8, #0
 8014afe:	f018 020f 	ands.w	r2, r8, #15
 8014b02:	d00a      	beq.n	8014b1a <_strtod_l+0x55a>
 8014b04:	4b12      	ldr	r3, [pc, #72]	; (8014b50 <_strtod_l+0x590>)
 8014b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b0a:	4650      	mov	r0, sl
 8014b0c:	4659      	mov	r1, fp
 8014b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b12:	f7eb feb3 	bl	800087c <__aeabi_ddiv>
 8014b16:	4682      	mov	sl, r0
 8014b18:	468b      	mov	fp, r1
 8014b1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014b1e:	d0da      	beq.n	8014ad6 <_strtod_l+0x516>
 8014b20:	f1b8 0f1f 	cmp.w	r8, #31
 8014b24:	dd20      	ble.n	8014b68 <_strtod_l+0x5a8>
 8014b26:	2400      	movs	r4, #0
 8014b28:	46a0      	mov	r8, r4
 8014b2a:	9407      	str	r4, [sp, #28]
 8014b2c:	9405      	str	r4, [sp, #20]
 8014b2e:	2322      	movs	r3, #34	; 0x22
 8014b30:	f04f 0a00 	mov.w	sl, #0
 8014b34:	f04f 0b00 	mov.w	fp, #0
 8014b38:	f8c9 3000 	str.w	r3, [r9]
 8014b3c:	e765      	b.n	8014a0a <_strtod_l+0x44a>
 8014b3e:	bf00      	nop
 8014b40:	08018c69 	.word	0x08018c69
 8014b44:	08018cf3 	.word	0x08018cf3
 8014b48:	08018c71 	.word	0x08018c71
 8014b4c:	08018cb0 	.word	0x08018cb0
 8014b50:	08018d98 	.word	0x08018d98
 8014b54:	08018d70 	.word	0x08018d70
 8014b58:	7ff00000 	.word	0x7ff00000
 8014b5c:	7ca00000 	.word	0x7ca00000
 8014b60:	fff80000 	.word	0xfff80000
 8014b64:	7fefffff 	.word	0x7fefffff
 8014b68:	f018 0310 	ands.w	r3, r8, #16
 8014b6c:	bf18      	it	ne
 8014b6e:	236a      	movne	r3, #106	; 0x6a
 8014b70:	4da0      	ldr	r5, [pc, #640]	; (8014df4 <_strtod_l+0x834>)
 8014b72:	9304      	str	r3, [sp, #16]
 8014b74:	4650      	mov	r0, sl
 8014b76:	4659      	mov	r1, fp
 8014b78:	2300      	movs	r3, #0
 8014b7a:	f1b8 0f00 	cmp.w	r8, #0
 8014b7e:	f300 810a 	bgt.w	8014d96 <_strtod_l+0x7d6>
 8014b82:	b10b      	cbz	r3, 8014b88 <_strtod_l+0x5c8>
 8014b84:	4682      	mov	sl, r0
 8014b86:	468b      	mov	fp, r1
 8014b88:	9b04      	ldr	r3, [sp, #16]
 8014b8a:	b1bb      	cbz	r3, 8014bbc <_strtod_l+0x5fc>
 8014b8c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014b90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	4659      	mov	r1, fp
 8014b98:	dd10      	ble.n	8014bbc <_strtod_l+0x5fc>
 8014b9a:	2b1f      	cmp	r3, #31
 8014b9c:	f340 8107 	ble.w	8014dae <_strtod_l+0x7ee>
 8014ba0:	2b34      	cmp	r3, #52	; 0x34
 8014ba2:	bfde      	ittt	le
 8014ba4:	3b20      	suble	r3, #32
 8014ba6:	f04f 32ff 	movle.w	r2, #4294967295
 8014baa:	fa02 f303 	lslle.w	r3, r2, r3
 8014bae:	f04f 0a00 	mov.w	sl, #0
 8014bb2:	bfcc      	ite	gt
 8014bb4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014bb8:	ea03 0b01 	andle.w	fp, r3, r1
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	4650      	mov	r0, sl
 8014bc2:	4659      	mov	r1, fp
 8014bc4:	f7eb ff98 	bl	8000af8 <__aeabi_dcmpeq>
 8014bc8:	2800      	cmp	r0, #0
 8014bca:	d1ac      	bne.n	8014b26 <_strtod_l+0x566>
 8014bcc:	9b07      	ldr	r3, [sp, #28]
 8014bce:	9300      	str	r3, [sp, #0]
 8014bd0:	9a05      	ldr	r2, [sp, #20]
 8014bd2:	9908      	ldr	r1, [sp, #32]
 8014bd4:	4623      	mov	r3, r4
 8014bd6:	4648      	mov	r0, r9
 8014bd8:	f002 f8a2 	bl	8016d20 <__s2b>
 8014bdc:	9007      	str	r0, [sp, #28]
 8014bde:	2800      	cmp	r0, #0
 8014be0:	f43f af08 	beq.w	80149f4 <_strtod_l+0x434>
 8014be4:	9a06      	ldr	r2, [sp, #24]
 8014be6:	9b06      	ldr	r3, [sp, #24]
 8014be8:	2a00      	cmp	r2, #0
 8014bea:	f1c3 0300 	rsb	r3, r3, #0
 8014bee:	bfa8      	it	ge
 8014bf0:	2300      	movge	r3, #0
 8014bf2:	930e      	str	r3, [sp, #56]	; 0x38
 8014bf4:	2400      	movs	r4, #0
 8014bf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014bfa:	9316      	str	r3, [sp, #88]	; 0x58
 8014bfc:	46a0      	mov	r8, r4
 8014bfe:	9b07      	ldr	r3, [sp, #28]
 8014c00:	4648      	mov	r0, r9
 8014c02:	6859      	ldr	r1, [r3, #4]
 8014c04:	f002 f806 	bl	8016c14 <_Balloc>
 8014c08:	9005      	str	r0, [sp, #20]
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	f43f aef6 	beq.w	80149fc <_strtod_l+0x43c>
 8014c10:	9b07      	ldr	r3, [sp, #28]
 8014c12:	691a      	ldr	r2, [r3, #16]
 8014c14:	3202      	adds	r2, #2
 8014c16:	f103 010c 	add.w	r1, r3, #12
 8014c1a:	0092      	lsls	r2, r2, #2
 8014c1c:	300c      	adds	r0, #12
 8014c1e:	f7fe fcff 	bl	8013620 <memcpy>
 8014c22:	aa1e      	add	r2, sp, #120	; 0x78
 8014c24:	a91d      	add	r1, sp, #116	; 0x74
 8014c26:	ec4b ab10 	vmov	d0, sl, fp
 8014c2a:	4648      	mov	r0, r9
 8014c2c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014c30:	f002 fb32 	bl	8017298 <__d2b>
 8014c34:	901c      	str	r0, [sp, #112]	; 0x70
 8014c36:	2800      	cmp	r0, #0
 8014c38:	f43f aee0 	beq.w	80149fc <_strtod_l+0x43c>
 8014c3c:	2101      	movs	r1, #1
 8014c3e:	4648      	mov	r0, r9
 8014c40:	f002 f8fa 	bl	8016e38 <__i2b>
 8014c44:	4680      	mov	r8, r0
 8014c46:	2800      	cmp	r0, #0
 8014c48:	f43f aed8 	beq.w	80149fc <_strtod_l+0x43c>
 8014c4c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014c4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014c50:	2e00      	cmp	r6, #0
 8014c52:	bfab      	itete	ge
 8014c54:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014c56:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014c58:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014c5a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014c5c:	bfac      	ite	ge
 8014c5e:	18f7      	addge	r7, r6, r3
 8014c60:	1b9d      	sublt	r5, r3, r6
 8014c62:	9b04      	ldr	r3, [sp, #16]
 8014c64:	1af6      	subs	r6, r6, r3
 8014c66:	4416      	add	r6, r2
 8014c68:	4b63      	ldr	r3, [pc, #396]	; (8014df8 <_strtod_l+0x838>)
 8014c6a:	3e01      	subs	r6, #1
 8014c6c:	429e      	cmp	r6, r3
 8014c6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014c72:	f280 80af 	bge.w	8014dd4 <_strtod_l+0x814>
 8014c76:	1b9b      	subs	r3, r3, r6
 8014c78:	2b1f      	cmp	r3, #31
 8014c7a:	eba2 0203 	sub.w	r2, r2, r3
 8014c7e:	f04f 0101 	mov.w	r1, #1
 8014c82:	f300 809b 	bgt.w	8014dbc <_strtod_l+0x7fc>
 8014c86:	fa01 f303 	lsl.w	r3, r1, r3
 8014c8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8014c90:	18be      	adds	r6, r7, r2
 8014c92:	9b04      	ldr	r3, [sp, #16]
 8014c94:	42b7      	cmp	r7, r6
 8014c96:	4415      	add	r5, r2
 8014c98:	441d      	add	r5, r3
 8014c9a:	463b      	mov	r3, r7
 8014c9c:	bfa8      	it	ge
 8014c9e:	4633      	movge	r3, r6
 8014ca0:	42ab      	cmp	r3, r5
 8014ca2:	bfa8      	it	ge
 8014ca4:	462b      	movge	r3, r5
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	bfc2      	ittt	gt
 8014caa:	1af6      	subgt	r6, r6, r3
 8014cac:	1aed      	subgt	r5, r5, r3
 8014cae:	1aff      	subgt	r7, r7, r3
 8014cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cb2:	b1bb      	cbz	r3, 8014ce4 <_strtod_l+0x724>
 8014cb4:	4641      	mov	r1, r8
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	4648      	mov	r0, r9
 8014cba:	f002 f95d 	bl	8016f78 <__pow5mult>
 8014cbe:	4680      	mov	r8, r0
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	f43f ae9b 	beq.w	80149fc <_strtod_l+0x43c>
 8014cc6:	4601      	mov	r1, r0
 8014cc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014cca:	4648      	mov	r0, r9
 8014ccc:	f002 f8bd 	bl	8016e4a <__multiply>
 8014cd0:	900c      	str	r0, [sp, #48]	; 0x30
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	f43f ae92 	beq.w	80149fc <_strtod_l+0x43c>
 8014cd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014cda:	4648      	mov	r0, r9
 8014cdc:	f001 ffce 	bl	8016c7c <_Bfree>
 8014ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ce2:	931c      	str	r3, [sp, #112]	; 0x70
 8014ce4:	2e00      	cmp	r6, #0
 8014ce6:	dc7a      	bgt.n	8014dde <_strtod_l+0x81e>
 8014ce8:	9b06      	ldr	r3, [sp, #24]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	dd08      	ble.n	8014d00 <_strtod_l+0x740>
 8014cee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014cf0:	9905      	ldr	r1, [sp, #20]
 8014cf2:	4648      	mov	r0, r9
 8014cf4:	f002 f940 	bl	8016f78 <__pow5mult>
 8014cf8:	9005      	str	r0, [sp, #20]
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	f43f ae7e 	beq.w	80149fc <_strtod_l+0x43c>
 8014d00:	2d00      	cmp	r5, #0
 8014d02:	dd08      	ble.n	8014d16 <_strtod_l+0x756>
 8014d04:	462a      	mov	r2, r5
 8014d06:	9905      	ldr	r1, [sp, #20]
 8014d08:	4648      	mov	r0, r9
 8014d0a:	f002 f983 	bl	8017014 <__lshift>
 8014d0e:	9005      	str	r0, [sp, #20]
 8014d10:	2800      	cmp	r0, #0
 8014d12:	f43f ae73 	beq.w	80149fc <_strtod_l+0x43c>
 8014d16:	2f00      	cmp	r7, #0
 8014d18:	dd08      	ble.n	8014d2c <_strtod_l+0x76c>
 8014d1a:	4641      	mov	r1, r8
 8014d1c:	463a      	mov	r2, r7
 8014d1e:	4648      	mov	r0, r9
 8014d20:	f002 f978 	bl	8017014 <__lshift>
 8014d24:	4680      	mov	r8, r0
 8014d26:	2800      	cmp	r0, #0
 8014d28:	f43f ae68 	beq.w	80149fc <_strtod_l+0x43c>
 8014d2c:	9a05      	ldr	r2, [sp, #20]
 8014d2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014d30:	4648      	mov	r0, r9
 8014d32:	f002 f9dd 	bl	80170f0 <__mdiff>
 8014d36:	4604      	mov	r4, r0
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	f43f ae5f 	beq.w	80149fc <_strtod_l+0x43c>
 8014d3e:	68c3      	ldr	r3, [r0, #12]
 8014d40:	930c      	str	r3, [sp, #48]	; 0x30
 8014d42:	2300      	movs	r3, #0
 8014d44:	60c3      	str	r3, [r0, #12]
 8014d46:	4641      	mov	r1, r8
 8014d48:	f002 f9b8 	bl	80170bc <__mcmp>
 8014d4c:	2800      	cmp	r0, #0
 8014d4e:	da55      	bge.n	8014dfc <_strtod_l+0x83c>
 8014d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d52:	b9e3      	cbnz	r3, 8014d8e <_strtod_l+0x7ce>
 8014d54:	f1ba 0f00 	cmp.w	sl, #0
 8014d58:	d119      	bne.n	8014d8e <_strtod_l+0x7ce>
 8014d5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d5e:	b9b3      	cbnz	r3, 8014d8e <_strtod_l+0x7ce>
 8014d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014d64:	0d1b      	lsrs	r3, r3, #20
 8014d66:	051b      	lsls	r3, r3, #20
 8014d68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014d6c:	d90f      	bls.n	8014d8e <_strtod_l+0x7ce>
 8014d6e:	6963      	ldr	r3, [r4, #20]
 8014d70:	b913      	cbnz	r3, 8014d78 <_strtod_l+0x7b8>
 8014d72:	6923      	ldr	r3, [r4, #16]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	dd0a      	ble.n	8014d8e <_strtod_l+0x7ce>
 8014d78:	4621      	mov	r1, r4
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	4648      	mov	r0, r9
 8014d7e:	f002 f949 	bl	8017014 <__lshift>
 8014d82:	4641      	mov	r1, r8
 8014d84:	4604      	mov	r4, r0
 8014d86:	f002 f999 	bl	80170bc <__mcmp>
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	dc67      	bgt.n	8014e5e <_strtod_l+0x89e>
 8014d8e:	9b04      	ldr	r3, [sp, #16]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d171      	bne.n	8014e78 <_strtod_l+0x8b8>
 8014d94:	e63d      	b.n	8014a12 <_strtod_l+0x452>
 8014d96:	f018 0f01 	tst.w	r8, #1
 8014d9a:	d004      	beq.n	8014da6 <_strtod_l+0x7e6>
 8014d9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014da0:	f7eb fc42 	bl	8000628 <__aeabi_dmul>
 8014da4:	2301      	movs	r3, #1
 8014da6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014daa:	3508      	adds	r5, #8
 8014dac:	e6e5      	b.n	8014b7a <_strtod_l+0x5ba>
 8014dae:	f04f 32ff 	mov.w	r2, #4294967295
 8014db2:	fa02 f303 	lsl.w	r3, r2, r3
 8014db6:	ea03 0a0a 	and.w	sl, r3, sl
 8014dba:	e6ff      	b.n	8014bbc <_strtod_l+0x5fc>
 8014dbc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014dc0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014dc4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014dc8:	36e2      	adds	r6, #226	; 0xe2
 8014dca:	fa01 f306 	lsl.w	r3, r1, r6
 8014dce:	930a      	str	r3, [sp, #40]	; 0x28
 8014dd0:	910f      	str	r1, [sp, #60]	; 0x3c
 8014dd2:	e75d      	b.n	8014c90 <_strtod_l+0x6d0>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8014dd8:	2301      	movs	r3, #1
 8014dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ddc:	e758      	b.n	8014c90 <_strtod_l+0x6d0>
 8014dde:	4632      	mov	r2, r6
 8014de0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014de2:	4648      	mov	r0, r9
 8014de4:	f002 f916 	bl	8017014 <__lshift>
 8014de8:	901c      	str	r0, [sp, #112]	; 0x70
 8014dea:	2800      	cmp	r0, #0
 8014dec:	f47f af7c 	bne.w	8014ce8 <_strtod_l+0x728>
 8014df0:	e604      	b.n	80149fc <_strtod_l+0x43c>
 8014df2:	bf00      	nop
 8014df4:	08018cc8 	.word	0x08018cc8
 8014df8:	fffffc02 	.word	0xfffffc02
 8014dfc:	465d      	mov	r5, fp
 8014dfe:	f040 8086 	bne.w	8014f0e <_strtod_l+0x94e>
 8014e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e08:	b32a      	cbz	r2, 8014e56 <_strtod_l+0x896>
 8014e0a:	4aaf      	ldr	r2, [pc, #700]	; (80150c8 <_strtod_l+0xb08>)
 8014e0c:	4293      	cmp	r3, r2
 8014e0e:	d153      	bne.n	8014eb8 <_strtod_l+0x8f8>
 8014e10:	9b04      	ldr	r3, [sp, #16]
 8014e12:	4650      	mov	r0, sl
 8014e14:	b1d3      	cbz	r3, 8014e4c <_strtod_l+0x88c>
 8014e16:	4aad      	ldr	r2, [pc, #692]	; (80150cc <_strtod_l+0xb0c>)
 8014e18:	402a      	ands	r2, r5
 8014e1a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8014e22:	d816      	bhi.n	8014e52 <_strtod_l+0x892>
 8014e24:	0d12      	lsrs	r2, r2, #20
 8014e26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8014e2e:	4298      	cmp	r0, r3
 8014e30:	d142      	bne.n	8014eb8 <_strtod_l+0x8f8>
 8014e32:	4ba7      	ldr	r3, [pc, #668]	; (80150d0 <_strtod_l+0xb10>)
 8014e34:	429d      	cmp	r5, r3
 8014e36:	d102      	bne.n	8014e3e <_strtod_l+0x87e>
 8014e38:	3001      	adds	r0, #1
 8014e3a:	f43f addf 	beq.w	80149fc <_strtod_l+0x43c>
 8014e3e:	4ba3      	ldr	r3, [pc, #652]	; (80150cc <_strtod_l+0xb0c>)
 8014e40:	402b      	ands	r3, r5
 8014e42:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014e46:	f04f 0a00 	mov.w	sl, #0
 8014e4a:	e7a0      	b.n	8014d8e <_strtod_l+0x7ce>
 8014e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e50:	e7ed      	b.n	8014e2e <_strtod_l+0x86e>
 8014e52:	460b      	mov	r3, r1
 8014e54:	e7eb      	b.n	8014e2e <_strtod_l+0x86e>
 8014e56:	bb7b      	cbnz	r3, 8014eb8 <_strtod_l+0x8f8>
 8014e58:	f1ba 0f00 	cmp.w	sl, #0
 8014e5c:	d12c      	bne.n	8014eb8 <_strtod_l+0x8f8>
 8014e5e:	9904      	ldr	r1, [sp, #16]
 8014e60:	4a9a      	ldr	r2, [pc, #616]	; (80150cc <_strtod_l+0xb0c>)
 8014e62:	465b      	mov	r3, fp
 8014e64:	b1f1      	cbz	r1, 8014ea4 <_strtod_l+0x8e4>
 8014e66:	ea02 010b 	and.w	r1, r2, fp
 8014e6a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014e6e:	dc19      	bgt.n	8014ea4 <_strtod_l+0x8e4>
 8014e70:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014e74:	f77f ae5b 	ble.w	8014b2e <_strtod_l+0x56e>
 8014e78:	4a96      	ldr	r2, [pc, #600]	; (80150d4 <_strtod_l+0xb14>)
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014e80:	4650      	mov	r0, sl
 8014e82:	4659      	mov	r1, fp
 8014e84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014e88:	f7eb fbce 	bl	8000628 <__aeabi_dmul>
 8014e8c:	4682      	mov	sl, r0
 8014e8e:	468b      	mov	fp, r1
 8014e90:	2900      	cmp	r1, #0
 8014e92:	f47f adbe 	bne.w	8014a12 <_strtod_l+0x452>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	f47f adbb 	bne.w	8014a12 <_strtod_l+0x452>
 8014e9c:	2322      	movs	r3, #34	; 0x22
 8014e9e:	f8c9 3000 	str.w	r3, [r9]
 8014ea2:	e5b6      	b.n	8014a12 <_strtod_l+0x452>
 8014ea4:	4013      	ands	r3, r2
 8014ea6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014eaa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014eae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014eb2:	f04f 3aff 	mov.w	sl, #4294967295
 8014eb6:	e76a      	b.n	8014d8e <_strtod_l+0x7ce>
 8014eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eba:	b193      	cbz	r3, 8014ee2 <_strtod_l+0x922>
 8014ebc:	422b      	tst	r3, r5
 8014ebe:	f43f af66 	beq.w	8014d8e <_strtod_l+0x7ce>
 8014ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ec4:	9a04      	ldr	r2, [sp, #16]
 8014ec6:	4650      	mov	r0, sl
 8014ec8:	4659      	mov	r1, fp
 8014eca:	b173      	cbz	r3, 8014eea <_strtod_l+0x92a>
 8014ecc:	f7ff fb5b 	bl	8014586 <sulp>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ed8:	f7eb f9f0 	bl	80002bc <__adddf3>
 8014edc:	4682      	mov	sl, r0
 8014ede:	468b      	mov	fp, r1
 8014ee0:	e755      	b.n	8014d8e <_strtod_l+0x7ce>
 8014ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ee4:	ea13 0f0a 	tst.w	r3, sl
 8014ee8:	e7e9      	b.n	8014ebe <_strtod_l+0x8fe>
 8014eea:	f7ff fb4c 	bl	8014586 <sulp>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ef6:	f7eb f9df 	bl	80002b8 <__aeabi_dsub>
 8014efa:	2200      	movs	r2, #0
 8014efc:	2300      	movs	r3, #0
 8014efe:	4682      	mov	sl, r0
 8014f00:	468b      	mov	fp, r1
 8014f02:	f7eb fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f47f ae11 	bne.w	8014b2e <_strtod_l+0x56e>
 8014f0c:	e73f      	b.n	8014d8e <_strtod_l+0x7ce>
 8014f0e:	4641      	mov	r1, r8
 8014f10:	4620      	mov	r0, r4
 8014f12:	f002 fa10 	bl	8017336 <__ratio>
 8014f16:	ec57 6b10 	vmov	r6, r7, d0
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014f20:	ee10 0a10 	vmov	r0, s0
 8014f24:	4639      	mov	r1, r7
 8014f26:	f7eb fdfb 	bl	8000b20 <__aeabi_dcmple>
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d077      	beq.n	801501e <_strtod_l+0xa5e>
 8014f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d04a      	beq.n	8014fca <_strtod_l+0xa0a>
 8014f34:	4b68      	ldr	r3, [pc, #416]	; (80150d8 <_strtod_l+0xb18>)
 8014f36:	2200      	movs	r2, #0
 8014f38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014f3c:	4f66      	ldr	r7, [pc, #408]	; (80150d8 <_strtod_l+0xb18>)
 8014f3e:	2600      	movs	r6, #0
 8014f40:	4b62      	ldr	r3, [pc, #392]	; (80150cc <_strtod_l+0xb0c>)
 8014f42:	402b      	ands	r3, r5
 8014f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f48:	4b64      	ldr	r3, [pc, #400]	; (80150dc <_strtod_l+0xb1c>)
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	f040 80ce 	bne.w	80150ec <_strtod_l+0xb2c>
 8014f50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014f58:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014f5c:	ec4b ab10 	vmov	d0, sl, fp
 8014f60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014f64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014f68:	f002 f920 	bl	80171ac <__ulp>
 8014f6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014f70:	ec53 2b10 	vmov	r2, r3, d0
 8014f74:	f7eb fb58 	bl	8000628 <__aeabi_dmul>
 8014f78:	4652      	mov	r2, sl
 8014f7a:	465b      	mov	r3, fp
 8014f7c:	f7eb f99e 	bl	80002bc <__adddf3>
 8014f80:	460b      	mov	r3, r1
 8014f82:	4952      	ldr	r1, [pc, #328]	; (80150cc <_strtod_l+0xb0c>)
 8014f84:	4a56      	ldr	r2, [pc, #344]	; (80150e0 <_strtod_l+0xb20>)
 8014f86:	4019      	ands	r1, r3
 8014f88:	4291      	cmp	r1, r2
 8014f8a:	4682      	mov	sl, r0
 8014f8c:	d95b      	bls.n	8015046 <_strtod_l+0xa86>
 8014f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f90:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014f94:	4293      	cmp	r3, r2
 8014f96:	d103      	bne.n	8014fa0 <_strtod_l+0x9e0>
 8014f98:	9b08      	ldr	r3, [sp, #32]
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	f43f ad2e 	beq.w	80149fc <_strtod_l+0x43c>
 8014fa0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80150d0 <_strtod_l+0xb10>
 8014fa4:	f04f 3aff 	mov.w	sl, #4294967295
 8014fa8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014faa:	4648      	mov	r0, r9
 8014fac:	f001 fe66 	bl	8016c7c <_Bfree>
 8014fb0:	9905      	ldr	r1, [sp, #20]
 8014fb2:	4648      	mov	r0, r9
 8014fb4:	f001 fe62 	bl	8016c7c <_Bfree>
 8014fb8:	4641      	mov	r1, r8
 8014fba:	4648      	mov	r0, r9
 8014fbc:	f001 fe5e 	bl	8016c7c <_Bfree>
 8014fc0:	4621      	mov	r1, r4
 8014fc2:	4648      	mov	r0, r9
 8014fc4:	f001 fe5a 	bl	8016c7c <_Bfree>
 8014fc8:	e619      	b.n	8014bfe <_strtod_l+0x63e>
 8014fca:	f1ba 0f00 	cmp.w	sl, #0
 8014fce:	d11a      	bne.n	8015006 <_strtod_l+0xa46>
 8014fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014fd4:	b9eb      	cbnz	r3, 8015012 <_strtod_l+0xa52>
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	4b3f      	ldr	r3, [pc, #252]	; (80150d8 <_strtod_l+0xb18>)
 8014fda:	4630      	mov	r0, r6
 8014fdc:	4639      	mov	r1, r7
 8014fde:	f7eb fd95 	bl	8000b0c <__aeabi_dcmplt>
 8014fe2:	b9c8      	cbnz	r0, 8015018 <_strtod_l+0xa58>
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	4639      	mov	r1, r7
 8014fe8:	2200      	movs	r2, #0
 8014fea:	4b3e      	ldr	r3, [pc, #248]	; (80150e4 <_strtod_l+0xb24>)
 8014fec:	f7eb fb1c 	bl	8000628 <__aeabi_dmul>
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	460f      	mov	r7, r1
 8014ff4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014ff8:	9618      	str	r6, [sp, #96]	; 0x60
 8014ffa:	9319      	str	r3, [sp, #100]	; 0x64
 8014ffc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015000:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015004:	e79c      	b.n	8014f40 <_strtod_l+0x980>
 8015006:	f1ba 0f01 	cmp.w	sl, #1
 801500a:	d102      	bne.n	8015012 <_strtod_l+0xa52>
 801500c:	2d00      	cmp	r5, #0
 801500e:	f43f ad8e 	beq.w	8014b2e <_strtod_l+0x56e>
 8015012:	2200      	movs	r2, #0
 8015014:	4b34      	ldr	r3, [pc, #208]	; (80150e8 <_strtod_l+0xb28>)
 8015016:	e78f      	b.n	8014f38 <_strtod_l+0x978>
 8015018:	2600      	movs	r6, #0
 801501a:	4f32      	ldr	r7, [pc, #200]	; (80150e4 <_strtod_l+0xb24>)
 801501c:	e7ea      	b.n	8014ff4 <_strtod_l+0xa34>
 801501e:	4b31      	ldr	r3, [pc, #196]	; (80150e4 <_strtod_l+0xb24>)
 8015020:	4630      	mov	r0, r6
 8015022:	4639      	mov	r1, r7
 8015024:	2200      	movs	r2, #0
 8015026:	f7eb faff 	bl	8000628 <__aeabi_dmul>
 801502a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801502c:	4606      	mov	r6, r0
 801502e:	460f      	mov	r7, r1
 8015030:	b933      	cbnz	r3, 8015040 <_strtod_l+0xa80>
 8015032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015036:	9010      	str	r0, [sp, #64]	; 0x40
 8015038:	9311      	str	r3, [sp, #68]	; 0x44
 801503a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801503e:	e7df      	b.n	8015000 <_strtod_l+0xa40>
 8015040:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015044:	e7f9      	b.n	801503a <_strtod_l+0xa7a>
 8015046:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801504a:	9b04      	ldr	r3, [sp, #16]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d1ab      	bne.n	8014fa8 <_strtod_l+0x9e8>
 8015050:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015054:	0d1b      	lsrs	r3, r3, #20
 8015056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015058:	051b      	lsls	r3, r3, #20
 801505a:	429a      	cmp	r2, r3
 801505c:	465d      	mov	r5, fp
 801505e:	d1a3      	bne.n	8014fa8 <_strtod_l+0x9e8>
 8015060:	4639      	mov	r1, r7
 8015062:	4630      	mov	r0, r6
 8015064:	f7eb fd90 	bl	8000b88 <__aeabi_d2iz>
 8015068:	f7eb fa74 	bl	8000554 <__aeabi_i2d>
 801506c:	460b      	mov	r3, r1
 801506e:	4602      	mov	r2, r0
 8015070:	4639      	mov	r1, r7
 8015072:	4630      	mov	r0, r6
 8015074:	f7eb f920 	bl	80002b8 <__aeabi_dsub>
 8015078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507a:	4606      	mov	r6, r0
 801507c:	460f      	mov	r7, r1
 801507e:	b933      	cbnz	r3, 801508e <_strtod_l+0xace>
 8015080:	f1ba 0f00 	cmp.w	sl, #0
 8015084:	d103      	bne.n	801508e <_strtod_l+0xace>
 8015086:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801508a:	2d00      	cmp	r5, #0
 801508c:	d06d      	beq.n	801516a <_strtod_l+0xbaa>
 801508e:	a30a      	add	r3, pc, #40	; (adr r3, 80150b8 <_strtod_l+0xaf8>)
 8015090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015094:	4630      	mov	r0, r6
 8015096:	4639      	mov	r1, r7
 8015098:	f7eb fd38 	bl	8000b0c <__aeabi_dcmplt>
 801509c:	2800      	cmp	r0, #0
 801509e:	f47f acb8 	bne.w	8014a12 <_strtod_l+0x452>
 80150a2:	a307      	add	r3, pc, #28	; (adr r3, 80150c0 <_strtod_l+0xb00>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	4630      	mov	r0, r6
 80150aa:	4639      	mov	r1, r7
 80150ac:	f7eb fd4c 	bl	8000b48 <__aeabi_dcmpgt>
 80150b0:	2800      	cmp	r0, #0
 80150b2:	f43f af79 	beq.w	8014fa8 <_strtod_l+0x9e8>
 80150b6:	e4ac      	b.n	8014a12 <_strtod_l+0x452>
 80150b8:	94a03595 	.word	0x94a03595
 80150bc:	3fdfffff 	.word	0x3fdfffff
 80150c0:	35afe535 	.word	0x35afe535
 80150c4:	3fe00000 	.word	0x3fe00000
 80150c8:	000fffff 	.word	0x000fffff
 80150cc:	7ff00000 	.word	0x7ff00000
 80150d0:	7fefffff 	.word	0x7fefffff
 80150d4:	39500000 	.word	0x39500000
 80150d8:	3ff00000 	.word	0x3ff00000
 80150dc:	7fe00000 	.word	0x7fe00000
 80150e0:	7c9fffff 	.word	0x7c9fffff
 80150e4:	3fe00000 	.word	0x3fe00000
 80150e8:	bff00000 	.word	0xbff00000
 80150ec:	9b04      	ldr	r3, [sp, #16]
 80150ee:	b333      	cbz	r3, 801513e <_strtod_l+0xb7e>
 80150f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80150f6:	d822      	bhi.n	801513e <_strtod_l+0xb7e>
 80150f8:	a327      	add	r3, pc, #156	; (adr r3, 8015198 <_strtod_l+0xbd8>)
 80150fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150fe:	4630      	mov	r0, r6
 8015100:	4639      	mov	r1, r7
 8015102:	f7eb fd0d 	bl	8000b20 <__aeabi_dcmple>
 8015106:	b1a0      	cbz	r0, 8015132 <_strtod_l+0xb72>
 8015108:	4639      	mov	r1, r7
 801510a:	4630      	mov	r0, r6
 801510c:	f7eb fd64 	bl	8000bd8 <__aeabi_d2uiz>
 8015110:	2800      	cmp	r0, #0
 8015112:	bf08      	it	eq
 8015114:	2001      	moveq	r0, #1
 8015116:	f7eb fa0d 	bl	8000534 <__aeabi_ui2d>
 801511a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801511c:	4606      	mov	r6, r0
 801511e:	460f      	mov	r7, r1
 8015120:	bb03      	cbnz	r3, 8015164 <_strtod_l+0xba4>
 8015122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015126:	9012      	str	r0, [sp, #72]	; 0x48
 8015128:	9313      	str	r3, [sp, #76]	; 0x4c
 801512a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801512e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015136:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801513a:	1a9b      	subs	r3, r3, r2
 801513c:	930b      	str	r3, [sp, #44]	; 0x2c
 801513e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015142:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015146:	f002 f831 	bl	80171ac <__ulp>
 801514a:	4650      	mov	r0, sl
 801514c:	ec53 2b10 	vmov	r2, r3, d0
 8015150:	4659      	mov	r1, fp
 8015152:	f7eb fa69 	bl	8000628 <__aeabi_dmul>
 8015156:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801515a:	f7eb f8af 	bl	80002bc <__adddf3>
 801515e:	4682      	mov	sl, r0
 8015160:	468b      	mov	fp, r1
 8015162:	e772      	b.n	801504a <_strtod_l+0xa8a>
 8015164:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015168:	e7df      	b.n	801512a <_strtod_l+0xb6a>
 801516a:	a30d      	add	r3, pc, #52	; (adr r3, 80151a0 <_strtod_l+0xbe0>)
 801516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015170:	f7eb fccc 	bl	8000b0c <__aeabi_dcmplt>
 8015174:	e79c      	b.n	80150b0 <_strtod_l+0xaf0>
 8015176:	2300      	movs	r3, #0
 8015178:	930d      	str	r3, [sp, #52]	; 0x34
 801517a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801517c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801517e:	6013      	str	r3, [r2, #0]
 8015180:	f7ff ba61 	b.w	8014646 <_strtod_l+0x86>
 8015184:	2b65      	cmp	r3, #101	; 0x65
 8015186:	f04f 0200 	mov.w	r2, #0
 801518a:	f43f ab4e 	beq.w	801482a <_strtod_l+0x26a>
 801518e:	2101      	movs	r1, #1
 8015190:	4614      	mov	r4, r2
 8015192:	9104      	str	r1, [sp, #16]
 8015194:	f7ff bacb 	b.w	801472e <_strtod_l+0x16e>
 8015198:	ffc00000 	.word	0xffc00000
 801519c:	41dfffff 	.word	0x41dfffff
 80151a0:	94a03595 	.word	0x94a03595
 80151a4:	3fcfffff 	.word	0x3fcfffff

080151a8 <_strtod_r>:
 80151a8:	4b05      	ldr	r3, [pc, #20]	; (80151c0 <_strtod_r+0x18>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	b410      	push	{r4}
 80151ae:	6a1b      	ldr	r3, [r3, #32]
 80151b0:	4c04      	ldr	r4, [pc, #16]	; (80151c4 <_strtod_r+0x1c>)
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	bf08      	it	eq
 80151b6:	4623      	moveq	r3, r4
 80151b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151bc:	f7ff ba00 	b.w	80145c0 <_strtod_l>
 80151c0:	2000000c 	.word	0x2000000c
 80151c4:	20000070 	.word	0x20000070

080151c8 <_strtol_l.isra.0>:
 80151c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151cc:	4680      	mov	r8, r0
 80151ce:	4689      	mov	r9, r1
 80151d0:	4692      	mov	sl, r2
 80151d2:	461e      	mov	r6, r3
 80151d4:	460f      	mov	r7, r1
 80151d6:	463d      	mov	r5, r7
 80151d8:	9808      	ldr	r0, [sp, #32]
 80151da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80151de:	f001 fc67 	bl	8016ab0 <__locale_ctype_ptr_l>
 80151e2:	4420      	add	r0, r4
 80151e4:	7843      	ldrb	r3, [r0, #1]
 80151e6:	f013 0308 	ands.w	r3, r3, #8
 80151ea:	d132      	bne.n	8015252 <_strtol_l.isra.0+0x8a>
 80151ec:	2c2d      	cmp	r4, #45	; 0x2d
 80151ee:	d132      	bne.n	8015256 <_strtol_l.isra.0+0x8e>
 80151f0:	787c      	ldrb	r4, [r7, #1]
 80151f2:	1cbd      	adds	r5, r7, #2
 80151f4:	2201      	movs	r2, #1
 80151f6:	2e00      	cmp	r6, #0
 80151f8:	d05d      	beq.n	80152b6 <_strtol_l.isra.0+0xee>
 80151fa:	2e10      	cmp	r6, #16
 80151fc:	d109      	bne.n	8015212 <_strtol_l.isra.0+0x4a>
 80151fe:	2c30      	cmp	r4, #48	; 0x30
 8015200:	d107      	bne.n	8015212 <_strtol_l.isra.0+0x4a>
 8015202:	782b      	ldrb	r3, [r5, #0]
 8015204:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015208:	2b58      	cmp	r3, #88	; 0x58
 801520a:	d14f      	bne.n	80152ac <_strtol_l.isra.0+0xe4>
 801520c:	786c      	ldrb	r4, [r5, #1]
 801520e:	2610      	movs	r6, #16
 8015210:	3502      	adds	r5, #2
 8015212:	2a00      	cmp	r2, #0
 8015214:	bf14      	ite	ne
 8015216:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801521a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801521e:	2700      	movs	r7, #0
 8015220:	fbb1 fcf6 	udiv	ip, r1, r6
 8015224:	4638      	mov	r0, r7
 8015226:	fb06 1e1c 	mls	lr, r6, ip, r1
 801522a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801522e:	2b09      	cmp	r3, #9
 8015230:	d817      	bhi.n	8015262 <_strtol_l.isra.0+0x9a>
 8015232:	461c      	mov	r4, r3
 8015234:	42a6      	cmp	r6, r4
 8015236:	dd23      	ble.n	8015280 <_strtol_l.isra.0+0xb8>
 8015238:	1c7b      	adds	r3, r7, #1
 801523a:	d007      	beq.n	801524c <_strtol_l.isra.0+0x84>
 801523c:	4584      	cmp	ip, r0
 801523e:	d31c      	bcc.n	801527a <_strtol_l.isra.0+0xb2>
 8015240:	d101      	bne.n	8015246 <_strtol_l.isra.0+0x7e>
 8015242:	45a6      	cmp	lr, r4
 8015244:	db19      	blt.n	801527a <_strtol_l.isra.0+0xb2>
 8015246:	fb00 4006 	mla	r0, r0, r6, r4
 801524a:	2701      	movs	r7, #1
 801524c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015250:	e7eb      	b.n	801522a <_strtol_l.isra.0+0x62>
 8015252:	462f      	mov	r7, r5
 8015254:	e7bf      	b.n	80151d6 <_strtol_l.isra.0+0xe>
 8015256:	2c2b      	cmp	r4, #43	; 0x2b
 8015258:	bf04      	itt	eq
 801525a:	1cbd      	addeq	r5, r7, #2
 801525c:	787c      	ldrbeq	r4, [r7, #1]
 801525e:	461a      	mov	r2, r3
 8015260:	e7c9      	b.n	80151f6 <_strtol_l.isra.0+0x2e>
 8015262:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015266:	2b19      	cmp	r3, #25
 8015268:	d801      	bhi.n	801526e <_strtol_l.isra.0+0xa6>
 801526a:	3c37      	subs	r4, #55	; 0x37
 801526c:	e7e2      	b.n	8015234 <_strtol_l.isra.0+0x6c>
 801526e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015272:	2b19      	cmp	r3, #25
 8015274:	d804      	bhi.n	8015280 <_strtol_l.isra.0+0xb8>
 8015276:	3c57      	subs	r4, #87	; 0x57
 8015278:	e7dc      	b.n	8015234 <_strtol_l.isra.0+0x6c>
 801527a:	f04f 37ff 	mov.w	r7, #4294967295
 801527e:	e7e5      	b.n	801524c <_strtol_l.isra.0+0x84>
 8015280:	1c7b      	adds	r3, r7, #1
 8015282:	d108      	bne.n	8015296 <_strtol_l.isra.0+0xce>
 8015284:	2322      	movs	r3, #34	; 0x22
 8015286:	f8c8 3000 	str.w	r3, [r8]
 801528a:	4608      	mov	r0, r1
 801528c:	f1ba 0f00 	cmp.w	sl, #0
 8015290:	d107      	bne.n	80152a2 <_strtol_l.isra.0+0xda>
 8015292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015296:	b102      	cbz	r2, 801529a <_strtol_l.isra.0+0xd2>
 8015298:	4240      	negs	r0, r0
 801529a:	f1ba 0f00 	cmp.w	sl, #0
 801529e:	d0f8      	beq.n	8015292 <_strtol_l.isra.0+0xca>
 80152a0:	b10f      	cbz	r7, 80152a6 <_strtol_l.isra.0+0xde>
 80152a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80152a6:	f8ca 9000 	str.w	r9, [sl]
 80152aa:	e7f2      	b.n	8015292 <_strtol_l.isra.0+0xca>
 80152ac:	2430      	movs	r4, #48	; 0x30
 80152ae:	2e00      	cmp	r6, #0
 80152b0:	d1af      	bne.n	8015212 <_strtol_l.isra.0+0x4a>
 80152b2:	2608      	movs	r6, #8
 80152b4:	e7ad      	b.n	8015212 <_strtol_l.isra.0+0x4a>
 80152b6:	2c30      	cmp	r4, #48	; 0x30
 80152b8:	d0a3      	beq.n	8015202 <_strtol_l.isra.0+0x3a>
 80152ba:	260a      	movs	r6, #10
 80152bc:	e7a9      	b.n	8015212 <_strtol_l.isra.0+0x4a>
	...

080152c0 <_strtol_r>:
 80152c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152c2:	4c06      	ldr	r4, [pc, #24]	; (80152dc <_strtol_r+0x1c>)
 80152c4:	4d06      	ldr	r5, [pc, #24]	; (80152e0 <_strtol_r+0x20>)
 80152c6:	6824      	ldr	r4, [r4, #0]
 80152c8:	6a24      	ldr	r4, [r4, #32]
 80152ca:	2c00      	cmp	r4, #0
 80152cc:	bf08      	it	eq
 80152ce:	462c      	moveq	r4, r5
 80152d0:	9400      	str	r4, [sp, #0]
 80152d2:	f7ff ff79 	bl	80151c8 <_strtol_l.isra.0>
 80152d6:	b003      	add	sp, #12
 80152d8:	bd30      	pop	{r4, r5, pc}
 80152da:	bf00      	nop
 80152dc:	2000000c 	.word	0x2000000c
 80152e0:	20000070 	.word	0x20000070

080152e4 <_vsiprintf_r>:
 80152e4:	b500      	push	{lr}
 80152e6:	b09b      	sub	sp, #108	; 0x6c
 80152e8:	9100      	str	r1, [sp, #0]
 80152ea:	9104      	str	r1, [sp, #16]
 80152ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80152f0:	9105      	str	r1, [sp, #20]
 80152f2:	9102      	str	r1, [sp, #8]
 80152f4:	4905      	ldr	r1, [pc, #20]	; (801530c <_vsiprintf_r+0x28>)
 80152f6:	9103      	str	r1, [sp, #12]
 80152f8:	4669      	mov	r1, sp
 80152fa:	f002 f99b 	bl	8017634 <_svfiprintf_r>
 80152fe:	9b00      	ldr	r3, [sp, #0]
 8015300:	2200      	movs	r2, #0
 8015302:	701a      	strb	r2, [r3, #0]
 8015304:	b01b      	add	sp, #108	; 0x6c
 8015306:	f85d fb04 	ldr.w	pc, [sp], #4
 801530a:	bf00      	nop
 801530c:	ffff0208 	.word	0xffff0208

08015310 <vsiprintf>:
 8015310:	4613      	mov	r3, r2
 8015312:	460a      	mov	r2, r1
 8015314:	4601      	mov	r1, r0
 8015316:	4802      	ldr	r0, [pc, #8]	; (8015320 <vsiprintf+0x10>)
 8015318:	6800      	ldr	r0, [r0, #0]
 801531a:	f7ff bfe3 	b.w	80152e4 <_vsiprintf_r>
 801531e:	bf00      	nop
 8015320:	2000000c 	.word	0x2000000c

08015324 <__swbuf_r>:
 8015324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015326:	460e      	mov	r6, r1
 8015328:	4614      	mov	r4, r2
 801532a:	4605      	mov	r5, r0
 801532c:	b118      	cbz	r0, 8015336 <__swbuf_r+0x12>
 801532e:	6983      	ldr	r3, [r0, #24]
 8015330:	b90b      	cbnz	r3, 8015336 <__swbuf_r+0x12>
 8015332:	f001 f80d 	bl	8016350 <__sinit>
 8015336:	4b21      	ldr	r3, [pc, #132]	; (80153bc <__swbuf_r+0x98>)
 8015338:	429c      	cmp	r4, r3
 801533a:	d12a      	bne.n	8015392 <__swbuf_r+0x6e>
 801533c:	686c      	ldr	r4, [r5, #4]
 801533e:	69a3      	ldr	r3, [r4, #24]
 8015340:	60a3      	str	r3, [r4, #8]
 8015342:	89a3      	ldrh	r3, [r4, #12]
 8015344:	071a      	lsls	r2, r3, #28
 8015346:	d52e      	bpl.n	80153a6 <__swbuf_r+0x82>
 8015348:	6923      	ldr	r3, [r4, #16]
 801534a:	b363      	cbz	r3, 80153a6 <__swbuf_r+0x82>
 801534c:	6923      	ldr	r3, [r4, #16]
 801534e:	6820      	ldr	r0, [r4, #0]
 8015350:	1ac0      	subs	r0, r0, r3
 8015352:	6963      	ldr	r3, [r4, #20]
 8015354:	b2f6      	uxtb	r6, r6
 8015356:	4283      	cmp	r3, r0
 8015358:	4637      	mov	r7, r6
 801535a:	dc04      	bgt.n	8015366 <__swbuf_r+0x42>
 801535c:	4621      	mov	r1, r4
 801535e:	4628      	mov	r0, r5
 8015360:	f000 ff8c 	bl	801627c <_fflush_r>
 8015364:	bb28      	cbnz	r0, 80153b2 <__swbuf_r+0x8e>
 8015366:	68a3      	ldr	r3, [r4, #8]
 8015368:	3b01      	subs	r3, #1
 801536a:	60a3      	str	r3, [r4, #8]
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	1c5a      	adds	r2, r3, #1
 8015370:	6022      	str	r2, [r4, #0]
 8015372:	701e      	strb	r6, [r3, #0]
 8015374:	6963      	ldr	r3, [r4, #20]
 8015376:	3001      	adds	r0, #1
 8015378:	4283      	cmp	r3, r0
 801537a:	d004      	beq.n	8015386 <__swbuf_r+0x62>
 801537c:	89a3      	ldrh	r3, [r4, #12]
 801537e:	07db      	lsls	r3, r3, #31
 8015380:	d519      	bpl.n	80153b6 <__swbuf_r+0x92>
 8015382:	2e0a      	cmp	r6, #10
 8015384:	d117      	bne.n	80153b6 <__swbuf_r+0x92>
 8015386:	4621      	mov	r1, r4
 8015388:	4628      	mov	r0, r5
 801538a:	f000 ff77 	bl	801627c <_fflush_r>
 801538e:	b190      	cbz	r0, 80153b6 <__swbuf_r+0x92>
 8015390:	e00f      	b.n	80153b2 <__swbuf_r+0x8e>
 8015392:	4b0b      	ldr	r3, [pc, #44]	; (80153c0 <__swbuf_r+0x9c>)
 8015394:	429c      	cmp	r4, r3
 8015396:	d101      	bne.n	801539c <__swbuf_r+0x78>
 8015398:	68ac      	ldr	r4, [r5, #8]
 801539a:	e7d0      	b.n	801533e <__swbuf_r+0x1a>
 801539c:	4b09      	ldr	r3, [pc, #36]	; (80153c4 <__swbuf_r+0xa0>)
 801539e:	429c      	cmp	r4, r3
 80153a0:	bf08      	it	eq
 80153a2:	68ec      	ldreq	r4, [r5, #12]
 80153a4:	e7cb      	b.n	801533e <__swbuf_r+0x1a>
 80153a6:	4621      	mov	r1, r4
 80153a8:	4628      	mov	r0, r5
 80153aa:	f000 f81f 	bl	80153ec <__swsetup_r>
 80153ae:	2800      	cmp	r0, #0
 80153b0:	d0cc      	beq.n	801534c <__swbuf_r+0x28>
 80153b2:	f04f 37ff 	mov.w	r7, #4294967295
 80153b6:	4638      	mov	r0, r7
 80153b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153ba:	bf00      	nop
 80153bc:	08018d20 	.word	0x08018d20
 80153c0:	08018d40 	.word	0x08018d40
 80153c4:	08018d00 	.word	0x08018d00

080153c8 <_write_r>:
 80153c8:	b538      	push	{r3, r4, r5, lr}
 80153ca:	4c07      	ldr	r4, [pc, #28]	; (80153e8 <_write_r+0x20>)
 80153cc:	4605      	mov	r5, r0
 80153ce:	4608      	mov	r0, r1
 80153d0:	4611      	mov	r1, r2
 80153d2:	2200      	movs	r2, #0
 80153d4:	6022      	str	r2, [r4, #0]
 80153d6:	461a      	mov	r2, r3
 80153d8:	f7ef f9e1 	bl	800479e <_write>
 80153dc:	1c43      	adds	r3, r0, #1
 80153de:	d102      	bne.n	80153e6 <_write_r+0x1e>
 80153e0:	6823      	ldr	r3, [r4, #0]
 80153e2:	b103      	cbz	r3, 80153e6 <_write_r+0x1e>
 80153e4:	602b      	str	r3, [r5, #0]
 80153e6:	bd38      	pop	{r3, r4, r5, pc}
 80153e8:	20037fc4 	.word	0x20037fc4

080153ec <__swsetup_r>:
 80153ec:	4b32      	ldr	r3, [pc, #200]	; (80154b8 <__swsetup_r+0xcc>)
 80153ee:	b570      	push	{r4, r5, r6, lr}
 80153f0:	681d      	ldr	r5, [r3, #0]
 80153f2:	4606      	mov	r6, r0
 80153f4:	460c      	mov	r4, r1
 80153f6:	b125      	cbz	r5, 8015402 <__swsetup_r+0x16>
 80153f8:	69ab      	ldr	r3, [r5, #24]
 80153fa:	b913      	cbnz	r3, 8015402 <__swsetup_r+0x16>
 80153fc:	4628      	mov	r0, r5
 80153fe:	f000 ffa7 	bl	8016350 <__sinit>
 8015402:	4b2e      	ldr	r3, [pc, #184]	; (80154bc <__swsetup_r+0xd0>)
 8015404:	429c      	cmp	r4, r3
 8015406:	d10f      	bne.n	8015428 <__swsetup_r+0x3c>
 8015408:	686c      	ldr	r4, [r5, #4]
 801540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801540e:	b29a      	uxth	r2, r3
 8015410:	0715      	lsls	r5, r2, #28
 8015412:	d42c      	bmi.n	801546e <__swsetup_r+0x82>
 8015414:	06d0      	lsls	r0, r2, #27
 8015416:	d411      	bmi.n	801543c <__swsetup_r+0x50>
 8015418:	2209      	movs	r2, #9
 801541a:	6032      	str	r2, [r6, #0]
 801541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015420:	81a3      	strh	r3, [r4, #12]
 8015422:	f04f 30ff 	mov.w	r0, #4294967295
 8015426:	e03e      	b.n	80154a6 <__swsetup_r+0xba>
 8015428:	4b25      	ldr	r3, [pc, #148]	; (80154c0 <__swsetup_r+0xd4>)
 801542a:	429c      	cmp	r4, r3
 801542c:	d101      	bne.n	8015432 <__swsetup_r+0x46>
 801542e:	68ac      	ldr	r4, [r5, #8]
 8015430:	e7eb      	b.n	801540a <__swsetup_r+0x1e>
 8015432:	4b24      	ldr	r3, [pc, #144]	; (80154c4 <__swsetup_r+0xd8>)
 8015434:	429c      	cmp	r4, r3
 8015436:	bf08      	it	eq
 8015438:	68ec      	ldreq	r4, [r5, #12]
 801543a:	e7e6      	b.n	801540a <__swsetup_r+0x1e>
 801543c:	0751      	lsls	r1, r2, #29
 801543e:	d512      	bpl.n	8015466 <__swsetup_r+0x7a>
 8015440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015442:	b141      	cbz	r1, 8015456 <__swsetup_r+0x6a>
 8015444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015448:	4299      	cmp	r1, r3
 801544a:	d002      	beq.n	8015452 <__swsetup_r+0x66>
 801544c:	4630      	mov	r0, r6
 801544e:	f001 ffef 	bl	8017430 <_free_r>
 8015452:	2300      	movs	r3, #0
 8015454:	6363      	str	r3, [r4, #52]	; 0x34
 8015456:	89a3      	ldrh	r3, [r4, #12]
 8015458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801545c:	81a3      	strh	r3, [r4, #12]
 801545e:	2300      	movs	r3, #0
 8015460:	6063      	str	r3, [r4, #4]
 8015462:	6923      	ldr	r3, [r4, #16]
 8015464:	6023      	str	r3, [r4, #0]
 8015466:	89a3      	ldrh	r3, [r4, #12]
 8015468:	f043 0308 	orr.w	r3, r3, #8
 801546c:	81a3      	strh	r3, [r4, #12]
 801546e:	6923      	ldr	r3, [r4, #16]
 8015470:	b94b      	cbnz	r3, 8015486 <__swsetup_r+0x9a>
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801547c:	d003      	beq.n	8015486 <__swsetup_r+0x9a>
 801547e:	4621      	mov	r1, r4
 8015480:	4630      	mov	r0, r6
 8015482:	f001 fb6d 	bl	8016b60 <__smakebuf_r>
 8015486:	89a2      	ldrh	r2, [r4, #12]
 8015488:	f012 0301 	ands.w	r3, r2, #1
 801548c:	d00c      	beq.n	80154a8 <__swsetup_r+0xbc>
 801548e:	2300      	movs	r3, #0
 8015490:	60a3      	str	r3, [r4, #8]
 8015492:	6963      	ldr	r3, [r4, #20]
 8015494:	425b      	negs	r3, r3
 8015496:	61a3      	str	r3, [r4, #24]
 8015498:	6923      	ldr	r3, [r4, #16]
 801549a:	b953      	cbnz	r3, 80154b2 <__swsetup_r+0xc6>
 801549c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80154a4:	d1ba      	bne.n	801541c <__swsetup_r+0x30>
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	0792      	lsls	r2, r2, #30
 80154aa:	bf58      	it	pl
 80154ac:	6963      	ldrpl	r3, [r4, #20]
 80154ae:	60a3      	str	r3, [r4, #8]
 80154b0:	e7f2      	b.n	8015498 <__swsetup_r+0xac>
 80154b2:	2000      	movs	r0, #0
 80154b4:	e7f7      	b.n	80154a6 <__swsetup_r+0xba>
 80154b6:	bf00      	nop
 80154b8:	2000000c 	.word	0x2000000c
 80154bc:	08018d20 	.word	0x08018d20
 80154c0:	08018d40 	.word	0x08018d40
 80154c4:	08018d00 	.word	0x08018d00

080154c8 <_close_r>:
 80154c8:	b538      	push	{r3, r4, r5, lr}
 80154ca:	4c06      	ldr	r4, [pc, #24]	; (80154e4 <_close_r+0x1c>)
 80154cc:	2300      	movs	r3, #0
 80154ce:	4605      	mov	r5, r0
 80154d0:	4608      	mov	r0, r1
 80154d2:	6023      	str	r3, [r4, #0]
 80154d4:	f7f0 fec7 	bl	8006266 <_close>
 80154d8:	1c43      	adds	r3, r0, #1
 80154da:	d102      	bne.n	80154e2 <_close_r+0x1a>
 80154dc:	6823      	ldr	r3, [r4, #0]
 80154de:	b103      	cbz	r3, 80154e2 <_close_r+0x1a>
 80154e0:	602b      	str	r3, [r5, #0]
 80154e2:	bd38      	pop	{r3, r4, r5, pc}
 80154e4:	20037fc4 	.word	0x20037fc4

080154e8 <quorem>:
 80154e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154ec:	6903      	ldr	r3, [r0, #16]
 80154ee:	690c      	ldr	r4, [r1, #16]
 80154f0:	42a3      	cmp	r3, r4
 80154f2:	4680      	mov	r8, r0
 80154f4:	f2c0 8082 	blt.w	80155fc <quorem+0x114>
 80154f8:	3c01      	subs	r4, #1
 80154fa:	f101 0714 	add.w	r7, r1, #20
 80154fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015502:	f100 0614 	add.w	r6, r0, #20
 8015506:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801550a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801550e:	eb06 030c 	add.w	r3, r6, ip
 8015512:	3501      	adds	r5, #1
 8015514:	eb07 090c 	add.w	r9, r7, ip
 8015518:	9301      	str	r3, [sp, #4]
 801551a:	fbb0 f5f5 	udiv	r5, r0, r5
 801551e:	b395      	cbz	r5, 8015586 <quorem+0x9e>
 8015520:	f04f 0a00 	mov.w	sl, #0
 8015524:	4638      	mov	r0, r7
 8015526:	46b6      	mov	lr, r6
 8015528:	46d3      	mov	fp, sl
 801552a:	f850 2b04 	ldr.w	r2, [r0], #4
 801552e:	b293      	uxth	r3, r2
 8015530:	fb05 a303 	mla	r3, r5, r3, sl
 8015534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015538:	b29b      	uxth	r3, r3
 801553a:	ebab 0303 	sub.w	r3, fp, r3
 801553e:	0c12      	lsrs	r2, r2, #16
 8015540:	f8de b000 	ldr.w	fp, [lr]
 8015544:	fb05 a202 	mla	r2, r5, r2, sl
 8015548:	fa13 f38b 	uxtah	r3, r3, fp
 801554c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015550:	fa1f fb82 	uxth.w	fp, r2
 8015554:	f8de 2000 	ldr.w	r2, [lr]
 8015558:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801555c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015560:	b29b      	uxth	r3, r3
 8015562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015566:	4581      	cmp	r9, r0
 8015568:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801556c:	f84e 3b04 	str.w	r3, [lr], #4
 8015570:	d2db      	bcs.n	801552a <quorem+0x42>
 8015572:	f856 300c 	ldr.w	r3, [r6, ip]
 8015576:	b933      	cbnz	r3, 8015586 <quorem+0x9e>
 8015578:	9b01      	ldr	r3, [sp, #4]
 801557a:	3b04      	subs	r3, #4
 801557c:	429e      	cmp	r6, r3
 801557e:	461a      	mov	r2, r3
 8015580:	d330      	bcc.n	80155e4 <quorem+0xfc>
 8015582:	f8c8 4010 	str.w	r4, [r8, #16]
 8015586:	4640      	mov	r0, r8
 8015588:	f001 fd98 	bl	80170bc <__mcmp>
 801558c:	2800      	cmp	r0, #0
 801558e:	db25      	blt.n	80155dc <quorem+0xf4>
 8015590:	3501      	adds	r5, #1
 8015592:	4630      	mov	r0, r6
 8015594:	f04f 0c00 	mov.w	ip, #0
 8015598:	f857 2b04 	ldr.w	r2, [r7], #4
 801559c:	f8d0 e000 	ldr.w	lr, [r0]
 80155a0:	b293      	uxth	r3, r2
 80155a2:	ebac 0303 	sub.w	r3, ip, r3
 80155a6:	0c12      	lsrs	r2, r2, #16
 80155a8:	fa13 f38e 	uxtah	r3, r3, lr
 80155ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80155b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155ba:	45b9      	cmp	r9, r7
 80155bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80155c0:	f840 3b04 	str.w	r3, [r0], #4
 80155c4:	d2e8      	bcs.n	8015598 <quorem+0xb0>
 80155c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80155ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80155ce:	b92a      	cbnz	r2, 80155dc <quorem+0xf4>
 80155d0:	3b04      	subs	r3, #4
 80155d2:	429e      	cmp	r6, r3
 80155d4:	461a      	mov	r2, r3
 80155d6:	d30b      	bcc.n	80155f0 <quorem+0x108>
 80155d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80155dc:	4628      	mov	r0, r5
 80155de:	b003      	add	sp, #12
 80155e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e4:	6812      	ldr	r2, [r2, #0]
 80155e6:	3b04      	subs	r3, #4
 80155e8:	2a00      	cmp	r2, #0
 80155ea:	d1ca      	bne.n	8015582 <quorem+0x9a>
 80155ec:	3c01      	subs	r4, #1
 80155ee:	e7c5      	b.n	801557c <quorem+0x94>
 80155f0:	6812      	ldr	r2, [r2, #0]
 80155f2:	3b04      	subs	r3, #4
 80155f4:	2a00      	cmp	r2, #0
 80155f6:	d1ef      	bne.n	80155d8 <quorem+0xf0>
 80155f8:	3c01      	subs	r4, #1
 80155fa:	e7ea      	b.n	80155d2 <quorem+0xea>
 80155fc:	2000      	movs	r0, #0
 80155fe:	e7ee      	b.n	80155de <quorem+0xf6>

08015600 <_dtoa_r>:
 8015600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	ec57 6b10 	vmov	r6, r7, d0
 8015608:	b097      	sub	sp, #92	; 0x5c
 801560a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801560c:	9106      	str	r1, [sp, #24]
 801560e:	4604      	mov	r4, r0
 8015610:	920b      	str	r2, [sp, #44]	; 0x2c
 8015612:	9312      	str	r3, [sp, #72]	; 0x48
 8015614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015618:	e9cd 6700 	strd	r6, r7, [sp]
 801561c:	b93d      	cbnz	r5, 801562e <_dtoa_r+0x2e>
 801561e:	2010      	movs	r0, #16
 8015620:	f001 fade 	bl	8016be0 <malloc>
 8015624:	6260      	str	r0, [r4, #36]	; 0x24
 8015626:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801562a:	6005      	str	r5, [r0, #0]
 801562c:	60c5      	str	r5, [r0, #12]
 801562e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015630:	6819      	ldr	r1, [r3, #0]
 8015632:	b151      	cbz	r1, 801564a <_dtoa_r+0x4a>
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	604a      	str	r2, [r1, #4]
 8015638:	2301      	movs	r3, #1
 801563a:	4093      	lsls	r3, r2
 801563c:	608b      	str	r3, [r1, #8]
 801563e:	4620      	mov	r0, r4
 8015640:	f001 fb1c 	bl	8016c7c <_Bfree>
 8015644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015646:	2200      	movs	r2, #0
 8015648:	601a      	str	r2, [r3, #0]
 801564a:	1e3b      	subs	r3, r7, #0
 801564c:	bfbb      	ittet	lt
 801564e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015652:	9301      	strlt	r3, [sp, #4]
 8015654:	2300      	movge	r3, #0
 8015656:	2201      	movlt	r2, #1
 8015658:	bfac      	ite	ge
 801565a:	f8c8 3000 	strge.w	r3, [r8]
 801565e:	f8c8 2000 	strlt.w	r2, [r8]
 8015662:	4baf      	ldr	r3, [pc, #700]	; (8015920 <_dtoa_r+0x320>)
 8015664:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015668:	ea33 0308 	bics.w	r3, r3, r8
 801566c:	d114      	bne.n	8015698 <_dtoa_r+0x98>
 801566e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015670:	f242 730f 	movw	r3, #9999	; 0x270f
 8015674:	6013      	str	r3, [r2, #0]
 8015676:	9b00      	ldr	r3, [sp, #0]
 8015678:	b923      	cbnz	r3, 8015684 <_dtoa_r+0x84>
 801567a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801567e:	2800      	cmp	r0, #0
 8015680:	f000 8542 	beq.w	8016108 <_dtoa_r+0xb08>
 8015684:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015686:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015934 <_dtoa_r+0x334>
 801568a:	2b00      	cmp	r3, #0
 801568c:	f000 8544 	beq.w	8016118 <_dtoa_r+0xb18>
 8015690:	f10b 0303 	add.w	r3, fp, #3
 8015694:	f000 bd3e 	b.w	8016114 <_dtoa_r+0xb14>
 8015698:	e9dd 6700 	ldrd	r6, r7, [sp]
 801569c:	2200      	movs	r2, #0
 801569e:	2300      	movs	r3, #0
 80156a0:	4630      	mov	r0, r6
 80156a2:	4639      	mov	r1, r7
 80156a4:	f7eb fa28 	bl	8000af8 <__aeabi_dcmpeq>
 80156a8:	4681      	mov	r9, r0
 80156aa:	b168      	cbz	r0, 80156c8 <_dtoa_r+0xc8>
 80156ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156ae:	2301      	movs	r3, #1
 80156b0:	6013      	str	r3, [r2, #0]
 80156b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f000 8524 	beq.w	8016102 <_dtoa_r+0xb02>
 80156ba:	4b9a      	ldr	r3, [pc, #616]	; (8015924 <_dtoa_r+0x324>)
 80156bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80156be:	f103 3bff 	add.w	fp, r3, #4294967295
 80156c2:	6013      	str	r3, [r2, #0]
 80156c4:	f000 bd28 	b.w	8016118 <_dtoa_r+0xb18>
 80156c8:	aa14      	add	r2, sp, #80	; 0x50
 80156ca:	a915      	add	r1, sp, #84	; 0x54
 80156cc:	ec47 6b10 	vmov	d0, r6, r7
 80156d0:	4620      	mov	r0, r4
 80156d2:	f001 fde1 	bl	8017298 <__d2b>
 80156d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80156da:	9004      	str	r0, [sp, #16]
 80156dc:	2d00      	cmp	r5, #0
 80156de:	d07c      	beq.n	80157da <_dtoa_r+0x1da>
 80156e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80156e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80156e8:	46b2      	mov	sl, r6
 80156ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80156ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80156f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80156f6:	2200      	movs	r2, #0
 80156f8:	4b8b      	ldr	r3, [pc, #556]	; (8015928 <_dtoa_r+0x328>)
 80156fa:	4650      	mov	r0, sl
 80156fc:	4659      	mov	r1, fp
 80156fe:	f7ea fddb 	bl	80002b8 <__aeabi_dsub>
 8015702:	a381      	add	r3, pc, #516	; (adr r3, 8015908 <_dtoa_r+0x308>)
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	f7ea ff8e 	bl	8000628 <__aeabi_dmul>
 801570c:	a380      	add	r3, pc, #512	; (adr r3, 8015910 <_dtoa_r+0x310>)
 801570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015712:	f7ea fdd3 	bl	80002bc <__adddf3>
 8015716:	4606      	mov	r6, r0
 8015718:	4628      	mov	r0, r5
 801571a:	460f      	mov	r7, r1
 801571c:	f7ea ff1a 	bl	8000554 <__aeabi_i2d>
 8015720:	a37d      	add	r3, pc, #500	; (adr r3, 8015918 <_dtoa_r+0x318>)
 8015722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015726:	f7ea ff7f 	bl	8000628 <__aeabi_dmul>
 801572a:	4602      	mov	r2, r0
 801572c:	460b      	mov	r3, r1
 801572e:	4630      	mov	r0, r6
 8015730:	4639      	mov	r1, r7
 8015732:	f7ea fdc3 	bl	80002bc <__adddf3>
 8015736:	4606      	mov	r6, r0
 8015738:	460f      	mov	r7, r1
 801573a:	f7eb fa25 	bl	8000b88 <__aeabi_d2iz>
 801573e:	2200      	movs	r2, #0
 8015740:	4682      	mov	sl, r0
 8015742:	2300      	movs	r3, #0
 8015744:	4630      	mov	r0, r6
 8015746:	4639      	mov	r1, r7
 8015748:	f7eb f9e0 	bl	8000b0c <__aeabi_dcmplt>
 801574c:	b148      	cbz	r0, 8015762 <_dtoa_r+0x162>
 801574e:	4650      	mov	r0, sl
 8015750:	f7ea ff00 	bl	8000554 <__aeabi_i2d>
 8015754:	4632      	mov	r2, r6
 8015756:	463b      	mov	r3, r7
 8015758:	f7eb f9ce 	bl	8000af8 <__aeabi_dcmpeq>
 801575c:	b908      	cbnz	r0, 8015762 <_dtoa_r+0x162>
 801575e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015762:	f1ba 0f16 	cmp.w	sl, #22
 8015766:	d859      	bhi.n	801581c <_dtoa_r+0x21c>
 8015768:	4970      	ldr	r1, [pc, #448]	; (801592c <_dtoa_r+0x32c>)
 801576a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801576e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015776:	f7eb f9e7 	bl	8000b48 <__aeabi_dcmpgt>
 801577a:	2800      	cmp	r0, #0
 801577c:	d050      	beq.n	8015820 <_dtoa_r+0x220>
 801577e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015782:	2300      	movs	r3, #0
 8015784:	930f      	str	r3, [sp, #60]	; 0x3c
 8015786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015788:	1b5d      	subs	r5, r3, r5
 801578a:	f1b5 0801 	subs.w	r8, r5, #1
 801578e:	bf49      	itett	mi
 8015790:	f1c5 0301 	rsbmi	r3, r5, #1
 8015794:	2300      	movpl	r3, #0
 8015796:	9305      	strmi	r3, [sp, #20]
 8015798:	f04f 0800 	movmi.w	r8, #0
 801579c:	bf58      	it	pl
 801579e:	9305      	strpl	r3, [sp, #20]
 80157a0:	f1ba 0f00 	cmp.w	sl, #0
 80157a4:	db3e      	blt.n	8015824 <_dtoa_r+0x224>
 80157a6:	2300      	movs	r3, #0
 80157a8:	44d0      	add	r8, sl
 80157aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80157ae:	9307      	str	r3, [sp, #28]
 80157b0:	9b06      	ldr	r3, [sp, #24]
 80157b2:	2b09      	cmp	r3, #9
 80157b4:	f200 8090 	bhi.w	80158d8 <_dtoa_r+0x2d8>
 80157b8:	2b05      	cmp	r3, #5
 80157ba:	bfc4      	itt	gt
 80157bc:	3b04      	subgt	r3, #4
 80157be:	9306      	strgt	r3, [sp, #24]
 80157c0:	9b06      	ldr	r3, [sp, #24]
 80157c2:	f1a3 0302 	sub.w	r3, r3, #2
 80157c6:	bfcc      	ite	gt
 80157c8:	2500      	movgt	r5, #0
 80157ca:	2501      	movle	r5, #1
 80157cc:	2b03      	cmp	r3, #3
 80157ce:	f200 808f 	bhi.w	80158f0 <_dtoa_r+0x2f0>
 80157d2:	e8df f003 	tbb	[pc, r3]
 80157d6:	7f7d      	.short	0x7f7d
 80157d8:	7131      	.short	0x7131
 80157da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80157de:	441d      	add	r5, r3
 80157e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80157e4:	2820      	cmp	r0, #32
 80157e6:	dd13      	ble.n	8015810 <_dtoa_r+0x210>
 80157e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80157ec:	9b00      	ldr	r3, [sp, #0]
 80157ee:	fa08 f800 	lsl.w	r8, r8, r0
 80157f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80157f6:	fa23 f000 	lsr.w	r0, r3, r0
 80157fa:	ea48 0000 	orr.w	r0, r8, r0
 80157fe:	f7ea fe99 	bl	8000534 <__aeabi_ui2d>
 8015802:	2301      	movs	r3, #1
 8015804:	4682      	mov	sl, r0
 8015806:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801580a:	3d01      	subs	r5, #1
 801580c:	9313      	str	r3, [sp, #76]	; 0x4c
 801580e:	e772      	b.n	80156f6 <_dtoa_r+0xf6>
 8015810:	9b00      	ldr	r3, [sp, #0]
 8015812:	f1c0 0020 	rsb	r0, r0, #32
 8015816:	fa03 f000 	lsl.w	r0, r3, r0
 801581a:	e7f0      	b.n	80157fe <_dtoa_r+0x1fe>
 801581c:	2301      	movs	r3, #1
 801581e:	e7b1      	b.n	8015784 <_dtoa_r+0x184>
 8015820:	900f      	str	r0, [sp, #60]	; 0x3c
 8015822:	e7b0      	b.n	8015786 <_dtoa_r+0x186>
 8015824:	9b05      	ldr	r3, [sp, #20]
 8015826:	eba3 030a 	sub.w	r3, r3, sl
 801582a:	9305      	str	r3, [sp, #20]
 801582c:	f1ca 0300 	rsb	r3, sl, #0
 8015830:	9307      	str	r3, [sp, #28]
 8015832:	2300      	movs	r3, #0
 8015834:	930e      	str	r3, [sp, #56]	; 0x38
 8015836:	e7bb      	b.n	80157b0 <_dtoa_r+0x1b0>
 8015838:	2301      	movs	r3, #1
 801583a:	930a      	str	r3, [sp, #40]	; 0x28
 801583c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801583e:	2b00      	cmp	r3, #0
 8015840:	dd59      	ble.n	80158f6 <_dtoa_r+0x2f6>
 8015842:	9302      	str	r3, [sp, #8]
 8015844:	4699      	mov	r9, r3
 8015846:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015848:	2200      	movs	r2, #0
 801584a:	6072      	str	r2, [r6, #4]
 801584c:	2204      	movs	r2, #4
 801584e:	f102 0014 	add.w	r0, r2, #20
 8015852:	4298      	cmp	r0, r3
 8015854:	6871      	ldr	r1, [r6, #4]
 8015856:	d953      	bls.n	8015900 <_dtoa_r+0x300>
 8015858:	4620      	mov	r0, r4
 801585a:	f001 f9db 	bl	8016c14 <_Balloc>
 801585e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015860:	6030      	str	r0, [r6, #0]
 8015862:	f1b9 0f0e 	cmp.w	r9, #14
 8015866:	f8d3 b000 	ldr.w	fp, [r3]
 801586a:	f200 80e6 	bhi.w	8015a3a <_dtoa_r+0x43a>
 801586e:	2d00      	cmp	r5, #0
 8015870:	f000 80e3 	beq.w	8015a3a <_dtoa_r+0x43a>
 8015874:	ed9d 7b00 	vldr	d7, [sp]
 8015878:	f1ba 0f00 	cmp.w	sl, #0
 801587c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015880:	dd74      	ble.n	801596c <_dtoa_r+0x36c>
 8015882:	4a2a      	ldr	r2, [pc, #168]	; (801592c <_dtoa_r+0x32c>)
 8015884:	f00a 030f 	and.w	r3, sl, #15
 8015888:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801588c:	ed93 7b00 	vldr	d7, [r3]
 8015890:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015894:	06f0      	lsls	r0, r6, #27
 8015896:	ed8d 7b08 	vstr	d7, [sp, #32]
 801589a:	d565      	bpl.n	8015968 <_dtoa_r+0x368>
 801589c:	4b24      	ldr	r3, [pc, #144]	; (8015930 <_dtoa_r+0x330>)
 801589e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80158a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80158a6:	f7ea ffe9 	bl	800087c <__aeabi_ddiv>
 80158aa:	e9cd 0100 	strd	r0, r1, [sp]
 80158ae:	f006 060f 	and.w	r6, r6, #15
 80158b2:	2503      	movs	r5, #3
 80158b4:	4f1e      	ldr	r7, [pc, #120]	; (8015930 <_dtoa_r+0x330>)
 80158b6:	e04c      	b.n	8015952 <_dtoa_r+0x352>
 80158b8:	2301      	movs	r3, #1
 80158ba:	930a      	str	r3, [sp, #40]	; 0x28
 80158bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158be:	4453      	add	r3, sl
 80158c0:	f103 0901 	add.w	r9, r3, #1
 80158c4:	9302      	str	r3, [sp, #8]
 80158c6:	464b      	mov	r3, r9
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	bfb8      	it	lt
 80158cc:	2301      	movlt	r3, #1
 80158ce:	e7ba      	b.n	8015846 <_dtoa_r+0x246>
 80158d0:	2300      	movs	r3, #0
 80158d2:	e7b2      	b.n	801583a <_dtoa_r+0x23a>
 80158d4:	2300      	movs	r3, #0
 80158d6:	e7f0      	b.n	80158ba <_dtoa_r+0x2ba>
 80158d8:	2501      	movs	r5, #1
 80158da:	2300      	movs	r3, #0
 80158dc:	9306      	str	r3, [sp, #24]
 80158de:	950a      	str	r5, [sp, #40]	; 0x28
 80158e0:	f04f 33ff 	mov.w	r3, #4294967295
 80158e4:	9302      	str	r3, [sp, #8]
 80158e6:	4699      	mov	r9, r3
 80158e8:	2200      	movs	r2, #0
 80158ea:	2312      	movs	r3, #18
 80158ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80158ee:	e7aa      	b.n	8015846 <_dtoa_r+0x246>
 80158f0:	2301      	movs	r3, #1
 80158f2:	930a      	str	r3, [sp, #40]	; 0x28
 80158f4:	e7f4      	b.n	80158e0 <_dtoa_r+0x2e0>
 80158f6:	2301      	movs	r3, #1
 80158f8:	9302      	str	r3, [sp, #8]
 80158fa:	4699      	mov	r9, r3
 80158fc:	461a      	mov	r2, r3
 80158fe:	e7f5      	b.n	80158ec <_dtoa_r+0x2ec>
 8015900:	3101      	adds	r1, #1
 8015902:	6071      	str	r1, [r6, #4]
 8015904:	0052      	lsls	r2, r2, #1
 8015906:	e7a2      	b.n	801584e <_dtoa_r+0x24e>
 8015908:	636f4361 	.word	0x636f4361
 801590c:	3fd287a7 	.word	0x3fd287a7
 8015910:	8b60c8b3 	.word	0x8b60c8b3
 8015914:	3fc68a28 	.word	0x3fc68a28
 8015918:	509f79fb 	.word	0x509f79fb
 801591c:	3fd34413 	.word	0x3fd34413
 8015920:	7ff00000 	.word	0x7ff00000
 8015924:	08018e94 	.word	0x08018e94
 8015928:	3ff80000 	.word	0x3ff80000
 801592c:	08018d98 	.word	0x08018d98
 8015930:	08018d70 	.word	0x08018d70
 8015934:	08018cf9 	.word	0x08018cf9
 8015938:	07f1      	lsls	r1, r6, #31
 801593a:	d508      	bpl.n	801594e <_dtoa_r+0x34e>
 801593c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015944:	f7ea fe70 	bl	8000628 <__aeabi_dmul>
 8015948:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801594c:	3501      	adds	r5, #1
 801594e:	1076      	asrs	r6, r6, #1
 8015950:	3708      	adds	r7, #8
 8015952:	2e00      	cmp	r6, #0
 8015954:	d1f0      	bne.n	8015938 <_dtoa_r+0x338>
 8015956:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801595a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801595e:	f7ea ff8d 	bl	800087c <__aeabi_ddiv>
 8015962:	e9cd 0100 	strd	r0, r1, [sp]
 8015966:	e01a      	b.n	801599e <_dtoa_r+0x39e>
 8015968:	2502      	movs	r5, #2
 801596a:	e7a3      	b.n	80158b4 <_dtoa_r+0x2b4>
 801596c:	f000 80a0 	beq.w	8015ab0 <_dtoa_r+0x4b0>
 8015970:	f1ca 0600 	rsb	r6, sl, #0
 8015974:	4b9f      	ldr	r3, [pc, #636]	; (8015bf4 <_dtoa_r+0x5f4>)
 8015976:	4fa0      	ldr	r7, [pc, #640]	; (8015bf8 <_dtoa_r+0x5f8>)
 8015978:	f006 020f 	and.w	r2, r6, #15
 801597c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015984:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015988:	f7ea fe4e 	bl	8000628 <__aeabi_dmul>
 801598c:	e9cd 0100 	strd	r0, r1, [sp]
 8015990:	1136      	asrs	r6, r6, #4
 8015992:	2300      	movs	r3, #0
 8015994:	2502      	movs	r5, #2
 8015996:	2e00      	cmp	r6, #0
 8015998:	d17f      	bne.n	8015a9a <_dtoa_r+0x49a>
 801599a:	2b00      	cmp	r3, #0
 801599c:	d1e1      	bne.n	8015962 <_dtoa_r+0x362>
 801599e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	f000 8087 	beq.w	8015ab4 <_dtoa_r+0x4b4>
 80159a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80159aa:	2200      	movs	r2, #0
 80159ac:	4b93      	ldr	r3, [pc, #588]	; (8015bfc <_dtoa_r+0x5fc>)
 80159ae:	4630      	mov	r0, r6
 80159b0:	4639      	mov	r1, r7
 80159b2:	f7eb f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80159b6:	2800      	cmp	r0, #0
 80159b8:	d07c      	beq.n	8015ab4 <_dtoa_r+0x4b4>
 80159ba:	f1b9 0f00 	cmp.w	r9, #0
 80159be:	d079      	beq.n	8015ab4 <_dtoa_r+0x4b4>
 80159c0:	9b02      	ldr	r3, [sp, #8]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	dd35      	ble.n	8015a32 <_dtoa_r+0x432>
 80159c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80159ca:	9308      	str	r3, [sp, #32]
 80159cc:	4639      	mov	r1, r7
 80159ce:	2200      	movs	r2, #0
 80159d0:	4b8b      	ldr	r3, [pc, #556]	; (8015c00 <_dtoa_r+0x600>)
 80159d2:	4630      	mov	r0, r6
 80159d4:	f7ea fe28 	bl	8000628 <__aeabi_dmul>
 80159d8:	e9cd 0100 	strd	r0, r1, [sp]
 80159dc:	9f02      	ldr	r7, [sp, #8]
 80159de:	3501      	adds	r5, #1
 80159e0:	4628      	mov	r0, r5
 80159e2:	f7ea fdb7 	bl	8000554 <__aeabi_i2d>
 80159e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159ea:	f7ea fe1d 	bl	8000628 <__aeabi_dmul>
 80159ee:	2200      	movs	r2, #0
 80159f0:	4b84      	ldr	r3, [pc, #528]	; (8015c04 <_dtoa_r+0x604>)
 80159f2:	f7ea fc63 	bl	80002bc <__adddf3>
 80159f6:	4605      	mov	r5, r0
 80159f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80159fc:	2f00      	cmp	r7, #0
 80159fe:	d15d      	bne.n	8015abc <_dtoa_r+0x4bc>
 8015a00:	2200      	movs	r2, #0
 8015a02:	4b81      	ldr	r3, [pc, #516]	; (8015c08 <_dtoa_r+0x608>)
 8015a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a08:	f7ea fc56 	bl	80002b8 <__aeabi_dsub>
 8015a0c:	462a      	mov	r2, r5
 8015a0e:	4633      	mov	r3, r6
 8015a10:	e9cd 0100 	strd	r0, r1, [sp]
 8015a14:	f7eb f898 	bl	8000b48 <__aeabi_dcmpgt>
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	f040 8288 	bne.w	8015f2e <_dtoa_r+0x92e>
 8015a1e:	462a      	mov	r2, r5
 8015a20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a28:	f7eb f870 	bl	8000b0c <__aeabi_dcmplt>
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	f040 827c 	bne.w	8015f2a <_dtoa_r+0x92a>
 8015a32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015a36:	e9cd 2300 	strd	r2, r3, [sp]
 8015a3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	f2c0 8150 	blt.w	8015ce2 <_dtoa_r+0x6e2>
 8015a42:	f1ba 0f0e 	cmp.w	sl, #14
 8015a46:	f300 814c 	bgt.w	8015ce2 <_dtoa_r+0x6e2>
 8015a4a:	4b6a      	ldr	r3, [pc, #424]	; (8015bf4 <_dtoa_r+0x5f4>)
 8015a4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015a50:	ed93 7b00 	vldr	d7, [r3]
 8015a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a5c:	f280 80d8 	bge.w	8015c10 <_dtoa_r+0x610>
 8015a60:	f1b9 0f00 	cmp.w	r9, #0
 8015a64:	f300 80d4 	bgt.w	8015c10 <_dtoa_r+0x610>
 8015a68:	f040 825e 	bne.w	8015f28 <_dtoa_r+0x928>
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	4b66      	ldr	r3, [pc, #408]	; (8015c08 <_dtoa_r+0x608>)
 8015a70:	ec51 0b17 	vmov	r0, r1, d7
 8015a74:	f7ea fdd8 	bl	8000628 <__aeabi_dmul>
 8015a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a7c:	f7eb f85a 	bl	8000b34 <__aeabi_dcmpge>
 8015a80:	464f      	mov	r7, r9
 8015a82:	464e      	mov	r6, r9
 8015a84:	2800      	cmp	r0, #0
 8015a86:	f040 8234 	bne.w	8015ef2 <_dtoa_r+0x8f2>
 8015a8a:	2331      	movs	r3, #49	; 0x31
 8015a8c:	f10b 0501 	add.w	r5, fp, #1
 8015a90:	f88b 3000 	strb.w	r3, [fp]
 8015a94:	f10a 0a01 	add.w	sl, sl, #1
 8015a98:	e22f      	b.n	8015efa <_dtoa_r+0x8fa>
 8015a9a:	07f2      	lsls	r2, r6, #31
 8015a9c:	d505      	bpl.n	8015aaa <_dtoa_r+0x4aa>
 8015a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015aa2:	f7ea fdc1 	bl	8000628 <__aeabi_dmul>
 8015aa6:	3501      	adds	r5, #1
 8015aa8:	2301      	movs	r3, #1
 8015aaa:	1076      	asrs	r6, r6, #1
 8015aac:	3708      	adds	r7, #8
 8015aae:	e772      	b.n	8015996 <_dtoa_r+0x396>
 8015ab0:	2502      	movs	r5, #2
 8015ab2:	e774      	b.n	801599e <_dtoa_r+0x39e>
 8015ab4:	f8cd a020 	str.w	sl, [sp, #32]
 8015ab8:	464f      	mov	r7, r9
 8015aba:	e791      	b.n	80159e0 <_dtoa_r+0x3e0>
 8015abc:	4b4d      	ldr	r3, [pc, #308]	; (8015bf4 <_dtoa_r+0x5f4>)
 8015abe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015ac2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d047      	beq.n	8015b5c <_dtoa_r+0x55c>
 8015acc:	4602      	mov	r2, r0
 8015ace:	460b      	mov	r3, r1
 8015ad0:	2000      	movs	r0, #0
 8015ad2:	494e      	ldr	r1, [pc, #312]	; (8015c0c <_dtoa_r+0x60c>)
 8015ad4:	f7ea fed2 	bl	800087c <__aeabi_ddiv>
 8015ad8:	462a      	mov	r2, r5
 8015ada:	4633      	mov	r3, r6
 8015adc:	f7ea fbec 	bl	80002b8 <__aeabi_dsub>
 8015ae0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015ae4:	465d      	mov	r5, fp
 8015ae6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015aea:	f7eb f84d 	bl	8000b88 <__aeabi_d2iz>
 8015aee:	4606      	mov	r6, r0
 8015af0:	f7ea fd30 	bl	8000554 <__aeabi_i2d>
 8015af4:	4602      	mov	r2, r0
 8015af6:	460b      	mov	r3, r1
 8015af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015afc:	f7ea fbdc 	bl	80002b8 <__aeabi_dsub>
 8015b00:	3630      	adds	r6, #48	; 0x30
 8015b02:	f805 6b01 	strb.w	r6, [r5], #1
 8015b06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015b0a:	e9cd 0100 	strd	r0, r1, [sp]
 8015b0e:	f7ea fffd 	bl	8000b0c <__aeabi_dcmplt>
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d163      	bne.n	8015bde <_dtoa_r+0x5de>
 8015b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b1a:	2000      	movs	r0, #0
 8015b1c:	4937      	ldr	r1, [pc, #220]	; (8015bfc <_dtoa_r+0x5fc>)
 8015b1e:	f7ea fbcb 	bl	80002b8 <__aeabi_dsub>
 8015b22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015b26:	f7ea fff1 	bl	8000b0c <__aeabi_dcmplt>
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	f040 80b7 	bne.w	8015c9e <_dtoa_r+0x69e>
 8015b30:	eba5 030b 	sub.w	r3, r5, fp
 8015b34:	429f      	cmp	r7, r3
 8015b36:	f77f af7c 	ble.w	8015a32 <_dtoa_r+0x432>
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	4b30      	ldr	r3, [pc, #192]	; (8015c00 <_dtoa_r+0x600>)
 8015b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015b42:	f7ea fd71 	bl	8000628 <__aeabi_dmul>
 8015b46:	2200      	movs	r2, #0
 8015b48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b4c:	4b2c      	ldr	r3, [pc, #176]	; (8015c00 <_dtoa_r+0x600>)
 8015b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b52:	f7ea fd69 	bl	8000628 <__aeabi_dmul>
 8015b56:	e9cd 0100 	strd	r0, r1, [sp]
 8015b5a:	e7c4      	b.n	8015ae6 <_dtoa_r+0x4e6>
 8015b5c:	462a      	mov	r2, r5
 8015b5e:	4633      	mov	r3, r6
 8015b60:	f7ea fd62 	bl	8000628 <__aeabi_dmul>
 8015b64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b68:	eb0b 0507 	add.w	r5, fp, r7
 8015b6c:	465e      	mov	r6, fp
 8015b6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b72:	f7eb f809 	bl	8000b88 <__aeabi_d2iz>
 8015b76:	4607      	mov	r7, r0
 8015b78:	f7ea fcec 	bl	8000554 <__aeabi_i2d>
 8015b7c:	3730      	adds	r7, #48	; 0x30
 8015b7e:	4602      	mov	r2, r0
 8015b80:	460b      	mov	r3, r1
 8015b82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b86:	f7ea fb97 	bl	80002b8 <__aeabi_dsub>
 8015b8a:	f806 7b01 	strb.w	r7, [r6], #1
 8015b8e:	42ae      	cmp	r6, r5
 8015b90:	e9cd 0100 	strd	r0, r1, [sp]
 8015b94:	f04f 0200 	mov.w	r2, #0
 8015b98:	d126      	bne.n	8015be8 <_dtoa_r+0x5e8>
 8015b9a:	4b1c      	ldr	r3, [pc, #112]	; (8015c0c <_dtoa_r+0x60c>)
 8015b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015ba0:	f7ea fb8c 	bl	80002bc <__adddf3>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bac:	f7ea ffcc 	bl	8000b48 <__aeabi_dcmpgt>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	d174      	bne.n	8015c9e <_dtoa_r+0x69e>
 8015bb4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015bb8:	2000      	movs	r0, #0
 8015bba:	4914      	ldr	r1, [pc, #80]	; (8015c0c <_dtoa_r+0x60c>)
 8015bbc:	f7ea fb7c 	bl	80002b8 <__aeabi_dsub>
 8015bc0:	4602      	mov	r2, r0
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bc8:	f7ea ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8015bcc:	2800      	cmp	r0, #0
 8015bce:	f43f af30 	beq.w	8015a32 <_dtoa_r+0x432>
 8015bd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015bd6:	2b30      	cmp	r3, #48	; 0x30
 8015bd8:	f105 32ff 	add.w	r2, r5, #4294967295
 8015bdc:	d002      	beq.n	8015be4 <_dtoa_r+0x5e4>
 8015bde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015be2:	e04a      	b.n	8015c7a <_dtoa_r+0x67a>
 8015be4:	4615      	mov	r5, r2
 8015be6:	e7f4      	b.n	8015bd2 <_dtoa_r+0x5d2>
 8015be8:	4b05      	ldr	r3, [pc, #20]	; (8015c00 <_dtoa_r+0x600>)
 8015bea:	f7ea fd1d 	bl	8000628 <__aeabi_dmul>
 8015bee:	e9cd 0100 	strd	r0, r1, [sp]
 8015bf2:	e7bc      	b.n	8015b6e <_dtoa_r+0x56e>
 8015bf4:	08018d98 	.word	0x08018d98
 8015bf8:	08018d70 	.word	0x08018d70
 8015bfc:	3ff00000 	.word	0x3ff00000
 8015c00:	40240000 	.word	0x40240000
 8015c04:	401c0000 	.word	0x401c0000
 8015c08:	40140000 	.word	0x40140000
 8015c0c:	3fe00000 	.word	0x3fe00000
 8015c10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015c14:	465d      	mov	r5, fp
 8015c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c1a:	4630      	mov	r0, r6
 8015c1c:	4639      	mov	r1, r7
 8015c1e:	f7ea fe2d 	bl	800087c <__aeabi_ddiv>
 8015c22:	f7ea ffb1 	bl	8000b88 <__aeabi_d2iz>
 8015c26:	4680      	mov	r8, r0
 8015c28:	f7ea fc94 	bl	8000554 <__aeabi_i2d>
 8015c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c30:	f7ea fcfa 	bl	8000628 <__aeabi_dmul>
 8015c34:	4602      	mov	r2, r0
 8015c36:	460b      	mov	r3, r1
 8015c38:	4630      	mov	r0, r6
 8015c3a:	4639      	mov	r1, r7
 8015c3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015c40:	f7ea fb3a 	bl	80002b8 <__aeabi_dsub>
 8015c44:	f805 6b01 	strb.w	r6, [r5], #1
 8015c48:	eba5 060b 	sub.w	r6, r5, fp
 8015c4c:	45b1      	cmp	r9, r6
 8015c4e:	4602      	mov	r2, r0
 8015c50:	460b      	mov	r3, r1
 8015c52:	d139      	bne.n	8015cc8 <_dtoa_r+0x6c8>
 8015c54:	f7ea fb32 	bl	80002bc <__adddf3>
 8015c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c5c:	4606      	mov	r6, r0
 8015c5e:	460f      	mov	r7, r1
 8015c60:	f7ea ff72 	bl	8000b48 <__aeabi_dcmpgt>
 8015c64:	b9c8      	cbnz	r0, 8015c9a <_dtoa_r+0x69a>
 8015c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c6a:	4630      	mov	r0, r6
 8015c6c:	4639      	mov	r1, r7
 8015c6e:	f7ea ff43 	bl	8000af8 <__aeabi_dcmpeq>
 8015c72:	b110      	cbz	r0, 8015c7a <_dtoa_r+0x67a>
 8015c74:	f018 0f01 	tst.w	r8, #1
 8015c78:	d10f      	bne.n	8015c9a <_dtoa_r+0x69a>
 8015c7a:	9904      	ldr	r1, [sp, #16]
 8015c7c:	4620      	mov	r0, r4
 8015c7e:	f000 fffd 	bl	8016c7c <_Bfree>
 8015c82:	2300      	movs	r3, #0
 8015c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015c86:	702b      	strb	r3, [r5, #0]
 8015c88:	f10a 0301 	add.w	r3, sl, #1
 8015c8c:	6013      	str	r3, [r2, #0]
 8015c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f000 8241 	beq.w	8016118 <_dtoa_r+0xb18>
 8015c96:	601d      	str	r5, [r3, #0]
 8015c98:	e23e      	b.n	8016118 <_dtoa_r+0xb18>
 8015c9a:	f8cd a020 	str.w	sl, [sp, #32]
 8015c9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015ca2:	2a39      	cmp	r2, #57	; 0x39
 8015ca4:	f105 33ff 	add.w	r3, r5, #4294967295
 8015ca8:	d108      	bne.n	8015cbc <_dtoa_r+0x6bc>
 8015caa:	459b      	cmp	fp, r3
 8015cac:	d10a      	bne.n	8015cc4 <_dtoa_r+0x6c4>
 8015cae:	9b08      	ldr	r3, [sp, #32]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	9308      	str	r3, [sp, #32]
 8015cb4:	2330      	movs	r3, #48	; 0x30
 8015cb6:	f88b 3000 	strb.w	r3, [fp]
 8015cba:	465b      	mov	r3, fp
 8015cbc:	781a      	ldrb	r2, [r3, #0]
 8015cbe:	3201      	adds	r2, #1
 8015cc0:	701a      	strb	r2, [r3, #0]
 8015cc2:	e78c      	b.n	8015bde <_dtoa_r+0x5de>
 8015cc4:	461d      	mov	r5, r3
 8015cc6:	e7ea      	b.n	8015c9e <_dtoa_r+0x69e>
 8015cc8:	2200      	movs	r2, #0
 8015cca:	4b9b      	ldr	r3, [pc, #620]	; (8015f38 <_dtoa_r+0x938>)
 8015ccc:	f7ea fcac 	bl	8000628 <__aeabi_dmul>
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	4606      	mov	r6, r0
 8015cd6:	460f      	mov	r7, r1
 8015cd8:	f7ea ff0e 	bl	8000af8 <__aeabi_dcmpeq>
 8015cdc:	2800      	cmp	r0, #0
 8015cde:	d09a      	beq.n	8015c16 <_dtoa_r+0x616>
 8015ce0:	e7cb      	b.n	8015c7a <_dtoa_r+0x67a>
 8015ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ce4:	2a00      	cmp	r2, #0
 8015ce6:	f000 808b 	beq.w	8015e00 <_dtoa_r+0x800>
 8015cea:	9a06      	ldr	r2, [sp, #24]
 8015cec:	2a01      	cmp	r2, #1
 8015cee:	dc6e      	bgt.n	8015dce <_dtoa_r+0x7ce>
 8015cf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015cf2:	2a00      	cmp	r2, #0
 8015cf4:	d067      	beq.n	8015dc6 <_dtoa_r+0x7c6>
 8015cf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015cfa:	9f07      	ldr	r7, [sp, #28]
 8015cfc:	9d05      	ldr	r5, [sp, #20]
 8015cfe:	9a05      	ldr	r2, [sp, #20]
 8015d00:	2101      	movs	r1, #1
 8015d02:	441a      	add	r2, r3
 8015d04:	4620      	mov	r0, r4
 8015d06:	9205      	str	r2, [sp, #20]
 8015d08:	4498      	add	r8, r3
 8015d0a:	f001 f895 	bl	8016e38 <__i2b>
 8015d0e:	4606      	mov	r6, r0
 8015d10:	2d00      	cmp	r5, #0
 8015d12:	dd0c      	ble.n	8015d2e <_dtoa_r+0x72e>
 8015d14:	f1b8 0f00 	cmp.w	r8, #0
 8015d18:	dd09      	ble.n	8015d2e <_dtoa_r+0x72e>
 8015d1a:	4545      	cmp	r5, r8
 8015d1c:	9a05      	ldr	r2, [sp, #20]
 8015d1e:	462b      	mov	r3, r5
 8015d20:	bfa8      	it	ge
 8015d22:	4643      	movge	r3, r8
 8015d24:	1ad2      	subs	r2, r2, r3
 8015d26:	9205      	str	r2, [sp, #20]
 8015d28:	1aed      	subs	r5, r5, r3
 8015d2a:	eba8 0803 	sub.w	r8, r8, r3
 8015d2e:	9b07      	ldr	r3, [sp, #28]
 8015d30:	b1eb      	cbz	r3, 8015d6e <_dtoa_r+0x76e>
 8015d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d067      	beq.n	8015e08 <_dtoa_r+0x808>
 8015d38:	b18f      	cbz	r7, 8015d5e <_dtoa_r+0x75e>
 8015d3a:	4631      	mov	r1, r6
 8015d3c:	463a      	mov	r2, r7
 8015d3e:	4620      	mov	r0, r4
 8015d40:	f001 f91a 	bl	8016f78 <__pow5mult>
 8015d44:	9a04      	ldr	r2, [sp, #16]
 8015d46:	4601      	mov	r1, r0
 8015d48:	4606      	mov	r6, r0
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	f001 f87d 	bl	8016e4a <__multiply>
 8015d50:	9904      	ldr	r1, [sp, #16]
 8015d52:	9008      	str	r0, [sp, #32]
 8015d54:	4620      	mov	r0, r4
 8015d56:	f000 ff91 	bl	8016c7c <_Bfree>
 8015d5a:	9b08      	ldr	r3, [sp, #32]
 8015d5c:	9304      	str	r3, [sp, #16]
 8015d5e:	9b07      	ldr	r3, [sp, #28]
 8015d60:	1bda      	subs	r2, r3, r7
 8015d62:	d004      	beq.n	8015d6e <_dtoa_r+0x76e>
 8015d64:	9904      	ldr	r1, [sp, #16]
 8015d66:	4620      	mov	r0, r4
 8015d68:	f001 f906 	bl	8016f78 <__pow5mult>
 8015d6c:	9004      	str	r0, [sp, #16]
 8015d6e:	2101      	movs	r1, #1
 8015d70:	4620      	mov	r0, r4
 8015d72:	f001 f861 	bl	8016e38 <__i2b>
 8015d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d78:	4607      	mov	r7, r0
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	f000 81d0 	beq.w	8016120 <_dtoa_r+0xb20>
 8015d80:	461a      	mov	r2, r3
 8015d82:	4601      	mov	r1, r0
 8015d84:	4620      	mov	r0, r4
 8015d86:	f001 f8f7 	bl	8016f78 <__pow5mult>
 8015d8a:	9b06      	ldr	r3, [sp, #24]
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	4607      	mov	r7, r0
 8015d90:	dc40      	bgt.n	8015e14 <_dtoa_r+0x814>
 8015d92:	9b00      	ldr	r3, [sp, #0]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d139      	bne.n	8015e0c <_dtoa_r+0x80c>
 8015d98:	9b01      	ldr	r3, [sp, #4]
 8015d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d136      	bne.n	8015e10 <_dtoa_r+0x810>
 8015da2:	9b01      	ldr	r3, [sp, #4]
 8015da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015da8:	0d1b      	lsrs	r3, r3, #20
 8015daa:	051b      	lsls	r3, r3, #20
 8015dac:	b12b      	cbz	r3, 8015dba <_dtoa_r+0x7ba>
 8015dae:	9b05      	ldr	r3, [sp, #20]
 8015db0:	3301      	adds	r3, #1
 8015db2:	9305      	str	r3, [sp, #20]
 8015db4:	f108 0801 	add.w	r8, r8, #1
 8015db8:	2301      	movs	r3, #1
 8015dba:	9307      	str	r3, [sp, #28]
 8015dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d12a      	bne.n	8015e18 <_dtoa_r+0x818>
 8015dc2:	2001      	movs	r0, #1
 8015dc4:	e030      	b.n	8015e28 <_dtoa_r+0x828>
 8015dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015dc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015dcc:	e795      	b.n	8015cfa <_dtoa_r+0x6fa>
 8015dce:	9b07      	ldr	r3, [sp, #28]
 8015dd0:	f109 37ff 	add.w	r7, r9, #4294967295
 8015dd4:	42bb      	cmp	r3, r7
 8015dd6:	bfbf      	itttt	lt
 8015dd8:	9b07      	ldrlt	r3, [sp, #28]
 8015dda:	9707      	strlt	r7, [sp, #28]
 8015ddc:	1afa      	sublt	r2, r7, r3
 8015dde:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015de0:	bfbb      	ittet	lt
 8015de2:	189b      	addlt	r3, r3, r2
 8015de4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015de6:	1bdf      	subge	r7, r3, r7
 8015de8:	2700      	movlt	r7, #0
 8015dea:	f1b9 0f00 	cmp.w	r9, #0
 8015dee:	bfb5      	itete	lt
 8015df0:	9b05      	ldrlt	r3, [sp, #20]
 8015df2:	9d05      	ldrge	r5, [sp, #20]
 8015df4:	eba3 0509 	sublt.w	r5, r3, r9
 8015df8:	464b      	movge	r3, r9
 8015dfa:	bfb8      	it	lt
 8015dfc:	2300      	movlt	r3, #0
 8015dfe:	e77e      	b.n	8015cfe <_dtoa_r+0x6fe>
 8015e00:	9f07      	ldr	r7, [sp, #28]
 8015e02:	9d05      	ldr	r5, [sp, #20]
 8015e04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015e06:	e783      	b.n	8015d10 <_dtoa_r+0x710>
 8015e08:	9a07      	ldr	r2, [sp, #28]
 8015e0a:	e7ab      	b.n	8015d64 <_dtoa_r+0x764>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	e7d4      	b.n	8015dba <_dtoa_r+0x7ba>
 8015e10:	9b00      	ldr	r3, [sp, #0]
 8015e12:	e7d2      	b.n	8015dba <_dtoa_r+0x7ba>
 8015e14:	2300      	movs	r3, #0
 8015e16:	9307      	str	r3, [sp, #28]
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015e1e:	6918      	ldr	r0, [r3, #16]
 8015e20:	f000 ffbc 	bl	8016d9c <__hi0bits>
 8015e24:	f1c0 0020 	rsb	r0, r0, #32
 8015e28:	4440      	add	r0, r8
 8015e2a:	f010 001f 	ands.w	r0, r0, #31
 8015e2e:	d047      	beq.n	8015ec0 <_dtoa_r+0x8c0>
 8015e30:	f1c0 0320 	rsb	r3, r0, #32
 8015e34:	2b04      	cmp	r3, #4
 8015e36:	dd3b      	ble.n	8015eb0 <_dtoa_r+0x8b0>
 8015e38:	9b05      	ldr	r3, [sp, #20]
 8015e3a:	f1c0 001c 	rsb	r0, r0, #28
 8015e3e:	4403      	add	r3, r0
 8015e40:	9305      	str	r3, [sp, #20]
 8015e42:	4405      	add	r5, r0
 8015e44:	4480      	add	r8, r0
 8015e46:	9b05      	ldr	r3, [sp, #20]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	dd05      	ble.n	8015e58 <_dtoa_r+0x858>
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	9904      	ldr	r1, [sp, #16]
 8015e50:	4620      	mov	r0, r4
 8015e52:	f001 f8df 	bl	8017014 <__lshift>
 8015e56:	9004      	str	r0, [sp, #16]
 8015e58:	f1b8 0f00 	cmp.w	r8, #0
 8015e5c:	dd05      	ble.n	8015e6a <_dtoa_r+0x86a>
 8015e5e:	4639      	mov	r1, r7
 8015e60:	4642      	mov	r2, r8
 8015e62:	4620      	mov	r0, r4
 8015e64:	f001 f8d6 	bl	8017014 <__lshift>
 8015e68:	4607      	mov	r7, r0
 8015e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e6c:	b353      	cbz	r3, 8015ec4 <_dtoa_r+0x8c4>
 8015e6e:	4639      	mov	r1, r7
 8015e70:	9804      	ldr	r0, [sp, #16]
 8015e72:	f001 f923 	bl	80170bc <__mcmp>
 8015e76:	2800      	cmp	r0, #0
 8015e78:	da24      	bge.n	8015ec4 <_dtoa_r+0x8c4>
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	220a      	movs	r2, #10
 8015e7e:	9904      	ldr	r1, [sp, #16]
 8015e80:	4620      	mov	r0, r4
 8015e82:	f000 ff12 	bl	8016caa <__multadd>
 8015e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e88:	9004      	str	r0, [sp, #16]
 8015e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f000 814d 	beq.w	801612e <_dtoa_r+0xb2e>
 8015e94:	2300      	movs	r3, #0
 8015e96:	4631      	mov	r1, r6
 8015e98:	220a      	movs	r2, #10
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f000 ff05 	bl	8016caa <__multadd>
 8015ea0:	9b02      	ldr	r3, [sp, #8]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	4606      	mov	r6, r0
 8015ea6:	dc4f      	bgt.n	8015f48 <_dtoa_r+0x948>
 8015ea8:	9b06      	ldr	r3, [sp, #24]
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	dd4c      	ble.n	8015f48 <_dtoa_r+0x948>
 8015eae:	e011      	b.n	8015ed4 <_dtoa_r+0x8d4>
 8015eb0:	d0c9      	beq.n	8015e46 <_dtoa_r+0x846>
 8015eb2:	9a05      	ldr	r2, [sp, #20]
 8015eb4:	331c      	adds	r3, #28
 8015eb6:	441a      	add	r2, r3
 8015eb8:	9205      	str	r2, [sp, #20]
 8015eba:	441d      	add	r5, r3
 8015ebc:	4498      	add	r8, r3
 8015ebe:	e7c2      	b.n	8015e46 <_dtoa_r+0x846>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	e7f6      	b.n	8015eb2 <_dtoa_r+0x8b2>
 8015ec4:	f1b9 0f00 	cmp.w	r9, #0
 8015ec8:	dc38      	bgt.n	8015f3c <_dtoa_r+0x93c>
 8015eca:	9b06      	ldr	r3, [sp, #24]
 8015ecc:	2b02      	cmp	r3, #2
 8015ece:	dd35      	ble.n	8015f3c <_dtoa_r+0x93c>
 8015ed0:	f8cd 9008 	str.w	r9, [sp, #8]
 8015ed4:	9b02      	ldr	r3, [sp, #8]
 8015ed6:	b963      	cbnz	r3, 8015ef2 <_dtoa_r+0x8f2>
 8015ed8:	4639      	mov	r1, r7
 8015eda:	2205      	movs	r2, #5
 8015edc:	4620      	mov	r0, r4
 8015ede:	f000 fee4 	bl	8016caa <__multadd>
 8015ee2:	4601      	mov	r1, r0
 8015ee4:	4607      	mov	r7, r0
 8015ee6:	9804      	ldr	r0, [sp, #16]
 8015ee8:	f001 f8e8 	bl	80170bc <__mcmp>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	f73f adcc 	bgt.w	8015a8a <_dtoa_r+0x48a>
 8015ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ef4:	465d      	mov	r5, fp
 8015ef6:	ea6f 0a03 	mvn.w	sl, r3
 8015efa:	f04f 0900 	mov.w	r9, #0
 8015efe:	4639      	mov	r1, r7
 8015f00:	4620      	mov	r0, r4
 8015f02:	f000 febb 	bl	8016c7c <_Bfree>
 8015f06:	2e00      	cmp	r6, #0
 8015f08:	f43f aeb7 	beq.w	8015c7a <_dtoa_r+0x67a>
 8015f0c:	f1b9 0f00 	cmp.w	r9, #0
 8015f10:	d005      	beq.n	8015f1e <_dtoa_r+0x91e>
 8015f12:	45b1      	cmp	r9, r6
 8015f14:	d003      	beq.n	8015f1e <_dtoa_r+0x91e>
 8015f16:	4649      	mov	r1, r9
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f000 feaf 	bl	8016c7c <_Bfree>
 8015f1e:	4631      	mov	r1, r6
 8015f20:	4620      	mov	r0, r4
 8015f22:	f000 feab 	bl	8016c7c <_Bfree>
 8015f26:	e6a8      	b.n	8015c7a <_dtoa_r+0x67a>
 8015f28:	2700      	movs	r7, #0
 8015f2a:	463e      	mov	r6, r7
 8015f2c:	e7e1      	b.n	8015ef2 <_dtoa_r+0x8f2>
 8015f2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015f32:	463e      	mov	r6, r7
 8015f34:	e5a9      	b.n	8015a8a <_dtoa_r+0x48a>
 8015f36:	bf00      	nop
 8015f38:	40240000 	.word	0x40240000
 8015f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	f000 80fa 	beq.w	801613c <_dtoa_r+0xb3c>
 8015f48:	2d00      	cmp	r5, #0
 8015f4a:	dd05      	ble.n	8015f58 <_dtoa_r+0x958>
 8015f4c:	4631      	mov	r1, r6
 8015f4e:	462a      	mov	r2, r5
 8015f50:	4620      	mov	r0, r4
 8015f52:	f001 f85f 	bl	8017014 <__lshift>
 8015f56:	4606      	mov	r6, r0
 8015f58:	9b07      	ldr	r3, [sp, #28]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d04c      	beq.n	8015ff8 <_dtoa_r+0x9f8>
 8015f5e:	6871      	ldr	r1, [r6, #4]
 8015f60:	4620      	mov	r0, r4
 8015f62:	f000 fe57 	bl	8016c14 <_Balloc>
 8015f66:	6932      	ldr	r2, [r6, #16]
 8015f68:	3202      	adds	r2, #2
 8015f6a:	4605      	mov	r5, r0
 8015f6c:	0092      	lsls	r2, r2, #2
 8015f6e:	f106 010c 	add.w	r1, r6, #12
 8015f72:	300c      	adds	r0, #12
 8015f74:	f7fd fb54 	bl	8013620 <memcpy>
 8015f78:	2201      	movs	r2, #1
 8015f7a:	4629      	mov	r1, r5
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f001 f849 	bl	8017014 <__lshift>
 8015f82:	9b00      	ldr	r3, [sp, #0]
 8015f84:	f8cd b014 	str.w	fp, [sp, #20]
 8015f88:	f003 0301 	and.w	r3, r3, #1
 8015f8c:	46b1      	mov	r9, r6
 8015f8e:	9307      	str	r3, [sp, #28]
 8015f90:	4606      	mov	r6, r0
 8015f92:	4639      	mov	r1, r7
 8015f94:	9804      	ldr	r0, [sp, #16]
 8015f96:	f7ff faa7 	bl	80154e8 <quorem>
 8015f9a:	4649      	mov	r1, r9
 8015f9c:	4605      	mov	r5, r0
 8015f9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015fa2:	9804      	ldr	r0, [sp, #16]
 8015fa4:	f001 f88a 	bl	80170bc <__mcmp>
 8015fa8:	4632      	mov	r2, r6
 8015faa:	9000      	str	r0, [sp, #0]
 8015fac:	4639      	mov	r1, r7
 8015fae:	4620      	mov	r0, r4
 8015fb0:	f001 f89e 	bl	80170f0 <__mdiff>
 8015fb4:	68c3      	ldr	r3, [r0, #12]
 8015fb6:	4602      	mov	r2, r0
 8015fb8:	bb03      	cbnz	r3, 8015ffc <_dtoa_r+0x9fc>
 8015fba:	4601      	mov	r1, r0
 8015fbc:	9008      	str	r0, [sp, #32]
 8015fbe:	9804      	ldr	r0, [sp, #16]
 8015fc0:	f001 f87c 	bl	80170bc <__mcmp>
 8015fc4:	9a08      	ldr	r2, [sp, #32]
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	4611      	mov	r1, r2
 8015fca:	4620      	mov	r0, r4
 8015fcc:	9308      	str	r3, [sp, #32]
 8015fce:	f000 fe55 	bl	8016c7c <_Bfree>
 8015fd2:	9b08      	ldr	r3, [sp, #32]
 8015fd4:	b9a3      	cbnz	r3, 8016000 <_dtoa_r+0xa00>
 8015fd6:	9a06      	ldr	r2, [sp, #24]
 8015fd8:	b992      	cbnz	r2, 8016000 <_dtoa_r+0xa00>
 8015fda:	9a07      	ldr	r2, [sp, #28]
 8015fdc:	b982      	cbnz	r2, 8016000 <_dtoa_r+0xa00>
 8015fde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015fe2:	d029      	beq.n	8016038 <_dtoa_r+0xa38>
 8015fe4:	9b00      	ldr	r3, [sp, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	dd01      	ble.n	8015fee <_dtoa_r+0x9ee>
 8015fea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015fee:	9b05      	ldr	r3, [sp, #20]
 8015ff0:	1c5d      	adds	r5, r3, #1
 8015ff2:	f883 8000 	strb.w	r8, [r3]
 8015ff6:	e782      	b.n	8015efe <_dtoa_r+0x8fe>
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	e7c2      	b.n	8015f82 <_dtoa_r+0x982>
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e7e3      	b.n	8015fc8 <_dtoa_r+0x9c8>
 8016000:	9a00      	ldr	r2, [sp, #0]
 8016002:	2a00      	cmp	r2, #0
 8016004:	db04      	blt.n	8016010 <_dtoa_r+0xa10>
 8016006:	d125      	bne.n	8016054 <_dtoa_r+0xa54>
 8016008:	9a06      	ldr	r2, [sp, #24]
 801600a:	bb1a      	cbnz	r2, 8016054 <_dtoa_r+0xa54>
 801600c:	9a07      	ldr	r2, [sp, #28]
 801600e:	bb0a      	cbnz	r2, 8016054 <_dtoa_r+0xa54>
 8016010:	2b00      	cmp	r3, #0
 8016012:	ddec      	ble.n	8015fee <_dtoa_r+0x9ee>
 8016014:	2201      	movs	r2, #1
 8016016:	9904      	ldr	r1, [sp, #16]
 8016018:	4620      	mov	r0, r4
 801601a:	f000 fffb 	bl	8017014 <__lshift>
 801601e:	4639      	mov	r1, r7
 8016020:	9004      	str	r0, [sp, #16]
 8016022:	f001 f84b 	bl	80170bc <__mcmp>
 8016026:	2800      	cmp	r0, #0
 8016028:	dc03      	bgt.n	8016032 <_dtoa_r+0xa32>
 801602a:	d1e0      	bne.n	8015fee <_dtoa_r+0x9ee>
 801602c:	f018 0f01 	tst.w	r8, #1
 8016030:	d0dd      	beq.n	8015fee <_dtoa_r+0x9ee>
 8016032:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016036:	d1d8      	bne.n	8015fea <_dtoa_r+0x9ea>
 8016038:	9b05      	ldr	r3, [sp, #20]
 801603a:	9a05      	ldr	r2, [sp, #20]
 801603c:	1c5d      	adds	r5, r3, #1
 801603e:	2339      	movs	r3, #57	; 0x39
 8016040:	7013      	strb	r3, [r2, #0]
 8016042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016046:	2b39      	cmp	r3, #57	; 0x39
 8016048:	f105 32ff 	add.w	r2, r5, #4294967295
 801604c:	d04f      	beq.n	80160ee <_dtoa_r+0xaee>
 801604e:	3301      	adds	r3, #1
 8016050:	7013      	strb	r3, [r2, #0]
 8016052:	e754      	b.n	8015efe <_dtoa_r+0x8fe>
 8016054:	9a05      	ldr	r2, [sp, #20]
 8016056:	2b00      	cmp	r3, #0
 8016058:	f102 0501 	add.w	r5, r2, #1
 801605c:	dd06      	ble.n	801606c <_dtoa_r+0xa6c>
 801605e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016062:	d0e9      	beq.n	8016038 <_dtoa_r+0xa38>
 8016064:	f108 0801 	add.w	r8, r8, #1
 8016068:	9b05      	ldr	r3, [sp, #20]
 801606a:	e7c2      	b.n	8015ff2 <_dtoa_r+0x9f2>
 801606c:	9a02      	ldr	r2, [sp, #8]
 801606e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016072:	eba5 030b 	sub.w	r3, r5, fp
 8016076:	4293      	cmp	r3, r2
 8016078:	d021      	beq.n	80160be <_dtoa_r+0xabe>
 801607a:	2300      	movs	r3, #0
 801607c:	220a      	movs	r2, #10
 801607e:	9904      	ldr	r1, [sp, #16]
 8016080:	4620      	mov	r0, r4
 8016082:	f000 fe12 	bl	8016caa <__multadd>
 8016086:	45b1      	cmp	r9, r6
 8016088:	9004      	str	r0, [sp, #16]
 801608a:	f04f 0300 	mov.w	r3, #0
 801608e:	f04f 020a 	mov.w	r2, #10
 8016092:	4649      	mov	r1, r9
 8016094:	4620      	mov	r0, r4
 8016096:	d105      	bne.n	80160a4 <_dtoa_r+0xaa4>
 8016098:	f000 fe07 	bl	8016caa <__multadd>
 801609c:	4681      	mov	r9, r0
 801609e:	4606      	mov	r6, r0
 80160a0:	9505      	str	r5, [sp, #20]
 80160a2:	e776      	b.n	8015f92 <_dtoa_r+0x992>
 80160a4:	f000 fe01 	bl	8016caa <__multadd>
 80160a8:	4631      	mov	r1, r6
 80160aa:	4681      	mov	r9, r0
 80160ac:	2300      	movs	r3, #0
 80160ae:	220a      	movs	r2, #10
 80160b0:	4620      	mov	r0, r4
 80160b2:	f000 fdfa 	bl	8016caa <__multadd>
 80160b6:	4606      	mov	r6, r0
 80160b8:	e7f2      	b.n	80160a0 <_dtoa_r+0xaa0>
 80160ba:	f04f 0900 	mov.w	r9, #0
 80160be:	2201      	movs	r2, #1
 80160c0:	9904      	ldr	r1, [sp, #16]
 80160c2:	4620      	mov	r0, r4
 80160c4:	f000 ffa6 	bl	8017014 <__lshift>
 80160c8:	4639      	mov	r1, r7
 80160ca:	9004      	str	r0, [sp, #16]
 80160cc:	f000 fff6 	bl	80170bc <__mcmp>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	dcb6      	bgt.n	8016042 <_dtoa_r+0xa42>
 80160d4:	d102      	bne.n	80160dc <_dtoa_r+0xadc>
 80160d6:	f018 0f01 	tst.w	r8, #1
 80160da:	d1b2      	bne.n	8016042 <_dtoa_r+0xa42>
 80160dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80160e0:	2b30      	cmp	r3, #48	; 0x30
 80160e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80160e6:	f47f af0a 	bne.w	8015efe <_dtoa_r+0x8fe>
 80160ea:	4615      	mov	r5, r2
 80160ec:	e7f6      	b.n	80160dc <_dtoa_r+0xadc>
 80160ee:	4593      	cmp	fp, r2
 80160f0:	d105      	bne.n	80160fe <_dtoa_r+0xafe>
 80160f2:	2331      	movs	r3, #49	; 0x31
 80160f4:	f10a 0a01 	add.w	sl, sl, #1
 80160f8:	f88b 3000 	strb.w	r3, [fp]
 80160fc:	e6ff      	b.n	8015efe <_dtoa_r+0x8fe>
 80160fe:	4615      	mov	r5, r2
 8016100:	e79f      	b.n	8016042 <_dtoa_r+0xa42>
 8016102:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016168 <_dtoa_r+0xb68>
 8016106:	e007      	b.n	8016118 <_dtoa_r+0xb18>
 8016108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801610a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801616c <_dtoa_r+0xb6c>
 801610e:	b11b      	cbz	r3, 8016118 <_dtoa_r+0xb18>
 8016110:	f10b 0308 	add.w	r3, fp, #8
 8016114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016116:	6013      	str	r3, [r2, #0]
 8016118:	4658      	mov	r0, fp
 801611a:	b017      	add	sp, #92	; 0x5c
 801611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016120:	9b06      	ldr	r3, [sp, #24]
 8016122:	2b01      	cmp	r3, #1
 8016124:	f77f ae35 	ble.w	8015d92 <_dtoa_r+0x792>
 8016128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801612a:	9307      	str	r3, [sp, #28]
 801612c:	e649      	b.n	8015dc2 <_dtoa_r+0x7c2>
 801612e:	9b02      	ldr	r3, [sp, #8]
 8016130:	2b00      	cmp	r3, #0
 8016132:	dc03      	bgt.n	801613c <_dtoa_r+0xb3c>
 8016134:	9b06      	ldr	r3, [sp, #24]
 8016136:	2b02      	cmp	r3, #2
 8016138:	f73f aecc 	bgt.w	8015ed4 <_dtoa_r+0x8d4>
 801613c:	465d      	mov	r5, fp
 801613e:	4639      	mov	r1, r7
 8016140:	9804      	ldr	r0, [sp, #16]
 8016142:	f7ff f9d1 	bl	80154e8 <quorem>
 8016146:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801614a:	f805 8b01 	strb.w	r8, [r5], #1
 801614e:	9a02      	ldr	r2, [sp, #8]
 8016150:	eba5 030b 	sub.w	r3, r5, fp
 8016154:	429a      	cmp	r2, r3
 8016156:	ddb0      	ble.n	80160ba <_dtoa_r+0xaba>
 8016158:	2300      	movs	r3, #0
 801615a:	220a      	movs	r2, #10
 801615c:	9904      	ldr	r1, [sp, #16]
 801615e:	4620      	mov	r0, r4
 8016160:	f000 fda3 	bl	8016caa <__multadd>
 8016164:	9004      	str	r0, [sp, #16]
 8016166:	e7ea      	b.n	801613e <_dtoa_r+0xb3e>
 8016168:	08018e93 	.word	0x08018e93
 801616c:	08018cf0 	.word	0x08018cf0

08016170 <__sflush_r>:
 8016170:	898a      	ldrh	r2, [r1, #12]
 8016172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016176:	4605      	mov	r5, r0
 8016178:	0710      	lsls	r0, r2, #28
 801617a:	460c      	mov	r4, r1
 801617c:	d458      	bmi.n	8016230 <__sflush_r+0xc0>
 801617e:	684b      	ldr	r3, [r1, #4]
 8016180:	2b00      	cmp	r3, #0
 8016182:	dc05      	bgt.n	8016190 <__sflush_r+0x20>
 8016184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016186:	2b00      	cmp	r3, #0
 8016188:	dc02      	bgt.n	8016190 <__sflush_r+0x20>
 801618a:	2000      	movs	r0, #0
 801618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016192:	2e00      	cmp	r6, #0
 8016194:	d0f9      	beq.n	801618a <__sflush_r+0x1a>
 8016196:	2300      	movs	r3, #0
 8016198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801619c:	682f      	ldr	r7, [r5, #0]
 801619e:	6a21      	ldr	r1, [r4, #32]
 80161a0:	602b      	str	r3, [r5, #0]
 80161a2:	d032      	beq.n	801620a <__sflush_r+0x9a>
 80161a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80161a6:	89a3      	ldrh	r3, [r4, #12]
 80161a8:	075a      	lsls	r2, r3, #29
 80161aa:	d505      	bpl.n	80161b8 <__sflush_r+0x48>
 80161ac:	6863      	ldr	r3, [r4, #4]
 80161ae:	1ac0      	subs	r0, r0, r3
 80161b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161b2:	b10b      	cbz	r3, 80161b8 <__sflush_r+0x48>
 80161b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161b6:	1ac0      	subs	r0, r0, r3
 80161b8:	2300      	movs	r3, #0
 80161ba:	4602      	mov	r2, r0
 80161bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161be:	6a21      	ldr	r1, [r4, #32]
 80161c0:	4628      	mov	r0, r5
 80161c2:	47b0      	blx	r6
 80161c4:	1c43      	adds	r3, r0, #1
 80161c6:	89a3      	ldrh	r3, [r4, #12]
 80161c8:	d106      	bne.n	80161d8 <__sflush_r+0x68>
 80161ca:	6829      	ldr	r1, [r5, #0]
 80161cc:	291d      	cmp	r1, #29
 80161ce:	d848      	bhi.n	8016262 <__sflush_r+0xf2>
 80161d0:	4a29      	ldr	r2, [pc, #164]	; (8016278 <__sflush_r+0x108>)
 80161d2:	40ca      	lsrs	r2, r1
 80161d4:	07d6      	lsls	r6, r2, #31
 80161d6:	d544      	bpl.n	8016262 <__sflush_r+0xf2>
 80161d8:	2200      	movs	r2, #0
 80161da:	6062      	str	r2, [r4, #4]
 80161dc:	04d9      	lsls	r1, r3, #19
 80161de:	6922      	ldr	r2, [r4, #16]
 80161e0:	6022      	str	r2, [r4, #0]
 80161e2:	d504      	bpl.n	80161ee <__sflush_r+0x7e>
 80161e4:	1c42      	adds	r2, r0, #1
 80161e6:	d101      	bne.n	80161ec <__sflush_r+0x7c>
 80161e8:	682b      	ldr	r3, [r5, #0]
 80161ea:	b903      	cbnz	r3, 80161ee <__sflush_r+0x7e>
 80161ec:	6560      	str	r0, [r4, #84]	; 0x54
 80161ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161f0:	602f      	str	r7, [r5, #0]
 80161f2:	2900      	cmp	r1, #0
 80161f4:	d0c9      	beq.n	801618a <__sflush_r+0x1a>
 80161f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161fa:	4299      	cmp	r1, r3
 80161fc:	d002      	beq.n	8016204 <__sflush_r+0x94>
 80161fe:	4628      	mov	r0, r5
 8016200:	f001 f916 	bl	8017430 <_free_r>
 8016204:	2000      	movs	r0, #0
 8016206:	6360      	str	r0, [r4, #52]	; 0x34
 8016208:	e7c0      	b.n	801618c <__sflush_r+0x1c>
 801620a:	2301      	movs	r3, #1
 801620c:	4628      	mov	r0, r5
 801620e:	47b0      	blx	r6
 8016210:	1c41      	adds	r1, r0, #1
 8016212:	d1c8      	bne.n	80161a6 <__sflush_r+0x36>
 8016214:	682b      	ldr	r3, [r5, #0]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d0c5      	beq.n	80161a6 <__sflush_r+0x36>
 801621a:	2b1d      	cmp	r3, #29
 801621c:	d001      	beq.n	8016222 <__sflush_r+0xb2>
 801621e:	2b16      	cmp	r3, #22
 8016220:	d101      	bne.n	8016226 <__sflush_r+0xb6>
 8016222:	602f      	str	r7, [r5, #0]
 8016224:	e7b1      	b.n	801618a <__sflush_r+0x1a>
 8016226:	89a3      	ldrh	r3, [r4, #12]
 8016228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801622c:	81a3      	strh	r3, [r4, #12]
 801622e:	e7ad      	b.n	801618c <__sflush_r+0x1c>
 8016230:	690f      	ldr	r7, [r1, #16]
 8016232:	2f00      	cmp	r7, #0
 8016234:	d0a9      	beq.n	801618a <__sflush_r+0x1a>
 8016236:	0793      	lsls	r3, r2, #30
 8016238:	680e      	ldr	r6, [r1, #0]
 801623a:	bf08      	it	eq
 801623c:	694b      	ldreq	r3, [r1, #20]
 801623e:	600f      	str	r7, [r1, #0]
 8016240:	bf18      	it	ne
 8016242:	2300      	movne	r3, #0
 8016244:	eba6 0807 	sub.w	r8, r6, r7
 8016248:	608b      	str	r3, [r1, #8]
 801624a:	f1b8 0f00 	cmp.w	r8, #0
 801624e:	dd9c      	ble.n	801618a <__sflush_r+0x1a>
 8016250:	4643      	mov	r3, r8
 8016252:	463a      	mov	r2, r7
 8016254:	6a21      	ldr	r1, [r4, #32]
 8016256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016258:	4628      	mov	r0, r5
 801625a:	47b0      	blx	r6
 801625c:	2800      	cmp	r0, #0
 801625e:	dc06      	bgt.n	801626e <__sflush_r+0xfe>
 8016260:	89a3      	ldrh	r3, [r4, #12]
 8016262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016266:	81a3      	strh	r3, [r4, #12]
 8016268:	f04f 30ff 	mov.w	r0, #4294967295
 801626c:	e78e      	b.n	801618c <__sflush_r+0x1c>
 801626e:	4407      	add	r7, r0
 8016270:	eba8 0800 	sub.w	r8, r8, r0
 8016274:	e7e9      	b.n	801624a <__sflush_r+0xda>
 8016276:	bf00      	nop
 8016278:	20400001 	.word	0x20400001

0801627c <_fflush_r>:
 801627c:	b538      	push	{r3, r4, r5, lr}
 801627e:	690b      	ldr	r3, [r1, #16]
 8016280:	4605      	mov	r5, r0
 8016282:	460c      	mov	r4, r1
 8016284:	b1db      	cbz	r3, 80162be <_fflush_r+0x42>
 8016286:	b118      	cbz	r0, 8016290 <_fflush_r+0x14>
 8016288:	6983      	ldr	r3, [r0, #24]
 801628a:	b90b      	cbnz	r3, 8016290 <_fflush_r+0x14>
 801628c:	f000 f860 	bl	8016350 <__sinit>
 8016290:	4b0c      	ldr	r3, [pc, #48]	; (80162c4 <_fflush_r+0x48>)
 8016292:	429c      	cmp	r4, r3
 8016294:	d109      	bne.n	80162aa <_fflush_r+0x2e>
 8016296:	686c      	ldr	r4, [r5, #4]
 8016298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801629c:	b17b      	cbz	r3, 80162be <_fflush_r+0x42>
 801629e:	4621      	mov	r1, r4
 80162a0:	4628      	mov	r0, r5
 80162a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162a6:	f7ff bf63 	b.w	8016170 <__sflush_r>
 80162aa:	4b07      	ldr	r3, [pc, #28]	; (80162c8 <_fflush_r+0x4c>)
 80162ac:	429c      	cmp	r4, r3
 80162ae:	d101      	bne.n	80162b4 <_fflush_r+0x38>
 80162b0:	68ac      	ldr	r4, [r5, #8]
 80162b2:	e7f1      	b.n	8016298 <_fflush_r+0x1c>
 80162b4:	4b05      	ldr	r3, [pc, #20]	; (80162cc <_fflush_r+0x50>)
 80162b6:	429c      	cmp	r4, r3
 80162b8:	bf08      	it	eq
 80162ba:	68ec      	ldreq	r4, [r5, #12]
 80162bc:	e7ec      	b.n	8016298 <_fflush_r+0x1c>
 80162be:	2000      	movs	r0, #0
 80162c0:	bd38      	pop	{r3, r4, r5, pc}
 80162c2:	bf00      	nop
 80162c4:	08018d20 	.word	0x08018d20
 80162c8:	08018d40 	.word	0x08018d40
 80162cc:	08018d00 	.word	0x08018d00

080162d0 <std>:
 80162d0:	2300      	movs	r3, #0
 80162d2:	b510      	push	{r4, lr}
 80162d4:	4604      	mov	r4, r0
 80162d6:	e9c0 3300 	strd	r3, r3, [r0]
 80162da:	6083      	str	r3, [r0, #8]
 80162dc:	8181      	strh	r1, [r0, #12]
 80162de:	6643      	str	r3, [r0, #100]	; 0x64
 80162e0:	81c2      	strh	r2, [r0, #14]
 80162e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162e6:	6183      	str	r3, [r0, #24]
 80162e8:	4619      	mov	r1, r3
 80162ea:	2208      	movs	r2, #8
 80162ec:	305c      	adds	r0, #92	; 0x5c
 80162ee:	f7fd f9a2 	bl	8013636 <memset>
 80162f2:	4b05      	ldr	r3, [pc, #20]	; (8016308 <std+0x38>)
 80162f4:	6263      	str	r3, [r4, #36]	; 0x24
 80162f6:	4b05      	ldr	r3, [pc, #20]	; (801630c <std+0x3c>)
 80162f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80162fa:	4b05      	ldr	r3, [pc, #20]	; (8016310 <std+0x40>)
 80162fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80162fe:	4b05      	ldr	r3, [pc, #20]	; (8016314 <std+0x44>)
 8016300:	6224      	str	r4, [r4, #32]
 8016302:	6323      	str	r3, [r4, #48]	; 0x30
 8016304:	bd10      	pop	{r4, pc}
 8016306:	bf00      	nop
 8016308:	080144ed 	.word	0x080144ed
 801630c:	08014513 	.word	0x08014513
 8016310:	0801454b 	.word	0x0801454b
 8016314:	0801456f 	.word	0x0801456f

08016318 <_cleanup_r>:
 8016318:	4901      	ldr	r1, [pc, #4]	; (8016320 <_cleanup_r+0x8>)
 801631a:	f000 b885 	b.w	8016428 <_fwalk_reent>
 801631e:	bf00      	nop
 8016320:	0801627d 	.word	0x0801627d

08016324 <__sfmoreglue>:
 8016324:	b570      	push	{r4, r5, r6, lr}
 8016326:	1e4a      	subs	r2, r1, #1
 8016328:	2568      	movs	r5, #104	; 0x68
 801632a:	4355      	muls	r5, r2
 801632c:	460e      	mov	r6, r1
 801632e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016332:	f001 f8cb 	bl	80174cc <_malloc_r>
 8016336:	4604      	mov	r4, r0
 8016338:	b140      	cbz	r0, 801634c <__sfmoreglue+0x28>
 801633a:	2100      	movs	r1, #0
 801633c:	e9c0 1600 	strd	r1, r6, [r0]
 8016340:	300c      	adds	r0, #12
 8016342:	60a0      	str	r0, [r4, #8]
 8016344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016348:	f7fd f975 	bl	8013636 <memset>
 801634c:	4620      	mov	r0, r4
 801634e:	bd70      	pop	{r4, r5, r6, pc}

08016350 <__sinit>:
 8016350:	6983      	ldr	r3, [r0, #24]
 8016352:	b510      	push	{r4, lr}
 8016354:	4604      	mov	r4, r0
 8016356:	bb33      	cbnz	r3, 80163a6 <__sinit+0x56>
 8016358:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801635c:	6503      	str	r3, [r0, #80]	; 0x50
 801635e:	4b12      	ldr	r3, [pc, #72]	; (80163a8 <__sinit+0x58>)
 8016360:	4a12      	ldr	r2, [pc, #72]	; (80163ac <__sinit+0x5c>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	6282      	str	r2, [r0, #40]	; 0x28
 8016366:	4298      	cmp	r0, r3
 8016368:	bf04      	itt	eq
 801636a:	2301      	moveq	r3, #1
 801636c:	6183      	streq	r3, [r0, #24]
 801636e:	f000 f81f 	bl	80163b0 <__sfp>
 8016372:	6060      	str	r0, [r4, #4]
 8016374:	4620      	mov	r0, r4
 8016376:	f000 f81b 	bl	80163b0 <__sfp>
 801637a:	60a0      	str	r0, [r4, #8]
 801637c:	4620      	mov	r0, r4
 801637e:	f000 f817 	bl	80163b0 <__sfp>
 8016382:	2200      	movs	r2, #0
 8016384:	60e0      	str	r0, [r4, #12]
 8016386:	2104      	movs	r1, #4
 8016388:	6860      	ldr	r0, [r4, #4]
 801638a:	f7ff ffa1 	bl	80162d0 <std>
 801638e:	2201      	movs	r2, #1
 8016390:	2109      	movs	r1, #9
 8016392:	68a0      	ldr	r0, [r4, #8]
 8016394:	f7ff ff9c 	bl	80162d0 <std>
 8016398:	2202      	movs	r2, #2
 801639a:	2112      	movs	r1, #18
 801639c:	68e0      	ldr	r0, [r4, #12]
 801639e:	f7ff ff97 	bl	80162d0 <std>
 80163a2:	2301      	movs	r3, #1
 80163a4:	61a3      	str	r3, [r4, #24]
 80163a6:	bd10      	pop	{r4, pc}
 80163a8:	08018c60 	.word	0x08018c60
 80163ac:	08016319 	.word	0x08016319

080163b0 <__sfp>:
 80163b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163b2:	4b1b      	ldr	r3, [pc, #108]	; (8016420 <__sfp+0x70>)
 80163b4:	681e      	ldr	r6, [r3, #0]
 80163b6:	69b3      	ldr	r3, [r6, #24]
 80163b8:	4607      	mov	r7, r0
 80163ba:	b913      	cbnz	r3, 80163c2 <__sfp+0x12>
 80163bc:	4630      	mov	r0, r6
 80163be:	f7ff ffc7 	bl	8016350 <__sinit>
 80163c2:	3648      	adds	r6, #72	; 0x48
 80163c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80163c8:	3b01      	subs	r3, #1
 80163ca:	d503      	bpl.n	80163d4 <__sfp+0x24>
 80163cc:	6833      	ldr	r3, [r6, #0]
 80163ce:	b133      	cbz	r3, 80163de <__sfp+0x2e>
 80163d0:	6836      	ldr	r6, [r6, #0]
 80163d2:	e7f7      	b.n	80163c4 <__sfp+0x14>
 80163d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80163d8:	b16d      	cbz	r5, 80163f6 <__sfp+0x46>
 80163da:	3468      	adds	r4, #104	; 0x68
 80163dc:	e7f4      	b.n	80163c8 <__sfp+0x18>
 80163de:	2104      	movs	r1, #4
 80163e0:	4638      	mov	r0, r7
 80163e2:	f7ff ff9f 	bl	8016324 <__sfmoreglue>
 80163e6:	6030      	str	r0, [r6, #0]
 80163e8:	2800      	cmp	r0, #0
 80163ea:	d1f1      	bne.n	80163d0 <__sfp+0x20>
 80163ec:	230c      	movs	r3, #12
 80163ee:	603b      	str	r3, [r7, #0]
 80163f0:	4604      	mov	r4, r0
 80163f2:	4620      	mov	r0, r4
 80163f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163f6:	4b0b      	ldr	r3, [pc, #44]	; (8016424 <__sfp+0x74>)
 80163f8:	6665      	str	r5, [r4, #100]	; 0x64
 80163fa:	e9c4 5500 	strd	r5, r5, [r4]
 80163fe:	60a5      	str	r5, [r4, #8]
 8016400:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016404:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016408:	2208      	movs	r2, #8
 801640a:	4629      	mov	r1, r5
 801640c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016410:	f7fd f911 	bl	8013636 <memset>
 8016414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801641c:	e7e9      	b.n	80163f2 <__sfp+0x42>
 801641e:	bf00      	nop
 8016420:	08018c60 	.word	0x08018c60
 8016424:	ffff0001 	.word	0xffff0001

08016428 <_fwalk_reent>:
 8016428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801642c:	4680      	mov	r8, r0
 801642e:	4689      	mov	r9, r1
 8016430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016434:	2600      	movs	r6, #0
 8016436:	b914      	cbnz	r4, 801643e <_fwalk_reent+0x16>
 8016438:	4630      	mov	r0, r6
 801643a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801643e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016442:	3f01      	subs	r7, #1
 8016444:	d501      	bpl.n	801644a <_fwalk_reent+0x22>
 8016446:	6824      	ldr	r4, [r4, #0]
 8016448:	e7f5      	b.n	8016436 <_fwalk_reent+0xe>
 801644a:	89ab      	ldrh	r3, [r5, #12]
 801644c:	2b01      	cmp	r3, #1
 801644e:	d907      	bls.n	8016460 <_fwalk_reent+0x38>
 8016450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016454:	3301      	adds	r3, #1
 8016456:	d003      	beq.n	8016460 <_fwalk_reent+0x38>
 8016458:	4629      	mov	r1, r5
 801645a:	4640      	mov	r0, r8
 801645c:	47c8      	blx	r9
 801645e:	4306      	orrs	r6, r0
 8016460:	3568      	adds	r5, #104	; 0x68
 8016462:	e7ee      	b.n	8016442 <_fwalk_reent+0x1a>

08016464 <rshift>:
 8016464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016466:	6906      	ldr	r6, [r0, #16]
 8016468:	114b      	asrs	r3, r1, #5
 801646a:	429e      	cmp	r6, r3
 801646c:	f100 0414 	add.w	r4, r0, #20
 8016470:	dd30      	ble.n	80164d4 <rshift+0x70>
 8016472:	f011 011f 	ands.w	r1, r1, #31
 8016476:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801647a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801647e:	d108      	bne.n	8016492 <rshift+0x2e>
 8016480:	4621      	mov	r1, r4
 8016482:	42b2      	cmp	r2, r6
 8016484:	460b      	mov	r3, r1
 8016486:	d211      	bcs.n	80164ac <rshift+0x48>
 8016488:	f852 3b04 	ldr.w	r3, [r2], #4
 801648c:	f841 3b04 	str.w	r3, [r1], #4
 8016490:	e7f7      	b.n	8016482 <rshift+0x1e>
 8016492:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016496:	f1c1 0c20 	rsb	ip, r1, #32
 801649a:	40cd      	lsrs	r5, r1
 801649c:	3204      	adds	r2, #4
 801649e:	4623      	mov	r3, r4
 80164a0:	42b2      	cmp	r2, r6
 80164a2:	4617      	mov	r7, r2
 80164a4:	d30c      	bcc.n	80164c0 <rshift+0x5c>
 80164a6:	601d      	str	r5, [r3, #0]
 80164a8:	b105      	cbz	r5, 80164ac <rshift+0x48>
 80164aa:	3304      	adds	r3, #4
 80164ac:	1b1a      	subs	r2, r3, r4
 80164ae:	42a3      	cmp	r3, r4
 80164b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80164b4:	bf08      	it	eq
 80164b6:	2300      	moveq	r3, #0
 80164b8:	6102      	str	r2, [r0, #16]
 80164ba:	bf08      	it	eq
 80164bc:	6143      	streq	r3, [r0, #20]
 80164be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164c0:	683f      	ldr	r7, [r7, #0]
 80164c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80164c6:	433d      	orrs	r5, r7
 80164c8:	f843 5b04 	str.w	r5, [r3], #4
 80164cc:	f852 5b04 	ldr.w	r5, [r2], #4
 80164d0:	40cd      	lsrs	r5, r1
 80164d2:	e7e5      	b.n	80164a0 <rshift+0x3c>
 80164d4:	4623      	mov	r3, r4
 80164d6:	e7e9      	b.n	80164ac <rshift+0x48>

080164d8 <__hexdig_fun>:
 80164d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80164dc:	2b09      	cmp	r3, #9
 80164de:	d802      	bhi.n	80164e6 <__hexdig_fun+0xe>
 80164e0:	3820      	subs	r0, #32
 80164e2:	b2c0      	uxtb	r0, r0
 80164e4:	4770      	bx	lr
 80164e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80164ea:	2b05      	cmp	r3, #5
 80164ec:	d801      	bhi.n	80164f2 <__hexdig_fun+0x1a>
 80164ee:	3847      	subs	r0, #71	; 0x47
 80164f0:	e7f7      	b.n	80164e2 <__hexdig_fun+0xa>
 80164f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80164f6:	2b05      	cmp	r3, #5
 80164f8:	d801      	bhi.n	80164fe <__hexdig_fun+0x26>
 80164fa:	3827      	subs	r0, #39	; 0x27
 80164fc:	e7f1      	b.n	80164e2 <__hexdig_fun+0xa>
 80164fe:	2000      	movs	r0, #0
 8016500:	4770      	bx	lr

08016502 <__gethex>:
 8016502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016506:	b08b      	sub	sp, #44	; 0x2c
 8016508:	468a      	mov	sl, r1
 801650a:	9002      	str	r0, [sp, #8]
 801650c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801650e:	9306      	str	r3, [sp, #24]
 8016510:	4690      	mov	r8, r2
 8016512:	f000 fadf 	bl	8016ad4 <__localeconv_l>
 8016516:	6803      	ldr	r3, [r0, #0]
 8016518:	9303      	str	r3, [sp, #12]
 801651a:	4618      	mov	r0, r3
 801651c:	f7e9 fe70 	bl	8000200 <strlen>
 8016520:	9b03      	ldr	r3, [sp, #12]
 8016522:	9001      	str	r0, [sp, #4]
 8016524:	4403      	add	r3, r0
 8016526:	f04f 0b00 	mov.w	fp, #0
 801652a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801652e:	9307      	str	r3, [sp, #28]
 8016530:	f8da 3000 	ldr.w	r3, [sl]
 8016534:	3302      	adds	r3, #2
 8016536:	461f      	mov	r7, r3
 8016538:	f813 0b01 	ldrb.w	r0, [r3], #1
 801653c:	2830      	cmp	r0, #48	; 0x30
 801653e:	d06c      	beq.n	801661a <__gethex+0x118>
 8016540:	f7ff ffca 	bl	80164d8 <__hexdig_fun>
 8016544:	4604      	mov	r4, r0
 8016546:	2800      	cmp	r0, #0
 8016548:	d16a      	bne.n	8016620 <__gethex+0x11e>
 801654a:	9a01      	ldr	r2, [sp, #4]
 801654c:	9903      	ldr	r1, [sp, #12]
 801654e:	4638      	mov	r0, r7
 8016550:	f001 fe34 	bl	80181bc <strncmp>
 8016554:	2800      	cmp	r0, #0
 8016556:	d166      	bne.n	8016626 <__gethex+0x124>
 8016558:	9b01      	ldr	r3, [sp, #4]
 801655a:	5cf8      	ldrb	r0, [r7, r3]
 801655c:	18fe      	adds	r6, r7, r3
 801655e:	f7ff ffbb 	bl	80164d8 <__hexdig_fun>
 8016562:	2800      	cmp	r0, #0
 8016564:	d062      	beq.n	801662c <__gethex+0x12a>
 8016566:	4633      	mov	r3, r6
 8016568:	7818      	ldrb	r0, [r3, #0]
 801656a:	2830      	cmp	r0, #48	; 0x30
 801656c:	461f      	mov	r7, r3
 801656e:	f103 0301 	add.w	r3, r3, #1
 8016572:	d0f9      	beq.n	8016568 <__gethex+0x66>
 8016574:	f7ff ffb0 	bl	80164d8 <__hexdig_fun>
 8016578:	fab0 f580 	clz	r5, r0
 801657c:	096d      	lsrs	r5, r5, #5
 801657e:	4634      	mov	r4, r6
 8016580:	f04f 0b01 	mov.w	fp, #1
 8016584:	463a      	mov	r2, r7
 8016586:	4616      	mov	r6, r2
 8016588:	3201      	adds	r2, #1
 801658a:	7830      	ldrb	r0, [r6, #0]
 801658c:	f7ff ffa4 	bl	80164d8 <__hexdig_fun>
 8016590:	2800      	cmp	r0, #0
 8016592:	d1f8      	bne.n	8016586 <__gethex+0x84>
 8016594:	9a01      	ldr	r2, [sp, #4]
 8016596:	9903      	ldr	r1, [sp, #12]
 8016598:	4630      	mov	r0, r6
 801659a:	f001 fe0f 	bl	80181bc <strncmp>
 801659e:	b950      	cbnz	r0, 80165b6 <__gethex+0xb4>
 80165a0:	b954      	cbnz	r4, 80165b8 <__gethex+0xb6>
 80165a2:	9b01      	ldr	r3, [sp, #4]
 80165a4:	18f4      	adds	r4, r6, r3
 80165a6:	4622      	mov	r2, r4
 80165a8:	4616      	mov	r6, r2
 80165aa:	3201      	adds	r2, #1
 80165ac:	7830      	ldrb	r0, [r6, #0]
 80165ae:	f7ff ff93 	bl	80164d8 <__hexdig_fun>
 80165b2:	2800      	cmp	r0, #0
 80165b4:	d1f8      	bne.n	80165a8 <__gethex+0xa6>
 80165b6:	b10c      	cbz	r4, 80165bc <__gethex+0xba>
 80165b8:	1ba4      	subs	r4, r4, r6
 80165ba:	00a4      	lsls	r4, r4, #2
 80165bc:	7833      	ldrb	r3, [r6, #0]
 80165be:	2b50      	cmp	r3, #80	; 0x50
 80165c0:	d001      	beq.n	80165c6 <__gethex+0xc4>
 80165c2:	2b70      	cmp	r3, #112	; 0x70
 80165c4:	d140      	bne.n	8016648 <__gethex+0x146>
 80165c6:	7873      	ldrb	r3, [r6, #1]
 80165c8:	2b2b      	cmp	r3, #43	; 0x2b
 80165ca:	d031      	beq.n	8016630 <__gethex+0x12e>
 80165cc:	2b2d      	cmp	r3, #45	; 0x2d
 80165ce:	d033      	beq.n	8016638 <__gethex+0x136>
 80165d0:	1c71      	adds	r1, r6, #1
 80165d2:	f04f 0900 	mov.w	r9, #0
 80165d6:	7808      	ldrb	r0, [r1, #0]
 80165d8:	f7ff ff7e 	bl	80164d8 <__hexdig_fun>
 80165dc:	1e43      	subs	r3, r0, #1
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	2b18      	cmp	r3, #24
 80165e2:	d831      	bhi.n	8016648 <__gethex+0x146>
 80165e4:	f1a0 0210 	sub.w	r2, r0, #16
 80165e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80165ec:	f7ff ff74 	bl	80164d8 <__hexdig_fun>
 80165f0:	1e43      	subs	r3, r0, #1
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	2b18      	cmp	r3, #24
 80165f6:	d922      	bls.n	801663e <__gethex+0x13c>
 80165f8:	f1b9 0f00 	cmp.w	r9, #0
 80165fc:	d000      	beq.n	8016600 <__gethex+0xfe>
 80165fe:	4252      	negs	r2, r2
 8016600:	4414      	add	r4, r2
 8016602:	f8ca 1000 	str.w	r1, [sl]
 8016606:	b30d      	cbz	r5, 801664c <__gethex+0x14a>
 8016608:	f1bb 0f00 	cmp.w	fp, #0
 801660c:	bf0c      	ite	eq
 801660e:	2706      	moveq	r7, #6
 8016610:	2700      	movne	r7, #0
 8016612:	4638      	mov	r0, r7
 8016614:	b00b      	add	sp, #44	; 0x2c
 8016616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801661a:	f10b 0b01 	add.w	fp, fp, #1
 801661e:	e78a      	b.n	8016536 <__gethex+0x34>
 8016620:	2500      	movs	r5, #0
 8016622:	462c      	mov	r4, r5
 8016624:	e7ae      	b.n	8016584 <__gethex+0x82>
 8016626:	463e      	mov	r6, r7
 8016628:	2501      	movs	r5, #1
 801662a:	e7c7      	b.n	80165bc <__gethex+0xba>
 801662c:	4604      	mov	r4, r0
 801662e:	e7fb      	b.n	8016628 <__gethex+0x126>
 8016630:	f04f 0900 	mov.w	r9, #0
 8016634:	1cb1      	adds	r1, r6, #2
 8016636:	e7ce      	b.n	80165d6 <__gethex+0xd4>
 8016638:	f04f 0901 	mov.w	r9, #1
 801663c:	e7fa      	b.n	8016634 <__gethex+0x132>
 801663e:	230a      	movs	r3, #10
 8016640:	fb03 0202 	mla	r2, r3, r2, r0
 8016644:	3a10      	subs	r2, #16
 8016646:	e7cf      	b.n	80165e8 <__gethex+0xe6>
 8016648:	4631      	mov	r1, r6
 801664a:	e7da      	b.n	8016602 <__gethex+0x100>
 801664c:	1bf3      	subs	r3, r6, r7
 801664e:	3b01      	subs	r3, #1
 8016650:	4629      	mov	r1, r5
 8016652:	2b07      	cmp	r3, #7
 8016654:	dc49      	bgt.n	80166ea <__gethex+0x1e8>
 8016656:	9802      	ldr	r0, [sp, #8]
 8016658:	f000 fadc 	bl	8016c14 <_Balloc>
 801665c:	9b01      	ldr	r3, [sp, #4]
 801665e:	f100 0914 	add.w	r9, r0, #20
 8016662:	f04f 0b00 	mov.w	fp, #0
 8016666:	f1c3 0301 	rsb	r3, r3, #1
 801666a:	4605      	mov	r5, r0
 801666c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016670:	46da      	mov	sl, fp
 8016672:	9308      	str	r3, [sp, #32]
 8016674:	42b7      	cmp	r7, r6
 8016676:	d33b      	bcc.n	80166f0 <__gethex+0x1ee>
 8016678:	9804      	ldr	r0, [sp, #16]
 801667a:	f840 ab04 	str.w	sl, [r0], #4
 801667e:	eba0 0009 	sub.w	r0, r0, r9
 8016682:	1080      	asrs	r0, r0, #2
 8016684:	6128      	str	r0, [r5, #16]
 8016686:	0147      	lsls	r7, r0, #5
 8016688:	4650      	mov	r0, sl
 801668a:	f000 fb87 	bl	8016d9c <__hi0bits>
 801668e:	f8d8 6000 	ldr.w	r6, [r8]
 8016692:	1a3f      	subs	r7, r7, r0
 8016694:	42b7      	cmp	r7, r6
 8016696:	dd64      	ble.n	8016762 <__gethex+0x260>
 8016698:	1bbf      	subs	r7, r7, r6
 801669a:	4639      	mov	r1, r7
 801669c:	4628      	mov	r0, r5
 801669e:	f000 fe97 	bl	80173d0 <__any_on>
 80166a2:	4682      	mov	sl, r0
 80166a4:	b178      	cbz	r0, 80166c6 <__gethex+0x1c4>
 80166a6:	1e7b      	subs	r3, r7, #1
 80166a8:	1159      	asrs	r1, r3, #5
 80166aa:	f003 021f 	and.w	r2, r3, #31
 80166ae:	f04f 0a01 	mov.w	sl, #1
 80166b2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80166b6:	fa0a f202 	lsl.w	r2, sl, r2
 80166ba:	420a      	tst	r2, r1
 80166bc:	d003      	beq.n	80166c6 <__gethex+0x1c4>
 80166be:	4553      	cmp	r3, sl
 80166c0:	dc46      	bgt.n	8016750 <__gethex+0x24e>
 80166c2:	f04f 0a02 	mov.w	sl, #2
 80166c6:	4639      	mov	r1, r7
 80166c8:	4628      	mov	r0, r5
 80166ca:	f7ff fecb 	bl	8016464 <rshift>
 80166ce:	443c      	add	r4, r7
 80166d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166d4:	42a3      	cmp	r3, r4
 80166d6:	da52      	bge.n	801677e <__gethex+0x27c>
 80166d8:	4629      	mov	r1, r5
 80166da:	9802      	ldr	r0, [sp, #8]
 80166dc:	f000 face 	bl	8016c7c <_Bfree>
 80166e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80166e2:	2300      	movs	r3, #0
 80166e4:	6013      	str	r3, [r2, #0]
 80166e6:	27a3      	movs	r7, #163	; 0xa3
 80166e8:	e793      	b.n	8016612 <__gethex+0x110>
 80166ea:	3101      	adds	r1, #1
 80166ec:	105b      	asrs	r3, r3, #1
 80166ee:	e7b0      	b.n	8016652 <__gethex+0x150>
 80166f0:	1e73      	subs	r3, r6, #1
 80166f2:	9305      	str	r3, [sp, #20]
 80166f4:	9a07      	ldr	r2, [sp, #28]
 80166f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80166fa:	4293      	cmp	r3, r2
 80166fc:	d018      	beq.n	8016730 <__gethex+0x22e>
 80166fe:	f1bb 0f20 	cmp.w	fp, #32
 8016702:	d107      	bne.n	8016714 <__gethex+0x212>
 8016704:	9b04      	ldr	r3, [sp, #16]
 8016706:	f8c3 a000 	str.w	sl, [r3]
 801670a:	3304      	adds	r3, #4
 801670c:	f04f 0a00 	mov.w	sl, #0
 8016710:	9304      	str	r3, [sp, #16]
 8016712:	46d3      	mov	fp, sl
 8016714:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016718:	f7ff fede 	bl	80164d8 <__hexdig_fun>
 801671c:	f000 000f 	and.w	r0, r0, #15
 8016720:	fa00 f00b 	lsl.w	r0, r0, fp
 8016724:	ea4a 0a00 	orr.w	sl, sl, r0
 8016728:	f10b 0b04 	add.w	fp, fp, #4
 801672c:	9b05      	ldr	r3, [sp, #20]
 801672e:	e00d      	b.n	801674c <__gethex+0x24a>
 8016730:	9b05      	ldr	r3, [sp, #20]
 8016732:	9a08      	ldr	r2, [sp, #32]
 8016734:	4413      	add	r3, r2
 8016736:	42bb      	cmp	r3, r7
 8016738:	d3e1      	bcc.n	80166fe <__gethex+0x1fc>
 801673a:	4618      	mov	r0, r3
 801673c:	9a01      	ldr	r2, [sp, #4]
 801673e:	9903      	ldr	r1, [sp, #12]
 8016740:	9309      	str	r3, [sp, #36]	; 0x24
 8016742:	f001 fd3b 	bl	80181bc <strncmp>
 8016746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016748:	2800      	cmp	r0, #0
 801674a:	d1d8      	bne.n	80166fe <__gethex+0x1fc>
 801674c:	461e      	mov	r6, r3
 801674e:	e791      	b.n	8016674 <__gethex+0x172>
 8016750:	1eb9      	subs	r1, r7, #2
 8016752:	4628      	mov	r0, r5
 8016754:	f000 fe3c 	bl	80173d0 <__any_on>
 8016758:	2800      	cmp	r0, #0
 801675a:	d0b2      	beq.n	80166c2 <__gethex+0x1c0>
 801675c:	f04f 0a03 	mov.w	sl, #3
 8016760:	e7b1      	b.n	80166c6 <__gethex+0x1c4>
 8016762:	da09      	bge.n	8016778 <__gethex+0x276>
 8016764:	1bf7      	subs	r7, r6, r7
 8016766:	4629      	mov	r1, r5
 8016768:	463a      	mov	r2, r7
 801676a:	9802      	ldr	r0, [sp, #8]
 801676c:	f000 fc52 	bl	8017014 <__lshift>
 8016770:	1be4      	subs	r4, r4, r7
 8016772:	4605      	mov	r5, r0
 8016774:	f100 0914 	add.w	r9, r0, #20
 8016778:	f04f 0a00 	mov.w	sl, #0
 801677c:	e7a8      	b.n	80166d0 <__gethex+0x1ce>
 801677e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016782:	42a0      	cmp	r0, r4
 8016784:	dd6a      	ble.n	801685c <__gethex+0x35a>
 8016786:	1b04      	subs	r4, r0, r4
 8016788:	42a6      	cmp	r6, r4
 801678a:	dc2e      	bgt.n	80167ea <__gethex+0x2e8>
 801678c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016790:	2b02      	cmp	r3, #2
 8016792:	d022      	beq.n	80167da <__gethex+0x2d8>
 8016794:	2b03      	cmp	r3, #3
 8016796:	d024      	beq.n	80167e2 <__gethex+0x2e0>
 8016798:	2b01      	cmp	r3, #1
 801679a:	d115      	bne.n	80167c8 <__gethex+0x2c6>
 801679c:	42a6      	cmp	r6, r4
 801679e:	d113      	bne.n	80167c8 <__gethex+0x2c6>
 80167a0:	2e01      	cmp	r6, #1
 80167a2:	dc0b      	bgt.n	80167bc <__gethex+0x2ba>
 80167a4:	9a06      	ldr	r2, [sp, #24]
 80167a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80167aa:	6013      	str	r3, [r2, #0]
 80167ac:	2301      	movs	r3, #1
 80167ae:	612b      	str	r3, [r5, #16]
 80167b0:	f8c9 3000 	str.w	r3, [r9]
 80167b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80167b6:	2762      	movs	r7, #98	; 0x62
 80167b8:	601d      	str	r5, [r3, #0]
 80167ba:	e72a      	b.n	8016612 <__gethex+0x110>
 80167bc:	1e71      	subs	r1, r6, #1
 80167be:	4628      	mov	r0, r5
 80167c0:	f000 fe06 	bl	80173d0 <__any_on>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d1ed      	bne.n	80167a4 <__gethex+0x2a2>
 80167c8:	4629      	mov	r1, r5
 80167ca:	9802      	ldr	r0, [sp, #8]
 80167cc:	f000 fa56 	bl	8016c7c <_Bfree>
 80167d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80167d2:	2300      	movs	r3, #0
 80167d4:	6013      	str	r3, [r2, #0]
 80167d6:	2750      	movs	r7, #80	; 0x50
 80167d8:	e71b      	b.n	8016612 <__gethex+0x110>
 80167da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d0e1      	beq.n	80167a4 <__gethex+0x2a2>
 80167e0:	e7f2      	b.n	80167c8 <__gethex+0x2c6>
 80167e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d1dd      	bne.n	80167a4 <__gethex+0x2a2>
 80167e8:	e7ee      	b.n	80167c8 <__gethex+0x2c6>
 80167ea:	1e67      	subs	r7, r4, #1
 80167ec:	f1ba 0f00 	cmp.w	sl, #0
 80167f0:	d131      	bne.n	8016856 <__gethex+0x354>
 80167f2:	b127      	cbz	r7, 80167fe <__gethex+0x2fc>
 80167f4:	4639      	mov	r1, r7
 80167f6:	4628      	mov	r0, r5
 80167f8:	f000 fdea 	bl	80173d0 <__any_on>
 80167fc:	4682      	mov	sl, r0
 80167fe:	117a      	asrs	r2, r7, #5
 8016800:	2301      	movs	r3, #1
 8016802:	f007 071f 	and.w	r7, r7, #31
 8016806:	fa03 f707 	lsl.w	r7, r3, r7
 801680a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801680e:	4621      	mov	r1, r4
 8016810:	421f      	tst	r7, r3
 8016812:	4628      	mov	r0, r5
 8016814:	bf18      	it	ne
 8016816:	f04a 0a02 	orrne.w	sl, sl, #2
 801681a:	1b36      	subs	r6, r6, r4
 801681c:	f7ff fe22 	bl	8016464 <rshift>
 8016820:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016824:	2702      	movs	r7, #2
 8016826:	f1ba 0f00 	cmp.w	sl, #0
 801682a:	d048      	beq.n	80168be <__gethex+0x3bc>
 801682c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016830:	2b02      	cmp	r3, #2
 8016832:	d015      	beq.n	8016860 <__gethex+0x35e>
 8016834:	2b03      	cmp	r3, #3
 8016836:	d017      	beq.n	8016868 <__gethex+0x366>
 8016838:	2b01      	cmp	r3, #1
 801683a:	d109      	bne.n	8016850 <__gethex+0x34e>
 801683c:	f01a 0f02 	tst.w	sl, #2
 8016840:	d006      	beq.n	8016850 <__gethex+0x34e>
 8016842:	f8d9 3000 	ldr.w	r3, [r9]
 8016846:	ea4a 0a03 	orr.w	sl, sl, r3
 801684a:	f01a 0f01 	tst.w	sl, #1
 801684e:	d10e      	bne.n	801686e <__gethex+0x36c>
 8016850:	f047 0710 	orr.w	r7, r7, #16
 8016854:	e033      	b.n	80168be <__gethex+0x3bc>
 8016856:	f04f 0a01 	mov.w	sl, #1
 801685a:	e7d0      	b.n	80167fe <__gethex+0x2fc>
 801685c:	2701      	movs	r7, #1
 801685e:	e7e2      	b.n	8016826 <__gethex+0x324>
 8016860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016862:	f1c3 0301 	rsb	r3, r3, #1
 8016866:	9315      	str	r3, [sp, #84]	; 0x54
 8016868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801686a:	2b00      	cmp	r3, #0
 801686c:	d0f0      	beq.n	8016850 <__gethex+0x34e>
 801686e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016872:	f105 0314 	add.w	r3, r5, #20
 8016876:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801687a:	eb03 010a 	add.w	r1, r3, sl
 801687e:	f04f 0c00 	mov.w	ip, #0
 8016882:	4618      	mov	r0, r3
 8016884:	f853 2b04 	ldr.w	r2, [r3], #4
 8016888:	f1b2 3fff 	cmp.w	r2, #4294967295
 801688c:	d01c      	beq.n	80168c8 <__gethex+0x3c6>
 801688e:	3201      	adds	r2, #1
 8016890:	6002      	str	r2, [r0, #0]
 8016892:	2f02      	cmp	r7, #2
 8016894:	f105 0314 	add.w	r3, r5, #20
 8016898:	d138      	bne.n	801690c <__gethex+0x40a>
 801689a:	f8d8 2000 	ldr.w	r2, [r8]
 801689e:	3a01      	subs	r2, #1
 80168a0:	42b2      	cmp	r2, r6
 80168a2:	d10a      	bne.n	80168ba <__gethex+0x3b8>
 80168a4:	1171      	asrs	r1, r6, #5
 80168a6:	2201      	movs	r2, #1
 80168a8:	f006 061f 	and.w	r6, r6, #31
 80168ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80168b0:	fa02 f606 	lsl.w	r6, r2, r6
 80168b4:	421e      	tst	r6, r3
 80168b6:	bf18      	it	ne
 80168b8:	4617      	movne	r7, r2
 80168ba:	f047 0720 	orr.w	r7, r7, #32
 80168be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80168c0:	601d      	str	r5, [r3, #0]
 80168c2:	9b06      	ldr	r3, [sp, #24]
 80168c4:	601c      	str	r4, [r3, #0]
 80168c6:	e6a4      	b.n	8016612 <__gethex+0x110>
 80168c8:	4299      	cmp	r1, r3
 80168ca:	f843 cc04 	str.w	ip, [r3, #-4]
 80168ce:	d8d8      	bhi.n	8016882 <__gethex+0x380>
 80168d0:	68ab      	ldr	r3, [r5, #8]
 80168d2:	4599      	cmp	r9, r3
 80168d4:	db12      	blt.n	80168fc <__gethex+0x3fa>
 80168d6:	6869      	ldr	r1, [r5, #4]
 80168d8:	9802      	ldr	r0, [sp, #8]
 80168da:	3101      	adds	r1, #1
 80168dc:	f000 f99a 	bl	8016c14 <_Balloc>
 80168e0:	692a      	ldr	r2, [r5, #16]
 80168e2:	3202      	adds	r2, #2
 80168e4:	f105 010c 	add.w	r1, r5, #12
 80168e8:	4683      	mov	fp, r0
 80168ea:	0092      	lsls	r2, r2, #2
 80168ec:	300c      	adds	r0, #12
 80168ee:	f7fc fe97 	bl	8013620 <memcpy>
 80168f2:	4629      	mov	r1, r5
 80168f4:	9802      	ldr	r0, [sp, #8]
 80168f6:	f000 f9c1 	bl	8016c7c <_Bfree>
 80168fa:	465d      	mov	r5, fp
 80168fc:	692b      	ldr	r3, [r5, #16]
 80168fe:	1c5a      	adds	r2, r3, #1
 8016900:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016904:	612a      	str	r2, [r5, #16]
 8016906:	2201      	movs	r2, #1
 8016908:	615a      	str	r2, [r3, #20]
 801690a:	e7c2      	b.n	8016892 <__gethex+0x390>
 801690c:	692a      	ldr	r2, [r5, #16]
 801690e:	454a      	cmp	r2, r9
 8016910:	dd0b      	ble.n	801692a <__gethex+0x428>
 8016912:	2101      	movs	r1, #1
 8016914:	4628      	mov	r0, r5
 8016916:	f7ff fda5 	bl	8016464 <rshift>
 801691a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801691e:	3401      	adds	r4, #1
 8016920:	42a3      	cmp	r3, r4
 8016922:	f6ff aed9 	blt.w	80166d8 <__gethex+0x1d6>
 8016926:	2701      	movs	r7, #1
 8016928:	e7c7      	b.n	80168ba <__gethex+0x3b8>
 801692a:	f016 061f 	ands.w	r6, r6, #31
 801692e:	d0fa      	beq.n	8016926 <__gethex+0x424>
 8016930:	449a      	add	sl, r3
 8016932:	f1c6 0620 	rsb	r6, r6, #32
 8016936:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801693a:	f000 fa2f 	bl	8016d9c <__hi0bits>
 801693e:	42b0      	cmp	r0, r6
 8016940:	dbe7      	blt.n	8016912 <__gethex+0x410>
 8016942:	e7f0      	b.n	8016926 <__gethex+0x424>

08016944 <L_shift>:
 8016944:	f1c2 0208 	rsb	r2, r2, #8
 8016948:	0092      	lsls	r2, r2, #2
 801694a:	b570      	push	{r4, r5, r6, lr}
 801694c:	f1c2 0620 	rsb	r6, r2, #32
 8016950:	6843      	ldr	r3, [r0, #4]
 8016952:	6804      	ldr	r4, [r0, #0]
 8016954:	fa03 f506 	lsl.w	r5, r3, r6
 8016958:	432c      	orrs	r4, r5
 801695a:	40d3      	lsrs	r3, r2
 801695c:	6004      	str	r4, [r0, #0]
 801695e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016962:	4288      	cmp	r0, r1
 8016964:	d3f4      	bcc.n	8016950 <L_shift+0xc>
 8016966:	bd70      	pop	{r4, r5, r6, pc}

08016968 <__match>:
 8016968:	b530      	push	{r4, r5, lr}
 801696a:	6803      	ldr	r3, [r0, #0]
 801696c:	3301      	adds	r3, #1
 801696e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016972:	b914      	cbnz	r4, 801697a <__match+0x12>
 8016974:	6003      	str	r3, [r0, #0]
 8016976:	2001      	movs	r0, #1
 8016978:	bd30      	pop	{r4, r5, pc}
 801697a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801697e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016982:	2d19      	cmp	r5, #25
 8016984:	bf98      	it	ls
 8016986:	3220      	addls	r2, #32
 8016988:	42a2      	cmp	r2, r4
 801698a:	d0f0      	beq.n	801696e <__match+0x6>
 801698c:	2000      	movs	r0, #0
 801698e:	e7f3      	b.n	8016978 <__match+0x10>

08016990 <__hexnan>:
 8016990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016994:	680b      	ldr	r3, [r1, #0]
 8016996:	6801      	ldr	r1, [r0, #0]
 8016998:	115f      	asrs	r7, r3, #5
 801699a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801699e:	f013 031f 	ands.w	r3, r3, #31
 80169a2:	b087      	sub	sp, #28
 80169a4:	bf18      	it	ne
 80169a6:	3704      	addne	r7, #4
 80169a8:	2500      	movs	r5, #0
 80169aa:	1f3e      	subs	r6, r7, #4
 80169ac:	4682      	mov	sl, r0
 80169ae:	4690      	mov	r8, r2
 80169b0:	9301      	str	r3, [sp, #4]
 80169b2:	f847 5c04 	str.w	r5, [r7, #-4]
 80169b6:	46b1      	mov	r9, r6
 80169b8:	4634      	mov	r4, r6
 80169ba:	9502      	str	r5, [sp, #8]
 80169bc:	46ab      	mov	fp, r5
 80169be:	784a      	ldrb	r2, [r1, #1]
 80169c0:	1c4b      	adds	r3, r1, #1
 80169c2:	9303      	str	r3, [sp, #12]
 80169c4:	b342      	cbz	r2, 8016a18 <__hexnan+0x88>
 80169c6:	4610      	mov	r0, r2
 80169c8:	9105      	str	r1, [sp, #20]
 80169ca:	9204      	str	r2, [sp, #16]
 80169cc:	f7ff fd84 	bl	80164d8 <__hexdig_fun>
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d143      	bne.n	8016a5c <__hexnan+0xcc>
 80169d4:	9a04      	ldr	r2, [sp, #16]
 80169d6:	9905      	ldr	r1, [sp, #20]
 80169d8:	2a20      	cmp	r2, #32
 80169da:	d818      	bhi.n	8016a0e <__hexnan+0x7e>
 80169dc:	9b02      	ldr	r3, [sp, #8]
 80169de:	459b      	cmp	fp, r3
 80169e0:	dd13      	ble.n	8016a0a <__hexnan+0x7a>
 80169e2:	454c      	cmp	r4, r9
 80169e4:	d206      	bcs.n	80169f4 <__hexnan+0x64>
 80169e6:	2d07      	cmp	r5, #7
 80169e8:	dc04      	bgt.n	80169f4 <__hexnan+0x64>
 80169ea:	462a      	mov	r2, r5
 80169ec:	4649      	mov	r1, r9
 80169ee:	4620      	mov	r0, r4
 80169f0:	f7ff ffa8 	bl	8016944 <L_shift>
 80169f4:	4544      	cmp	r4, r8
 80169f6:	d944      	bls.n	8016a82 <__hexnan+0xf2>
 80169f8:	2300      	movs	r3, #0
 80169fa:	f1a4 0904 	sub.w	r9, r4, #4
 80169fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a02:	f8cd b008 	str.w	fp, [sp, #8]
 8016a06:	464c      	mov	r4, r9
 8016a08:	461d      	mov	r5, r3
 8016a0a:	9903      	ldr	r1, [sp, #12]
 8016a0c:	e7d7      	b.n	80169be <__hexnan+0x2e>
 8016a0e:	2a29      	cmp	r2, #41	; 0x29
 8016a10:	d14a      	bne.n	8016aa8 <__hexnan+0x118>
 8016a12:	3102      	adds	r1, #2
 8016a14:	f8ca 1000 	str.w	r1, [sl]
 8016a18:	f1bb 0f00 	cmp.w	fp, #0
 8016a1c:	d044      	beq.n	8016aa8 <__hexnan+0x118>
 8016a1e:	454c      	cmp	r4, r9
 8016a20:	d206      	bcs.n	8016a30 <__hexnan+0xa0>
 8016a22:	2d07      	cmp	r5, #7
 8016a24:	dc04      	bgt.n	8016a30 <__hexnan+0xa0>
 8016a26:	462a      	mov	r2, r5
 8016a28:	4649      	mov	r1, r9
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f7ff ff8a 	bl	8016944 <L_shift>
 8016a30:	4544      	cmp	r4, r8
 8016a32:	d928      	bls.n	8016a86 <__hexnan+0xf6>
 8016a34:	4643      	mov	r3, r8
 8016a36:	f854 2b04 	ldr.w	r2, [r4], #4
 8016a3a:	f843 2b04 	str.w	r2, [r3], #4
 8016a3e:	42a6      	cmp	r6, r4
 8016a40:	d2f9      	bcs.n	8016a36 <__hexnan+0xa6>
 8016a42:	2200      	movs	r2, #0
 8016a44:	f843 2b04 	str.w	r2, [r3], #4
 8016a48:	429e      	cmp	r6, r3
 8016a4a:	d2fb      	bcs.n	8016a44 <__hexnan+0xb4>
 8016a4c:	6833      	ldr	r3, [r6, #0]
 8016a4e:	b91b      	cbnz	r3, 8016a58 <__hexnan+0xc8>
 8016a50:	4546      	cmp	r6, r8
 8016a52:	d127      	bne.n	8016aa4 <__hexnan+0x114>
 8016a54:	2301      	movs	r3, #1
 8016a56:	6033      	str	r3, [r6, #0]
 8016a58:	2005      	movs	r0, #5
 8016a5a:	e026      	b.n	8016aaa <__hexnan+0x11a>
 8016a5c:	3501      	adds	r5, #1
 8016a5e:	2d08      	cmp	r5, #8
 8016a60:	f10b 0b01 	add.w	fp, fp, #1
 8016a64:	dd06      	ble.n	8016a74 <__hexnan+0xe4>
 8016a66:	4544      	cmp	r4, r8
 8016a68:	d9cf      	bls.n	8016a0a <__hexnan+0x7a>
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a70:	2501      	movs	r5, #1
 8016a72:	3c04      	subs	r4, #4
 8016a74:	6822      	ldr	r2, [r4, #0]
 8016a76:	f000 000f 	and.w	r0, r0, #15
 8016a7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016a7e:	6020      	str	r0, [r4, #0]
 8016a80:	e7c3      	b.n	8016a0a <__hexnan+0x7a>
 8016a82:	2508      	movs	r5, #8
 8016a84:	e7c1      	b.n	8016a0a <__hexnan+0x7a>
 8016a86:	9b01      	ldr	r3, [sp, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d0df      	beq.n	8016a4c <__hexnan+0xbc>
 8016a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a90:	f1c3 0320 	rsb	r3, r3, #32
 8016a94:	fa22 f303 	lsr.w	r3, r2, r3
 8016a98:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016a9c:	401a      	ands	r2, r3
 8016a9e:	f847 2c04 	str.w	r2, [r7, #-4]
 8016aa2:	e7d3      	b.n	8016a4c <__hexnan+0xbc>
 8016aa4:	3e04      	subs	r6, #4
 8016aa6:	e7d1      	b.n	8016a4c <__hexnan+0xbc>
 8016aa8:	2004      	movs	r0, #4
 8016aaa:	b007      	add	sp, #28
 8016aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ab0 <__locale_ctype_ptr_l>:
 8016ab0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016ab4:	4770      	bx	lr
	...

08016ab8 <__locale_ctype_ptr>:
 8016ab8:	4b04      	ldr	r3, [pc, #16]	; (8016acc <__locale_ctype_ptr+0x14>)
 8016aba:	4a05      	ldr	r2, [pc, #20]	; (8016ad0 <__locale_ctype_ptr+0x18>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	6a1b      	ldr	r3, [r3, #32]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	bf08      	it	eq
 8016ac4:	4613      	moveq	r3, r2
 8016ac6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016aca:	4770      	bx	lr
 8016acc:	2000000c 	.word	0x2000000c
 8016ad0:	20000070 	.word	0x20000070

08016ad4 <__localeconv_l>:
 8016ad4:	30f0      	adds	r0, #240	; 0xf0
 8016ad6:	4770      	bx	lr

08016ad8 <_localeconv_r>:
 8016ad8:	4b04      	ldr	r3, [pc, #16]	; (8016aec <_localeconv_r+0x14>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	6a18      	ldr	r0, [r3, #32]
 8016ade:	4b04      	ldr	r3, [pc, #16]	; (8016af0 <_localeconv_r+0x18>)
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	bf08      	it	eq
 8016ae4:	4618      	moveq	r0, r3
 8016ae6:	30f0      	adds	r0, #240	; 0xf0
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	2000000c 	.word	0x2000000c
 8016af0:	20000070 	.word	0x20000070

08016af4 <_lseek_r>:
 8016af4:	b538      	push	{r3, r4, r5, lr}
 8016af6:	4c07      	ldr	r4, [pc, #28]	; (8016b14 <_lseek_r+0x20>)
 8016af8:	4605      	mov	r5, r0
 8016afa:	4608      	mov	r0, r1
 8016afc:	4611      	mov	r1, r2
 8016afe:	2200      	movs	r2, #0
 8016b00:	6022      	str	r2, [r4, #0]
 8016b02:	461a      	mov	r2, r3
 8016b04:	f7ef fbd6 	bl	80062b4 <_lseek>
 8016b08:	1c43      	adds	r3, r0, #1
 8016b0a:	d102      	bne.n	8016b12 <_lseek_r+0x1e>
 8016b0c:	6823      	ldr	r3, [r4, #0]
 8016b0e:	b103      	cbz	r3, 8016b12 <_lseek_r+0x1e>
 8016b10:	602b      	str	r3, [r5, #0]
 8016b12:	bd38      	pop	{r3, r4, r5, pc}
 8016b14:	20037fc4 	.word	0x20037fc4

08016b18 <__swhatbuf_r>:
 8016b18:	b570      	push	{r4, r5, r6, lr}
 8016b1a:	460e      	mov	r6, r1
 8016b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b20:	2900      	cmp	r1, #0
 8016b22:	b096      	sub	sp, #88	; 0x58
 8016b24:	4614      	mov	r4, r2
 8016b26:	461d      	mov	r5, r3
 8016b28:	da07      	bge.n	8016b3a <__swhatbuf_r+0x22>
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	602b      	str	r3, [r5, #0]
 8016b2e:	89b3      	ldrh	r3, [r6, #12]
 8016b30:	061a      	lsls	r2, r3, #24
 8016b32:	d410      	bmi.n	8016b56 <__swhatbuf_r+0x3e>
 8016b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b38:	e00e      	b.n	8016b58 <__swhatbuf_r+0x40>
 8016b3a:	466a      	mov	r2, sp
 8016b3c:	f001 fc24 	bl	8018388 <_fstat_r>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	dbf2      	blt.n	8016b2a <__swhatbuf_r+0x12>
 8016b44:	9a01      	ldr	r2, [sp, #4]
 8016b46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b4e:	425a      	negs	r2, r3
 8016b50:	415a      	adcs	r2, r3
 8016b52:	602a      	str	r2, [r5, #0]
 8016b54:	e7ee      	b.n	8016b34 <__swhatbuf_r+0x1c>
 8016b56:	2340      	movs	r3, #64	; 0x40
 8016b58:	2000      	movs	r0, #0
 8016b5a:	6023      	str	r3, [r4, #0]
 8016b5c:	b016      	add	sp, #88	; 0x58
 8016b5e:	bd70      	pop	{r4, r5, r6, pc}

08016b60 <__smakebuf_r>:
 8016b60:	898b      	ldrh	r3, [r1, #12]
 8016b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b64:	079d      	lsls	r5, r3, #30
 8016b66:	4606      	mov	r6, r0
 8016b68:	460c      	mov	r4, r1
 8016b6a:	d507      	bpl.n	8016b7c <__smakebuf_r+0x1c>
 8016b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b70:	6023      	str	r3, [r4, #0]
 8016b72:	6123      	str	r3, [r4, #16]
 8016b74:	2301      	movs	r3, #1
 8016b76:	6163      	str	r3, [r4, #20]
 8016b78:	b002      	add	sp, #8
 8016b7a:	bd70      	pop	{r4, r5, r6, pc}
 8016b7c:	ab01      	add	r3, sp, #4
 8016b7e:	466a      	mov	r2, sp
 8016b80:	f7ff ffca 	bl	8016b18 <__swhatbuf_r>
 8016b84:	9900      	ldr	r1, [sp, #0]
 8016b86:	4605      	mov	r5, r0
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f000 fc9f 	bl	80174cc <_malloc_r>
 8016b8e:	b948      	cbnz	r0, 8016ba4 <__smakebuf_r+0x44>
 8016b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b94:	059a      	lsls	r2, r3, #22
 8016b96:	d4ef      	bmi.n	8016b78 <__smakebuf_r+0x18>
 8016b98:	f023 0303 	bic.w	r3, r3, #3
 8016b9c:	f043 0302 	orr.w	r3, r3, #2
 8016ba0:	81a3      	strh	r3, [r4, #12]
 8016ba2:	e7e3      	b.n	8016b6c <__smakebuf_r+0xc>
 8016ba4:	4b0d      	ldr	r3, [pc, #52]	; (8016bdc <__smakebuf_r+0x7c>)
 8016ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	6020      	str	r0, [r4, #0]
 8016bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bb0:	81a3      	strh	r3, [r4, #12]
 8016bb2:	9b00      	ldr	r3, [sp, #0]
 8016bb4:	6163      	str	r3, [r4, #20]
 8016bb6:	9b01      	ldr	r3, [sp, #4]
 8016bb8:	6120      	str	r0, [r4, #16]
 8016bba:	b15b      	cbz	r3, 8016bd4 <__smakebuf_r+0x74>
 8016bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bc0:	4630      	mov	r0, r6
 8016bc2:	f001 fbf3 	bl	80183ac <_isatty_r>
 8016bc6:	b128      	cbz	r0, 8016bd4 <__smakebuf_r+0x74>
 8016bc8:	89a3      	ldrh	r3, [r4, #12]
 8016bca:	f023 0303 	bic.w	r3, r3, #3
 8016bce:	f043 0301 	orr.w	r3, r3, #1
 8016bd2:	81a3      	strh	r3, [r4, #12]
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	431d      	orrs	r5, r3
 8016bd8:	81a5      	strh	r5, [r4, #12]
 8016bda:	e7cd      	b.n	8016b78 <__smakebuf_r+0x18>
 8016bdc:	08016319 	.word	0x08016319

08016be0 <malloc>:
 8016be0:	4b02      	ldr	r3, [pc, #8]	; (8016bec <malloc+0xc>)
 8016be2:	4601      	mov	r1, r0
 8016be4:	6818      	ldr	r0, [r3, #0]
 8016be6:	f000 bc71 	b.w	80174cc <_malloc_r>
 8016bea:	bf00      	nop
 8016bec:	2000000c 	.word	0x2000000c

08016bf0 <__ascii_mbtowc>:
 8016bf0:	b082      	sub	sp, #8
 8016bf2:	b901      	cbnz	r1, 8016bf6 <__ascii_mbtowc+0x6>
 8016bf4:	a901      	add	r1, sp, #4
 8016bf6:	b142      	cbz	r2, 8016c0a <__ascii_mbtowc+0x1a>
 8016bf8:	b14b      	cbz	r3, 8016c0e <__ascii_mbtowc+0x1e>
 8016bfa:	7813      	ldrb	r3, [r2, #0]
 8016bfc:	600b      	str	r3, [r1, #0]
 8016bfe:	7812      	ldrb	r2, [r2, #0]
 8016c00:	1c10      	adds	r0, r2, #0
 8016c02:	bf18      	it	ne
 8016c04:	2001      	movne	r0, #1
 8016c06:	b002      	add	sp, #8
 8016c08:	4770      	bx	lr
 8016c0a:	4610      	mov	r0, r2
 8016c0c:	e7fb      	b.n	8016c06 <__ascii_mbtowc+0x16>
 8016c0e:	f06f 0001 	mvn.w	r0, #1
 8016c12:	e7f8      	b.n	8016c06 <__ascii_mbtowc+0x16>

08016c14 <_Balloc>:
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016c18:	4604      	mov	r4, r0
 8016c1a:	460e      	mov	r6, r1
 8016c1c:	b93d      	cbnz	r5, 8016c2e <_Balloc+0x1a>
 8016c1e:	2010      	movs	r0, #16
 8016c20:	f7ff ffde 	bl	8016be0 <malloc>
 8016c24:	6260      	str	r0, [r4, #36]	; 0x24
 8016c26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016c2a:	6005      	str	r5, [r0, #0]
 8016c2c:	60c5      	str	r5, [r0, #12]
 8016c2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016c30:	68eb      	ldr	r3, [r5, #12]
 8016c32:	b183      	cbz	r3, 8016c56 <_Balloc+0x42>
 8016c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c36:	68db      	ldr	r3, [r3, #12]
 8016c38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016c3c:	b9b8      	cbnz	r0, 8016c6e <_Balloc+0x5a>
 8016c3e:	2101      	movs	r1, #1
 8016c40:	fa01 f506 	lsl.w	r5, r1, r6
 8016c44:	1d6a      	adds	r2, r5, #5
 8016c46:	0092      	lsls	r2, r2, #2
 8016c48:	4620      	mov	r0, r4
 8016c4a:	f000 fbe2 	bl	8017412 <_calloc_r>
 8016c4e:	b160      	cbz	r0, 8016c6a <_Balloc+0x56>
 8016c50:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016c54:	e00e      	b.n	8016c74 <_Balloc+0x60>
 8016c56:	2221      	movs	r2, #33	; 0x21
 8016c58:	2104      	movs	r1, #4
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	f000 fbd9 	bl	8017412 <_calloc_r>
 8016c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c62:	60e8      	str	r0, [r5, #12]
 8016c64:	68db      	ldr	r3, [r3, #12]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d1e4      	bne.n	8016c34 <_Balloc+0x20>
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	bd70      	pop	{r4, r5, r6, pc}
 8016c6e:	6802      	ldr	r2, [r0, #0]
 8016c70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016c74:	2300      	movs	r3, #0
 8016c76:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016c7a:	e7f7      	b.n	8016c6c <_Balloc+0x58>

08016c7c <_Bfree>:
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016c80:	4606      	mov	r6, r0
 8016c82:	460d      	mov	r5, r1
 8016c84:	b93c      	cbnz	r4, 8016c96 <_Bfree+0x1a>
 8016c86:	2010      	movs	r0, #16
 8016c88:	f7ff ffaa 	bl	8016be0 <malloc>
 8016c8c:	6270      	str	r0, [r6, #36]	; 0x24
 8016c8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c92:	6004      	str	r4, [r0, #0]
 8016c94:	60c4      	str	r4, [r0, #12]
 8016c96:	b13d      	cbz	r5, 8016ca8 <_Bfree+0x2c>
 8016c98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016c9a:	686a      	ldr	r2, [r5, #4]
 8016c9c:	68db      	ldr	r3, [r3, #12]
 8016c9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ca2:	6029      	str	r1, [r5, #0]
 8016ca4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016ca8:	bd70      	pop	{r4, r5, r6, pc}

08016caa <__multadd>:
 8016caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cae:	690d      	ldr	r5, [r1, #16]
 8016cb0:	461f      	mov	r7, r3
 8016cb2:	4606      	mov	r6, r0
 8016cb4:	460c      	mov	r4, r1
 8016cb6:	f101 0c14 	add.w	ip, r1, #20
 8016cba:	2300      	movs	r3, #0
 8016cbc:	f8dc 0000 	ldr.w	r0, [ip]
 8016cc0:	b281      	uxth	r1, r0
 8016cc2:	fb02 7101 	mla	r1, r2, r1, r7
 8016cc6:	0c0f      	lsrs	r7, r1, #16
 8016cc8:	0c00      	lsrs	r0, r0, #16
 8016cca:	fb02 7000 	mla	r0, r2, r0, r7
 8016cce:	b289      	uxth	r1, r1
 8016cd0:	3301      	adds	r3, #1
 8016cd2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016cd6:	429d      	cmp	r5, r3
 8016cd8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016cdc:	f84c 1b04 	str.w	r1, [ip], #4
 8016ce0:	dcec      	bgt.n	8016cbc <__multadd+0x12>
 8016ce2:	b1d7      	cbz	r7, 8016d1a <__multadd+0x70>
 8016ce4:	68a3      	ldr	r3, [r4, #8]
 8016ce6:	42ab      	cmp	r3, r5
 8016ce8:	dc12      	bgt.n	8016d10 <__multadd+0x66>
 8016cea:	6861      	ldr	r1, [r4, #4]
 8016cec:	4630      	mov	r0, r6
 8016cee:	3101      	adds	r1, #1
 8016cf0:	f7ff ff90 	bl	8016c14 <_Balloc>
 8016cf4:	6922      	ldr	r2, [r4, #16]
 8016cf6:	3202      	adds	r2, #2
 8016cf8:	f104 010c 	add.w	r1, r4, #12
 8016cfc:	4680      	mov	r8, r0
 8016cfe:	0092      	lsls	r2, r2, #2
 8016d00:	300c      	adds	r0, #12
 8016d02:	f7fc fc8d 	bl	8013620 <memcpy>
 8016d06:	4621      	mov	r1, r4
 8016d08:	4630      	mov	r0, r6
 8016d0a:	f7ff ffb7 	bl	8016c7c <_Bfree>
 8016d0e:	4644      	mov	r4, r8
 8016d10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016d14:	3501      	adds	r5, #1
 8016d16:	615f      	str	r7, [r3, #20]
 8016d18:	6125      	str	r5, [r4, #16]
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d20 <__s2b>:
 8016d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d24:	460c      	mov	r4, r1
 8016d26:	4615      	mov	r5, r2
 8016d28:	461f      	mov	r7, r3
 8016d2a:	2209      	movs	r2, #9
 8016d2c:	3308      	adds	r3, #8
 8016d2e:	4606      	mov	r6, r0
 8016d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8016d34:	2100      	movs	r1, #0
 8016d36:	2201      	movs	r2, #1
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	db20      	blt.n	8016d7e <__s2b+0x5e>
 8016d3c:	4630      	mov	r0, r6
 8016d3e:	f7ff ff69 	bl	8016c14 <_Balloc>
 8016d42:	9b08      	ldr	r3, [sp, #32]
 8016d44:	6143      	str	r3, [r0, #20]
 8016d46:	2d09      	cmp	r5, #9
 8016d48:	f04f 0301 	mov.w	r3, #1
 8016d4c:	6103      	str	r3, [r0, #16]
 8016d4e:	dd19      	ble.n	8016d84 <__s2b+0x64>
 8016d50:	f104 0809 	add.w	r8, r4, #9
 8016d54:	46c1      	mov	r9, r8
 8016d56:	442c      	add	r4, r5
 8016d58:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016d5c:	4601      	mov	r1, r0
 8016d5e:	3b30      	subs	r3, #48	; 0x30
 8016d60:	220a      	movs	r2, #10
 8016d62:	4630      	mov	r0, r6
 8016d64:	f7ff ffa1 	bl	8016caa <__multadd>
 8016d68:	45a1      	cmp	r9, r4
 8016d6a:	d1f5      	bne.n	8016d58 <__s2b+0x38>
 8016d6c:	eb08 0405 	add.w	r4, r8, r5
 8016d70:	3c08      	subs	r4, #8
 8016d72:	1b2d      	subs	r5, r5, r4
 8016d74:	1963      	adds	r3, r4, r5
 8016d76:	42bb      	cmp	r3, r7
 8016d78:	db07      	blt.n	8016d8a <__s2b+0x6a>
 8016d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d7e:	0052      	lsls	r2, r2, #1
 8016d80:	3101      	adds	r1, #1
 8016d82:	e7d9      	b.n	8016d38 <__s2b+0x18>
 8016d84:	340a      	adds	r4, #10
 8016d86:	2509      	movs	r5, #9
 8016d88:	e7f3      	b.n	8016d72 <__s2b+0x52>
 8016d8a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016d8e:	4601      	mov	r1, r0
 8016d90:	3b30      	subs	r3, #48	; 0x30
 8016d92:	220a      	movs	r2, #10
 8016d94:	4630      	mov	r0, r6
 8016d96:	f7ff ff88 	bl	8016caa <__multadd>
 8016d9a:	e7eb      	b.n	8016d74 <__s2b+0x54>

08016d9c <__hi0bits>:
 8016d9c:	0c02      	lsrs	r2, r0, #16
 8016d9e:	0412      	lsls	r2, r2, #16
 8016da0:	4603      	mov	r3, r0
 8016da2:	b9b2      	cbnz	r2, 8016dd2 <__hi0bits+0x36>
 8016da4:	0403      	lsls	r3, r0, #16
 8016da6:	2010      	movs	r0, #16
 8016da8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016dac:	bf04      	itt	eq
 8016dae:	021b      	lsleq	r3, r3, #8
 8016db0:	3008      	addeq	r0, #8
 8016db2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016db6:	bf04      	itt	eq
 8016db8:	011b      	lsleq	r3, r3, #4
 8016dba:	3004      	addeq	r0, #4
 8016dbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016dc0:	bf04      	itt	eq
 8016dc2:	009b      	lsleq	r3, r3, #2
 8016dc4:	3002      	addeq	r0, #2
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	db06      	blt.n	8016dd8 <__hi0bits+0x3c>
 8016dca:	005b      	lsls	r3, r3, #1
 8016dcc:	d503      	bpl.n	8016dd6 <__hi0bits+0x3a>
 8016dce:	3001      	adds	r0, #1
 8016dd0:	4770      	bx	lr
 8016dd2:	2000      	movs	r0, #0
 8016dd4:	e7e8      	b.n	8016da8 <__hi0bits+0xc>
 8016dd6:	2020      	movs	r0, #32
 8016dd8:	4770      	bx	lr

08016dda <__lo0bits>:
 8016dda:	6803      	ldr	r3, [r0, #0]
 8016ddc:	f013 0207 	ands.w	r2, r3, #7
 8016de0:	4601      	mov	r1, r0
 8016de2:	d00b      	beq.n	8016dfc <__lo0bits+0x22>
 8016de4:	07da      	lsls	r2, r3, #31
 8016de6:	d423      	bmi.n	8016e30 <__lo0bits+0x56>
 8016de8:	0798      	lsls	r0, r3, #30
 8016dea:	bf49      	itett	mi
 8016dec:	085b      	lsrmi	r3, r3, #1
 8016dee:	089b      	lsrpl	r3, r3, #2
 8016df0:	2001      	movmi	r0, #1
 8016df2:	600b      	strmi	r3, [r1, #0]
 8016df4:	bf5c      	itt	pl
 8016df6:	600b      	strpl	r3, [r1, #0]
 8016df8:	2002      	movpl	r0, #2
 8016dfa:	4770      	bx	lr
 8016dfc:	b298      	uxth	r0, r3
 8016dfe:	b9a8      	cbnz	r0, 8016e2c <__lo0bits+0x52>
 8016e00:	0c1b      	lsrs	r3, r3, #16
 8016e02:	2010      	movs	r0, #16
 8016e04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016e08:	bf04      	itt	eq
 8016e0a:	0a1b      	lsreq	r3, r3, #8
 8016e0c:	3008      	addeq	r0, #8
 8016e0e:	071a      	lsls	r2, r3, #28
 8016e10:	bf04      	itt	eq
 8016e12:	091b      	lsreq	r3, r3, #4
 8016e14:	3004      	addeq	r0, #4
 8016e16:	079a      	lsls	r2, r3, #30
 8016e18:	bf04      	itt	eq
 8016e1a:	089b      	lsreq	r3, r3, #2
 8016e1c:	3002      	addeq	r0, #2
 8016e1e:	07da      	lsls	r2, r3, #31
 8016e20:	d402      	bmi.n	8016e28 <__lo0bits+0x4e>
 8016e22:	085b      	lsrs	r3, r3, #1
 8016e24:	d006      	beq.n	8016e34 <__lo0bits+0x5a>
 8016e26:	3001      	adds	r0, #1
 8016e28:	600b      	str	r3, [r1, #0]
 8016e2a:	4770      	bx	lr
 8016e2c:	4610      	mov	r0, r2
 8016e2e:	e7e9      	b.n	8016e04 <__lo0bits+0x2a>
 8016e30:	2000      	movs	r0, #0
 8016e32:	4770      	bx	lr
 8016e34:	2020      	movs	r0, #32
 8016e36:	4770      	bx	lr

08016e38 <__i2b>:
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	2101      	movs	r1, #1
 8016e3e:	f7ff fee9 	bl	8016c14 <_Balloc>
 8016e42:	2201      	movs	r2, #1
 8016e44:	6144      	str	r4, [r0, #20]
 8016e46:	6102      	str	r2, [r0, #16]
 8016e48:	bd10      	pop	{r4, pc}

08016e4a <__multiply>:
 8016e4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e4e:	4614      	mov	r4, r2
 8016e50:	690a      	ldr	r2, [r1, #16]
 8016e52:	6923      	ldr	r3, [r4, #16]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	bfb8      	it	lt
 8016e58:	460b      	movlt	r3, r1
 8016e5a:	4688      	mov	r8, r1
 8016e5c:	bfbc      	itt	lt
 8016e5e:	46a0      	movlt	r8, r4
 8016e60:	461c      	movlt	r4, r3
 8016e62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016e66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016e72:	eb07 0609 	add.w	r6, r7, r9
 8016e76:	42b3      	cmp	r3, r6
 8016e78:	bfb8      	it	lt
 8016e7a:	3101      	addlt	r1, #1
 8016e7c:	f7ff feca 	bl	8016c14 <_Balloc>
 8016e80:	f100 0514 	add.w	r5, r0, #20
 8016e84:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016e88:	462b      	mov	r3, r5
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	4573      	cmp	r3, lr
 8016e8e:	d316      	bcc.n	8016ebe <__multiply+0x74>
 8016e90:	f104 0214 	add.w	r2, r4, #20
 8016e94:	f108 0114 	add.w	r1, r8, #20
 8016e98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016e9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	9b00      	ldr	r3, [sp, #0]
 8016ea4:	9201      	str	r2, [sp, #4]
 8016ea6:	4293      	cmp	r3, r2
 8016ea8:	d80c      	bhi.n	8016ec4 <__multiply+0x7a>
 8016eaa:	2e00      	cmp	r6, #0
 8016eac:	dd03      	ble.n	8016eb6 <__multiply+0x6c>
 8016eae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d05d      	beq.n	8016f72 <__multiply+0x128>
 8016eb6:	6106      	str	r6, [r0, #16]
 8016eb8:	b003      	add	sp, #12
 8016eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ebe:	f843 2b04 	str.w	r2, [r3], #4
 8016ec2:	e7e3      	b.n	8016e8c <__multiply+0x42>
 8016ec4:	f8b2 b000 	ldrh.w	fp, [r2]
 8016ec8:	f1bb 0f00 	cmp.w	fp, #0
 8016ecc:	d023      	beq.n	8016f16 <__multiply+0xcc>
 8016ece:	4689      	mov	r9, r1
 8016ed0:	46ac      	mov	ip, r5
 8016ed2:	f04f 0800 	mov.w	r8, #0
 8016ed6:	f859 4b04 	ldr.w	r4, [r9], #4
 8016eda:	f8dc a000 	ldr.w	sl, [ip]
 8016ede:	b2a3      	uxth	r3, r4
 8016ee0:	fa1f fa8a 	uxth.w	sl, sl
 8016ee4:	fb0b a303 	mla	r3, fp, r3, sl
 8016ee8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016eec:	f8dc 4000 	ldr.w	r4, [ip]
 8016ef0:	4443      	add	r3, r8
 8016ef2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016ef6:	fb0b 840a 	mla	r4, fp, sl, r8
 8016efa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016efe:	46e2      	mov	sl, ip
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016f06:	454f      	cmp	r7, r9
 8016f08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016f0c:	f84a 3b04 	str.w	r3, [sl], #4
 8016f10:	d82b      	bhi.n	8016f6a <__multiply+0x120>
 8016f12:	f8cc 8004 	str.w	r8, [ip, #4]
 8016f16:	9b01      	ldr	r3, [sp, #4]
 8016f18:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016f1c:	3204      	adds	r2, #4
 8016f1e:	f1ba 0f00 	cmp.w	sl, #0
 8016f22:	d020      	beq.n	8016f66 <__multiply+0x11c>
 8016f24:	682b      	ldr	r3, [r5, #0]
 8016f26:	4689      	mov	r9, r1
 8016f28:	46a8      	mov	r8, r5
 8016f2a:	f04f 0b00 	mov.w	fp, #0
 8016f2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016f32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016f36:	fb0a 440c 	mla	r4, sl, ip, r4
 8016f3a:	445c      	add	r4, fp
 8016f3c:	46c4      	mov	ip, r8
 8016f3e:	b29b      	uxth	r3, r3
 8016f40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016f44:	f84c 3b04 	str.w	r3, [ip], #4
 8016f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8016f4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016f50:	0c1b      	lsrs	r3, r3, #16
 8016f52:	fb0a b303 	mla	r3, sl, r3, fp
 8016f56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016f5a:	454f      	cmp	r7, r9
 8016f5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016f60:	d805      	bhi.n	8016f6e <__multiply+0x124>
 8016f62:	f8c8 3004 	str.w	r3, [r8, #4]
 8016f66:	3504      	adds	r5, #4
 8016f68:	e79b      	b.n	8016ea2 <__multiply+0x58>
 8016f6a:	46d4      	mov	ip, sl
 8016f6c:	e7b3      	b.n	8016ed6 <__multiply+0x8c>
 8016f6e:	46e0      	mov	r8, ip
 8016f70:	e7dd      	b.n	8016f2e <__multiply+0xe4>
 8016f72:	3e01      	subs	r6, #1
 8016f74:	e799      	b.n	8016eaa <__multiply+0x60>
	...

08016f78 <__pow5mult>:
 8016f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f7c:	4615      	mov	r5, r2
 8016f7e:	f012 0203 	ands.w	r2, r2, #3
 8016f82:	4606      	mov	r6, r0
 8016f84:	460f      	mov	r7, r1
 8016f86:	d007      	beq.n	8016f98 <__pow5mult+0x20>
 8016f88:	3a01      	subs	r2, #1
 8016f8a:	4c21      	ldr	r4, [pc, #132]	; (8017010 <__pow5mult+0x98>)
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016f92:	f7ff fe8a 	bl	8016caa <__multadd>
 8016f96:	4607      	mov	r7, r0
 8016f98:	10ad      	asrs	r5, r5, #2
 8016f9a:	d035      	beq.n	8017008 <__pow5mult+0x90>
 8016f9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016f9e:	b93c      	cbnz	r4, 8016fb0 <__pow5mult+0x38>
 8016fa0:	2010      	movs	r0, #16
 8016fa2:	f7ff fe1d 	bl	8016be0 <malloc>
 8016fa6:	6270      	str	r0, [r6, #36]	; 0x24
 8016fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016fac:	6004      	str	r4, [r0, #0]
 8016fae:	60c4      	str	r4, [r0, #12]
 8016fb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016fb8:	b94c      	cbnz	r4, 8016fce <__pow5mult+0x56>
 8016fba:	f240 2171 	movw	r1, #625	; 0x271
 8016fbe:	4630      	mov	r0, r6
 8016fc0:	f7ff ff3a 	bl	8016e38 <__i2b>
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016fca:	4604      	mov	r4, r0
 8016fcc:	6003      	str	r3, [r0, #0]
 8016fce:	f04f 0800 	mov.w	r8, #0
 8016fd2:	07eb      	lsls	r3, r5, #31
 8016fd4:	d50a      	bpl.n	8016fec <__pow5mult+0x74>
 8016fd6:	4639      	mov	r1, r7
 8016fd8:	4622      	mov	r2, r4
 8016fda:	4630      	mov	r0, r6
 8016fdc:	f7ff ff35 	bl	8016e4a <__multiply>
 8016fe0:	4639      	mov	r1, r7
 8016fe2:	4681      	mov	r9, r0
 8016fe4:	4630      	mov	r0, r6
 8016fe6:	f7ff fe49 	bl	8016c7c <_Bfree>
 8016fea:	464f      	mov	r7, r9
 8016fec:	106d      	asrs	r5, r5, #1
 8016fee:	d00b      	beq.n	8017008 <__pow5mult+0x90>
 8016ff0:	6820      	ldr	r0, [r4, #0]
 8016ff2:	b938      	cbnz	r0, 8017004 <__pow5mult+0x8c>
 8016ff4:	4622      	mov	r2, r4
 8016ff6:	4621      	mov	r1, r4
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	f7ff ff26 	bl	8016e4a <__multiply>
 8016ffe:	6020      	str	r0, [r4, #0]
 8017000:	f8c0 8000 	str.w	r8, [r0]
 8017004:	4604      	mov	r4, r0
 8017006:	e7e4      	b.n	8016fd2 <__pow5mult+0x5a>
 8017008:	4638      	mov	r0, r7
 801700a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801700e:	bf00      	nop
 8017010:	08018e60 	.word	0x08018e60

08017014 <__lshift>:
 8017014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017018:	460c      	mov	r4, r1
 801701a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801701e:	6923      	ldr	r3, [r4, #16]
 8017020:	6849      	ldr	r1, [r1, #4]
 8017022:	eb0a 0903 	add.w	r9, sl, r3
 8017026:	68a3      	ldr	r3, [r4, #8]
 8017028:	4607      	mov	r7, r0
 801702a:	4616      	mov	r6, r2
 801702c:	f109 0501 	add.w	r5, r9, #1
 8017030:	42ab      	cmp	r3, r5
 8017032:	db32      	blt.n	801709a <__lshift+0x86>
 8017034:	4638      	mov	r0, r7
 8017036:	f7ff fded 	bl	8016c14 <_Balloc>
 801703a:	2300      	movs	r3, #0
 801703c:	4680      	mov	r8, r0
 801703e:	f100 0114 	add.w	r1, r0, #20
 8017042:	461a      	mov	r2, r3
 8017044:	4553      	cmp	r3, sl
 8017046:	db2b      	blt.n	80170a0 <__lshift+0x8c>
 8017048:	6920      	ldr	r0, [r4, #16]
 801704a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801704e:	f104 0314 	add.w	r3, r4, #20
 8017052:	f016 021f 	ands.w	r2, r6, #31
 8017056:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801705a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801705e:	d025      	beq.n	80170ac <__lshift+0x98>
 8017060:	f1c2 0e20 	rsb	lr, r2, #32
 8017064:	2000      	movs	r0, #0
 8017066:	681e      	ldr	r6, [r3, #0]
 8017068:	468a      	mov	sl, r1
 801706a:	4096      	lsls	r6, r2
 801706c:	4330      	orrs	r0, r6
 801706e:	f84a 0b04 	str.w	r0, [sl], #4
 8017072:	f853 0b04 	ldr.w	r0, [r3], #4
 8017076:	459c      	cmp	ip, r3
 8017078:	fa20 f00e 	lsr.w	r0, r0, lr
 801707c:	d814      	bhi.n	80170a8 <__lshift+0x94>
 801707e:	6048      	str	r0, [r1, #4]
 8017080:	b108      	cbz	r0, 8017086 <__lshift+0x72>
 8017082:	f109 0502 	add.w	r5, r9, #2
 8017086:	3d01      	subs	r5, #1
 8017088:	4638      	mov	r0, r7
 801708a:	f8c8 5010 	str.w	r5, [r8, #16]
 801708e:	4621      	mov	r1, r4
 8017090:	f7ff fdf4 	bl	8016c7c <_Bfree>
 8017094:	4640      	mov	r0, r8
 8017096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801709a:	3101      	adds	r1, #1
 801709c:	005b      	lsls	r3, r3, #1
 801709e:	e7c7      	b.n	8017030 <__lshift+0x1c>
 80170a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80170a4:	3301      	adds	r3, #1
 80170a6:	e7cd      	b.n	8017044 <__lshift+0x30>
 80170a8:	4651      	mov	r1, sl
 80170aa:	e7dc      	b.n	8017066 <__lshift+0x52>
 80170ac:	3904      	subs	r1, #4
 80170ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80170b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80170b6:	459c      	cmp	ip, r3
 80170b8:	d8f9      	bhi.n	80170ae <__lshift+0x9a>
 80170ba:	e7e4      	b.n	8017086 <__lshift+0x72>

080170bc <__mcmp>:
 80170bc:	6903      	ldr	r3, [r0, #16]
 80170be:	690a      	ldr	r2, [r1, #16]
 80170c0:	1a9b      	subs	r3, r3, r2
 80170c2:	b530      	push	{r4, r5, lr}
 80170c4:	d10c      	bne.n	80170e0 <__mcmp+0x24>
 80170c6:	0092      	lsls	r2, r2, #2
 80170c8:	3014      	adds	r0, #20
 80170ca:	3114      	adds	r1, #20
 80170cc:	1884      	adds	r4, r0, r2
 80170ce:	4411      	add	r1, r2
 80170d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80170d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80170d8:	4295      	cmp	r5, r2
 80170da:	d003      	beq.n	80170e4 <__mcmp+0x28>
 80170dc:	d305      	bcc.n	80170ea <__mcmp+0x2e>
 80170de:	2301      	movs	r3, #1
 80170e0:	4618      	mov	r0, r3
 80170e2:	bd30      	pop	{r4, r5, pc}
 80170e4:	42a0      	cmp	r0, r4
 80170e6:	d3f3      	bcc.n	80170d0 <__mcmp+0x14>
 80170e8:	e7fa      	b.n	80170e0 <__mcmp+0x24>
 80170ea:	f04f 33ff 	mov.w	r3, #4294967295
 80170ee:	e7f7      	b.n	80170e0 <__mcmp+0x24>

080170f0 <__mdiff>:
 80170f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170f4:	460d      	mov	r5, r1
 80170f6:	4607      	mov	r7, r0
 80170f8:	4611      	mov	r1, r2
 80170fa:	4628      	mov	r0, r5
 80170fc:	4614      	mov	r4, r2
 80170fe:	f7ff ffdd 	bl	80170bc <__mcmp>
 8017102:	1e06      	subs	r6, r0, #0
 8017104:	d108      	bne.n	8017118 <__mdiff+0x28>
 8017106:	4631      	mov	r1, r6
 8017108:	4638      	mov	r0, r7
 801710a:	f7ff fd83 	bl	8016c14 <_Balloc>
 801710e:	2301      	movs	r3, #1
 8017110:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017118:	bfa4      	itt	ge
 801711a:	4623      	movge	r3, r4
 801711c:	462c      	movge	r4, r5
 801711e:	4638      	mov	r0, r7
 8017120:	6861      	ldr	r1, [r4, #4]
 8017122:	bfa6      	itte	ge
 8017124:	461d      	movge	r5, r3
 8017126:	2600      	movge	r6, #0
 8017128:	2601      	movlt	r6, #1
 801712a:	f7ff fd73 	bl	8016c14 <_Balloc>
 801712e:	692b      	ldr	r3, [r5, #16]
 8017130:	60c6      	str	r6, [r0, #12]
 8017132:	6926      	ldr	r6, [r4, #16]
 8017134:	f105 0914 	add.w	r9, r5, #20
 8017138:	f104 0214 	add.w	r2, r4, #20
 801713c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017140:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017144:	f100 0514 	add.w	r5, r0, #20
 8017148:	f04f 0e00 	mov.w	lr, #0
 801714c:	f852 ab04 	ldr.w	sl, [r2], #4
 8017150:	f859 4b04 	ldr.w	r4, [r9], #4
 8017154:	fa1e f18a 	uxtah	r1, lr, sl
 8017158:	b2a3      	uxth	r3, r4
 801715a:	1ac9      	subs	r1, r1, r3
 801715c:	0c23      	lsrs	r3, r4, #16
 801715e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017162:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017166:	b289      	uxth	r1, r1
 8017168:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801716c:	45c8      	cmp	r8, r9
 801716e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017172:	4694      	mov	ip, r2
 8017174:	f845 3b04 	str.w	r3, [r5], #4
 8017178:	d8e8      	bhi.n	801714c <__mdiff+0x5c>
 801717a:	45bc      	cmp	ip, r7
 801717c:	d304      	bcc.n	8017188 <__mdiff+0x98>
 801717e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017182:	b183      	cbz	r3, 80171a6 <__mdiff+0xb6>
 8017184:	6106      	str	r6, [r0, #16]
 8017186:	e7c5      	b.n	8017114 <__mdiff+0x24>
 8017188:	f85c 1b04 	ldr.w	r1, [ip], #4
 801718c:	fa1e f381 	uxtah	r3, lr, r1
 8017190:	141a      	asrs	r2, r3, #16
 8017192:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017196:	b29b      	uxth	r3, r3
 8017198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801719c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80171a0:	f845 3b04 	str.w	r3, [r5], #4
 80171a4:	e7e9      	b.n	801717a <__mdiff+0x8a>
 80171a6:	3e01      	subs	r6, #1
 80171a8:	e7e9      	b.n	801717e <__mdiff+0x8e>
	...

080171ac <__ulp>:
 80171ac:	4b12      	ldr	r3, [pc, #72]	; (80171f8 <__ulp+0x4c>)
 80171ae:	ee10 2a90 	vmov	r2, s1
 80171b2:	401a      	ands	r2, r3
 80171b4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	dd04      	ble.n	80171c6 <__ulp+0x1a>
 80171bc:	2000      	movs	r0, #0
 80171be:	4619      	mov	r1, r3
 80171c0:	ec41 0b10 	vmov	d0, r0, r1
 80171c4:	4770      	bx	lr
 80171c6:	425b      	negs	r3, r3
 80171c8:	151b      	asrs	r3, r3, #20
 80171ca:	2b13      	cmp	r3, #19
 80171cc:	f04f 0000 	mov.w	r0, #0
 80171d0:	f04f 0100 	mov.w	r1, #0
 80171d4:	dc04      	bgt.n	80171e0 <__ulp+0x34>
 80171d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80171da:	fa42 f103 	asr.w	r1, r2, r3
 80171de:	e7ef      	b.n	80171c0 <__ulp+0x14>
 80171e0:	3b14      	subs	r3, #20
 80171e2:	2b1e      	cmp	r3, #30
 80171e4:	f04f 0201 	mov.w	r2, #1
 80171e8:	bfda      	itte	le
 80171ea:	f1c3 031f 	rsble	r3, r3, #31
 80171ee:	fa02 f303 	lslle.w	r3, r2, r3
 80171f2:	4613      	movgt	r3, r2
 80171f4:	4618      	mov	r0, r3
 80171f6:	e7e3      	b.n	80171c0 <__ulp+0x14>
 80171f8:	7ff00000 	.word	0x7ff00000

080171fc <__b2d>:
 80171fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fe:	6905      	ldr	r5, [r0, #16]
 8017200:	f100 0714 	add.w	r7, r0, #20
 8017204:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017208:	1f2e      	subs	r6, r5, #4
 801720a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801720e:	4620      	mov	r0, r4
 8017210:	f7ff fdc4 	bl	8016d9c <__hi0bits>
 8017214:	f1c0 0320 	rsb	r3, r0, #32
 8017218:	280a      	cmp	r0, #10
 801721a:	600b      	str	r3, [r1, #0]
 801721c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017294 <__b2d+0x98>
 8017220:	dc14      	bgt.n	801724c <__b2d+0x50>
 8017222:	f1c0 0e0b 	rsb	lr, r0, #11
 8017226:	fa24 f10e 	lsr.w	r1, r4, lr
 801722a:	42b7      	cmp	r7, r6
 801722c:	ea41 030c 	orr.w	r3, r1, ip
 8017230:	bf34      	ite	cc
 8017232:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017236:	2100      	movcs	r1, #0
 8017238:	3015      	adds	r0, #21
 801723a:	fa04 f000 	lsl.w	r0, r4, r0
 801723e:	fa21 f10e 	lsr.w	r1, r1, lr
 8017242:	ea40 0201 	orr.w	r2, r0, r1
 8017246:	ec43 2b10 	vmov	d0, r2, r3
 801724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801724c:	42b7      	cmp	r7, r6
 801724e:	bf3a      	itte	cc
 8017250:	f1a5 0608 	subcc.w	r6, r5, #8
 8017254:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017258:	2100      	movcs	r1, #0
 801725a:	380b      	subs	r0, #11
 801725c:	d015      	beq.n	801728a <__b2d+0x8e>
 801725e:	4084      	lsls	r4, r0
 8017260:	f1c0 0520 	rsb	r5, r0, #32
 8017264:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017268:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801726c:	42be      	cmp	r6, r7
 801726e:	fa21 fc05 	lsr.w	ip, r1, r5
 8017272:	ea44 030c 	orr.w	r3, r4, ip
 8017276:	bf8c      	ite	hi
 8017278:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801727c:	2400      	movls	r4, #0
 801727e:	fa01 f000 	lsl.w	r0, r1, r0
 8017282:	40ec      	lsrs	r4, r5
 8017284:	ea40 0204 	orr.w	r2, r0, r4
 8017288:	e7dd      	b.n	8017246 <__b2d+0x4a>
 801728a:	ea44 030c 	orr.w	r3, r4, ip
 801728e:	460a      	mov	r2, r1
 8017290:	e7d9      	b.n	8017246 <__b2d+0x4a>
 8017292:	bf00      	nop
 8017294:	3ff00000 	.word	0x3ff00000

08017298 <__d2b>:
 8017298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801729c:	460e      	mov	r6, r1
 801729e:	2101      	movs	r1, #1
 80172a0:	ec59 8b10 	vmov	r8, r9, d0
 80172a4:	4615      	mov	r5, r2
 80172a6:	f7ff fcb5 	bl	8016c14 <_Balloc>
 80172aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80172ae:	4607      	mov	r7, r0
 80172b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80172b4:	bb34      	cbnz	r4, 8017304 <__d2b+0x6c>
 80172b6:	9301      	str	r3, [sp, #4]
 80172b8:	f1b8 0300 	subs.w	r3, r8, #0
 80172bc:	d027      	beq.n	801730e <__d2b+0x76>
 80172be:	a802      	add	r0, sp, #8
 80172c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80172c4:	f7ff fd89 	bl	8016dda <__lo0bits>
 80172c8:	9900      	ldr	r1, [sp, #0]
 80172ca:	b1f0      	cbz	r0, 801730a <__d2b+0x72>
 80172cc:	9a01      	ldr	r2, [sp, #4]
 80172ce:	f1c0 0320 	rsb	r3, r0, #32
 80172d2:	fa02 f303 	lsl.w	r3, r2, r3
 80172d6:	430b      	orrs	r3, r1
 80172d8:	40c2      	lsrs	r2, r0
 80172da:	617b      	str	r3, [r7, #20]
 80172dc:	9201      	str	r2, [sp, #4]
 80172de:	9b01      	ldr	r3, [sp, #4]
 80172e0:	61bb      	str	r3, [r7, #24]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	bf14      	ite	ne
 80172e6:	2102      	movne	r1, #2
 80172e8:	2101      	moveq	r1, #1
 80172ea:	6139      	str	r1, [r7, #16]
 80172ec:	b1c4      	cbz	r4, 8017320 <__d2b+0x88>
 80172ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80172f2:	4404      	add	r4, r0
 80172f4:	6034      	str	r4, [r6, #0]
 80172f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80172fa:	6028      	str	r0, [r5, #0]
 80172fc:	4638      	mov	r0, r7
 80172fe:	b003      	add	sp, #12
 8017300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017308:	e7d5      	b.n	80172b6 <__d2b+0x1e>
 801730a:	6179      	str	r1, [r7, #20]
 801730c:	e7e7      	b.n	80172de <__d2b+0x46>
 801730e:	a801      	add	r0, sp, #4
 8017310:	f7ff fd63 	bl	8016dda <__lo0bits>
 8017314:	9b01      	ldr	r3, [sp, #4]
 8017316:	617b      	str	r3, [r7, #20]
 8017318:	2101      	movs	r1, #1
 801731a:	6139      	str	r1, [r7, #16]
 801731c:	3020      	adds	r0, #32
 801731e:	e7e5      	b.n	80172ec <__d2b+0x54>
 8017320:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017328:	6030      	str	r0, [r6, #0]
 801732a:	6918      	ldr	r0, [r3, #16]
 801732c:	f7ff fd36 	bl	8016d9c <__hi0bits>
 8017330:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017334:	e7e1      	b.n	80172fa <__d2b+0x62>

08017336 <__ratio>:
 8017336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801733a:	4688      	mov	r8, r1
 801733c:	4669      	mov	r1, sp
 801733e:	4681      	mov	r9, r0
 8017340:	f7ff ff5c 	bl	80171fc <__b2d>
 8017344:	a901      	add	r1, sp, #4
 8017346:	4640      	mov	r0, r8
 8017348:	ec57 6b10 	vmov	r6, r7, d0
 801734c:	f7ff ff56 	bl	80171fc <__b2d>
 8017350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017354:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017358:	eba3 0c02 	sub.w	ip, r3, r2
 801735c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017360:	1a9b      	subs	r3, r3, r2
 8017362:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017366:	ec5b ab10 	vmov	sl, fp, d0
 801736a:	2b00      	cmp	r3, #0
 801736c:	bfce      	itee	gt
 801736e:	463a      	movgt	r2, r7
 8017370:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017374:	465a      	movle	r2, fp
 8017376:	4659      	mov	r1, fp
 8017378:	463d      	mov	r5, r7
 801737a:	bfd4      	ite	le
 801737c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017380:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017384:	4630      	mov	r0, r6
 8017386:	ee10 2a10 	vmov	r2, s0
 801738a:	460b      	mov	r3, r1
 801738c:	4629      	mov	r1, r5
 801738e:	f7e9 fa75 	bl	800087c <__aeabi_ddiv>
 8017392:	ec41 0b10 	vmov	d0, r0, r1
 8017396:	b003      	add	sp, #12
 8017398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801739c <__copybits>:
 801739c:	3901      	subs	r1, #1
 801739e:	b510      	push	{r4, lr}
 80173a0:	1149      	asrs	r1, r1, #5
 80173a2:	6914      	ldr	r4, [r2, #16]
 80173a4:	3101      	adds	r1, #1
 80173a6:	f102 0314 	add.w	r3, r2, #20
 80173aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80173ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80173b2:	42a3      	cmp	r3, r4
 80173b4:	4602      	mov	r2, r0
 80173b6:	d303      	bcc.n	80173c0 <__copybits+0x24>
 80173b8:	2300      	movs	r3, #0
 80173ba:	428a      	cmp	r2, r1
 80173bc:	d305      	bcc.n	80173ca <__copybits+0x2e>
 80173be:	bd10      	pop	{r4, pc}
 80173c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80173c4:	f840 2b04 	str.w	r2, [r0], #4
 80173c8:	e7f3      	b.n	80173b2 <__copybits+0x16>
 80173ca:	f842 3b04 	str.w	r3, [r2], #4
 80173ce:	e7f4      	b.n	80173ba <__copybits+0x1e>

080173d0 <__any_on>:
 80173d0:	f100 0214 	add.w	r2, r0, #20
 80173d4:	6900      	ldr	r0, [r0, #16]
 80173d6:	114b      	asrs	r3, r1, #5
 80173d8:	4298      	cmp	r0, r3
 80173da:	b510      	push	{r4, lr}
 80173dc:	db11      	blt.n	8017402 <__any_on+0x32>
 80173de:	dd0a      	ble.n	80173f6 <__any_on+0x26>
 80173e0:	f011 011f 	ands.w	r1, r1, #31
 80173e4:	d007      	beq.n	80173f6 <__any_on+0x26>
 80173e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80173ea:	fa24 f001 	lsr.w	r0, r4, r1
 80173ee:	fa00 f101 	lsl.w	r1, r0, r1
 80173f2:	428c      	cmp	r4, r1
 80173f4:	d10b      	bne.n	801740e <__any_on+0x3e>
 80173f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d803      	bhi.n	8017406 <__any_on+0x36>
 80173fe:	2000      	movs	r0, #0
 8017400:	bd10      	pop	{r4, pc}
 8017402:	4603      	mov	r3, r0
 8017404:	e7f7      	b.n	80173f6 <__any_on+0x26>
 8017406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801740a:	2900      	cmp	r1, #0
 801740c:	d0f5      	beq.n	80173fa <__any_on+0x2a>
 801740e:	2001      	movs	r0, #1
 8017410:	e7f6      	b.n	8017400 <__any_on+0x30>

08017412 <_calloc_r>:
 8017412:	b538      	push	{r3, r4, r5, lr}
 8017414:	fb02 f401 	mul.w	r4, r2, r1
 8017418:	4621      	mov	r1, r4
 801741a:	f000 f857 	bl	80174cc <_malloc_r>
 801741e:	4605      	mov	r5, r0
 8017420:	b118      	cbz	r0, 801742a <_calloc_r+0x18>
 8017422:	4622      	mov	r2, r4
 8017424:	2100      	movs	r1, #0
 8017426:	f7fc f906 	bl	8013636 <memset>
 801742a:	4628      	mov	r0, r5
 801742c:	bd38      	pop	{r3, r4, r5, pc}
	...

08017430 <_free_r>:
 8017430:	b538      	push	{r3, r4, r5, lr}
 8017432:	4605      	mov	r5, r0
 8017434:	2900      	cmp	r1, #0
 8017436:	d045      	beq.n	80174c4 <_free_r+0x94>
 8017438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801743c:	1f0c      	subs	r4, r1, #4
 801743e:	2b00      	cmp	r3, #0
 8017440:	bfb8      	it	lt
 8017442:	18e4      	addlt	r4, r4, r3
 8017444:	f000 ffdb 	bl	80183fe <__malloc_lock>
 8017448:	4a1f      	ldr	r2, [pc, #124]	; (80174c8 <_free_r+0x98>)
 801744a:	6813      	ldr	r3, [r2, #0]
 801744c:	4610      	mov	r0, r2
 801744e:	b933      	cbnz	r3, 801745e <_free_r+0x2e>
 8017450:	6063      	str	r3, [r4, #4]
 8017452:	6014      	str	r4, [r2, #0]
 8017454:	4628      	mov	r0, r5
 8017456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801745a:	f000 bfd1 	b.w	8018400 <__malloc_unlock>
 801745e:	42a3      	cmp	r3, r4
 8017460:	d90c      	bls.n	801747c <_free_r+0x4c>
 8017462:	6821      	ldr	r1, [r4, #0]
 8017464:	1862      	adds	r2, r4, r1
 8017466:	4293      	cmp	r3, r2
 8017468:	bf04      	itt	eq
 801746a:	681a      	ldreq	r2, [r3, #0]
 801746c:	685b      	ldreq	r3, [r3, #4]
 801746e:	6063      	str	r3, [r4, #4]
 8017470:	bf04      	itt	eq
 8017472:	1852      	addeq	r2, r2, r1
 8017474:	6022      	streq	r2, [r4, #0]
 8017476:	6004      	str	r4, [r0, #0]
 8017478:	e7ec      	b.n	8017454 <_free_r+0x24>
 801747a:	4613      	mov	r3, r2
 801747c:	685a      	ldr	r2, [r3, #4]
 801747e:	b10a      	cbz	r2, 8017484 <_free_r+0x54>
 8017480:	42a2      	cmp	r2, r4
 8017482:	d9fa      	bls.n	801747a <_free_r+0x4a>
 8017484:	6819      	ldr	r1, [r3, #0]
 8017486:	1858      	adds	r0, r3, r1
 8017488:	42a0      	cmp	r0, r4
 801748a:	d10b      	bne.n	80174a4 <_free_r+0x74>
 801748c:	6820      	ldr	r0, [r4, #0]
 801748e:	4401      	add	r1, r0
 8017490:	1858      	adds	r0, r3, r1
 8017492:	4282      	cmp	r2, r0
 8017494:	6019      	str	r1, [r3, #0]
 8017496:	d1dd      	bne.n	8017454 <_free_r+0x24>
 8017498:	6810      	ldr	r0, [r2, #0]
 801749a:	6852      	ldr	r2, [r2, #4]
 801749c:	605a      	str	r2, [r3, #4]
 801749e:	4401      	add	r1, r0
 80174a0:	6019      	str	r1, [r3, #0]
 80174a2:	e7d7      	b.n	8017454 <_free_r+0x24>
 80174a4:	d902      	bls.n	80174ac <_free_r+0x7c>
 80174a6:	230c      	movs	r3, #12
 80174a8:	602b      	str	r3, [r5, #0]
 80174aa:	e7d3      	b.n	8017454 <_free_r+0x24>
 80174ac:	6820      	ldr	r0, [r4, #0]
 80174ae:	1821      	adds	r1, r4, r0
 80174b0:	428a      	cmp	r2, r1
 80174b2:	bf04      	itt	eq
 80174b4:	6811      	ldreq	r1, [r2, #0]
 80174b6:	6852      	ldreq	r2, [r2, #4]
 80174b8:	6062      	str	r2, [r4, #4]
 80174ba:	bf04      	itt	eq
 80174bc:	1809      	addeq	r1, r1, r0
 80174be:	6021      	streq	r1, [r4, #0]
 80174c0:	605c      	str	r4, [r3, #4]
 80174c2:	e7c7      	b.n	8017454 <_free_r+0x24>
 80174c4:	bd38      	pop	{r3, r4, r5, pc}
 80174c6:	bf00      	nop
 80174c8:	20033624 	.word	0x20033624

080174cc <_malloc_r>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	1ccd      	adds	r5, r1, #3
 80174d0:	f025 0503 	bic.w	r5, r5, #3
 80174d4:	3508      	adds	r5, #8
 80174d6:	2d0c      	cmp	r5, #12
 80174d8:	bf38      	it	cc
 80174da:	250c      	movcc	r5, #12
 80174dc:	2d00      	cmp	r5, #0
 80174de:	4606      	mov	r6, r0
 80174e0:	db01      	blt.n	80174e6 <_malloc_r+0x1a>
 80174e2:	42a9      	cmp	r1, r5
 80174e4:	d903      	bls.n	80174ee <_malloc_r+0x22>
 80174e6:	230c      	movs	r3, #12
 80174e8:	6033      	str	r3, [r6, #0]
 80174ea:	2000      	movs	r0, #0
 80174ec:	bd70      	pop	{r4, r5, r6, pc}
 80174ee:	f000 ff86 	bl	80183fe <__malloc_lock>
 80174f2:	4a21      	ldr	r2, [pc, #132]	; (8017578 <_malloc_r+0xac>)
 80174f4:	6814      	ldr	r4, [r2, #0]
 80174f6:	4621      	mov	r1, r4
 80174f8:	b991      	cbnz	r1, 8017520 <_malloc_r+0x54>
 80174fa:	4c20      	ldr	r4, [pc, #128]	; (801757c <_malloc_r+0xb0>)
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	b91b      	cbnz	r3, 8017508 <_malloc_r+0x3c>
 8017500:	4630      	mov	r0, r6
 8017502:	f000 fe19 	bl	8018138 <_sbrk_r>
 8017506:	6020      	str	r0, [r4, #0]
 8017508:	4629      	mov	r1, r5
 801750a:	4630      	mov	r0, r6
 801750c:	f000 fe14 	bl	8018138 <_sbrk_r>
 8017510:	1c43      	adds	r3, r0, #1
 8017512:	d124      	bne.n	801755e <_malloc_r+0x92>
 8017514:	230c      	movs	r3, #12
 8017516:	6033      	str	r3, [r6, #0]
 8017518:	4630      	mov	r0, r6
 801751a:	f000 ff71 	bl	8018400 <__malloc_unlock>
 801751e:	e7e4      	b.n	80174ea <_malloc_r+0x1e>
 8017520:	680b      	ldr	r3, [r1, #0]
 8017522:	1b5b      	subs	r3, r3, r5
 8017524:	d418      	bmi.n	8017558 <_malloc_r+0x8c>
 8017526:	2b0b      	cmp	r3, #11
 8017528:	d90f      	bls.n	801754a <_malloc_r+0x7e>
 801752a:	600b      	str	r3, [r1, #0]
 801752c:	50cd      	str	r5, [r1, r3]
 801752e:	18cc      	adds	r4, r1, r3
 8017530:	4630      	mov	r0, r6
 8017532:	f000 ff65 	bl	8018400 <__malloc_unlock>
 8017536:	f104 000b 	add.w	r0, r4, #11
 801753a:	1d23      	adds	r3, r4, #4
 801753c:	f020 0007 	bic.w	r0, r0, #7
 8017540:	1ac3      	subs	r3, r0, r3
 8017542:	d0d3      	beq.n	80174ec <_malloc_r+0x20>
 8017544:	425a      	negs	r2, r3
 8017546:	50e2      	str	r2, [r4, r3]
 8017548:	e7d0      	b.n	80174ec <_malloc_r+0x20>
 801754a:	428c      	cmp	r4, r1
 801754c:	684b      	ldr	r3, [r1, #4]
 801754e:	bf16      	itet	ne
 8017550:	6063      	strne	r3, [r4, #4]
 8017552:	6013      	streq	r3, [r2, #0]
 8017554:	460c      	movne	r4, r1
 8017556:	e7eb      	b.n	8017530 <_malloc_r+0x64>
 8017558:	460c      	mov	r4, r1
 801755a:	6849      	ldr	r1, [r1, #4]
 801755c:	e7cc      	b.n	80174f8 <_malloc_r+0x2c>
 801755e:	1cc4      	adds	r4, r0, #3
 8017560:	f024 0403 	bic.w	r4, r4, #3
 8017564:	42a0      	cmp	r0, r4
 8017566:	d005      	beq.n	8017574 <_malloc_r+0xa8>
 8017568:	1a21      	subs	r1, r4, r0
 801756a:	4630      	mov	r0, r6
 801756c:	f000 fde4 	bl	8018138 <_sbrk_r>
 8017570:	3001      	adds	r0, #1
 8017572:	d0cf      	beq.n	8017514 <_malloc_r+0x48>
 8017574:	6025      	str	r5, [r4, #0]
 8017576:	e7db      	b.n	8017530 <_malloc_r+0x64>
 8017578:	20033624 	.word	0x20033624
 801757c:	20033628 	.word	0x20033628

08017580 <__ssputs_r>:
 8017580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017584:	688e      	ldr	r6, [r1, #8]
 8017586:	429e      	cmp	r6, r3
 8017588:	4682      	mov	sl, r0
 801758a:	460c      	mov	r4, r1
 801758c:	4690      	mov	r8, r2
 801758e:	4699      	mov	r9, r3
 8017590:	d837      	bhi.n	8017602 <__ssputs_r+0x82>
 8017592:	898a      	ldrh	r2, [r1, #12]
 8017594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017598:	d031      	beq.n	80175fe <__ssputs_r+0x7e>
 801759a:	6825      	ldr	r5, [r4, #0]
 801759c:	6909      	ldr	r1, [r1, #16]
 801759e:	1a6f      	subs	r7, r5, r1
 80175a0:	6965      	ldr	r5, [r4, #20]
 80175a2:	2302      	movs	r3, #2
 80175a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80175ac:	f109 0301 	add.w	r3, r9, #1
 80175b0:	443b      	add	r3, r7
 80175b2:	429d      	cmp	r5, r3
 80175b4:	bf38      	it	cc
 80175b6:	461d      	movcc	r5, r3
 80175b8:	0553      	lsls	r3, r2, #21
 80175ba:	d530      	bpl.n	801761e <__ssputs_r+0x9e>
 80175bc:	4629      	mov	r1, r5
 80175be:	f7ff ff85 	bl	80174cc <_malloc_r>
 80175c2:	4606      	mov	r6, r0
 80175c4:	b950      	cbnz	r0, 80175dc <__ssputs_r+0x5c>
 80175c6:	230c      	movs	r3, #12
 80175c8:	f8ca 3000 	str.w	r3, [sl]
 80175cc:	89a3      	ldrh	r3, [r4, #12]
 80175ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175d2:	81a3      	strh	r3, [r4, #12]
 80175d4:	f04f 30ff 	mov.w	r0, #4294967295
 80175d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175dc:	463a      	mov	r2, r7
 80175de:	6921      	ldr	r1, [r4, #16]
 80175e0:	f7fc f81e 	bl	8013620 <memcpy>
 80175e4:	89a3      	ldrh	r3, [r4, #12]
 80175e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80175ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175ee:	81a3      	strh	r3, [r4, #12]
 80175f0:	6126      	str	r6, [r4, #16]
 80175f2:	6165      	str	r5, [r4, #20]
 80175f4:	443e      	add	r6, r7
 80175f6:	1bed      	subs	r5, r5, r7
 80175f8:	6026      	str	r6, [r4, #0]
 80175fa:	60a5      	str	r5, [r4, #8]
 80175fc:	464e      	mov	r6, r9
 80175fe:	454e      	cmp	r6, r9
 8017600:	d900      	bls.n	8017604 <__ssputs_r+0x84>
 8017602:	464e      	mov	r6, r9
 8017604:	4632      	mov	r2, r6
 8017606:	4641      	mov	r1, r8
 8017608:	6820      	ldr	r0, [r4, #0]
 801760a:	f000 fedf 	bl	80183cc <memmove>
 801760e:	68a3      	ldr	r3, [r4, #8]
 8017610:	1b9b      	subs	r3, r3, r6
 8017612:	60a3      	str	r3, [r4, #8]
 8017614:	6823      	ldr	r3, [r4, #0]
 8017616:	441e      	add	r6, r3
 8017618:	6026      	str	r6, [r4, #0]
 801761a:	2000      	movs	r0, #0
 801761c:	e7dc      	b.n	80175d8 <__ssputs_r+0x58>
 801761e:	462a      	mov	r2, r5
 8017620:	f000 feef 	bl	8018402 <_realloc_r>
 8017624:	4606      	mov	r6, r0
 8017626:	2800      	cmp	r0, #0
 8017628:	d1e2      	bne.n	80175f0 <__ssputs_r+0x70>
 801762a:	6921      	ldr	r1, [r4, #16]
 801762c:	4650      	mov	r0, sl
 801762e:	f7ff feff 	bl	8017430 <_free_r>
 8017632:	e7c8      	b.n	80175c6 <__ssputs_r+0x46>

08017634 <_svfiprintf_r>:
 8017634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017638:	461d      	mov	r5, r3
 801763a:	898b      	ldrh	r3, [r1, #12]
 801763c:	061f      	lsls	r7, r3, #24
 801763e:	b09d      	sub	sp, #116	; 0x74
 8017640:	4680      	mov	r8, r0
 8017642:	460c      	mov	r4, r1
 8017644:	4616      	mov	r6, r2
 8017646:	d50f      	bpl.n	8017668 <_svfiprintf_r+0x34>
 8017648:	690b      	ldr	r3, [r1, #16]
 801764a:	b96b      	cbnz	r3, 8017668 <_svfiprintf_r+0x34>
 801764c:	2140      	movs	r1, #64	; 0x40
 801764e:	f7ff ff3d 	bl	80174cc <_malloc_r>
 8017652:	6020      	str	r0, [r4, #0]
 8017654:	6120      	str	r0, [r4, #16]
 8017656:	b928      	cbnz	r0, 8017664 <_svfiprintf_r+0x30>
 8017658:	230c      	movs	r3, #12
 801765a:	f8c8 3000 	str.w	r3, [r8]
 801765e:	f04f 30ff 	mov.w	r0, #4294967295
 8017662:	e0c8      	b.n	80177f6 <_svfiprintf_r+0x1c2>
 8017664:	2340      	movs	r3, #64	; 0x40
 8017666:	6163      	str	r3, [r4, #20]
 8017668:	2300      	movs	r3, #0
 801766a:	9309      	str	r3, [sp, #36]	; 0x24
 801766c:	2320      	movs	r3, #32
 801766e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017672:	2330      	movs	r3, #48	; 0x30
 8017674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017678:	9503      	str	r5, [sp, #12]
 801767a:	f04f 0b01 	mov.w	fp, #1
 801767e:	4637      	mov	r7, r6
 8017680:	463d      	mov	r5, r7
 8017682:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017686:	b10b      	cbz	r3, 801768c <_svfiprintf_r+0x58>
 8017688:	2b25      	cmp	r3, #37	; 0x25
 801768a:	d13e      	bne.n	801770a <_svfiprintf_r+0xd6>
 801768c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017690:	d00b      	beq.n	80176aa <_svfiprintf_r+0x76>
 8017692:	4653      	mov	r3, sl
 8017694:	4632      	mov	r2, r6
 8017696:	4621      	mov	r1, r4
 8017698:	4640      	mov	r0, r8
 801769a:	f7ff ff71 	bl	8017580 <__ssputs_r>
 801769e:	3001      	adds	r0, #1
 80176a0:	f000 80a4 	beq.w	80177ec <_svfiprintf_r+0x1b8>
 80176a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176a6:	4453      	add	r3, sl
 80176a8:	9309      	str	r3, [sp, #36]	; 0x24
 80176aa:	783b      	ldrb	r3, [r7, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 809d 	beq.w	80177ec <_svfiprintf_r+0x1b8>
 80176b2:	2300      	movs	r3, #0
 80176b4:	f04f 32ff 	mov.w	r2, #4294967295
 80176b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176bc:	9304      	str	r3, [sp, #16]
 80176be:	9307      	str	r3, [sp, #28]
 80176c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176c4:	931a      	str	r3, [sp, #104]	; 0x68
 80176c6:	462f      	mov	r7, r5
 80176c8:	2205      	movs	r2, #5
 80176ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80176ce:	4850      	ldr	r0, [pc, #320]	; (8017810 <_svfiprintf_r+0x1dc>)
 80176d0:	f7e8 fd9e 	bl	8000210 <memchr>
 80176d4:	9b04      	ldr	r3, [sp, #16]
 80176d6:	b9d0      	cbnz	r0, 801770e <_svfiprintf_r+0xda>
 80176d8:	06d9      	lsls	r1, r3, #27
 80176da:	bf44      	itt	mi
 80176dc:	2220      	movmi	r2, #32
 80176de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176e2:	071a      	lsls	r2, r3, #28
 80176e4:	bf44      	itt	mi
 80176e6:	222b      	movmi	r2, #43	; 0x2b
 80176e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176ec:	782a      	ldrb	r2, [r5, #0]
 80176ee:	2a2a      	cmp	r2, #42	; 0x2a
 80176f0:	d015      	beq.n	801771e <_svfiprintf_r+0xea>
 80176f2:	9a07      	ldr	r2, [sp, #28]
 80176f4:	462f      	mov	r7, r5
 80176f6:	2000      	movs	r0, #0
 80176f8:	250a      	movs	r5, #10
 80176fa:	4639      	mov	r1, r7
 80176fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017700:	3b30      	subs	r3, #48	; 0x30
 8017702:	2b09      	cmp	r3, #9
 8017704:	d94d      	bls.n	80177a2 <_svfiprintf_r+0x16e>
 8017706:	b1b8      	cbz	r0, 8017738 <_svfiprintf_r+0x104>
 8017708:	e00f      	b.n	801772a <_svfiprintf_r+0xf6>
 801770a:	462f      	mov	r7, r5
 801770c:	e7b8      	b.n	8017680 <_svfiprintf_r+0x4c>
 801770e:	4a40      	ldr	r2, [pc, #256]	; (8017810 <_svfiprintf_r+0x1dc>)
 8017710:	1a80      	subs	r0, r0, r2
 8017712:	fa0b f000 	lsl.w	r0, fp, r0
 8017716:	4318      	orrs	r0, r3
 8017718:	9004      	str	r0, [sp, #16]
 801771a:	463d      	mov	r5, r7
 801771c:	e7d3      	b.n	80176c6 <_svfiprintf_r+0x92>
 801771e:	9a03      	ldr	r2, [sp, #12]
 8017720:	1d11      	adds	r1, r2, #4
 8017722:	6812      	ldr	r2, [r2, #0]
 8017724:	9103      	str	r1, [sp, #12]
 8017726:	2a00      	cmp	r2, #0
 8017728:	db01      	blt.n	801772e <_svfiprintf_r+0xfa>
 801772a:	9207      	str	r2, [sp, #28]
 801772c:	e004      	b.n	8017738 <_svfiprintf_r+0x104>
 801772e:	4252      	negs	r2, r2
 8017730:	f043 0302 	orr.w	r3, r3, #2
 8017734:	9207      	str	r2, [sp, #28]
 8017736:	9304      	str	r3, [sp, #16]
 8017738:	783b      	ldrb	r3, [r7, #0]
 801773a:	2b2e      	cmp	r3, #46	; 0x2e
 801773c:	d10c      	bne.n	8017758 <_svfiprintf_r+0x124>
 801773e:	787b      	ldrb	r3, [r7, #1]
 8017740:	2b2a      	cmp	r3, #42	; 0x2a
 8017742:	d133      	bne.n	80177ac <_svfiprintf_r+0x178>
 8017744:	9b03      	ldr	r3, [sp, #12]
 8017746:	1d1a      	adds	r2, r3, #4
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	9203      	str	r2, [sp, #12]
 801774c:	2b00      	cmp	r3, #0
 801774e:	bfb8      	it	lt
 8017750:	f04f 33ff 	movlt.w	r3, #4294967295
 8017754:	3702      	adds	r7, #2
 8017756:	9305      	str	r3, [sp, #20]
 8017758:	4d2e      	ldr	r5, [pc, #184]	; (8017814 <_svfiprintf_r+0x1e0>)
 801775a:	7839      	ldrb	r1, [r7, #0]
 801775c:	2203      	movs	r2, #3
 801775e:	4628      	mov	r0, r5
 8017760:	f7e8 fd56 	bl	8000210 <memchr>
 8017764:	b138      	cbz	r0, 8017776 <_svfiprintf_r+0x142>
 8017766:	2340      	movs	r3, #64	; 0x40
 8017768:	1b40      	subs	r0, r0, r5
 801776a:	fa03 f000 	lsl.w	r0, r3, r0
 801776e:	9b04      	ldr	r3, [sp, #16]
 8017770:	4303      	orrs	r3, r0
 8017772:	3701      	adds	r7, #1
 8017774:	9304      	str	r3, [sp, #16]
 8017776:	7839      	ldrb	r1, [r7, #0]
 8017778:	4827      	ldr	r0, [pc, #156]	; (8017818 <_svfiprintf_r+0x1e4>)
 801777a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801777e:	2206      	movs	r2, #6
 8017780:	1c7e      	adds	r6, r7, #1
 8017782:	f7e8 fd45 	bl	8000210 <memchr>
 8017786:	2800      	cmp	r0, #0
 8017788:	d038      	beq.n	80177fc <_svfiprintf_r+0x1c8>
 801778a:	4b24      	ldr	r3, [pc, #144]	; (801781c <_svfiprintf_r+0x1e8>)
 801778c:	bb13      	cbnz	r3, 80177d4 <_svfiprintf_r+0x1a0>
 801778e:	9b03      	ldr	r3, [sp, #12]
 8017790:	3307      	adds	r3, #7
 8017792:	f023 0307 	bic.w	r3, r3, #7
 8017796:	3308      	adds	r3, #8
 8017798:	9303      	str	r3, [sp, #12]
 801779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801779c:	444b      	add	r3, r9
 801779e:	9309      	str	r3, [sp, #36]	; 0x24
 80177a0:	e76d      	b.n	801767e <_svfiprintf_r+0x4a>
 80177a2:	fb05 3202 	mla	r2, r5, r2, r3
 80177a6:	2001      	movs	r0, #1
 80177a8:	460f      	mov	r7, r1
 80177aa:	e7a6      	b.n	80176fa <_svfiprintf_r+0xc6>
 80177ac:	2300      	movs	r3, #0
 80177ae:	3701      	adds	r7, #1
 80177b0:	9305      	str	r3, [sp, #20]
 80177b2:	4619      	mov	r1, r3
 80177b4:	250a      	movs	r5, #10
 80177b6:	4638      	mov	r0, r7
 80177b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177bc:	3a30      	subs	r2, #48	; 0x30
 80177be:	2a09      	cmp	r2, #9
 80177c0:	d903      	bls.n	80177ca <_svfiprintf_r+0x196>
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d0c8      	beq.n	8017758 <_svfiprintf_r+0x124>
 80177c6:	9105      	str	r1, [sp, #20]
 80177c8:	e7c6      	b.n	8017758 <_svfiprintf_r+0x124>
 80177ca:	fb05 2101 	mla	r1, r5, r1, r2
 80177ce:	2301      	movs	r3, #1
 80177d0:	4607      	mov	r7, r0
 80177d2:	e7f0      	b.n	80177b6 <_svfiprintf_r+0x182>
 80177d4:	ab03      	add	r3, sp, #12
 80177d6:	9300      	str	r3, [sp, #0]
 80177d8:	4622      	mov	r2, r4
 80177da:	4b11      	ldr	r3, [pc, #68]	; (8017820 <_svfiprintf_r+0x1ec>)
 80177dc:	a904      	add	r1, sp, #16
 80177de:	4640      	mov	r0, r8
 80177e0:	f7fb ffc6 	bl	8013770 <_printf_float>
 80177e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80177e8:	4681      	mov	r9, r0
 80177ea:	d1d6      	bne.n	801779a <_svfiprintf_r+0x166>
 80177ec:	89a3      	ldrh	r3, [r4, #12]
 80177ee:	065b      	lsls	r3, r3, #25
 80177f0:	f53f af35 	bmi.w	801765e <_svfiprintf_r+0x2a>
 80177f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177f6:	b01d      	add	sp, #116	; 0x74
 80177f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177fc:	ab03      	add	r3, sp, #12
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	4622      	mov	r2, r4
 8017802:	4b07      	ldr	r3, [pc, #28]	; (8017820 <_svfiprintf_r+0x1ec>)
 8017804:	a904      	add	r1, sp, #16
 8017806:	4640      	mov	r0, r8
 8017808:	f7fc fa68 	bl	8013cdc <_printf_i>
 801780c:	e7ea      	b.n	80177e4 <_svfiprintf_r+0x1b0>
 801780e:	bf00      	nop
 8017810:	08018e6c 	.word	0x08018e6c
 8017814:	08018e72 	.word	0x08018e72
 8017818:	08018e76 	.word	0x08018e76
 801781c:	08013771 	.word	0x08013771
 8017820:	08017581 	.word	0x08017581

08017824 <_sungetc_r>:
 8017824:	b538      	push	{r3, r4, r5, lr}
 8017826:	1c4b      	adds	r3, r1, #1
 8017828:	4614      	mov	r4, r2
 801782a:	d103      	bne.n	8017834 <_sungetc_r+0x10>
 801782c:	f04f 35ff 	mov.w	r5, #4294967295
 8017830:	4628      	mov	r0, r5
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	8993      	ldrh	r3, [r2, #12]
 8017836:	f023 0320 	bic.w	r3, r3, #32
 801783a:	8193      	strh	r3, [r2, #12]
 801783c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801783e:	6852      	ldr	r2, [r2, #4]
 8017840:	b2cd      	uxtb	r5, r1
 8017842:	b18b      	cbz	r3, 8017868 <_sungetc_r+0x44>
 8017844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017846:	4293      	cmp	r3, r2
 8017848:	dd08      	ble.n	801785c <_sungetc_r+0x38>
 801784a:	6823      	ldr	r3, [r4, #0]
 801784c:	1e5a      	subs	r2, r3, #1
 801784e:	6022      	str	r2, [r4, #0]
 8017850:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017854:	6863      	ldr	r3, [r4, #4]
 8017856:	3301      	adds	r3, #1
 8017858:	6063      	str	r3, [r4, #4]
 801785a:	e7e9      	b.n	8017830 <_sungetc_r+0xc>
 801785c:	4621      	mov	r1, r4
 801785e:	f000 fd4b 	bl	80182f8 <__submore>
 8017862:	2800      	cmp	r0, #0
 8017864:	d0f1      	beq.n	801784a <_sungetc_r+0x26>
 8017866:	e7e1      	b.n	801782c <_sungetc_r+0x8>
 8017868:	6921      	ldr	r1, [r4, #16]
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	b151      	cbz	r1, 8017884 <_sungetc_r+0x60>
 801786e:	4299      	cmp	r1, r3
 8017870:	d208      	bcs.n	8017884 <_sungetc_r+0x60>
 8017872:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017876:	42a9      	cmp	r1, r5
 8017878:	d104      	bne.n	8017884 <_sungetc_r+0x60>
 801787a:	3b01      	subs	r3, #1
 801787c:	3201      	adds	r2, #1
 801787e:	6023      	str	r3, [r4, #0]
 8017880:	6062      	str	r2, [r4, #4]
 8017882:	e7d5      	b.n	8017830 <_sungetc_r+0xc>
 8017884:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801788c:	6363      	str	r3, [r4, #52]	; 0x34
 801788e:	2303      	movs	r3, #3
 8017890:	63a3      	str	r3, [r4, #56]	; 0x38
 8017892:	4623      	mov	r3, r4
 8017894:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017898:	6023      	str	r3, [r4, #0]
 801789a:	2301      	movs	r3, #1
 801789c:	e7dc      	b.n	8017858 <_sungetc_r+0x34>

0801789e <__ssrefill_r>:
 801789e:	b510      	push	{r4, lr}
 80178a0:	460c      	mov	r4, r1
 80178a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80178a4:	b169      	cbz	r1, 80178c2 <__ssrefill_r+0x24>
 80178a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80178aa:	4299      	cmp	r1, r3
 80178ac:	d001      	beq.n	80178b2 <__ssrefill_r+0x14>
 80178ae:	f7ff fdbf 	bl	8017430 <_free_r>
 80178b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80178b4:	6063      	str	r3, [r4, #4]
 80178b6:	2000      	movs	r0, #0
 80178b8:	6360      	str	r0, [r4, #52]	; 0x34
 80178ba:	b113      	cbz	r3, 80178c2 <__ssrefill_r+0x24>
 80178bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80178be:	6023      	str	r3, [r4, #0]
 80178c0:	bd10      	pop	{r4, pc}
 80178c2:	6923      	ldr	r3, [r4, #16]
 80178c4:	6023      	str	r3, [r4, #0]
 80178c6:	2300      	movs	r3, #0
 80178c8:	6063      	str	r3, [r4, #4]
 80178ca:	89a3      	ldrh	r3, [r4, #12]
 80178cc:	f043 0320 	orr.w	r3, r3, #32
 80178d0:	81a3      	strh	r3, [r4, #12]
 80178d2:	f04f 30ff 	mov.w	r0, #4294967295
 80178d6:	e7f3      	b.n	80178c0 <__ssrefill_r+0x22>

080178d8 <__ssvfiscanf_r>:
 80178d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178dc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80178e0:	460c      	mov	r4, r1
 80178e2:	2100      	movs	r1, #0
 80178e4:	9144      	str	r1, [sp, #272]	; 0x110
 80178e6:	9145      	str	r1, [sp, #276]	; 0x114
 80178e8:	499f      	ldr	r1, [pc, #636]	; (8017b68 <__ssvfiscanf_r+0x290>)
 80178ea:	91a0      	str	r1, [sp, #640]	; 0x280
 80178ec:	f10d 0804 	add.w	r8, sp, #4
 80178f0:	499e      	ldr	r1, [pc, #632]	; (8017b6c <__ssvfiscanf_r+0x294>)
 80178f2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017b70 <__ssvfiscanf_r+0x298>
 80178f6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80178fa:	4606      	mov	r6, r0
 80178fc:	4692      	mov	sl, r2
 80178fe:	91a1      	str	r1, [sp, #644]	; 0x284
 8017900:	9300      	str	r3, [sp, #0]
 8017902:	270a      	movs	r7, #10
 8017904:	f89a 3000 	ldrb.w	r3, [sl]
 8017908:	2b00      	cmp	r3, #0
 801790a:	f000 812a 	beq.w	8017b62 <__ssvfiscanf_r+0x28a>
 801790e:	4655      	mov	r5, sl
 8017910:	f7ff f8d2 	bl	8016ab8 <__locale_ctype_ptr>
 8017914:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017918:	4458      	add	r0, fp
 801791a:	7843      	ldrb	r3, [r0, #1]
 801791c:	f013 0308 	ands.w	r3, r3, #8
 8017920:	d01c      	beq.n	801795c <__ssvfiscanf_r+0x84>
 8017922:	6863      	ldr	r3, [r4, #4]
 8017924:	2b00      	cmp	r3, #0
 8017926:	dd12      	ble.n	801794e <__ssvfiscanf_r+0x76>
 8017928:	f7ff f8c6 	bl	8016ab8 <__locale_ctype_ptr>
 801792c:	6823      	ldr	r3, [r4, #0]
 801792e:	781a      	ldrb	r2, [r3, #0]
 8017930:	4410      	add	r0, r2
 8017932:	7842      	ldrb	r2, [r0, #1]
 8017934:	0712      	lsls	r2, r2, #28
 8017936:	d401      	bmi.n	801793c <__ssvfiscanf_r+0x64>
 8017938:	46aa      	mov	sl, r5
 801793a:	e7e3      	b.n	8017904 <__ssvfiscanf_r+0x2c>
 801793c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801793e:	3201      	adds	r2, #1
 8017940:	9245      	str	r2, [sp, #276]	; 0x114
 8017942:	6862      	ldr	r2, [r4, #4]
 8017944:	3301      	adds	r3, #1
 8017946:	3a01      	subs	r2, #1
 8017948:	6062      	str	r2, [r4, #4]
 801794a:	6023      	str	r3, [r4, #0]
 801794c:	e7e9      	b.n	8017922 <__ssvfiscanf_r+0x4a>
 801794e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017950:	4621      	mov	r1, r4
 8017952:	4630      	mov	r0, r6
 8017954:	4798      	blx	r3
 8017956:	2800      	cmp	r0, #0
 8017958:	d0e6      	beq.n	8017928 <__ssvfiscanf_r+0x50>
 801795a:	e7ed      	b.n	8017938 <__ssvfiscanf_r+0x60>
 801795c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017960:	f040 8082 	bne.w	8017a68 <__ssvfiscanf_r+0x190>
 8017964:	9343      	str	r3, [sp, #268]	; 0x10c
 8017966:	9341      	str	r3, [sp, #260]	; 0x104
 8017968:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801796c:	2b2a      	cmp	r3, #42	; 0x2a
 801796e:	d103      	bne.n	8017978 <__ssvfiscanf_r+0xa0>
 8017970:	2310      	movs	r3, #16
 8017972:	9341      	str	r3, [sp, #260]	; 0x104
 8017974:	f10a 0502 	add.w	r5, sl, #2
 8017978:	46aa      	mov	sl, r5
 801797a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801797e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017982:	2a09      	cmp	r2, #9
 8017984:	d922      	bls.n	80179cc <__ssvfiscanf_r+0xf4>
 8017986:	2203      	movs	r2, #3
 8017988:	4879      	ldr	r0, [pc, #484]	; (8017b70 <__ssvfiscanf_r+0x298>)
 801798a:	f7e8 fc41 	bl	8000210 <memchr>
 801798e:	b138      	cbz	r0, 80179a0 <__ssvfiscanf_r+0xc8>
 8017990:	eba0 0309 	sub.w	r3, r0, r9
 8017994:	2001      	movs	r0, #1
 8017996:	4098      	lsls	r0, r3
 8017998:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801799a:	4318      	orrs	r0, r3
 801799c:	9041      	str	r0, [sp, #260]	; 0x104
 801799e:	46aa      	mov	sl, r5
 80179a0:	f89a 3000 	ldrb.w	r3, [sl]
 80179a4:	2b67      	cmp	r3, #103	; 0x67
 80179a6:	f10a 0501 	add.w	r5, sl, #1
 80179aa:	d82b      	bhi.n	8017a04 <__ssvfiscanf_r+0x12c>
 80179ac:	2b65      	cmp	r3, #101	; 0x65
 80179ae:	f080 809f 	bcs.w	8017af0 <__ssvfiscanf_r+0x218>
 80179b2:	2b47      	cmp	r3, #71	; 0x47
 80179b4:	d810      	bhi.n	80179d8 <__ssvfiscanf_r+0x100>
 80179b6:	2b45      	cmp	r3, #69	; 0x45
 80179b8:	f080 809a 	bcs.w	8017af0 <__ssvfiscanf_r+0x218>
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d06c      	beq.n	8017a9a <__ssvfiscanf_r+0x1c2>
 80179c0:	2b25      	cmp	r3, #37	; 0x25
 80179c2:	d051      	beq.n	8017a68 <__ssvfiscanf_r+0x190>
 80179c4:	2303      	movs	r3, #3
 80179c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80179c8:	9742      	str	r7, [sp, #264]	; 0x108
 80179ca:	e027      	b.n	8017a1c <__ssvfiscanf_r+0x144>
 80179cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80179ce:	fb07 1303 	mla	r3, r7, r3, r1
 80179d2:	3b30      	subs	r3, #48	; 0x30
 80179d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80179d6:	e7cf      	b.n	8017978 <__ssvfiscanf_r+0xa0>
 80179d8:	2b5b      	cmp	r3, #91	; 0x5b
 80179da:	d06a      	beq.n	8017ab2 <__ssvfiscanf_r+0x1da>
 80179dc:	d80c      	bhi.n	80179f8 <__ssvfiscanf_r+0x120>
 80179de:	2b58      	cmp	r3, #88	; 0x58
 80179e0:	d1f0      	bne.n	80179c4 <__ssvfiscanf_r+0xec>
 80179e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80179e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179e8:	9241      	str	r2, [sp, #260]	; 0x104
 80179ea:	2210      	movs	r2, #16
 80179ec:	9242      	str	r2, [sp, #264]	; 0x108
 80179ee:	2b6e      	cmp	r3, #110	; 0x6e
 80179f0:	bf8c      	ite	hi
 80179f2:	2304      	movhi	r3, #4
 80179f4:	2303      	movls	r3, #3
 80179f6:	e010      	b.n	8017a1a <__ssvfiscanf_r+0x142>
 80179f8:	2b63      	cmp	r3, #99	; 0x63
 80179fa:	d065      	beq.n	8017ac8 <__ssvfiscanf_r+0x1f0>
 80179fc:	2b64      	cmp	r3, #100	; 0x64
 80179fe:	d1e1      	bne.n	80179c4 <__ssvfiscanf_r+0xec>
 8017a00:	9742      	str	r7, [sp, #264]	; 0x108
 8017a02:	e7f4      	b.n	80179ee <__ssvfiscanf_r+0x116>
 8017a04:	2b70      	cmp	r3, #112	; 0x70
 8017a06:	d04b      	beq.n	8017aa0 <__ssvfiscanf_r+0x1c8>
 8017a08:	d826      	bhi.n	8017a58 <__ssvfiscanf_r+0x180>
 8017a0a:	2b6e      	cmp	r3, #110	; 0x6e
 8017a0c:	d062      	beq.n	8017ad4 <__ssvfiscanf_r+0x1fc>
 8017a0e:	d84c      	bhi.n	8017aaa <__ssvfiscanf_r+0x1d2>
 8017a10:	2b69      	cmp	r3, #105	; 0x69
 8017a12:	d1d7      	bne.n	80179c4 <__ssvfiscanf_r+0xec>
 8017a14:	2300      	movs	r3, #0
 8017a16:	9342      	str	r3, [sp, #264]	; 0x108
 8017a18:	2303      	movs	r3, #3
 8017a1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8017a1c:	6863      	ldr	r3, [r4, #4]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	dd68      	ble.n	8017af4 <__ssvfiscanf_r+0x21c>
 8017a22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017a24:	0659      	lsls	r1, r3, #25
 8017a26:	d407      	bmi.n	8017a38 <__ssvfiscanf_r+0x160>
 8017a28:	f7ff f846 	bl	8016ab8 <__locale_ctype_ptr>
 8017a2c:	6823      	ldr	r3, [r4, #0]
 8017a2e:	781a      	ldrb	r2, [r3, #0]
 8017a30:	4410      	add	r0, r2
 8017a32:	7842      	ldrb	r2, [r0, #1]
 8017a34:	0712      	lsls	r2, r2, #28
 8017a36:	d464      	bmi.n	8017b02 <__ssvfiscanf_r+0x22a>
 8017a38:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017a3a:	2b02      	cmp	r3, #2
 8017a3c:	dc73      	bgt.n	8017b26 <__ssvfiscanf_r+0x24e>
 8017a3e:	466b      	mov	r3, sp
 8017a40:	4622      	mov	r2, r4
 8017a42:	a941      	add	r1, sp, #260	; 0x104
 8017a44:	4630      	mov	r0, r6
 8017a46:	f000 f9d7 	bl	8017df8 <_scanf_chars>
 8017a4a:	2801      	cmp	r0, #1
 8017a4c:	f000 8089 	beq.w	8017b62 <__ssvfiscanf_r+0x28a>
 8017a50:	2802      	cmp	r0, #2
 8017a52:	f47f af71 	bne.w	8017938 <__ssvfiscanf_r+0x60>
 8017a56:	e01d      	b.n	8017a94 <__ssvfiscanf_r+0x1bc>
 8017a58:	2b75      	cmp	r3, #117	; 0x75
 8017a5a:	d0d1      	beq.n	8017a00 <__ssvfiscanf_r+0x128>
 8017a5c:	2b78      	cmp	r3, #120	; 0x78
 8017a5e:	d0c0      	beq.n	80179e2 <__ssvfiscanf_r+0x10a>
 8017a60:	2b73      	cmp	r3, #115	; 0x73
 8017a62:	d1af      	bne.n	80179c4 <__ssvfiscanf_r+0xec>
 8017a64:	2302      	movs	r3, #2
 8017a66:	e7d8      	b.n	8017a1a <__ssvfiscanf_r+0x142>
 8017a68:	6863      	ldr	r3, [r4, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	dd0c      	ble.n	8017a88 <__ssvfiscanf_r+0x1b0>
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	781a      	ldrb	r2, [r3, #0]
 8017a72:	455a      	cmp	r2, fp
 8017a74:	d175      	bne.n	8017b62 <__ssvfiscanf_r+0x28a>
 8017a76:	3301      	adds	r3, #1
 8017a78:	6862      	ldr	r2, [r4, #4]
 8017a7a:	6023      	str	r3, [r4, #0]
 8017a7c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017a7e:	3a01      	subs	r2, #1
 8017a80:	3301      	adds	r3, #1
 8017a82:	6062      	str	r2, [r4, #4]
 8017a84:	9345      	str	r3, [sp, #276]	; 0x114
 8017a86:	e757      	b.n	8017938 <__ssvfiscanf_r+0x60>
 8017a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a8a:	4621      	mov	r1, r4
 8017a8c:	4630      	mov	r0, r6
 8017a8e:	4798      	blx	r3
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d0ec      	beq.n	8017a6e <__ssvfiscanf_r+0x196>
 8017a94:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d159      	bne.n	8017b4e <__ssvfiscanf_r+0x276>
 8017a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a9e:	e05c      	b.n	8017b5a <__ssvfiscanf_r+0x282>
 8017aa0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017aa2:	f042 0220 	orr.w	r2, r2, #32
 8017aa6:	9241      	str	r2, [sp, #260]	; 0x104
 8017aa8:	e79b      	b.n	80179e2 <__ssvfiscanf_r+0x10a>
 8017aaa:	2308      	movs	r3, #8
 8017aac:	9342      	str	r3, [sp, #264]	; 0x108
 8017aae:	2304      	movs	r3, #4
 8017ab0:	e7b3      	b.n	8017a1a <__ssvfiscanf_r+0x142>
 8017ab2:	4629      	mov	r1, r5
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	f000 fb4f 	bl	8018158 <__sccl>
 8017aba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ac0:	9341      	str	r3, [sp, #260]	; 0x104
 8017ac2:	4605      	mov	r5, r0
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	e7a8      	b.n	8017a1a <__ssvfiscanf_r+0x142>
 8017ac8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ace:	9341      	str	r3, [sp, #260]	; 0x104
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	e7a2      	b.n	8017a1a <__ssvfiscanf_r+0x142>
 8017ad4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017ad6:	06c3      	lsls	r3, r0, #27
 8017ad8:	f53f af2e 	bmi.w	8017938 <__ssvfiscanf_r+0x60>
 8017adc:	9b00      	ldr	r3, [sp, #0]
 8017ade:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017ae0:	1d19      	adds	r1, r3, #4
 8017ae2:	9100      	str	r1, [sp, #0]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	07c0      	lsls	r0, r0, #31
 8017ae8:	bf4c      	ite	mi
 8017aea:	801a      	strhmi	r2, [r3, #0]
 8017aec:	601a      	strpl	r2, [r3, #0]
 8017aee:	e723      	b.n	8017938 <__ssvfiscanf_r+0x60>
 8017af0:	2305      	movs	r3, #5
 8017af2:	e792      	b.n	8017a1a <__ssvfiscanf_r+0x142>
 8017af4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017af6:	4621      	mov	r1, r4
 8017af8:	4630      	mov	r0, r6
 8017afa:	4798      	blx	r3
 8017afc:	2800      	cmp	r0, #0
 8017afe:	d090      	beq.n	8017a22 <__ssvfiscanf_r+0x14a>
 8017b00:	e7c8      	b.n	8017a94 <__ssvfiscanf_r+0x1bc>
 8017b02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017b04:	3201      	adds	r2, #1
 8017b06:	9245      	str	r2, [sp, #276]	; 0x114
 8017b08:	6862      	ldr	r2, [r4, #4]
 8017b0a:	3a01      	subs	r2, #1
 8017b0c:	2a00      	cmp	r2, #0
 8017b0e:	6062      	str	r2, [r4, #4]
 8017b10:	dd02      	ble.n	8017b18 <__ssvfiscanf_r+0x240>
 8017b12:	3301      	adds	r3, #1
 8017b14:	6023      	str	r3, [r4, #0]
 8017b16:	e787      	b.n	8017a28 <__ssvfiscanf_r+0x150>
 8017b18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017b1a:	4621      	mov	r1, r4
 8017b1c:	4630      	mov	r0, r6
 8017b1e:	4798      	blx	r3
 8017b20:	2800      	cmp	r0, #0
 8017b22:	d081      	beq.n	8017a28 <__ssvfiscanf_r+0x150>
 8017b24:	e7b6      	b.n	8017a94 <__ssvfiscanf_r+0x1bc>
 8017b26:	2b04      	cmp	r3, #4
 8017b28:	dc06      	bgt.n	8017b38 <__ssvfiscanf_r+0x260>
 8017b2a:	466b      	mov	r3, sp
 8017b2c:	4622      	mov	r2, r4
 8017b2e:	a941      	add	r1, sp, #260	; 0x104
 8017b30:	4630      	mov	r0, r6
 8017b32:	f000 f9c5 	bl	8017ec0 <_scanf_i>
 8017b36:	e788      	b.n	8017a4a <__ssvfiscanf_r+0x172>
 8017b38:	4b0e      	ldr	r3, [pc, #56]	; (8017b74 <__ssvfiscanf_r+0x29c>)
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f43f aefc 	beq.w	8017938 <__ssvfiscanf_r+0x60>
 8017b40:	466b      	mov	r3, sp
 8017b42:	4622      	mov	r2, r4
 8017b44:	a941      	add	r1, sp, #260	; 0x104
 8017b46:	4630      	mov	r0, r6
 8017b48:	f7fc f9da 	bl	8013f00 <_scanf_float>
 8017b4c:	e77d      	b.n	8017a4a <__ssvfiscanf_r+0x172>
 8017b4e:	89a3      	ldrh	r3, [r4, #12]
 8017b50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017b54:	bf18      	it	ne
 8017b56:	f04f 30ff 	movne.w	r0, #4294967295
 8017b5a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b62:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017b64:	e7f9      	b.n	8017b5a <__ssvfiscanf_r+0x282>
 8017b66:	bf00      	nop
 8017b68:	08017825 	.word	0x08017825
 8017b6c:	0801789f 	.word	0x0801789f
 8017b70:	08018e72 	.word	0x08018e72
 8017b74:	08013f01 	.word	0x08013f01

08017b78 <__sfputc_r>:
 8017b78:	6893      	ldr	r3, [r2, #8]
 8017b7a:	3b01      	subs	r3, #1
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	b410      	push	{r4}
 8017b80:	6093      	str	r3, [r2, #8]
 8017b82:	da08      	bge.n	8017b96 <__sfputc_r+0x1e>
 8017b84:	6994      	ldr	r4, [r2, #24]
 8017b86:	42a3      	cmp	r3, r4
 8017b88:	db01      	blt.n	8017b8e <__sfputc_r+0x16>
 8017b8a:	290a      	cmp	r1, #10
 8017b8c:	d103      	bne.n	8017b96 <__sfputc_r+0x1e>
 8017b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b92:	f7fd bbc7 	b.w	8015324 <__swbuf_r>
 8017b96:	6813      	ldr	r3, [r2, #0]
 8017b98:	1c58      	adds	r0, r3, #1
 8017b9a:	6010      	str	r0, [r2, #0]
 8017b9c:	7019      	strb	r1, [r3, #0]
 8017b9e:	4608      	mov	r0, r1
 8017ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ba4:	4770      	bx	lr

08017ba6 <__sfputs_r>:
 8017ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba8:	4606      	mov	r6, r0
 8017baa:	460f      	mov	r7, r1
 8017bac:	4614      	mov	r4, r2
 8017bae:	18d5      	adds	r5, r2, r3
 8017bb0:	42ac      	cmp	r4, r5
 8017bb2:	d101      	bne.n	8017bb8 <__sfputs_r+0x12>
 8017bb4:	2000      	movs	r0, #0
 8017bb6:	e007      	b.n	8017bc8 <__sfputs_r+0x22>
 8017bb8:	463a      	mov	r2, r7
 8017bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bbe:	4630      	mov	r0, r6
 8017bc0:	f7ff ffda 	bl	8017b78 <__sfputc_r>
 8017bc4:	1c43      	adds	r3, r0, #1
 8017bc6:	d1f3      	bne.n	8017bb0 <__sfputs_r+0xa>
 8017bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017bcc <_vfiprintf_r>:
 8017bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd0:	460c      	mov	r4, r1
 8017bd2:	b09d      	sub	sp, #116	; 0x74
 8017bd4:	4617      	mov	r7, r2
 8017bd6:	461d      	mov	r5, r3
 8017bd8:	4606      	mov	r6, r0
 8017bda:	b118      	cbz	r0, 8017be4 <_vfiprintf_r+0x18>
 8017bdc:	6983      	ldr	r3, [r0, #24]
 8017bde:	b90b      	cbnz	r3, 8017be4 <_vfiprintf_r+0x18>
 8017be0:	f7fe fbb6 	bl	8016350 <__sinit>
 8017be4:	4b7c      	ldr	r3, [pc, #496]	; (8017dd8 <_vfiprintf_r+0x20c>)
 8017be6:	429c      	cmp	r4, r3
 8017be8:	d158      	bne.n	8017c9c <_vfiprintf_r+0xd0>
 8017bea:	6874      	ldr	r4, [r6, #4]
 8017bec:	89a3      	ldrh	r3, [r4, #12]
 8017bee:	0718      	lsls	r0, r3, #28
 8017bf0:	d55e      	bpl.n	8017cb0 <_vfiprintf_r+0xe4>
 8017bf2:	6923      	ldr	r3, [r4, #16]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d05b      	beq.n	8017cb0 <_vfiprintf_r+0xe4>
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8017bfc:	2320      	movs	r3, #32
 8017bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c02:	2330      	movs	r3, #48	; 0x30
 8017c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c08:	9503      	str	r5, [sp, #12]
 8017c0a:	f04f 0b01 	mov.w	fp, #1
 8017c0e:	46b8      	mov	r8, r7
 8017c10:	4645      	mov	r5, r8
 8017c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017c16:	b10b      	cbz	r3, 8017c1c <_vfiprintf_r+0x50>
 8017c18:	2b25      	cmp	r3, #37	; 0x25
 8017c1a:	d154      	bne.n	8017cc6 <_vfiprintf_r+0xfa>
 8017c1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017c20:	d00b      	beq.n	8017c3a <_vfiprintf_r+0x6e>
 8017c22:	4653      	mov	r3, sl
 8017c24:	463a      	mov	r2, r7
 8017c26:	4621      	mov	r1, r4
 8017c28:	4630      	mov	r0, r6
 8017c2a:	f7ff ffbc 	bl	8017ba6 <__sfputs_r>
 8017c2e:	3001      	adds	r0, #1
 8017c30:	f000 80c2 	beq.w	8017db8 <_vfiprintf_r+0x1ec>
 8017c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c36:	4453      	add	r3, sl
 8017c38:	9309      	str	r3, [sp, #36]	; 0x24
 8017c3a:	f898 3000 	ldrb.w	r3, [r8]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	f000 80ba 	beq.w	8017db8 <_vfiprintf_r+0x1ec>
 8017c44:	2300      	movs	r3, #0
 8017c46:	f04f 32ff 	mov.w	r2, #4294967295
 8017c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c4e:	9304      	str	r3, [sp, #16]
 8017c50:	9307      	str	r3, [sp, #28]
 8017c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c56:	931a      	str	r3, [sp, #104]	; 0x68
 8017c58:	46a8      	mov	r8, r5
 8017c5a:	2205      	movs	r2, #5
 8017c5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017c60:	485e      	ldr	r0, [pc, #376]	; (8017ddc <_vfiprintf_r+0x210>)
 8017c62:	f7e8 fad5 	bl	8000210 <memchr>
 8017c66:	9b04      	ldr	r3, [sp, #16]
 8017c68:	bb78      	cbnz	r0, 8017cca <_vfiprintf_r+0xfe>
 8017c6a:	06d9      	lsls	r1, r3, #27
 8017c6c:	bf44      	itt	mi
 8017c6e:	2220      	movmi	r2, #32
 8017c70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c74:	071a      	lsls	r2, r3, #28
 8017c76:	bf44      	itt	mi
 8017c78:	222b      	movmi	r2, #43	; 0x2b
 8017c7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017c7e:	782a      	ldrb	r2, [r5, #0]
 8017c80:	2a2a      	cmp	r2, #42	; 0x2a
 8017c82:	d02a      	beq.n	8017cda <_vfiprintf_r+0x10e>
 8017c84:	9a07      	ldr	r2, [sp, #28]
 8017c86:	46a8      	mov	r8, r5
 8017c88:	2000      	movs	r0, #0
 8017c8a:	250a      	movs	r5, #10
 8017c8c:	4641      	mov	r1, r8
 8017c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c92:	3b30      	subs	r3, #48	; 0x30
 8017c94:	2b09      	cmp	r3, #9
 8017c96:	d969      	bls.n	8017d6c <_vfiprintf_r+0x1a0>
 8017c98:	b360      	cbz	r0, 8017cf4 <_vfiprintf_r+0x128>
 8017c9a:	e024      	b.n	8017ce6 <_vfiprintf_r+0x11a>
 8017c9c:	4b50      	ldr	r3, [pc, #320]	; (8017de0 <_vfiprintf_r+0x214>)
 8017c9e:	429c      	cmp	r4, r3
 8017ca0:	d101      	bne.n	8017ca6 <_vfiprintf_r+0xda>
 8017ca2:	68b4      	ldr	r4, [r6, #8]
 8017ca4:	e7a2      	b.n	8017bec <_vfiprintf_r+0x20>
 8017ca6:	4b4f      	ldr	r3, [pc, #316]	; (8017de4 <_vfiprintf_r+0x218>)
 8017ca8:	429c      	cmp	r4, r3
 8017caa:	bf08      	it	eq
 8017cac:	68f4      	ldreq	r4, [r6, #12]
 8017cae:	e79d      	b.n	8017bec <_vfiprintf_r+0x20>
 8017cb0:	4621      	mov	r1, r4
 8017cb2:	4630      	mov	r0, r6
 8017cb4:	f7fd fb9a 	bl	80153ec <__swsetup_r>
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	d09d      	beq.n	8017bf8 <_vfiprintf_r+0x2c>
 8017cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017cc0:	b01d      	add	sp, #116	; 0x74
 8017cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc6:	46a8      	mov	r8, r5
 8017cc8:	e7a2      	b.n	8017c10 <_vfiprintf_r+0x44>
 8017cca:	4a44      	ldr	r2, [pc, #272]	; (8017ddc <_vfiprintf_r+0x210>)
 8017ccc:	1a80      	subs	r0, r0, r2
 8017cce:	fa0b f000 	lsl.w	r0, fp, r0
 8017cd2:	4318      	orrs	r0, r3
 8017cd4:	9004      	str	r0, [sp, #16]
 8017cd6:	4645      	mov	r5, r8
 8017cd8:	e7be      	b.n	8017c58 <_vfiprintf_r+0x8c>
 8017cda:	9a03      	ldr	r2, [sp, #12]
 8017cdc:	1d11      	adds	r1, r2, #4
 8017cde:	6812      	ldr	r2, [r2, #0]
 8017ce0:	9103      	str	r1, [sp, #12]
 8017ce2:	2a00      	cmp	r2, #0
 8017ce4:	db01      	blt.n	8017cea <_vfiprintf_r+0x11e>
 8017ce6:	9207      	str	r2, [sp, #28]
 8017ce8:	e004      	b.n	8017cf4 <_vfiprintf_r+0x128>
 8017cea:	4252      	negs	r2, r2
 8017cec:	f043 0302 	orr.w	r3, r3, #2
 8017cf0:	9207      	str	r2, [sp, #28]
 8017cf2:	9304      	str	r3, [sp, #16]
 8017cf4:	f898 3000 	ldrb.w	r3, [r8]
 8017cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8017cfa:	d10e      	bne.n	8017d1a <_vfiprintf_r+0x14e>
 8017cfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017d00:	2b2a      	cmp	r3, #42	; 0x2a
 8017d02:	d138      	bne.n	8017d76 <_vfiprintf_r+0x1aa>
 8017d04:	9b03      	ldr	r3, [sp, #12]
 8017d06:	1d1a      	adds	r2, r3, #4
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	9203      	str	r2, [sp, #12]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	bfb8      	it	lt
 8017d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d14:	f108 0802 	add.w	r8, r8, #2
 8017d18:	9305      	str	r3, [sp, #20]
 8017d1a:	4d33      	ldr	r5, [pc, #204]	; (8017de8 <_vfiprintf_r+0x21c>)
 8017d1c:	f898 1000 	ldrb.w	r1, [r8]
 8017d20:	2203      	movs	r2, #3
 8017d22:	4628      	mov	r0, r5
 8017d24:	f7e8 fa74 	bl	8000210 <memchr>
 8017d28:	b140      	cbz	r0, 8017d3c <_vfiprintf_r+0x170>
 8017d2a:	2340      	movs	r3, #64	; 0x40
 8017d2c:	1b40      	subs	r0, r0, r5
 8017d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8017d32:	9b04      	ldr	r3, [sp, #16]
 8017d34:	4303      	orrs	r3, r0
 8017d36:	f108 0801 	add.w	r8, r8, #1
 8017d3a:	9304      	str	r3, [sp, #16]
 8017d3c:	f898 1000 	ldrb.w	r1, [r8]
 8017d40:	482a      	ldr	r0, [pc, #168]	; (8017dec <_vfiprintf_r+0x220>)
 8017d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d46:	2206      	movs	r2, #6
 8017d48:	f108 0701 	add.w	r7, r8, #1
 8017d4c:	f7e8 fa60 	bl	8000210 <memchr>
 8017d50:	2800      	cmp	r0, #0
 8017d52:	d037      	beq.n	8017dc4 <_vfiprintf_r+0x1f8>
 8017d54:	4b26      	ldr	r3, [pc, #152]	; (8017df0 <_vfiprintf_r+0x224>)
 8017d56:	bb1b      	cbnz	r3, 8017da0 <_vfiprintf_r+0x1d4>
 8017d58:	9b03      	ldr	r3, [sp, #12]
 8017d5a:	3307      	adds	r3, #7
 8017d5c:	f023 0307 	bic.w	r3, r3, #7
 8017d60:	3308      	adds	r3, #8
 8017d62:	9303      	str	r3, [sp, #12]
 8017d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d66:	444b      	add	r3, r9
 8017d68:	9309      	str	r3, [sp, #36]	; 0x24
 8017d6a:	e750      	b.n	8017c0e <_vfiprintf_r+0x42>
 8017d6c:	fb05 3202 	mla	r2, r5, r2, r3
 8017d70:	2001      	movs	r0, #1
 8017d72:	4688      	mov	r8, r1
 8017d74:	e78a      	b.n	8017c8c <_vfiprintf_r+0xc0>
 8017d76:	2300      	movs	r3, #0
 8017d78:	f108 0801 	add.w	r8, r8, #1
 8017d7c:	9305      	str	r3, [sp, #20]
 8017d7e:	4619      	mov	r1, r3
 8017d80:	250a      	movs	r5, #10
 8017d82:	4640      	mov	r0, r8
 8017d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d88:	3a30      	subs	r2, #48	; 0x30
 8017d8a:	2a09      	cmp	r2, #9
 8017d8c:	d903      	bls.n	8017d96 <_vfiprintf_r+0x1ca>
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d0c3      	beq.n	8017d1a <_vfiprintf_r+0x14e>
 8017d92:	9105      	str	r1, [sp, #20]
 8017d94:	e7c1      	b.n	8017d1a <_vfiprintf_r+0x14e>
 8017d96:	fb05 2101 	mla	r1, r5, r1, r2
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	4680      	mov	r8, r0
 8017d9e:	e7f0      	b.n	8017d82 <_vfiprintf_r+0x1b6>
 8017da0:	ab03      	add	r3, sp, #12
 8017da2:	9300      	str	r3, [sp, #0]
 8017da4:	4622      	mov	r2, r4
 8017da6:	4b13      	ldr	r3, [pc, #76]	; (8017df4 <_vfiprintf_r+0x228>)
 8017da8:	a904      	add	r1, sp, #16
 8017daa:	4630      	mov	r0, r6
 8017dac:	f7fb fce0 	bl	8013770 <_printf_float>
 8017db0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017db4:	4681      	mov	r9, r0
 8017db6:	d1d5      	bne.n	8017d64 <_vfiprintf_r+0x198>
 8017db8:	89a3      	ldrh	r3, [r4, #12]
 8017dba:	065b      	lsls	r3, r3, #25
 8017dbc:	f53f af7e 	bmi.w	8017cbc <_vfiprintf_r+0xf0>
 8017dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017dc2:	e77d      	b.n	8017cc0 <_vfiprintf_r+0xf4>
 8017dc4:	ab03      	add	r3, sp, #12
 8017dc6:	9300      	str	r3, [sp, #0]
 8017dc8:	4622      	mov	r2, r4
 8017dca:	4b0a      	ldr	r3, [pc, #40]	; (8017df4 <_vfiprintf_r+0x228>)
 8017dcc:	a904      	add	r1, sp, #16
 8017dce:	4630      	mov	r0, r6
 8017dd0:	f7fb ff84 	bl	8013cdc <_printf_i>
 8017dd4:	e7ec      	b.n	8017db0 <_vfiprintf_r+0x1e4>
 8017dd6:	bf00      	nop
 8017dd8:	08018d20 	.word	0x08018d20
 8017ddc:	08018e6c 	.word	0x08018e6c
 8017de0:	08018d40 	.word	0x08018d40
 8017de4:	08018d00 	.word	0x08018d00
 8017de8:	08018e72 	.word	0x08018e72
 8017dec:	08018e76 	.word	0x08018e76
 8017df0:	08013771 	.word	0x08013771
 8017df4:	08017ba7 	.word	0x08017ba7

08017df8 <_scanf_chars>:
 8017df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dfc:	4615      	mov	r5, r2
 8017dfe:	688a      	ldr	r2, [r1, #8]
 8017e00:	4680      	mov	r8, r0
 8017e02:	460c      	mov	r4, r1
 8017e04:	b932      	cbnz	r2, 8017e14 <_scanf_chars+0x1c>
 8017e06:	698a      	ldr	r2, [r1, #24]
 8017e08:	2a00      	cmp	r2, #0
 8017e0a:	bf14      	ite	ne
 8017e0c:	f04f 32ff 	movne.w	r2, #4294967295
 8017e10:	2201      	moveq	r2, #1
 8017e12:	608a      	str	r2, [r1, #8]
 8017e14:	6822      	ldr	r2, [r4, #0]
 8017e16:	06d1      	lsls	r1, r2, #27
 8017e18:	bf5f      	itttt	pl
 8017e1a:	681a      	ldrpl	r2, [r3, #0]
 8017e1c:	1d11      	addpl	r1, r2, #4
 8017e1e:	6019      	strpl	r1, [r3, #0]
 8017e20:	6817      	ldrpl	r7, [r2, #0]
 8017e22:	2600      	movs	r6, #0
 8017e24:	69a3      	ldr	r3, [r4, #24]
 8017e26:	b1db      	cbz	r3, 8017e60 <_scanf_chars+0x68>
 8017e28:	2b01      	cmp	r3, #1
 8017e2a:	d107      	bne.n	8017e3c <_scanf_chars+0x44>
 8017e2c:	682b      	ldr	r3, [r5, #0]
 8017e2e:	6962      	ldr	r2, [r4, #20]
 8017e30:	781b      	ldrb	r3, [r3, #0]
 8017e32:	5cd3      	ldrb	r3, [r2, r3]
 8017e34:	b9a3      	cbnz	r3, 8017e60 <_scanf_chars+0x68>
 8017e36:	2e00      	cmp	r6, #0
 8017e38:	d132      	bne.n	8017ea0 <_scanf_chars+0xa8>
 8017e3a:	e006      	b.n	8017e4a <_scanf_chars+0x52>
 8017e3c:	2b02      	cmp	r3, #2
 8017e3e:	d007      	beq.n	8017e50 <_scanf_chars+0x58>
 8017e40:	2e00      	cmp	r6, #0
 8017e42:	d12d      	bne.n	8017ea0 <_scanf_chars+0xa8>
 8017e44:	69a3      	ldr	r3, [r4, #24]
 8017e46:	2b01      	cmp	r3, #1
 8017e48:	d12a      	bne.n	8017ea0 <_scanf_chars+0xa8>
 8017e4a:	2001      	movs	r0, #1
 8017e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e50:	f7fe fe32 	bl	8016ab8 <__locale_ctype_ptr>
 8017e54:	682b      	ldr	r3, [r5, #0]
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	4418      	add	r0, r3
 8017e5a:	7843      	ldrb	r3, [r0, #1]
 8017e5c:	071b      	lsls	r3, r3, #28
 8017e5e:	d4ef      	bmi.n	8017e40 <_scanf_chars+0x48>
 8017e60:	6823      	ldr	r3, [r4, #0]
 8017e62:	06da      	lsls	r2, r3, #27
 8017e64:	bf5e      	ittt	pl
 8017e66:	682b      	ldrpl	r3, [r5, #0]
 8017e68:	781b      	ldrbpl	r3, [r3, #0]
 8017e6a:	703b      	strbpl	r3, [r7, #0]
 8017e6c:	682a      	ldr	r2, [r5, #0]
 8017e6e:	686b      	ldr	r3, [r5, #4]
 8017e70:	f102 0201 	add.w	r2, r2, #1
 8017e74:	602a      	str	r2, [r5, #0]
 8017e76:	68a2      	ldr	r2, [r4, #8]
 8017e78:	f103 33ff 	add.w	r3, r3, #4294967295
 8017e7c:	f102 32ff 	add.w	r2, r2, #4294967295
 8017e80:	606b      	str	r3, [r5, #4]
 8017e82:	f106 0601 	add.w	r6, r6, #1
 8017e86:	bf58      	it	pl
 8017e88:	3701      	addpl	r7, #1
 8017e8a:	60a2      	str	r2, [r4, #8]
 8017e8c:	b142      	cbz	r2, 8017ea0 <_scanf_chars+0xa8>
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	dcc8      	bgt.n	8017e24 <_scanf_chars+0x2c>
 8017e92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017e96:	4629      	mov	r1, r5
 8017e98:	4640      	mov	r0, r8
 8017e9a:	4798      	blx	r3
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d0c1      	beq.n	8017e24 <_scanf_chars+0x2c>
 8017ea0:	6823      	ldr	r3, [r4, #0]
 8017ea2:	f013 0310 	ands.w	r3, r3, #16
 8017ea6:	d105      	bne.n	8017eb4 <_scanf_chars+0xbc>
 8017ea8:	68e2      	ldr	r2, [r4, #12]
 8017eaa:	3201      	adds	r2, #1
 8017eac:	60e2      	str	r2, [r4, #12]
 8017eae:	69a2      	ldr	r2, [r4, #24]
 8017eb0:	b102      	cbz	r2, 8017eb4 <_scanf_chars+0xbc>
 8017eb2:	703b      	strb	r3, [r7, #0]
 8017eb4:	6923      	ldr	r3, [r4, #16]
 8017eb6:	441e      	add	r6, r3
 8017eb8:	6126      	str	r6, [r4, #16]
 8017eba:	2000      	movs	r0, #0
 8017ebc:	e7c6      	b.n	8017e4c <_scanf_chars+0x54>
	...

08017ec0 <_scanf_i>:
 8017ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec4:	469a      	mov	sl, r3
 8017ec6:	4b74      	ldr	r3, [pc, #464]	; (8018098 <_scanf_i+0x1d8>)
 8017ec8:	460c      	mov	r4, r1
 8017eca:	4683      	mov	fp, r0
 8017ecc:	4616      	mov	r6, r2
 8017ece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017ed2:	b087      	sub	sp, #28
 8017ed4:	ab03      	add	r3, sp, #12
 8017ed6:	68a7      	ldr	r7, [r4, #8]
 8017ed8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017edc:	4b6f      	ldr	r3, [pc, #444]	; (801809c <_scanf_i+0x1dc>)
 8017ede:	69a1      	ldr	r1, [r4, #24]
 8017ee0:	4a6f      	ldr	r2, [pc, #444]	; (80180a0 <_scanf_i+0x1e0>)
 8017ee2:	2903      	cmp	r1, #3
 8017ee4:	bf08      	it	eq
 8017ee6:	461a      	moveq	r2, r3
 8017ee8:	1e7b      	subs	r3, r7, #1
 8017eea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017eee:	bf84      	itt	hi
 8017ef0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017ef4:	60a3      	strhi	r3, [r4, #8]
 8017ef6:	6823      	ldr	r3, [r4, #0]
 8017ef8:	9200      	str	r2, [sp, #0]
 8017efa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017efe:	bf88      	it	hi
 8017f00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017f04:	f104 091c 	add.w	r9, r4, #28
 8017f08:	6023      	str	r3, [r4, #0]
 8017f0a:	bf8c      	ite	hi
 8017f0c:	197f      	addhi	r7, r7, r5
 8017f0e:	2700      	movls	r7, #0
 8017f10:	464b      	mov	r3, r9
 8017f12:	f04f 0800 	mov.w	r8, #0
 8017f16:	9301      	str	r3, [sp, #4]
 8017f18:	6831      	ldr	r1, [r6, #0]
 8017f1a:	ab03      	add	r3, sp, #12
 8017f1c:	2202      	movs	r2, #2
 8017f1e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017f22:	7809      	ldrb	r1, [r1, #0]
 8017f24:	f7e8 f974 	bl	8000210 <memchr>
 8017f28:	9b01      	ldr	r3, [sp, #4]
 8017f2a:	b330      	cbz	r0, 8017f7a <_scanf_i+0xba>
 8017f2c:	f1b8 0f01 	cmp.w	r8, #1
 8017f30:	d15a      	bne.n	8017fe8 <_scanf_i+0x128>
 8017f32:	6862      	ldr	r2, [r4, #4]
 8017f34:	b92a      	cbnz	r2, 8017f42 <_scanf_i+0x82>
 8017f36:	6822      	ldr	r2, [r4, #0]
 8017f38:	2108      	movs	r1, #8
 8017f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f3e:	6061      	str	r1, [r4, #4]
 8017f40:	6022      	str	r2, [r4, #0]
 8017f42:	6822      	ldr	r2, [r4, #0]
 8017f44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017f48:	6022      	str	r2, [r4, #0]
 8017f4a:	68a2      	ldr	r2, [r4, #8]
 8017f4c:	1e51      	subs	r1, r2, #1
 8017f4e:	60a1      	str	r1, [r4, #8]
 8017f50:	b19a      	cbz	r2, 8017f7a <_scanf_i+0xba>
 8017f52:	6832      	ldr	r2, [r6, #0]
 8017f54:	1c51      	adds	r1, r2, #1
 8017f56:	6031      	str	r1, [r6, #0]
 8017f58:	7812      	ldrb	r2, [r2, #0]
 8017f5a:	701a      	strb	r2, [r3, #0]
 8017f5c:	1c5d      	adds	r5, r3, #1
 8017f5e:	6873      	ldr	r3, [r6, #4]
 8017f60:	3b01      	subs	r3, #1
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	6073      	str	r3, [r6, #4]
 8017f66:	dc07      	bgt.n	8017f78 <_scanf_i+0xb8>
 8017f68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f6c:	4631      	mov	r1, r6
 8017f6e:	4658      	mov	r0, fp
 8017f70:	4798      	blx	r3
 8017f72:	2800      	cmp	r0, #0
 8017f74:	f040 8086 	bne.w	8018084 <_scanf_i+0x1c4>
 8017f78:	462b      	mov	r3, r5
 8017f7a:	f108 0801 	add.w	r8, r8, #1
 8017f7e:	f1b8 0f03 	cmp.w	r8, #3
 8017f82:	d1c8      	bne.n	8017f16 <_scanf_i+0x56>
 8017f84:	6862      	ldr	r2, [r4, #4]
 8017f86:	b90a      	cbnz	r2, 8017f8c <_scanf_i+0xcc>
 8017f88:	220a      	movs	r2, #10
 8017f8a:	6062      	str	r2, [r4, #4]
 8017f8c:	6862      	ldr	r2, [r4, #4]
 8017f8e:	4945      	ldr	r1, [pc, #276]	; (80180a4 <_scanf_i+0x1e4>)
 8017f90:	6960      	ldr	r0, [r4, #20]
 8017f92:	9301      	str	r3, [sp, #4]
 8017f94:	1a89      	subs	r1, r1, r2
 8017f96:	f000 f8df 	bl	8018158 <__sccl>
 8017f9a:	9b01      	ldr	r3, [sp, #4]
 8017f9c:	f04f 0800 	mov.w	r8, #0
 8017fa0:	461d      	mov	r5, r3
 8017fa2:	68a3      	ldr	r3, [r4, #8]
 8017fa4:	6822      	ldr	r2, [r4, #0]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d03a      	beq.n	8018020 <_scanf_i+0x160>
 8017faa:	6831      	ldr	r1, [r6, #0]
 8017fac:	6960      	ldr	r0, [r4, #20]
 8017fae:	f891 c000 	ldrb.w	ip, [r1]
 8017fb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	d032      	beq.n	8018020 <_scanf_i+0x160>
 8017fba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017fbe:	d121      	bne.n	8018004 <_scanf_i+0x144>
 8017fc0:	0510      	lsls	r0, r2, #20
 8017fc2:	d51f      	bpl.n	8018004 <_scanf_i+0x144>
 8017fc4:	f108 0801 	add.w	r8, r8, #1
 8017fc8:	b117      	cbz	r7, 8017fd0 <_scanf_i+0x110>
 8017fca:	3301      	adds	r3, #1
 8017fcc:	3f01      	subs	r7, #1
 8017fce:	60a3      	str	r3, [r4, #8]
 8017fd0:	6873      	ldr	r3, [r6, #4]
 8017fd2:	3b01      	subs	r3, #1
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	6073      	str	r3, [r6, #4]
 8017fd8:	dd1b      	ble.n	8018012 <_scanf_i+0x152>
 8017fda:	6833      	ldr	r3, [r6, #0]
 8017fdc:	3301      	adds	r3, #1
 8017fde:	6033      	str	r3, [r6, #0]
 8017fe0:	68a3      	ldr	r3, [r4, #8]
 8017fe2:	3b01      	subs	r3, #1
 8017fe4:	60a3      	str	r3, [r4, #8]
 8017fe6:	e7dc      	b.n	8017fa2 <_scanf_i+0xe2>
 8017fe8:	f1b8 0f02 	cmp.w	r8, #2
 8017fec:	d1ad      	bne.n	8017f4a <_scanf_i+0x8a>
 8017fee:	6822      	ldr	r2, [r4, #0]
 8017ff0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017ff4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017ff8:	d1bf      	bne.n	8017f7a <_scanf_i+0xba>
 8017ffa:	2110      	movs	r1, #16
 8017ffc:	6061      	str	r1, [r4, #4]
 8017ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018002:	e7a1      	b.n	8017f48 <_scanf_i+0x88>
 8018004:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018008:	6022      	str	r2, [r4, #0]
 801800a:	780b      	ldrb	r3, [r1, #0]
 801800c:	702b      	strb	r3, [r5, #0]
 801800e:	3501      	adds	r5, #1
 8018010:	e7de      	b.n	8017fd0 <_scanf_i+0x110>
 8018012:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018016:	4631      	mov	r1, r6
 8018018:	4658      	mov	r0, fp
 801801a:	4798      	blx	r3
 801801c:	2800      	cmp	r0, #0
 801801e:	d0df      	beq.n	8017fe0 <_scanf_i+0x120>
 8018020:	6823      	ldr	r3, [r4, #0]
 8018022:	05d9      	lsls	r1, r3, #23
 8018024:	d50c      	bpl.n	8018040 <_scanf_i+0x180>
 8018026:	454d      	cmp	r5, r9
 8018028:	d908      	bls.n	801803c <_scanf_i+0x17c>
 801802a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801802e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018032:	4632      	mov	r2, r6
 8018034:	4658      	mov	r0, fp
 8018036:	4798      	blx	r3
 8018038:	1e6f      	subs	r7, r5, #1
 801803a:	463d      	mov	r5, r7
 801803c:	454d      	cmp	r5, r9
 801803e:	d029      	beq.n	8018094 <_scanf_i+0x1d4>
 8018040:	6822      	ldr	r2, [r4, #0]
 8018042:	f012 0210 	ands.w	r2, r2, #16
 8018046:	d113      	bne.n	8018070 <_scanf_i+0x1b0>
 8018048:	702a      	strb	r2, [r5, #0]
 801804a:	6863      	ldr	r3, [r4, #4]
 801804c:	9e00      	ldr	r6, [sp, #0]
 801804e:	4649      	mov	r1, r9
 8018050:	4658      	mov	r0, fp
 8018052:	47b0      	blx	r6
 8018054:	f8da 3000 	ldr.w	r3, [sl]
 8018058:	6821      	ldr	r1, [r4, #0]
 801805a:	1d1a      	adds	r2, r3, #4
 801805c:	f8ca 2000 	str.w	r2, [sl]
 8018060:	f011 0f20 	tst.w	r1, #32
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	d010      	beq.n	801808a <_scanf_i+0x1ca>
 8018068:	6018      	str	r0, [r3, #0]
 801806a:	68e3      	ldr	r3, [r4, #12]
 801806c:	3301      	adds	r3, #1
 801806e:	60e3      	str	r3, [r4, #12]
 8018070:	eba5 0509 	sub.w	r5, r5, r9
 8018074:	44a8      	add	r8, r5
 8018076:	6925      	ldr	r5, [r4, #16]
 8018078:	4445      	add	r5, r8
 801807a:	6125      	str	r5, [r4, #16]
 801807c:	2000      	movs	r0, #0
 801807e:	b007      	add	sp, #28
 8018080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018084:	f04f 0800 	mov.w	r8, #0
 8018088:	e7ca      	b.n	8018020 <_scanf_i+0x160>
 801808a:	07ca      	lsls	r2, r1, #31
 801808c:	bf4c      	ite	mi
 801808e:	8018      	strhmi	r0, [r3, #0]
 8018090:	6018      	strpl	r0, [r3, #0]
 8018092:	e7ea      	b.n	801806a <_scanf_i+0x1aa>
 8018094:	2001      	movs	r0, #1
 8018096:	e7f2      	b.n	801807e <_scanf_i+0x1be>
 8018098:	080189c8 	.word	0x080189c8
 801809c:	080152c1 	.word	0x080152c1
 80180a0:	080182d5 	.word	0x080182d5
 80180a4:	08018e8d 	.word	0x08018e8d

080180a8 <_putc_r>:
 80180a8:	b570      	push	{r4, r5, r6, lr}
 80180aa:	460d      	mov	r5, r1
 80180ac:	4614      	mov	r4, r2
 80180ae:	4606      	mov	r6, r0
 80180b0:	b118      	cbz	r0, 80180ba <_putc_r+0x12>
 80180b2:	6983      	ldr	r3, [r0, #24]
 80180b4:	b90b      	cbnz	r3, 80180ba <_putc_r+0x12>
 80180b6:	f7fe f94b 	bl	8016350 <__sinit>
 80180ba:	4b13      	ldr	r3, [pc, #76]	; (8018108 <_putc_r+0x60>)
 80180bc:	429c      	cmp	r4, r3
 80180be:	d112      	bne.n	80180e6 <_putc_r+0x3e>
 80180c0:	6874      	ldr	r4, [r6, #4]
 80180c2:	68a3      	ldr	r3, [r4, #8]
 80180c4:	3b01      	subs	r3, #1
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	60a3      	str	r3, [r4, #8]
 80180ca:	da16      	bge.n	80180fa <_putc_r+0x52>
 80180cc:	69a2      	ldr	r2, [r4, #24]
 80180ce:	4293      	cmp	r3, r2
 80180d0:	db02      	blt.n	80180d8 <_putc_r+0x30>
 80180d2:	b2eb      	uxtb	r3, r5
 80180d4:	2b0a      	cmp	r3, #10
 80180d6:	d110      	bne.n	80180fa <_putc_r+0x52>
 80180d8:	4622      	mov	r2, r4
 80180da:	4629      	mov	r1, r5
 80180dc:	4630      	mov	r0, r6
 80180de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180e2:	f7fd b91f 	b.w	8015324 <__swbuf_r>
 80180e6:	4b09      	ldr	r3, [pc, #36]	; (801810c <_putc_r+0x64>)
 80180e8:	429c      	cmp	r4, r3
 80180ea:	d101      	bne.n	80180f0 <_putc_r+0x48>
 80180ec:	68b4      	ldr	r4, [r6, #8]
 80180ee:	e7e8      	b.n	80180c2 <_putc_r+0x1a>
 80180f0:	4b07      	ldr	r3, [pc, #28]	; (8018110 <_putc_r+0x68>)
 80180f2:	429c      	cmp	r4, r3
 80180f4:	bf08      	it	eq
 80180f6:	68f4      	ldreq	r4, [r6, #12]
 80180f8:	e7e3      	b.n	80180c2 <_putc_r+0x1a>
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	1c5a      	adds	r2, r3, #1
 80180fe:	6022      	str	r2, [r4, #0]
 8018100:	701d      	strb	r5, [r3, #0]
 8018102:	b2e8      	uxtb	r0, r5
 8018104:	bd70      	pop	{r4, r5, r6, pc}
 8018106:	bf00      	nop
 8018108:	08018d20 	.word	0x08018d20
 801810c:	08018d40 	.word	0x08018d40
 8018110:	08018d00 	.word	0x08018d00

08018114 <_read_r>:
 8018114:	b538      	push	{r3, r4, r5, lr}
 8018116:	4c07      	ldr	r4, [pc, #28]	; (8018134 <_read_r+0x20>)
 8018118:	4605      	mov	r5, r0
 801811a:	4608      	mov	r0, r1
 801811c:	4611      	mov	r1, r2
 801811e:	2200      	movs	r2, #0
 8018120:	6022      	str	r2, [r4, #0]
 8018122:	461a      	mov	r2, r3
 8018124:	f7ee f882 	bl	800622c <_read>
 8018128:	1c43      	adds	r3, r0, #1
 801812a:	d102      	bne.n	8018132 <_read_r+0x1e>
 801812c:	6823      	ldr	r3, [r4, #0]
 801812e:	b103      	cbz	r3, 8018132 <_read_r+0x1e>
 8018130:	602b      	str	r3, [r5, #0]
 8018132:	bd38      	pop	{r3, r4, r5, pc}
 8018134:	20037fc4 	.word	0x20037fc4

08018138 <_sbrk_r>:
 8018138:	b538      	push	{r3, r4, r5, lr}
 801813a:	4c06      	ldr	r4, [pc, #24]	; (8018154 <_sbrk_r+0x1c>)
 801813c:	2300      	movs	r3, #0
 801813e:	4605      	mov	r5, r0
 8018140:	4608      	mov	r0, r1
 8018142:	6023      	str	r3, [r4, #0]
 8018144:	f7ee f8c4 	bl	80062d0 <_sbrk>
 8018148:	1c43      	adds	r3, r0, #1
 801814a:	d102      	bne.n	8018152 <_sbrk_r+0x1a>
 801814c:	6823      	ldr	r3, [r4, #0]
 801814e:	b103      	cbz	r3, 8018152 <_sbrk_r+0x1a>
 8018150:	602b      	str	r3, [r5, #0]
 8018152:	bd38      	pop	{r3, r4, r5, pc}
 8018154:	20037fc4 	.word	0x20037fc4

08018158 <__sccl>:
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	780b      	ldrb	r3, [r1, #0]
 801815c:	2b5e      	cmp	r3, #94	; 0x5e
 801815e:	bf13      	iteet	ne
 8018160:	1c4a      	addne	r2, r1, #1
 8018162:	1c8a      	addeq	r2, r1, #2
 8018164:	784b      	ldrbeq	r3, [r1, #1]
 8018166:	2100      	movne	r1, #0
 8018168:	bf08      	it	eq
 801816a:	2101      	moveq	r1, #1
 801816c:	1e44      	subs	r4, r0, #1
 801816e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018172:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018176:	42ac      	cmp	r4, r5
 8018178:	d1fb      	bne.n	8018172 <__sccl+0x1a>
 801817a:	b913      	cbnz	r3, 8018182 <__sccl+0x2a>
 801817c:	3a01      	subs	r2, #1
 801817e:	4610      	mov	r0, r2
 8018180:	bd70      	pop	{r4, r5, r6, pc}
 8018182:	f081 0401 	eor.w	r4, r1, #1
 8018186:	54c4      	strb	r4, [r0, r3]
 8018188:	1c51      	adds	r1, r2, #1
 801818a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801818e:	2d2d      	cmp	r5, #45	; 0x2d
 8018190:	f101 36ff 	add.w	r6, r1, #4294967295
 8018194:	460a      	mov	r2, r1
 8018196:	d006      	beq.n	80181a6 <__sccl+0x4e>
 8018198:	2d5d      	cmp	r5, #93	; 0x5d
 801819a:	d0f0      	beq.n	801817e <__sccl+0x26>
 801819c:	b90d      	cbnz	r5, 80181a2 <__sccl+0x4a>
 801819e:	4632      	mov	r2, r6
 80181a0:	e7ed      	b.n	801817e <__sccl+0x26>
 80181a2:	462b      	mov	r3, r5
 80181a4:	e7ef      	b.n	8018186 <__sccl+0x2e>
 80181a6:	780e      	ldrb	r6, [r1, #0]
 80181a8:	2e5d      	cmp	r6, #93	; 0x5d
 80181aa:	d0fa      	beq.n	80181a2 <__sccl+0x4a>
 80181ac:	42b3      	cmp	r3, r6
 80181ae:	dcf8      	bgt.n	80181a2 <__sccl+0x4a>
 80181b0:	3301      	adds	r3, #1
 80181b2:	429e      	cmp	r6, r3
 80181b4:	54c4      	strb	r4, [r0, r3]
 80181b6:	dcfb      	bgt.n	80181b0 <__sccl+0x58>
 80181b8:	3102      	adds	r1, #2
 80181ba:	e7e6      	b.n	801818a <__sccl+0x32>

080181bc <strncmp>:
 80181bc:	b510      	push	{r4, lr}
 80181be:	b16a      	cbz	r2, 80181dc <strncmp+0x20>
 80181c0:	3901      	subs	r1, #1
 80181c2:	1884      	adds	r4, r0, r2
 80181c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80181c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80181cc:	4293      	cmp	r3, r2
 80181ce:	d103      	bne.n	80181d8 <strncmp+0x1c>
 80181d0:	42a0      	cmp	r0, r4
 80181d2:	d001      	beq.n	80181d8 <strncmp+0x1c>
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1f5      	bne.n	80181c4 <strncmp+0x8>
 80181d8:	1a98      	subs	r0, r3, r2
 80181da:	bd10      	pop	{r4, pc}
 80181dc:	4610      	mov	r0, r2
 80181de:	e7fc      	b.n	80181da <strncmp+0x1e>

080181e0 <_strtoul_l.isra.0>:
 80181e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181e4:	4680      	mov	r8, r0
 80181e6:	4689      	mov	r9, r1
 80181e8:	4692      	mov	sl, r2
 80181ea:	461e      	mov	r6, r3
 80181ec:	460f      	mov	r7, r1
 80181ee:	463d      	mov	r5, r7
 80181f0:	9808      	ldr	r0, [sp, #32]
 80181f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181f6:	f7fe fc5b 	bl	8016ab0 <__locale_ctype_ptr_l>
 80181fa:	4420      	add	r0, r4
 80181fc:	7843      	ldrb	r3, [r0, #1]
 80181fe:	f013 0308 	ands.w	r3, r3, #8
 8018202:	d130      	bne.n	8018266 <_strtoul_l.isra.0+0x86>
 8018204:	2c2d      	cmp	r4, #45	; 0x2d
 8018206:	d130      	bne.n	801826a <_strtoul_l.isra.0+0x8a>
 8018208:	787c      	ldrb	r4, [r7, #1]
 801820a:	1cbd      	adds	r5, r7, #2
 801820c:	2101      	movs	r1, #1
 801820e:	2e00      	cmp	r6, #0
 8018210:	d05c      	beq.n	80182cc <_strtoul_l.isra.0+0xec>
 8018212:	2e10      	cmp	r6, #16
 8018214:	d109      	bne.n	801822a <_strtoul_l.isra.0+0x4a>
 8018216:	2c30      	cmp	r4, #48	; 0x30
 8018218:	d107      	bne.n	801822a <_strtoul_l.isra.0+0x4a>
 801821a:	782b      	ldrb	r3, [r5, #0]
 801821c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018220:	2b58      	cmp	r3, #88	; 0x58
 8018222:	d14e      	bne.n	80182c2 <_strtoul_l.isra.0+0xe2>
 8018224:	786c      	ldrb	r4, [r5, #1]
 8018226:	2610      	movs	r6, #16
 8018228:	3502      	adds	r5, #2
 801822a:	f04f 32ff 	mov.w	r2, #4294967295
 801822e:	2300      	movs	r3, #0
 8018230:	fbb2 f2f6 	udiv	r2, r2, r6
 8018234:	fb06 fc02 	mul.w	ip, r6, r2
 8018238:	ea6f 0c0c 	mvn.w	ip, ip
 801823c:	4618      	mov	r0, r3
 801823e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018242:	2f09      	cmp	r7, #9
 8018244:	d817      	bhi.n	8018276 <_strtoul_l.isra.0+0x96>
 8018246:	463c      	mov	r4, r7
 8018248:	42a6      	cmp	r6, r4
 801824a:	dd23      	ble.n	8018294 <_strtoul_l.isra.0+0xb4>
 801824c:	2b00      	cmp	r3, #0
 801824e:	db1e      	blt.n	801828e <_strtoul_l.isra.0+0xae>
 8018250:	4282      	cmp	r2, r0
 8018252:	d31c      	bcc.n	801828e <_strtoul_l.isra.0+0xae>
 8018254:	d101      	bne.n	801825a <_strtoul_l.isra.0+0x7a>
 8018256:	45a4      	cmp	ip, r4
 8018258:	db19      	blt.n	801828e <_strtoul_l.isra.0+0xae>
 801825a:	fb00 4006 	mla	r0, r0, r6, r4
 801825e:	2301      	movs	r3, #1
 8018260:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018264:	e7eb      	b.n	801823e <_strtoul_l.isra.0+0x5e>
 8018266:	462f      	mov	r7, r5
 8018268:	e7c1      	b.n	80181ee <_strtoul_l.isra.0+0xe>
 801826a:	2c2b      	cmp	r4, #43	; 0x2b
 801826c:	bf04      	itt	eq
 801826e:	1cbd      	addeq	r5, r7, #2
 8018270:	787c      	ldrbeq	r4, [r7, #1]
 8018272:	4619      	mov	r1, r3
 8018274:	e7cb      	b.n	801820e <_strtoul_l.isra.0+0x2e>
 8018276:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801827a:	2f19      	cmp	r7, #25
 801827c:	d801      	bhi.n	8018282 <_strtoul_l.isra.0+0xa2>
 801827e:	3c37      	subs	r4, #55	; 0x37
 8018280:	e7e2      	b.n	8018248 <_strtoul_l.isra.0+0x68>
 8018282:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018286:	2f19      	cmp	r7, #25
 8018288:	d804      	bhi.n	8018294 <_strtoul_l.isra.0+0xb4>
 801828a:	3c57      	subs	r4, #87	; 0x57
 801828c:	e7dc      	b.n	8018248 <_strtoul_l.isra.0+0x68>
 801828e:	f04f 33ff 	mov.w	r3, #4294967295
 8018292:	e7e5      	b.n	8018260 <_strtoul_l.isra.0+0x80>
 8018294:	2b00      	cmp	r3, #0
 8018296:	da09      	bge.n	80182ac <_strtoul_l.isra.0+0xcc>
 8018298:	2322      	movs	r3, #34	; 0x22
 801829a:	f8c8 3000 	str.w	r3, [r8]
 801829e:	f04f 30ff 	mov.w	r0, #4294967295
 80182a2:	f1ba 0f00 	cmp.w	sl, #0
 80182a6:	d107      	bne.n	80182b8 <_strtoul_l.isra.0+0xd8>
 80182a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182ac:	b101      	cbz	r1, 80182b0 <_strtoul_l.isra.0+0xd0>
 80182ae:	4240      	negs	r0, r0
 80182b0:	f1ba 0f00 	cmp.w	sl, #0
 80182b4:	d0f8      	beq.n	80182a8 <_strtoul_l.isra.0+0xc8>
 80182b6:	b10b      	cbz	r3, 80182bc <_strtoul_l.isra.0+0xdc>
 80182b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80182bc:	f8ca 9000 	str.w	r9, [sl]
 80182c0:	e7f2      	b.n	80182a8 <_strtoul_l.isra.0+0xc8>
 80182c2:	2430      	movs	r4, #48	; 0x30
 80182c4:	2e00      	cmp	r6, #0
 80182c6:	d1b0      	bne.n	801822a <_strtoul_l.isra.0+0x4a>
 80182c8:	2608      	movs	r6, #8
 80182ca:	e7ae      	b.n	801822a <_strtoul_l.isra.0+0x4a>
 80182cc:	2c30      	cmp	r4, #48	; 0x30
 80182ce:	d0a4      	beq.n	801821a <_strtoul_l.isra.0+0x3a>
 80182d0:	260a      	movs	r6, #10
 80182d2:	e7aa      	b.n	801822a <_strtoul_l.isra.0+0x4a>

080182d4 <_strtoul_r>:
 80182d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182d6:	4c06      	ldr	r4, [pc, #24]	; (80182f0 <_strtoul_r+0x1c>)
 80182d8:	4d06      	ldr	r5, [pc, #24]	; (80182f4 <_strtoul_r+0x20>)
 80182da:	6824      	ldr	r4, [r4, #0]
 80182dc:	6a24      	ldr	r4, [r4, #32]
 80182de:	2c00      	cmp	r4, #0
 80182e0:	bf08      	it	eq
 80182e2:	462c      	moveq	r4, r5
 80182e4:	9400      	str	r4, [sp, #0]
 80182e6:	f7ff ff7b 	bl	80181e0 <_strtoul_l.isra.0>
 80182ea:	b003      	add	sp, #12
 80182ec:	bd30      	pop	{r4, r5, pc}
 80182ee:	bf00      	nop
 80182f0:	2000000c 	.word	0x2000000c
 80182f4:	20000070 	.word	0x20000070

080182f8 <__submore>:
 80182f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182fc:	460c      	mov	r4, r1
 80182fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018304:	4299      	cmp	r1, r3
 8018306:	d11d      	bne.n	8018344 <__submore+0x4c>
 8018308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801830c:	f7ff f8de 	bl	80174cc <_malloc_r>
 8018310:	b918      	cbnz	r0, 801831a <__submore+0x22>
 8018312:	f04f 30ff 	mov.w	r0, #4294967295
 8018316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801831a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801831e:	63a3      	str	r3, [r4, #56]	; 0x38
 8018320:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018324:	6360      	str	r0, [r4, #52]	; 0x34
 8018326:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801832a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801832e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018332:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018336:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801833a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801833e:	6020      	str	r0, [r4, #0]
 8018340:	2000      	movs	r0, #0
 8018342:	e7e8      	b.n	8018316 <__submore+0x1e>
 8018344:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018346:	0077      	lsls	r7, r6, #1
 8018348:	463a      	mov	r2, r7
 801834a:	f000 f85a 	bl	8018402 <_realloc_r>
 801834e:	4605      	mov	r5, r0
 8018350:	2800      	cmp	r0, #0
 8018352:	d0de      	beq.n	8018312 <__submore+0x1a>
 8018354:	eb00 0806 	add.w	r8, r0, r6
 8018358:	4601      	mov	r1, r0
 801835a:	4632      	mov	r2, r6
 801835c:	4640      	mov	r0, r8
 801835e:	f7fb f95f 	bl	8013620 <memcpy>
 8018362:	f8c4 8000 	str.w	r8, [r4]
 8018366:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801836a:	e7e9      	b.n	8018340 <__submore+0x48>

0801836c <__ascii_wctomb>:
 801836c:	b149      	cbz	r1, 8018382 <__ascii_wctomb+0x16>
 801836e:	2aff      	cmp	r2, #255	; 0xff
 8018370:	bf85      	ittet	hi
 8018372:	238a      	movhi	r3, #138	; 0x8a
 8018374:	6003      	strhi	r3, [r0, #0]
 8018376:	700a      	strbls	r2, [r1, #0]
 8018378:	f04f 30ff 	movhi.w	r0, #4294967295
 801837c:	bf98      	it	ls
 801837e:	2001      	movls	r0, #1
 8018380:	4770      	bx	lr
 8018382:	4608      	mov	r0, r1
 8018384:	4770      	bx	lr
	...

08018388 <_fstat_r>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	4c07      	ldr	r4, [pc, #28]	; (80183a8 <_fstat_r+0x20>)
 801838c:	2300      	movs	r3, #0
 801838e:	4605      	mov	r5, r0
 8018390:	4608      	mov	r0, r1
 8018392:	4611      	mov	r1, r2
 8018394:	6023      	str	r3, [r4, #0]
 8018396:	f7ed ff72 	bl	800627e <_fstat>
 801839a:	1c43      	adds	r3, r0, #1
 801839c:	d102      	bne.n	80183a4 <_fstat_r+0x1c>
 801839e:	6823      	ldr	r3, [r4, #0]
 80183a0:	b103      	cbz	r3, 80183a4 <_fstat_r+0x1c>
 80183a2:	602b      	str	r3, [r5, #0]
 80183a4:	bd38      	pop	{r3, r4, r5, pc}
 80183a6:	bf00      	nop
 80183a8:	20037fc4 	.word	0x20037fc4

080183ac <_isatty_r>:
 80183ac:	b538      	push	{r3, r4, r5, lr}
 80183ae:	4c06      	ldr	r4, [pc, #24]	; (80183c8 <_isatty_r+0x1c>)
 80183b0:	2300      	movs	r3, #0
 80183b2:	4605      	mov	r5, r0
 80183b4:	4608      	mov	r0, r1
 80183b6:	6023      	str	r3, [r4, #0]
 80183b8:	f7ed ff71 	bl	800629e <_isatty>
 80183bc:	1c43      	adds	r3, r0, #1
 80183be:	d102      	bne.n	80183c6 <_isatty_r+0x1a>
 80183c0:	6823      	ldr	r3, [r4, #0]
 80183c2:	b103      	cbz	r3, 80183c6 <_isatty_r+0x1a>
 80183c4:	602b      	str	r3, [r5, #0]
 80183c6:	bd38      	pop	{r3, r4, r5, pc}
 80183c8:	20037fc4 	.word	0x20037fc4

080183cc <memmove>:
 80183cc:	4288      	cmp	r0, r1
 80183ce:	b510      	push	{r4, lr}
 80183d0:	eb01 0302 	add.w	r3, r1, r2
 80183d4:	d807      	bhi.n	80183e6 <memmove+0x1a>
 80183d6:	1e42      	subs	r2, r0, #1
 80183d8:	4299      	cmp	r1, r3
 80183da:	d00a      	beq.n	80183f2 <memmove+0x26>
 80183dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80183e4:	e7f8      	b.n	80183d8 <memmove+0xc>
 80183e6:	4283      	cmp	r3, r0
 80183e8:	d9f5      	bls.n	80183d6 <memmove+0xa>
 80183ea:	1881      	adds	r1, r0, r2
 80183ec:	1ad2      	subs	r2, r2, r3
 80183ee:	42d3      	cmn	r3, r2
 80183f0:	d100      	bne.n	80183f4 <memmove+0x28>
 80183f2:	bd10      	pop	{r4, pc}
 80183f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80183fc:	e7f7      	b.n	80183ee <memmove+0x22>

080183fe <__malloc_lock>:
 80183fe:	4770      	bx	lr

08018400 <__malloc_unlock>:
 8018400:	4770      	bx	lr

08018402 <_realloc_r>:
 8018402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018404:	4607      	mov	r7, r0
 8018406:	4614      	mov	r4, r2
 8018408:	460e      	mov	r6, r1
 801840a:	b921      	cbnz	r1, 8018416 <_realloc_r+0x14>
 801840c:	4611      	mov	r1, r2
 801840e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018412:	f7ff b85b 	b.w	80174cc <_malloc_r>
 8018416:	b922      	cbnz	r2, 8018422 <_realloc_r+0x20>
 8018418:	f7ff f80a 	bl	8017430 <_free_r>
 801841c:	4625      	mov	r5, r4
 801841e:	4628      	mov	r0, r5
 8018420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018422:	f000 f814 	bl	801844e <_malloc_usable_size_r>
 8018426:	42a0      	cmp	r0, r4
 8018428:	d20f      	bcs.n	801844a <_realloc_r+0x48>
 801842a:	4621      	mov	r1, r4
 801842c:	4638      	mov	r0, r7
 801842e:	f7ff f84d 	bl	80174cc <_malloc_r>
 8018432:	4605      	mov	r5, r0
 8018434:	2800      	cmp	r0, #0
 8018436:	d0f2      	beq.n	801841e <_realloc_r+0x1c>
 8018438:	4631      	mov	r1, r6
 801843a:	4622      	mov	r2, r4
 801843c:	f7fb f8f0 	bl	8013620 <memcpy>
 8018440:	4631      	mov	r1, r6
 8018442:	4638      	mov	r0, r7
 8018444:	f7fe fff4 	bl	8017430 <_free_r>
 8018448:	e7e9      	b.n	801841e <_realloc_r+0x1c>
 801844a:	4635      	mov	r5, r6
 801844c:	e7e7      	b.n	801841e <_realloc_r+0x1c>

0801844e <_malloc_usable_size_r>:
 801844e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018452:	1f18      	subs	r0, r3, #4
 8018454:	2b00      	cmp	r3, #0
 8018456:	bfbc      	itt	lt
 8018458:	580b      	ldrlt	r3, [r1, r0]
 801845a:	18c0      	addlt	r0, r0, r3
 801845c:	4770      	bx	lr
	...

08018460 <_init>:
 8018460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018462:	bf00      	nop
 8018464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018466:	bc08      	pop	{r3}
 8018468:	469e      	mov	lr, r3
 801846a:	4770      	bx	lr

0801846c <_fini>:
 801846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801846e:	bf00      	nop
 8018470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018472:	bc08      	pop	{r3}
 8018474:	469e      	mov	lr, r3
 8018476:	4770      	bx	lr
