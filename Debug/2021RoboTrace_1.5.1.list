
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122d8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08012498  08012498  00022498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012dac  08012dac  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012dac  08012dac  00022dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012db4  08012db4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012db4  08012db4  00022db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012db8  08012db8  00022db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012dbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b68  200001dc  08012f98  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d44  08012f98  00034d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023167  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044f7  00000000  00000000  00053373  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001be8  00000000  00000000  00057870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  00059458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031b1c  00000000  00000000  0005ae50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018fde  00000000  00000000  0008c96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107203  00000000  00000000  000a594a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001acb4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b3c  00000000  00000000  001acbc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012480 	.word	0x08012480

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08012480 	.word	0x08012480

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f003 fce6 	bl	80049a8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002904 	.word	0x20002904

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f003 fcce 	bl	80049a8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20002904 	.word	0x20002904

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f003 fb57 	bl	80046d4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f002 f8be 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f002 f8b8 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f002 f8b2 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f002 f8ac 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f002 f8a6 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f002 f8a0 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f002 f89a 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f002 f894 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f002 f88e 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f002 f888 	bl	80031a8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f002 f87c 	bl	80031a8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f002 f876 	bl	80031a8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f00e f92d 	bl	800f388 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(char *p_folder_name, char *p_file_name, short size, int *data, char state){
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 f8cc 	bl	8001308 <create_path>

	if(state == OVER_WRITE){
 8001170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001178:	481e      	ldr	r0, [pc, #120]	; (80011f4 <sd_write_array_int+0xa0>)
 800117a:	f00b fcd8 	bl	800cb2e <f_chdir>
		f_unlink(filepath);	//一回消す
 800117e:	481e      	ldr	r0, [pc, #120]	; (80011f8 <sd_write_array_int+0xa4>)
 8001180:	f00b ff43 	bl	800d00a <f_unlink>
		f_chdir("..");
 8001184:	481d      	ldr	r0, [pc, #116]	; (80011fc <sd_write_array_int+0xa8>)
 8001186:	f00b fcd2 	bl	800cb2e <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 800118a:	f000 f8d3 	bl	8001334 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800118e:	2300      	movs	r3, #0
 8001190:	82fb      	strh	r3, [r7, #22]
 8001192:	e021      	b.n	80011d8 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <sd_write_array_int+0xac>)
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <sd_write_array_int+0xb0>)
 80011a6:	f00d f95d 	bl	800e464 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <sd_write_array_int+0xb4>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <sd_write_array_int+0xb4>)
 80011b2:	f00b fd06 	bl	800cbc2 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80011b6:	4813      	ldr	r0, [pc, #76]	; (8001204 <sd_write_array_int+0xb0>)
 80011b8:	f7ff f822 	bl	8000200 <strlen>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <sd_write_array_int+0xb8>)
 80011c0:	4910      	ldr	r1, [pc, #64]	; (8001204 <sd_write_array_int+0xb0>)
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <sd_write_array_int+0xb4>)
 80011c4:	f00b fa77 	bl	800c6b6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80011c8:	f000 f8ce 	bl	8001368 <bufclear>
	for(short i = 0 ; i < size; i++){
 80011cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	82fb      	strh	r3, [r7, #22]
 80011d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbd7      	blt.n	8001194 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <sd_write_array_int+0xb4>)
 80011e6:	f00b fc78 	bl	800cada <f_close>

	return ret;
 80011ea:	7d7b      	ldrb	r3, [r7, #21]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200015c0 	.word	0x200015c0
 80011f8:	2000047c 	.word	0x2000047c
 80011fc:	080124a0 	.word	0x080124a0
 8001200:	080124a4 	.word	0x080124a4
 8001204:	200016c0 	.word	0x200016c0
 8001208:	20001750 	.word	0x20001750
 800120c:	20001740 	.word	0x20001740

08001210 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(char *p_folder_name, char *p_file_name, short size, int *data){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f86c 	bl	8001308 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001230:	f000 f880 	bl	8001334 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001234:	e019      	b.n	800126a <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 8001236:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4913      	ldr	r1, [pc, #76]	; (8001290 <sd_read_array_int+0x80>)
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <sd_read_array_int+0x84>)
 8001246:	f00d f961 	bl	800e50c <siscanf>
		i++;
 800124a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800125a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125e:	429a      	cmp	r2, r3
 8001260:	db03      	blt.n	800126a <sd_read_array_int+0x5a>
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	3b01      	subs	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <sd_read_array_int+0x88>)
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <sd_read_array_int+0x84>)
 8001270:	f00c f8a6 	bl	800d3c0 <f_gets>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1dd      	bne.n	8001236 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800127a:	f000 f875 	bl	8001368 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <sd_read_array_int+0x88>)
 8001280:	f00b fc2b 	bl	800cada <f_close>

	return ret;
 8001284:	7d7b      	ldrb	r3, [r7, #21]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	080124a8 	.word	0x080124a8
 8001294:	200016c0 	.word	0x200016c0
 8001298:	20001750 	.word	0x20001750

0800129c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80012a6:	2201      	movs	r2, #1
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <sd_mount+0x30>)
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <sd_mount+0x34>)
 80012ac:	f00a fe92 	bl	800bfd4 <f_mount>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <sd_mount+0x20>
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e001      	b.n	80012c0 <sd_mount+0x24>
	else ret = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	080124ac 	.word	0x080124ac
 80012d0:	2000057c 	.word	0x2000057c

080012d4 <sd_unmount>:
//* 役割　：　SDカードをアンマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_unmount(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]

	if(f_mount(NULL, "", 1) == FR_OK) ret = 1;
 80012de:	2201      	movs	r2, #1
 80012e0:	4908      	ldr	r1, [pc, #32]	; (8001304 <sd_unmount+0x30>)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f00a fe76 	bl	800bfd4 <f_mount>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <sd_unmount+0x20>
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <sd_unmount+0x24>
	else ret = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	080124ac 	.word	0x080124ac

08001308 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char *p_folder_name, char *p_file_name){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <create_path+0x24>)
 8001316:	f00d f968 	bl	800e5ea <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <create_path+0x28>)
 800131e:	f00d f964 	bl	800e5ea <strcpy>

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200015c0 	.word	0x200015c0
 8001330:	2000047c 	.word	0x2000047c

08001334 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <fopen_folder_and_file+0x24>)
 800133a:	f00b ff27 	bl	800d18c <f_mkdir>

	f_chdir(dirpath);
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <fopen_folder_and_file+0x24>)
 8001340:	f00b fbf5 	bl	800cb2e <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001344:	2213      	movs	r2, #19
 8001346:	4905      	ldr	r1, [pc, #20]	; (800135c <fopen_folder_and_file+0x28>)
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <fopen_folder_and_file+0x2c>)
 800134a:	f00a fe89 	bl	800c060 <f_open>

	f_chdir("..");
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <fopen_folder_and_file+0x30>)
 8001350:	f00b fbed 	bl	800cb2e <f_chdir>


}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200015c0 	.word	0x200015c0
 800135c:	2000047c 	.word	0x2000047c
 8001360:	20001750 	.word	0x20001750
 8001364:	080124a0 	.word	0x080124a0

08001368 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	e007      	b.n	8001384 <bufclear+0x1c>
		buffer[i] = '\0';
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <bufclear+0x30>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b7f      	cmp	r3, #127	; 0x7f
 8001388:	ddf4      	ble.n	8001374 <bufclear+0xc>
	}
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200016c0 	.word	0x200016c0

0800139c <_ZN10LineSensor8ADCStartEv>:
#include "Macro.h"

int analog[AD_DATA_SIZE];

void LineSensor::ADCStart()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	printf("class test\n");
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <_ZN10LineSensor8ADCStartEv+0x20>)
 80013a6:	f00d f84f 	bl	800e448 <puts>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog, 14);
 80013aa:	220e      	movs	r2, #14
 80013ac:	4904      	ldr	r1, [pc, #16]	; (80013c0 <_ZN10LineSensor8ADCStartEv+0x24>)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <_ZN10LineSensor8ADCStartEv+0x28>)
 80013b0:	f001 ff60 	bl	8003274 <HAL_ADC_Start_DMA>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	080124b0 	.word	0x080124b0
 80013c0:	200001f8 	.word	0x200001f8
 80013c4:	200028bc 	.word	0x200028bc

080013c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013f0:	e000      	b.n	80013f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f9      	beq.n	80013f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e009      	b.n	800143c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffc9 	bl	80013c8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf1      	blt.n	8001428 <_write+0x12>
  }
  return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  //HAL_Delay(1);
  printf("EXTI callback called!\r\n");
 800145a:	4813      	ldr	r0, [pc, #76]	; (80014a8 <HAL_GPIO_EXTI_Callback+0x58>)
 800145c:	f00c fff4 	bl	800e448 <puts>
  if (GPIO_Pin == GPIO_PIN_0)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <HAL_GPIO_EXTI_Callback+0x1c>
    printf("gpio0 pushed!\r\n");
 8001466:	4811      	ldr	r0, [pc, #68]	; (80014ac <HAL_GPIO_EXTI_Callback+0x5c>)
 8001468:	f00c ffee 	bl	800e448 <puts>
  if (GPIO_Pin == GPIO_PIN_2)
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	2b04      	cmp	r3, #4
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_EXTI_Callback+0x28>
    printf("gpio2 pushed!\r\n");
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001474:	f00c ffe8 	bl	800e448 <puts>
  if (GPIO_Pin == GPIO_PIN_7)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d102      	bne.n	8001484 <HAL_GPIO_EXTI_Callback+0x34>
      printf("gpio7 pushed!\r\n");
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001480:	f00c ffe2 	bl	800e448 <puts>
  if (GPIO_Pin == GPIO_PIN_8)
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800148a:	d102      	bne.n	8001492 <HAL_GPIO_EXTI_Callback+0x42>
      printf("gpio8 pushed!\r\n");
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x68>)
 800148e:	f00c ffdb 	bl	800e448 <puts>
  if (GPIO_Pin == GPIO_PIN_10)
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d102      	bne.n	80014a0 <HAL_GPIO_EXTI_Callback+0x50>
      printf("gpio10 pushed!\r\n");
 800149a:	4808      	ldr	r0, [pc, #32]	; (80014bc <HAL_GPIO_EXTI_Callback+0x6c>)
 800149c:	f00c ffd4 	bl	800e448 <puts>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	080124bc 	.word	0x080124bc
 80014ac:	080124d4 	.word	0x080124d4
 80014b0:	080124e4 	.word	0x080124e4
 80014b4:	080124f4 	.word	0x080124f4
 80014b8:	08012504 	.word	0x08012504
 80014bc:	08012514 	.word	0x08012514

080014c0 <init>:
	side =  getSideSensor();
}
*/

void init()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af02      	add	r7, sp, #8
	// ------initialize------//
	  //PWM start
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK){
 80014c6:	2108      	movs	r1, #8
 80014c8:	4829      	ldr	r0, [pc, #164]	; (8001570 <init+0xb0>)
 80014ca:	f005 fffb 	bl	80074c4 <HAL_TIM_PWM_Start>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <init+0x18>
		Error_Handler();
 80014d4:	f000 ffc8 	bl	8002468 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK){
 80014d8:	210c      	movs	r1, #12
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <init+0xb0>)
 80014dc:	f005 fff2 	bl	80074c4 <HAL_TIM_PWM_Start>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <init+0x2a>
		Error_Handler();
 80014e6:	f000 ffbf 	bl	8002468 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK){
	      Error_Handler();
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 65535);
	*/
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f0:	4820      	ldr	r0, [pc, #128]	; (8001574 <init+0xb4>)
 80014f2:	f003 f8ef 	bl	80046d4 <HAL_GPIO_WritePin>

	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80014f6:	213c      	movs	r1, #60	; 0x3c
 80014f8:	481f      	ldr	r0, [pc, #124]	; (8001578 <init+0xb8>)
 80014fa:	f006 f8b3 	bl	8007664 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80014fe:	213c      	movs	r1, #60	; 0x3c
 8001500:	481e      	ldr	r0, [pc, #120]	; (800157c <init+0xbc>)
 8001502:	f006 f8af 	bl	8007664 <HAL_TIM_Encoder_Start>

	//Timer intrruptin start
	HAL_TIM_Base_Start_IT(&htim6);
 8001506:	481e      	ldr	r0, [pc, #120]	; (8001580 <init+0xc0>)
 8001508:	f005 ff8d 	bl	8007426 <HAL_TIM_Base_Start_IT>


	lcd_init();
 800150c:	f7ff fd84 	bl	8001018 <lcd_init>


	if(sd_mount() == 1){
 8001510:	f7ff fec4 	bl	800129c <sd_mount>
 8001514:	4603      	mov	r3, r0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d103      	bne.n	8001522 <init+0x62>
	  printf("mount success\r\n");
 800151a:	481a      	ldr	r0, [pc, #104]	; (8001584 <init+0xc4>)
 800151c:	f00c ff94 	bl	800e448 <puts>
 8001520:	e002      	b.n	8001528 <init+0x68>
	}
	else{
	  printf("error\r\n");
 8001522:	4819      	ldr	r0, [pc, #100]	; (8001588 <init+0xc8>)
 8001524:	f00c ff90 	bl	800e448 <puts>
	}

	data[0] = 30;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <init+0xcc>)
 800152a:	221e      	movs	r2, #30
 800152c:	601a      	str	r2, [r3, #0]

	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 800152e:	2301      	movs	r3, #1
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <init+0xcc>)
 8001534:	2201      	movs	r2, #1
 8001536:	4916      	ldr	r1, [pc, #88]	; (8001590 <init+0xd0>)
 8001538:	4816      	ldr	r0, [pc, #88]	; (8001594 <init+0xd4>)
 800153a:	f7ff fe0b 	bl	8001154 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <init+0xd8>)
 8001540:	2201      	movs	r2, #1
 8001542:	4913      	ldr	r1, [pc, #76]	; (8001590 <init+0xd0>)
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <init+0xd4>)
 8001546:	f7ff fe63 	bl	8001210 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 800154a:	2301      	movs	r3, #1
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <init+0xd8>)
 8001550:	2201      	movs	r2, #1
 8001552:	4912      	ldr	r1, [pc, #72]	; (800159c <init+0xdc>)
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <init+0xd4>)
 8001556:	f7ff fdfd 	bl	8001154 <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 800155a:	4811      	ldr	r0, [pc, #68]	; (80015a0 <init+0xe0>)
 800155c:	f00c ff74 	bl	800e448 <puts>
	sd_unmount();
 8001560:	f7ff feb8 	bl	80012d4 <sd_unmount>

	ADCStart();
 8001564:	f001 fd78 	bl	8003058 <ADCStart>
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000287c 	.word	0x2000287c
 8001574:	40021000 	.word	0x40021000
 8001578:	20002b20 	.word	0x20002b20
 800157c:	2000283c 	.word	0x2000283c
 8001580:	20002ae0 	.word	0x20002ae0
 8001584:	08012524 	.word	0x08012524
 8001588:	08012534 	.word	0x08012534
 800158c:	20002adc 	.word	0x20002adc
 8001590:	0801253c 	.word	0x0801253c
 8001594:	08012548 	.word	0x08012548
 8001598:	200029ec 	.word	0x200029ec
 800159c:	08012550 	.word	0x08012550
 80015a0:	0801255c 	.word	0x0801255c

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015aa:	f001 fd8b 	bl	80030c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ae:	f000 f895 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b2:	f000 fe05 	bl	80021c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b6:	f000 fdd3 	bl	8002160 <MX_DMA_Init>
  MX_I2C2_Init();
 80015ba:	f000 fa53 	bl	8001a64 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80015be:	f000 fa7f 	bl	8001ac0 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80015c2:	f000 fa9d 	bl	8001b00 <MX_SPI2_Init>
  MX_TIM1_Init();
 80015c6:	f000 fad1 	bl	8001b6c <MX_TIM1_Init>
  MX_TIM4_Init();
 80015ca:	f000 fbdb 	bl	8001d84 <MX_TIM4_Init>
  MX_TIM8_Init();
 80015ce:	f000 fca9 	bl	8001f24 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80015d2:	f000 fd9b 	bl	800210c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80015d6:	f007 ff03 	bl	80093e0 <MX_FATFS_Init>
  MX_TIM6_Init();
 80015da:	f000 fc37 	bl	8001e4c <MX_TIM6_Init>
  MX_TIM7_Init();
 80015de:	f000 fc6b 	bl	8001eb8 <MX_TIM7_Init>
  MX_I2C1_Init();
 80015e2:	f000 fa11 	bl	8001a08 <MX_I2C1_Init>
  MX_TIM3_Init();
 80015e6:	f000 fb69 	bl	8001cbc <MX_TIM3_Init>
  MX_TIM10_Init();
 80015ea:	f000 fcf3 	bl	8001fd4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80015ee:	f000 fd3f 	bl	8002070 <MX_TIM11_Init>
  MX_ADC2_Init();
 80015f2:	f000 f901 	bl	80017f8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 80015f6:	f7ff ff63 	bl	80014c0 <init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // L chika
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	482a      	ldr	r0, [pc, #168]	; (80016ac <main+0x108>)
 8001602:	f003 f867 	bl	80046d4 <HAL_GPIO_WritePin>

	  //Motor
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 800);
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <main+0x10c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 200);
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <main+0x10c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	22c8      	movs	r2, #200	; 0xc8
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	4825      	ldr	r0, [pc, #148]	; (80016b4 <main+0x110>)
 8001620:	f003 f858 	bl	80046d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <main+0x110>)
 800162c:	f003 f852 	bl	80046d4 <HAL_GPIO_WritePin>

	  //printf("Timer: %d\n", timer);

	  HAL_Delay(1000);
 8001630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001634:	f001 fdb8 	bl	80031a8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163e:	481b      	ldr	r0, [pc, #108]	; (80016ac <main+0x108>)
 8001640:	f003 f848 	bl	80046d4 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164a:	481a      	ldr	r0, [pc, #104]	; (80016b4 <main+0x110>)
 800164c:	f003 f842 	bl	80046d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001656:	4817      	ldr	r0, [pc, #92]	; (80016b4 <main+0x110>)
 8001658:	f003 f83c 	bl	80046d4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800165c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001660:	f001 fda2 	bl	80031a8 <HAL_Delay>

	  //printf("AD: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", analog[0], analog[1], analog[2], analog[3], analog[4], analog[5], analog[6],
		//	  analog[7], analog[8], analog[9], analog[10], analog[11], analog[12], analog[13]);
	  printf("AD: %d, %d, %d, %d\n", ad1, ad2, ad3, ad4);
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <main+0x114>)
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <main+0x118>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <main+0x11c>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <main+0x120>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4603      	mov	r3, r0
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <main+0x124>)
 800167a:	f00c fe71 	bl	800e360 <iprintf>

	  lcd_clear();
 800167e:	f7ff fd0f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fd1b 	bl	80010c0 <lcd_locate>
	  lcd_printf("LCD");
 800168a:	4810      	ldr	r0, [pc, #64]	; (80016cc <main+0x128>)
 800168c:	f7ff fd42 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8001690:	2101      	movs	r1, #1
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fd14 	bl	80010c0 <lcd_locate>
	  lcd_printf("TEST");
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <main+0x12c>)
 800169a:	f7ff fd3b 	bl	8001114 <lcd_printf>


	  printf("side: %d\n", side);
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <main+0x130>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <main+0x134>)
 80016a6:	f00c fe5b 	bl	800e360 <iprintf>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80016aa:	e7a6      	b.n	80015fa <main+0x56>
 80016ac:	40020000 	.word	0x40020000
 80016b0:	2000287c 	.word	0x2000287c
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	20002a34 	.word	0x20002a34
 80016bc:	20002a78 	.word	0x20002a78
 80016c0:	20002be4 	.word	0x20002be4
 80016c4:	200029f0 	.word	0x200029f0
 80016c8:	0801257c 	.word	0x0801257c
 80016cc:	08012590 	.word	0x08012590
 80016d0:	08012594 	.word	0x08012594
 80016d4:	200027e0 	.word	0x200027e0
 80016d8:	0801259c 	.word	0x0801259c

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0a4      	sub	sp, #144	; 0x90
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016e6:	2234      	movs	r2, #52	; 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00b fff2 	bl	800d6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	223c      	movs	r2, #60	; 0x3c
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00b ffe3 	bl	800d6d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <SystemClock_Config+0x114>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <SystemClock_Config+0x114>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <SystemClock_Config+0x114>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <SystemClock_Config+0x118>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <SystemClock_Config+0x118>)
 8001734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <SystemClock_Config+0x118>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001746:	2301      	movs	r3, #1
 8001748:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001750:	2302      	movs	r3, #2
 8001752:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001758:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800175a:	2308      	movs	r3, #8
 800175c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800175e:	23b4      	movs	r3, #180	; 0xb4
 8001760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800176a:	2308      	movs	r3, #8
 800176c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001776:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800177a:	4618      	mov	r0, r3
 800177c:	f004 f89a 	bl	80058b4 <HAL_RCC_OscConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001786:	f000 fe6f 	bl	8002468 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800178a:	f003 fc15 	bl	8004fb8 <HAL_PWREx_EnableOverDrive>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001794:	f000 fe68 	bl	8002468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ae:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017b4:	2105      	movs	r1, #5
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fc4e 	bl	8005058 <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80017c2:	f000 fe51 	bl	8002468 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80017c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80017cc:	2300      	movs	r3, #0
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80017d0:	2300      	movs	r3, #0
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fe2d 	bl	8005438 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80017e4:	f000 fe40 	bl	8002468 <Error_Handler>
  }
}
 80017e8:	bf00      	nop
 80017ea:	3790      	adds	r7, #144	; 0x90
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000

080017f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800180a:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <MX_ADC2_Init+0x204>)
 800180c:	4a7c      	ldr	r2, [pc, #496]	; (8001a00 <MX_ADC2_Init+0x208>)
 800180e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001810:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <MX_ADC2_Init+0x204>)
 8001812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001816:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001818:	4b78      	ldr	r3, [pc, #480]	; (80019fc <MX_ADC2_Init+0x204>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800181e:	4b77      	ldr	r3, [pc, #476]	; (80019fc <MX_ADC2_Init+0x204>)
 8001820:	2201      	movs	r2, #1
 8001822:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <MX_ADC2_Init+0x204>)
 8001826:	2201      	movs	r2, #1
 8001828:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800182a:	4b74      	ldr	r3, [pc, #464]	; (80019fc <MX_ADC2_Init+0x204>)
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <MX_ADC2_Init+0x204>)
 8001834:	2200      	movs	r2, #0
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <MX_ADC2_Init+0x204>)
 800183a:	4a72      	ldr	r2, [pc, #456]	; (8001a04 <MX_ADC2_Init+0x20c>)
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183e:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <MX_ADC2_Init+0x204>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8001844:	4b6d      	ldr	r3, [pc, #436]	; (80019fc <MX_ADC2_Init+0x204>)
 8001846:	220e      	movs	r2, #14
 8001848:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800184a:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <MX_ADC2_Init+0x204>)
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <MX_ADC2_Init+0x204>)
 8001854:	2201      	movs	r2, #1
 8001856:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001858:	4868      	ldr	r0, [pc, #416]	; (80019fc <MX_ADC2_Init+0x204>)
 800185a:	f001 fcc7 	bl	80031ec <HAL_ADC_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001864:	f000 fe00 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001868:	230a      	movs	r3, #10
 800186a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001870:	2306      	movs	r3, #6
 8001872:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4860      	ldr	r0, [pc, #384]	; (80019fc <MX_ADC2_Init+0x204>)
 800187a:	f001 fe0b 	bl	8003494 <HAL_ADC_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001884:	f000 fdf0 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001888:	230b      	movs	r3, #11
 800188a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4619      	mov	r1, r3
 8001894:	4859      	ldr	r0, [pc, #356]	; (80019fc <MX_ADC2_Init+0x204>)
 8001896:	f001 fdfd 	bl	8003494 <HAL_ADC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80018a0:	f000 fde2 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018a4:	230c      	movs	r3, #12
 80018a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018a8:	2303      	movs	r3, #3
 80018aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4852      	ldr	r0, [pc, #328]	; (80019fc <MX_ADC2_Init+0x204>)
 80018b2:	f001 fdef 	bl	8003494 <HAL_ADC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80018bc:	f000 fdd4 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018c0:	230d      	movs	r3, #13
 80018c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	484b      	ldr	r0, [pc, #300]	; (80019fc <MX_ADC2_Init+0x204>)
 80018ce:	f001 fde1 	bl	8003494 <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80018d8:	f000 fdc6 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018dc:	2300      	movs	r3, #0
 80018de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80018e0:	2305      	movs	r3, #5
 80018e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	4844      	ldr	r0, [pc, #272]	; (80019fc <MX_ADC2_Init+0x204>)
 80018ea:	f001 fdd3 	bl	8003494 <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80018f4:	f000 fdb8 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80018fc:	2306      	movs	r3, #6
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	483d      	ldr	r0, [pc, #244]	; (80019fc <MX_ADC2_Init+0x204>)
 8001906:	f001 fdc5 	bl	8003494 <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001910:	f000 fdaa 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001914:	2302      	movs	r3, #2
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001918:	2307      	movs	r3, #7
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4836      	ldr	r0, [pc, #216]	; (80019fc <MX_ADC2_Init+0x204>)
 8001922:	f001 fdb7 	bl	8003494 <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800192c:	f000 fd9c 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001930:	2303      	movs	r3, #3
 8001932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001934:	2308      	movs	r3, #8
 8001936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	482f      	ldr	r0, [pc, #188]	; (80019fc <MX_ADC2_Init+0x204>)
 800193e:	f001 fda9 	bl	8003494 <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8001948:	f000 fd8e 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800194c:	2304      	movs	r3, #4
 800194e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001950:	2309      	movs	r3, #9
 8001952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	4828      	ldr	r0, [pc, #160]	; (80019fc <MX_ADC2_Init+0x204>)
 800195a:	f001 fd9b 	bl	8003494 <HAL_ADC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8001964:	f000 fd80 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001968:	2305      	movs	r3, #5
 800196a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800196c:	230a      	movs	r3, #10
 800196e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <MX_ADC2_Init+0x204>)
 8001976:	f001 fd8d 	bl	8003494 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8001980:	f000 fd72 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001984:	2306      	movs	r3, #6
 8001986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001988:	230b      	movs	r3, #11
 800198a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	481a      	ldr	r0, [pc, #104]	; (80019fc <MX_ADC2_Init+0x204>)
 8001992:	f001 fd7f 	bl	8003494 <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800199c:	f000 fd64 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019a0:	2307      	movs	r3, #7
 80019a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80019a4:	230c      	movs	r3, #12
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <MX_ADC2_Init+0x204>)
 80019ae:	f001 fd71 	bl	8003494 <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80019b8:	f000 fd56 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019bc:	2308      	movs	r3, #8
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80019c0:	230d      	movs	r3, #13
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <MX_ADC2_Init+0x204>)
 80019ca:	f001 fd63 	bl	8003494 <HAL_ADC_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80019d4:	f000 fd48 	bl	8002468 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019d8:	2309      	movs	r3, #9
 80019da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80019dc:	230e      	movs	r3, #14
 80019de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_ADC2_Init+0x204>)
 80019e6:	f001 fd55 	bl	8003494 <HAL_ADC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80019f0:	f000 fd3a 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200028bc 	.word	0x200028bc
 8001a00:	40012100 	.word	0x40012100
 8001a04:	0f000001 	.word	0x0f000001

08001a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <MX_I2C1_Init+0x54>)
 8001a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a14:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_I2C1_Init+0x58>)
 8001a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <MX_I2C1_Init+0x50>)
 8001a46:	f002 fe77 	bl	8004738 <HAL_I2C_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a50:	f000 fd0a 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20002904 	.word	0x20002904
 8001a5c:	40005400 	.word	0x40005400
 8001a60:	000186a0 	.word	0x000186a0

08001a64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <MX_I2C2_Init+0x54>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_I2C2_Init+0x58>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_I2C2_Init+0x50>)
 8001aa2:	f002 fe49 	bl	8004738 <HAL_I2C_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001aac:	f000 fcdc 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20002998 	.word	0x20002998
 8001ab8:	40005800 	.word	0x40005800
 8001abc:	000186a0 	.word	0x000186a0

08001ac0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001ac6:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <MX_SDIO_SD_Init+0x3c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <MX_SDIO_SD_Init+0x38>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	20002b60 	.word	0x20002b60
 8001afc:	40012c00 	.word	0x40012c00

08001b00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <MX_SPI2_Init+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_SPI2_Init+0x64>)
 8001b52:	f005 fbd9 	bl	8007308 <HAL_SPI_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b5c:	f000 fc84 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200027e4 	.word	0x200027e4
 8001b68:	40003800 	.word	0x40003800

08001b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09a      	sub	sp, #104	; 0x68
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00b fdaa 	bl	800d6d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00b fd95 	bl	800d6d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bac:	4a42      	ldr	r2, [pc, #264]	; (8001cb8 <MX_TIM1_Init+0x14c>)
 8001bae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd0:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bd6:	4837      	ldr	r0, [pc, #220]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001bd8:	f005 fc49 	bl	800746e <HAL_TIM_PWM_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001be2:	f000 fc41 	bl	8002468 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001be6:	2303      	movs	r3, #3
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4828      	ldr	r0, [pc, #160]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c12:	f005 fc95 	bl	8007540 <HAL_TIM_Encoder_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001c1c:	f000 fc24 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4821      	ldr	r0, [pc, #132]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c30:	f006 f9c6 	bl	8007fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8001c3a:	f000 fc15 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2360      	movs	r3, #96	; 0x60
 8001c40:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	2208      	movs	r2, #8
 8001c60:	4619      	mov	r1, r3
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c64:	f005 fe3e 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001c6e:	f000 fbfb 	bl	8002468 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c90:	463b      	mov	r3, r7
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001c96:	f006 fa0f 	bl	80080b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001ca0:	f000 fbe2 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM1_Init+0x148>)
 8001ca6:	f000 ff99 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3768      	adds	r7, #104	; 0x68
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20002b20 	.word	0x20002b20
 8001cb8:	40010000 	.word	0x40010000

08001cbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	615a      	str	r2, [r3, #20]
 8001cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <MX_TIM3_Init+0xc4>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d04:	481d      	ldr	r0, [pc, #116]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001d06:	f005 fbb2 	bl	800746e <HAL_TIM_PWM_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d10:	f000 fbaa 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4619      	mov	r1, r3
 8001d22:	4816      	ldr	r0, [pc, #88]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001d24:	f006 f94c 	bl	8007fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d2e:	f000 fb9b 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d32:	2360      	movs	r3, #96	; 0x60
 8001d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001d4a:	f005 fdcb 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d54:	f000 fb88 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4807      	ldr	r0, [pc, #28]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001d60:	f005 fdc0 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d6a:	f000 fb7d 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <MX_TIM3_Init+0xc0>)
 8001d70:	f000 ff34 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200029f4 	.word	0x200029f4
 8001d80:	40000400 	.word	0x40000400

08001d84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <MX_TIM4_Init+0xc4>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001dba:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001dbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dcc:	481d      	ldr	r0, [pc, #116]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001dce:	f005 fb4e 	bl	800746e <HAL_TIM_PWM_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001dd8:	f000 fb46 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	4619      	mov	r1, r3
 8001dea:	4816      	ldr	r0, [pc, #88]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001dec:	f006 f8e8 	bl	8007fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001df6:	f000 fb37 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001e12:	f005 fd67 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001e1c:	f000 fb24 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	220c      	movs	r2, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001e28:	f005 fd5c 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001e32:	f000 fb19 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM4_Init+0xc0>)
 8001e38:	f000 fed0 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000287c 	.word	0x2000287c
 8001e48:	40000800 	.word	0x40000800

08001e4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	463b      	mov	r3, r7
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e5c:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <MX_TIM6_Init+0x68>)
 8001e5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e62:	2259      	movs	r2, #89	; 0x59
 8001e64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e7c:	f005 faa8 	bl	80073d0 <HAL_TIM_Base_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e86:	f000 faef 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_TIM6_Init+0x64>)
 8001e98:	f006 f892 	bl	8007fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001ea2:	f000 fae1 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20002ae0 	.word	0x20002ae0
 8001eb4:	40001000 	.word	0x40001000

08001eb8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001ec8:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <MX_TIM7_Init+0x68>)
 8001eca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ede:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ee6:	480d      	ldr	r0, [pc, #52]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001ee8:	f005 fa72 	bl	80073d0 <HAL_TIM_Base_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ef2:	f000 fab9 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_TIM7_Init+0x64>)
 8001f04:	f006 f85c 	bl	8007fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f0e:	f000 faab 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20002c88 	.word	0x20002c88
 8001f20:	40001400 	.word	0x40001400

08001f24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00b fbce 	bl	800d6d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <MX_TIM8_Init+0xac>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	4619      	mov	r1, r3
 8001f96:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001f98:	f005 fad2 	bl	8007540 <HAL_TIM_Encoder_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001fa2:	f000 fa61 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_TIM8_Init+0xa8>)
 8001fb4:	f006 f804 	bl	8007fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001fbe:	f000 fa53 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3730      	adds	r7, #48	; 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000283c 	.word	0x2000283c
 8001fd0:	40010400 	.word	0x40010400

08001fd4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_TIM10_Init+0x94>)
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <MX_TIM10_Init+0x98>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM10_Init+0x94>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_TIM10_Init+0x94>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM10_Init+0x94>)
 8002000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002004:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_TIM10_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_TIM10_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002012:	4815      	ldr	r0, [pc, #84]	; (8002068 <MX_TIM10_Init+0x94>)
 8002014:	f005 f9dc 	bl	80073d0 <HAL_TIM_Base_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800201e:	f000 fa23 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002022:	4811      	ldr	r0, [pc, #68]	; (8002068 <MX_TIM10_Init+0x94>)
 8002024:	f005 fa23 	bl	800746e <HAL_TIM_PWM_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800202e:	f000 fa1b 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002032:	2360      	movs	r3, #96	; 0x60
 8002034:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM10_Init+0x94>)
 800204a:	f005 fc4b 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002054:	f000 fa08 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM10_Init+0x94>)
 800205a:	f000 fdbf 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20002958 	.word	0x20002958
 800206c:	40014400 	.word	0x40014400

08002070 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <MX_TIM11_Init+0x94>)
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <MX_TIM11_Init+0x98>)
 800208c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <MX_TIM11_Init+0x94>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_TIM11_Init+0x94>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_TIM11_Init+0x94>)
 800209c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_TIM11_Init+0x94>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MX_TIM11_Init+0x94>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80020ae:	4815      	ldr	r0, [pc, #84]	; (8002104 <MX_TIM11_Init+0x94>)
 80020b0:	f005 f98e 	bl	80073d0 <HAL_TIM_Base_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80020ba:	f000 f9d5 	bl	8002468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80020be:	4811      	ldr	r0, [pc, #68]	; (8002104 <MX_TIM11_Init+0x94>)
 80020c0:	f005 f9d5 	bl	800746e <HAL_TIM_PWM_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f000 f9cd 	bl	8002468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ce:	2360      	movs	r3, #96	; 0x60
 80020d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	4807      	ldr	r0, [pc, #28]	; (8002104 <MX_TIM11_Init+0x94>)
 80020e6:	f005 fbfd 	bl	80078e4 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80020f0:	f000 f9ba 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <MX_TIM11_Init+0x94>)
 80020f6:	f000 fd71 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20002a38 	.word	0x20002a38
 8002108:	40014800 	.word	0x40014800

0800210c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART2_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART2_UART_Init+0x4c>)
 8002144:	f006 f81e 	bl	8008184 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f000 f98b 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20002be8 	.word	0x20002be8
 800215c:	40004400 	.word	0x40004400

08002160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <MX_DMA_Init+0x5c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <MX_DMA_Init+0x5c>)
 8002170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_DMA_Init+0x5c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	203a      	movs	r0, #58	; 0x3a
 8002188:	f001 fd0f 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800218c:	203a      	movs	r0, #58	; 0x3a
 800218e:	f001 fd28 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	203b      	movs	r0, #59	; 0x3b
 8002198:	f001 fd07 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800219c:	203b      	movs	r0, #59	; 0x3b
 800219e:	f001 fd20 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2045      	movs	r0, #69	; 0x45
 80021a8:	f001 fcff 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80021ac:	2045      	movs	r0, #69	; 0x45
 80021ae:	f001 fd18 	bl	8003be2 <HAL_NVIC_EnableIRQ>

}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	4b9c      	ldr	r3, [pc, #624]	; (800244c <MX_GPIO_Init+0x28c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a9b      	ldr	r2, [pc, #620]	; (800244c <MX_GPIO_Init+0x28c>)
 80021e0:	f043 0310 	orr.w	r3, r3, #16
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b99      	ldr	r3, [pc, #612]	; (800244c <MX_GPIO_Init+0x28c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	4b95      	ldr	r3, [pc, #596]	; (800244c <MX_GPIO_Init+0x28c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a94      	ldr	r2, [pc, #592]	; (800244c <MX_GPIO_Init+0x28c>)
 80021fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b92      	ldr	r3, [pc, #584]	; (800244c <MX_GPIO_Init+0x28c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b8e      	ldr	r3, [pc, #568]	; (800244c <MX_GPIO_Init+0x28c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a8d      	ldr	r2, [pc, #564]	; (800244c <MX_GPIO_Init+0x28c>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <MX_GPIO_Init+0x28c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b87      	ldr	r3, [pc, #540]	; (800244c <MX_GPIO_Init+0x28c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a86      	ldr	r2, [pc, #536]	; (800244c <MX_GPIO_Init+0x28c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b84      	ldr	r3, [pc, #528]	; (800244c <MX_GPIO_Init+0x28c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b80      	ldr	r3, [pc, #512]	; (800244c <MX_GPIO_Init+0x28c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a7f      	ldr	r2, [pc, #508]	; (800244c <MX_GPIO_Init+0x28c>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b7d      	ldr	r3, [pc, #500]	; (800244c <MX_GPIO_Init+0x28c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	4b79      	ldr	r3, [pc, #484]	; (800244c <MX_GPIO_Init+0x28c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a78      	ldr	r2, [pc, #480]	; (800244c <MX_GPIO_Init+0x28c>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b76      	ldr	r3, [pc, #472]	; (800244c <MX_GPIO_Init+0x28c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002284:	4872      	ldr	r0, [pc, #456]	; (8002450 <MX_GPIO_Init+0x290>)
 8002286:	f002 fa25 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002290:	4870      	ldr	r0, [pc, #448]	; (8002454 <MX_GPIO_Init+0x294>)
 8002292:	f002 fa1f 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800229c:	486e      	ldr	r0, [pc, #440]	; (8002458 <MX_GPIO_Init+0x298>)
 800229e:	f002 fa19 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80022a8:	486c      	ldr	r0, [pc, #432]	; (800245c <MX_GPIO_Init+0x29c>)
 80022aa:	f002 fa13 	bl	80046d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ae:	2304      	movs	r3, #4
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	4863      	ldr	r0, [pc, #396]	; (8002450 <MX_GPIO_Init+0x290>)
 80022c2:	f002 f845 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022c6:	230f      	movs	r3, #15
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ca:	2303      	movs	r3, #3
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	4861      	ldr	r0, [pc, #388]	; (8002460 <MX_GPIO_Init+0x2a0>)
 80022da:	f002 f839 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022de:	23e1      	movs	r3, #225	; 0xe1
 80022e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	485a      	ldr	r0, [pc, #360]	; (800245c <MX_GPIO_Init+0x29c>)
 80022f2:	f002 f82d 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	4852      	ldr	r0, [pc, #328]	; (8002454 <MX_GPIO_Init+0x294>)
 800230a:	f002 f821 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800230e:	2304      	movs	r3, #4
 8002310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <MX_GPIO_Init+0x2a4>)
 8002314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002316:	2301      	movs	r3, #1
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	4619      	mov	r1, r3
 8002320:	484c      	ldr	r0, [pc, #304]	; (8002454 <MX_GPIO_Init+0x294>)
 8002322:	f002 f815 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002326:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800232a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <MX_GPIO_Init+0x2a4>)
 800232e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002330:	2301      	movs	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4845      	ldr	r0, [pc, #276]	; (8002450 <MX_GPIO_Init+0x290>)
 800233c:	f002 f808 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	483d      	ldr	r0, [pc, #244]	; (8002450 <MX_GPIO_Init+0x290>)
 800235a:	f001 fff9 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800235e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4837      	ldr	r0, [pc, #220]	; (8002454 <MX_GPIO_Init+0x294>)
 8002378:	f001 ffea 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800237c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002380:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002386:	2301      	movs	r3, #1
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4831      	ldr	r0, [pc, #196]	; (8002458 <MX_GPIO_Init+0x298>)
 8002392:	f001 ffdd 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800239a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	482a      	ldr	r0, [pc, #168]	; (8002458 <MX_GPIO_Init+0x298>)
 80023b0:	f001 ffce 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80023b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4823      	ldr	r0, [pc, #140]	; (800245c <MX_GPIO_Init+0x29c>)
 80023ce:	f001 ffbf 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	481d      	ldr	r0, [pc, #116]	; (800245c <MX_GPIO_Init+0x29c>)
 80023e8:	f001 ffb2 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ec:	2301      	movs	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MX_GPIO_Init+0x2a4>)
 80023f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	4619      	mov	r1, r3
 80023fe:	4816      	ldr	r0, [pc, #88]	; (8002458 <MX_GPIO_Init+0x298>)
 8002400:	f001 ffa6 	bl	8004350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	2006      	movs	r0, #6
 800240a:	f001 fbce 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800240e:	2006      	movs	r0, #6
 8002410:	f001 fbe7 	bl	8003be2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2008      	movs	r0, #8
 800241a:	f001 fbc6 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800241e:	2008      	movs	r0, #8
 8002420:	f001 fbdf 	bl	8003be2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2017      	movs	r0, #23
 800242a:	f001 fbbe 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800242e:	2017      	movs	r0, #23
 8002430:	f001 fbd7 	bl	8003be2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	2028      	movs	r0, #40	; 0x28
 800243a:	f001 fbb6 	bl	8003baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800243e:	2028      	movs	r0, #40	; 0x28
 8002440:	f001 fbcf 	bl	8003be2 <HAL_NVIC_EnableIRQ>

}
 8002444:	bf00      	nop
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	40021000 	.word	0x40021000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40020000 	.word	0x40020000
 8002460:	40020800 	.word	0x40020800
 8002464:	10210000 	.word	0x10210000

08002468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246e:	e7fe      	b.n	800246e <Error_Handler+0x6>

08002470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_MspInit+0x4c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_MspInit+0x4c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <HAL_ADC_MspInit+0x148>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	f040 808e 	bne.w	8002600 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_ADC_MspInit+0x14c>)
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_ADC_MspInit+0x14c>)
 80024ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f2:	6453      	str	r3, [r2, #68]	; 0x44
 80024f4:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_ADC_MspInit+0x14c>)
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_ADC_MspInit+0x14c>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4a40      	ldr	r2, [pc, #256]	; (800260c <HAL_ADC_MspInit+0x14c>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6313      	str	r3, [r2, #48]	; 0x30
 8002510:	4b3e      	ldr	r3, [pc, #248]	; (800260c <HAL_ADC_MspInit+0x14c>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_ADC_MspInit+0x14c>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_ADC_MspInit+0x14c>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_ADC_MspInit+0x14c>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_ADC_MspInit+0x14c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_ADC_MspInit+0x14c>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_ADC_MspInit+0x14c>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002554:	230f      	movs	r3, #15
 8002556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002558:	2303      	movs	r3, #3
 800255a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	482a      	ldr	r0, [pc, #168]	; (8002610 <HAL_ADC_MspInit+0x150>)
 8002568:	f001 fef2 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800256c:	23ff      	movs	r3, #255	; 0xff
 800256e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002570:	2303      	movs	r3, #3
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	4825      	ldr	r0, [pc, #148]	; (8002614 <HAL_ADC_MspInit+0x154>)
 8002580:	f001 fee6 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002584:	2303      	movs	r3, #3
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002588:	2303      	movs	r3, #3
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4820      	ldr	r0, [pc, #128]	; (8002618 <HAL_ADC_MspInit+0x158>)
 8002598:	f001 feda 	bl	8004350 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800259c:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_ADC_MspInit+0x15c>)
 800259e:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_ADC_MspInit+0x160>)
 80025a0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025bc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025cc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025dc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025e6:	f001 fb17 	bl	8003c18 <HAL_DMA_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80025f0:	f7ff ff3a 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_ADC_MspInit+0x15c>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40012100 	.word	0x40012100
 800260c:	40023800 	.word	0x40023800
 8002610:	40020800 	.word	0x40020800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	20002c28 	.word	0x20002c28
 8002620:	40026440 	.word	0x40026440

08002624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a32      	ldr	r2, [pc, #200]	; (800270c <HAL_I2C_MspInit+0xe8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12c      	bne.n	80026a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_I2C_MspInit+0xec>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_I2C_MspInit+0xec>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <HAL_I2C_MspInit+0xec>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002666:	2312      	movs	r3, #18
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800266a:	2301      	movs	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002672:	2304      	movs	r3, #4
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	4619      	mov	r1, r3
 800267c:	4825      	ldr	r0, [pc, #148]	; (8002714 <HAL_I2C_MspInit+0xf0>)
 800267e:	f001 fe67 	bl	8004350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_I2C_MspInit+0xec>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_I2C_MspInit+0xec>)
 800268c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_I2C_MspInit+0xec>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800269e:	e031      	b.n	8002704 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_I2C_MspInit+0xf4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d12c      	bne.n	8002704 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <HAL_I2C_MspInit+0xec>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_I2C_MspInit+0xec>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_I2C_MspInit+0xec>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026cc:	2312      	movs	r3, #18
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026d8:	2304      	movs	r3, #4
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	4619      	mov	r1, r3
 80026e2:	480c      	ldr	r0, [pc, #48]	; (8002714 <HAL_I2C_MspInit+0xf0>)
 80026e4:	f001 fe34 	bl	8004350 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_I2C_MspInit+0xec>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_I2C_MspInit+0xec>)
 80026f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_I2C_MspInit+0xec>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	bf00      	nop
 8002706:	3730      	adds	r7, #48	; 0x30
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40005400 	.word	0x40005400
 8002710:	40023800 	.word	0x40023800
 8002714:	40020400 	.word	0x40020400
 8002718:	40005800 	.word	0x40005800

0800271c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a69      	ldr	r2, [pc, #420]	; (80028e0 <HAL_SD_MspInit+0x1c4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	f040 80cb 	bne.w	80028d6 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	4a66      	ldr	r2, [pc, #408]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 800274a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800274e:	6453      	str	r3, [r2, #68]	; 0x44
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	4b60      	ldr	r3, [pc, #384]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	4a5f      	ldr	r2, [pc, #380]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6313      	str	r3, [r2, #48]	; 0x30
 800276c:	4b5d      	ldr	r3, [pc, #372]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b56      	ldr	r3, [pc, #344]	; (80028e4 <HAL_SD_MspInit+0x1c8>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002794:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002798:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80027a6:	230c      	movs	r3, #12
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	484d      	ldr	r0, [pc, #308]	; (80028e8 <HAL_SD_MspInit+0x1cc>)
 80027b2:	f001 fdcd 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027b6:	2304      	movs	r3, #4
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80027c6:	230c      	movs	r3, #12
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4846      	ldr	r0, [pc, #280]	; (80028ec <HAL_SD_MspInit+0x1d0>)
 80027d2:	f001 fdbd 	bl	8004350 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 80027d8:	4a46      	ldr	r2, [pc, #280]	; (80028f4 <HAL_SD_MspInit+0x1d8>)
 80027da:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80027dc:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 80027de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 80027f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 80027fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 8002802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002806:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 800280a:	2220      	movs	r2, #32
 800280c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 8002810:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002814:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 8002818:	2204      	movs	r2, #4
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 800281e:	2203      	movs	r2, #3
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002822:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 8002824:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 800282c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002832:	482f      	ldr	r0, [pc, #188]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 8002834:	f001 f9f0 	bl	8003c18 <HAL_DMA_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800283e:	f7ff fe13 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
 8002848:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <HAL_SD_MspInit+0x1d4>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002850:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_SD_MspInit+0x1e0>)
 8002852:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800285a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002864:	2200      	movs	r2, #0
 8002866:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 800286a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002876:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 800287a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800287e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002882:	2220      	movs	r2, #32
 8002884:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800288c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002890:	2204      	movs	r2, #4
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 8002896:	2203      	movs	r2, #3
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 800289c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 80028a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80028aa:	4813      	ldr	r0, [pc, #76]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 80028ac:	f001 f9b4 	bl	8003c18 <HAL_DMA_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80028b6:	f7ff fdd7 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 80028be:	63da      	str	r2, [r3, #60]	; 0x3c
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <HAL_SD_MspInit+0x1dc>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2031      	movs	r0, #49	; 0x31
 80028cc:	f001 f96d 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80028d0:	2031      	movs	r0, #49	; 0x31
 80028d2:	f001 f986 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	; 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	20002780 	.word	0x20002780
 80028f4:	40026458 	.word	0x40026458
 80028f8:	20002a7c 	.word	0x20002a7c
 80028fc:	400264a0 	.word	0x400264a0

08002900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_SPI_MspInit+0x84>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12c      	bne.n	800297c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_SPI_MspInit+0x88>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800295a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800296c:	2305      	movs	r3, #5
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_SPI_MspInit+0x8c>)
 8002978:	f001 fcea 	bl	8004350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40003800 	.word	0x40003800
 8002988:	40023800 	.word	0x40023800
 800298c:	40020400 	.word	0x40020400

08002990 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <HAL_TIM_PWM_MspInit+0xd4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12d      	bne.n	8002a0e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80029ea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	4819      	ldr	r0, [pc, #100]	; (8002a6c <HAL_TIM_PWM_MspInit+0xdc>)
 8002a08:	f001 fca2 	bl	8004350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a0c:	e026      	b.n	8002a5c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_TIM_PWM_MspInit+0xe0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10e      	bne.n	8002a36 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	6413      	str	r3, [r2, #64]	; 0x40
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	e012      	b.n	8002a5c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_TIM_PWM_MspInit+0xe4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10d      	bne.n	8002a5c <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3730      	adds	r7, #48	; 0x30
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <HAL_TIM_Base_MspInit+0xc0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d116      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2036      	movs	r0, #54	; 0x36
 8002aac:	f001 f87d 	bl	8003baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ab0:	2036      	movs	r0, #54	; 0x36
 8002ab2:	f001 f896 	bl	8003be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002ab6:	e03a      	b.n	8002b2e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <HAL_TIM_Base_MspInit+0xc8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002acc:	f043 0320 	orr.w	r3, r3, #32
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
}
 8002ade:	e026      	b.n	8002b2e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_TIM_Base_MspInit+0xcc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	e012      	b.n	8002b2e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_TIM_Base_MspInit+0xd0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10d      	bne.n	8002b2e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_TIM_Base_MspInit+0xc4>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40001000 	.word	0x40001000
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40001400 	.word	0x40001400
 8002b44:	40014400 	.word	0x40014400
 8002b48:	40014800 	.word	0x40014800

08002b4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12b      	bne.n	8002bc6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ba6:	23c0      	movs	r3, #192	; 0xc0
 8002ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bc2:	f001 fbc5 	bl	8004350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40010400 	.word	0x40010400
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020800 	.word	0x40020800

08002bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08c      	sub	sp, #48	; 0x30
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a5c      	ldr	r2, [pc, #368]	; (8002d6c <HAL_TIM_MspPostInit+0x190>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d11f      	bne.n	8002c3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c08:	f043 0310 	orr.w	r3, r3, #16
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	484f      	ldr	r0, [pc, #316]	; (8002d74 <HAL_TIM_MspPostInit+0x198>)
 8002c38:	f001 fb8a 	bl	8004350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002c3c:	e091      	b.n	8002d62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a4d      	ldr	r2, [pc, #308]	; (8002d78 <HAL_TIM_MspPostInit+0x19c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d11e      	bne.n	8002c86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a47      	ldr	r2, [pc, #284]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c64:	2330      	movs	r3, #48	; 0x30
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c74:	2302      	movs	r3, #2
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	483f      	ldr	r0, [pc, #252]	; (8002d7c <HAL_TIM_MspPostInit+0x1a0>)
 8002c80:	f001 fb66 	bl	8004350 <HAL_GPIO_Init>
}
 8002c84:	e06d      	b.n	8002d62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	; (8002d80 <HAL_TIM_MspPostInit+0x1a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d11f      	bne.n	8002cd0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4a35      	ldr	r2, [pc, #212]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002cac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc2:	f107 031c 	add.w	r3, r7, #28
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	482e      	ldr	r0, [pc, #184]	; (8002d84 <HAL_TIM_MspPostInit+0x1a8>)
 8002cca:	f001 fb41 	bl	8004350 <HAL_GPIO_Init>
}
 8002cce:	e048      	b.n	8002d62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <HAL_TIM_MspPostInit+0x1ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d11f      	bne.n	8002d1a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	481a      	ldr	r0, [pc, #104]	; (8002d7c <HAL_TIM_MspPostInit+0x1a0>)
 8002d14:	f001 fb1c 	bl	8004350 <HAL_GPIO_Init>
}
 8002d18:	e023      	b.n	8002d62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_TIM_MspPostInit+0x1b0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11e      	bne.n	8002d62 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	6313      	str	r3, [r2, #48]	; 0x30
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_TIM_MspPostInit+0x194>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d52:	2303      	movs	r3, #3
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4807      	ldr	r0, [pc, #28]	; (8002d7c <HAL_TIM_MspPostInit+0x1a0>)
 8002d5e:	f001 faf7 	bl	8004350 <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40014400 	.word	0x40014400
 8002d8c:	40014800 	.word	0x40014800

08002d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_UART_MspInit+0x84>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d12b      	bne.n	8002e0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002dea:	2360      	movs	r3, #96	; 0x60
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <HAL_UART_MspInit+0x8c>)
 8002e06:	f001 faa3 	bl	8004350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40004400 	.word	0x40004400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020c00 	.word	0x40020c00

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <NMI_Handler+0x4>

08002e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <HardFault_Handler+0x4>

08002e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <MemManage_Handler+0x4>

08002e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e36:	e7fe      	b.n	8002e36 <BusFault_Handler+0x4>

08002e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <UsageFault_Handler+0x4>

08002e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6c:	f000 f97c 	bl	8003168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f001 fc45 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e86:	2004      	movs	r0, #4
 8002e88:	f001 fc3e 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002e94:	2080      	movs	r0, #128	; 0x80
 8002e96:	f001 fc37 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e9e:	f001 fc33 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002eaa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002eae:	f001 fc2b 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <SDIO_IRQHandler+0x10>)
 8002ebe:	f003 f99f 	bl	8006200 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20002b60 	.word	0x20002b60

08002ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <TIM6_DAC_IRQHandler+0x10>)
 8002ed2:	f004 fbfe 	bl	80076d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20002ae0 	.word	0x20002ae0

08002ee0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <DMA2_Stream2_IRQHandler+0x10>)
 8002ee6:	f000 ffbf 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20002c28 	.word	0x20002c28

08002ef4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <DMA2_Stream3_IRQHandler+0x10>)
 8002efa:	f000 ffb5 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20002780 	.word	0x20002780

08002f08 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <DMA2_Stream6_IRQHandler+0x10>)
 8002f0e:	f000 ffab 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20002a7c 	.word	0x20002a7c

08002f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f2e:	f3af 8000 	nop.w
 8002f32:	4601      	mov	r1, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dbf0      	blt.n	8002f2e <_read+0x12>
	}

return len;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <_isatty>:

int _isatty(int file)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
	return 1;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	return 0;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <_sbrk+0x5c>)
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <_sbrk+0x60>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <_sbrk+0x64>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <_sbrk+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff0:	f00a fb46 	bl	800d680 <__errno>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	230c      	movs	r3, #12
 8002ff8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e009      	b.n	8003014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <_sbrk+0x64>)
 8003010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20050000 	.word	0x20050000
 8003020:	00000400 	.word	0x00000400
 8003024:	20000230 	.word	0x20000230
 8003028:	20004d48 	.word	0x20004d48

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <SystemInit+0x28>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <SystemInit+0x28>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <SystemInit+0x28>)
 8003042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003046:	609a      	str	r2, [r3, #8]
#endif
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <ADCStart>:
 */

#include "wrapper.hpp"
#include "LineSensor.hpp"

void ADCStart(void) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
    LineSensor instance;

    instance.ADCStart();
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe f99b 	bl	800139c <_ZN10LineSensor8ADCStartEv>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003074:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003076:	e003      	b.n	8003080 <LoopCopyDataInit>

08003078 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800307a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800307c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800307e:	3104      	adds	r1, #4

08003080 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003080:	480b      	ldr	r0, [pc, #44]	; (80030b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003084:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003086:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003088:	d3f6      	bcc.n	8003078 <CopyDataInit>
  ldr  r2, =_sbss
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800308c:	e002      	b.n	8003094 <LoopFillZerobss>

0800308e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800308e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003090:	f842 3b04 	str.w	r3, [r2], #4

08003094 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003096:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003098:	d3f9      	bcc.n	800308e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800309a:	f7ff ffc7 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309e:	f00a faf5 	bl	800d68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030a2:	f7fe fa7f 	bl	80015a4 <main>
  bx  lr    
 80030a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030a8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80030ac:	08012dbc 	.word	0x08012dbc
  ldr  r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030b4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80030b8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80030bc:	20004d44 	.word	0x20004d44

080030c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c0:	e7fe      	b.n	80030c0 <ADC_IRQHandler>
	...

080030c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <HAL_Init+0x40>)
 80030ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_Init+0x40>)
 80030da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_Init+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_Init+0x40>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ec:	2003      	movs	r0, #3
 80030ee:	f000 fd51 	bl	8003b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f000 f808 	bl	8003108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f8:	f7ff f9ba 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_InitTick+0x54>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_InitTick+0x58>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800311e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fd69 	bl	8003bfe <HAL_SYSTICK_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00e      	b.n	8003154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b0f      	cmp	r3, #15
 800313a:	d80a      	bhi.n	8003152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800313c:	2200      	movs	r2, #0
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f000 fd31 	bl	8003baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003148:	4a06      	ldr	r2, [pc, #24]	; (8003164 <HAL_InitTick+0x5c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000000 	.word	0x20000000
 8003160:	20000008 	.word	0x20000008
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_IncTick+0x20>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_IncTick+0x24>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4413      	add	r3, r2
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_IncTick+0x24>)
 800317a:	6013      	str	r3, [r2, #0]
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008
 800318c:	20002cc8 	.word	0x20002cc8

08003190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return uwTick;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_GetTick+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20002cc8 	.word	0x20002cc8

080031a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7ff ffee 	bl	8003190 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d005      	beq.n	80031ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_Delay+0x40>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ce:	bf00      	nop
 80031d0:	f7ff ffde 	bl	8003190 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d8f7      	bhi.n	80031d0 <HAL_Delay+0x28>
  {
  }
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000008 	.word	0x20000008

080031ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e033      	b.n	800326a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff f958 	bl	80024c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003232:	f023 0302 	bic.w	r3, r3, #2
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa5a 	bl	80036f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
 800325a:	e001      	b.n	8003260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADC_Start_DMA+0x1e>
 800328e:	2302      	movs	r3, #2
 8003290:	e0cc      	b.n	800342c <HAL_ADC_Start_DMA+0x1b8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d018      	beq.n	80032da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032b8:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_ADC_Start_DMA+0x1c0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a5e      	ldr	r2, [pc, #376]	; (8003438 <HAL_ADC_Start_DMA+0x1c4>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0c9a      	lsrs	r2, r3, #18
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032cc:	e002      	b.n	80032d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f9      	bne.n	80032ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 80a0 	bne.w	800342a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003314:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	d106      	bne.n	8003338 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f023 0206 	bic.w	r2, r3, #6
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
 8003336:	e002      	b.n	800333e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_ADC_Start_DMA+0x1c8>)
 8003348:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4a3c      	ldr	r2, [pc, #240]	; (8003440 <HAL_ADC_Start_DMA+0x1cc>)
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_ADC_Start_DMA+0x1d0>)
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <HAL_ADC_Start_DMA+0x1d4>)
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800336a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800337a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	334c      	adds	r3, #76	; 0x4c
 8003396:	4619      	mov	r1, r3
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f000 fcea 	bl	8003d74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d12a      	bne.n	8003402 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_ADC_Start_DMA+0x1d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d015      	beq.n	80033e2 <HAL_ADC_Start_DMA+0x16e>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_ADC_Start_DMA+0x1dc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d105      	bne.n	80033cc <HAL_ADC_Start_DMA+0x158>
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_ADC_Start_DMA+0x1c8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_ADC_Start_DMA+0x1e0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d129      	bne.n	800342a <HAL_ADC_Start_DMA+0x1b6>
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_ADC_Start_DMA+0x1c8>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	d823      	bhi.n	800342a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11c      	bne.n	800342a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	e013      	b.n	800342a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_ADC_Start_DMA+0x1d8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10e      	bne.n	800342a <HAL_ADC_Start_DMA+0x1b6>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003428:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000000 	.word	0x20000000
 8003438:	431bde83 	.word	0x431bde83
 800343c:	40012300 	.word	0x40012300
 8003440:	080038f1 	.word	0x080038f1
 8003444:	080039ab 	.word	0x080039ab
 8003448:	080039c7 	.word	0x080039c7
 800344c:	40012000 	.word	0x40012000
 8003450:	40012100 	.word	0x40012100
 8003454:	40012200 	.word	0x40012200

08003458 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e113      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x244>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d925      	bls.n	800350c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68d9      	ldr	r1, [r3, #12]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	3b1e      	subs	r3, #30
 80034d6:	2207      	movs	r2, #7
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43da      	mvns	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	400a      	ands	r2, r1
 80034e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68d9      	ldr	r1, [r3, #12]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	4618      	mov	r0, r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4403      	add	r3, r0
 80034fe:	3b1e      	subs	r3, #30
 8003500:	409a      	lsls	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	e022      	b.n	8003552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6919      	ldr	r1, [r3, #16]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	2207      	movs	r2, #7
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	400a      	ands	r2, r1
 800352e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	4603      	mov	r3, r0
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4403      	add	r3, r0
 8003548:	409a      	lsls	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b06      	cmp	r3, #6
 8003558:	d824      	bhi.n	80035a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	3b05      	subs	r3, #5
 800356c:	221f      	movs	r2, #31
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	400a      	ands	r2, r1
 800357a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	4618      	mov	r0, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	3b05      	subs	r3, #5
 8003596:	fa00 f203 	lsl.w	r2, r0, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	635a      	str	r2, [r3, #52]	; 0x34
 80035a2:	e04c      	b.n	800363e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	d824      	bhi.n	80035f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	3b23      	subs	r3, #35	; 0x23
 80035be:	221f      	movs	r2, #31
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43da      	mvns	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	400a      	ands	r2, r1
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	4618      	mov	r0, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	3b23      	subs	r3, #35	; 0x23
 80035e8:	fa00 f203 	lsl.w	r2, r0, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
 80035f4:	e023      	b.n	800363e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b41      	subs	r3, #65	; 0x41
 8003608:	221f      	movs	r2, #31
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	400a      	ands	r2, r1
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	4618      	mov	r0, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b41      	subs	r3, #65	; 0x41
 8003632:	fa00 f203 	lsl.w	r2, r0, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_ADC_ConfigChannel+0x250>)
 8003640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_ADC_ConfigChannel+0x254>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10f      	bne.n	800366c <HAL_ADC_ConfigChannel+0x1d8>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b12      	cmp	r3, #18
 8003652:	d10b      	bne.n	800366c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_ADC_ConfigChannel+0x254>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12b      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x23a>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_ADC_ConfigChannel+0x258>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <HAL_ADC_ConfigChannel+0x1f4>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b11      	cmp	r3, #17
 8003686:	d122      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_ADC_ConfigChannel+0x258>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d111      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_ADC_ConfigChannel+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_ADC_ConfigChannel+0x260>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	0c9a      	lsrs	r2, r3, #18
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036c0:	e002      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f9      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40012300 	.word	0x40012300
 80036e8:	40012000 	.word	0x40012000
 80036ec:	10000012 	.word	0x10000012
 80036f0:	20000000 	.word	0x20000000
 80036f4:	431bde83 	.word	0x431bde83

080036f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003700:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <ADC_Init+0x1f0>)
 8003702:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	4a58      	ldr	r2, [pc, #352]	; (80038ec <ADC_Init+0x1f4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800379e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	e00f      	b.n	80037f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0202 	bic.w	r2, r2, #2
 8003804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e1b      	ldrb	r3, [r3, #24]
 8003810:	005a      	lsls	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003832:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003842:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	3b01      	subs	r3, #1
 8003850:	035a      	lsls	r2, r3, #13
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e007      	b.n	800386c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800387a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	3b01      	subs	r3, #1
 8003888:	051a      	lsls	r2, r3, #20
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6899      	ldr	r1, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ae:	025a      	lsls	r2, r3, #9
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	029a      	lsls	r2, r3, #10
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40012300 	.word	0x40012300
 80038ec:	0f000001 	.word	0x0f000001

080038f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003906:	2b00      	cmp	r3, #0
 8003908:	d13c      	bne.n	8003984 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d12b      	bne.n	800397c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d127      	bne.n	800397c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003944:	2b00      	cmp	r3, #0
 8003946:	d119      	bne.n	800397c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0220 	bic.w	r2, r2, #32
 8003956:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d105      	bne.n	800397c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff fd6b 	bl	8003458 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003982:	e00e      	b.n	80039a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7ff fd75 	bl	8003480 <HAL_ADC_ErrorCallback>
}
 8003996:	e004      	b.n	80039a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fd57 	bl	800346c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f7ff fd4a 	bl	8003480 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ec:	bf00      	nop
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <__NVIC_SetPriorityGrouping>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a10:	4013      	ands	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <__NVIC_SetPriorityGrouping+0x44>)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	60d3      	str	r3, [r2, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_GetPriorityGrouping>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <__NVIC_GetPriorityGrouping+0x18>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 0307 	and.w	r3, r3, #7
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_EnableIRQ>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	db0b      	blt.n	8003a82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	f003 021f 	and.w	r2, r3, #31
 8003a70:	4907      	ldr	r1, [pc, #28]	; (8003a90 <__NVIC_EnableIRQ+0x38>)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2001      	movs	r0, #1
 8003a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e100 	.word	0xe000e100

08003a94 <__NVIC_SetPriority>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	6039      	str	r1, [r7, #0]
 8003a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db0a      	blt.n	8003abe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	490c      	ldr	r1, [pc, #48]	; (8003ae0 <__NVIC_SetPriority+0x4c>)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	0112      	lsls	r2, r2, #4
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003abc:	e00a      	b.n	8003ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <__NVIC_SetPriority+0x50>)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	3b04      	subs	r3, #4
 8003acc:	0112      	lsls	r2, r2, #4
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	761a      	strb	r2, [r3, #24]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000e100 	.word	0xe000e100
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <NVIC_EncodePriority>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f1c3 0307 	rsb	r3, r3, #7
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	bf28      	it	cs
 8003b06:	2304      	movcs	r3, #4
 8003b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d902      	bls.n	8003b18 <NVIC_EncodePriority+0x30>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3b03      	subs	r3, #3
 8003b16:	e000      	b.n	8003b1a <NVIC_EncodePriority+0x32>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b30:	f04f 31ff 	mov.w	r1, #4294967295
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3a:	43d9      	mvns	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	4313      	orrs	r3, r2
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <SysTick_Config>:
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b60:	d301      	bcc.n	8003b66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <SysTick_Config+0x40>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b6e:	210f      	movs	r1, #15
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	f7ff ff8e 	bl	8003a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <SysTick_Config+0x40>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <SysTick_Config+0x40>)
 8003b80:	2207      	movs	r2, #7
 8003b82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	e000e010 	.word	0xe000e010

08003b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff29 	bl	80039f4 <__NVIC_SetPriorityGrouping>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bbc:	f7ff ff3e 	bl	8003a3c <__NVIC_GetPriorityGrouping>
 8003bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff ff8e 	bl	8003ae8 <NVIC_EncodePriority>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff5d 	bl	8003a94 <__NVIC_SetPriority>
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	4603      	mov	r3, r0
 8003bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff31 	bl	8003a58 <__NVIC_EnableIRQ>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ffa2 	bl	8003b50 <SysTick_Config>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff fab4 	bl	8003190 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e099      	b.n	8003d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c54:	e00f      	b.n	8003c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c56:	f7ff fa9b 	bl	8003190 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d908      	bls.n	8003c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e078      	b.n	8003d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e8      	bne.n	8003c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa9d 	bl	800425c <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d36:	2301      	movs	r3, #1
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa54 	bl	80041f0 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	223f      	movs	r2, #63	; 0x3f
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	f010803f 	.word	0xf010803f

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Start_IT+0x26>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e040      	b.n	8003e1c <HAL_DMA_Start_IT+0xa8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12f      	bne.n	8003e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9e6 	bl	8004194 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0216 	orr.w	r2, r2, #22
 8003de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00c      	b.n	8003e5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e74:	4b92      	ldr	r3, [pc, #584]	; (80040c0 <HAL_DMA_IRQHandler+0x258>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a92      	ldr	r2, [pc, #584]	; (80040c4 <HAL_DMA_IRQHandler+0x25c>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2208      	movs	r2, #8
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2204      	movs	r2, #4
 8003f10:	409a      	lsls	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f043 0204 	orr.w	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	2210      	movs	r2, #16
 8003f46:	409a      	lsls	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d043      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d03c      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2210      	movs	r2, #16
 8003f64:	409a      	lsls	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d018      	beq.n	8003faa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d024      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
 8003f96:	e01f      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
 8003fa8:	e016      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0208 	bic.w	r2, r2, #8
 8003fc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2220      	movs	r2, #32
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 808e 	beq.w	8004106 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8086 	beq.w	8004106 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	2220      	movs	r2, #32
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b05      	cmp	r3, #5
 8004010:	d136      	bne.n	8004080 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0216 	bic.w	r2, r2, #22
 8004020:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004030:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_DMA_IRQHandler+0x1da>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	409a      	lsls	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	d07d      	beq.n	8004172 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
        }
        return;
 800407e:	e078      	b.n	8004172 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01c      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d030      	beq.n	8004106 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
 80040ac:	e02b      	b.n	8004106 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
 80040be:	e022      	b.n	8004106 <HAL_DMA_IRQHandler+0x29e>
 80040c0:	20000000 	.word	0x20000000
 80040c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0210 	bic.w	r2, r2, #16
 80040e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	2b00      	cmp	r3, #0
 800410c:	d032      	beq.n	8004174 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d022      	beq.n	8004160 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2205      	movs	r2, #5
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3301      	adds	r3, #1
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	429a      	cmp	r2, r3
 800413c:	d307      	bcc.n	800414e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f2      	bne.n	8004132 <HAL_DMA_IRQHandler+0x2ca>
 800414c:	e000      	b.n	8004150 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800414e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
 8004170:	e000      	b.n	8004174 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004172:	bf00      	nop
    }
  }
}
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d108      	bne.n	80041d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041d2:	e007      	b.n	80041e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	3b10      	subs	r3, #16
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <DMA_CalcBaseAndBitshift+0x64>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <DMA_CalcBaseAndBitshift+0x68>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d909      	bls.n	8004232 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	659a      	str	r2, [r3, #88]	; 0x58
 8004230:	e007      	b.n	8004242 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	aaaaaaab 	.word	0xaaaaaaab
 8004258:	08012614 	.word	0x08012614

0800425c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11f      	bne.n	80042b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d855      	bhi.n	8004328 <DMA_CheckFifoParam+0xcc>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <DMA_CheckFifoParam+0x28>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004295 	.word	0x08004295
 8004288:	080042a7 	.word	0x080042a7
 800428c:	08004295 	.word	0x08004295
 8004290:	08004329 	.word	0x08004329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d045      	beq.n	800432c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a4:	e042      	b.n	800432c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ae:	d13f      	bne.n	8004330 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e03c      	b.n	8004330 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042be:	d121      	bne.n	8004304 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d836      	bhi.n	8004334 <DMA_CheckFifoParam+0xd8>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <DMA_CheckFifoParam+0x70>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042e3 	.word	0x080042e3
 80042d4:	080042dd 	.word	0x080042dd
 80042d8:	080042f5 	.word	0x080042f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e02f      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d024      	beq.n	8004338 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f2:	e021      	b.n	8004338 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042fc:	d11e      	bne.n	800433c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004302:	e01b      	b.n	800433c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d902      	bls.n	8004310 <DMA_CheckFifoParam+0xb4>
 800430a:	2b03      	cmp	r3, #3
 800430c:	d003      	beq.n	8004316 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800430e:	e018      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      break;
 8004314:	e015      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00e      	beq.n	8004340 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
      break;
 8004326:	e00b      	b.n	8004340 <DMA_CheckFifoParam+0xe4>
      break;
 8004328:	bf00      	nop
 800432a:	e00a      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;
 800432c:	bf00      	nop
 800432e:	e008      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;
 8004330:	bf00      	nop
 8004332:	e006      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;
 8004334:	bf00      	nop
 8004336:	e004      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;   
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <DMA_CheckFifoParam+0xe6>
      break;
 8004340:	bf00      	nop
    }
  } 
  
  return status; 
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e177      	b.n	800465c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800436c:	2201      	movs	r2, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	f040 8166 	bne.w	8004656 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d00b      	beq.n	80043aa <HAL_GPIO_Init+0x5a>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d007      	beq.n	80043aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800439e:	2b11      	cmp	r3, #17
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b12      	cmp	r3, #18
 80043a8:	d130      	bne.n	800440c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e0:	2201      	movs	r2, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 0201 	and.w	r2, r3, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0xfc>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b12      	cmp	r3, #18
 800444a:	d123      	bne.n	8004494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	220f      	movs	r2, #15
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	08da      	lsrs	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2203      	movs	r2, #3
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0203 	and.w	r2, r3, #3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4313      	orrs	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80c0 	beq.w	8004656 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_GPIO_Init+0x320>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	4a64      	ldr	r2, [pc, #400]	; (8004670 <HAL_GPIO_Init+0x320>)
 80044e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e4:	6453      	str	r3, [r2, #68]	; 0x44
 80044e6:	4b62      	ldr	r3, [pc, #392]	; (8004670 <HAL_GPIO_Init+0x320>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044f2:	4a60      	ldr	r2, [pc, #384]	; (8004674 <HAL_GPIO_Init+0x324>)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	220f      	movs	r2, #15
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a57      	ldr	r2, [pc, #348]	; (8004678 <HAL_GPIO_Init+0x328>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d037      	beq.n	800458e <HAL_GPIO_Init+0x23e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a56      	ldr	r2, [pc, #344]	; (800467c <HAL_GPIO_Init+0x32c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d031      	beq.n	800458a <HAL_GPIO_Init+0x23a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a55      	ldr	r2, [pc, #340]	; (8004680 <HAL_GPIO_Init+0x330>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d02b      	beq.n	8004586 <HAL_GPIO_Init+0x236>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a54      	ldr	r2, [pc, #336]	; (8004684 <HAL_GPIO_Init+0x334>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d025      	beq.n	8004582 <HAL_GPIO_Init+0x232>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a53      	ldr	r2, [pc, #332]	; (8004688 <HAL_GPIO_Init+0x338>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01f      	beq.n	800457e <HAL_GPIO_Init+0x22e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a52      	ldr	r2, [pc, #328]	; (800468c <HAL_GPIO_Init+0x33c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x22a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a51      	ldr	r2, [pc, #324]	; (8004690 <HAL_GPIO_Init+0x340>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x226>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a50      	ldr	r2, [pc, #320]	; (8004694 <HAL_GPIO_Init+0x344>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x222>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a4f      	ldr	r2, [pc, #316]	; (8004698 <HAL_GPIO_Init+0x348>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x21e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a4e      	ldr	r2, [pc, #312]	; (800469c <HAL_GPIO_Init+0x34c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x21a>
 8004566:	2309      	movs	r3, #9
 8004568:	e012      	b.n	8004590 <HAL_GPIO_Init+0x240>
 800456a:	230a      	movs	r3, #10
 800456c:	e010      	b.n	8004590 <HAL_GPIO_Init+0x240>
 800456e:	2308      	movs	r3, #8
 8004570:	e00e      	b.n	8004590 <HAL_GPIO_Init+0x240>
 8004572:	2307      	movs	r3, #7
 8004574:	e00c      	b.n	8004590 <HAL_GPIO_Init+0x240>
 8004576:	2306      	movs	r3, #6
 8004578:	e00a      	b.n	8004590 <HAL_GPIO_Init+0x240>
 800457a:	2305      	movs	r3, #5
 800457c:	e008      	b.n	8004590 <HAL_GPIO_Init+0x240>
 800457e:	2304      	movs	r3, #4
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x240>
 8004582:	2303      	movs	r3, #3
 8004584:	e004      	b.n	8004590 <HAL_GPIO_Init+0x240>
 8004586:	2302      	movs	r3, #2
 8004588:	e002      	b.n	8004590 <HAL_GPIO_Init+0x240>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_GPIO_Init+0x240>
 800458e:	2300      	movs	r3, #0
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	f002 0203 	and.w	r2, r2, #3
 8004596:	0092      	lsls	r2, r2, #2
 8004598:	4093      	lsls	r3, r2
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045a0:	4934      	ldr	r1, [pc, #208]	; (8004674 <HAL_GPIO_Init+0x324>)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	3302      	adds	r3, #2
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <HAL_GPIO_Init+0x350>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d2:	4a33      	ldr	r2, [pc, #204]	; (80046a0 <HAL_GPIO_Init+0x350>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_GPIO_Init+0x350>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045fc:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <HAL_GPIO_Init+0x350>)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004602:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_GPIO_Init+0x350>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004626:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <HAL_GPIO_Init+0x350>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <HAL_GPIO_Init+0x350>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004650:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <HAL_GPIO_Init+0x350>)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3301      	adds	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b0f      	cmp	r3, #15
 8004660:	f67f ae84 	bls.w	800436c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004664:	bf00      	nop
 8004666:	3724      	adds	r7, #36	; 0x24
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40023800 	.word	0x40023800
 8004674:	40013800 	.word	0x40013800
 8004678:	40020000 	.word	0x40020000
 800467c:	40020400 	.word	0x40020400
 8004680:	40020800 	.word	0x40020800
 8004684:	40020c00 	.word	0x40020c00
 8004688:	40021000 	.word	0x40021000
 800468c:	40021400 	.word	0x40021400
 8004690:	40021800 	.word	0x40021800
 8004694:	40021c00 	.word	0x40021c00
 8004698:	40022000 	.word	0x40022000
 800469c:	40022400 	.word	0x40022400
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e001      	b.n	80046c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
 80046e0:	4613      	mov	r3, r2
 80046e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e4:	787b      	ldrb	r3, [r7, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	041a      	lsls	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004712:	4b08      	ldr	r3, [pc, #32]	; (8004734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800471e:	4a05      	ldr	r2, [pc, #20]	; (8004734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc fe92 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40013c00 	.word	0x40013c00

08004738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e11f      	b.n	800498a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd ff60 	bl	8002624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	; 0x24
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800478a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800479a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800479c:	f000 fe24 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 80047a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4a7b      	ldr	r2, [pc, #492]	; (8004994 <HAL_I2C_Init+0x25c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d807      	bhi.n	80047bc <HAL_I2C_Init+0x84>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a7a      	ldr	r2, [pc, #488]	; (8004998 <HAL_I2C_Init+0x260>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf94      	ite	ls
 80047b4:	2301      	movls	r3, #1
 80047b6:	2300      	movhi	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e006      	b.n	80047ca <HAL_I2C_Init+0x92>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a77      	ldr	r2, [pc, #476]	; (800499c <HAL_I2C_Init+0x264>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bf94      	ite	ls
 80047c4:	2301      	movls	r3, #1
 80047c6:	2300      	movhi	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0db      	b.n	800498a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a72      	ldr	r2, [pc, #456]	; (80049a0 <HAL_I2C_Init+0x268>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0c9b      	lsrs	r3, r3, #18
 80047dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a64      	ldr	r2, [pc, #400]	; (8004994 <HAL_I2C_Init+0x25c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d802      	bhi.n	800480c <HAL_I2C_Init+0xd4>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	3301      	adds	r3, #1
 800480a:	e009      	b.n	8004820 <HAL_I2C_Init+0xe8>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	4a63      	ldr	r2, [pc, #396]	; (80049a4 <HAL_I2C_Init+0x26c>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	099b      	lsrs	r3, r3, #6
 800481e:	3301      	adds	r3, #1
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	430b      	orrs	r3, r1
 8004826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4956      	ldr	r1, [pc, #344]	; (8004994 <HAL_I2C_Init+0x25c>)
 800483c:	428b      	cmp	r3, r1
 800483e:	d80d      	bhi.n	800485c <HAL_I2C_Init+0x124>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e59      	subs	r1, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fbb1 f3f3 	udiv	r3, r1, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004854:	2b04      	cmp	r3, #4
 8004856:	bf38      	it	cc
 8004858:	2304      	movcc	r3, #4
 800485a:	e04f      	b.n	80048fc <HAL_I2C_Init+0x1c4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <HAL_I2C_Init+0x150>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e012      	b.n	80048ae <HAL_I2C_Init+0x176>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Init+0x17e>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e022      	b.n	80048fc <HAL_I2C_Init+0x1c4>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10e      	bne.n	80048dc <HAL_I2C_Init+0x1a4>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1e58      	subs	r0, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d0:	3301      	adds	r3, #1
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048da:	e00f      	b.n	80048fc <HAL_I2C_Init+0x1c4>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1e58      	subs	r0, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	0099      	lsls	r1, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6809      	ldr	r1, [r1, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800492a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6911      	ldr	r1, [r2, #16]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	430b      	orrs	r3, r1
 800493e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	000186a0 	.word	0x000186a0
 8004998:	001e847f 	.word	0x001e847f
 800499c:	003d08ff 	.word	0x003d08ff
 80049a0:	431bde83 	.word	0x431bde83
 80049a4:	10624dd3 	.word	0x10624dd3

080049a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	460b      	mov	r3, r1
 80049b6:	817b      	strh	r3, [r7, #10]
 80049b8:	4613      	mov	r3, r2
 80049ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049bc:	f7fe fbe8 	bl	8003190 <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	f040 80e0 	bne.w	8004b90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2319      	movs	r3, #25
 80049d6:	2201      	movs	r2, #1
 80049d8:	4970      	ldr	r1, [pc, #448]	; (8004b9c <HAL_I2C_Master_Transmit+0x1f4>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f964 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0d3      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2C_Master_Transmit+0x50>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0cc      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d007      	beq.n	8004a1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2221      	movs	r2, #33	; 0x21
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	893a      	ldrh	r2, [r7, #8]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a50      	ldr	r2, [pc, #320]	; (8004ba0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a60:	8979      	ldrh	r1, [r7, #10]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f89c 	bl	8004ba4 <I2C_MasterRequestWrite>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e08d      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a8c:	e066      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6a39      	ldr	r1, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f9de 	bl	8004e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d107      	bne.n	8004ab6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e06b      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_I2C_Master_Transmit+0x188>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	6a39      	ldr	r1, [r7, #32]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f9ce 	bl	8004ed6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e01a      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d194      	bne.n	8004a8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	00100002 	.word	0x00100002
 8004ba0:	ffff0000 	.word	0xffff0000

08004ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d006      	beq.n	8004bce <I2C_MasterRequestWrite+0x2a>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d003      	beq.n	8004bce <I2C_MasterRequestWrite+0x2a>
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bcc:	d108      	bne.n	8004be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e00b      	b.n	8004bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d107      	bne.n	8004bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f84f 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d103      	bne.n	8004c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e035      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c34:	d108      	bne.n	8004c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c36:	897b      	ldrh	r3, [r7, #10]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c44:	611a      	str	r2, [r3, #16]
 8004c46:	e01b      	b.n	8004c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c48:	897b      	ldrh	r3, [r7, #10]
 8004c4a:	11db      	asrs	r3, r3, #7
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0306 	and.w	r3, r3, #6
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f063 030f 	orn	r3, r3, #15
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	490e      	ldr	r1, [pc, #56]	; (8004ca0 <I2C_MasterRequestWrite+0xfc>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f875 	bl	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e010      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4907      	ldr	r1, [pc, #28]	; (8004ca4 <I2C_MasterRequestWrite+0x100>)
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f865 	bl	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	00010008 	.word	0x00010008
 8004ca4:	00010002 	.word	0x00010002

08004ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb8:	e025      	b.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d021      	beq.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fe fa65 	bl	8003190 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e023      	b.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10d      	bne.n	8004d2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	43da      	mvns	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf0c      	ite	eq
 8004d22:	2301      	moveq	r3, #1
 8004d24:	2300      	movne	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	e00c      	b.n	8004d46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	43da      	mvns	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d0b6      	beq.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d64:	e051      	b.n	8004e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d74:	d123      	bne.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f043 0204 	orr.w	r2, r3, #4
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e046      	b.n	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d021      	beq.n	8004e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fe f9e3 	bl	8003190 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d116      	bne.n	8004e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e020      	b.n	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10c      	bne.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e00b      	b.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	43da      	mvns	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d18d      	bne.n	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e60:	e02d      	b.n	8004ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f878 	bl	8004f58 <I2C_IsAcknowledgeFailed>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e02d      	b.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d021      	beq.n	8004ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fe f989 	bl	8003190 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d116      	bne.n	8004ebe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e007      	b.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d1ca      	bne.n	8004e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ee2:	e02d      	b.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f837 	bl	8004f58 <I2C_IsAcknowledgeFailed>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e02d      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d021      	beq.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fe f948 	bl	8003190 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d116      	bne.n	8004f40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e007      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d1ca      	bne.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6e:	d11b      	bne.n	8004fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f043 0204 	orr.w	r2, r3, #4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_PWREx_EnableOverDrive+0x94>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe4:	f7fe f8d4 	bl	8003190 <HAL_GetTick>
 8004fe8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fea:	e009      	b.n	8005000 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fec:	f7fe f8d0 	bl	8003190 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ffa:	d901      	bls.n	8005000 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e01f      	b.n	8005040 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005000:	4b13      	ldr	r3, [pc, #76]	; (8005050 <HAL_PWREx_EnableOverDrive+0x98>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d1ee      	bne.n	8004fec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005014:	f7fe f8bc 	bl	8003190 <HAL_GetTick>
 8005018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800501a:	e009      	b.n	8005030 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800501c:	f7fe f8b8 	bl	8003190 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800502a:	d901      	bls.n	8005030 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e007      	b.n	8005040 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <HAL_PWREx_EnableOverDrive+0x98>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800503c:	d1ee      	bne.n	800501c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800
 800504c:	420e0040 	.word	0x420e0040
 8005050:	40007000 	.word	0x40007000
 8005054:	420e0044 	.word	0x420e0044

08005058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0cc      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800506c:	4b68      	ldr	r3, [pc, #416]	; (8005210 <HAL_RCC_ClockConfig+0x1b8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d90c      	bls.n	8005094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b65      	ldr	r3, [pc, #404]	; (8005210 <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005082:	4b63      	ldr	r3, [pc, #396]	; (8005210 <HAL_RCC_ClockConfig+0x1b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d001      	beq.n	8005094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0b8      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d020      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a58      	ldr	r2, [pc, #352]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c4:	4b53      	ldr	r3, [pc, #332]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d0:	4b50      	ldr	r3, [pc, #320]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	494d      	ldr	r1, [pc, #308]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d044      	beq.n	8005178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d119      	bne.n	8005136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e07f      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d003      	beq.n	8005116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005112:	2b03      	cmp	r3, #3
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005116:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e06f      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005126:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e067      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005136:	4b37      	ldr	r3, [pc, #220]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f023 0203 	bic.w	r2, r3, #3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4934      	ldr	r1, [pc, #208]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005148:	f7fe f822 	bl	8003190 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	e00a      	b.n	8005166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005150:	f7fe f81e 	bl	8003190 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e04f      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 020c 	and.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1eb      	bne.n	8005150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005178:	4b25      	ldr	r3, [pc, #148]	; (8005210 <HAL_RCC_ClockConfig+0x1b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d20c      	bcs.n	80051a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b22      	ldr	r3, [pc, #136]	; (8005210 <HAL_RCC_ClockConfig+0x1b8>)
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b20      	ldr	r3, [pc, #128]	; (8005210 <HAL_RCC_ClockConfig+0x1b8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e032      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4916      	ldr	r1, [pc, #88]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051de:	f000 f821 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 80051e2:	4601      	mov	r1, r0
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <HAL_RCC_ClockConfig+0x1c0>)
 80051f0:	5cd3      	ldrb	r3, [r2, r3]
 80051f2:	fa21 f303 	lsr.w	r3, r1, r3
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1c4>)
 80051f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCC_ClockConfig+0x1c8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fd ff82 	bl	8003108 <HAL_InitTick>

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40023c00 	.word	0x40023c00
 8005214:	40023800 	.word	0x40023800
 8005218:	080125fc 	.word	0x080125fc
 800521c:	20000000 	.word	0x20000000
 8005220:	20000004 	.word	0x20000004

08005224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	2300      	movs	r3, #0
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800523a:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b04      	cmp	r3, #4
 8005244:	d007      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x32>
 8005246:	2b08      	cmp	r3, #8
 8005248:	d008      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x38>
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 80b4 	bne.w	80053b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b5e      	ldr	r3, [pc, #376]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005252:	60bb      	str	r3, [r7, #8]
       break;
 8005254:	e0b3      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005256:	4b5d      	ldr	r3, [pc, #372]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005258:	60bb      	str	r3, [r7, #8]
      break;
 800525a:	e0b0      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800525c:	4b5a      	ldr	r3, [pc, #360]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005266:	4b58      	ldr	r3, [pc, #352]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04a      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b55      	ldr	r3, [pc, #340]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	f04f 0400 	mov.w	r4, #0
 800527c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	ea03 0501 	and.w	r5, r3, r1
 8005288:	ea04 0602 	and.w	r6, r4, r2
 800528c:	4629      	mov	r1, r5
 800528e:	4632      	mov	r2, r6
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	f04f 0400 	mov.w	r4, #0
 8005298:	0154      	lsls	r4, r2, #5
 800529a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800529e:	014b      	lsls	r3, r1, #5
 80052a0:	4619      	mov	r1, r3
 80052a2:	4622      	mov	r2, r4
 80052a4:	1b49      	subs	r1, r1, r5
 80052a6:	eb62 0206 	sbc.w	r2, r2, r6
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	f04f 0400 	mov.w	r4, #0
 80052b2:	0194      	lsls	r4, r2, #6
 80052b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052b8:	018b      	lsls	r3, r1, #6
 80052ba:	1a5b      	subs	r3, r3, r1
 80052bc:	eb64 0402 	sbc.w	r4, r4, r2
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	00e2      	lsls	r2, r4, #3
 80052ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052ce:	00d9      	lsls	r1, r3, #3
 80052d0:	460b      	mov	r3, r1
 80052d2:	4614      	mov	r4, r2
 80052d4:	195b      	adds	r3, r3, r5
 80052d6:	eb44 0406 	adc.w	r4, r4, r6
 80052da:	f04f 0100 	mov.w	r1, #0
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	02a2      	lsls	r2, r4, #10
 80052e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052e8:	0299      	lsls	r1, r3, #10
 80052ea:	460b      	mov	r3, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	4621      	mov	r1, r4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f04f 0400 	mov.w	r4, #0
 80052f8:	461a      	mov	r2, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	f7fb fcdc 	bl	8000cb8 <__aeabi_uldivmod>
 8005300:	4603      	mov	r3, r0
 8005302:	460c      	mov	r4, r1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e049      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005308:	4b2f      	ldr	r3, [pc, #188]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	099b      	lsrs	r3, r3, #6
 800530e:	f04f 0400 	mov.w	r4, #0
 8005312:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	ea03 0501 	and.w	r5, r3, r1
 800531e:	ea04 0602 	and.w	r6, r4, r2
 8005322:	4629      	mov	r1, r5
 8005324:	4632      	mov	r2, r6
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	f04f 0400 	mov.w	r4, #0
 800532e:	0154      	lsls	r4, r2, #5
 8005330:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005334:	014b      	lsls	r3, r1, #5
 8005336:	4619      	mov	r1, r3
 8005338:	4622      	mov	r2, r4
 800533a:	1b49      	subs	r1, r1, r5
 800533c:	eb62 0206 	sbc.w	r2, r2, r6
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	0194      	lsls	r4, r2, #6
 800534a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800534e:	018b      	lsls	r3, r1, #6
 8005350:	1a5b      	subs	r3, r3, r1
 8005352:	eb64 0402 	sbc.w	r4, r4, r2
 8005356:	f04f 0100 	mov.w	r1, #0
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	00e2      	lsls	r2, r4, #3
 8005360:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005364:	00d9      	lsls	r1, r3, #3
 8005366:	460b      	mov	r3, r1
 8005368:	4614      	mov	r4, r2
 800536a:	195b      	adds	r3, r3, r5
 800536c:	eb44 0406 	adc.w	r4, r4, r6
 8005370:	f04f 0100 	mov.w	r1, #0
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	02a2      	lsls	r2, r4, #10
 800537a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800537e:	0299      	lsls	r1, r3, #10
 8005380:	460b      	mov	r3, r1
 8005382:	4614      	mov	r4, r2
 8005384:	4618      	mov	r0, r3
 8005386:	4621      	mov	r1, r4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f04f 0400 	mov.w	r4, #0
 800538e:	461a      	mov	r2, r3
 8005390:	4623      	mov	r3, r4
 8005392:	f7fb fc91 	bl	8000cb8 <__aeabi_uldivmod>
 8005396:	4603      	mov	r3, r0
 8005398:	460c      	mov	r4, r1
 800539a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	60bb      	str	r3, [r7, #8]
      break;
 80053b6:	e002      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053ba:	60bb      	str	r3, [r7, #8]
      break;
 80053bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053be:	68bb      	ldr	r3, [r7, #8]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400

080053d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d4:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000000 	.word	0x20000000

080053e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053ec:	f7ff fff0 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 80053f0:	4601      	mov	r1, r0
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	4a03      	ldr	r2, [pc, #12]	; (800540c <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40023800 	.word	0x40023800
 800540c:	0801260c 	.word	0x0801260c

08005410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005414:	f7ff ffdc 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 8005418:	4601      	mov	r1, r0
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0b5b      	lsrs	r3, r3, #13
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4a03      	ldr	r2, [pc, #12]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	0801260c 	.word	0x0801260c

08005438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005460:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005466:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	4963      	ldr	r1, [pc, #396]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005482:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	495a      	ldr	r1, [pc, #360]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d075      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054bc:	4b50      	ldr	r3, [pc, #320]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054c2:	f7fd fe65 	bl	8003190 <HAL_GetTick>
 80054c6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054ca:	f7fd fe61 	bl	8003190 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1dc      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054dc:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	019a      	lsls	r2, r3, #6
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	071b      	lsls	r3, r3, #28
 8005500:	493e      	ldr	r1, [pc, #248]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01f      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005514:	4b39      	ldr	r3, [pc, #228]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551a:	0f1b      	lsrs	r3, r3, #28
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	019a      	lsls	r2, r3, #6
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	431a      	orrs	r2, r3
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	071b      	lsls	r3, r3, #28
 8005534:	4931      	ldr	r1, [pc, #196]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800553c:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800553e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005542:	f023 021f 	bic.w	r2, r3, #31
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	3b01      	subs	r3, #1
 800554c:	492b      	ldr	r1, [pc, #172]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	019a      	lsls	r2, r3, #6
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	071b      	lsls	r3, r3, #28
 8005574:	4921      	ldr	r1, [pc, #132]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800557c:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005582:	f7fd fe05 	bl	8003190 <HAL_GetTick>
 8005586:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800558a:	f7fd fe01 	bl	8003190 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e17c      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800559c:	4b17      	ldr	r3, [pc, #92]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d112      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10c      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80ce 	beq.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80055d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d6:	f040 80c8 	bne.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fd fdd6 	bl	8003190 <HAL_GetTick>
 80055e4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055e6:	e00f      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055e8:	f7fd fdd2 	bl	8003190 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d908      	bls.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e14d      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	42470068 	.word	0x42470068
 8005604:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005608:	4ba5      	ldr	r3, [pc, #660]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005614:	d0e8      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005622:	4b9f      	ldr	r3, [pc, #636]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	3301      	adds	r3, #1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005634:	4b9a      	ldr	r3, [pc, #616]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	0f1b      	lsrs	r3, r3, #28
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	019a      	lsls	r2, r3, #6
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	3b01      	subs	r3, #1
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	4990      	ldr	r1, [pc, #576]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005666:	4b8e      	ldr	r3, [pc, #568]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	3b01      	subs	r3, #1
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	4989      	ldr	r1, [pc, #548]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02c      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800568c:	4b84      	ldr	r3, [pc, #528]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	0c1b      	lsrs	r3, r3, #16
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	3301      	adds	r3, #1
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800569e:	4b80      	ldr	r3, [pc, #512]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	019a      	lsls	r2, r3, #6
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	3b01      	subs	r3, #1
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	431a      	orrs	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	071b      	lsls	r3, r3, #28
 80056c8:	4975      	ldr	r1, [pc, #468]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4970      	ldr	r1, [pc, #448]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d024      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80056f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056fa:	d11f      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056fc:	4b68      	ldr	r3, [pc, #416]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	0e1b      	lsrs	r3, r3, #24
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800570a:	4b65      	ldr	r3, [pc, #404]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	0f1b      	lsrs	r3, r3, #28
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	019a      	lsls	r2, r3, #6
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	3b01      	subs	r3, #1
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	431a      	orrs	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	431a      	orrs	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	495a      	ldr	r1, [pc, #360]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800573c:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005742:	f7fd fd25 	bl	8003190 <HAL_GetTick>
 8005746:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005748:	e008      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800574a:	f7fd fd21 	bl	8003190 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e09c      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800575c:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005768:	d1ef      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8083 	beq.w	800587e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	4b48      	ldr	r3, [pc, #288]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	4a47      	ldr	r2, [pc, #284]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005786:	6413      	str	r3, [r2, #64]	; 0x40
 8005788:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005794:	4b44      	ldr	r3, [pc, #272]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a43      	ldr	r2, [pc, #268]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800579a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057a0:	f7fd fcf6 	bl	8003190 <HAL_GetTick>
 80057a4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a8:	f7fd fcf2 	bl	8003190 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e06d      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057ba:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d02f      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d028      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057e4:	4b2e      	ldr	r3, [pc, #184]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057ee:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057fa:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d114      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800580c:	f7fd fcc0 	bl	8003190 <HAL_GetTick>
 8005810:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005812:	e00a      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fd fcbc 	bl	8003190 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e035      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ee      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005842:	d10d      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005844:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005858:	4911      	ldr	r1, [pc, #68]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
 800585e:	e005      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005860:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005866:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800586a:	6093      	str	r3, [r2, #8]
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800586e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005878:	4909      	ldr	r1, [pc, #36]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800587a:	4313      	orrs	r3, r2
 800587c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8005892:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	42470070 	.word	0x42470070
 80058a8:	40007000 	.word	0x40007000
 80058ac:	42470e40 	.word	0x42470e40
 80058b0:	424711e0 	.word	0x424711e0

080058b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d075      	beq.n	80059b8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058cc:	4ba2      	ldr	r3, [pc, #648]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d00c      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d8:	4b9f      	ldr	r3, [pc, #636]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d112      	bne.n	800590a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e4:	4b9c      	ldr	r3, [pc, #624]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f0:	d10b      	bne.n	800590a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d05b      	beq.n	80059b6 <HAL_RCC_OscConfig+0x102>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d157      	bne.n	80059b6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e20b      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005912:	d106      	bne.n	8005922 <HAL_RCC_OscConfig+0x6e>
 8005914:	4b90      	ldr	r3, [pc, #576]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a8f      	ldr	r2, [pc, #572]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 800591a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e01d      	b.n	800595e <HAL_RCC_OscConfig+0xaa>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592a:	d10c      	bne.n	8005946 <HAL_RCC_OscConfig+0x92>
 800592c:	4b8a      	ldr	r3, [pc, #552]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a89      	ldr	r2, [pc, #548]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b87      	ldr	r3, [pc, #540]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a86      	ldr	r2, [pc, #536]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 800593e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e00b      	b.n	800595e <HAL_RCC_OscConfig+0xaa>
 8005946:	4b84      	ldr	r3, [pc, #528]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a83      	ldr	r2, [pc, #524]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 800594c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a80      	ldr	r2, [pc, #512]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d013      	beq.n	800598e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fd fc13 	bl	8003190 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800596e:	f7fd fc0f 	bl	8003190 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b64      	cmp	r3, #100	; 0x64
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e1d0      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005980:	4b75      	ldr	r3, [pc, #468]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0xba>
 800598c:	e014      	b.n	80059b8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fd fbff 	bl	8003190 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005996:	f7fd fbfb 	bl	8003190 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b64      	cmp	r3, #100	; 0x64
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e1bc      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a8:	4b6b      	ldr	r3, [pc, #428]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1f0      	bne.n	8005996 <HAL_RCC_OscConfig+0xe2>
 80059b4:	e000      	b.n	80059b8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d063      	beq.n	8005a8c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059c4:	4b64      	ldr	r3, [pc, #400]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d0:	4b61      	ldr	r3, [pc, #388]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d11c      	bne.n	8005a16 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059dc:	4b5e      	ldr	r3, [pc, #376]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d116      	bne.n	8005a16 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e8:	4b5b      	ldr	r3, [pc, #364]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_OscConfig+0x14c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e190      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a00:	4b55      	ldr	r3, [pc, #340]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4952      	ldr	r1, [pc, #328]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a14:	e03a      	b.n	8005a8c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a1e:	4b4f      	ldr	r3, [pc, #316]	; (8005b5c <HAL_RCC_OscConfig+0x2a8>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fd fbb4 	bl	8003190 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fd fbb0 	bl	8003190 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e171      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3e:	4b46      	ldr	r3, [pc, #280]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4a:	4b43      	ldr	r3, [pc, #268]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	493f      	ldr	r1, [pc, #252]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]
 8005a5e:	e015      	b.n	8005a8c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a60:	4b3e      	ldr	r3, [pc, #248]	; (8005b5c <HAL_RCC_OscConfig+0x2a8>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fd fb93 	bl	8003190 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a6e:	f7fd fb8f 	bl	8003190 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e150      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a80:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d030      	beq.n	8005afa <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d016      	beq.n	8005ace <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa0:	4b2f      	ldr	r3, [pc, #188]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fd fb73 	bl	8003190 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aae:	f7fd fb6f 	bl	8003190 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e130      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x1fa>
 8005acc:	e015      	b.n	8005afa <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ace:	4b24      	ldr	r3, [pc, #144]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad4:	f7fd fb5c 	bl	8003190 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005adc:	f7fd fb58 	bl	8003190 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e119      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 809f 	beq.w	8005c46 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10f      	bne.n	8005b38 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b26:	6413      	str	r3, [r2, #64]	; 0x40
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <HAL_RCC_OscConfig+0x2a4>)
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <HAL_RCC_OscConfig+0x2b0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d120      	bne.n	8005b86 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <HAL_RCC_OscConfig+0x2b0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a06      	ldr	r2, [pc, #24]	; (8005b64 <HAL_RCC_OscConfig+0x2b0>)
 8005b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b50:	f7fd fb1e 	bl	8003190 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	e010      	b.n	8005b7a <HAL_RCC_OscConfig+0x2c6>
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	42470000 	.word	0x42470000
 8005b60:	42470e80 	.word	0x42470e80
 8005b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7fd fb12 	bl	8003190 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0d3      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7a:	4b6c      	ldr	r3, [pc, #432]	; (8005d2c <HAL_RCC_OscConfig+0x478>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x2e8>
 8005b8e:	4b68      	ldr	r3, [pc, #416]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	4a67      	ldr	r2, [pc, #412]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	6713      	str	r3, [r2, #112]	; 0x70
 8005b9a:	e01c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x322>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCC_OscConfig+0x30a>
 8005ba4:	4b62      	ldr	r3, [pc, #392]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a61      	ldr	r2, [pc, #388]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	4b5f      	ldr	r3, [pc, #380]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	4a5e      	ldr	r2, [pc, #376]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbc:	e00b      	b.n	8005bd6 <HAL_RCC_OscConfig+0x322>
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a5b      	ldr	r2, [pc, #364]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	4b59      	ldr	r3, [pc, #356]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	4a58      	ldr	r2, [pc, #352]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bd0:	f023 0304 	bic.w	r3, r3, #4
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d015      	beq.n	8005c0a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bde:	f7fd fad7 	bl	8003190 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fd fad3 	bl	8003190 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e092      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfc:	4b4c      	ldr	r3, [pc, #304]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ee      	beq.n	8005be6 <HAL_RCC_OscConfig+0x332>
 8005c08:	e014      	b.n	8005c34 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fd fac1 	bl	8003190 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c12:	f7fd fabd 	bl	8003190 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e07c      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c28:	4b41      	ldr	r3, [pc, #260]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1ee      	bne.n	8005c12 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d105      	bne.n	8005c46 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c3a:	4b3d      	ldr	r3, [pc, #244]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a3c      	ldr	r2, [pc, #240]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d068      	beq.n	8005d20 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4e:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d060      	beq.n	8005d1c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d145      	bne.n	8005cee <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c62:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <HAL_RCC_OscConfig+0x480>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fd fa92 	bl	8003190 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fd fa8e 	bl	8003190 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e04f      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	061b      	lsls	r3, r3, #24
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	071b      	lsls	r3, r3, #28
 8005cba:	491d      	ldr	r1, [pc, #116]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <HAL_RCC_OscConfig+0x480>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fd fa63 	bl	8003190 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fd fa5f 	bl	8003190 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e020      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce0:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x41a>
 8005cec:	e018      	b.n	8005d20 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <HAL_RCC_OscConfig+0x480>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fa4c 	bl	8003190 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfc:	f7fd fa48 	bl	8003190 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e009      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <HAL_RCC_OscConfig+0x47c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x448>
 8005d1a:	e001      	b.n	8005d20 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	40023800 	.word	0x40023800
 8005d34:	42470060 	.word	0x42470060

08005d38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e022      	b.n	8005d90 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d105      	bne.n	8005d62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fc fcdd 	bl	800271c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2203      	movs	r2, #3
 8005d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f814 	bl	8005d98 <HAL_SD_InitCard>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e00a      	b.n	8005d90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d98:	b5b0      	push	{r4, r5, r7, lr}
 8005d9a:	b08e      	sub	sp, #56	; 0x38
 8005d9c:	af04      	add	r7, sp, #16
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005db4:	2376      	movs	r3, #118	; 0x76
 8005db6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681d      	ldr	r5, [r3, #0]
 8005dbc:	466c      	mov	r4, sp
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dca:	f107 0308 	add.w	r3, r7, #8
 8005dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f002 fda1 	bl	8008918 <SDIO_Init>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e031      	b.n	8005e4c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005de8:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <HAL_SD_InitCard+0xbc>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f002 fdd9 	bl	80089aa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <HAL_SD_InitCard+0xbc>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 ffc6 	bl	8006d90 <SD_PowerON>
 8005e04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e013      	b.n	8005e4c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fee5 	bl	8006bf4 <SD_InitCard>
 8005e2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3728      	adds	r7, #40	; 0x28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bdb0      	pop	{r4, r5, r7, pc}
 8005e54:	422580a0 	.word	0x422580a0

08005e58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d107      	bne.n	8005e80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0c7      	b.n	8006010 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	f040 80c0 	bne.w	800600e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	441a      	add	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d907      	bls.n	8005eb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e0ae      	b.n	8006010 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005ed0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	4a50      	ldr	r2, [pc, #320]	; (8006018 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a4f      	ldr	r2, [pc, #316]	; (800601c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8005ee0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3380      	adds	r3, #128	; 0x80
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	025b      	lsls	r3, r3, #9
 8005efc:	089b      	lsrs	r3, r3, #2
 8005efe:	f7fd ff39 	bl	8003d74 <HAL_DMA_Start_IT>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d017      	beq.n	8005f38 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a40      	ldr	r2, [pc, #256]	; (8006020 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e06b      	b.n	8006010 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005f38:	4b3a      	ldr	r3, [pc, #232]	; (8006024 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d002      	beq.n	8005f4c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	025b      	lsls	r3, r3, #9
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f54:	4618      	mov	r0, r3
 8005f56:	f002 fdbb 	bl	8008ad0 <SDMMC_CmdBlockLength>
 8005f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00f      	beq.n	8005f82 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	431a      	orrs	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e046      	b.n	8006010 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f82:	f04f 33ff 	mov.w	r3, #4294967295
 8005f86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	025b      	lsls	r3, r3, #9
 8005f8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005f8e:	2390      	movs	r3, #144	; 0x90
 8005f90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005f92:	2302      	movs	r3, #2
 8005f94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f107 0210 	add.w	r2, r7, #16
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f002 fd65 	bl	8008a78 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d90a      	bls.n	8005fca <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2282      	movs	r2, #130	; 0x82
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f002 fdc9 	bl	8008b58 <SDMMC_CmdReadMultiBlock>
 8005fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005fc8:	e009      	b.n	8005fde <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2281      	movs	r2, #129	; 0x81
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f002 fd9c 	bl	8008b14 <SDMMC_CmdReadSingleBlock>
 8005fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e002      	b.n	8006010 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e000      	b.n	8006010 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	4618      	mov	r0, r3
 8006012:	3730      	adds	r7, #48	; 0x30
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	08006a03 	.word	0x08006a03
 800601c:	08006a75 	.word	0x08006a75
 8006020:	004005ff 	.word	0x004005ff
 8006024:	4225858c 	.word	0x4225858c

08006028 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08c      	sub	sp, #48	; 0x30
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0ca      	b.n	80061e6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	f040 80c3 	bne.w	80061e4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	441a      	add	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	429a      	cmp	r2, r3
 8006070:	d907      	bls.n	8006082 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e0b1      	b.n	80061e6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 021a 	orr.w	r2, r2, #26
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	4a52      	ldr	r2, [pc, #328]	; (80061f0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	4a51      	ldr	r2, [pc, #324]	; (80061f4 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 80060b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	2200      	movs	r2, #0
 80060b8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d002      	beq.n	80060c8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	025b      	lsls	r3, r3, #9
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060d0:	4618      	mov	r0, r3
 80060d2:	f002 fcfd 	bl	8008ad0 <SDMMC_CmdBlockLength>
 80060d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00f      	beq.n	80060fe <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a45      	ldr	r2, [pc, #276]	; (80061f8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e073      	b.n	80061e6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d90a      	bls.n	800611a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	22a0      	movs	r2, #160	; 0xa0
 8006108:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006110:	4618      	mov	r0, r3
 8006112:	f002 fd65 	bl	8008be0 <SDMMC_CmdWriteMultiBlock>
 8006116:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006118:	e009      	b.n	800612e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2290      	movs	r2, #144	; 0x90
 800611e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006126:	4618      	mov	r0, r3
 8006128:	f002 fd38 	bl	8008b9c <SDMMC_CmdWriteSingleBlock>
 800612c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d012      	beq.n	800615a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2f      	ldr	r2, [pc, #188]	; (80061f8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	431a      	orrs	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e045      	b.n	80061e6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800615a:	4b28      	ldr	r3, [pc, #160]	; (80061fc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3380      	adds	r3, #128	; 0x80
 800616c:	461a      	mov	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	025b      	lsls	r3, r3, #9
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	f7fd fdfe 	bl	8003d74 <HAL_DMA_Start_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01a      	beq.n	80061b4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 021a 	bic.w	r2, r2, #26
 800618c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a19      	ldr	r2, [pc, #100]	; (80061f8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006194:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e018      	b.n	80061e6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	025b      	lsls	r3, r3, #9
 80061be:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80061c0:	2390      	movs	r3, #144	; 0x90
 80061c2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f107 0210 	add.w	r2, r7, #16
 80061d8:	4611      	mov	r1, r2
 80061da:	4618      	mov	r0, r3
 80061dc:	f002 fc4c 	bl	8008a78 <SDIO_ConfigData>

      return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3730      	adds	r7, #48	; 0x30
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	080069d9 	.word	0x080069d9
 80061f4:	08006a75 	.word	0x08006a75
 80061f8:	004005ff 	.word	0x004005ff
 80061fc:	4225858c 	.word	0x4225858c

08006200 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_SD_IRQHandler+0x2e>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ffc8 	bl	80071bc <SD_Read_IT>
 800622c:	e155      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 808f 	beq.w	800635c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006256:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800625a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d039      	beq.n	80062ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <HAL_SD_IRQHandler+0x8a>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d011      	beq.n	80062ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f002 fcc8 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006294:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f91f 	bl	80064ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_SD_IRQHandler+0xda>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f003 f926 	bl	800952c <HAL_SD_RxCpltCallback>
 80062e0:	e0fb      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f003 f918 	bl	8009518 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062e8:	e0f7      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80f2 	beq.w	80064da <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f002 fc8d 	bl	8008c24 <SDMMC_CmdStopTransfer>
 800630a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8e4 	bl	80064ec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 80d5 	bne.w	80064da <HAL_SD_IRQHandler+0x2da>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	f040 80cf 	bne.w	80064da <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0208 	bic.w	r2, r2, #8
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f003 f8df 	bl	8009518 <HAL_SD_TxCpltCallback>
}
 800635a:	e0be      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <HAL_SD_IRQHandler+0x17c>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 ff72 	bl	800725e <SD_Write_IT>
 800637a:	e0ae      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80a7 	beq.w	80064da <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	f043 0202 	orr.w	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	f043 0208 	orr.w	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f043 0210 	orr.w	r2, r3, #16
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800640c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f002 fc06 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006418:	4602      	mov	r2, r0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f855 	bl	80064ec <HAL_SD_ErrorCallback>
}
 8006442:	e04a      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	d045      	beq.n	80064da <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_SD_IRQHandler+0x262>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d011      	beq.n	8006486 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	4a1f      	ldr	r2, [pc, #124]	; (80064e4 <HAL_SD_IRQHandler+0x2e4>)
 8006468:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fcd8 	bl	8003e24 <HAL_DMA_Abort_IT>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d02f      	beq.n	80064da <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fb4a 	bl	8006b18 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006484:	e029      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <HAL_SD_IRQHandler+0x29a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d011      	beq.n	80064be <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <HAL_SD_IRQHandler+0x2e8>)
 80064a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fd fcbc 	bl	8003e24 <HAL_DMA_Abort_IT>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d013      	beq.n	80064da <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fb65 	bl	8006b86 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064bc:	e00d      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f003 f816 	bl	8009504 <HAL_SD_AbortCallback>
}
 80064d8:	e7ff      	b.n	80064da <HAL_SD_IRQHandler+0x2da>
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	08006b19 	.word	0x08006b19
 80064e8:	08006b87 	.word	0x08006b87

080064ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650e:	0f9b      	lsrs	r3, r3, #30
 8006510:	b2da      	uxtb	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651a:	0e9b      	lsrs	r3, r3, #26
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	b2da      	uxtb	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652c:	0e1b      	lsrs	r3, r3, #24
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	b2da      	uxtb	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	b2da      	uxtb	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006556:	b2da      	uxtb	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006560:	0d1b      	lsrs	r3, r3, #20
 8006562:	b29a      	uxth	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	b2da      	uxtb	r2, r3
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657e:	0bdb      	lsrs	r3, r3, #15
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	b2da      	uxtb	r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006590:	0b9b      	lsrs	r3, r3, #14
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	b2da      	uxtb	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a2:	0b5b      	lsrs	r3, r3, #13
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b4:	0b1b      	lsrs	r3, r3, #12
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2200      	movs	r2, #0
 80065c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d163      	bne.n	8006698 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d4:	009a      	lsls	r2, r3, #2
 80065d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065da:	4013      	ands	r3, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065e0:	0f92      	lsrs	r2, r2, #30
 80065e2:	431a      	orrs	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ec:	0edb      	lsrs	r3, r3, #27
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fe:	0e1b      	lsrs	r3, r3, #24
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	b2da      	uxtb	r2, r3
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006610:	0d5b      	lsrs	r3, r3, #21
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	b2da      	uxtb	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006622:	0c9b      	lsrs	r3, r3, #18
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	b2da      	uxtb	r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006634:	0bdb      	lsrs	r3, r3, #15
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	b2da      	uxtb	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	7e1b      	ldrb	r3, [r3, #24]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	3302      	adds	r3, #2
 8006658:	2201      	movs	r2, #1
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006662:	fb02 f203 	mul.w	r2, r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	7a1b      	ldrb	r3, [r3, #8]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	2201      	movs	r2, #1
 8006676:	409a      	lsls	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006684:	0a52      	lsrs	r2, r2, #9
 8006686:	fb02 f203 	mul.w	r2, r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006694:	661a      	str	r2, [r3, #96]	; 0x60
 8006696:	e031      	b.n	80066fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	2b01      	cmp	r3, #1
 800669e:	d11d      	bne.n	80066dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a4:	041b      	lsls	r3, r3, #16
 80066a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	431a      	orrs	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	3301      	adds	r3, #1
 80066bc:	029a      	lsls	r2, r3, #10
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	661a      	str	r2, [r3, #96]	; 0x60
 80066da:	e00f      	b.n	80066fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a58      	ldr	r2, [pc, #352]	; (8006844 <HAL_SD_GetCardCSD+0x344>)
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e09d      	b.n	8006838 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006700:	0b9b      	lsrs	r3, r3, #14
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006712:	09db      	lsrs	r3, r3, #7
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671a:	b2da      	uxtb	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006734:	0fdb      	lsrs	r3, r3, #31
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	0f5b      	lsrs	r3, r3, #29
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	b2da      	uxtb	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	0e9b      	lsrs	r3, r3, #26
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	b2da      	uxtb	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006764:	0d9b      	lsrs	r3, r3, #22
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	b2da      	uxtb	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	0d5b      	lsrs	r3, r3, #21
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	0c1b      	lsrs	r3, r3, #16
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	0bdb      	lsrs	r3, r3, #15
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	0b9b      	lsrs	r3, r3, #14
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	0b5b      	lsrs	r3, r3, #13
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	0b1b      	lsrs	r3, r3, #12
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	0a9b      	lsrs	r3, r3, #10
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	b2da      	uxtb	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006826:	b2da      	uxtb	r2, r3
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	004005ff 	.word	0x004005ff

08006848 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b08e      	sub	sp, #56	; 0x38
 80068a4:	af04      	add	r7, sp, #16
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2203      	movs	r2, #3
 80068ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d02e      	beq.n	8006918 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c0:	d106      	bne.n	80068d0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
 80068ce:	e029      	b.n	8006924 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d6:	d10a      	bne.n	80068ee <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fb0f 	bl	8006efc <SD_WideBus_Enable>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
 80068ec:	e01a      	b.n	8006924 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fb4c 	bl	8006f92 <SD_WideBus_Disable>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
 8006908:	e00c      	b.n	8006924 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
 8006916:	e005      	b.n	8006924 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a18      	ldr	r2, [pc, #96]	; (8006994 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e024      	b.n	800698a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	466c      	mov	r4, sp
 8006968:	f107 0318 	add.w	r3, r7, #24
 800696c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006970:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006974:	f107 030c 	add.w	r3, r7, #12
 8006978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800697a:	4628      	mov	r0, r5
 800697c:	f001 ffcc 	bl	8008918 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	; 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bdb0      	pop	{r4, r5, r7, pc}
 8006992:	bf00      	nop
 8006994:	004005ff 	.word	0x004005ff

08006998 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069a4:	f107 030c 	add.w	r3, r7, #12
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa7e 	bl	8006eac <SD_SendStatus>
 80069b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069ce:	693b      	ldr	r3, [r7, #16]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	2b82      	cmp	r3, #130	; 0x82
 8006a16:	d111      	bne.n	8006a3c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f002 f901 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006a22:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d008      	beq.n	8006a3c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff fd58 	bl	80064ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0208 	bic.w	r2, r2, #8
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f002 fd61 	bl	800952c <HAL_SD_RxCpltCallback>
#endif
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fd fb7a 	bl	800417c <HAL_DMA_GetError>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d03e      	beq.n	8006b0c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d002      	beq.n	8006aaa <SD_DMAError+0x36>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d12d      	bne.n	8006b06 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <SD_DMAError+0xa0>)
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ace:	6978      	ldr	r0, [r7, #20]
 8006ad0:	f7ff ff62 	bl	8006998 <HAL_SD_GetCardState>
 8006ad4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	d002      	beq.n	8006ae2 <SD_DMAError+0x6e>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	d10a      	bne.n	8006af8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 f89c 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	431a      	orrs	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2200      	movs	r2, #0
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff fcf0 	bl	80064ec <HAL_SD_ErrorCallback>
#endif
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	004005ff 	.word	0x004005ff

08006b18 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff ff31 	bl	8006998 <HAL_SD_GetCardState>
 8006b36:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b06      	cmp	r3, #6
 8006b4a:	d002      	beq.n	8006b52 <SD_DMATxAbort+0x3a>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	d10a      	bne.n	8006b68 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 f864 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f002 fcc7 	bl	8009504 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b76:	e002      	b.n	8006b7e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fcb7 	bl	80064ec <HAL_SD_ErrorCallback>
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fefa 	bl	8006998 <HAL_SD_GetCardState>
 8006ba4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b06      	cmp	r3, #6
 8006bb8:	d002      	beq.n	8006bc0 <SD_DMARxAbort+0x3a>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b05      	cmp	r3, #5
 8006bbe:	d10a      	bne.n	8006bd6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 f82d 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f002 fc90 	bl	8009504 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006be4:	e002      	b.n	8006bec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fc80 	bl	80064ec <HAL_SD_ErrorCallback>
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bf4:	b5b0      	push	{r4, r5, r7, lr}
 8006bf6:	b094      	sub	sp, #80	; 0x50
 8006bf8:	af04      	add	r7, sp, #16
 8006bfa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fedf 	bl	80089c8 <SDIO_GetPowerState>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c14:	e0b7      	b.n	8006d86 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d02f      	beq.n	8006c7e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f002 f908 	bl	8008e38 <SDMMC_CmdSendCID>
 8006c28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	e0a8      	b.n	8006d86 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 ff09 	bl	8008a52 <SDIO_GetResponse>
 8006c40:	4602      	mov	r2, r0
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2104      	movs	r1, #4
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 ff00 	bl	8008a52 <SDIO_GetResponse>
 8006c52:	4602      	mov	r2, r0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2108      	movs	r1, #8
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fef7 	bl	8008a52 <SDIO_GetResponse>
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	210c      	movs	r1, #12
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 feee 	bl	8008a52 <SDIO_GetResponse>
 8006c76:	4602      	mov	r2, r0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d00d      	beq.n	8006ca2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f107 020e 	add.w	r2, r7, #14
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f002 f90e 	bl	8008eb2 <SDMMC_CmdSetRelAdd>
 8006c96:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	e071      	b.n	8006d86 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d036      	beq.n	8006d18 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006caa:	89fb      	ldrh	r3, [r7, #14]
 8006cac:	461a      	mov	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f002 f8d8 	bl	8008e74 <SDMMC_CmdSendCSD>
 8006cc4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cce:	e05a      	b.n	8006d86 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 febb 	bl	8008a52 <SDIO_GetResponse>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2104      	movs	r1, #4
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 feb2 	bl	8008a52 <SDIO_GetResponse>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2108      	movs	r1, #8
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 fea9 	bl	8008a52 <SDIO_GetResponse>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	210c      	movs	r1, #12
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fea0 	bl	8008a52 <SDIO_GetResponse>
 8006d12:	4602      	mov	r2, r0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2104      	movs	r1, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 fe97 	bl	8008a52 <SDIO_GetResponse>
 8006d24:	4603      	mov	r3, r0
 8006d26:	0d1a      	lsrs	r2, r3, #20
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d2c:	f107 0310 	add.w	r3, r7, #16
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fbe4 	bl	8006500 <HAL_SD_GetCardCSD>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d42:	e020      	b.n	8006d86 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	f04f 0400 	mov.w	r4, #0
 8006d52:	461a      	mov	r2, r3
 8006d54:	4623      	mov	r3, r4
 8006d56:	4608      	mov	r0, r1
 8006d58:	f001 ff86 	bl	8008c68 <SDMMC_CmdSelDesel>
 8006d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <SD_InitCard+0x174>
  {
    return errorstate;
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	e00e      	b.n	8006d86 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681d      	ldr	r5, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	466c      	mov	r4, sp
 8006d70:	f103 0210 	add.w	r2, r3, #16
 8006d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f001 fdca 	bl	8008918 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3740      	adds	r7, #64	; 0x40
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 ff80 	bl	8008cae <SDMMC_CmdGoIdleState>
 8006dae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <SD_PowerON+0x2a>
  {
    return errorstate;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	e072      	b.n	8006ea0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 ff93 	bl	8008cea <SDMMC_CmdOperCond>
 8006dc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 ff69 	bl	8008cae <SDMMC_CmdGoIdleState>
 8006ddc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <SD_PowerON+0x5e>
    {
      return errorstate;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	e05b      	b.n	8006ea0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d137      	bne.n	8006e66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 ff93 	bl	8008d28 <SDMMC_CmdAppCommand>
 8006e02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02d      	beq.n	8006e66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e0e:	e047      	b.n	8006ea0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 ff86 	bl	8008d28 <SDMMC_CmdAppCommand>
 8006e1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <SD_PowerON+0x98>
    {
      return errorstate;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e03b      	b.n	8006ea0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	491e      	ldr	r1, [pc, #120]	; (8006ea8 <SD_PowerON+0x118>)
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 ff9c 	bl	8008d6c <SDMMC_CmdAppOperCommand>
 8006e34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e40:	e02e      	b.n	8006ea0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fe02 	bl	8008a52 <SDIO_GetResponse>
 8006e4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	0fdb      	lsrs	r3, r3, #31
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <SD_PowerON+0xcc>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <SD_PowerON+0xce>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]

    count++;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d802      	bhi.n	8006e76 <SD_PowerON+0xe6>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0cc      	beq.n	8006e10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d902      	bls.n	8006e86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e84:	e00c      	b.n	8006ea0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	645a      	str	r2, [r3, #68]	; 0x44
 8006e96:	e002      	b.n	8006e9e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	c1100000 	.word	0xc1100000

08006eac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ec0:	e018      	b.n	8006ef4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f002 f810 	bl	8008ef4 <SDMMC_CmdSendStatus>
 8006ed4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e009      	b.n	8006ef4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 fdb3 	bl	8008a52 <SDIO_GetResponse>
 8006eec:	4602      	mov	r2, r0
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fd9d 	bl	8008a52 <SDIO_GetResponse>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f22:	d102      	bne.n	8006f2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f28:	e02f      	b.n	8006f8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f2a:	f107 030c 	add.w	r3, r7, #12
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f879 	bl	8007028 <SD_FindSCR>
 8006f36:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	e023      	b.n	8006f8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01c      	beq.n	8006f86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f001 fee5 	bl	8008d28 <SDMMC_CmdAppCommand>
 8006f5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	e00f      	b.n	8006f8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2102      	movs	r1, #2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 ff1e 	bl	8008db2 <SDMMC_CmdBusWidth>
 8006f76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	e003      	b.n	8006f8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e001      	b.n	8006f8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b086      	sub	sp, #24
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 fd52 	bl	8008a52 <SDIO_GetResponse>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fb8:	d102      	bne.n	8006fc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fbe:	e02f      	b.n	8007020 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f82e 	bl	8007028 <SD_FindSCR>
 8006fcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	e023      	b.n	8007020 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01c      	beq.n	800701c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f001 fe9a 	bl	8008d28 <SDMMC_CmdAppCommand>
 8006ff4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	e00f      	b.n	8007020 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f001 fed3 	bl	8008db2 <SDMMC_CmdBusWidth>
 800700c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	e003      	b.n	8007020 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007018:	2300      	movs	r3, #0
 800701a:	e001      	b.n	8007020 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800701c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b08f      	sub	sp, #60	; 0x3c
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007032:	f7fc f8ad 	bl	8003190 <HAL_GetTick>
 8007036:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2108      	movs	r1, #8
 800704e:	4618      	mov	r0, r3
 8007050:	f001 fd3e 	bl	8008ad0 <SDMMC_CmdBlockLength>
 8007054:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SD_FindSCR+0x38>
  {
    return errorstate;
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	e0a9      	b.n	80071b4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f001 fe5b 	bl	8008d28 <SDMMC_CmdAppCommand>
 8007072:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <SD_FindSCR+0x56>
  {
    return errorstate;
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	e09a      	b.n	80071b4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007084:	2308      	movs	r3, #8
 8007086:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007088:	2330      	movs	r3, #48	; 0x30
 800708a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800708c:	2302      	movs	r3, #2
 800708e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007090:	2300      	movs	r3, #0
 8007092:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007094:	2301      	movs	r3, #1
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f107 0210 	add.w	r2, r7, #16
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 fce8 	bl	8008a78 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 fea2 	bl	8008df6 <SDMMC_CmdSendSCR>
 80070b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d022      	beq.n	8007100 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	e07a      	b.n	80071b4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	f107 0208 	add.w	r2, r7, #8
 80070d8:	18d4      	adds	r4, r2, r3
 80070da:	4608      	mov	r0, r1
 80070dc:	f001 fc47 	bl	800896e <SDIO_ReadFIFO>
 80070e0:	4603      	mov	r3, r0
 80070e2:	6023      	str	r3, [r4, #0]
      index++;
 80070e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e6:	3301      	adds	r3, #1
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070ea:	f7fc f851 	bl	8003190 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d102      	bne.n	8007100 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80070fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070fe:	e059      	b.n	80071b4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007106:	f240 432a 	movw	r3, #1066	; 0x42a
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0d6      	beq.n	80070be <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2208      	movs	r2, #8
 8007124:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007126:	2308      	movs	r3, #8
 8007128:	e044      	b.n	80071b4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2202      	movs	r2, #2
 800713e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007140:	2302      	movs	r3, #2
 8007142:	e037      	b.n	80071b4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2220      	movs	r2, #32
 8007158:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800715a:	2320      	movs	r3, #32
 800715c:	e02a      	b.n	80071b4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f240 523a 	movw	r2, #1338	; 0x53a
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	061a      	lsls	r2, r3, #24
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007174:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	0a1b      	lsrs	r3, r3, #8
 800717a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800717e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	0e1b      	lsrs	r3, r3, #24
 8007184:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	601a      	str	r2, [r3, #0]
    scr++;
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	3304      	adds	r3, #4
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	061a      	lsls	r2, r3, #24
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800719c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	0e1b      	lsrs	r3, r3, #24
 80071ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	373c      	adds	r7, #60	; 0x3c
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd90      	pop	{r4, r7, pc}

080071bc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d03f      	beq.n	8007256 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e033      	b.n	8007244 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f001 fbc4 	bl	800896e <SDIO_ReadFIFO>
 80071e6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	0a1b      	lsrs	r3, r3, #8
 8007200:	b2da      	uxtb	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	3b01      	subs	r3, #1
 8007210:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	b2da      	uxtb	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3b01      	subs	r3, #1
 8007226:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	3b01      	subs	r3, #1
 800723c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	3301      	adds	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b07      	cmp	r3, #7
 8007248:	d9c8      	bls.n	80071dc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d043      	beq.n	8007300 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e037      	b.n	80072ee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	021a      	lsls	r2, r3, #8
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4313      	orrs	r3, r2
 800729a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3301      	adds	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	041a      	lsls	r2, r3, #16
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3b01      	subs	r3, #1
 80072be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	061a      	lsls	r2, r3, #24
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f107 0208 	add.w	r2, r7, #8
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fb50 	bl	8008988 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	3301      	adds	r3, #1
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b07      	cmp	r3, #7
 80072f2:	d9c4      	bls.n	800727e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007300:	bf00      	nop
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e056      	b.n	80073c8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fb fae3 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	ea42 0103 	orr.w	r1, r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	0c1b      	lsrs	r3, r3, #16
 8007398:	f003 0104 	and.w	r1, r3, #4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e01d      	b.n	800741e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fb fb3e 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f000 fb60 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b06      	cmp	r3, #6
 800744e:	d007      	beq.n	8007460 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e01d      	b.n	80074bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fb fa7b 	bl	8002990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f000 fb11 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2201      	movs	r2, #1
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fd4c 	bl	8007f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a15      	ldr	r2, [pc, #84]	; (8007538 <HAL_TIM_PWM_Start+0x74>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_TIM_PWM_Start+0x2c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a14      	ldr	r2, [pc, #80]	; (800753c <HAL_TIM_PWM_Start+0x78>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_PWM_Start+0x30>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_PWM_Start+0x32>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d007      	beq.n	800750a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b06      	cmp	r3, #6
 800751a:	d007      	beq.n	800752c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40010400 	.word	0x40010400

08007540 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e083      	b.n	800765c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fb faef 	bl	8002b4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007584:	f023 0307 	bic.w	r3, r3, #7
 8007588:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f000 fa9d 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	4313      	orrs	r3, r2
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80075e0:	f023 030c 	bic.w	r3, r3, #12
 80075e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	4313      	orrs	r3, r2
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	011a      	lsls	r2, r3, #4
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	031b      	lsls	r3, r3, #12
 8007610:	4313      	orrs	r3, r2
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800761e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007626:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	4313      	orrs	r3, r2
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_TIM_Encoder_Start+0x16>
 8007674:	2b04      	cmp	r3, #4
 8007676:	d008      	beq.n	800768a <HAL_TIM_Encoder_Start+0x26>
 8007678:	e00f      	b.n	800769a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fc76 	bl	8007f74 <TIM_CCxChannelCmd>
      break;
 8007688:	e016      	b.n	80076b8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2201      	movs	r2, #1
 8007690:	2104      	movs	r1, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fc6e 	bl	8007f74 <TIM_CCxChannelCmd>
      break;
 8007698:	e00e      	b.n	80076b8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2201      	movs	r2, #1
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fc66 	bl	8007f74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2201      	movs	r2, #1
 80076ae:	2104      	movs	r1, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fc5f 	bl	8007f74 <TIM_CCxChannelCmd>
      break;
 80076b6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d122      	bne.n	800772e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d11b      	bne.n	800772e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f06f 0202 	mvn.w	r2, #2
 80076fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9bf 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 800771a:	e005      	b.n	8007728 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9b1 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9c2 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b04      	cmp	r3, #4
 800773a:	d122      	bne.n	8007782 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b04      	cmp	r3, #4
 8007748:	d11b      	bne.n	8007782 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f06f 0204 	mvn.w	r2, #4
 8007752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f995 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 800776e:	e005      	b.n	800777c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f987 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f998 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b08      	cmp	r3, #8
 800778e:	d122      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b08      	cmp	r3, #8
 800779c:	d11b      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f06f 0208 	mvn.w	r2, #8
 80077a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2204      	movs	r2, #4
 80077ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f96b 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80077c2:	e005      	b.n	80077d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f95d 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f96e 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d122      	bne.n	800782a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d11b      	bne.n	800782a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f06f 0210 	mvn.w	r2, #16
 80077fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2208      	movs	r2, #8
 8007800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f941 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 8007816:	e005      	b.n	8007824 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f933 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f944 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d10e      	bne.n	8007856 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b01      	cmp	r3, #1
 8007844:	d107      	bne.n	8007856 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f06f 0201 	mvn.w	r2, #1
 800784e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f90d 	bl	8007a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007860:	2b80      	cmp	r3, #128	; 0x80
 8007862:	d10e      	bne.n	8007882 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786e:	2b80      	cmp	r3, #128	; 0x80
 8007870:	d107      	bne.n	8007882 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800787a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc77 	bl	8008170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d10e      	bne.n	80078ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d107      	bne.n	80078ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f909 	bl	8007ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d10e      	bne.n	80078da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d107      	bne.n	80078da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f06f 0220 	mvn.w	r2, #32
 80078d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc41 	bl	800815c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078da:	bf00      	nop
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e0b4      	b.n	8007a68 <HAL_TIM_PWM_ConfigChannel+0x184>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2202      	movs	r2, #2
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b0c      	cmp	r3, #12
 8007912:	f200 809f 	bhi.w	8007a54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007951 	.word	0x08007951
 8007920:	08007a55 	.word	0x08007a55
 8007924:	08007a55 	.word	0x08007a55
 8007928:	08007a55 	.word	0x08007a55
 800792c:	08007991 	.word	0x08007991
 8007930:	08007a55 	.word	0x08007a55
 8007934:	08007a55 	.word	0x08007a55
 8007938:	08007a55 	.word	0x08007a55
 800793c:	080079d3 	.word	0x080079d3
 8007940:	08007a55 	.word	0x08007a55
 8007944:	08007a55 	.word	0x08007a55
 8007948:	08007a55 	.word	0x08007a55
 800794c:	08007a13 	.word	0x08007a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f95c 	bl	8007c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0208 	orr.w	r2, r2, #8
 800796a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0204 	bic.w	r2, r2, #4
 800797a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6999      	ldr	r1, [r3, #24]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	619a      	str	r2, [r3, #24]
      break;
 800798e:	e062      	b.n	8007a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f9ac 	bl	8007cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6999      	ldr	r1, [r3, #24]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	021a      	lsls	r2, r3, #8
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	619a      	str	r2, [r3, #24]
      break;
 80079d0:	e041      	b.n	8007a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fa01 	bl	8007de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0208 	orr.w	r2, r2, #8
 80079ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0204 	bic.w	r2, r2, #4
 80079fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69d9      	ldr	r1, [r3, #28]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	61da      	str	r2, [r3, #28]
      break;
 8007a10:	e021      	b.n	8007a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fa55 	bl	8007ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69d9      	ldr	r1, [r3, #28]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	021a      	lsls	r2, r3, #8
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	61da      	str	r2, [r3, #28]
      break;
 8007a52:	e000      	b.n	8007a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007a54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a40      	ldr	r2, [pc, #256]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d00f      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3d      	ldr	r2, [pc, #244]	; (8007bec <TIM_Base_SetConfig+0x118>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3c      	ldr	r2, [pc, #240]	; (8007bf0 <TIM_Base_SetConfig+0x11c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3b      	ldr	r2, [pc, #236]	; (8007bf4 <TIM_Base_SetConfig+0x120>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a3a      	ldr	r2, [pc, #232]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2f      	ldr	r2, [pc, #188]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b34:	d027      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	; (8007bec <TIM_Base_SetConfig+0x118>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d023      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <TIM_Base_SetConfig+0x11c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <TIM_Base_SetConfig+0x120>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d01b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d017      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <TIM_Base_SetConfig+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <TIM_Base_SetConfig+0x12c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <TIM_Base_SetConfig+0x130>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a25      	ldr	r2, [pc, #148]	; (8007c08 <TIM_Base_SetConfig+0x134>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <TIM_Base_SetConfig+0x138>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a23      	ldr	r2, [pc, #140]	; (8007c10 <TIM_Base_SetConfig+0x13c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d108      	bne.n	8007b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0xf8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d103      	bne.n	8007bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	615a      	str	r2, [r3, #20]
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	40001800 	.word	0x40001800
 8007c0c:	40001c00 	.word	0x40001c00
 8007c10:	40002000 	.word	0x40002000

08007c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f023 0201 	bic.w	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 0302 	bic.w	r3, r3, #2
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a20      	ldr	r2, [pc, #128]	; (8007cec <TIM_OC1_SetConfig+0xd8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <TIM_OC1_SetConfig+0x64>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a1f      	ldr	r2, [pc, #124]	; (8007cf0 <TIM_OC1_SetConfig+0xdc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d10c      	bne.n	8007c92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f023 0308 	bic.w	r3, r3, #8
 8007c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f023 0304 	bic.w	r3, r3, #4
 8007c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a15      	ldr	r2, [pc, #84]	; (8007cec <TIM_OC1_SetConfig+0xd8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d003      	beq.n	8007ca2 <TIM_OC1_SetConfig+0x8e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a14      	ldr	r2, [pc, #80]	; (8007cf0 <TIM_OC1_SetConfig+0xdc>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d111      	bne.n	8007cc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	621a      	str	r2, [r3, #32]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	40010000 	.word	0x40010000
 8007cf0:	40010400 	.word	0x40010400

08007cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f023 0210 	bic.w	r2, r3, #16
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0320 	bic.w	r3, r3, #32
 8007d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <TIM_OC2_SetConfig+0xe4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_OC2_SetConfig+0x68>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <TIM_OC2_SetConfig+0xe8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d10d      	bne.n	8007d78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a17      	ldr	r2, [pc, #92]	; (8007dd8 <TIM_OC2_SetConfig+0xe4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_OC2_SetConfig+0x94>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <TIM_OC2_SetConfig+0xe8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d113      	bne.n	8007db0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	621a      	str	r2, [r3, #32]
}
 8007dca:	bf00      	nop
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40010400 	.word	0x40010400

08007de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <TIM_OC3_SetConfig+0xe0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC3_SetConfig+0x66>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a20      	ldr	r2, [pc, #128]	; (8007ec4 <TIM_OC3_SetConfig+0xe4>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d10d      	bne.n	8007e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a16      	ldr	r2, [pc, #88]	; (8007ec0 <TIM_OC3_SetConfig+0xe0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_OC3_SetConfig+0x92>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <TIM_OC3_SetConfig+0xe4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d113      	bne.n	8007e9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40010400 	.word	0x40010400

08007ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <TIM_OC4_SetConfig+0xa4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC4_SetConfig+0x68>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a11      	ldr	r2, [pc, #68]	; (8007f70 <TIM_OC4_SetConfig+0xa8>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d109      	bne.n	8007f44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	019b      	lsls	r3, r3, #6
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40010400 	.word	0x40010400

08007f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2201      	movs	r2, #1
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a1a      	ldr	r2, [r3, #32]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	43db      	mvns	r3, r3
 8007f96:	401a      	ands	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 031f 	and.w	r3, r3, #31
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	621a      	str	r2, [r3, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d101      	bne.n	8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e05a      	b.n	800808e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a21      	ldr	r2, [pc, #132]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d022      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008024:	d01d      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1d      	ldr	r2, [pc, #116]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d018      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1b      	ldr	r2, [pc, #108]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d10c      	bne.n	800807c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	4313      	orrs	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40010000 	.word	0x40010000
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000800 	.word	0x40000800
 80080a8:	40000c00 	.word	0x40000c00
 80080ac:	40010400 	.word	0x40010400
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40001800 	.word	0x40001800

080080b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e03d      	b.n	8008150 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e03f      	b.n	8008216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fa fdf0 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2224      	movs	r2, #36	; 0x24
 80081b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f829 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695a      	ldr	r2, [r3, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008262:	f023 030c 	bic.w	r3, r3, #12
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	430b      	orrs	r3, r1
 800826e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828e:	f040 818b 	bne.w	80085a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4ac1      	ldr	r2, [pc, #772]	; (800859c <UART_SetConfig+0x37c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d005      	beq.n	80082a8 <UART_SetConfig+0x88>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4abf      	ldr	r2, [pc, #764]	; (80085a0 <UART_SetConfig+0x380>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	f040 80bd 	bne.w	8008422 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a8:	f7fd f8b2 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 80082ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	461d      	mov	r5, r3
 80082b2:	f04f 0600 	mov.w	r6, #0
 80082b6:	46a8      	mov	r8, r5
 80082b8:	46b1      	mov	r9, r6
 80082ba:	eb18 0308 	adds.w	r3, r8, r8
 80082be:	eb49 0409 	adc.w	r4, r9, r9
 80082c2:	4698      	mov	r8, r3
 80082c4:	46a1      	mov	r9, r4
 80082c6:	eb18 0805 	adds.w	r8, r8, r5
 80082ca:	eb49 0906 	adc.w	r9, r9, r6
 80082ce:	f04f 0100 	mov.w	r1, #0
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082e2:	4688      	mov	r8, r1
 80082e4:	4691      	mov	r9, r2
 80082e6:	eb18 0005 	adds.w	r0, r8, r5
 80082ea:	eb49 0106 	adc.w	r1, r9, r6
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	461d      	mov	r5, r3
 80082f4:	f04f 0600 	mov.w	r6, #0
 80082f8:	196b      	adds	r3, r5, r5
 80082fa:	eb46 0406 	adc.w	r4, r6, r6
 80082fe:	461a      	mov	r2, r3
 8008300:	4623      	mov	r3, r4
 8008302:	f7f8 fcd9 	bl	8000cb8 <__aeabi_uldivmod>
 8008306:	4603      	mov	r3, r0
 8008308:	460c      	mov	r4, r1
 800830a:	461a      	mov	r2, r3
 800830c:	4ba5      	ldr	r3, [pc, #660]	; (80085a4 <UART_SetConfig+0x384>)
 800830e:	fba3 2302 	umull	r2, r3, r3, r2
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	461d      	mov	r5, r3
 800831c:	f04f 0600 	mov.w	r6, #0
 8008320:	46a9      	mov	r9, r5
 8008322:	46b2      	mov	sl, r6
 8008324:	eb19 0309 	adds.w	r3, r9, r9
 8008328:	eb4a 040a 	adc.w	r4, sl, sl
 800832c:	4699      	mov	r9, r3
 800832e:	46a2      	mov	sl, r4
 8008330:	eb19 0905 	adds.w	r9, r9, r5
 8008334:	eb4a 0a06 	adc.w	sl, sl, r6
 8008338:	f04f 0100 	mov.w	r1, #0
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800834c:	4689      	mov	r9, r1
 800834e:	4692      	mov	sl, r2
 8008350:	eb19 0005 	adds.w	r0, r9, r5
 8008354:	eb4a 0106 	adc.w	r1, sl, r6
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	461d      	mov	r5, r3
 800835e:	f04f 0600 	mov.w	r6, #0
 8008362:	196b      	adds	r3, r5, r5
 8008364:	eb46 0406 	adc.w	r4, r6, r6
 8008368:	461a      	mov	r2, r3
 800836a:	4623      	mov	r3, r4
 800836c:	f7f8 fca4 	bl	8000cb8 <__aeabi_uldivmod>
 8008370:	4603      	mov	r3, r0
 8008372:	460c      	mov	r4, r1
 8008374:	461a      	mov	r2, r3
 8008376:	4b8b      	ldr	r3, [pc, #556]	; (80085a4 <UART_SetConfig+0x384>)
 8008378:	fba3 1302 	umull	r1, r3, r3, r2
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	2164      	movs	r1, #100	; 0x64
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	3332      	adds	r3, #50	; 0x32
 800838a:	4a86      	ldr	r2, [pc, #536]	; (80085a4 <UART_SetConfig+0x384>)
 800838c:	fba2 2303 	umull	r2, r3, r2, r3
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008398:	4498      	add	r8, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	461d      	mov	r5, r3
 800839e:	f04f 0600 	mov.w	r6, #0
 80083a2:	46a9      	mov	r9, r5
 80083a4:	46b2      	mov	sl, r6
 80083a6:	eb19 0309 	adds.w	r3, r9, r9
 80083aa:	eb4a 040a 	adc.w	r4, sl, sl
 80083ae:	4699      	mov	r9, r3
 80083b0:	46a2      	mov	sl, r4
 80083b2:	eb19 0905 	adds.w	r9, r9, r5
 80083b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80083ba:	f04f 0100 	mov.w	r1, #0
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083ce:	4689      	mov	r9, r1
 80083d0:	4692      	mov	sl, r2
 80083d2:	eb19 0005 	adds.w	r0, r9, r5
 80083d6:	eb4a 0106 	adc.w	r1, sl, r6
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	461d      	mov	r5, r3
 80083e0:	f04f 0600 	mov.w	r6, #0
 80083e4:	196b      	adds	r3, r5, r5
 80083e6:	eb46 0406 	adc.w	r4, r6, r6
 80083ea:	461a      	mov	r2, r3
 80083ec:	4623      	mov	r3, r4
 80083ee:	f7f8 fc63 	bl	8000cb8 <__aeabi_uldivmod>
 80083f2:	4603      	mov	r3, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	461a      	mov	r2, r3
 80083f8:	4b6a      	ldr	r3, [pc, #424]	; (80085a4 <UART_SetConfig+0x384>)
 80083fa:	fba3 1302 	umull	r1, r3, r3, r2
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	2164      	movs	r1, #100	; 0x64
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	3332      	adds	r3, #50	; 0x32
 800840c:	4a65      	ldr	r2, [pc, #404]	; (80085a4 <UART_SetConfig+0x384>)
 800840e:	fba2 2303 	umull	r2, r3, r2, r3
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	f003 0207 	and.w	r2, r3, #7
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4442      	add	r2, r8
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	e26f      	b.n	8008902 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008422:	f7fc ffe1 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 8008426:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	461d      	mov	r5, r3
 800842c:	f04f 0600 	mov.w	r6, #0
 8008430:	46a8      	mov	r8, r5
 8008432:	46b1      	mov	r9, r6
 8008434:	eb18 0308 	adds.w	r3, r8, r8
 8008438:	eb49 0409 	adc.w	r4, r9, r9
 800843c:	4698      	mov	r8, r3
 800843e:	46a1      	mov	r9, r4
 8008440:	eb18 0805 	adds.w	r8, r8, r5
 8008444:	eb49 0906 	adc.w	r9, r9, r6
 8008448:	f04f 0100 	mov.w	r1, #0
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008454:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008458:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800845c:	4688      	mov	r8, r1
 800845e:	4691      	mov	r9, r2
 8008460:	eb18 0005 	adds.w	r0, r8, r5
 8008464:	eb49 0106 	adc.w	r1, r9, r6
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	461d      	mov	r5, r3
 800846e:	f04f 0600 	mov.w	r6, #0
 8008472:	196b      	adds	r3, r5, r5
 8008474:	eb46 0406 	adc.w	r4, r6, r6
 8008478:	461a      	mov	r2, r3
 800847a:	4623      	mov	r3, r4
 800847c:	f7f8 fc1c 	bl	8000cb8 <__aeabi_uldivmod>
 8008480:	4603      	mov	r3, r0
 8008482:	460c      	mov	r4, r1
 8008484:	461a      	mov	r2, r3
 8008486:	4b47      	ldr	r3, [pc, #284]	; (80085a4 <UART_SetConfig+0x384>)
 8008488:	fba3 2302 	umull	r2, r3, r3, r2
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	461d      	mov	r5, r3
 8008496:	f04f 0600 	mov.w	r6, #0
 800849a:	46a9      	mov	r9, r5
 800849c:	46b2      	mov	sl, r6
 800849e:	eb19 0309 	adds.w	r3, r9, r9
 80084a2:	eb4a 040a 	adc.w	r4, sl, sl
 80084a6:	4699      	mov	r9, r3
 80084a8:	46a2      	mov	sl, r4
 80084aa:	eb19 0905 	adds.w	r9, r9, r5
 80084ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80084b2:	f04f 0100 	mov.w	r1, #0
 80084b6:	f04f 0200 	mov.w	r2, #0
 80084ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084c6:	4689      	mov	r9, r1
 80084c8:	4692      	mov	sl, r2
 80084ca:	eb19 0005 	adds.w	r0, r9, r5
 80084ce:	eb4a 0106 	adc.w	r1, sl, r6
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	461d      	mov	r5, r3
 80084d8:	f04f 0600 	mov.w	r6, #0
 80084dc:	196b      	adds	r3, r5, r5
 80084de:	eb46 0406 	adc.w	r4, r6, r6
 80084e2:	461a      	mov	r2, r3
 80084e4:	4623      	mov	r3, r4
 80084e6:	f7f8 fbe7 	bl	8000cb8 <__aeabi_uldivmod>
 80084ea:	4603      	mov	r3, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	461a      	mov	r2, r3
 80084f0:	4b2c      	ldr	r3, [pc, #176]	; (80085a4 <UART_SetConfig+0x384>)
 80084f2:	fba3 1302 	umull	r1, r3, r3, r2
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	2164      	movs	r1, #100	; 0x64
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	3332      	adds	r3, #50	; 0x32
 8008504:	4a27      	ldr	r2, [pc, #156]	; (80085a4 <UART_SetConfig+0x384>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008512:	4498      	add	r8, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	461d      	mov	r5, r3
 8008518:	f04f 0600 	mov.w	r6, #0
 800851c:	46a9      	mov	r9, r5
 800851e:	46b2      	mov	sl, r6
 8008520:	eb19 0309 	adds.w	r3, r9, r9
 8008524:	eb4a 040a 	adc.w	r4, sl, sl
 8008528:	4699      	mov	r9, r3
 800852a:	46a2      	mov	sl, r4
 800852c:	eb19 0905 	adds.w	r9, r9, r5
 8008530:	eb4a 0a06 	adc.w	sl, sl, r6
 8008534:	f04f 0100 	mov.w	r1, #0
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008540:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008544:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008548:	4689      	mov	r9, r1
 800854a:	4692      	mov	sl, r2
 800854c:	eb19 0005 	adds.w	r0, r9, r5
 8008550:	eb4a 0106 	adc.w	r1, sl, r6
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	461d      	mov	r5, r3
 800855a:	f04f 0600 	mov.w	r6, #0
 800855e:	196b      	adds	r3, r5, r5
 8008560:	eb46 0406 	adc.w	r4, r6, r6
 8008564:	461a      	mov	r2, r3
 8008566:	4623      	mov	r3, r4
 8008568:	f7f8 fba6 	bl	8000cb8 <__aeabi_uldivmod>
 800856c:	4603      	mov	r3, r0
 800856e:	460c      	mov	r4, r1
 8008570:	461a      	mov	r2, r3
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <UART_SetConfig+0x384>)
 8008574:	fba3 1302 	umull	r1, r3, r3, r2
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	2164      	movs	r1, #100	; 0x64
 800857c:	fb01 f303 	mul.w	r3, r1, r3
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	3332      	adds	r3, #50	; 0x32
 8008586:	4a07      	ldr	r2, [pc, #28]	; (80085a4 <UART_SetConfig+0x384>)
 8008588:	fba2 2303 	umull	r2, r3, r2, r3
 800858c:	095b      	lsrs	r3, r3, #5
 800858e:	f003 0207 	and.w	r2, r3, #7
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4442      	add	r2, r8
 8008598:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800859a:	e1b2      	b.n	8008902 <UART_SetConfig+0x6e2>
 800859c:	40011000 	.word	0x40011000
 80085a0:	40011400 	.word	0x40011400
 80085a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4ad7      	ldr	r2, [pc, #860]	; (800890c <UART_SetConfig+0x6ec>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d005      	beq.n	80085be <UART_SetConfig+0x39e>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4ad6      	ldr	r2, [pc, #856]	; (8008910 <UART_SetConfig+0x6f0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	f040 80d1 	bne.w	8008760 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80085be:	f7fc ff27 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 80085c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	469a      	mov	sl, r3
 80085c8:	f04f 0b00 	mov.w	fp, #0
 80085cc:	46d0      	mov	r8, sl
 80085ce:	46d9      	mov	r9, fp
 80085d0:	eb18 0308 	adds.w	r3, r8, r8
 80085d4:	eb49 0409 	adc.w	r4, r9, r9
 80085d8:	4698      	mov	r8, r3
 80085da:	46a1      	mov	r9, r4
 80085dc:	eb18 080a 	adds.w	r8, r8, sl
 80085e0:	eb49 090b 	adc.w	r9, r9, fp
 80085e4:	f04f 0100 	mov.w	r1, #0
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085f8:	4688      	mov	r8, r1
 80085fa:	4691      	mov	r9, r2
 80085fc:	eb1a 0508 	adds.w	r5, sl, r8
 8008600:	eb4b 0609 	adc.w	r6, fp, r9
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4619      	mov	r1, r3
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	f04f 0400 	mov.w	r4, #0
 8008616:	0094      	lsls	r4, r2, #2
 8008618:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800861c:	008b      	lsls	r3, r1, #2
 800861e:	461a      	mov	r2, r3
 8008620:	4623      	mov	r3, r4
 8008622:	4628      	mov	r0, r5
 8008624:	4631      	mov	r1, r6
 8008626:	f7f8 fb47 	bl	8000cb8 <__aeabi_uldivmod>
 800862a:	4603      	mov	r3, r0
 800862c:	460c      	mov	r4, r1
 800862e:	461a      	mov	r2, r3
 8008630:	4bb8      	ldr	r3, [pc, #736]	; (8008914 <UART_SetConfig+0x6f4>)
 8008632:	fba3 2302 	umull	r2, r3, r3, r2
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	469b      	mov	fp, r3
 8008640:	f04f 0c00 	mov.w	ip, #0
 8008644:	46d9      	mov	r9, fp
 8008646:	46e2      	mov	sl, ip
 8008648:	eb19 0309 	adds.w	r3, r9, r9
 800864c:	eb4a 040a 	adc.w	r4, sl, sl
 8008650:	4699      	mov	r9, r3
 8008652:	46a2      	mov	sl, r4
 8008654:	eb19 090b 	adds.w	r9, r9, fp
 8008658:	eb4a 0a0c 	adc.w	sl, sl, ip
 800865c:	f04f 0100 	mov.w	r1, #0
 8008660:	f04f 0200 	mov.w	r2, #0
 8008664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008668:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800866c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008670:	4689      	mov	r9, r1
 8008672:	4692      	mov	sl, r2
 8008674:	eb1b 0509 	adds.w	r5, fp, r9
 8008678:	eb4c 060a 	adc.w	r6, ip, sl
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	4619      	mov	r1, r3
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	f04f 0300 	mov.w	r3, #0
 800868a:	f04f 0400 	mov.w	r4, #0
 800868e:	0094      	lsls	r4, r2, #2
 8008690:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008694:	008b      	lsls	r3, r1, #2
 8008696:	461a      	mov	r2, r3
 8008698:	4623      	mov	r3, r4
 800869a:	4628      	mov	r0, r5
 800869c:	4631      	mov	r1, r6
 800869e:	f7f8 fb0b 	bl	8000cb8 <__aeabi_uldivmod>
 80086a2:	4603      	mov	r3, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	461a      	mov	r2, r3
 80086a8:	4b9a      	ldr	r3, [pc, #616]	; (8008914 <UART_SetConfig+0x6f4>)
 80086aa:	fba3 1302 	umull	r1, r3, r3, r2
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	2164      	movs	r1, #100	; 0x64
 80086b2:	fb01 f303 	mul.w	r3, r1, r3
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	3332      	adds	r3, #50	; 0x32
 80086bc:	4a95      	ldr	r2, [pc, #596]	; (8008914 <UART_SetConfig+0x6f4>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086c8:	4498      	add	r8, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	469b      	mov	fp, r3
 80086ce:	f04f 0c00 	mov.w	ip, #0
 80086d2:	46d9      	mov	r9, fp
 80086d4:	46e2      	mov	sl, ip
 80086d6:	eb19 0309 	adds.w	r3, r9, r9
 80086da:	eb4a 040a 	adc.w	r4, sl, sl
 80086de:	4699      	mov	r9, r3
 80086e0:	46a2      	mov	sl, r4
 80086e2:	eb19 090b 	adds.w	r9, r9, fp
 80086e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086ea:	f04f 0100 	mov.w	r1, #0
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086fe:	4689      	mov	r9, r1
 8008700:	4692      	mov	sl, r2
 8008702:	eb1b 0509 	adds.w	r5, fp, r9
 8008706:	eb4c 060a 	adc.w	r6, ip, sl
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	4619      	mov	r1, r3
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	f04f 0400 	mov.w	r4, #0
 800871c:	0094      	lsls	r4, r2, #2
 800871e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008722:	008b      	lsls	r3, r1, #2
 8008724:	461a      	mov	r2, r3
 8008726:	4623      	mov	r3, r4
 8008728:	4628      	mov	r0, r5
 800872a:	4631      	mov	r1, r6
 800872c:	f7f8 fac4 	bl	8000cb8 <__aeabi_uldivmod>
 8008730:	4603      	mov	r3, r0
 8008732:	460c      	mov	r4, r1
 8008734:	461a      	mov	r2, r3
 8008736:	4b77      	ldr	r3, [pc, #476]	; (8008914 <UART_SetConfig+0x6f4>)
 8008738:	fba3 1302 	umull	r1, r3, r3, r2
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	2164      	movs	r1, #100	; 0x64
 8008740:	fb01 f303 	mul.w	r3, r1, r3
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	3332      	adds	r3, #50	; 0x32
 800874a:	4a72      	ldr	r2, [pc, #456]	; (8008914 <UART_SetConfig+0x6f4>)
 800874c:	fba2 2303 	umull	r2, r3, r2, r3
 8008750:	095b      	lsrs	r3, r3, #5
 8008752:	f003 020f 	and.w	r2, r3, #15
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4442      	add	r2, r8
 800875c:	609a      	str	r2, [r3, #8]
 800875e:	e0d0      	b.n	8008902 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008760:	f7fc fe42 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 8008764:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	469a      	mov	sl, r3
 800876a:	f04f 0b00 	mov.w	fp, #0
 800876e:	46d0      	mov	r8, sl
 8008770:	46d9      	mov	r9, fp
 8008772:	eb18 0308 	adds.w	r3, r8, r8
 8008776:	eb49 0409 	adc.w	r4, r9, r9
 800877a:	4698      	mov	r8, r3
 800877c:	46a1      	mov	r9, r4
 800877e:	eb18 080a 	adds.w	r8, r8, sl
 8008782:	eb49 090b 	adc.w	r9, r9, fp
 8008786:	f04f 0100 	mov.w	r1, #0
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008792:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008796:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800879a:	4688      	mov	r8, r1
 800879c:	4691      	mov	r9, r2
 800879e:	eb1a 0508 	adds.w	r5, sl, r8
 80087a2:	eb4b 0609 	adc.w	r6, fp, r9
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	4619      	mov	r1, r3
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	f04f 0400 	mov.w	r4, #0
 80087b8:	0094      	lsls	r4, r2, #2
 80087ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087be:	008b      	lsls	r3, r1, #2
 80087c0:	461a      	mov	r2, r3
 80087c2:	4623      	mov	r3, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	4631      	mov	r1, r6
 80087c8:	f7f8 fa76 	bl	8000cb8 <__aeabi_uldivmod>
 80087cc:	4603      	mov	r3, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b50      	ldr	r3, [pc, #320]	; (8008914 <UART_SetConfig+0x6f4>)
 80087d4:	fba3 2302 	umull	r2, r3, r3, r2
 80087d8:	095b      	lsrs	r3, r3, #5
 80087da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	469b      	mov	fp, r3
 80087e2:	f04f 0c00 	mov.w	ip, #0
 80087e6:	46d9      	mov	r9, fp
 80087e8:	46e2      	mov	sl, ip
 80087ea:	eb19 0309 	adds.w	r3, r9, r9
 80087ee:	eb4a 040a 	adc.w	r4, sl, sl
 80087f2:	4699      	mov	r9, r3
 80087f4:	46a2      	mov	sl, r4
 80087f6:	eb19 090b 	adds.w	r9, r9, fp
 80087fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087fe:	f04f 0100 	mov.w	r1, #0
 8008802:	f04f 0200 	mov.w	r2, #0
 8008806:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800880a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800880e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008812:	4689      	mov	r9, r1
 8008814:	4692      	mov	sl, r2
 8008816:	eb1b 0509 	adds.w	r5, fp, r9
 800881a:	eb4c 060a 	adc.w	r6, ip, sl
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	4619      	mov	r1, r3
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	f04f 0400 	mov.w	r4, #0
 8008830:	0094      	lsls	r4, r2, #2
 8008832:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008836:	008b      	lsls	r3, r1, #2
 8008838:	461a      	mov	r2, r3
 800883a:	4623      	mov	r3, r4
 800883c:	4628      	mov	r0, r5
 800883e:	4631      	mov	r1, r6
 8008840:	f7f8 fa3a 	bl	8000cb8 <__aeabi_uldivmod>
 8008844:	4603      	mov	r3, r0
 8008846:	460c      	mov	r4, r1
 8008848:	461a      	mov	r2, r3
 800884a:	4b32      	ldr	r3, [pc, #200]	; (8008914 <UART_SetConfig+0x6f4>)
 800884c:	fba3 1302 	umull	r1, r3, r3, r2
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	2164      	movs	r1, #100	; 0x64
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	3332      	adds	r3, #50	; 0x32
 800885e:	4a2d      	ldr	r2, [pc, #180]	; (8008914 <UART_SetConfig+0x6f4>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800886a:	4498      	add	r8, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	469b      	mov	fp, r3
 8008870:	f04f 0c00 	mov.w	ip, #0
 8008874:	46d9      	mov	r9, fp
 8008876:	46e2      	mov	sl, ip
 8008878:	eb19 0309 	adds.w	r3, r9, r9
 800887c:	eb4a 040a 	adc.w	r4, sl, sl
 8008880:	4699      	mov	r9, r3
 8008882:	46a2      	mov	sl, r4
 8008884:	eb19 090b 	adds.w	r9, r9, fp
 8008888:	eb4a 0a0c 	adc.w	sl, sl, ip
 800888c:	f04f 0100 	mov.w	r1, #0
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008898:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800889c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088a0:	4689      	mov	r9, r1
 80088a2:	4692      	mov	sl, r2
 80088a4:	eb1b 0509 	adds.w	r5, fp, r9
 80088a8:	eb4c 060a 	adc.w	r6, ip, sl
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	f04f 0300 	mov.w	r3, #0
 80088ba:	f04f 0400 	mov.w	r4, #0
 80088be:	0094      	lsls	r4, r2, #2
 80088c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088c4:	008b      	lsls	r3, r1, #2
 80088c6:	461a      	mov	r2, r3
 80088c8:	4623      	mov	r3, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	4631      	mov	r1, r6
 80088ce:	f7f8 f9f3 	bl	8000cb8 <__aeabi_uldivmod>
 80088d2:	4603      	mov	r3, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	461a      	mov	r2, r3
 80088d8:	4b0e      	ldr	r3, [pc, #56]	; (8008914 <UART_SetConfig+0x6f4>)
 80088da:	fba3 1302 	umull	r1, r3, r3, r2
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	2164      	movs	r1, #100	; 0x64
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	3332      	adds	r3, #50	; 0x32
 80088ec:	4a09      	ldr	r2, [pc, #36]	; (8008914 <UART_SetConfig+0x6f4>)
 80088ee:	fba2 2303 	umull	r2, r3, r2, r3
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	f003 020f 	and.w	r2, r3, #15
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4442      	add	r2, r8
 80088fe:	609a      	str	r2, [r3, #8]
}
 8008900:	e7ff      	b.n	8008902 <UART_SetConfig+0x6e2>
 8008902:	bf00      	nop
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	40011000 	.word	0x40011000
 8008910:	40011400 	.word	0x40011400
 8008914:	51eb851f 	.word	0x51eb851f

08008918 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008918:	b084      	sub	sp, #16
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	f107 001c 	add.w	r0, r7, #28
 8008926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800892e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008930:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008932:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008936:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800893a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800893e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008942:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008952:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	b004      	add	sp, #16
 800896c:	4770      	bx	lr

0800896e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2203      	movs	r2, #3
 80089b6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80089b8:	2002      	movs	r0, #2
 80089ba:	f7fa fbf5 	bl	80031a8 <HAL_Delay>
  
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0303 	and.w	r3, r3, #3
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008a08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008a0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008a1e:	f023 030f 	bic.w	r3, r3, #15
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	b2db      	uxtb	r3, r3
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	461a      	mov	r2, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
}  
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a9e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008aa4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008aaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	431a      	orrs	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0

}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008ade:	2310      	movs	r3, #16
 8008ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff ff74 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b00:	2110      	movs	r1, #16
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa40 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3720      	adds	r7, #32
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b22:	2311      	movs	r3, #17
 8008b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b26:	2340      	movs	r3, #64	; 0x40
 8008b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b34:	f107 0308 	add.w	r3, r7, #8
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff ff52 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b44:	2111      	movs	r1, #17
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa1e 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3720      	adds	r7, #32
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b66:	2312      	movs	r3, #18
 8008b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b6a:	2340      	movs	r3, #64	; 0x40
 8008b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b78:	f107 0308 	add.w	r3, r7, #8
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7ff ff30 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b88:	2112      	movs	r1, #18
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9fc 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b92:	69fb      	ldr	r3, [r7, #28]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3720      	adds	r7, #32
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008baa:	2318      	movs	r3, #24
 8008bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bae:	2340      	movs	r3, #64	; 0x40
 8008bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bbc:	f107 0308 	add.w	r3, r7, #8
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff ff0e 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bcc:	2118      	movs	r1, #24
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f9da 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bd6:	69fb      	ldr	r3, [r7, #28]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008bee:	2319      	movs	r3, #25
 8008bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bf2:	2340      	movs	r3, #64	; 0x40
 8008bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c00:	f107 0308 	add.w	r3, r7, #8
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff feec 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c10:	2119      	movs	r1, #25
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f9b8 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c30:	230c      	movs	r3, #12
 8008c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fecb 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008c4e:	4a05      	ldr	r2, [pc, #20]	; (8008c64 <SDMMC_CmdStopTransfer+0x40>)
 8008c50:	210c      	movs	r1, #12
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f998 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3720      	adds	r7, #32
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	05f5e100 	.word	0x05f5e100

08008c68 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c78:	2307      	movs	r3, #7
 8008c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c88:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c8a:	f107 0310 	add.w	r3, r7, #16
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff fea7 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c9a:	2107      	movs	r1, #7
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f973 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008ca2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ccc:	f107 0308 	add.w	r3, r7, #8
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7ff fe86 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f92d 	bl	8008f38 <SDMMC_GetCmdError>
 8008cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3720      	adds	r7, #32
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b088      	sub	sp, #32
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008cf2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fe67 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fb16 	bl	8009348 <SDMMC_GetCmdResp7>
 8008d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d36:	2337      	movs	r3, #55	; 0x37
 8008d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fe48 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d58:	2137      	movs	r1, #55	; 0x37
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f914 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d62:	69fb      	ldr	r3, [r7, #28]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d82:	2329      	movs	r3, #41	; 0x29
 8008d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d86:	2340      	movs	r3, #64	; 0x40
 8008d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d94:	f107 0308 	add.w	r3, r7, #8
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff fe22 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fa23 	bl	80091ec <SDMMC_GetCmdResp3>
 8008da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da8:	69fb      	ldr	r3, [r7, #28]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b088      	sub	sp, #32
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008dc0:	2306      	movs	r3, #6
 8008dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fe03 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de2:	2106      	movs	r1, #6
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8cf 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e02:	2333      	movs	r3, #51	; 0x33
 8008e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e06:	2340      	movs	r3, #64	; 0x40
 8008e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff fde2 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e24:	2133      	movs	r1, #51	; 0x33
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8ae 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e44:	2302      	movs	r3, #2
 8008e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e48:	23c0      	movs	r3, #192	; 0xc0
 8008e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fdc1 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f97c 	bl	8009160 <SDMMC_GetCmdResp2>
 8008e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3720      	adds	r7, #32
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e82:	2309      	movs	r3, #9
 8008e84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e86:	23c0      	movs	r3, #192	; 0xc0
 8008e88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e94:	f107 0308 	add.w	r3, r7, #8
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff fda2 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f95d 	bl	8009160 <SDMMC_GetCmdResp2>
 8008ea6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b088      	sub	sp, #32
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff fd83 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	2103      	movs	r1, #3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f9bc 	bl	8009260 <SDMMC_GetCmdResp6>
 8008ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eea:	69fb      	ldr	r3, [r7, #28]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f02:	230d      	movs	r3, #13
 8008f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f06:	2340      	movs	r3, #64	; 0x40
 8008f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f14:	f107 0308 	add.w	r3, r7, #8
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fd62 	bl	80089e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f24:	210d      	movs	r1, #13
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f82e 	bl	8008f88 <SDMMC_GetCmdResp1>
 8008f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3720      	adds	r7, #32
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008f38:	b490      	push	{r4, r7}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f40:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <SDMMC_GetCmdError+0x48>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <SDMMC_GetCmdError+0x4c>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	0a5b      	lsrs	r3, r3, #9
 8008f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008f54:	4623      	mov	r3, r4
 8008f56:	1e5c      	subs	r4, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f60:	e009      	b.n	8008f76 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0f2      	beq.n	8008f54 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	22c5      	movs	r2, #197	; 0xc5
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc90      	pop	{r4, r7}
 8008f7e:	4770      	bx	lr
 8008f80:	20000000 	.word	0x20000000
 8008f84:	10624dd3 	.word	0x10624dd3

08008f88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f88:	b590      	push	{r4, r7, lr}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	460b      	mov	r3, r1
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008f96:	4b6f      	ldr	r3, [pc, #444]	; (8009154 <SDMMC_GetCmdResp1+0x1cc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a6f      	ldr	r2, [pc, #444]	; (8009158 <SDMMC_GetCmdResp1+0x1d0>)
 8008f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa0:	0a5b      	lsrs	r3, r3, #9
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008fa8:	4623      	mov	r3, r4
 8008faa:	1e5c      	subs	r4, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fb4:	e0c9      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0f0      	beq.n	8008fa8 <SDMMC_GetCmdResp1+0x20>
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1eb      	bne.n	8008fa8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2204      	movs	r2, #4
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	e0b1      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e0a6      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	22c5      	movs	r2, #197	; 0xc5
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff fd18 	bl	8008a38 <SDIO_GetCommandResponse>
 8009008:	4603      	mov	r3, r0
 800900a:	461a      	mov	r2, r3
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	4293      	cmp	r3, r2
 8009010:	d001      	beq.n	8009016 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009012:	2301      	movs	r3, #1
 8009014:	e099      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff fd1a 	bl	8008a52 <SDIO_GetResponse>
 800901e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4b4e      	ldr	r3, [pc, #312]	; (800915c <SDMMC_GetCmdResp1+0x1d4>)
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800902a:	2300      	movs	r3, #0
 800902c:	e08d      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	da02      	bge.n	800903a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009038:	e087      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	e080      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009052:	2380      	movs	r3, #128	; 0x80
 8009054:	e079      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009064:	e071      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009074:	e069      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009084:	e061      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009094:	e059      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a4:	e051      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090b4:	e049      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090c4:	e041      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80090d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090d4:	e039      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090e4:	e031      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090f4:	e029      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009100:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009104:	e021      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009114:	e019      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009120:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009124:	e011      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009134:	e009      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009140:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009144:	e001      	b.n	800914a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	bd90      	pop	{r4, r7, pc}
 8009152:	bf00      	nop
 8009154:	20000000 	.word	0x20000000
 8009158:	10624dd3 	.word	0x10624dd3
 800915c:	fdffe008 	.word	0xfdffe008

08009160 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009160:	b490      	push	{r4, r7}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009168:	4b1e      	ldr	r3, [pc, #120]	; (80091e4 <SDMMC_GetCmdResp2+0x84>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1e      	ldr	r2, [pc, #120]	; (80091e8 <SDMMC_GetCmdResp2+0x88>)
 800916e:	fba2 2303 	umull	r2, r3, r2, r3
 8009172:	0a5b      	lsrs	r3, r3, #9
 8009174:	f241 3288 	movw	r2, #5000	; 0x1388
 8009178:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800917c:	4623      	mov	r3, r4
 800917e:	1e5c      	subs	r4, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009188:	e026      	b.n	80091d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0f0      	beq.n	800917c <SDMMC_GetCmdResp2+0x1c>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1eb      	bne.n	800917c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2204      	movs	r2, #4
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091b6:	2304      	movs	r3, #4
 80091b8:	e00e      	b.n	80091d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e003      	b.n	80091d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	22c5      	movs	r2, #197	; 0xc5
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc90      	pop	{r4, r7}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000000 	.word	0x20000000
 80091e8:	10624dd3 	.word	0x10624dd3

080091ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80091ec:	b490      	push	{r4, r7}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091f4:	4b18      	ldr	r3, [pc, #96]	; (8009258 <SDMMC_GetCmdResp3+0x6c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <SDMMC_GetCmdResp3+0x70>)
 80091fa:	fba2 2303 	umull	r2, r3, r2, r3
 80091fe:	0a5b      	lsrs	r3, r3, #9
 8009200:	f241 3288 	movw	r2, #5000	; 0x1388
 8009204:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009208:	4623      	mov	r3, r4
 800920a:	1e5c      	subs	r4, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009214:	e01b      	b.n	800924e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0f0      	beq.n	8009208 <SDMMC_GetCmdResp3+0x1c>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1eb      	bne.n	8009208 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2204      	movs	r2, #4
 8009240:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009242:	2304      	movs	r3, #4
 8009244:	e003      	b.n	800924e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	22c5      	movs	r2, #197	; 0xc5
 800924a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bc90      	pop	{r4, r7}
 8009256:	4770      	bx	lr
 8009258:	20000000 	.word	0x20000000
 800925c:	10624dd3 	.word	0x10624dd3

08009260 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	460b      	mov	r3, r1
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800926e:	4b34      	ldr	r3, [pc, #208]	; (8009340 <SDMMC_GetCmdResp6+0xe0>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a34      	ldr	r2, [pc, #208]	; (8009344 <SDMMC_GetCmdResp6+0xe4>)
 8009274:	fba2 2303 	umull	r2, r3, r2, r3
 8009278:	0a5b      	lsrs	r3, r3, #9
 800927a:	f241 3288 	movw	r2, #5000	; 0x1388
 800927e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009282:	4623      	mov	r3, r4
 8009284:	1e5c      	subs	r4, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800928a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800928e:	e052      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009294:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0f0      	beq.n	8009282 <SDMMC_GetCmdResp6+0x22>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1eb      	bne.n	8009282 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	f003 0304 	and.w	r3, r3, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2204      	movs	r2, #4
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092bc:	2304      	movs	r3, #4
 80092be:	e03a      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e02f      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff fbae 	bl	8008a38 <SDIO_GetCommandResponse>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	7afb      	ldrb	r3, [r7, #11]
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d001      	beq.n	80092ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e025      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	22c5      	movs	r2, #197	; 0xc5
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80092f0:	2100      	movs	r1, #0
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f7ff fbad 	bl	8008a52 <SDIO_GetResponse>
 80092f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	0c1b      	lsrs	r3, r3, #16
 8009308:	b29a      	uxth	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800930e:	2300      	movs	r3, #0
 8009310:	e011      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800931c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009320:	e009      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800932c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009330:	e001      	b.n	8009336 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009336:	4618      	mov	r0, r3
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd90      	pop	{r4, r7, pc}
 800933e:	bf00      	nop
 8009340:	20000000 	.word	0x20000000
 8009344:	10624dd3 	.word	0x10624dd3

08009348 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009348:	b490      	push	{r4, r7}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009350:	4b21      	ldr	r3, [pc, #132]	; (80093d8 <SDMMC_GetCmdResp7+0x90>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a21      	ldr	r2, [pc, #132]	; (80093dc <SDMMC_GetCmdResp7+0x94>)
 8009356:	fba2 2303 	umull	r2, r3, r2, r3
 800935a:	0a5b      	lsrs	r3, r3, #9
 800935c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009360:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009364:	4623      	mov	r3, r4
 8009366:	1e5c      	subs	r4, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800936c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009370:	e02c      	b.n	80093cc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009376:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0f0      	beq.n	8009364 <SDMMC_GetCmdResp7+0x1c>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1eb      	bne.n	8009364 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d004      	beq.n	80093a2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2204      	movs	r2, #4
 800939c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800939e:	2304      	movs	r3, #4
 80093a0:	e014      	b.n	80093cc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e009      	b.n	80093cc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2240      	movs	r2, #64	; 0x40
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80093ca:	2300      	movs	r3, #0
  
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc90      	pop	{r4, r7}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	20000000 	.word	0x20000000
 80093dc:	10624dd3 	.word	0x10624dd3

080093e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80093e4:	4904      	ldr	r1, [pc, #16]	; (80093f8 <MX_FATFS_Init+0x18>)
 80093e6:	4805      	ldr	r0, [pc, #20]	; (80093fc <MX_FATFS_Init+0x1c>)
 80093e8:	f004 f874 	bl	800d4d4 <FATFS_LinkDriver>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	4b03      	ldr	r3, [pc, #12]	; (8009400 <MX_FATFS_Init+0x20>)
 80093f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093f4:	bf00      	nop
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20002cd0 	.word	0x20002cd0
 80093fc:	0801261c 	.word	0x0801261c
 8009400:	20002ccc 	.word	0x20002ccc

08009404 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009408:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800941e:	f000 f896 	bl	800954e <BSP_SD_IsDetected>
 8009422:	4603      	mov	r3, r0
 8009424:	2b01      	cmp	r3, #1
 8009426:	d001      	beq.n	800942c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e012      	b.n	8009452 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800942c:	480b      	ldr	r0, [pc, #44]	; (800945c <BSP_SD_Init+0x48>)
 800942e:	f7fc fc83 	bl	8005d38 <HAL_SD_Init>
 8009432:	4603      	mov	r3, r0
 8009434:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d109      	bne.n	8009450 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800943c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009440:	4806      	ldr	r0, [pc, #24]	; (800945c <BSP_SD_Init+0x48>)
 8009442:	f7fd fa2d 	bl	80068a0 <HAL_SD_ConfigWideBusOperation>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009450:	79fb      	ldrb	r3, [r7, #7]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20002b60 	.word	0x20002b60

08009460 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	68f9      	ldr	r1, [r7, #12]
 8009476:	4806      	ldr	r0, [pc, #24]	; (8009490 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009478:	f7fc fcee 	bl	8005e58 <HAL_SD_ReadBlocks_DMA>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	20002b60 	.word	0x20002b60

08009494 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	68f9      	ldr	r1, [r7, #12]
 80094aa:	4806      	ldr	r0, [pc, #24]	; (80094c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80094ac:	f7fc fdbc 	bl	8006028 <HAL_SD_WriteBlocks_DMA>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20002b60 	.word	0x20002b60

080094c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80094cc:	4805      	ldr	r0, [pc, #20]	; (80094e4 <BSP_SD_GetCardState+0x1c>)
 80094ce:	f7fd fa63 	bl	8006998 <HAL_SD_GetCardState>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	bf14      	ite	ne
 80094d8:	2301      	movne	r3, #1
 80094da:	2300      	moveq	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
}
 80094de:	4618      	mov	r0, r3
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20002b60 	.word	0x20002b60

080094e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	4803      	ldr	r0, [pc, #12]	; (8009500 <BSP_SD_GetCardInfo+0x18>)
 80094f4:	f7fd f9a8 	bl	8006848 <HAL_SD_GetCardInfo>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20002b60 	.word	0x20002b60

08009504 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800950c:	f000 f818 	bl	8009540 <BSP_SD_AbortCallback>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009520:	f000 f9a8 	bl	8009874 <BSP_SD_WriteCpltCallback>
}
 8009524:	bf00      	nop
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009534:	f000 f9aa 	bl	800988c <BSP_SD_ReadCpltCallback>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0

}
 8009544:	bf00      	nop
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009554:	2301      	movs	r3, #1
 8009556:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009558:	f000 f80c 	bl	8009574 <BSP_PlatformIsDetected>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009562:	2300      	movs	r3, #0
 8009564:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	b2db      	uxtb	r3, r3
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800957a:	2301      	movs	r3, #1
 800957c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800957e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009582:	4806      	ldr	r0, [pc, #24]	; (800959c <BSP_PlatformIsDetected+0x28>)
 8009584:	f7fb f88e 	bl	80046a4 <HAL_GPIO_ReadPin>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800958e:	2300      	movs	r3, #0
 8009590:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009592:	79fb      	ldrb	r3, [r7, #7]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40020000 	.word	0x40020000

080095a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80095a8:	f7f9 fdf2 	bl	8003190 <HAL_GetTick>
 80095ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80095ae:	e006      	b.n	80095be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095b0:	f7ff ff8a 	bl	80094c8 <BSP_SD_GetCardState>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e009      	b.n	80095d2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80095be:	f7f9 fde7 	bl	8003190 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d8f0      	bhi.n	80095b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <SD_CheckStatus+0x38>)
 80095e8:	2201      	movs	r2, #1
 80095ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80095ec:	f7ff ff6c 	bl	80094c8 <BSP_SD_GetCardState>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d107      	bne.n	8009606 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80095f6:	4b07      	ldr	r3, [pc, #28]	; (8009614 <SD_CheckStatus+0x38>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f023 0301 	bic.w	r3, r3, #1
 8009600:	b2da      	uxtb	r2, r3
 8009602:	4b04      	ldr	r3, [pc, #16]	; (8009614 <SD_CheckStatus+0x38>)
 8009604:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009606:	4b03      	ldr	r3, [pc, #12]	; (8009614 <SD_CheckStatus+0x38>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	b2db      	uxtb	r3, r3
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000009 	.word	0x20000009

08009618 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009622:	f7ff fef7 	bl	8009414 <BSP_SD_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d107      	bne.n	800963c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff ffd4 	bl	80095dc <SD_CheckStatus>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	4b04      	ldr	r3, [pc, #16]	; (800964c <SD_initialize+0x34>)
 800963a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800963c:	4b03      	ldr	r3, [pc, #12]	; (800964c <SD_initialize+0x34>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b2db      	uxtb	r3, r3
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000009 	.word	0x20000009

08009650 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff ffbd 	bl	80095dc <SD_CheckStatus>
 8009662:	4603      	mov	r3, r0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	607a      	str	r2, [r7, #4]
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009680:	f247 5030 	movw	r0, #30000	; 0x7530
 8009684:	f7ff ff8c 	bl	80095a0 <SD_CheckStatusWithTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	da01      	bge.n	8009692 <SD_read+0x26>
  {
    return res;
 800968e:	7dfb      	ldrb	r3, [r7, #23]
 8009690:	e03b      	b.n	800970a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	68b8      	ldr	r0, [r7, #8]
 8009698:	f7ff fee2 	bl	8009460 <BSP_SD_ReadBlocks_DMA>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d132      	bne.n	8009708 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80096a2:	4b1c      	ldr	r3, [pc, #112]	; (8009714 <SD_read+0xa8>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80096a8:	f7f9 fd72 	bl	8003190 <HAL_GetTick>
 80096ac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80096ae:	bf00      	nop
 80096b0:	4b18      	ldr	r3, [pc, #96]	; (8009714 <SD_read+0xa8>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d108      	bne.n	80096ca <SD_read+0x5e>
 80096b8:	f7f9 fd6a 	bl	8003190 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d9f2      	bls.n	80096b0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <SD_read+0xa8>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	75fb      	strb	r3, [r7, #23]
 80096d6:	e017      	b.n	8009708 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80096d8:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <SD_read+0xa8>)
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80096de:	f7f9 fd57 	bl	8003190 <HAL_GetTick>
 80096e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096e4:	e007      	b.n	80096f6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80096e6:	f7ff feef 	bl	80094c8 <BSP_SD_GetCardState>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <SD_read+0x8a>
          {
            res = RES_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80096f4:	e008      	b.n	8009708 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80096f6:	f7f9 fd4b 	bl	8003190 <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	f247 522f 	movw	r2, #29999	; 0x752f
 8009704:	4293      	cmp	r3, r2
 8009706:	d9ee      	bls.n	80096e6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000238 	.word	0x20000238

08009718 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	607a      	str	r2, [r7, #4]
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800972c:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <SD_write+0xa8>)
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009732:	f247 5030 	movw	r0, #30000	; 0x7530
 8009736:	f7ff ff33 	bl	80095a0 <SD_CheckStatusWithTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	da01      	bge.n	8009744 <SD_write+0x2c>
  {
    return res;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	e038      	b.n	80097b6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	68b8      	ldr	r0, [r7, #8]
 800974a:	f7ff fea3 	bl	8009494 <BSP_SD_WriteBlocks_DMA>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d12f      	bne.n	80097b4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009754:	f7f9 fd1c 	bl	8003190 <HAL_GetTick>
 8009758:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800975a:	bf00      	nop
 800975c:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <SD_write+0xa8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <SD_write+0x5e>
 8009764:	f7f9 fd14 	bl	8003190 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009772:	4293      	cmp	r3, r2
 8009774:	d9f2      	bls.n	800975c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8009776:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <SD_write+0xa8>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	75fb      	strb	r3, [r7, #23]
 8009782:	e017      	b.n	80097b4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009784:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <SD_write+0xa8>)
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800978a:	f7f9 fd01 	bl	8003190 <HAL_GetTick>
 800978e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009790:	e007      	b.n	80097a2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009792:	f7ff fe99 	bl	80094c8 <BSP_SD_GetCardState>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <SD_write+0x8a>
          {
            res = RES_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	75fb      	strb	r3, [r7, #23]
            break;
 80097a0:	e008      	b.n	80097b4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097a2:	f7f9 fcf5 	bl	8003190 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d9ee      	bls.n	8009792 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20000234 	.word	0x20000234

080097c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08c      	sub	sp, #48	; 0x30
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	603a      	str	r2, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
 80097d0:	460b      	mov	r3, r1
 80097d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097da:	4b25      	ldr	r3, [pc, #148]	; (8009870 <SD_ioctl+0xac>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <SD_ioctl+0x28>
 80097e8:	2303      	movs	r3, #3
 80097ea:	e03c      	b.n	8009866 <SD_ioctl+0xa2>

  switch (cmd)
 80097ec:	79bb      	ldrb	r3, [r7, #6]
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d834      	bhi.n	800985c <SD_ioctl+0x98>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <SD_ioctl+0x34>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009809 	.word	0x08009809
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009829 	.word	0x08009829
 8009804:	08009843 	.word	0x08009843
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800980e:	e028      	b.n	8009862 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009810:	f107 030c 	add.w	r3, r7, #12
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff fe67 	bl	80094e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800981a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009826:	e01c      	b.n	8009862 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009828:	f107 030c 	add.w	r3, r7, #12
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff fe5b 	bl	80094e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	b29a      	uxth	r2, r3
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009840:	e00f      	b.n	8009862 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009842:	f107 030c 	add.w	r3, r7, #12
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fe4e 	bl	80094e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	0a5a      	lsrs	r2, r3, #9
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800985a:	e002      	b.n	8009862 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800985c:	2304      	movs	r3, #4
 800985e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009866:	4618      	mov	r0, r3
 8009868:	3730      	adds	r7, #48	; 0x30
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000009 	.word	0x20000009

08009874 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009878:	4b03      	ldr	r3, [pc, #12]	; (8009888 <BSP_SD_WriteCpltCallback+0x14>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
}
 800987e:	bf00      	nop
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	20000234 	.word	0x20000234

0800988c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009890:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <BSP_SD_ReadCpltCallback+0x14>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	20000238 	.word	0x20000238

080098a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	4a08      	ldr	r2, [pc, #32]	; (80098d4 <disk_status+0x30>)
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	79fa      	ldrb	r2, [r7, #7]
 80098bc:	4905      	ldr	r1, [pc, #20]	; (80098d4 <disk_status+0x30>)
 80098be:	440a      	add	r2, r1
 80098c0:	7a12      	ldrb	r2, [r2, #8]
 80098c2:	4610      	mov	r0, r2
 80098c4:	4798      	blx	r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20000464 	.word	0x20000464

080098d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	4a0d      	ldr	r2, [pc, #52]	; (8009920 <disk_initialize+0x48>)
 80098ea:	5cd3      	ldrb	r3, [r2, r3]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d111      	bne.n	8009914 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <disk_initialize+0x48>)
 80098f4:	2101      	movs	r1, #1
 80098f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	4a09      	ldr	r2, [pc, #36]	; (8009920 <disk_initialize+0x48>)
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	79fa      	ldrb	r2, [r7, #7]
 8009906:	4906      	ldr	r1, [pc, #24]	; (8009920 <disk_initialize+0x48>)
 8009908:	440a      	add	r2, r1
 800990a:	7a12      	ldrb	r2, [r2, #8]
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009914:	7bfb      	ldrb	r3, [r7, #15]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000464 	.word	0x20000464

08009924 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009924:	b590      	push	{r4, r7, lr}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <disk_read+0x3c>)
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	689c      	ldr	r4, [r3, #8]
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	4a07      	ldr	r2, [pc, #28]	; (8009960 <disk_read+0x3c>)
 8009944:	4413      	add	r3, r2
 8009946:	7a18      	ldrb	r0, [r3, #8]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	47a0      	blx	r4
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]
  return res;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
}
 8009956:	4618      	mov	r0, r3
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	bd90      	pop	{r4, r7, pc}
 800995e:	bf00      	nop
 8009960:	20000464 	.word	0x20000464

08009964 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4a0a      	ldr	r2, [pc, #40]	; (80099a0 <disk_write+0x3c>)
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	68dc      	ldr	r4, [r3, #12]
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	4a07      	ldr	r2, [pc, #28]	; (80099a0 <disk_write+0x3c>)
 8009984:	4413      	add	r3, r2
 8009986:	7a18      	ldrb	r0, [r3, #8]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	47a0      	blx	r4
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
  return res;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000464 	.word	0x20000464

080099a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	603a      	str	r2, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	460b      	mov	r3, r1
 80099b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	4a09      	ldr	r2, [pc, #36]	; (80099dc <disk_ioctl+0x38>)
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	79fa      	ldrb	r2, [r7, #7]
 80099c2:	4906      	ldr	r1, [pc, #24]	; (80099dc <disk_ioctl+0x38>)
 80099c4:	440a      	add	r2, r1
 80099c6:	7a10      	ldrb	r0, [r2, #8]
 80099c8:	79b9      	ldrb	r1, [r7, #6]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000464 	.word	0x20000464

080099e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3301      	adds	r3, #1
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80099f0:	89fb      	ldrh	r3, [r7, #14]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	b21a      	sxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	b21b      	sxth	r3, r3
 80099fc:	4313      	orrs	r3, r2
 80099fe:	b21b      	sxth	r3, r3
 8009a00:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a02:	89fb      	ldrh	r3, [r7, #14]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3303      	adds	r3, #3
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	3202      	adds	r2, #2
 8009a28:	7812      	ldrb	r2, [r2, #0]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	021b      	lsls	r3, r3, #8
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	3201      	adds	r2, #1
 8009a36:	7812      	ldrb	r2, [r2, #0]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	021b      	lsls	r3, r3, #8
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	7812      	ldrb	r2, [r2, #0]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a48:	68fb      	ldr	r3, [r7, #12]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	887a      	ldrh	r2, [r7, #2]
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	887b      	ldrh	r3, [r7, #2]
 8009a70:	0a1b      	lsrs	r3, r3, #8
 8009a72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	607a      	str	r2, [r7, #4]
 8009a7a:	887a      	ldrh	r2, [r7, #2]
 8009a7c:	b2d2      	uxtb	r2, r2
 8009a7e:	701a      	strb	r2, [r3, #0]
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	0a1b      	lsrs	r3, r3, #8
 8009ab8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	b2d2      	uxtb	r2, r2
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	0a1b      	lsrs	r3, r3, #8
 8009aca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	1c53      	adds	r3, r2, #1
 8009b02:	613b      	str	r3, [r7, #16]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	1c59      	adds	r1, r3, #1
 8009b08:	6179      	str	r1, [r7, #20]
 8009b0a:	7812      	ldrb	r2, [r2, #0]
 8009b0c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	607b      	str	r3, [r7, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f1      	bne.n	8009afe <mem_cpy+0x1a>
	}
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b26:	b480      	push	{r7}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	617a      	str	r2, [r7, #20]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	607b      	str	r3, [r7, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1f3      	bne.n	8009b36 <mem_set+0x10>
}
 8009b4e:	bf00      	nop
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b5a:	b480      	push	{r7}
 8009b5c:	b089      	sub	sp, #36	; 0x24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	61fa      	str	r2, [r7, #28]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	61ba      	str	r2, [r7, #24]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	1acb      	subs	r3, r1, r3
 8009b86:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	607b      	str	r3, [r7, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <mem_cmp+0x40>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0eb      	beq.n	8009b72 <mem_cmp+0x18>

	return r;
 8009b9a:	697b      	ldr	r3, [r7, #20]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3724      	adds	r7, #36	; 0x24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bb2:	e002      	b.n	8009bba <chk_chr+0x12>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <chk_chr+0x26>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d1f2      	bne.n	8009bb4 <chk_chr+0xc>
	return *str;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
	...

08009be0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bea:	2300      	movs	r3, #0
 8009bec:	60bb      	str	r3, [r7, #8]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	e029      	b.n	8009c48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009bf4:	4a27      	ldr	r2, [pc, #156]	; (8009c94 <chk_lock+0xb4>)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	4413      	add	r3, r2
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d01d      	beq.n	8009c3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c02:	4a24      	ldr	r2, [pc, #144]	; (8009c94 <chk_lock+0xb4>)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4413      	add	r3, r2
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d116      	bne.n	8009c42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c14:	4a1f      	ldr	r2, [pc, #124]	; (8009c94 <chk_lock+0xb4>)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	011b      	lsls	r3, r3, #4
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d10c      	bne.n	8009c42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c28:	4a1a      	ldr	r2, [pc, #104]	; (8009c94 <chk_lock+0xb4>)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	4413      	add	r3, r2
 8009c30:	3308      	adds	r3, #8
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d102      	bne.n	8009c42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c3c:	e007      	b.n	8009c4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d9d2      	bls.n	8009bf4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d109      	bne.n	8009c68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <chk_lock+0x80>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d101      	bne.n	8009c64 <chk_lock+0x84>
 8009c60:	2300      	movs	r3, #0
 8009c62:	e010      	b.n	8009c86 <chk_lock+0xa6>
 8009c64:	2312      	movs	r3, #18
 8009c66:	e00e      	b.n	8009c86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d108      	bne.n	8009c80 <chk_lock+0xa0>
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <chk_lock+0xb4>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	4413      	add	r3, r2
 8009c76:	330c      	adds	r3, #12
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7e:	d101      	bne.n	8009c84 <chk_lock+0xa4>
 8009c80:	2310      	movs	r3, #16
 8009c82:	e000      	b.n	8009c86 <chk_lock+0xa6>
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000244 	.word	0x20000244

08009c98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	e002      	b.n	8009caa <enq_lock+0x12>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d806      	bhi.n	8009cbe <enq_lock+0x26>
 8009cb0:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <enq_lock+0x40>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	4413      	add	r3, r2
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f2      	bne.n	8009ca4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	bf14      	ite	ne
 8009cc4:	2301      	movne	r3, #1
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	20000244 	.word	0x20000244

08009cdc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e01f      	b.n	8009d2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009cec:	4a41      	ldr	r2, [pc, #260]	; (8009df4 <inc_lock+0x118>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	4413      	add	r3, r2
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d113      	bne.n	8009d26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009cfe:	4a3d      	ldr	r2, [pc, #244]	; (8009df4 <inc_lock+0x118>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	4413      	add	r3, r2
 8009d06:	3304      	adds	r3, #4
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d109      	bne.n	8009d26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d12:	4a38      	ldr	r2, [pc, #224]	; (8009df4 <inc_lock+0x118>)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	4413      	add	r3, r2
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d006      	beq.n	8009d34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d9dc      	bls.n	8009cec <inc_lock+0x10>
 8009d32:	e000      	b.n	8009d36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d132      	bne.n	8009da2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	e002      	b.n	8009d48 <inc_lock+0x6c>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3301      	adds	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d806      	bhi.n	8009d5c <inc_lock+0x80>
 8009d4e:	4a29      	ldr	r2, [pc, #164]	; (8009df4 <inc_lock+0x118>)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	011b      	lsls	r3, r3, #4
 8009d54:	4413      	add	r3, r2
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f2      	bne.n	8009d42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d101      	bne.n	8009d66 <inc_lock+0x8a>
 8009d62:	2300      	movs	r3, #0
 8009d64:	e040      	b.n	8009de8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4922      	ldr	r1, [pc, #136]	; (8009df4 <inc_lock+0x118>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	440b      	add	r3, r1
 8009d72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	491e      	ldr	r1, [pc, #120]	; (8009df4 <inc_lock+0x118>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	440b      	add	r3, r1
 8009d80:	3304      	adds	r3, #4
 8009d82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	491a      	ldr	r1, [pc, #104]	; (8009df4 <inc_lock+0x118>)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	440b      	add	r3, r1
 8009d90:	3308      	adds	r3, #8
 8009d92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d94:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <inc_lock+0x118>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	4413      	add	r3, r2
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	2200      	movs	r2, #0
 8009da0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d009      	beq.n	8009dbc <inc_lock+0xe0>
 8009da8:	4a12      	ldr	r2, [pc, #72]	; (8009df4 <inc_lock+0x118>)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	4413      	add	r3, r2
 8009db0:	330c      	adds	r3, #12
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <inc_lock+0xe0>
 8009db8:	2300      	movs	r3, #0
 8009dba:	e015      	b.n	8009de8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d108      	bne.n	8009dd4 <inc_lock+0xf8>
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <inc_lock+0x118>)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	4413      	add	r3, r2
 8009dca:	330c      	adds	r3, #12
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	e001      	b.n	8009dd8 <inc_lock+0xfc>
 8009dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dd8:	4906      	ldr	r1, [pc, #24]	; (8009df4 <inc_lock+0x118>)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	440b      	add	r3, r1
 8009de0:	330c      	adds	r3, #12
 8009de2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	20000244 	.word	0x20000244

08009df8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d825      	bhi.n	8009e58 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e0c:	4a17      	ldr	r2, [pc, #92]	; (8009e6c <dec_lock+0x74>)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	4413      	add	r3, r2
 8009e14:	330c      	adds	r3, #12
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e1a:	89fb      	ldrh	r3, [r7, #14]
 8009e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e20:	d101      	bne.n	8009e26 <dec_lock+0x2e>
 8009e22:	2300      	movs	r3, #0
 8009e24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e26:	89fb      	ldrh	r3, [r7, #14]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <dec_lock+0x3a>
 8009e2c:	89fb      	ldrh	r3, [r7, #14]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e32:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <dec_lock+0x74>)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	4413      	add	r3, r2
 8009e3a:	330c      	adds	r3, #12
 8009e3c:	89fa      	ldrh	r2, [r7, #14]
 8009e3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e40:	89fb      	ldrh	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <dec_lock+0x5a>
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <dec_lock+0x74>)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	737b      	strb	r3, [r7, #13]
 8009e56:	e001      	b.n	8009e5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e58:	2302      	movs	r3, #2
 8009e5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000244 	.word	0x20000244

08009e70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	e010      	b.n	8009ea0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e7e:	4a0d      	ldr	r2, [pc, #52]	; (8009eb4 <clear_lock+0x44>)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	4413      	add	r3, r2
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d105      	bne.n	8009e9a <clear_lock+0x2a>
 8009e8e:	4a09      	ldr	r2, [pc, #36]	; (8009eb4 <clear_lock+0x44>)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	4413      	add	r3, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d9eb      	bls.n	8009e7e <clear_lock+0xe>
	}
}
 8009ea6:	bf00      	nop
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20000244 	.word	0x20000244

08009eb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	78db      	ldrb	r3, [r3, #3]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d034      	beq.n	8009f36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7858      	ldrb	r0, [r3, #1]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009edc:	2301      	movs	r3, #1
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	f7ff fd40 	bl	8009964 <disk_write>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
 8009eee:	e022      	b.n	8009f36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d217      	bcs.n	8009f36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	789b      	ldrb	r3, [r3, #2]
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	e010      	b.n	8009f30 <sync_window+0x78>
					wsect += fs->fsize;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4413      	add	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7858      	ldrb	r0, [r3, #1]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f22:	2301      	movs	r3, #1
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	f7ff fd1d 	bl	8009964 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d8eb      	bhi.n	8009f0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d01b      	beq.n	8009f90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff ffad 	bl	8009eb8 <sync_window>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d113      	bne.n	8009f90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7858      	ldrb	r0, [r3, #1]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f72:	2301      	movs	r3, #1
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	f7ff fcd5 	bl	8009924 <disk_read>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f80:	f04f 33ff 	mov.w	r3, #4294967295
 8009f84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff ff87 	bl	8009eb8 <sync_window>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d159      	bne.n	800a068 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d149      	bne.n	800a050 <sync_fs+0xb4>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	791b      	ldrb	r3, [r3, #4]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d145      	bne.n	800a050 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	899b      	ldrh	r3, [r3, #12]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	f7ff fda8 	bl	8009b26 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	333c      	adds	r3, #60	; 0x3c
 8009fda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fde:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff fd37 	bl	8009a56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	333c      	adds	r3, #60	; 0x3c
 8009fec:	4921      	ldr	r1, [pc, #132]	; (800a074 <sync_fs+0xd8>)
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fd4c 	bl	8009a8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	333c      	adds	r3, #60	; 0x3c
 8009ff8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009ffc:	491e      	ldr	r1, [pc, #120]	; (800a078 <sync_fs+0xdc>)
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff fd44 	bl	8009a8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	333c      	adds	r3, #60	; 0x3c
 800a008:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	4619      	mov	r1, r3
 800a012:	4610      	mov	r0, r2
 800a014:	f7ff fd3a 	bl	8009a8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	333c      	adds	r3, #60	; 0x3c
 800a01c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	4619      	mov	r1, r3
 800a026:	4610      	mov	r0, r2
 800a028:	f7ff fd30 	bl	8009a8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	7858      	ldrb	r0, [r3, #1]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a044:	2301      	movs	r3, #1
 800a046:	f7ff fc8d 	bl	8009964 <disk_write>
			fs->fsi_flag = 0;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	2200      	movs	r2, #0
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fca3 	bl	80099a4 <disk_ioctl>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <sync_fs+0xcc>
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	41615252 	.word	0x41615252
 800a078:	61417272 	.word	0x61417272

0800a07c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	3b02      	subs	r3, #2
 800a08a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	3b02      	subs	r3, #2
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	429a      	cmp	r2, r3
 800a096:	d301      	bcc.n	800a09c <clust2sect+0x20>
 800a098:	2300      	movs	r3, #0
 800a09a:	e008      	b.n	800a0ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	895b      	ldrh	r3, [r3, #10]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	fb03 f202 	mul.w	r2, r3, r2
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ac:	4413      	add	r3, r2
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b086      	sub	sp, #24
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d904      	bls.n	800a0da <get_fat+0x20>
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d302      	bcc.n	800a0e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a0da:	2301      	movs	r3, #1
 800a0dc:	617b      	str	r3, [r7, #20]
 800a0de:	e0b7      	b.n	800a250 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d05a      	beq.n	800a1a4 <get_fat+0xea>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d07d      	beq.n	800a1ee <get_fat+0x134>
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	f040 80a2 	bne.w	800a23c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	085b      	lsrs	r3, r3, #1
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4413      	add	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	899b      	ldrh	r3, [r3, #12]
 800a10e:	4619      	mov	r1, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	fbb3 f3f1 	udiv	r3, r3, r1
 800a116:	4413      	add	r3, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	6938      	ldr	r0, [r7, #16]
 800a11c:	f7ff ff10 	bl	8009f40 <move_window>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	f040 808d 	bne.w	800a242 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	60fa      	str	r2, [r7, #12]
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	8992      	ldrh	r2, [r2, #12]
 800a132:	fbb3 f1f2 	udiv	r1, r3, r2
 800a136:	fb02 f201 	mul.w	r2, r2, r1
 800a13a:	1a9b      	subs	r3, r3, r2
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	4413      	add	r3, r2
 800a140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a144:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	899b      	ldrh	r3, [r3, #12]
 800a14e:	4619      	mov	r1, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	fbb3 f3f1 	udiv	r3, r3, r1
 800a156:	4413      	add	r3, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	6938      	ldr	r0, [r7, #16]
 800a15c:	f7ff fef0 	bl	8009f40 <move_window>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d16f      	bne.n	800a246 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	899b      	ldrh	r3, [r3, #12]
 800a16a:	461a      	mov	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a172:	fb02 f201 	mul.w	r2, r2, r1
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4413      	add	r3, r2
 800a17c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	461a      	mov	r2, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4313      	orrs	r3, r2
 800a188:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <get_fat+0xe0>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	091b      	lsrs	r3, r3, #4
 800a198:	e002      	b.n	800a1a0 <get_fat+0xe6>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1a0:	617b      	str	r3, [r7, #20]
			break;
 800a1a2:	e055      	b.n	800a250 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	899b      	ldrh	r3, [r3, #12]
 800a1ac:	085b      	lsrs	r3, r3, #1
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6938      	ldr	r0, [r7, #16]
 800a1be:	f7ff febf 	bl	8009f40 <move_window>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d140      	bne.n	800a24a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	8992      	ldrh	r2, [r2, #12]
 800a1d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1da:	fb02 f200 	mul.w	r2, r2, r0
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff fbfc 	bl	80099e0 <ld_word>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	617b      	str	r3, [r7, #20]
			break;
 800a1ec:	e030      	b.n	800a250 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	899b      	ldrh	r3, [r3, #12]
 800a1f6:	089b      	lsrs	r3, r3, #2
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800a202:	4413      	add	r3, r2
 800a204:	4619      	mov	r1, r3
 800a206:	6938      	ldr	r0, [r7, #16]
 800a208:	f7ff fe9a 	bl	8009f40 <move_window>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d11d      	bne.n	800a24e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	8992      	ldrh	r2, [r2, #12]
 800a220:	fbb3 f0f2 	udiv	r0, r3, r2
 800a224:	fb02 f200 	mul.w	r2, r2, r0
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	440b      	add	r3, r1
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff fbef 	bl	8009a10 <ld_dword>
 800a232:	4603      	mov	r3, r0
 800a234:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a238:	617b      	str	r3, [r7, #20]
			break;
 800a23a:	e009      	b.n	800a250 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a23c:	2301      	movs	r3, #1
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	e006      	b.n	800a250 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a242:	bf00      	nop
 800a244:	e004      	b.n	800a250 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a246:	bf00      	nop
 800a248:	e002      	b.n	800a250 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a24e:	bf00      	nop
		}
	}

	return val;
 800a250:	697b      	ldr	r3, [r7, #20]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a25a:	b590      	push	{r4, r7, lr}
 800a25c:	b089      	sub	sp, #36	; 0x24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a266:	2302      	movs	r3, #2
 800a268:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	f240 8106 	bls.w	800a47e <put_fat+0x224>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	429a      	cmp	r2, r3
 800a27a:	f080 8100 	bcs.w	800a47e <put_fat+0x224>
		switch (fs->fs_type) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b02      	cmp	r3, #2
 800a284:	f000 8088 	beq.w	800a398 <put_fat+0x13e>
 800a288:	2b03      	cmp	r3, #3
 800a28a:	f000 80b0 	beq.w	800a3ee <put_fat+0x194>
 800a28e:	2b01      	cmp	r3, #1
 800a290:	f040 80f5 	bne.w	800a47e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	4413      	add	r3, r2
 800a2a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	899b      	ldrh	r3, [r3, #12]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2b2:	4413      	add	r3, r2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fe42 	bl	8009f40 <move_window>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2c0:	7ffb      	ldrb	r3, [r7, #31]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f040 80d4 	bne.w	800a470 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	61ba      	str	r2, [r7, #24]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	8992      	ldrh	r2, [r2, #12]
 800a2d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2dc:	fb02 f200 	mul.w	r2, r2, r0
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00d      	beq.n	800a30c <put_fat+0xb2>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	b25b      	sxtb	r3, r3
 800a2f6:	f003 030f 	and.w	r3, r3, #15
 800a2fa:	b25a      	sxtb	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	b25b      	sxtb	r3, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	b25b      	sxtb	r3, r3
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	e001      	b.n	800a310 <put_fat+0xb6>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	899b      	ldrh	r3, [r3, #12]
 800a322:	4619      	mov	r1, r3
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	fbb3 f3f1 	udiv	r3, r3, r1
 800a32a:	4413      	add	r3, r2
 800a32c:	4619      	mov	r1, r3
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7ff fe06 	bl	8009f40 <move_window>
 800a334:	4603      	mov	r3, r0
 800a336:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a338:	7ffb      	ldrb	r3, [r7, #31]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 809a 	bne.w	800a474 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	899b      	ldrh	r3, [r3, #12]
 800a34a:	461a      	mov	r2, r3
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a352:	fb02 f200 	mul.w	r2, r2, r0
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	440b      	add	r3, r1
 800a35a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <put_fat+0x114>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	091b      	lsrs	r3, r3, #4
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	e00e      	b.n	800a38c <put_fat+0x132>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	b25b      	sxtb	r3, r3
 800a374:	f023 030f 	bic.w	r3, r3, #15
 800a378:	b25a      	sxtb	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	b25b      	sxtb	r3, r3
 800a380:	f003 030f 	and.w	r3, r3, #15
 800a384:	b25b      	sxtb	r3, r3
 800a386:	4313      	orrs	r3, r2
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	70da      	strb	r2, [r3, #3]
			break;
 800a396:	e072      	b.n	800a47e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	899b      	ldrh	r3, [r3, #12]
 800a3a0:	085b      	lsrs	r3, r3, #1
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff fdc5 	bl	8009f40 <move_window>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3ba:	7ffb      	ldrb	r3, [r7, #31]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d15b      	bne.n	800a478 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	8992      	ldrh	r2, [r2, #12]
 800a3ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3d2:	fb02 f200 	mul.w	r2, r2, r0
 800a3d6:	1a9b      	subs	r3, r3, r2
 800a3d8:	440b      	add	r3, r1
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	b292      	uxth	r2, r2
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff fb38 	bl	8009a56 <st_word>
			fs->wflag = 1;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	70da      	strb	r2, [r3, #3]
			break;
 800a3ec:	e047      	b.n	800a47e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	899b      	ldrh	r3, [r3, #12]
 800a3f6:	089b      	lsrs	r3, r3, #2
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800a402:	4413      	add	r3, r2
 800a404:	4619      	mov	r1, r3
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff fd9a 	bl	8009f40 <move_window>
 800a40c:	4603      	mov	r3, r0
 800a40e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a410:	7ffb      	ldrb	r3, [r7, #31]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d132      	bne.n	800a47c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	8992      	ldrh	r2, [r2, #12]
 800a42a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a42e:	fb02 f200 	mul.w	r2, r2, r0
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	440b      	add	r3, r1
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff faea 	bl	8009a10 <ld_dword>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a442:	4323      	orrs	r3, r4
 800a444:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	8992      	ldrh	r2, [r2, #12]
 800a454:	fbb3 f0f2 	udiv	r0, r3, r2
 800a458:	fb02 f200 	mul.w	r2, r2, r0
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	440b      	add	r3, r1
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff fb12 	bl	8009a8c <st_dword>
			fs->wflag = 1;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2201      	movs	r2, #1
 800a46c:	70da      	strb	r2, [r3, #3]
			break;
 800a46e:	e006      	b.n	800a47e <put_fat+0x224>
			if (res != FR_OK) break;
 800a470:	bf00      	nop
 800a472:	e004      	b.n	800a47e <put_fat+0x224>
			if (res != FR_OK) break;
 800a474:	bf00      	nop
 800a476:	e002      	b.n	800a47e <put_fat+0x224>
			if (res != FR_OK) break;
 800a478:	bf00      	nop
 800a47a:	e000      	b.n	800a47e <put_fat+0x224>
			if (res != FR_OK) break;
 800a47c:	bf00      	nop
		}
	}
	return res;
 800a47e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3724      	adds	r7, #36	; 0x24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d904      	bls.n	800a4ae <remove_chain+0x26>
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d301      	bcc.n	800a4b2 <remove_chain+0x2a>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	e04b      	b.n	800a54a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00c      	beq.n	800a4d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	6879      	ldr	r1, [r7, #4]
 800a4be:	69b8      	ldr	r0, [r7, #24]
 800a4c0:	f7ff fecb 	bl	800a25a <put_fat>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a4c8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <remove_chain+0x4a>
 800a4ce:	7ffb      	ldrb	r3, [r7, #31]
 800a4d0:	e03b      	b.n	800a54a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7ff fdf0 	bl	800a0ba <get_fat>
 800a4da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d031      	beq.n	800a546 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d101      	bne.n	800a4ec <remove_chain+0x64>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e02e      	b.n	800a54a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d101      	bne.n	800a4f8 <remove_chain+0x70>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e028      	b.n	800a54a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	69b8      	ldr	r0, [r7, #24]
 800a4fe:	f7ff feac 	bl	800a25a <put_fat>
 800a502:	4603      	mov	r3, r0
 800a504:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a506:	7ffb      	ldrb	r3, [r7, #31]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <remove_chain+0x88>
 800a50c:	7ffb      	ldrb	r3, [r7, #31]
 800a50e:	e01c      	b.n	800a54a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	699a      	ldr	r2, [r3, #24]
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	3b02      	subs	r3, #2
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d20b      	bcs.n	800a536 <remove_chain+0xae>
			fs->free_clst++;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	791b      	ldrb	r3, [r3, #4]
 800a52c:	f043 0301 	orr.w	r3, r3, #1
 800a530:	b2da      	uxtb	r2, r3
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	429a      	cmp	r2, r3
 800a542:	d3c6      	bcc.n	800a4d2 <remove_chain+0x4a>
 800a544:	e000      	b.n	800a548 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a546:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b088      	sub	sp, #32
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10d      	bne.n	800a584 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <create_chain+0x2c>
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d31b      	bcc.n	800a5b6 <create_chain+0x64>
 800a57e:	2301      	movs	r3, #1
 800a580:	61bb      	str	r3, [r7, #24]
 800a582:	e018      	b.n	800a5b6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fd97 	bl	800a0ba <get_fat>
 800a58c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d801      	bhi.n	800a598 <create_chain+0x46>
 800a594:	2301      	movs	r3, #1
 800a596:	e070      	b.n	800a67a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59e:	d101      	bne.n	800a5a4 <create_chain+0x52>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	e06a      	b.n	800a67a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d201      	bcs.n	800a5b2 <create_chain+0x60>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	e063      	b.n	800a67a <create_chain+0x128>
		scl = clst;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	69fa      	ldr	r2, [r7, #28]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d307      	bcc.n	800a5da <create_chain+0x88>
				ncl = 2;
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d901      	bls.n	800a5da <create_chain+0x88>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e04f      	b.n	800a67a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5da:	69f9      	ldr	r1, [r7, #28]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7ff fd6c 	bl	800a0ba <get_fat>
 800a5e2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00e      	beq.n	800a608 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d003      	beq.n	800a5f8 <create_chain+0xa6>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d101      	bne.n	800a5fc <create_chain+0xaa>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	e03e      	b.n	800a67a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	429a      	cmp	r2, r3
 800a602:	d1da      	bne.n	800a5ba <create_chain+0x68>
 800a604:	2300      	movs	r3, #0
 800a606:	e038      	b.n	800a67a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a608:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	69f9      	ldr	r1, [r7, #28]
 800a610:	6938      	ldr	r0, [r7, #16]
 800a612:	f7ff fe22 	bl	800a25a <put_fat>
 800a616:	4603      	mov	r3, r0
 800a618:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d109      	bne.n	800a634 <create_chain+0xe2>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d006      	beq.n	800a634 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a626:	69fa      	ldr	r2, [r7, #28]
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6938      	ldr	r0, [r7, #16]
 800a62c:	f7ff fe15 	bl	800a25a <put_fat>
 800a630:	4603      	mov	r3, r0
 800a632:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d116      	bne.n	800a668 <create_chain+0x116>
		fs->last_clst = ncl;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	69fa      	ldr	r2, [r7, #28]
 800a63e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	3b02      	subs	r3, #2
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d804      	bhi.n	800a658 <create_chain+0x106>
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	1e5a      	subs	r2, r3, #1
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	791b      	ldrb	r3, [r3, #4]
 800a65c:	f043 0301 	orr.w	r3, r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	711a      	strb	r2, [r3, #4]
 800a666:	e007      	b.n	800a678 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d102      	bne.n	800a674 <create_chain+0x122>
 800a66e:	f04f 33ff 	mov.w	r3, #4294967295
 800a672:	e000      	b.n	800a676 <create_chain+0x124>
 800a674:	2301      	movs	r3, #1
 800a676:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a678:	69fb      	ldr	r3, [r7, #28]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a682:	b480      	push	{r7}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	3304      	adds	r3, #4
 800a698:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	899b      	ldrh	r3, [r3, #12]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	8952      	ldrh	r2, [r2, #10]
 800a6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	1d1a      	adds	r2, r3, #4
 800a6b4:	613a      	str	r2, [r7, #16]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <clmt_clust+0x42>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e010      	b.n	800a6e6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d307      	bcc.n	800a6dc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6da:	e7e9      	b.n	800a6b0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a6dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	4413      	add	r3, r2
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	371c      	adds	r7, #28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b086      	sub	sp, #24
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a708:	d204      	bcs.n	800a714 <dir_sdi+0x22>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	f003 031f 	and.w	r3, r3, #31
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a714:	2302      	movs	r3, #2
 800a716:	e071      	b.n	800a7fc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <dir_sdi+0x46>
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d902      	bls.n	800a738 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a736:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10c      	bne.n	800a758 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	095b      	lsrs	r3, r3, #5
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	8912      	ldrh	r2, [r2, #8]
 800a746:	4293      	cmp	r3, r2
 800a748:	d301      	bcc.n	800a74e <dir_sdi+0x5c>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e056      	b.n	800a7fc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	61da      	str	r2, [r3, #28]
 800a756:	e02d      	b.n	800a7b4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	895b      	ldrh	r3, [r3, #10]
 800a75c:	461a      	mov	r2, r3
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	fb03 f302 	mul.w	r3, r3, r2
 800a766:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a768:	e019      	b.n	800a79e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6979      	ldr	r1, [r7, #20]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fca3 	bl	800a0ba <get_fat>
 800a774:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d101      	bne.n	800a782 <dir_sdi+0x90>
 800a77e:	2301      	movs	r3, #1
 800a780:	e03c      	b.n	800a7fc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d904      	bls.n	800a792 <dir_sdi+0xa0>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d301      	bcc.n	800a796 <dir_sdi+0xa4>
 800a792:	2302      	movs	r3, #2
 800a794:	e032      	b.n	800a7fc <dir_sdi+0x10a>
			ofs -= csz;
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d2e1      	bcs.n	800a76a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a7a6:	6979      	ldr	r1, [r7, #20]
 800a7a8:	6938      	ldr	r0, [r7, #16]
 800a7aa:	f7ff fc67 	bl	800a07c <clust2sect>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <dir_sdi+0xd4>
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e01a      	b.n	800a7fc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69da      	ldr	r2, [r3, #28]
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	899b      	ldrh	r3, [r3, #12]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7d6:	441a      	add	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7ee:	fb02 f200 	mul.w	r2, r2, r0
 800a7f2:	1a9b      	subs	r3, r3, r2
 800a7f4:	18ca      	adds	r2, r1, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	3320      	adds	r3, #32
 800a81a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	69db      	ldr	r3, [r3, #28]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <dir_next+0x28>
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a82a:	d301      	bcc.n	800a830 <dir_next+0x2c>
 800a82c:	2304      	movs	r3, #4
 800a82e:	e0bb      	b.n	800a9a8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	899b      	ldrh	r3, [r3, #12]
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	fbb3 f1f2 	udiv	r1, r3, r2
 800a83c:	fb02 f201 	mul.w	r2, r2, r1
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	2b00      	cmp	r3, #0
 800a844:	f040 809d 	bne.w	800a982 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	095b      	lsrs	r3, r3, #5
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	8912      	ldrh	r2, [r2, #8]
 800a862:	4293      	cmp	r3, r2
 800a864:	f0c0 808d 	bcc.w	800a982 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	61da      	str	r2, [r3, #28]
 800a86e:	2304      	movs	r3, #4
 800a870:	e09a      	b.n	800a9a8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	899b      	ldrh	r3, [r3, #12]
 800a876:	461a      	mov	r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	8952      	ldrh	r2, [r2, #10]
 800a882:	3a01      	subs	r2, #1
 800a884:	4013      	ands	r3, r2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d17b      	bne.n	800a982 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	f7ff fc11 	bl	800a0ba <get_fat>
 800a898:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d801      	bhi.n	800a8a4 <dir_next+0xa0>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e081      	b.n	800a9a8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d101      	bne.n	800a8b0 <dir_next+0xac>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e07b      	b.n	800a9a8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d359      	bcc.n	800a96e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	61da      	str	r2, [r3, #28]
 800a8c6:	2304      	movs	r3, #4
 800a8c8:	e06e      	b.n	800a9a8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	699b      	ldr	r3, [r3, #24]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	f7ff fe3d 	bl	800a552 <create_chain>
 800a8d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <dir_next+0xe0>
 800a8e0:	2307      	movs	r3, #7
 800a8e2:	e061      	b.n	800a9a8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <dir_next+0xea>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e05c      	b.n	800a9a8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f4:	d101      	bne.n	800a8fa <dir_next+0xf6>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e056      	b.n	800a9a8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff fadc 	bl	8009eb8 <sync_window>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <dir_next+0x106>
 800a906:	2301      	movs	r3, #1
 800a908:	e04e      	b.n	800a9a8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	899b      	ldrh	r3, [r3, #12]
 800a914:	461a      	mov	r2, r3
 800a916:	2100      	movs	r1, #0
 800a918:	f7ff f905 	bl	8009b26 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a91c:	2300      	movs	r3, #0
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	6979      	ldr	r1, [r7, #20]
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7ff fbaa 	bl	800a07c <clust2sect>
 800a928:	4602      	mov	r2, r0
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
 800a92e:	e012      	b.n	800a956 <dir_next+0x152>
						fs->wflag = 1;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f7ff fabe 	bl	8009eb8 <sync_window>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <dir_next+0x142>
 800a942:	2301      	movs	r3, #1
 800a944:	e030      	b.n	800a9a8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	3301      	adds	r3, #1
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	639a      	str	r2, [r3, #56]	; 0x38
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	895b      	ldrh	r3, [r3, #10]
 800a95a:	461a      	mov	r2, r3
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	4293      	cmp	r3, r2
 800a960:	d3e6      	bcc.n	800a930 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	1ad2      	subs	r2, r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a974:	6979      	ldr	r1, [r7, #20]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f7ff fb80 	bl	800a07c <clust2sect>
 800a97c:	4602      	mov	r2, r0
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	899b      	ldrh	r3, [r3, #12]
 800a992:	461a      	mov	r2, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	fbb3 f0f2 	udiv	r0, r3, r2
 800a99a:	fb02 f200 	mul.w	r2, r2, r0
 800a99e:	1a9b      	subs	r3, r3, r2
 800a9a0:	18ca      	adds	r2, r1, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff fe95 	bl	800a6f2 <dir_sdi>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d12b      	bne.n	800aa2a <dir_alloc+0x7a>
		n = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	69db      	ldr	r3, [r3, #28]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f7ff faaf 	bl	8009f40 <move_window>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d11d      	bne.n	800aa28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2be5      	cmp	r3, #229	; 0xe5
 800a9f4:	d004      	beq.n	800aa00 <dir_alloc+0x50>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d107      	bne.n	800aa10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3301      	adds	r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d102      	bne.n	800aa14 <dir_alloc+0x64>
 800aa0e:	e00c      	b.n	800aa2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa10:	2300      	movs	r3, #0
 800aa12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa14:	2101      	movs	r1, #1
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff fef4 	bl	800a804 <dir_next>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa20:	7dfb      	ldrb	r3, [r7, #23]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0d7      	beq.n	800a9d6 <dir_alloc+0x26>
 800aa26:	e000      	b.n	800aa2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d101      	bne.n	800aa34 <dir_alloc+0x84>
 800aa30:	2307      	movs	r3, #7
 800aa32:	75fb      	strb	r3, [r7, #23]
	return res;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	331a      	adds	r3, #26
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe ffc7 	bl	80099e0 <ld_word>
 800aa52:	4603      	mov	r3, r0
 800aa54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d109      	bne.n	800aa72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	3314      	adds	r3, #20
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe ffbc 	bl	80099e0 <ld_word>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	041b      	lsls	r3, r3, #16
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa72:	68fb      	ldr	r3, [r7, #12]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	331a      	adds	r3, #26
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	b292      	uxth	r2, r2
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe ffdf 	bl	8009a56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d109      	bne.n	800aab4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f103 0214 	add.w	r2, r3, #20
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fe ffd1 	bl	8009a56 <st_word>
	}
}
 800aab4:	bf00      	nop
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	331a      	adds	r3, #26
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe ff88 	bl	80099e0 <ld_word>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <cmp_lfn+0x1e>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e059      	b.n	800ab8e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	4613      	mov	r3, r2
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	81fb      	strh	r3, [r7, #14]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	e033      	b.n	800ab62 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800aafa:	4a27      	ldr	r2, [pc, #156]	; (800ab98 <cmp_lfn+0xdc>)
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	4413      	add	r3, r2
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	4413      	add	r3, r2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe ff69 	bl	80099e0 <ld_word>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ab12:	89fb      	ldrh	r3, [r7, #14]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01a      	beq.n	800ab4e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2bfe      	cmp	r3, #254	; 0xfe
 800ab1c:	d812      	bhi.n	800ab44 <cmp_lfn+0x88>
 800ab1e:	89bb      	ldrh	r3, [r7, #12]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f002 fd23 	bl	800d56c <ff_wtoupper>
 800ab26:	4603      	mov	r3, r0
 800ab28:	461c      	mov	r4, r3
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	617a      	str	r2, [r7, #20]
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f002 fd17 	bl	800d56c <ff_wtoupper>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	429c      	cmp	r4, r3
 800ab42:	d001      	beq.n	800ab48 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ab44:	2300      	movs	r3, #0
 800ab46:	e022      	b.n	800ab8e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ab48:	89bb      	ldrh	r3, [r7, #12]
 800ab4a:	81fb      	strh	r3, [r7, #14]
 800ab4c:	e006      	b.n	800ab5c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ab4e:	89bb      	ldrh	r3, [r7, #12]
 800ab50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d001      	beq.n	800ab5c <cmp_lfn+0xa0>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e018      	b.n	800ab8e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	613b      	str	r3, [r7, #16]
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b0c      	cmp	r3, #12
 800ab66:	d9c8      	bls.n	800aafa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <cmp_lfn+0xd0>
 800ab74:	89fb      	ldrh	r3, [r7, #14]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d008      	beq.n	800ab8c <cmp_lfn+0xd0>
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	4413      	add	r3, r2
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <cmp_lfn+0xd0>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e000      	b.n	800ab8e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ab8c:	2301      	movs	r3, #1
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd90      	pop	{r4, r7, pc}
 800ab96:	bf00      	nop
 800ab98:	080126b0 	.word	0x080126b0

0800ab9c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b086      	sub	sp, #24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	331a      	adds	r3, #26
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe ff18 	bl	80099e0 <ld_word>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <pick_lfn+0x1e>
 800abb6:	2300      	movs	r3, #0
 800abb8:	e04d      	b.n	800ac56 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abc2:	1e5a      	subs	r2, r3, #1
 800abc4:	4613      	mov	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abd0:	2301      	movs	r3, #1
 800abd2:	81fb      	strh	r3, [r7, #14]
 800abd4:	2300      	movs	r3, #0
 800abd6:	613b      	str	r3, [r7, #16]
 800abd8:	e028      	b.n	800ac2c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800abda:	4a21      	ldr	r2, [pc, #132]	; (800ac60 <pick_lfn+0xc4>)
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	4413      	add	r3, r2
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	4413      	add	r3, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe fef9 	bl	80099e0 <ld_word>
 800abee:	4603      	mov	r3, r0
 800abf0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800abf2:	89fb      	ldrh	r3, [r7, #14]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00f      	beq.n	800ac18 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2bfe      	cmp	r3, #254	; 0xfe
 800abfc:	d901      	bls.n	800ac02 <pick_lfn+0x66>
 800abfe:	2300      	movs	r3, #0
 800ac00:	e029      	b.n	800ac56 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ac02:	89bb      	ldrh	r3, [r7, #12]
 800ac04:	81fb      	strh	r3, [r7, #14]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	617a      	str	r2, [r7, #20]
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	4413      	add	r3, r2
 800ac12:	89fa      	ldrh	r2, [r7, #14]
 800ac14:	801a      	strh	r2, [r3, #0]
 800ac16:	e006      	b.n	800ac26 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ac18:	89bb      	ldrh	r3, [r7, #12]
 800ac1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d001      	beq.n	800ac26 <pick_lfn+0x8a>
 800ac22:	2300      	movs	r3, #0
 800ac24:	e017      	b.n	800ac56 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	613b      	str	r3, [r7, #16]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b0c      	cmp	r3, #12
 800ac30:	d9d3      	bls.n	800abda <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2bfe      	cmp	r3, #254	; 0xfe
 800ac42:	d901      	bls.n	800ac48 <pick_lfn+0xac>
 800ac44:	2300      	movs	r3, #0
 800ac46:	e006      	b.n	800ac56 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	4413      	add	r3, r2
 800ac50:	2200      	movs	r2, #0
 800ac52:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ac54:	2301      	movs	r3, #1
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	080126b0 	.word	0x080126b0

0800ac64 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	461a      	mov	r2, r3
 800ac72:	460b      	mov	r3, r1
 800ac74:	71fb      	strb	r3, [r7, #7]
 800ac76:	4613      	mov	r3, r2
 800ac78:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	330d      	adds	r3, #13
 800ac7e:	79ba      	ldrb	r2, [r7, #6]
 800ac80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	330b      	adds	r3, #11
 800ac86:	220f      	movs	r2, #15
 800ac88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	330c      	adds	r3, #12
 800ac8e:	2200      	movs	r2, #0
 800ac90:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	331a      	adds	r3, #26
 800ac96:	2100      	movs	r1, #0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fedc 	bl	8009a56 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	1e5a      	subs	r2, r3, #1
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	82fb      	strh	r3, [r7, #22]
 800acb2:	2300      	movs	r3, #0
 800acb4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800acb6:	8afb      	ldrh	r3, [r7, #22]
 800acb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d007      	beq.n	800acd0 <put_lfn+0x6c>
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	61fa      	str	r2, [r7, #28]
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800acd0:	4a17      	ldr	r2, [pc, #92]	; (800ad30 <put_lfn+0xcc>)
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	4413      	add	r3, r2
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	461a      	mov	r2, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	4413      	add	r3, r2
 800acde:	8afa      	ldrh	r2, [r7, #22]
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe feb7 	bl	8009a56 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ace8:	8afb      	ldrh	r3, [r7, #22]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <put_lfn+0x90>
 800acee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	3301      	adds	r3, #1
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b0c      	cmp	r3, #12
 800acfe:	d9da      	bls.n	800acb6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ad00:	8afb      	ldrh	r3, [r7, #22]
 800ad02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d006      	beq.n	800ad18 <put_lfn+0xb4>
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4413      	add	r3, r2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <put_lfn+0xbc>
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	79fa      	ldrb	r2, [r7, #7]
 800ad24:	701a      	strb	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	080126b0 	.word	0x080126b0

0800ad34 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08c      	sub	sp, #48	; 0x30
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ad42:	220b      	movs	r2, #11
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7fe fecc 	bl	8009ae4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	d92b      	bls.n	800adaa <gen_numname+0x76>
		sr = seq;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad56:	e022      	b.n	800ad9e <gen_numname+0x6a>
			wc = *lfn++;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	1c9a      	adds	r2, r3, #2
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ad62:	2300      	movs	r3, #0
 800ad64:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad66:	e017      	b.n	800ad98 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	005a      	lsls	r2, r3, #1
 800ad6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad78:	085b      	lsrs	r3, r3, #1
 800ad7a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d005      	beq.n	800ad92 <gen_numname+0x5e>
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ad8c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ad90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	3301      	adds	r3, #1
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d9e4      	bls.n	800ad68 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1d8      	bne.n	800ad58 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800adaa:	2307      	movs	r3, #7
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	3330      	adds	r3, #48	; 0x30
 800adba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800adbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adc2:	2b39      	cmp	r3, #57	; 0x39
 800adc4:	d904      	bls.n	800add0 <gen_numname+0x9c>
 800adc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adca:	3307      	adds	r3, #7
 800adcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	1e5a      	subs	r2, r3, #1
 800add4:	62ba      	str	r2, [r7, #40]	; 0x28
 800add6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800adda:	4413      	add	r3, r2
 800addc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ade0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	091b      	lsrs	r3, r3, #4
 800ade8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1de      	bne.n	800adae <gen_numname+0x7a>
	ns[i] = '~';
 800adf0:	f107 0214 	add.w	r2, r7, #20
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	4413      	add	r3, r2
 800adf8:	227e      	movs	r2, #126	; 0x7e
 800adfa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800adfc:	2300      	movs	r3, #0
 800adfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ae00:	e002      	b.n	800ae08 <gen_numname+0xd4>
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	3301      	adds	r3, #1
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
 800ae08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d205      	bcs.n	800ae1c <gen_numname+0xe8>
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	4413      	add	r3, r2
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b20      	cmp	r3, #32
 800ae1a:	d1f2      	bne.n	800ae02 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	2b07      	cmp	r3, #7
 800ae20:	d808      	bhi.n	800ae34 <gen_numname+0x100>
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ae32:	e000      	b.n	800ae36 <gen_numname+0x102>
 800ae34:	2120      	movs	r1, #32
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	627a      	str	r2, [r7, #36]	; 0x24
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	460a      	mov	r2, r1
 800ae42:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2b07      	cmp	r3, #7
 800ae48:	d9e8      	bls.n	800ae1c <gen_numname+0xe8>
}
 800ae4a:	bf00      	nop
 800ae4c:	3730      	adds	r7, #48	; 0x30
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b085      	sub	sp, #20
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae5e:	230b      	movs	r3, #11
 800ae60:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	0852      	lsrs	r2, r2, #1
 800ae68:	01db      	lsls	r3, r3, #7
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	1c59      	adds	r1, r3, #1
 800ae72:	6079      	str	r1, [r7, #4]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	4413      	add	r3, r2
 800ae78:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	60bb      	str	r3, [r7, #8]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1ed      	bne.n	800ae62 <sum_sfn+0x10>
	return sum;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ae9e:	2304      	movs	r3, #4
 800aea0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800aea8:	23ff      	movs	r3, #255	; 0xff
 800aeaa:	757b      	strb	r3, [r7, #21]
 800aeac:	23ff      	movs	r3, #255	; 0xff
 800aeae:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800aeb0:	e081      	b.n	800afb6 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6938      	ldr	r0, [r7, #16]
 800aeba:	f7ff f841 	bl	8009f40 <move_window>
 800aebe:	4603      	mov	r3, r0
 800aec0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d17c      	bne.n	800afc2 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800aed0:	7dbb      	ldrb	r3, [r7, #22]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d102      	bne.n	800aedc <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aed6:	2304      	movs	r3, #4
 800aed8:	75fb      	strb	r3, [r7, #23]
 800aeda:	e077      	b.n	800afcc <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	330b      	adds	r3, #11
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aee8:	73fb      	strb	r3, [r7, #15]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7bfa      	ldrb	r2, [r7, #15]
 800aeee:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800aef0:	7dbb      	ldrb	r3, [r7, #22]
 800aef2:	2be5      	cmp	r3, #229	; 0xe5
 800aef4:	d00e      	beq.n	800af14 <dir_read+0x80>
 800aef6:	7dbb      	ldrb	r3, [r7, #22]
 800aef8:	2b2e      	cmp	r3, #46	; 0x2e
 800aefa:	d00b      	beq.n	800af14 <dir_read+0x80>
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	f023 0320 	bic.w	r3, r3, #32
 800af02:	2b08      	cmp	r3, #8
 800af04:	bf0c      	ite	eq
 800af06:	2301      	moveq	r3, #1
 800af08:	2300      	movne	r3, #0
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	4293      	cmp	r3, r2
 800af12:	d002      	beq.n	800af1a <dir_read+0x86>
				ord = 0xFF;
 800af14:	23ff      	movs	r3, #255	; 0xff
 800af16:	757b      	strb	r3, [r7, #21]
 800af18:	e044      	b.n	800afa4 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b0f      	cmp	r3, #15
 800af1e:	d12f      	bne.n	800af80 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800af20:	7dbb      	ldrb	r3, [r7, #22]
 800af22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	7b5b      	ldrb	r3, [r3, #13]
 800af30:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800af32:	7dbb      	ldrb	r3, [r7, #22]
 800af34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af38:	75bb      	strb	r3, [r7, #22]
 800af3a:	7dbb      	ldrb	r3, [r7, #22]
 800af3c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	695a      	ldr	r2, [r3, #20]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af46:	7dba      	ldrb	r2, [r7, #22]
 800af48:	7d7b      	ldrb	r3, [r7, #21]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d115      	bne.n	800af7a <dir_read+0xe6>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	330d      	adds	r3, #13
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	7d3a      	ldrb	r2, [r7, #20]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d10e      	bne.n	800af7a <dir_read+0xe6>
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	691a      	ldr	r2, [r3, #16]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	4619      	mov	r1, r3
 800af66:	4610      	mov	r0, r2
 800af68:	f7ff fe18 	bl	800ab9c <pick_lfn>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <dir_read+0xe6>
 800af72:	7d7b      	ldrb	r3, [r7, #21]
 800af74:	3b01      	subs	r3, #1
 800af76:	b2db      	uxtb	r3, r3
 800af78:	e000      	b.n	800af7c <dir_read+0xe8>
 800af7a:	23ff      	movs	r3, #255	; 0xff
 800af7c:	757b      	strb	r3, [r7, #21]
 800af7e:	e011      	b.n	800afa4 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800af80:	7d7b      	ldrb	r3, [r7, #21]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d109      	bne.n	800af9a <dir_read+0x106>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff ff61 	bl	800ae52 <sum_sfn>
 800af90:	4603      	mov	r3, r0
 800af92:	461a      	mov	r2, r3
 800af94:	7d3b      	ldrb	r3, [r7, #20]
 800af96:	4293      	cmp	r3, r2
 800af98:	d015      	beq.n	800afc6 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800afa2:	e010      	b.n	800afc6 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800afa4:	2100      	movs	r1, #0
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fc2c 	bl	800a804 <dir_next>
 800afac:	4603      	mov	r3, r0
 800afae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <dir_read+0x136>
	while (dp->sect) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f47f af79 	bne.w	800aeb2 <dir_read+0x1e>
 800afc0:	e004      	b.n	800afcc <dir_read+0x138>
		if (res != FR_OK) break;
 800afc2:	bf00      	nop
 800afc4:	e002      	b.n	800afcc <dir_read+0x138>
					break;
 800afc6:	bf00      	nop
 800afc8:	e000      	b.n	800afcc <dir_read+0x138>
		if (res != FR_OK) break;
 800afca:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <dir_read+0x144>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	61da      	str	r2, [r3, #28]
	return res;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aff0:	2100      	movs	r1, #0
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fb7d 	bl	800a6f2 <dir_sdi>
 800aff8:	4603      	mov	r3, r0
 800affa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <dir_find+0x24>
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	e0a9      	b.n	800b15a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b006:	23ff      	movs	r3, #255	; 0xff
 800b008:	753b      	strb	r3, [r7, #20]
 800b00a:	7d3b      	ldrb	r3, [r7, #20]
 800b00c:	757b      	strb	r3, [r7, #21]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f04f 32ff 	mov.w	r2, #4294967295
 800b014:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6938      	ldr	r0, [r7, #16]
 800b01e:	f7fe ff8f 	bl	8009f40 <move_window>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8090 	bne.w	800b14e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b036:	7dbb      	ldrb	r3, [r7, #22]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <dir_find+0x60>
 800b03c:	2304      	movs	r3, #4
 800b03e:	75fb      	strb	r3, [r7, #23]
 800b040:	e08a      	b.n	800b158 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	330b      	adds	r3, #11
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04e:	73fb      	strb	r3, [r7, #15]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7bfa      	ldrb	r2, [r7, #15]
 800b054:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b056:	7dbb      	ldrb	r3, [r7, #22]
 800b058:	2be5      	cmp	r3, #229	; 0xe5
 800b05a:	d007      	beq.n	800b06c <dir_find+0x8a>
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d009      	beq.n	800b07a <dir_find+0x98>
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	2b0f      	cmp	r3, #15
 800b06a:	d006      	beq.n	800b07a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b06c:	23ff      	movs	r3, #255	; 0xff
 800b06e:	757b      	strb	r3, [r7, #21]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f04f 32ff 	mov.w	r2, #4294967295
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
 800b078:	e05e      	b.n	800b138 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	2b0f      	cmp	r3, #15
 800b07e:	d136      	bne.n	800b0ee <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d154      	bne.n	800b138 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b08e:	7dbb      	ldrb	r3, [r7, #22]
 800b090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00d      	beq.n	800b0b4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a1b      	ldr	r3, [r3, #32]
 800b09c:	7b5b      	ldrb	r3, [r3, #13]
 800b09e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b0a0:	7dbb      	ldrb	r3, [r7, #22]
 800b0a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a6:	75bb      	strb	r3, [r7, #22]
 800b0a8:	7dbb      	ldrb	r3, [r7, #22]
 800b0aa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	695a      	ldr	r2, [r3, #20]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b0b4:	7dba      	ldrb	r2, [r7, #22]
 800b0b6:	7d7b      	ldrb	r3, [r7, #21]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d115      	bne.n	800b0e8 <dir_find+0x106>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	330d      	adds	r3, #13
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	7d3a      	ldrb	r2, [r7, #20]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d10e      	bne.n	800b0e8 <dir_find+0x106>
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	691a      	ldr	r2, [r3, #16]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f7ff fcf1 	bl	800aabc <cmp_lfn>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <dir_find+0x106>
 800b0e0:	7d7b      	ldrb	r3, [r7, #21]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	e000      	b.n	800b0ea <dir_find+0x108>
 800b0e8:	23ff      	movs	r3, #255	; 0xff
 800b0ea:	757b      	strb	r3, [r7, #21]
 800b0ec:	e024      	b.n	800b138 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0ee:	7d7b      	ldrb	r3, [r7, #21]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d109      	bne.n	800b108 <dir_find+0x126>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff feaa 	bl	800ae52 <sum_sfn>
 800b0fe:	4603      	mov	r3, r0
 800b100:	461a      	mov	r2, r3
 800b102:	7d3b      	ldrb	r3, [r7, #20]
 800b104:	4293      	cmp	r3, r2
 800b106:	d024      	beq.n	800b152 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10a      	bne.n	800b12c <dir_find+0x14a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a18      	ldr	r0, [r3, #32]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3324      	adds	r3, #36	; 0x24
 800b11e:	220b      	movs	r2, #11
 800b120:	4619      	mov	r1, r3
 800b122:	f7fe fd1a 	bl	8009b5a <mem_cmp>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d014      	beq.n	800b156 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b12c:	23ff      	movs	r3, #255	; 0xff
 800b12e:	757b      	strb	r3, [r7, #21]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b138:	2100      	movs	r1, #0
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fb62 	bl	800a804 <dir_next>
 800b140:	4603      	mov	r3, r0
 800b142:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f43f af65 	beq.w	800b016 <dir_find+0x34>
 800b14c:	e004      	b.n	800b158 <dir_find+0x176>
		if (res != FR_OK) break;
 800b14e:	bf00      	nop
 800b150:	e002      	b.n	800b158 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b152:	bf00      	nop
 800b154:	e000      	b.n	800b158 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b156:	bf00      	nop

	return res;
 800b158:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08c      	sub	sp, #48	; 0x30
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b178:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <dir_register+0x20>
 800b180:	2306      	movs	r3, #6
 800b182:	e0e0      	b.n	800b346 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b184:	2300      	movs	r3, #0
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
 800b188:	e002      	b.n	800b190 <dir_register+0x2c>
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	3301      	adds	r3, #1
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	4413      	add	r3, r2
 800b19a:	881b      	ldrh	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1f4      	bne.n	800b18a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b1a6:	f107 030c 	add.w	r3, r7, #12
 800b1aa:	220c      	movs	r2, #12
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fe fc99 	bl	8009ae4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	f003 0301 	and.w	r3, r3, #1
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d032      	beq.n	800b222 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2240      	movs	r2, #64	; 0x40
 800b1c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1c8:	e016      	b.n	800b1f8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	f107 010c 	add.w	r1, r7, #12
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	f7ff fdab 	bl	800ad34 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff feff 	bl	800afe2 <dir_find>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b1ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	2b63      	cmp	r3, #99	; 0x63
 800b1fc:	d9e5      	bls.n	800b1ca <dir_register+0x66>
 800b1fe:	e000      	b.n	800b202 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b200:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	2b64      	cmp	r3, #100	; 0x64
 800b206:	d101      	bne.n	800b20c <dir_register+0xa8>
 800b208:	2307      	movs	r3, #7
 800b20a:	e09c      	b.n	800b346 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b20c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b210:	2b04      	cmp	r3, #4
 800b212:	d002      	beq.n	800b21a <dir_register+0xb6>
 800b214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b218:	e095      	b.n	800b346 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b21a:	7dfa      	ldrb	r2, [r7, #23]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	f003 0302 	and.w	r3, r3, #2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d007      	beq.n	800b23c <dir_register+0xd8>
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	330c      	adds	r3, #12
 800b230:	4a47      	ldr	r2, [pc, #284]	; (800b350 <dir_register+0x1ec>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	089b      	lsrs	r3, r3, #2
 800b238:	3301      	adds	r3, #1
 800b23a:	e000      	b.n	800b23e <dir_register+0xda>
 800b23c:	2301      	movs	r3, #1
 800b23e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b240:	6a39      	ldr	r1, [r7, #32]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff fbb4 	bl	800a9b0 <dir_alloc>
 800b248:	4603      	mov	r3, r0
 800b24a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b24e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b252:	2b00      	cmp	r3, #0
 800b254:	d148      	bne.n	800b2e8 <dir_register+0x184>
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	3b01      	subs	r3, #1
 800b25a:	623b      	str	r3, [r7, #32]
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d042      	beq.n	800b2e8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	695a      	ldr	r2, [r3, #20]
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	015b      	lsls	r3, r3, #5
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fa3f 	bl	800a6f2 <dir_sdi>
 800b274:	4603      	mov	r3, r0
 800b276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b27a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d132      	bne.n	800b2e8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3324      	adds	r3, #36	; 0x24
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fde3 	bl	800ae52 <sum_sfn>
 800b28c:	4603      	mov	r3, r0
 800b28e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	4619      	mov	r1, r3
 800b296:	69f8      	ldr	r0, [r7, #28]
 800b298:	f7fe fe52 	bl	8009f40 <move_window>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d11d      	bne.n	800b2e6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	6918      	ldr	r0, [r3, #16]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a19      	ldr	r1, [r3, #32]
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	7efb      	ldrb	r3, [r7, #27]
 800b2b8:	f7ff fcd4 	bl	800ac64 <put_lfn>
				fs->wflag = 1;
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fa9d 	bl	800a804 <dir_next>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b2d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d107      	bne.n	800b2e8 <dir_register+0x184>
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	623b      	str	r3, [r7, #32]
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1d5      	bne.n	800b290 <dir_register+0x12c>
 800b2e4:	e000      	b.n	800b2e8 <dir_register+0x184>
				if (res != FR_OK) break;
 800b2e6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d128      	bne.n	800b342 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	69f8      	ldr	r0, [r7, #28]
 800b2f8:	f7fe fe22 	bl	8009f40 <move_window>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b306:	2b00      	cmp	r3, #0
 800b308:	d11b      	bne.n	800b342 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	2220      	movs	r2, #32
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fc07 	bl	8009b26 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a18      	ldr	r0, [r3, #32]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3324      	adds	r3, #36	; 0x24
 800b320:	220b      	movs	r2, #11
 800b322:	4619      	mov	r1, r3
 800b324:	f7fe fbde 	bl	8009ae4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	330c      	adds	r3, #12
 800b334:	f002 0218 	and.w	r2, r2, #24
 800b338:	b2d2      	uxtb	r2, r2
 800b33a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2201      	movs	r2, #1
 800b340:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b346:	4618      	mov	r0, r3
 800b348:	3730      	adds	r7, #48	; 0x30
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	4ec4ec4f 	.word	0x4ec4ec4f

0800b354 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d007      	beq.n	800b382 <dir_remove+0x2e>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff f9ba 	bl	800a6f2 <dir_sdi>
 800b37e:	4603      	mov	r3, r0
 800b380:	e000      	b.n	800b384 <dir_remove+0x30>
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d128      	bne.n	800b3de <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	4619      	mov	r1, r3
 800b392:	6938      	ldr	r0, [r7, #16]
 800b394:	f7fe fdd4 	bl	8009f40 <move_window>
 800b398:	4603      	mov	r3, r0
 800b39a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d115      	bne.n	800b3ce <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	22e5      	movs	r2, #229	; 0xe5
 800b3a8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d90b      	bls.n	800b3d2 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff fa21 	bl	800a804 <dir_next>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800b3c6:	7dfb      	ldrb	r3, [r7, #23]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0df      	beq.n	800b38c <dir_remove+0x38>
 800b3cc:	e002      	b.n	800b3d4 <dir_remove+0x80>
			if (res != FR_OK) break;
 800b3ce:	bf00      	nop
 800b3d0:	e000      	b.n	800b3d4 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b3d2:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	2b04      	cmp	r3, #4
 800b3d8:	d101      	bne.n	800b3de <dir_remove+0x8a>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	613b      	str	r3, [r7, #16]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	61ba      	str	r2, [r7, #24]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	4413      	add	r3, r2
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b418:	2b1f      	cmp	r3, #31
 800b41a:	d940      	bls.n	800b49e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b41c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b41e:	2b2f      	cmp	r3, #47	; 0x2f
 800b420:	d006      	beq.n	800b430 <create_name+0x48>
 800b422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b424:	2b5c      	cmp	r3, #92	; 0x5c
 800b426:	d110      	bne.n	800b44a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b428:	e002      	b.n	800b430 <create_name+0x48>
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	3301      	adds	r3, #1
 800b42e:	61bb      	str	r3, [r7, #24]
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	4413      	add	r3, r2
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b2f      	cmp	r3, #47	; 0x2f
 800b43a:	d0f6      	beq.n	800b42a <create_name+0x42>
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	4413      	add	r3, r2
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b5c      	cmp	r3, #92	; 0x5c
 800b446:	d0f0      	beq.n	800b42a <create_name+0x42>
			break;
 800b448:	e02a      	b.n	800b4a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2bfe      	cmp	r3, #254	; 0xfe
 800b44e:	d901      	bls.n	800b454 <create_name+0x6c>
 800b450:	2306      	movs	r3, #6
 800b452:	e1c9      	b.n	800b7e8 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b456:	b2db      	uxtb	r3, r3
 800b458:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b45c:	2101      	movs	r1, #1
 800b45e:	4618      	mov	r0, r3
 800b460:	f002 f848 	bl	800d4f4 <ff_convert>
 800b464:	4603      	mov	r3, r0
 800b466:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <create_name+0x8a>
 800b46e:	2306      	movs	r3, #6
 800b470:	e1ba      	b.n	800b7e8 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b474:	2b7f      	cmp	r3, #127	; 0x7f
 800b476:	d809      	bhi.n	800b48c <create_name+0xa4>
 800b478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b47a:	4619      	mov	r1, r3
 800b47c:	48a5      	ldr	r0, [pc, #660]	; (800b714 <create_name+0x32c>)
 800b47e:	f7fe fb93 	bl	8009ba8 <chk_chr>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <create_name+0xa4>
 800b488:	2306      	movs	r3, #6
 800b48a:	e1ad      	b.n	800b7e8 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	617a      	str	r2, [r7, #20]
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4413      	add	r3, r2
 800b498:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b49a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b49c:	e7b4      	b.n	800b408 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b49e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b4aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4ac:	2b1f      	cmp	r3, #31
 800b4ae:	d801      	bhi.n	800b4b4 <create_name+0xcc>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	e000      	b.n	800b4b6 <create_name+0xce>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d109      	bne.n	800b4d4 <create_name+0xec>
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b4d2:	d016      	beq.n	800b502 <create_name+0x11a>
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d14e      	bne.n	800b578 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ec:	d144      	bne.n	800b578 <create_name+0x190>
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4f4:	3b02      	subs	r3, #2
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b500:	d13a      	bne.n	800b578 <create_name+0x190>
		lfn[di] = 0;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4413      	add	r3, r2
 800b50a:	2200      	movs	r2, #0
 800b50c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800b50e:	2300      	movs	r3, #0
 800b510:	623b      	str	r3, [r7, #32]
 800b512:	e00f      	b.n	800b534 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800b514:	6a3a      	ldr	r2, [r7, #32]
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d201      	bcs.n	800b520 <create_name+0x138>
 800b51c:	212e      	movs	r1, #46	; 0x2e
 800b51e:	e000      	b.n	800b522 <create_name+0x13a>
 800b520:	2120      	movs	r1, #32
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	4413      	add	r3, r2
 800b528:	3324      	adds	r3, #36	; 0x24
 800b52a:	460a      	mov	r2, r1
 800b52c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	3301      	adds	r3, #1
 800b532:	623b      	str	r3, [r7, #32]
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	2b0a      	cmp	r3, #10
 800b538:	d9ec      	bls.n	800b514 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800b53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b53e:	f043 0320 	orr.w	r3, r3, #32
 800b542:	b2d9      	uxtb	r1, r3
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	4413      	add	r3, r2
 800b54a:	3324      	adds	r3, #36	; 0x24
 800b54c:	460a      	mov	r2, r1
 800b54e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	e149      	b.n	800b7e8 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b55a:	3b01      	subs	r3, #1
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	4413      	add	r3, r2
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b568:	2b20      	cmp	r3, #32
 800b56a:	d002      	beq.n	800b572 <create_name+0x18a>
 800b56c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b56e:	2b2e      	cmp	r3, #46	; 0x2e
 800b570:	d106      	bne.n	800b580 <create_name+0x198>
		di--;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	3b01      	subs	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1ea      	bne.n	800b554 <create_name+0x16c>
 800b57e:	e000      	b.n	800b582 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800b580:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	4413      	add	r3, r2
 800b58a:	2200      	movs	r2, #0
 800b58c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <create_name+0x1b0>
 800b594:	2306      	movs	r3, #6
 800b596:	e127      	b.n	800b7e8 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3324      	adds	r3, #36	; 0x24
 800b59c:	220b      	movs	r2, #11
 800b59e:	2120      	movs	r1, #32
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe fac0 	bl	8009b26 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61bb      	str	r3, [r7, #24]
 800b5aa:	e002      	b.n	800b5b2 <create_name+0x1ca>
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	61bb      	str	r3, [r7, #24]
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d0f5      	beq.n	800b5ac <create_name+0x1c4>
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b5cc:	d0ee      	beq.n	800b5ac <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d009      	beq.n	800b5e8 <create_name+0x200>
 800b5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d8:	f043 0303 	orr.w	r3, r3, #3
 800b5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b5e0:	e002      	b.n	800b5e8 <create_name+0x200>
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d009      	beq.n	800b602 <create_name+0x21a>
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b600:	d1ef      	bne.n	800b5e2 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800b602:	2300      	movs	r3, #0
 800b604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b608:	2300      	movs	r3, #0
 800b60a:	623b      	str	r3, [r7, #32]
 800b60c:	2308      	movs	r3, #8
 800b60e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	61ba      	str	r2, [r7, #24]
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 8096 	beq.w	800b754 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d006      	beq.n	800b63c <create_name+0x254>
 800b62e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b630:	2b2e      	cmp	r3, #46	; 0x2e
 800b632:	d10a      	bne.n	800b64a <create_name+0x262>
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d006      	beq.n	800b64a <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800b63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b640:	f043 0303 	orr.w	r3, r3, #3
 800b644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b648:	e083      	b.n	800b752 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b64a:	6a3a      	ldr	r2, [r7, #32]
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d203      	bcs.n	800b65a <create_name+0x272>
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	429a      	cmp	r2, r3
 800b658:	d123      	bne.n	800b6a2 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2b0b      	cmp	r3, #11
 800b65e:	d106      	bne.n	800b66e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800b660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b664:	f043 0303 	orr.w	r3, r3, #3
 800b668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b66c:	e075      	b.n	800b75a <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	429a      	cmp	r2, r3
 800b674:	d005      	beq.n	800b682 <create_name+0x29a>
 800b676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b67a:	f043 0303 	orr.w	r3, r3, #3
 800b67e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	429a      	cmp	r2, r3
 800b688:	d866      	bhi.n	800b758 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	2308      	movs	r3, #8
 800b690:	623b      	str	r3, [r7, #32]
 800b692:	230b      	movs	r3, #11
 800b694:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b6a0:	e057      	b.n	800b752 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b6a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b6a6:	d914      	bls.n	800b6d2 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b6a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f001 ff21 	bl	800d4f4 <ff_convert>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b6b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <create_name+0x2de>
 800b6bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6be:	3b80      	subs	r3, #128	; 0x80
 800b6c0:	4a15      	ldr	r2, [pc, #84]	; (800b718 <create_name+0x330>)
 800b6c2:	5cd3      	ldrb	r3, [r2, r3]
 800b6c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6ca:	f043 0302 	orr.w	r3, r3, #2
 800b6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b6d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d007      	beq.n	800b6e8 <create_name+0x300>
 800b6d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6da:	4619      	mov	r1, r3
 800b6dc:	480f      	ldr	r0, [pc, #60]	; (800b71c <create_name+0x334>)
 800b6de:	f7fe fa63 	bl	8009ba8 <chk_chr>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d008      	beq.n	800b6fa <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b6e8:	235f      	movs	r3, #95	; 0x5f
 800b6ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f0:	f043 0303 	orr.w	r3, r3, #3
 800b6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6f8:	e021      	b.n	800b73e <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b6fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6fc:	2b40      	cmp	r3, #64	; 0x40
 800b6fe:	d90f      	bls.n	800b720 <create_name+0x338>
 800b700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b702:	2b5a      	cmp	r3, #90	; 0x5a
 800b704:	d80c      	bhi.n	800b720 <create_name+0x338>
					b |= 2;
 800b706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b70a:	f043 0302 	orr.w	r3, r3, #2
 800b70e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b712:	e014      	b.n	800b73e <create_name+0x356>
 800b714:	080125a8 	.word	0x080125a8
 800b718:	08012630 	.word	0x08012630
 800b71c:	080125b4 	.word	0x080125b4
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b722:	2b60      	cmp	r3, #96	; 0x60
 800b724:	d90b      	bls.n	800b73e <create_name+0x356>
 800b726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b728:	2b7a      	cmp	r3, #122	; 0x7a
 800b72a:	d808      	bhi.n	800b73e <create_name+0x356>
						b |= 1; w -= 0x20;
 800b72c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b730:	f043 0301 	orr.w	r3, r3, #1
 800b734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b73a:	3b20      	subs	r3, #32
 800b73c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	623a      	str	r2, [r7, #32]
 800b744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b746:	b2d1      	uxtb	r1, r2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	4413      	add	r3, r2
 800b74c:	460a      	mov	r2, r1
 800b74e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b752:	e75d      	b.n	800b610 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800b754:	bf00      	nop
 800b756:	e000      	b.n	800b75a <create_name+0x372>
			if (si > di) break;			/* No extension */
 800b758:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b760:	2be5      	cmp	r3, #229	; 0xe5
 800b762:	d103      	bne.n	800b76c <create_name+0x384>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2205      	movs	r2, #5
 800b768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2b08      	cmp	r3, #8
 800b770:	d104      	bne.n	800b77c <create_name+0x394>
 800b772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b77c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b780:	f003 030c 	and.w	r3, r3, #12
 800b784:	2b0c      	cmp	r3, #12
 800b786:	d005      	beq.n	800b794 <create_name+0x3ac>
 800b788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b78c:	f003 0303 	and.w	r3, r3, #3
 800b790:	2b03      	cmp	r3, #3
 800b792:	d105      	bne.n	800b7a0 <create_name+0x3b8>
 800b794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b798:	f043 0302 	orr.w	r3, r3, #2
 800b79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a4:	f003 0302 	and.w	r3, r3, #2
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d117      	bne.n	800b7dc <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b7ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7b0:	f003 0303 	and.w	r3, r3, #3
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d105      	bne.n	800b7c4 <create_name+0x3dc>
 800b7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7bc:	f043 0310 	orr.w	r3, r3, #16
 800b7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b7c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7c8:	f003 030c 	and.w	r3, r3, #12
 800b7cc:	2b04      	cmp	r3, #4
 800b7ce:	d105      	bne.n	800b7dc <create_name+0x3f4>
 800b7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d4:	f043 0308 	orr.w	r3, r3, #8
 800b7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b7e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3728      	adds	r7, #40	; 0x28
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b2f      	cmp	r3, #47	; 0x2f
 800b80a:	d00b      	beq.n	800b824 <follow_path+0x34>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	2b5c      	cmp	r3, #92	; 0x5c
 800b812:	d007      	beq.n	800b824 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	69da      	ldr	r2, [r3, #28]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	609a      	str	r2, [r3, #8]
 800b81c:	e00d      	b.n	800b83a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b2f      	cmp	r3, #47	; 0x2f
 800b82a:	d0f8      	beq.n	800b81e <follow_path+0x2e>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b5c      	cmp	r3, #92	; 0x5c
 800b832:	d0f4      	beq.n	800b81e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2200      	movs	r2, #0
 800b838:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b1f      	cmp	r3, #31
 800b840:	d80a      	bhi.n	800b858 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2280      	movs	r2, #128	; 0x80
 800b846:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b84a:	2100      	movs	r1, #0
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe ff50 	bl	800a6f2 <dir_sdi>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]
 800b856:	e05b      	b.n	800b910 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b858:	463b      	mov	r3, r7
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff fdc3 	bl	800b3e8 <create_name>
 800b862:	4603      	mov	r3, r0
 800b864:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d14c      	bne.n	800b906 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fbb8 	bl	800afe2 <dir_find>
 800b872:	4603      	mov	r3, r0
 800b874:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b87c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d01b      	beq.n	800b8bc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	2b04      	cmp	r3, #4
 800b888:	d13f      	bne.n	800b90a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800b88a:	7afb      	ldrb	r3, [r7, #11]
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d031      	beq.n	800b902 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2280      	movs	r2, #128	; 0x80
 800b8a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800b8aa:	e02e      	b.n	800b90a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b8ac:	7afb      	ldrb	r3, [r7, #11]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d129      	bne.n	800b90a <follow_path+0x11a>
 800b8b6:	2305      	movs	r3, #5
 800b8b8:	75fb      	strb	r3, [r7, #23]
				break;
 800b8ba:	e026      	b.n	800b90a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	f003 0304 	and.w	r3, r3, #4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d123      	bne.n	800b90e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	799b      	ldrb	r3, [r3, #6]
 800b8ca:	f003 0310 	and.w	r3, r3, #16
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d102      	bne.n	800b8d8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800b8d2:	2305      	movs	r3, #5
 800b8d4:	75fb      	strb	r3, [r7, #23]
 800b8d6:	e01b      	b.n	800b910 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	8992      	ldrh	r2, [r2, #12]
 800b8e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8ea:	fb02 f200 	mul.w	r2, r2, r0
 800b8ee:	1a9b      	subs	r3, r3, r2
 800b8f0:	440b      	add	r3, r1
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff f8a2 	bl	800aa3e <ld_clust>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	609a      	str	r2, [r3, #8]
 800b900:	e7aa      	b.n	800b858 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800b902:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b904:	e7a8      	b.n	800b858 <follow_path+0x68>
			if (res != FR_OK) break;
 800b906:	bf00      	nop
 800b908:	e002      	b.n	800b910 <follow_path+0x120>
				break;
 800b90a:	bf00      	nop
 800b90c:	e000      	b.n	800b910 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b90e:	bf00      	nop
			}
		}
	}

	return res;
 800b910:	7dfb      	ldrb	r3, [r7, #23]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b087      	sub	sp, #28
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b922:	f04f 33ff 	mov.w	r3, #4294967295
 800b926:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d031      	beq.n	800b994 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	617b      	str	r3, [r7, #20]
 800b936:	e002      	b.n	800b93e <get_ldnumber+0x24>
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	3301      	adds	r3, #1
 800b93c:	617b      	str	r3, [r7, #20]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b1f      	cmp	r3, #31
 800b944:	d903      	bls.n	800b94e <get_ldnumber+0x34>
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b3a      	cmp	r3, #58	; 0x3a
 800b94c:	d1f4      	bne.n	800b938 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b3a      	cmp	r3, #58	; 0x3a
 800b954:	d11c      	bne.n	800b990 <get_ldnumber+0x76>
			tp = *path;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	60fa      	str	r2, [r7, #12]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	3b30      	subs	r3, #48	; 0x30
 800b966:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b09      	cmp	r3, #9
 800b96c:	d80e      	bhi.n	800b98c <get_ldnumber+0x72>
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	429a      	cmp	r2, r3
 800b974:	d10a      	bne.n	800b98c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d107      	bne.n	800b98c <get_ldnumber+0x72>
					vol = (int)i;
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	3301      	adds	r3, #1
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	e002      	b.n	800b996 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b990:	2300      	movs	r3, #0
 800b992:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b994:	693b      	ldr	r3, [r7, #16]
}
 800b996:	4618      	mov	r0, r3
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	70da      	strb	r2, [r3, #3]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ba:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7fe fabe 	bl	8009f40 <move_window>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <check_fs+0x2a>
 800b9ca:	2304      	movs	r3, #4
 800b9cc:	e038      	b.n	800ba40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	333c      	adds	r3, #60	; 0x3c
 800b9d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe f802 	bl	80099e0 <ld_word>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d001      	beq.n	800b9ec <check_fs+0x48>
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e029      	b.n	800ba40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9f2:	2be9      	cmp	r3, #233	; 0xe9
 800b9f4:	d009      	beq.n	800ba0a <check_fs+0x66>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9fc:	2beb      	cmp	r3, #235	; 0xeb
 800b9fe:	d11e      	bne.n	800ba3e <check_fs+0x9a>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba06:	2b90      	cmp	r3, #144	; 0x90
 800ba08:	d119      	bne.n	800ba3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	333c      	adds	r3, #60	; 0x3c
 800ba0e:	3336      	adds	r3, #54	; 0x36
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fd fffd 	bl	8009a10 <ld_dword>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba1c:	4a0a      	ldr	r2, [pc, #40]	; (800ba48 <check_fs+0xa4>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d101      	bne.n	800ba26 <check_fs+0x82>
 800ba22:	2300      	movs	r3, #0
 800ba24:	e00c      	b.n	800ba40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	333c      	adds	r3, #60	; 0x3c
 800ba2a:	3352      	adds	r3, #82	; 0x52
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fd ffef 	bl	8009a10 <ld_dword>
 800ba32:	4602      	mov	r2, r0
 800ba34:	4b05      	ldr	r3, [pc, #20]	; (800ba4c <check_fs+0xa8>)
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d101      	bne.n	800ba3e <check_fs+0x9a>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	e000      	b.n	800ba40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ba3e:	2302      	movs	r3, #2
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	00544146 	.word	0x00544146
 800ba4c:	33544146 	.word	0x33544146

0800ba50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b096      	sub	sp, #88	; 0x58
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2200      	movs	r2, #0
 800ba62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff ff58 	bl	800b91a <get_ldnumber>
 800ba6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da01      	bge.n	800ba76 <find_volume+0x26>
 800ba72:	230b      	movs	r3, #11
 800ba74:	e26b      	b.n	800bf4e <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ba76:	4ab0      	ldr	r2, [pc, #704]	; (800bd38 <find_volume+0x2e8>)
 800ba78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <find_volume+0x3a>
 800ba86:	230c      	movs	r3, #12
 800ba88:	e261      	b.n	800bf4e <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ba90:	79fb      	ldrb	r3, [r7, #7]
 800ba92:	f023 0301 	bic.w	r3, r3, #1
 800ba96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01a      	beq.n	800bad6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	785b      	ldrb	r3, [r3, #1]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fd fefd 	bl	80098a4 <disk_status>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10c      	bne.n	800bad6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <find_volume+0x82>
 800bac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bac6:	f003 0304 	and.w	r3, r3, #4
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bace:	230a      	movs	r3, #10
 800bad0:	e23d      	b.n	800bf4e <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800bad2:	2300      	movs	r3, #0
 800bad4:	e23b      	b.n	800bf4e <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800badc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	785b      	ldrb	r3, [r3, #1]
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fd fef5 	bl	80098d8 <disk_initialize>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800baf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800baf8:	f003 0301 	and.w	r3, r3, #1
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bb00:	2303      	movs	r3, #3
 800bb02:	e224      	b.n	800bf4e <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d007      	beq.n	800bb1a <find_volume+0xca>
 800bb0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb0e:	f003 0304 	and.w	r3, r3, #4
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bb16:	230a      	movs	r3, #10
 800bb18:	e219      	b.n	800bf4e <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	7858      	ldrb	r0, [r3, #1]
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	330c      	adds	r3, #12
 800bb22:	461a      	mov	r2, r3
 800bb24:	2102      	movs	r1, #2
 800bb26:	f7fd ff3d 	bl	80099a4 <disk_ioctl>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <find_volume+0xe4>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e20c      	b.n	800bf4e <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	899b      	ldrh	r3, [r3, #12]
 800bb38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3c:	d80d      	bhi.n	800bb5a <find_volume+0x10a>
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	899b      	ldrh	r3, [r3, #12]
 800bb42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb46:	d308      	bcc.n	800bb5a <find_volume+0x10a>
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	899b      	ldrh	r3, [r3, #12]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	899b      	ldrh	r3, [r3, #12]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	4013      	ands	r3, r2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <find_volume+0x10e>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e1f7      	b.n	800bf4e <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bb62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb66:	f7ff ff1d 	bl	800b9a4 <check_fs>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bb70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d14b      	bne.n	800bc10 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bb78:	2300      	movs	r3, #0
 800bb7a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb7c:	e01f      	b.n	800bbbe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bb84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb86:	011b      	lsls	r3, r3, #4
 800bb88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bb8c:	4413      	add	r3, r2
 800bb8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb92:	3304      	adds	r3, #4
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d006      	beq.n	800bba8 <find_volume+0x158>
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fd ff36 	bl	8009a10 <ld_dword>
 800bba4:	4602      	mov	r2, r0
 800bba6:	e000      	b.n	800bbaa <find_volume+0x15a>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bbb2:	440b      	add	r3, r1
 800bbb4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bbb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbba:	3301      	adds	r3, #1
 800bbbc:	643b      	str	r3, [r7, #64]	; 0x40
 800bbbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d9dc      	bls.n	800bb7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <find_volume+0x184>
 800bbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bbdc:	4413      	add	r3, r2
 800bbde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bbe2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <find_volume+0x1a6>
 800bbea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbee:	f7ff fed9 	bl	800b9a4 <check_fs>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	e000      	b.n	800bbf8 <find_volume+0x1a8>
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bbfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d905      	bls.n	800bc10 <find_volume+0x1c0>
 800bc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc06:	3301      	adds	r3, #1
 800bc08:	643b      	str	r3, [r7, #64]	; 0x40
 800bc0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d9e1      	bls.n	800bbd4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bc10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	d101      	bne.n	800bc1c <find_volume+0x1cc>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e198      	b.n	800bf4e <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bc1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d901      	bls.n	800bc28 <find_volume+0x1d8>
 800bc24:	230d      	movs	r3, #13
 800bc26:	e192      	b.n	800bf4e <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	333c      	adds	r3, #60	; 0x3c
 800bc2c:	330b      	adds	r3, #11
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd fed6 	bl	80099e0 <ld_word>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461a      	mov	r2, r3
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	899b      	ldrh	r3, [r3, #12]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d001      	beq.n	800bc44 <find_volume+0x1f4>
 800bc40:	230d      	movs	r3, #13
 800bc42:	e184      	b.n	800bf4e <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	333c      	adds	r3, #60	; 0x3c
 800bc48:	3316      	adds	r3, #22
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fd fec8 	bl	80099e0 <ld_word>
 800bc50:	4603      	mov	r3, r0
 800bc52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <find_volume+0x218>
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5c:	333c      	adds	r3, #60	; 0x3c
 800bc5e:	3324      	adds	r3, #36	; 0x24
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fd fed5 	bl	8009a10 <ld_dword>
 800bc66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc6c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc70:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800bc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7a:	789b      	ldrb	r3, [r3, #2]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d005      	beq.n	800bc8c <find_volume+0x23c>
 800bc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc82:	789b      	ldrb	r3, [r3, #2]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d001      	beq.n	800bc8c <find_volume+0x23c>
 800bc88:	230d      	movs	r3, #13
 800bc8a:	e160      	b.n	800bf4e <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8e:	789b      	ldrb	r3, [r3, #2]
 800bc90:	461a      	mov	r2, r3
 800bc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc94:	fb02 f303 	mul.w	r3, r2, r3
 800bc98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	895b      	ldrh	r3, [r3, #10]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d008      	beq.n	800bcc0 <find_volume+0x270>
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	895b      	ldrh	r3, [r3, #10]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	895b      	ldrh	r3, [r3, #10]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	4013      	ands	r3, r2
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <find_volume+0x274>
 800bcc0:	230d      	movs	r3, #13
 800bcc2:	e144      	b.n	800bf4e <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	333c      	adds	r3, #60	; 0x3c
 800bcc8:	3311      	adds	r3, #17
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fd fe88 	bl	80099e0 <ld_word>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	891b      	ldrh	r3, [r3, #8]
 800bcdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcde:	8992      	ldrh	r2, [r2, #12]
 800bce0:	0952      	lsrs	r2, r2, #5
 800bce2:	b292      	uxth	r2, r2
 800bce4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bce8:	fb02 f201 	mul.w	r2, r2, r1
 800bcec:	1a9b      	subs	r3, r3, r2
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <find_volume+0x2a8>
 800bcf4:	230d      	movs	r3, #13
 800bcf6:	e12a      	b.n	800bf4e <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfa:	333c      	adds	r3, #60	; 0x3c
 800bcfc:	3313      	adds	r3, #19
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd fe6e 	bl	80099e0 <ld_word>
 800bd04:	4603      	mov	r3, r0
 800bd06:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <find_volume+0x2cc>
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd10:	333c      	adds	r3, #60	; 0x3c
 800bd12:	3320      	adds	r3, #32
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fd fe7b 	bl	8009a10 <ld_dword>
 800bd1a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	333c      	adds	r3, #60	; 0x3c
 800bd20:	330e      	adds	r3, #14
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fd fe5c 	bl	80099e0 <ld_word>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bd2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d104      	bne.n	800bd3c <find_volume+0x2ec>
 800bd32:	230d      	movs	r3, #13
 800bd34:	e10b      	b.n	800bf4e <find_volume+0x4fe>
 800bd36:	bf00      	nop
 800bd38:	2000023c 	.word	0x2000023c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bd3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd40:	4413      	add	r3, r2
 800bd42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd44:	8911      	ldrh	r1, [r2, #8]
 800bd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd48:	8992      	ldrh	r2, [r2, #12]
 800bd4a:	0952      	lsrs	r2, r2, #5
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	fbb1 f2f2 	udiv	r2, r1, r2
 800bd52:	b292      	uxth	r2, r2
 800bd54:	4413      	add	r3, r2
 800bd56:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bd58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d201      	bcs.n	800bd64 <find_volume+0x314>
 800bd60:	230d      	movs	r3, #13
 800bd62:	e0f4      	b.n	800bf4e <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bd64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd6c:	8952      	ldrh	r2, [r2, #10]
 800bd6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd72:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <find_volume+0x32e>
 800bd7a:	230d      	movs	r3, #13
 800bd7c:	e0e7      	b.n	800bf4e <find_volume+0x4fe>
		fmt = FS_FAT32;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d802      	bhi.n	800bd94 <find_volume+0x344>
 800bd8e:	2302      	movs	r3, #2
 800bd90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d802      	bhi.n	800bda4 <find_volume+0x354>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	1c9a      	adds	r2, r3, #2
 800bda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdaa:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdb0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bdb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb6:	441a      	add	r2, r3
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800bdbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	441a      	add	r2, r3
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800bdc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d11e      	bne.n	800be0c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	333c      	adds	r3, #60	; 0x3c
 800bdd2:	332a      	adds	r3, #42	; 0x2a
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fd fe03 	bl	80099e0 <ld_word>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <find_volume+0x394>
 800bde0:	230d      	movs	r3, #13
 800bde2:	e0b4      	b.n	800bf4e <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	891b      	ldrh	r3, [r3, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <find_volume+0x3a0>
 800bdec:	230d      	movs	r3, #13
 800bdee:	e0ae      	b.n	800bf4e <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	333c      	adds	r3, #60	; 0x3c
 800bdf4:	332c      	adds	r3, #44	; 0x2c
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fd fe0a 	bl	8009a10 <ld_dword>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be00:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	647b      	str	r3, [r7, #68]	; 0x44
 800be0a:	e01f      	b.n	800be4c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	891b      	ldrh	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <find_volume+0x3c8>
 800be14:	230d      	movs	r3, #13
 800be16:	e09a      	b.n	800bf4e <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be1e:	441a      	add	r2, r3
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800be24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d103      	bne.n	800be34 <find_volume+0x3e4>
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	e00a      	b.n	800be4a <find_volume+0x3fa>
 800be34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be36:	6a1a      	ldr	r2, [r3, #32]
 800be38:	4613      	mov	r3, r2
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	4413      	add	r3, r2
 800be3e:	085a      	lsrs	r2, r3, #1
 800be40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800be4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	899b      	ldrh	r3, [r3, #12]
 800be54:	4619      	mov	r1, r3
 800be56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be58:	440b      	add	r3, r1
 800be5a:	3b01      	subs	r3, #1
 800be5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be5e:	8989      	ldrh	r1, [r1, #12]
 800be60:	fbb3 f3f1 	udiv	r3, r3, r1
 800be64:	429a      	cmp	r2, r3
 800be66:	d201      	bcs.n	800be6c <find_volume+0x41c>
 800be68:	230d      	movs	r3, #13
 800be6a:	e070      	b.n	800bf4e <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295
 800be72:	619a      	str	r2, [r3, #24]
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	699a      	ldr	r2, [r3, #24]
 800be78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	2280      	movs	r2, #128	; 0x80
 800be80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800be82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be86:	2b03      	cmp	r3, #3
 800be88:	d149      	bne.n	800bf1e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8c:	333c      	adds	r3, #60	; 0x3c
 800be8e:	3330      	adds	r3, #48	; 0x30
 800be90:	4618      	mov	r0, r3
 800be92:	f7fd fda5 	bl	80099e0 <ld_word>
 800be96:	4603      	mov	r3, r0
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d140      	bne.n	800bf1e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	3301      	adds	r3, #1
 800bea0:	4619      	mov	r1, r3
 800bea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bea4:	f7fe f84c 	bl	8009f40 <move_window>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d137      	bne.n	800bf1e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	2200      	movs	r2, #0
 800beb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	333c      	adds	r3, #60	; 0x3c
 800beb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fd fd8f 	bl	80099e0 <ld_word>
 800bec2:	4603      	mov	r3, r0
 800bec4:	461a      	mov	r2, r3
 800bec6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800beca:	429a      	cmp	r2, r3
 800becc:	d127      	bne.n	800bf1e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	333c      	adds	r3, #60	; 0x3c
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fd fd9c 	bl	8009a10 <ld_dword>
 800bed8:	4602      	mov	r2, r0
 800beda:	4b1f      	ldr	r3, [pc, #124]	; (800bf58 <find_volume+0x508>)
 800bedc:	429a      	cmp	r2, r3
 800bede:	d11e      	bne.n	800bf1e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	333c      	adds	r3, #60	; 0x3c
 800bee4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fd fd91 	bl	8009a10 <ld_dword>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b1a      	ldr	r3, [pc, #104]	; (800bf5c <find_volume+0x50c>)
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d113      	bne.n	800bf1e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	333c      	adds	r3, #60	; 0x3c
 800befa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fd fd86 	bl	8009a10 <ld_dword>
 800bf04:	4602      	mov	r2, r0
 800bf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf08:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	333c      	adds	r3, #60	; 0x3c
 800bf0e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fd fd7c 	bl	8009a10 <ld_dword>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bf24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bf26:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <find_volume+0x510>)
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	4b0c      	ldr	r3, [pc, #48]	; (800bf60 <find_volume+0x510>)
 800bf30:	801a      	strh	r2, [r3, #0]
 800bf32:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <find_volume+0x510>)
 800bf34:	881a      	ldrh	r2, [r3, #0]
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	4a09      	ldr	r2, [pc, #36]	; (800bf64 <find_volume+0x514>)
 800bf3e:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	2200      	movs	r2, #0
 800bf44:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bf46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf48:	f7fd ff92 	bl	8009e70 <clear_lock>
#endif
	return FR_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3758      	adds	r7, #88	; 0x58
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	41615252 	.word	0x41615252
 800bf5c:	61417272 	.word	0x61417272
 800bf60:	20000240 	.word	0x20000240
 800bf64:	20000264 	.word	0x20000264

0800bf68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bf72:	2309      	movs	r3, #9
 800bf74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01c      	beq.n	800bfb6 <validate+0x4e>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d018      	beq.n	800bfb6 <validate+0x4e>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d013      	beq.n	800bfb6 <validate+0x4e>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	889a      	ldrh	r2, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	88db      	ldrh	r3, [r3, #6]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d10c      	bne.n	800bfb6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fd fc7e 	bl	80098a4 <disk_status>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <validate+0x4e>
			res = FR_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <validate+0x5a>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	e000      	b.n	800bfc4 <validate+0x5c>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	6013      	str	r3, [r2, #0]
	return res;
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bfe6:	f107 0310 	add.w	r3, r7, #16
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff fc95 	bl	800b91a <get_ldnumber>
 800bff0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	da01      	bge.n	800bffc <f_mount+0x28>
 800bff8:	230b      	movs	r3, #11
 800bffa:	e02b      	b.n	800c054 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bffc:	4a17      	ldr	r2, [pc, #92]	; (800c05c <f_mount+0x88>)
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c004:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c00c:	69b8      	ldr	r0, [r7, #24]
 800c00e:	f7fd ff2f 	bl	8009e70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	2200      	movs	r2, #0
 800c016:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	490d      	ldr	r1, [pc, #52]	; (800c05c <f_mount+0x88>)
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <f_mount+0x66>
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d001      	beq.n	800c03e <f_mount+0x6a>
 800c03a:	2300      	movs	r3, #0
 800c03c:	e00a      	b.n	800c054 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c03e:	f107 010c 	add.w	r1, r7, #12
 800c042:	f107 0308 	add.w	r3, r7, #8
 800c046:	2200      	movs	r2, #0
 800c048:	4618      	mov	r0, r3
 800c04a:	f7ff fd01 	bl	800ba50 <find_volume>
 800c04e:	4603      	mov	r3, r0
 800c050:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c052:	7dfb      	ldrb	r3, [r7, #23]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3720      	adds	r7, #32
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	2000023c 	.word	0x2000023c

0800c060 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b09a      	sub	sp, #104	; 0x68
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <f_open+0x18>
 800c074:	2309      	movs	r3, #9
 800c076:	e1bb      	b.n	800c3f0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c078:	79fb      	ldrb	r3, [r7, #7]
 800c07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c07e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c080:	79fa      	ldrb	r2, [r7, #7]
 800c082:	f107 0114 	add.w	r1, r7, #20
 800c086:	f107 0308 	add.w	r3, r7, #8
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff fce0 	bl	800ba50 <find_volume>
 800c090:	4603      	mov	r3, r0
 800c092:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c096:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f040 819f 	bne.w	800c3de <f_open+0x37e>
		dj.obj.fs = fs;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	f107 0318 	add.w	r3, r7, #24
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff fb9f 	bl	800b7f0 <follow_path>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c0b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d11a      	bne.n	800c0f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c0c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c0c4:	b25b      	sxtb	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da03      	bge.n	800c0d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c0ca:	2306      	movs	r3, #6
 800c0cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c0d0:	e011      	b.n	800c0f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	f023 0301 	bic.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bf14      	ite	ne
 800c0dc:	2301      	movne	r3, #1
 800c0de:	2300      	moveq	r3, #0
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f107 0318 	add.w	r3, r7, #24
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd fd78 	bl	8009be0 <chk_lock>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c0f6:	79fb      	ldrb	r3, [r7, #7]
 800c0f8:	f003 031c 	and.w	r3, r3, #28
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d07f      	beq.n	800c200 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c104:	2b00      	cmp	r3, #0
 800c106:	d017      	beq.n	800c138 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c108:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c10c:	2b04      	cmp	r3, #4
 800c10e:	d10e      	bne.n	800c12e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c110:	f7fd fdc2 	bl	8009c98 <enq_lock>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d006      	beq.n	800c128 <f_open+0xc8>
 800c11a:	f107 0318 	add.w	r3, r7, #24
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff f820 	bl	800b164 <dir_register>
 800c124:	4603      	mov	r3, r0
 800c126:	e000      	b.n	800c12a <f_open+0xca>
 800c128:	2312      	movs	r3, #18
 800c12a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c12e:	79fb      	ldrb	r3, [r7, #7]
 800c130:	f043 0308 	orr.w	r3, r3, #8
 800c134:	71fb      	strb	r3, [r7, #7]
 800c136:	e010      	b.n	800c15a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c138:	7fbb      	ldrb	r3, [r7, #30]
 800c13a:	f003 0311 	and.w	r3, r3, #17
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <f_open+0xea>
					res = FR_DENIED;
 800c142:	2307      	movs	r3, #7
 800c144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c148:	e007      	b.n	800c15a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <f_open+0xfa>
 800c154:	2308      	movs	r3, #8
 800c156:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c15a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d168      	bne.n	800c234 <f_open+0x1d4>
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	f003 0308 	and.w	r3, r3, #8
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d063      	beq.n	800c234 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c16c:	f7fd f94a 	bl	8009404 <get_fattime>
 800c170:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	330e      	adds	r3, #14
 800c176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fd fc87 	bl	8009a8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	3316      	adds	r3, #22
 800c182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c184:	4618      	mov	r0, r3
 800c186:	f7fd fc81 	bl	8009a8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	330b      	adds	r3, #11
 800c18e:	2220      	movs	r2, #32
 800c190:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c196:	4611      	mov	r1, r2
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe fc50 	bl	800aa3e <ld_clust>
 800c19e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fc68 	bl	800aa7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	331c      	adds	r3, #28
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fd fc6a 	bl	8009a8c <st_dword>
					fs->wflag = 1;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d037      	beq.n	800c234 <f_open+0x1d4>
						dw = fs->winsect;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c1ca:	f107 0318 	add.w	r3, r7, #24
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe f958 	bl	800a488 <remove_chain>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c1de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d126      	bne.n	800c234 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fd fea8 	bl	8009f40 <move_window>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1fa:	3a01      	subs	r2, #1
 800c1fc:	615a      	str	r2, [r3, #20]
 800c1fe:	e019      	b.n	800c234 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c200:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c204:	2b00      	cmp	r3, #0
 800c206:	d115      	bne.n	800c234 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c208:	7fbb      	ldrb	r3, [r7, #30]
 800c20a:	f003 0310 	and.w	r3, r3, #16
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c212:	2304      	movs	r3, #4
 800c214:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c218:	e00c      	b.n	800c234 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d007      	beq.n	800c234 <f_open+0x1d4>
 800c224:	7fbb      	ldrb	r3, [r7, #30]
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <f_open+0x1d4>
						res = FR_DENIED;
 800c22e:	2307      	movs	r3, #7
 800c230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c234:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d128      	bne.n	800c28e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	f003 0308 	and.w	r3, r3, #8
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c24c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	f023 0301 	bic.w	r3, r3, #1
 800c262:	2b00      	cmp	r3, #0
 800c264:	bf14      	ite	ne
 800c266:	2301      	movne	r3, #1
 800c268:	2300      	moveq	r3, #0
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	461a      	mov	r2, r3
 800c26e:	f107 0318 	add.w	r3, r7, #24
 800c272:	4611      	mov	r1, r2
 800c274:	4618      	mov	r0, r3
 800c276:	f7fd fd31 	bl	8009cdc <inc_lock>
 800c27a:	4602      	mov	r2, r0
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d102      	bne.n	800c28e <f_open+0x22e>
 800c288:	2302      	movs	r3, #2
 800c28a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c28e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c292:	2b00      	cmp	r3, #0
 800c294:	f040 80a3 	bne.w	800c3de <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe fbcd 	bl	800aa3e <ld_clust>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	331c      	adds	r3, #28
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fd fbae 	bl	8009a10 <ld_dword>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	88da      	ldrh	r2, [r3, #6]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	79fa      	ldrb	r2, [r7, #7]
 800c2d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3330      	adds	r3, #48	; 0x30
 800c2ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fd fc18 	bl	8009b26 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	f003 0320 	and.w	r3, r3, #32
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d06e      	beq.n	800c3de <f_open+0x37e>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d06a      	beq.n	800c3de <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	895b      	ldrh	r3, [r3, #10]
 800c314:	461a      	mov	r2, r3
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	899b      	ldrh	r3, [r3, #12]
 800c31a:	fb03 f302 	mul.w	r3, r3, r2
 800c31e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c32c:	e016      	b.n	800c35c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd fec1 	bl	800a0ba <get_fat>
 800c338:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c33a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d802      	bhi.n	800c346 <f_open+0x2e6>
 800c340:	2302      	movs	r3, #2
 800c342:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34c:	d102      	bne.n	800c354 <f_open+0x2f4>
 800c34e:	2301      	movs	r3, #1
 800c350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c35c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c360:	2b00      	cmp	r3, #0
 800c362:	d103      	bne.n	800c36c <f_open+0x30c>
 800c364:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c368:	429a      	cmp	r2, r3
 800c36a:	d8e0      	bhi.n	800c32e <f_open+0x2ce>
				}
				fp->clust = clst;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c370:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c376:	2b00      	cmp	r3, #0
 800c378:	d131      	bne.n	800c3de <f_open+0x37e>
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	899b      	ldrh	r3, [r3, #12]
 800c37e:	461a      	mov	r2, r3
 800c380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c382:	fbb3 f1f2 	udiv	r1, r3, r2
 800c386:	fb02 f201 	mul.w	r2, r2, r1
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d026      	beq.n	800c3de <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c394:	4618      	mov	r0, r3
 800c396:	f7fd fe71 	bl	800a07c <clust2sect>
 800c39a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d103      	bne.n	800c3aa <f_open+0x34a>
						res = FR_INT_ERR;
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c3a8:	e019      	b.n	800c3de <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	899b      	ldrh	r3, [r3, #12]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b8:	441a      	add	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	7858      	ldrb	r0, [r3, #1]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a1a      	ldr	r2, [r3, #32]
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f7fd faa9 	bl	8009924 <disk_read>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <f_open+0x37e>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c3de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <f_open+0x38c>
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c3ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3768      	adds	r7, #104	; 0x68
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08e      	sub	sp, #56	; 0x38
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2200      	movs	r2, #0
 800c40e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f107 0214 	add.w	r2, r7, #20
 800c416:	4611      	mov	r1, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff fda5 	bl	800bf68 <validate>
 800c41e:	4603      	mov	r3, r0
 800c420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d107      	bne.n	800c43c <f_read+0x44>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	7d5b      	ldrb	r3, [r3, #21]
 800c430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <f_read+0x4a>
 800c43c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c440:	e135      	b.n	800c6ae <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	7d1b      	ldrb	r3, [r3, #20]
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <f_read+0x5a>
 800c44e:	2307      	movs	r3, #7
 800c450:	e12d      	b.n	800c6ae <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	429a      	cmp	r2, r3
 800c464:	f240 811e 	bls.w	800c6a4 <f_read+0x2ac>
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c46c:	e11a      	b.n	800c6a4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	8992      	ldrh	r2, [r2, #12]
 800c476:	fbb3 f1f2 	udiv	r1, r3, r2
 800c47a:	fb02 f201 	mul.w	r2, r2, r1
 800c47e:	1a9b      	subs	r3, r3, r2
 800c480:	2b00      	cmp	r3, #0
 800c482:	f040 80d5 	bne.w	800c630 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	699b      	ldr	r3, [r3, #24]
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	8992      	ldrh	r2, [r2, #12]
 800c48e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	8952      	ldrh	r2, [r2, #10]
 800c496:	3a01      	subs	r2, #1
 800c498:	4013      	ands	r3, r2
 800c49a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d12f      	bne.n	800c502 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d103      	bne.n	800c4b2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	633b      	str	r3, [r7, #48]	; 0x30
 800c4b0:	e013      	b.n	800c4da <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d007      	beq.n	800c4ca <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7fe f8de 	bl	800a682 <clmt_clust>
 800c4c6:	6338      	str	r0, [r7, #48]	; 0x30
 800c4c8:	e007      	b.n	800c4da <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	f7fd fdf1 	bl	800a0ba <get_fat>
 800c4d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d804      	bhi.n	800c4ea <f_read+0xf2>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	755a      	strb	r2, [r3, #21]
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	e0e1      	b.n	800c6ae <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f0:	d104      	bne.n	800c4fc <f_read+0x104>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	755a      	strb	r2, [r3, #21]
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e0d8      	b.n	800c6ae <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c500:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	69db      	ldr	r3, [r3, #28]
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7fd fdb6 	bl	800a07c <clust2sect>
 800c510:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <f_read+0x12a>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2202      	movs	r2, #2
 800c51c:	755a      	strb	r2, [r3, #21]
 800c51e:	2302      	movs	r3, #2
 800c520:	e0c5      	b.n	800c6ae <f_read+0x2b6>
			sect += csect;
 800c522:	69ba      	ldr	r2, [r7, #24]
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	4413      	add	r3, r2
 800c528:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	899b      	ldrh	r3, [r3, #12]
 800c52e:	461a      	mov	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	fbb3 f3f2 	udiv	r3, r3, r2
 800c536:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d041      	beq.n	800c5c2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c53e:	69fa      	ldr	r2, [r7, #28]
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	4413      	add	r3, r2
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	8952      	ldrh	r2, [r2, #10]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d905      	bls.n	800c558 <f_read+0x160>
					cc = fs->csize - csect;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	895b      	ldrh	r3, [r3, #10]
 800c550:	461a      	mov	r2, r3
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	7858      	ldrb	r0, [r3, #1]
 800c55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55e:	69ba      	ldr	r2, [r7, #24]
 800c560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c562:	f7fd f9df 	bl	8009924 <disk_read>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d004      	beq.n	800c576 <f_read+0x17e>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	755a      	strb	r2, [r3, #21]
 800c572:	2301      	movs	r3, #1
 800c574:	e09b      	b.n	800c6ae <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	7d1b      	ldrb	r3, [r3, #20]
 800c57a:	b25b      	sxtb	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	da18      	bge.n	800c5b2 <f_read+0x1ba>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6a1a      	ldr	r2, [r3, #32]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d911      	bls.n	800c5b2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6a1a      	ldr	r2, [r3, #32]
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	8992      	ldrh	r2, [r2, #12]
 800c59a:	fb02 f303 	mul.w	r3, r2, r3
 800c59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a0:	18d0      	adds	r0, r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	899b      	ldrh	r3, [r3, #12]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	f7fd fa99 	bl	8009ae4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	899b      	ldrh	r3, [r3, #12]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	fb02 f303 	mul.w	r3, r2, r3
 800c5be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c5c0:	e05c      	b.n	800c67c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d02e      	beq.n	800c62a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	7d1b      	ldrb	r3, [r3, #20]
 800c5d0:	b25b      	sxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	da18      	bge.n	800c608 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	7858      	ldrb	r0, [r3, #1]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6a1a      	ldr	r2, [r3, #32]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	f7fd f9bd 	bl	8009964 <disk_write>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d004      	beq.n	800c5fa <f_read+0x202>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	755a      	strb	r2, [r3, #21]
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e059      	b.n	800c6ae <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	7d1b      	ldrb	r3, [r3, #20]
 800c5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c602:	b2da      	uxtb	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	7858      	ldrb	r0, [r3, #1]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c612:	2301      	movs	r3, #1
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	f7fd f985 	bl	8009924 <disk_read>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d004      	beq.n	800c62a <f_read+0x232>
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	755a      	strb	r2, [r3, #21]
 800c626:	2301      	movs	r3, #1
 800c628:	e041      	b.n	800c6ae <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	69ba      	ldr	r2, [r7, #24]
 800c62e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	899b      	ldrh	r3, [r3, #12]
 800c634:	4618      	mov	r0, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	699b      	ldr	r3, [r3, #24]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	8992      	ldrh	r2, [r2, #12]
 800c63e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c642:	fb02 f201 	mul.w	r2, r2, r1
 800c646:	1a9b      	subs	r3, r3, r2
 800c648:	1ac3      	subs	r3, r0, r3
 800c64a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	429a      	cmp	r2, r3
 800c652:	d901      	bls.n	800c658 <f_read+0x260>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	8992      	ldrh	r2, [r2, #12]
 800c666:	fbb3 f0f2 	udiv	r0, r3, r2
 800c66a:	fb02 f200 	mul.w	r2, r2, r0
 800c66e:	1a9b      	subs	r3, r3, r2
 800c670:	440b      	add	r3, r1
 800c672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c674:	4619      	mov	r1, r3
 800c676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c678:	f7fd fa34 	bl	8009ae4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	4413      	add	r3, r2
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	699a      	ldr	r2, [r3, #24]
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	441a      	add	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	619a      	str	r2, [r3, #24]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c696:	441a      	add	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f47f aee1 	bne.w	800c46e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3738      	adds	r7, #56	; 0x38
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b08c      	sub	sp, #48	; 0x30
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	60b9      	str	r1, [r7, #8]
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f107 0210 	add.w	r2, r7, #16
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff fc46 	bl	800bf68 <validate>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d107      	bne.n	800c6fa <f_write+0x44>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	7d5b      	ldrb	r3, [r3, #21]
 800c6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d002      	beq.n	800c700 <f_write+0x4a>
 800c6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6fe:	e16a      	b.n	800c9d6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	7d1b      	ldrb	r3, [r3, #20]
 800c704:	f003 0302 	and.w	r3, r3, #2
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <f_write+0x5a>
 800c70c:	2307      	movs	r3, #7
 800c70e:	e162      	b.n	800c9d6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	699a      	ldr	r2, [r3, #24]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	441a      	add	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	f080 814c 	bcs.w	800c9ba <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	43db      	mvns	r3, r3
 800c728:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c72a:	e146      	b.n	800c9ba <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	8992      	ldrh	r2, [r2, #12]
 800c734:	fbb3 f1f2 	udiv	r1, r3, r2
 800c738:	fb02 f201 	mul.w	r2, r2, r1
 800c73c:	1a9b      	subs	r3, r3, r2
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f040 80f1 	bne.w	800c926 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	8992      	ldrh	r2, [r2, #12]
 800c74c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	8952      	ldrh	r2, [r2, #10]
 800c754:	3a01      	subs	r2, #1
 800c756:	4013      	ands	r3, r2
 800c758:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d143      	bne.n	800c7e8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	699b      	ldr	r3, [r3, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10c      	bne.n	800c782 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11a      	bne.n	800c7aa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2100      	movs	r1, #0
 800c778:	4618      	mov	r0, r3
 800c77a:	f7fd feea 	bl	800a552 <create_chain>
 800c77e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c780:	e013      	b.n	800c7aa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d007      	beq.n	800c79a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	699b      	ldr	r3, [r3, #24]
 800c78e:	4619      	mov	r1, r3
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7fd ff76 	bl	800a682 <clmt_clust>
 800c796:	62b8      	str	r0, [r7, #40]	; 0x28
 800c798:	e007      	b.n	800c7aa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	4610      	mov	r0, r2
 800c7a4:	f7fd fed5 	bl	800a552 <create_chain>
 800c7a8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8109 	beq.w	800c9c4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d104      	bne.n	800c7c2 <f_write+0x10c>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	755a      	strb	r2, [r3, #21]
 800c7be:	2302      	movs	r3, #2
 800c7c0:	e109      	b.n	800c9d6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c8:	d104      	bne.n	800c7d4 <f_write+0x11e>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	755a      	strb	r2, [r3, #21]
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e100      	b.n	800c9d6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d102      	bne.n	800c7e8 <f_write+0x132>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	7d1b      	ldrb	r3, [r3, #20]
 800c7ec:	b25b      	sxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	da18      	bge.n	800c824 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	7858      	ldrb	r0, [r3, #1]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6a1a      	ldr	r2, [r3, #32]
 800c800:	2301      	movs	r3, #1
 800c802:	f7fd f8af 	bl	8009964 <disk_write>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d004      	beq.n	800c816 <f_write+0x160>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2201      	movs	r2, #1
 800c810:	755a      	strb	r2, [r3, #21]
 800c812:	2301      	movs	r3, #1
 800c814:	e0df      	b.n	800c9d6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	7d1b      	ldrb	r3, [r3, #20]
 800c81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	4619      	mov	r1, r3
 800c82c:	4610      	mov	r0, r2
 800c82e:	f7fd fc25 	bl	800a07c <clust2sect>
 800c832:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d104      	bne.n	800c844 <f_write+0x18e>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2202      	movs	r2, #2
 800c83e:	755a      	strb	r2, [r3, #21]
 800c840:	2302      	movs	r3, #2
 800c842:	e0c8      	b.n	800c9d6 <f_write+0x320>
			sect += csect;
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	4413      	add	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	899b      	ldrh	r3, [r3, #12]
 800c850:	461a      	mov	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	fbb3 f3f2 	udiv	r3, r3, r2
 800c858:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d043      	beq.n	800c8e8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	4413      	add	r3, r2
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	8952      	ldrh	r2, [r2, #10]
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d905      	bls.n	800c87a <f_write+0x1c4>
					cc = fs->csize - csect;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	895b      	ldrh	r3, [r3, #10]
 800c872:	461a      	mov	r2, r3
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	7858      	ldrb	r0, [r3, #1]
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	69f9      	ldr	r1, [r7, #28]
 800c884:	f7fd f86e 	bl	8009964 <disk_write>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <f_write+0x1e2>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2201      	movs	r2, #1
 800c892:	755a      	strb	r2, [r3, #21]
 800c894:	2301      	movs	r3, #1
 800c896:	e09e      	b.n	800c9d6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1a      	ldr	r2, [r3, #32]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	6a3a      	ldr	r2, [r7, #32]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d918      	bls.n	800c8d8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6a1a      	ldr	r2, [r3, #32]
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	8992      	ldrh	r2, [r2, #12]
 800c8b8:	fb02 f303 	mul.w	r3, r2, r3
 800c8bc:	69fa      	ldr	r2, [r7, #28]
 800c8be:	18d1      	adds	r1, r2, r3
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	899b      	ldrh	r3, [r3, #12]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f7fd f90d 	bl	8009ae4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	7d1b      	ldrb	r3, [r3, #20]
 800c8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	899b      	ldrh	r3, [r3, #12]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6a3b      	ldr	r3, [r7, #32]
 800c8e0:	fb02 f303 	mul.w	r3, r2, r3
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8e6:	e04b      	b.n	800c980 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d016      	beq.n	800c920 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	699a      	ldr	r2, [r3, #24]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d210      	bcs.n	800c920 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	7858      	ldrb	r0, [r3, #1]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c908:	2301      	movs	r3, #1
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	f7fd f80a 	bl	8009924 <disk_read>
 800c910:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c912:	2b00      	cmp	r3, #0
 800c914:	d004      	beq.n	800c920 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2201      	movs	r2, #1
 800c91a:	755a      	strb	r2, [r3, #21]
 800c91c:	2301      	movs	r3, #1
 800c91e:	e05a      	b.n	800c9d6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	899b      	ldrh	r3, [r3, #12]
 800c92a:	4618      	mov	r0, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	699b      	ldr	r3, [r3, #24]
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	8992      	ldrh	r2, [r2, #12]
 800c934:	fbb3 f1f2 	udiv	r1, r3, r2
 800c938:	fb02 f201 	mul.w	r2, r2, r1
 800c93c:	1a9b      	subs	r3, r3, r2
 800c93e:	1ac3      	subs	r3, r0, r3
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	429a      	cmp	r2, r3
 800c948:	d901      	bls.n	800c94e <f_write+0x298>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	8992      	ldrh	r2, [r2, #12]
 800c95c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c960:	fb02 f200 	mul.w	r2, r2, r0
 800c964:	1a9b      	subs	r3, r3, r2
 800c966:	440b      	add	r3, r1
 800c968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96a:	69f9      	ldr	r1, [r7, #28]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fd f8b9 	bl	8009ae4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	7d1b      	ldrb	r3, [r3, #20]
 800c976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c980:	69fa      	ldr	r2, [r7, #28]
 800c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c984:	4413      	add	r3, r2
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	699a      	ldr	r2, [r3, #24]
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	441a      	add	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	619a      	str	r2, [r3, #24]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	bf38      	it	cc
 800c9a0:	461a      	movcc	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	60da      	str	r2, [r3, #12]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	441a      	add	r2, r3
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f47f aeb5 	bne.w	800c72c <f_write+0x76>
 800c9c2:	e000      	b.n	800c9c6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3730      	adds	r7, #48	; 0x30
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b086      	sub	sp, #24
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f107 0208 	add.w	r2, r7, #8
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff faba 	bl	800bf68 <validate>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d168      	bne.n	800cad0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	7d1b      	ldrb	r3, [r3, #20]
 800ca02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d062      	beq.n	800cad0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7d1b      	ldrb	r3, [r3, #20]
 800ca0e:	b25b      	sxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	da15      	bge.n	800ca40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	7858      	ldrb	r0, [r3, #1]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a1a      	ldr	r2, [r3, #32]
 800ca22:	2301      	movs	r3, #1
 800ca24:	f7fc ff9e 	bl	8009964 <disk_write>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <f_sync+0x54>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e04f      	b.n	800cad2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7d1b      	ldrb	r3, [r3, #20]
 800ca36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca40:	f7fc fce0 	bl	8009404 <get_fattime>
 800ca44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4610      	mov	r0, r2
 800ca50:	f7fd fa76 	bl	8009f40 <move_window>
 800ca54:	4603      	mov	r3, r0
 800ca56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d138      	bne.n	800cad0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	330b      	adds	r3, #11
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	330b      	adds	r3, #11
 800ca6e:	f042 0220 	orr.w	r2, r2, #32
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	68f9      	ldr	r1, [r7, #12]
 800ca82:	f7fd fffb 	bl	800aa7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f103 021c 	add.w	r2, r3, #28
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	4619      	mov	r1, r3
 800ca92:	4610      	mov	r0, r2
 800ca94:	f7fc fffa 	bl	8009a8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	3316      	adds	r3, #22
 800ca9c:	6939      	ldr	r1, [r7, #16]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fc fff4 	bl	8009a8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3312      	adds	r3, #18
 800caa8:	2100      	movs	r1, #0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fc ffd3 	bl	8009a56 <st_word>
					fs->wflag = 1;
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2201      	movs	r2, #1
 800cab4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fd fa6f 	bl	8009f9c <sync_fs>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7d1b      	ldrb	r3, [r3, #20]
 800cac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff ff7b 	bl	800c9de <f_sync>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800caec:	7bfb      	ldrb	r3, [r7, #15]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d118      	bne.n	800cb24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f107 0208 	add.w	r2, r7, #8
 800caf8:	4611      	mov	r1, r2
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7ff fa34 	bl	800bf68 <validate>
 800cb00:	4603      	mov	r3, r0
 800cb02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10c      	bne.n	800cb24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fd f972 	bl	8009df8 <dec_lock>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d102      	bne.n	800cb24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cb2e:	b590      	push	{r4, r7, lr}
 800cb30:	b093      	sub	sp, #76	; 0x4c
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cb36:	f107 010c 	add.w	r1, r7, #12
 800cb3a:	1d3b      	adds	r3, r7, #4
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fe ff86 	bl	800ba50 <find_volume>
 800cb44:	4603      	mov	r3, r0
 800cb46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cb4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d131      	bne.n	800cbb6 <f_chdir+0x88>
		dj.obj.fs = fs;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	f107 0310 	add.w	r3, r7, #16
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fe46 	bl	800b7f0 <follow_path>
 800cb64:	4603      	mov	r3, r0
 800cb66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800cb6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11a      	bne.n	800cba8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800cb72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb76:	b25b      	sxtb	r3, r3
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	da03      	bge.n	800cb84 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	61da      	str	r2, [r3, #28]
 800cb82:	e011      	b.n	800cba8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800cb84:	7dbb      	ldrb	r3, [r7, #22]
 800cb86:	f003 0310 	and.w	r3, r3, #16
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d009      	beq.n	800cba2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb92:	68fc      	ldr	r4, [r7, #12]
 800cb94:	4611      	mov	r1, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fd ff51 	bl	800aa3e <ld_clust>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	61e3      	str	r3, [r4, #28]
 800cba0:	e002      	b.n	800cba8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800cba2:	2305      	movs	r3, #5
 800cba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cba8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	d102      	bne.n	800cbb6 <f_chdir+0x88>
 800cbb0:	2305      	movs	r3, #5
 800cbb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800cbb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	374c      	adds	r7, #76	; 0x4c
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd90      	pop	{r4, r7, pc}

0800cbc2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b090      	sub	sp, #64	; 0x40
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f107 0208 	add.w	r2, r7, #8
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7ff f9c7 	bl	800bf68 <validate>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cbe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d103      	bne.n	800cbf0 <f_lseek+0x2e>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7d5b      	ldrb	r3, [r3, #21]
 800cbec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cbf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <f_lseek+0x3c>
 800cbf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbfc:	e201      	b.n	800d002 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f000 80d9 	beq.w	800cdba <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc0e:	d15a      	bne.n	800ccc6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	1d1a      	adds	r2, r3, #4
 800cc1a:	627a      	str	r2, [r7, #36]	; 0x24
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	617b      	str	r3, [r7, #20]
 800cc20:	2302      	movs	r3, #2
 800cc22:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d03a      	beq.n	800cca6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	613b      	str	r3, [r7, #16]
 800cc34:	2300      	movs	r3, #0
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	3302      	adds	r3, #2
 800cc3c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	3301      	adds	r3, #1
 800cc46:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fd fa34 	bl	800a0ba <get_fat>
 800cc52:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d804      	bhi.n	800cc64 <f_lseek+0xa2>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	755a      	strb	r2, [r3, #21]
 800cc60:	2302      	movs	r3, #2
 800cc62:	e1ce      	b.n	800d002 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6a:	d104      	bne.n	800cc76 <f_lseek+0xb4>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	755a      	strb	r2, [r3, #21]
 800cc72:	2301      	movs	r3, #1
 800cc74:	e1c5      	b.n	800d002 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d0de      	beq.n	800cc3e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cc80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d809      	bhi.n	800cc9c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	1d1a      	adds	r2, r3, #4
 800cc8c:	627a      	str	r2, [r7, #36]	; 0x24
 800cc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc94:	1d1a      	adds	r2, r3, #4
 800cc96:	627a      	str	r2, [r7, #36]	; 0x24
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	6a1b      	ldr	r3, [r3, #32]
 800cca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d3c4      	bcc.n	800cc30 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ccae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d803      	bhi.n	800ccbe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	2200      	movs	r2, #0
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	e19f      	b.n	800cffe <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ccbe:	2311      	movs	r3, #17
 800ccc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ccc4:	e19b      	b.n	800cffe <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d902      	bls.n	800ccd6 <f_lseek+0x114>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 818d 	beq.w	800cffe <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7fd fcc9 	bl	800a682 <clmt_clust>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	69db      	ldr	r3, [r3, #28]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	f7fd f9bc 	bl	800a07c <clust2sect>
 800cd04:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d104      	bne.n	800cd16 <f_lseek+0x154>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	755a      	strb	r2, [r3, #21]
 800cd12:	2302      	movs	r3, #2
 800cd14:	e175      	b.n	800d002 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	8992      	ldrh	r2, [r2, #12]
 800cd1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	8952      	ldrh	r2, [r2, #10]
 800cd26:	3a01      	subs	r2, #1
 800cd28:	4013      	ands	r3, r2
 800cd2a:	69ba      	ldr	r2, [r7, #24]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	8992      	ldrh	r2, [r2, #12]
 800cd38:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd3c:	fb02 f201 	mul.w	r2, r2, r1
 800cd40:	1a9b      	subs	r3, r3, r2
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 815b 	beq.w	800cffe <f_lseek+0x43c>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	f000 8155 	beq.w	800cffe <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7d1b      	ldrb	r3, [r3, #20]
 800cd58:	b25b      	sxtb	r3, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	da18      	bge.n	800cd90 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	7858      	ldrb	r0, [r3, #1]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a1a      	ldr	r2, [r3, #32]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	f7fc fdf9 	bl	8009964 <disk_write>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d004      	beq.n	800cd82 <f_lseek+0x1c0>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	755a      	strb	r2, [r3, #21]
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e13f      	b.n	800d002 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	7d1b      	ldrb	r3, [r3, #20]
 800cd86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	7858      	ldrb	r0, [r3, #1]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	f7fc fdc1 	bl	8009924 <disk_read>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d004      	beq.n	800cdb2 <f_lseek+0x1f0>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	755a      	strb	r2, [r3, #21]
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e127      	b.n	800d002 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	621a      	str	r2, [r3, #32]
 800cdb8:	e121      	b.n	800cffe <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d908      	bls.n	800cdd6 <f_lseek+0x214>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	7d1b      	ldrb	r3, [r3, #20]
 800cdc8:	f003 0302 	and.w	r3, r3, #2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d102      	bne.n	800cdd6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	637b      	str	r3, [r7, #52]	; 0x34
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cde4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 80b5 	beq.w	800cf58 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	895b      	ldrh	r3, [r3, #10]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	899b      	ldrh	r3, [r3, #12]
 800cdf8:	fb03 f302 	mul.w	r3, r3, r2
 800cdfc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cdfe:	6a3b      	ldr	r3, [r7, #32]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d01b      	beq.n	800ce3c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	1e5a      	subs	r2, r3, #1
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	1e59      	subs	r1, r3, #1
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d30f      	bcc.n	800ce3c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	1e5a      	subs	r2, r3, #1
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	425b      	negs	r3, r3
 800ce24:	401a      	ands	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	69db      	ldr	r3, [r3, #28]
 800ce38:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce3a:	e022      	b.n	800ce82 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d119      	bne.n	800ce7c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fd fb80 	bl	800a552 <create_chain>
 800ce52:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d104      	bne.n	800ce64 <f_lseek+0x2a2>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	755a      	strb	r2, [r3, #21]
 800ce60:	2302      	movs	r3, #2
 800ce62:	e0ce      	b.n	800d002 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6a:	d104      	bne.n	800ce76 <f_lseek+0x2b4>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	755a      	strb	r2, [r3, #21]
 800ce72:	2301      	movs	r3, #1
 800ce74:	e0c5      	b.n	800d002 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce7a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce80:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ce82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d067      	beq.n	800cf58 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ce88:	e03a      	b.n	800cf00 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	603b      	str	r3, [r7, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	699a      	ldr	r2, [r3, #24]
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	441a      	add	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7d1b      	ldrb	r3, [r3, #20]
 800cea2:	f003 0302 	and.w	r3, r3, #2
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00b      	beq.n	800cec2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fd fb4f 	bl	800a552 <create_chain>
 800ceb4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d108      	bne.n	800cece <f_lseek+0x30c>
							ofs = 0; break;
 800cebc:	2300      	movs	r3, #0
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	e022      	b.n	800cf08 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd f8f7 	bl	800a0ba <get_fat>
 800cecc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced4:	d104      	bne.n	800cee0 <f_lseek+0x31e>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	755a      	strb	r2, [r3, #21]
 800cedc:	2301      	movs	r3, #1
 800cede:	e090      	b.n	800d002 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d904      	bls.n	800cef0 <f_lseek+0x32e>
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d304      	bcc.n	800cefa <f_lseek+0x338>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2202      	movs	r2, #2
 800cef4:	755a      	strb	r2, [r3, #21]
 800cef6:	2302      	movs	r3, #2
 800cef8:	e083      	b.n	800d002 <f_lseek+0x440>
					fp->clust = clst;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cefe:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d8c0      	bhi.n	800ce8a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	699a      	ldr	r2, [r3, #24]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	441a      	add	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	899b      	ldrh	r3, [r3, #12]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf20:	fb02 f201 	mul.w	r2, r2, r1
 800cf24:	1a9b      	subs	r3, r3, r2
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d016      	beq.n	800cf58 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fd f8a4 	bl	800a07c <clust2sect>
 800cf34:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d104      	bne.n	800cf46 <f_lseek+0x384>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2202      	movs	r2, #2
 800cf40:	755a      	strb	r2, [r3, #21]
 800cf42:	2302      	movs	r3, #2
 800cf44:	e05d      	b.n	800d002 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	899b      	ldrh	r3, [r3, #12]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf54:	4413      	add	r3, r2
 800cf56:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d90a      	bls.n	800cf7a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	699a      	ldr	r2, [r3, #24]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
 800cf70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	8992      	ldrh	r2, [r2, #12]
 800cf82:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf86:	fb02 f201 	mul.w	r2, r2, r1
 800cf8a:	1a9b      	subs	r3, r3, r2
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d036      	beq.n	800cffe <f_lseek+0x43c>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a1b      	ldr	r3, [r3, #32]
 800cf94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d031      	beq.n	800cffe <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7d1b      	ldrb	r3, [r3, #20]
 800cf9e:	b25b      	sxtb	r3, r3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da18      	bge.n	800cfd6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	7858      	ldrb	r0, [r3, #1]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a1a      	ldr	r2, [r3, #32]
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f7fc fcd6 	bl	8009964 <disk_write>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d004      	beq.n	800cfc8 <f_lseek+0x406>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	755a      	strb	r2, [r3, #21]
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e01c      	b.n	800d002 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7d1b      	ldrb	r3, [r3, #20]
 800cfcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	7858      	ldrb	r0, [r3, #1]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe4:	f7fc fc9e 	bl	8009924 <disk_read>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d004      	beq.n	800cff8 <f_lseek+0x436>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	755a      	strb	r2, [r3, #21]
 800cff4:	2301      	movs	r3, #1
 800cff6:	e004      	b.n	800d002 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cffc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cffe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d002:	4618      	mov	r0, r3
 800d004:	3740      	adds	r7, #64	; 0x40
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b0a0      	sub	sp, #128	; 0x80
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d016:	f107 010c 	add.w	r1, r7, #12
 800d01a:	1d3b      	adds	r3, r7, #4
 800d01c:	2202      	movs	r2, #2
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe fd16 	bl	800ba50 <find_volume>
 800d024:	4603      	mov	r3, r0
 800d026:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800d02e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d032:	2b00      	cmp	r3, #0
 800d034:	f040 80a4 	bne.w	800d180 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d03e:	4611      	mov	r1, r2
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fbd5 	bl	800b7f0 <follow_path>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800d04c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d050:	2b00      	cmp	r3, #0
 800d052:	d108      	bne.n	800d066 <f_unlink+0x5c>
 800d054:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d058:	f003 0320 	and.w	r3, r3, #32
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800d060:	2306      	movs	r3, #6
 800d062:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800d066:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d108      	bne.n	800d080 <f_unlink+0x76>
 800d06e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d072:	2102      	movs	r1, #2
 800d074:	4618      	mov	r0, r3
 800d076:	f7fc fdb3 	bl	8009be0 <chk_lock>
 800d07a:	4603      	mov	r3, r0
 800d07c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800d080:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d084:	2b00      	cmp	r3, #0
 800d086:	d17b      	bne.n	800d180 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d088:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d08c:	b25b      	sxtb	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	da03      	bge.n	800d09a <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800d092:	2306      	movs	r3, #6
 800d094:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d098:	e008      	b.n	800d0ac <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800d09a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800d0a6:	2307      	movs	r3, #7
 800d0a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800d0ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d13d      	bne.n	800d130 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fd fcbf 	bl	800aa3e <ld_clust>
 800d0c0:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800d0c2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d0c6:	f003 0310 	and.w	r3, r3, #16
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d030      	beq.n	800d130 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d103      	bne.n	800d0e0 <f_unlink+0xd6>
						res = FR_DENIED;
 800d0d8:	2307      	movs	r3, #7
 800d0da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d0de:	e027      	b.n	800d130 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800d0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0e6:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800d0e8:	f107 0310 	add.w	r3, r7, #16
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fd faff 	bl	800a6f2 <dir_sdi>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800d0fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d116      	bne.n	800d130 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800d102:	f107 0310 	add.w	r3, r7, #16
 800d106:	2100      	movs	r1, #0
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fd fec3 	bl	800ae94 <dir_read>
 800d10e:	4603      	mov	r3, r0
 800d110:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800d114:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d102      	bne.n	800d122 <f_unlink+0x118>
 800d11c:	2307      	movs	r3, #7
 800d11e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d122:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d126:	2b04      	cmp	r3, #4
 800d128:	d102      	bne.n	800d130 <f_unlink+0x126>
 800d12a:	2300      	movs	r3, #0
 800d12c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800d130:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d134:	2b00      	cmp	r3, #0
 800d136:	d123      	bne.n	800d180 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d138:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe f909 	bl	800b354 <dir_remove>
 800d142:	4603      	mov	r3, r0
 800d144:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d148:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10c      	bne.n	800d16a <f_unlink+0x160>
 800d150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d152:	2b00      	cmp	r3, #0
 800d154:	d009      	beq.n	800d16a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d156:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d15a:	2200      	movs	r2, #0
 800d15c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd f992 	bl	800a488 <remove_chain>
 800d164:	4603      	mov	r3, r0
 800d166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d16a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d106      	bne.n	800d180 <f_unlink+0x176>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	4618      	mov	r0, r3
 800d176:	f7fc ff11 	bl	8009f9c <sync_fs>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d180:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d184:	4618      	mov	r0, r3
 800d186:	3780      	adds	r7, #128	; 0x80
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b098      	sub	sp, #96	; 0x60
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d194:	f107 010c 	add.w	r1, r7, #12
 800d198:	1d3b      	adds	r3, r7, #4
 800d19a:	2202      	movs	r2, #2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fc57 	bl	800ba50 <find_volume>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800d1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f040 80ff 	bne.w	800d3b4 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	f107 0310 	add.w	r3, r7, #16
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fb16 	bl	800b7f0 <follow_path>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d1ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d102      	bne.n	800d1d8 <f_mkdir+0x4c>
 800d1d2:	2308      	movs	r3, #8
 800d1d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800d1d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1dc:	2b04      	cmp	r3, #4
 800d1de:	d108      	bne.n	800d1f2 <f_mkdir+0x66>
 800d1e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1e4:	f003 0320 	and.w	r3, r3, #32
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800d1ec:	2306      	movs	r3, #6
 800d1ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d1f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1f6:	2b04      	cmp	r3, #4
 800d1f8:	f040 80dc 	bne.w	800d3b4 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d1fc:	f107 0310 	add.w	r3, r7, #16
 800d200:	2100      	movs	r1, #0
 800d202:	4618      	mov	r0, r3
 800d204:	f7fd f9a5 	bl	800a552 <create_chain>
 800d208:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	895b      	ldrh	r3, [r3, #10]
 800d20e:	461a      	mov	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	899b      	ldrh	r3, [r3, #12]
 800d214:	fb03 f302 	mul.w	r3, r3, r2
 800d218:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d222:	2b00      	cmp	r3, #0
 800d224:	d102      	bne.n	800d22c <f_mkdir+0xa0>
 800d226:	2307      	movs	r3, #7
 800d228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800d22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d102      	bne.n	800d238 <f_mkdir+0xac>
 800d232:	2302      	movs	r3, #2
 800d234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d23e:	d102      	bne.n	800d246 <f_mkdir+0xba>
 800d240:	2301      	movs	r3, #1
 800d242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d106      	bne.n	800d25c <f_mkdir+0xd0>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	4618      	mov	r0, r3
 800d252:	f7fc fe31 	bl	8009eb8 <sync_window>
 800d256:	4603      	mov	r3, r0
 800d258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800d25c:	f7fc f8d2 	bl	8009404 <get_fattime>
 800d260:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d266:	2b00      	cmp	r3, #0
 800d268:	d16c      	bne.n	800d344 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fc ff04 	bl	800a07c <clust2sect>
 800d274:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	333c      	adds	r3, #60	; 0x3c
 800d27a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	899b      	ldrh	r3, [r3, #12]
 800d280:	461a      	mov	r2, r3
 800d282:	2100      	movs	r1, #0
 800d284:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d286:	f7fc fc4e 	bl	8009b26 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d28a:	220b      	movs	r2, #11
 800d28c:	2120      	movs	r1, #32
 800d28e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d290:	f7fc fc49 	bl	8009b26 <mem_set>
					dir[DIR_Name] = '.';
 800d294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d296:	222e      	movs	r2, #46	; 0x2e
 800d298:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29c:	330b      	adds	r3, #11
 800d29e:	2210      	movs	r2, #16
 800d2a0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a4:	3316      	adds	r3, #22
 800d2a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fc fbef 	bl	8009a8c <st_dword>
					st_clust(fs, dir, dcl);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fd fbe1 	bl	800aa7c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2bc:	3320      	adds	r3, #32
 800d2be:	2220      	movs	r2, #32
 800d2c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fc fc0e 	bl	8009ae4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2ca:	3321      	adds	r3, #33	; 0x21
 800d2cc:	222e      	movs	r2, #46	; 0x2e
 800d2ce:	701a      	strb	r2, [r3, #0]
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d106      	bne.n	800d2ea <f_mkdir+0x15e>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d101      	bne.n	800d2ea <f_mkdir+0x15e>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2ee:	3320      	adds	r3, #32
 800d2f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	f7fd fbc2 	bl	800aa7c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	895b      	ldrh	r3, [r3, #10]
 800d2fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2fe:	e01c      	b.n	800d33a <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800d300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	657a      	str	r2, [r7, #84]	; 0x54
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2201      	movs	r2, #1
 800d30e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4618      	mov	r0, r3
 800d314:	f7fc fdd0 	bl	8009eb8 <sync_window>
 800d318:	4603      	mov	r3, r0
 800d31a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800d31e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10d      	bne.n	800d342 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	899b      	ldrh	r3, [r3, #12]
 800d32a:	461a      	mov	r2, r3
 800d32c:	2100      	movs	r1, #0
 800d32e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d330:	f7fc fbf9 	bl	8009b26 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d336:	3b01      	subs	r3, #1
 800d338:	65bb      	str	r3, [r7, #88]	; 0x58
 800d33a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1df      	bne.n	800d300 <f_mkdir+0x174>
 800d340:	e000      	b.n	800d344 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800d342:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d107      	bne.n	800d35c <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d34c:	f107 0310 	add.w	r3, r7, #16
 800d350:	4618      	mov	r0, r3
 800d352:	f7fd ff07 	bl	800b164 <dir_register>
 800d356:	4603      	mov	r3, r0
 800d358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800d35c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d360:	2b00      	cmp	r3, #0
 800d362:	d120      	bne.n	800d3a6 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d36a:	3316      	adds	r3, #22
 800d36c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fc fb8c 	bl	8009a8c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fd fb7e 	bl	800aa7c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d382:	330b      	adds	r3, #11
 800d384:	2210      	movs	r2, #16
 800d386:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2201      	movs	r2, #1
 800d38c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d38e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10e      	bne.n	800d3b4 <f_mkdir+0x228>
					res = sync_fs(fs);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fc fdff 	bl	8009f9c <sync_fs>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3a4:	e006      	b.n	800d3b4 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d3a6:	f107 0310 	add.w	r3, r7, #16
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fd f86a 	bl	800a488 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d3b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3760      	adds	r7, #96	; 0x60
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d3d4:	e01b      	b.n	800d40e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d3d6:	f107 0310 	add.w	r3, r7, #16
 800d3da:	f107 0114 	add.w	r1, r7, #20
 800d3de:	2201      	movs	r2, #1
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f7ff f809 	bl	800c3f8 <f_read>
		if (rc != 1) break;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d116      	bne.n	800d41a <f_gets+0x5a>
		c = s[0];
 800d3ec:	7d3b      	ldrb	r3, [r7, #20]
 800d3ee:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	2b0d      	cmp	r3, #13
 800d3f4:	d100      	bne.n	800d3f8 <f_gets+0x38>
 800d3f6:	e00a      	b.n	800d40e <f_gets+0x4e>
		*p++ = c;
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	1c5a      	adds	r2, r3, #1
 800d3fc:	61ba      	str	r2, [r7, #24]
 800d3fe:	7dfa      	ldrb	r2, [r7, #23]
 800d400:	701a      	strb	r2, [r3, #0]
		n++;
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	3301      	adds	r3, #1
 800d406:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d408:	7dfb      	ldrb	r3, [r7, #23]
 800d40a:	2b0a      	cmp	r3, #10
 800d40c:	d007      	beq.n	800d41e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	3b01      	subs	r3, #1
 800d412:	69fa      	ldr	r2, [r7, #28]
 800d414:	429a      	cmp	r2, r3
 800d416:	dbde      	blt.n	800d3d6 <f_gets+0x16>
 800d418:	e002      	b.n	800d420 <f_gets+0x60>
		if (rc != 1) break;
 800d41a:	bf00      	nop
 800d41c:	e000      	b.n	800d420 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d41e:	bf00      	nop
	}
	*p = 0;
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	2200      	movs	r2, #0
 800d424:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <f_gets+0x70>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	e000      	b.n	800d432 <f_gets+0x72>
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3720      	adds	r7, #32
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4613      	mov	r3, r2
 800d448:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d44a:	2301      	movs	r3, #1
 800d44c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d452:	4b1f      	ldr	r3, [pc, #124]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d454:	7a5b      	ldrb	r3, [r3, #9]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d131      	bne.n	800d4c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d45c:	4b1c      	ldr	r3, [pc, #112]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d45e:	7a5b      	ldrb	r3, [r3, #9]
 800d460:	b2db      	uxtb	r3, r3
 800d462:	461a      	mov	r2, r3
 800d464:	4b1a      	ldr	r3, [pc, #104]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d466:	2100      	movs	r1, #0
 800d468:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d46a:	4b19      	ldr	r3, [pc, #100]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d46c:	7a5b      	ldrb	r3, [r3, #9]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	4a17      	ldr	r2, [pc, #92]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d47a:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d47c:	7a5b      	ldrb	r3, [r3, #9]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	461a      	mov	r2, r3
 800d482:	4b13      	ldr	r3, [pc, #76]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d484:	4413      	add	r3, r2
 800d486:	79fa      	ldrb	r2, [r7, #7]
 800d488:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d48a:	4b11      	ldr	r3, [pc, #68]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d48c:	7a5b      	ldrb	r3, [r3, #9]
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	b2d1      	uxtb	r1, r2
 800d494:	4a0e      	ldr	r2, [pc, #56]	; (800d4d0 <FATFS_LinkDriverEx+0x94>)
 800d496:	7251      	strb	r1, [r2, #9]
 800d498:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d49a:	7dbb      	ldrb	r3, [r7, #22]
 800d49c:	3330      	adds	r3, #48	; 0x30
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	223a      	movs	r2, #58	; 0x3a
 800d4aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	3302      	adds	r3, #2
 800d4b0:	222f      	movs	r2, #47	; 0x2f
 800d4b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	3303      	adds	r3, #3
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	371c      	adds	r7, #28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	20000464 	.word	0x20000464

0800d4d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d4de:	2200      	movs	r2, #0
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff ffaa 	bl	800d43c <FATFS_LinkDriverEx>
 800d4e8:	4603      	mov	r3, r0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
	...

0800d4f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d500:	88fb      	ldrh	r3, [r7, #6]
 800d502:	2b7f      	cmp	r3, #127	; 0x7f
 800d504:	d802      	bhi.n	800d50c <ff_convert+0x18>
		c = chr;
 800d506:	88fb      	ldrh	r3, [r7, #6]
 800d508:	81fb      	strh	r3, [r7, #14]
 800d50a:	e025      	b.n	800d558 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00b      	beq.n	800d52a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d512:	88fb      	ldrh	r3, [r7, #6]
 800d514:	2bff      	cmp	r3, #255	; 0xff
 800d516:	d805      	bhi.n	800d524 <ff_convert+0x30>
 800d518:	88fb      	ldrh	r3, [r7, #6]
 800d51a:	3b80      	subs	r3, #128	; 0x80
 800d51c:	4a12      	ldr	r2, [pc, #72]	; (800d568 <ff_convert+0x74>)
 800d51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d522:	e000      	b.n	800d526 <ff_convert+0x32>
 800d524:	2300      	movs	r3, #0
 800d526:	81fb      	strh	r3, [r7, #14]
 800d528:	e016      	b.n	800d558 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d52a:	2300      	movs	r3, #0
 800d52c:	81fb      	strh	r3, [r7, #14]
 800d52e:	e009      	b.n	800d544 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d530:	89fb      	ldrh	r3, [r7, #14]
 800d532:	4a0d      	ldr	r2, [pc, #52]	; (800d568 <ff_convert+0x74>)
 800d534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d538:	88fa      	ldrh	r2, [r7, #6]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d006      	beq.n	800d54c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d53e:	89fb      	ldrh	r3, [r7, #14]
 800d540:	3301      	adds	r3, #1
 800d542:	81fb      	strh	r3, [r7, #14]
 800d544:	89fb      	ldrh	r3, [r7, #14]
 800d546:	2b7f      	cmp	r3, #127	; 0x7f
 800d548:	d9f2      	bls.n	800d530 <ff_convert+0x3c>
 800d54a:	e000      	b.n	800d54e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d54c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d54e:	89fb      	ldrh	r3, [r7, #14]
 800d550:	3380      	adds	r3, #128	; 0x80
 800d552:	b29b      	uxth	r3, r3
 800d554:	b2db      	uxtb	r3, r3
 800d556:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d558:	89fb      	ldrh	r3, [r7, #14]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop
 800d568:	080126c0 	.word	0x080126c0

0800d56c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b087      	sub	sp, #28
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d576:	88fb      	ldrh	r3, [r7, #6]
 800d578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d57c:	d201      	bcs.n	800d582 <ff_wtoupper+0x16>
 800d57e:	4b3e      	ldr	r3, [pc, #248]	; (800d678 <ff_wtoupper+0x10c>)
 800d580:	e000      	b.n	800d584 <ff_wtoupper+0x18>
 800d582:	4b3e      	ldr	r3, [pc, #248]	; (800d67c <ff_wtoupper+0x110>)
 800d584:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	1c9a      	adds	r2, r3, #2
 800d58a:	617a      	str	r2, [r7, #20]
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d590:	8a7b      	ldrh	r3, [r7, #18]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d068      	beq.n	800d668 <ff_wtoupper+0xfc>
 800d596:	88fa      	ldrh	r2, [r7, #6]
 800d598:	8a7b      	ldrh	r3, [r7, #18]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d364      	bcc.n	800d668 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	1c9a      	adds	r2, r3, #2
 800d5a2:	617a      	str	r2, [r7, #20]
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	823b      	strh	r3, [r7, #16]
 800d5a8:	8a3b      	ldrh	r3, [r7, #16]
 800d5aa:	0a1b      	lsrs	r3, r3, #8
 800d5ac:	81fb      	strh	r3, [r7, #14]
 800d5ae:	8a3b      	ldrh	r3, [r7, #16]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d5b4:	88fa      	ldrh	r2, [r7, #6]
 800d5b6:	8a79      	ldrh	r1, [r7, #18]
 800d5b8:	8a3b      	ldrh	r3, [r7, #16]
 800d5ba:	440b      	add	r3, r1
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	da49      	bge.n	800d654 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d5c0:	89fb      	ldrh	r3, [r7, #14]
 800d5c2:	2b08      	cmp	r3, #8
 800d5c4:	d84f      	bhi.n	800d666 <ff_wtoupper+0xfa>
 800d5c6:	a201      	add	r2, pc, #4	; (adr r2, 800d5cc <ff_wtoupper+0x60>)
 800d5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5cc:	0800d5f1 	.word	0x0800d5f1
 800d5d0:	0800d603 	.word	0x0800d603
 800d5d4:	0800d619 	.word	0x0800d619
 800d5d8:	0800d621 	.word	0x0800d621
 800d5dc:	0800d629 	.word	0x0800d629
 800d5e0:	0800d631 	.word	0x0800d631
 800d5e4:	0800d639 	.word	0x0800d639
 800d5e8:	0800d641 	.word	0x0800d641
 800d5ec:	0800d649 	.word	0x0800d649
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d5f0:	88fa      	ldrh	r2, [r7, #6]
 800d5f2:	8a7b      	ldrh	r3, [r7, #18]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	881b      	ldrh	r3, [r3, #0]
 800d5fe:	80fb      	strh	r3, [r7, #6]
 800d600:	e027      	b.n	800d652 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d602:	88fa      	ldrh	r2, [r7, #6]
 800d604:	8a7b      	ldrh	r3, [r7, #18]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	b29b      	uxth	r3, r3
 800d610:	88fa      	ldrh	r2, [r7, #6]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	80fb      	strh	r3, [r7, #6]
 800d616:	e01c      	b.n	800d652 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d618:	88fb      	ldrh	r3, [r7, #6]
 800d61a:	3b10      	subs	r3, #16
 800d61c:	80fb      	strh	r3, [r7, #6]
 800d61e:	e018      	b.n	800d652 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	3b20      	subs	r3, #32
 800d624:	80fb      	strh	r3, [r7, #6]
 800d626:	e014      	b.n	800d652 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	3b30      	subs	r3, #48	; 0x30
 800d62c:	80fb      	strh	r3, [r7, #6]
 800d62e:	e010      	b.n	800d652 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	3b1a      	subs	r3, #26
 800d634:	80fb      	strh	r3, [r7, #6]
 800d636:	e00c      	b.n	800d652 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d638:	88fb      	ldrh	r3, [r7, #6]
 800d63a:	3308      	adds	r3, #8
 800d63c:	80fb      	strh	r3, [r7, #6]
 800d63e:	e008      	b.n	800d652 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	3b50      	subs	r3, #80	; 0x50
 800d644:	80fb      	strh	r3, [r7, #6]
 800d646:	e004      	b.n	800d652 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d648:	88fb      	ldrh	r3, [r7, #6]
 800d64a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d64e:	80fb      	strh	r3, [r7, #6]
 800d650:	bf00      	nop
			}
			break;
 800d652:	e008      	b.n	800d666 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d654:	89fb      	ldrh	r3, [r7, #14]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d195      	bne.n	800d586 <ff_wtoupper+0x1a>
 800d65a:	8a3b      	ldrh	r3, [r7, #16]
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	4413      	add	r3, r2
 800d662:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d664:	e78f      	b.n	800d586 <ff_wtoupper+0x1a>
			break;
 800d666:	bf00      	nop
	}

	return chr;
 800d668:	88fb      	ldrh	r3, [r7, #6]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	080127c0 	.word	0x080127c0
 800d67c:	080129b4 	.word	0x080129b4

0800d680 <__errno>:
 800d680:	4b01      	ldr	r3, [pc, #4]	; (800d688 <__errno+0x8>)
 800d682:	6818      	ldr	r0, [r3, #0]
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	2000000c 	.word	0x2000000c

0800d68c <__libc_init_array>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	4e0d      	ldr	r6, [pc, #52]	; (800d6c4 <__libc_init_array+0x38>)
 800d690:	4c0d      	ldr	r4, [pc, #52]	; (800d6c8 <__libc_init_array+0x3c>)
 800d692:	1ba4      	subs	r4, r4, r6
 800d694:	10a4      	asrs	r4, r4, #2
 800d696:	2500      	movs	r5, #0
 800d698:	42a5      	cmp	r5, r4
 800d69a:	d109      	bne.n	800d6b0 <__libc_init_array+0x24>
 800d69c:	4e0b      	ldr	r6, [pc, #44]	; (800d6cc <__libc_init_array+0x40>)
 800d69e:	4c0c      	ldr	r4, [pc, #48]	; (800d6d0 <__libc_init_array+0x44>)
 800d6a0:	f004 feee 	bl	8012480 <_init>
 800d6a4:	1ba4      	subs	r4, r4, r6
 800d6a6:	10a4      	asrs	r4, r4, #2
 800d6a8:	2500      	movs	r5, #0
 800d6aa:	42a5      	cmp	r5, r4
 800d6ac:	d105      	bne.n	800d6ba <__libc_init_array+0x2e>
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}
 800d6b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d6b4:	4798      	blx	r3
 800d6b6:	3501      	adds	r5, #1
 800d6b8:	e7ee      	b.n	800d698 <__libc_init_array+0xc>
 800d6ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d6be:	4798      	blx	r3
 800d6c0:	3501      	adds	r5, #1
 800d6c2:	e7f2      	b.n	800d6aa <__libc_init_array+0x1e>
 800d6c4:	08012db4 	.word	0x08012db4
 800d6c8:	08012db4 	.word	0x08012db4
 800d6cc:	08012db4 	.word	0x08012db4
 800d6d0:	08012db8 	.word	0x08012db8

0800d6d4 <memset>:
 800d6d4:	4402      	add	r2, r0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d100      	bne.n	800d6de <memset+0xa>
 800d6dc:	4770      	bx	lr
 800d6de:	f803 1b01 	strb.w	r1, [r3], #1
 800d6e2:	e7f9      	b.n	800d6d8 <memset+0x4>

0800d6e4 <__cvt>:
 800d6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6e8:	ec55 4b10 	vmov	r4, r5, d0
 800d6ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d6ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d6f2:	2d00      	cmp	r5, #0
 800d6f4:	460e      	mov	r6, r1
 800d6f6:	4691      	mov	r9, r2
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	bfb8      	it	lt
 800d6fc:	4622      	movlt	r2, r4
 800d6fe:	462b      	mov	r3, r5
 800d700:	f027 0720 	bic.w	r7, r7, #32
 800d704:	bfbb      	ittet	lt
 800d706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d70a:	461d      	movlt	r5, r3
 800d70c:	2300      	movge	r3, #0
 800d70e:	232d      	movlt	r3, #45	; 0x2d
 800d710:	bfb8      	it	lt
 800d712:	4614      	movlt	r4, r2
 800d714:	2f46      	cmp	r7, #70	; 0x46
 800d716:	700b      	strb	r3, [r1, #0]
 800d718:	d004      	beq.n	800d724 <__cvt+0x40>
 800d71a:	2f45      	cmp	r7, #69	; 0x45
 800d71c:	d100      	bne.n	800d720 <__cvt+0x3c>
 800d71e:	3601      	adds	r6, #1
 800d720:	2102      	movs	r1, #2
 800d722:	e000      	b.n	800d726 <__cvt+0x42>
 800d724:	2103      	movs	r1, #3
 800d726:	ab03      	add	r3, sp, #12
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	ab02      	add	r3, sp, #8
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	4632      	mov	r2, r6
 800d730:	4653      	mov	r3, sl
 800d732:	ec45 4b10 	vmov	d0, r4, r5
 800d736:	f001 ff9f 	bl	800f678 <_dtoa_r>
 800d73a:	2f47      	cmp	r7, #71	; 0x47
 800d73c:	4680      	mov	r8, r0
 800d73e:	d102      	bne.n	800d746 <__cvt+0x62>
 800d740:	f019 0f01 	tst.w	r9, #1
 800d744:	d026      	beq.n	800d794 <__cvt+0xb0>
 800d746:	2f46      	cmp	r7, #70	; 0x46
 800d748:	eb08 0906 	add.w	r9, r8, r6
 800d74c:	d111      	bne.n	800d772 <__cvt+0x8e>
 800d74e:	f898 3000 	ldrb.w	r3, [r8]
 800d752:	2b30      	cmp	r3, #48	; 0x30
 800d754:	d10a      	bne.n	800d76c <__cvt+0x88>
 800d756:	2200      	movs	r2, #0
 800d758:	2300      	movs	r3, #0
 800d75a:	4620      	mov	r0, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	f7f3 f9cb 	bl	8000af8 <__aeabi_dcmpeq>
 800d762:	b918      	cbnz	r0, 800d76c <__cvt+0x88>
 800d764:	f1c6 0601 	rsb	r6, r6, #1
 800d768:	f8ca 6000 	str.w	r6, [sl]
 800d76c:	f8da 3000 	ldr.w	r3, [sl]
 800d770:	4499      	add	r9, r3
 800d772:	2200      	movs	r2, #0
 800d774:	2300      	movs	r3, #0
 800d776:	4620      	mov	r0, r4
 800d778:	4629      	mov	r1, r5
 800d77a:	f7f3 f9bd 	bl	8000af8 <__aeabi_dcmpeq>
 800d77e:	b938      	cbnz	r0, 800d790 <__cvt+0xac>
 800d780:	2230      	movs	r2, #48	; 0x30
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	454b      	cmp	r3, r9
 800d786:	d205      	bcs.n	800d794 <__cvt+0xb0>
 800d788:	1c59      	adds	r1, r3, #1
 800d78a:	9103      	str	r1, [sp, #12]
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e7f8      	b.n	800d782 <__cvt+0x9e>
 800d790:	f8cd 900c 	str.w	r9, [sp, #12]
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d798:	eba3 0308 	sub.w	r3, r3, r8
 800d79c:	4640      	mov	r0, r8
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	b004      	add	sp, #16
 800d7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d7a6 <__exponent>:
 800d7a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7a8:	2900      	cmp	r1, #0
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	bfba      	itte	lt
 800d7ae:	4249      	neglt	r1, r1
 800d7b0:	232d      	movlt	r3, #45	; 0x2d
 800d7b2:	232b      	movge	r3, #43	; 0x2b
 800d7b4:	2909      	cmp	r1, #9
 800d7b6:	f804 2b02 	strb.w	r2, [r4], #2
 800d7ba:	7043      	strb	r3, [r0, #1]
 800d7bc:	dd20      	ble.n	800d800 <__exponent+0x5a>
 800d7be:	f10d 0307 	add.w	r3, sp, #7
 800d7c2:	461f      	mov	r7, r3
 800d7c4:	260a      	movs	r6, #10
 800d7c6:	fb91 f5f6 	sdiv	r5, r1, r6
 800d7ca:	fb06 1115 	mls	r1, r6, r5, r1
 800d7ce:	3130      	adds	r1, #48	; 0x30
 800d7d0:	2d09      	cmp	r5, #9
 800d7d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d7d6:	f103 32ff 	add.w	r2, r3, #4294967295
 800d7da:	4629      	mov	r1, r5
 800d7dc:	dc09      	bgt.n	800d7f2 <__exponent+0x4c>
 800d7de:	3130      	adds	r1, #48	; 0x30
 800d7e0:	3b02      	subs	r3, #2
 800d7e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d7e6:	42bb      	cmp	r3, r7
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	d304      	bcc.n	800d7f6 <__exponent+0x50>
 800d7ec:	1a10      	subs	r0, r2, r0
 800d7ee:	b003      	add	sp, #12
 800d7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	e7e7      	b.n	800d7c6 <__exponent+0x20>
 800d7f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7fa:	f804 2b01 	strb.w	r2, [r4], #1
 800d7fe:	e7f2      	b.n	800d7e6 <__exponent+0x40>
 800d800:	2330      	movs	r3, #48	; 0x30
 800d802:	4419      	add	r1, r3
 800d804:	7083      	strb	r3, [r0, #2]
 800d806:	1d02      	adds	r2, r0, #4
 800d808:	70c1      	strb	r1, [r0, #3]
 800d80a:	e7ef      	b.n	800d7ec <__exponent+0x46>

0800d80c <_printf_float>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	b08d      	sub	sp, #52	; 0x34
 800d812:	460c      	mov	r4, r1
 800d814:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d818:	4616      	mov	r6, r2
 800d81a:	461f      	mov	r7, r3
 800d81c:	4605      	mov	r5, r0
 800d81e:	f003 f997 	bl	8010b50 <_localeconv_r>
 800d822:	6803      	ldr	r3, [r0, #0]
 800d824:	9304      	str	r3, [sp, #16]
 800d826:	4618      	mov	r0, r3
 800d828:	f7f2 fcea 	bl	8000200 <strlen>
 800d82c:	2300      	movs	r3, #0
 800d82e:	930a      	str	r3, [sp, #40]	; 0x28
 800d830:	f8d8 3000 	ldr.w	r3, [r8]
 800d834:	9005      	str	r0, [sp, #20]
 800d836:	3307      	adds	r3, #7
 800d838:	f023 0307 	bic.w	r3, r3, #7
 800d83c:	f103 0208 	add.w	r2, r3, #8
 800d840:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d844:	f8d4 b000 	ldr.w	fp, [r4]
 800d848:	f8c8 2000 	str.w	r2, [r8]
 800d84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d850:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d854:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d858:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d85c:	9307      	str	r3, [sp, #28]
 800d85e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d862:	f04f 32ff 	mov.w	r2, #4294967295
 800d866:	4ba7      	ldr	r3, [pc, #668]	; (800db04 <_printf_float+0x2f8>)
 800d868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d86c:	f7f3 f976 	bl	8000b5c <__aeabi_dcmpun>
 800d870:	bb70      	cbnz	r0, 800d8d0 <_printf_float+0xc4>
 800d872:	f04f 32ff 	mov.w	r2, #4294967295
 800d876:	4ba3      	ldr	r3, [pc, #652]	; (800db04 <_printf_float+0x2f8>)
 800d878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d87c:	f7f3 f950 	bl	8000b20 <__aeabi_dcmple>
 800d880:	bb30      	cbnz	r0, 800d8d0 <_printf_float+0xc4>
 800d882:	2200      	movs	r2, #0
 800d884:	2300      	movs	r3, #0
 800d886:	4640      	mov	r0, r8
 800d888:	4649      	mov	r1, r9
 800d88a:	f7f3 f93f 	bl	8000b0c <__aeabi_dcmplt>
 800d88e:	b110      	cbz	r0, 800d896 <_printf_float+0x8a>
 800d890:	232d      	movs	r3, #45	; 0x2d
 800d892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d896:	4a9c      	ldr	r2, [pc, #624]	; (800db08 <_printf_float+0x2fc>)
 800d898:	4b9c      	ldr	r3, [pc, #624]	; (800db0c <_printf_float+0x300>)
 800d89a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d89e:	bf8c      	ite	hi
 800d8a0:	4690      	movhi	r8, r2
 800d8a2:	4698      	movls	r8, r3
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	f02b 0204 	bic.w	r2, fp, #4
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	6022      	str	r2, [r4, #0]
 800d8ae:	f04f 0900 	mov.w	r9, #0
 800d8b2:	9700      	str	r7, [sp, #0]
 800d8b4:	4633      	mov	r3, r6
 800d8b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f000 f9e6 	bl	800dc8c <_printf_common>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	f040 808d 	bne.w	800d9e0 <_printf_float+0x1d4>
 800d8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ca:	b00d      	add	sp, #52	; 0x34
 800d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d0:	4642      	mov	r2, r8
 800d8d2:	464b      	mov	r3, r9
 800d8d4:	4640      	mov	r0, r8
 800d8d6:	4649      	mov	r1, r9
 800d8d8:	f7f3 f940 	bl	8000b5c <__aeabi_dcmpun>
 800d8dc:	b110      	cbz	r0, 800d8e4 <_printf_float+0xd8>
 800d8de:	4a8c      	ldr	r2, [pc, #560]	; (800db10 <_printf_float+0x304>)
 800d8e0:	4b8c      	ldr	r3, [pc, #560]	; (800db14 <_printf_float+0x308>)
 800d8e2:	e7da      	b.n	800d89a <_printf_float+0x8e>
 800d8e4:	6861      	ldr	r1, [r4, #4]
 800d8e6:	1c4b      	adds	r3, r1, #1
 800d8e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d8ec:	a80a      	add	r0, sp, #40	; 0x28
 800d8ee:	d13e      	bne.n	800d96e <_printf_float+0x162>
 800d8f0:	2306      	movs	r3, #6
 800d8f2:	6063      	str	r3, [r4, #4]
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d8fa:	ab09      	add	r3, sp, #36	; 0x24
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	ec49 8b10 	vmov	d0, r8, r9
 800d902:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d906:	6022      	str	r2, [r4, #0]
 800d908:	f8cd a004 	str.w	sl, [sp, #4]
 800d90c:	6861      	ldr	r1, [r4, #4]
 800d90e:	4628      	mov	r0, r5
 800d910:	f7ff fee8 	bl	800d6e4 <__cvt>
 800d914:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d918:	2b47      	cmp	r3, #71	; 0x47
 800d91a:	4680      	mov	r8, r0
 800d91c:	d109      	bne.n	800d932 <_printf_float+0x126>
 800d91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d920:	1cd8      	adds	r0, r3, #3
 800d922:	db02      	blt.n	800d92a <_printf_float+0x11e>
 800d924:	6862      	ldr	r2, [r4, #4]
 800d926:	4293      	cmp	r3, r2
 800d928:	dd47      	ble.n	800d9ba <_printf_float+0x1ae>
 800d92a:	f1aa 0a02 	sub.w	sl, sl, #2
 800d92e:	fa5f fa8a 	uxtb.w	sl, sl
 800d932:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d936:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d938:	d824      	bhi.n	800d984 <_printf_float+0x178>
 800d93a:	3901      	subs	r1, #1
 800d93c:	4652      	mov	r2, sl
 800d93e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d942:	9109      	str	r1, [sp, #36]	; 0x24
 800d944:	f7ff ff2f 	bl	800d7a6 <__exponent>
 800d948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d94a:	1813      	adds	r3, r2, r0
 800d94c:	2a01      	cmp	r2, #1
 800d94e:	4681      	mov	r9, r0
 800d950:	6123      	str	r3, [r4, #16]
 800d952:	dc02      	bgt.n	800d95a <_printf_float+0x14e>
 800d954:	6822      	ldr	r2, [r4, #0]
 800d956:	07d1      	lsls	r1, r2, #31
 800d958:	d501      	bpl.n	800d95e <_printf_float+0x152>
 800d95a:	3301      	adds	r3, #1
 800d95c:	6123      	str	r3, [r4, #16]
 800d95e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d962:	2b00      	cmp	r3, #0
 800d964:	d0a5      	beq.n	800d8b2 <_printf_float+0xa6>
 800d966:	232d      	movs	r3, #45	; 0x2d
 800d968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d96c:	e7a1      	b.n	800d8b2 <_printf_float+0xa6>
 800d96e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d972:	f000 8177 	beq.w	800dc64 <_printf_float+0x458>
 800d976:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d97a:	d1bb      	bne.n	800d8f4 <_printf_float+0xe8>
 800d97c:	2900      	cmp	r1, #0
 800d97e:	d1b9      	bne.n	800d8f4 <_printf_float+0xe8>
 800d980:	2301      	movs	r3, #1
 800d982:	e7b6      	b.n	800d8f2 <_printf_float+0xe6>
 800d984:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d988:	d119      	bne.n	800d9be <_printf_float+0x1b2>
 800d98a:	2900      	cmp	r1, #0
 800d98c:	6863      	ldr	r3, [r4, #4]
 800d98e:	dd0c      	ble.n	800d9aa <_printf_float+0x19e>
 800d990:	6121      	str	r1, [r4, #16]
 800d992:	b913      	cbnz	r3, 800d99a <_printf_float+0x18e>
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	07d2      	lsls	r2, r2, #31
 800d998:	d502      	bpl.n	800d9a0 <_printf_float+0x194>
 800d99a:	3301      	adds	r3, #1
 800d99c:	440b      	add	r3, r1
 800d99e:	6123      	str	r3, [r4, #16]
 800d9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a2:	65a3      	str	r3, [r4, #88]	; 0x58
 800d9a4:	f04f 0900 	mov.w	r9, #0
 800d9a8:	e7d9      	b.n	800d95e <_printf_float+0x152>
 800d9aa:	b913      	cbnz	r3, 800d9b2 <_printf_float+0x1a6>
 800d9ac:	6822      	ldr	r2, [r4, #0]
 800d9ae:	07d0      	lsls	r0, r2, #31
 800d9b0:	d501      	bpl.n	800d9b6 <_printf_float+0x1aa>
 800d9b2:	3302      	adds	r3, #2
 800d9b4:	e7f3      	b.n	800d99e <_printf_float+0x192>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e7f1      	b.n	800d99e <_printf_float+0x192>
 800d9ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d9be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	db05      	blt.n	800d9d2 <_printf_float+0x1c6>
 800d9c6:	6822      	ldr	r2, [r4, #0]
 800d9c8:	6123      	str	r3, [r4, #16]
 800d9ca:	07d1      	lsls	r1, r2, #31
 800d9cc:	d5e8      	bpl.n	800d9a0 <_printf_float+0x194>
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	e7e5      	b.n	800d99e <_printf_float+0x192>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	bfd4      	ite	le
 800d9d6:	f1c3 0302 	rsble	r3, r3, #2
 800d9da:	2301      	movgt	r3, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	e7de      	b.n	800d99e <_printf_float+0x192>
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	055a      	lsls	r2, r3, #21
 800d9e4:	d407      	bmi.n	800d9f6 <_printf_float+0x1ea>
 800d9e6:	6923      	ldr	r3, [r4, #16]
 800d9e8:	4642      	mov	r2, r8
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	47b8      	blx	r7
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	d12b      	bne.n	800da4c <_printf_float+0x240>
 800d9f4:	e767      	b.n	800d8c6 <_printf_float+0xba>
 800d9f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d9fa:	f240 80dc 	bls.w	800dbb6 <_printf_float+0x3aa>
 800d9fe:	2200      	movs	r2, #0
 800da00:	2300      	movs	r3, #0
 800da02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da06:	f7f3 f877 	bl	8000af8 <__aeabi_dcmpeq>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d033      	beq.n	800da76 <_printf_float+0x26a>
 800da0e:	2301      	movs	r3, #1
 800da10:	4a41      	ldr	r2, [pc, #260]	; (800db18 <_printf_float+0x30c>)
 800da12:	4631      	mov	r1, r6
 800da14:	4628      	mov	r0, r5
 800da16:	47b8      	blx	r7
 800da18:	3001      	adds	r0, #1
 800da1a:	f43f af54 	beq.w	800d8c6 <_printf_float+0xba>
 800da1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da22:	429a      	cmp	r2, r3
 800da24:	db02      	blt.n	800da2c <_printf_float+0x220>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	07d8      	lsls	r0, r3, #31
 800da2a:	d50f      	bpl.n	800da4c <_printf_float+0x240>
 800da2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da30:	4631      	mov	r1, r6
 800da32:	4628      	mov	r0, r5
 800da34:	47b8      	blx	r7
 800da36:	3001      	adds	r0, #1
 800da38:	f43f af45 	beq.w	800d8c6 <_printf_float+0xba>
 800da3c:	f04f 0800 	mov.w	r8, #0
 800da40:	f104 091a 	add.w	r9, r4, #26
 800da44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da46:	3b01      	subs	r3, #1
 800da48:	4543      	cmp	r3, r8
 800da4a:	dc09      	bgt.n	800da60 <_printf_float+0x254>
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	079b      	lsls	r3, r3, #30
 800da50:	f100 8103 	bmi.w	800dc5a <_printf_float+0x44e>
 800da54:	68e0      	ldr	r0, [r4, #12]
 800da56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da58:	4298      	cmp	r0, r3
 800da5a:	bfb8      	it	lt
 800da5c:	4618      	movlt	r0, r3
 800da5e:	e734      	b.n	800d8ca <_printf_float+0xbe>
 800da60:	2301      	movs	r3, #1
 800da62:	464a      	mov	r2, r9
 800da64:	4631      	mov	r1, r6
 800da66:	4628      	mov	r0, r5
 800da68:	47b8      	blx	r7
 800da6a:	3001      	adds	r0, #1
 800da6c:	f43f af2b 	beq.w	800d8c6 <_printf_float+0xba>
 800da70:	f108 0801 	add.w	r8, r8, #1
 800da74:	e7e6      	b.n	800da44 <_printf_float+0x238>
 800da76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da78:	2b00      	cmp	r3, #0
 800da7a:	dc2b      	bgt.n	800dad4 <_printf_float+0x2c8>
 800da7c:	2301      	movs	r3, #1
 800da7e:	4a26      	ldr	r2, [pc, #152]	; (800db18 <_printf_float+0x30c>)
 800da80:	4631      	mov	r1, r6
 800da82:	4628      	mov	r0, r5
 800da84:	47b8      	blx	r7
 800da86:	3001      	adds	r0, #1
 800da88:	f43f af1d 	beq.w	800d8c6 <_printf_float+0xba>
 800da8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8e:	b923      	cbnz	r3, 800da9a <_printf_float+0x28e>
 800da90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da92:	b913      	cbnz	r3, 800da9a <_printf_float+0x28e>
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	07d9      	lsls	r1, r3, #31
 800da98:	d5d8      	bpl.n	800da4c <_printf_float+0x240>
 800da9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da9e:	4631      	mov	r1, r6
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b8      	blx	r7
 800daa4:	3001      	adds	r0, #1
 800daa6:	f43f af0e 	beq.w	800d8c6 <_printf_float+0xba>
 800daaa:	f04f 0900 	mov.w	r9, #0
 800daae:	f104 0a1a 	add.w	sl, r4, #26
 800dab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab4:	425b      	negs	r3, r3
 800dab6:	454b      	cmp	r3, r9
 800dab8:	dc01      	bgt.n	800dabe <_printf_float+0x2b2>
 800daba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dabc:	e794      	b.n	800d9e8 <_printf_float+0x1dc>
 800dabe:	2301      	movs	r3, #1
 800dac0:	4652      	mov	r2, sl
 800dac2:	4631      	mov	r1, r6
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b8      	blx	r7
 800dac8:	3001      	adds	r0, #1
 800daca:	f43f aefc 	beq.w	800d8c6 <_printf_float+0xba>
 800dace:	f109 0901 	add.w	r9, r9, #1
 800dad2:	e7ee      	b.n	800dab2 <_printf_float+0x2a6>
 800dad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dad8:	429a      	cmp	r2, r3
 800dada:	bfa8      	it	ge
 800dadc:	461a      	movge	r2, r3
 800dade:	2a00      	cmp	r2, #0
 800dae0:	4691      	mov	r9, r2
 800dae2:	dd07      	ble.n	800daf4 <_printf_float+0x2e8>
 800dae4:	4613      	mov	r3, r2
 800dae6:	4631      	mov	r1, r6
 800dae8:	4642      	mov	r2, r8
 800daea:	4628      	mov	r0, r5
 800daec:	47b8      	blx	r7
 800daee:	3001      	adds	r0, #1
 800daf0:	f43f aee9 	beq.w	800d8c6 <_printf_float+0xba>
 800daf4:	f104 031a 	add.w	r3, r4, #26
 800daf8:	f04f 0b00 	mov.w	fp, #0
 800dafc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db00:	9306      	str	r3, [sp, #24]
 800db02:	e015      	b.n	800db30 <_printf_float+0x324>
 800db04:	7fefffff 	.word	0x7fefffff
 800db08:	08012a78 	.word	0x08012a78
 800db0c:	08012a74 	.word	0x08012a74
 800db10:	08012a80 	.word	0x08012a80
 800db14:	08012a7c 	.word	0x08012a7c
 800db18:	08012ca3 	.word	0x08012ca3
 800db1c:	2301      	movs	r3, #1
 800db1e:	9a06      	ldr	r2, [sp, #24]
 800db20:	4631      	mov	r1, r6
 800db22:	4628      	mov	r0, r5
 800db24:	47b8      	blx	r7
 800db26:	3001      	adds	r0, #1
 800db28:	f43f aecd 	beq.w	800d8c6 <_printf_float+0xba>
 800db2c:	f10b 0b01 	add.w	fp, fp, #1
 800db30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800db34:	ebaa 0309 	sub.w	r3, sl, r9
 800db38:	455b      	cmp	r3, fp
 800db3a:	dcef      	bgt.n	800db1c <_printf_float+0x310>
 800db3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db40:	429a      	cmp	r2, r3
 800db42:	44d0      	add	r8, sl
 800db44:	db15      	blt.n	800db72 <_printf_float+0x366>
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	07da      	lsls	r2, r3, #31
 800db4a:	d412      	bmi.n	800db72 <_printf_float+0x366>
 800db4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db50:	eba3 020a 	sub.w	r2, r3, sl
 800db54:	eba3 0a01 	sub.w	sl, r3, r1
 800db58:	4592      	cmp	sl, r2
 800db5a:	bfa8      	it	ge
 800db5c:	4692      	movge	sl, r2
 800db5e:	f1ba 0f00 	cmp.w	sl, #0
 800db62:	dc0e      	bgt.n	800db82 <_printf_float+0x376>
 800db64:	f04f 0800 	mov.w	r8, #0
 800db68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db6c:	f104 091a 	add.w	r9, r4, #26
 800db70:	e019      	b.n	800dba6 <_printf_float+0x39a>
 800db72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db76:	4631      	mov	r1, r6
 800db78:	4628      	mov	r0, r5
 800db7a:	47b8      	blx	r7
 800db7c:	3001      	adds	r0, #1
 800db7e:	d1e5      	bne.n	800db4c <_printf_float+0x340>
 800db80:	e6a1      	b.n	800d8c6 <_printf_float+0xba>
 800db82:	4653      	mov	r3, sl
 800db84:	4642      	mov	r2, r8
 800db86:	4631      	mov	r1, r6
 800db88:	4628      	mov	r0, r5
 800db8a:	47b8      	blx	r7
 800db8c:	3001      	adds	r0, #1
 800db8e:	d1e9      	bne.n	800db64 <_printf_float+0x358>
 800db90:	e699      	b.n	800d8c6 <_printf_float+0xba>
 800db92:	2301      	movs	r3, #1
 800db94:	464a      	mov	r2, r9
 800db96:	4631      	mov	r1, r6
 800db98:	4628      	mov	r0, r5
 800db9a:	47b8      	blx	r7
 800db9c:	3001      	adds	r0, #1
 800db9e:	f43f ae92 	beq.w	800d8c6 <_printf_float+0xba>
 800dba2:	f108 0801 	add.w	r8, r8, #1
 800dba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbaa:	1a9b      	subs	r3, r3, r2
 800dbac:	eba3 030a 	sub.w	r3, r3, sl
 800dbb0:	4543      	cmp	r3, r8
 800dbb2:	dcee      	bgt.n	800db92 <_printf_float+0x386>
 800dbb4:	e74a      	b.n	800da4c <_printf_float+0x240>
 800dbb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbb8:	2a01      	cmp	r2, #1
 800dbba:	dc01      	bgt.n	800dbc0 <_printf_float+0x3b4>
 800dbbc:	07db      	lsls	r3, r3, #31
 800dbbe:	d53a      	bpl.n	800dc36 <_printf_float+0x42a>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	4642      	mov	r2, r8
 800dbc4:	4631      	mov	r1, r6
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47b8      	blx	r7
 800dbca:	3001      	adds	r0, #1
 800dbcc:	f43f ae7b 	beq.w	800d8c6 <_printf_float+0xba>
 800dbd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	47b8      	blx	r7
 800dbda:	3001      	adds	r0, #1
 800dbdc:	f108 0801 	add.w	r8, r8, #1
 800dbe0:	f43f ae71 	beq.w	800d8c6 <_printf_float+0xba>
 800dbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f103 3aff 	add.w	sl, r3, #4294967295
 800dbec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f7f2 ff81 	bl	8000af8 <__aeabi_dcmpeq>
 800dbf6:	b9c8      	cbnz	r0, 800dc2c <_printf_float+0x420>
 800dbf8:	4653      	mov	r3, sl
 800dbfa:	4642      	mov	r2, r8
 800dbfc:	4631      	mov	r1, r6
 800dbfe:	4628      	mov	r0, r5
 800dc00:	47b8      	blx	r7
 800dc02:	3001      	adds	r0, #1
 800dc04:	d10e      	bne.n	800dc24 <_printf_float+0x418>
 800dc06:	e65e      	b.n	800d8c6 <_printf_float+0xba>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	4652      	mov	r2, sl
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f ae57 	beq.w	800d8c6 <_printf_float+0xba>
 800dc18:	f108 0801 	add.w	r8, r8, #1
 800dc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	4543      	cmp	r3, r8
 800dc22:	dcf1      	bgt.n	800dc08 <_printf_float+0x3fc>
 800dc24:	464b      	mov	r3, r9
 800dc26:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc2a:	e6de      	b.n	800d9ea <_printf_float+0x1de>
 800dc2c:	f04f 0800 	mov.w	r8, #0
 800dc30:	f104 0a1a 	add.w	sl, r4, #26
 800dc34:	e7f2      	b.n	800dc1c <_printf_float+0x410>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e7df      	b.n	800dbfa <_printf_float+0x3ee>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	464a      	mov	r2, r9
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4628      	mov	r0, r5
 800dc42:	47b8      	blx	r7
 800dc44:	3001      	adds	r0, #1
 800dc46:	f43f ae3e 	beq.w	800d8c6 <_printf_float+0xba>
 800dc4a:	f108 0801 	add.w	r8, r8, #1
 800dc4e:	68e3      	ldr	r3, [r4, #12]
 800dc50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc52:	1a9b      	subs	r3, r3, r2
 800dc54:	4543      	cmp	r3, r8
 800dc56:	dcf0      	bgt.n	800dc3a <_printf_float+0x42e>
 800dc58:	e6fc      	b.n	800da54 <_printf_float+0x248>
 800dc5a:	f04f 0800 	mov.w	r8, #0
 800dc5e:	f104 0919 	add.w	r9, r4, #25
 800dc62:	e7f4      	b.n	800dc4e <_printf_float+0x442>
 800dc64:	2900      	cmp	r1, #0
 800dc66:	f43f ae8b 	beq.w	800d980 <_printf_float+0x174>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dc70:	ab09      	add	r3, sp, #36	; 0x24
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	ec49 8b10 	vmov	d0, r8, r9
 800dc78:	6022      	str	r2, [r4, #0]
 800dc7a:	f8cd a004 	str.w	sl, [sp, #4]
 800dc7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc82:	4628      	mov	r0, r5
 800dc84:	f7ff fd2e 	bl	800d6e4 <__cvt>
 800dc88:	4680      	mov	r8, r0
 800dc8a:	e648      	b.n	800d91e <_printf_float+0x112>

0800dc8c <_printf_common>:
 800dc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	4691      	mov	r9, r2
 800dc92:	461f      	mov	r7, r3
 800dc94:	688a      	ldr	r2, [r1, #8]
 800dc96:	690b      	ldr	r3, [r1, #16]
 800dc98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	bfb8      	it	lt
 800dca0:	4613      	movlt	r3, r2
 800dca2:	f8c9 3000 	str.w	r3, [r9]
 800dca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460c      	mov	r4, r1
 800dcae:	b112      	cbz	r2, 800dcb6 <_printf_common+0x2a>
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	f8c9 3000 	str.w	r3, [r9]
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	0699      	lsls	r1, r3, #26
 800dcba:	bf42      	ittt	mi
 800dcbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dcc0:	3302      	addmi	r3, #2
 800dcc2:	f8c9 3000 	strmi.w	r3, [r9]
 800dcc6:	6825      	ldr	r5, [r4, #0]
 800dcc8:	f015 0506 	ands.w	r5, r5, #6
 800dccc:	d107      	bne.n	800dcde <_printf_common+0x52>
 800dcce:	f104 0a19 	add.w	sl, r4, #25
 800dcd2:	68e3      	ldr	r3, [r4, #12]
 800dcd4:	f8d9 2000 	ldr.w	r2, [r9]
 800dcd8:	1a9b      	subs	r3, r3, r2
 800dcda:	42ab      	cmp	r3, r5
 800dcdc:	dc28      	bgt.n	800dd30 <_printf_common+0xa4>
 800dcde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	3300      	adds	r3, #0
 800dce6:	bf18      	it	ne
 800dce8:	2301      	movne	r3, #1
 800dcea:	0692      	lsls	r2, r2, #26
 800dcec:	d42d      	bmi.n	800dd4a <_printf_common+0xbe>
 800dcee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcf2:	4639      	mov	r1, r7
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	47c0      	blx	r8
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d020      	beq.n	800dd3e <_printf_common+0xb2>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	68e5      	ldr	r5, [r4, #12]
 800dd00:	f8d9 2000 	ldr.w	r2, [r9]
 800dd04:	f003 0306 	and.w	r3, r3, #6
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	bf08      	it	eq
 800dd0c:	1aad      	subeq	r5, r5, r2
 800dd0e:	68a3      	ldr	r3, [r4, #8]
 800dd10:	6922      	ldr	r2, [r4, #16]
 800dd12:	bf0c      	ite	eq
 800dd14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd18:	2500      	movne	r5, #0
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	bfc4      	itt	gt
 800dd1e:	1a9b      	subgt	r3, r3, r2
 800dd20:	18ed      	addgt	r5, r5, r3
 800dd22:	f04f 0900 	mov.w	r9, #0
 800dd26:	341a      	adds	r4, #26
 800dd28:	454d      	cmp	r5, r9
 800dd2a:	d11a      	bne.n	800dd62 <_printf_common+0xd6>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	e008      	b.n	800dd42 <_printf_common+0xb6>
 800dd30:	2301      	movs	r3, #1
 800dd32:	4652      	mov	r2, sl
 800dd34:	4639      	mov	r1, r7
 800dd36:	4630      	mov	r0, r6
 800dd38:	47c0      	blx	r8
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	d103      	bne.n	800dd46 <_printf_common+0xba>
 800dd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd46:	3501      	adds	r5, #1
 800dd48:	e7c3      	b.n	800dcd2 <_printf_common+0x46>
 800dd4a:	18e1      	adds	r1, r4, r3
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	2030      	movs	r0, #48	; 0x30
 800dd50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd54:	4422      	add	r2, r4
 800dd56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd5e:	3302      	adds	r3, #2
 800dd60:	e7c5      	b.n	800dcee <_printf_common+0x62>
 800dd62:	2301      	movs	r3, #1
 800dd64:	4622      	mov	r2, r4
 800dd66:	4639      	mov	r1, r7
 800dd68:	4630      	mov	r0, r6
 800dd6a:	47c0      	blx	r8
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	d0e6      	beq.n	800dd3e <_printf_common+0xb2>
 800dd70:	f109 0901 	add.w	r9, r9, #1
 800dd74:	e7d8      	b.n	800dd28 <_printf_common+0x9c>
	...

0800dd78 <_printf_i>:
 800dd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dd80:	460c      	mov	r4, r1
 800dd82:	7e09      	ldrb	r1, [r1, #24]
 800dd84:	b085      	sub	sp, #20
 800dd86:	296e      	cmp	r1, #110	; 0x6e
 800dd88:	4617      	mov	r7, r2
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	4698      	mov	r8, r3
 800dd8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd90:	f000 80b3 	beq.w	800defa <_printf_i+0x182>
 800dd94:	d822      	bhi.n	800dddc <_printf_i+0x64>
 800dd96:	2963      	cmp	r1, #99	; 0x63
 800dd98:	d036      	beq.n	800de08 <_printf_i+0x90>
 800dd9a:	d80a      	bhi.n	800ddb2 <_printf_i+0x3a>
 800dd9c:	2900      	cmp	r1, #0
 800dd9e:	f000 80b9 	beq.w	800df14 <_printf_i+0x19c>
 800dda2:	2958      	cmp	r1, #88	; 0x58
 800dda4:	f000 8083 	beq.w	800deae <_printf_i+0x136>
 800dda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ddb0:	e032      	b.n	800de18 <_printf_i+0xa0>
 800ddb2:	2964      	cmp	r1, #100	; 0x64
 800ddb4:	d001      	beq.n	800ddba <_printf_i+0x42>
 800ddb6:	2969      	cmp	r1, #105	; 0x69
 800ddb8:	d1f6      	bne.n	800dda8 <_printf_i+0x30>
 800ddba:	6820      	ldr	r0, [r4, #0]
 800ddbc:	6813      	ldr	r3, [r2, #0]
 800ddbe:	0605      	lsls	r5, r0, #24
 800ddc0:	f103 0104 	add.w	r1, r3, #4
 800ddc4:	d52a      	bpl.n	800de1c <_printf_i+0xa4>
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	6011      	str	r1, [r2, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da03      	bge.n	800ddd6 <_printf_i+0x5e>
 800ddce:	222d      	movs	r2, #45	; 0x2d
 800ddd0:	425b      	negs	r3, r3
 800ddd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ddd6:	486f      	ldr	r0, [pc, #444]	; (800df94 <_printf_i+0x21c>)
 800ddd8:	220a      	movs	r2, #10
 800ddda:	e039      	b.n	800de50 <_printf_i+0xd8>
 800dddc:	2973      	cmp	r1, #115	; 0x73
 800ddde:	f000 809d 	beq.w	800df1c <_printf_i+0x1a4>
 800dde2:	d808      	bhi.n	800ddf6 <_printf_i+0x7e>
 800dde4:	296f      	cmp	r1, #111	; 0x6f
 800dde6:	d020      	beq.n	800de2a <_printf_i+0xb2>
 800dde8:	2970      	cmp	r1, #112	; 0x70
 800ddea:	d1dd      	bne.n	800dda8 <_printf_i+0x30>
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	f043 0320 	orr.w	r3, r3, #32
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	e003      	b.n	800ddfe <_printf_i+0x86>
 800ddf6:	2975      	cmp	r1, #117	; 0x75
 800ddf8:	d017      	beq.n	800de2a <_printf_i+0xb2>
 800ddfa:	2978      	cmp	r1, #120	; 0x78
 800ddfc:	d1d4      	bne.n	800dda8 <_printf_i+0x30>
 800ddfe:	2378      	movs	r3, #120	; 0x78
 800de00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de04:	4864      	ldr	r0, [pc, #400]	; (800df98 <_printf_i+0x220>)
 800de06:	e055      	b.n	800deb4 <_printf_i+0x13c>
 800de08:	6813      	ldr	r3, [r2, #0]
 800de0a:	1d19      	adds	r1, r3, #4
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6011      	str	r1, [r2, #0]
 800de10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de18:	2301      	movs	r3, #1
 800de1a:	e08c      	b.n	800df36 <_printf_i+0x1be>
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	6011      	str	r1, [r2, #0]
 800de20:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de24:	bf18      	it	ne
 800de26:	b21b      	sxthne	r3, r3
 800de28:	e7cf      	b.n	800ddca <_printf_i+0x52>
 800de2a:	6813      	ldr	r3, [r2, #0]
 800de2c:	6825      	ldr	r5, [r4, #0]
 800de2e:	1d18      	adds	r0, r3, #4
 800de30:	6010      	str	r0, [r2, #0]
 800de32:	0628      	lsls	r0, r5, #24
 800de34:	d501      	bpl.n	800de3a <_printf_i+0xc2>
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	e002      	b.n	800de40 <_printf_i+0xc8>
 800de3a:	0668      	lsls	r0, r5, #25
 800de3c:	d5fb      	bpl.n	800de36 <_printf_i+0xbe>
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	4854      	ldr	r0, [pc, #336]	; (800df94 <_printf_i+0x21c>)
 800de42:	296f      	cmp	r1, #111	; 0x6f
 800de44:	bf14      	ite	ne
 800de46:	220a      	movne	r2, #10
 800de48:	2208      	moveq	r2, #8
 800de4a:	2100      	movs	r1, #0
 800de4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de50:	6865      	ldr	r5, [r4, #4]
 800de52:	60a5      	str	r5, [r4, #8]
 800de54:	2d00      	cmp	r5, #0
 800de56:	f2c0 8095 	blt.w	800df84 <_printf_i+0x20c>
 800de5a:	6821      	ldr	r1, [r4, #0]
 800de5c:	f021 0104 	bic.w	r1, r1, #4
 800de60:	6021      	str	r1, [r4, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d13d      	bne.n	800dee2 <_printf_i+0x16a>
 800de66:	2d00      	cmp	r5, #0
 800de68:	f040 808e 	bne.w	800df88 <_printf_i+0x210>
 800de6c:	4665      	mov	r5, ip
 800de6e:	2a08      	cmp	r2, #8
 800de70:	d10b      	bne.n	800de8a <_printf_i+0x112>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	07db      	lsls	r3, r3, #31
 800de76:	d508      	bpl.n	800de8a <_printf_i+0x112>
 800de78:	6923      	ldr	r3, [r4, #16]
 800de7a:	6862      	ldr	r2, [r4, #4]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	bfde      	ittt	le
 800de80:	2330      	movle	r3, #48	; 0x30
 800de82:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de86:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de8a:	ebac 0305 	sub.w	r3, ip, r5
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	f8cd 8000 	str.w	r8, [sp]
 800de94:	463b      	mov	r3, r7
 800de96:	aa03      	add	r2, sp, #12
 800de98:	4621      	mov	r1, r4
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7ff fef6 	bl	800dc8c <_printf_common>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d14d      	bne.n	800df40 <_printf_i+0x1c8>
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295
 800dea8:	b005      	add	sp, #20
 800deaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800deae:	4839      	ldr	r0, [pc, #228]	; (800df94 <_printf_i+0x21c>)
 800deb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800deb4:	6813      	ldr	r3, [r2, #0]
 800deb6:	6821      	ldr	r1, [r4, #0]
 800deb8:	1d1d      	adds	r5, r3, #4
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6015      	str	r5, [r2, #0]
 800debe:	060a      	lsls	r2, r1, #24
 800dec0:	d50b      	bpl.n	800deda <_printf_i+0x162>
 800dec2:	07ca      	lsls	r2, r1, #31
 800dec4:	bf44      	itt	mi
 800dec6:	f041 0120 	orrmi.w	r1, r1, #32
 800deca:	6021      	strmi	r1, [r4, #0]
 800decc:	b91b      	cbnz	r3, 800ded6 <_printf_i+0x15e>
 800dece:	6822      	ldr	r2, [r4, #0]
 800ded0:	f022 0220 	bic.w	r2, r2, #32
 800ded4:	6022      	str	r2, [r4, #0]
 800ded6:	2210      	movs	r2, #16
 800ded8:	e7b7      	b.n	800de4a <_printf_i+0xd2>
 800deda:	064d      	lsls	r5, r1, #25
 800dedc:	bf48      	it	mi
 800dede:	b29b      	uxthmi	r3, r3
 800dee0:	e7ef      	b.n	800dec2 <_printf_i+0x14a>
 800dee2:	4665      	mov	r5, ip
 800dee4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dee8:	fb02 3311 	mls	r3, r2, r1, r3
 800deec:	5cc3      	ldrb	r3, [r0, r3]
 800deee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800def2:	460b      	mov	r3, r1
 800def4:	2900      	cmp	r1, #0
 800def6:	d1f5      	bne.n	800dee4 <_printf_i+0x16c>
 800def8:	e7b9      	b.n	800de6e <_printf_i+0xf6>
 800defa:	6813      	ldr	r3, [r2, #0]
 800defc:	6825      	ldr	r5, [r4, #0]
 800defe:	6961      	ldr	r1, [r4, #20]
 800df00:	1d18      	adds	r0, r3, #4
 800df02:	6010      	str	r0, [r2, #0]
 800df04:	0628      	lsls	r0, r5, #24
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	d501      	bpl.n	800df0e <_printf_i+0x196>
 800df0a:	6019      	str	r1, [r3, #0]
 800df0c:	e002      	b.n	800df14 <_printf_i+0x19c>
 800df0e:	066a      	lsls	r2, r5, #25
 800df10:	d5fb      	bpl.n	800df0a <_printf_i+0x192>
 800df12:	8019      	strh	r1, [r3, #0]
 800df14:	2300      	movs	r3, #0
 800df16:	6123      	str	r3, [r4, #16]
 800df18:	4665      	mov	r5, ip
 800df1a:	e7b9      	b.n	800de90 <_printf_i+0x118>
 800df1c:	6813      	ldr	r3, [r2, #0]
 800df1e:	1d19      	adds	r1, r3, #4
 800df20:	6011      	str	r1, [r2, #0]
 800df22:	681d      	ldr	r5, [r3, #0]
 800df24:	6862      	ldr	r2, [r4, #4]
 800df26:	2100      	movs	r1, #0
 800df28:	4628      	mov	r0, r5
 800df2a:	f7f2 f971 	bl	8000210 <memchr>
 800df2e:	b108      	cbz	r0, 800df34 <_printf_i+0x1bc>
 800df30:	1b40      	subs	r0, r0, r5
 800df32:	6060      	str	r0, [r4, #4]
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	6123      	str	r3, [r4, #16]
 800df38:	2300      	movs	r3, #0
 800df3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df3e:	e7a7      	b.n	800de90 <_printf_i+0x118>
 800df40:	6923      	ldr	r3, [r4, #16]
 800df42:	462a      	mov	r2, r5
 800df44:	4639      	mov	r1, r7
 800df46:	4630      	mov	r0, r6
 800df48:	47c0      	blx	r8
 800df4a:	3001      	adds	r0, #1
 800df4c:	d0aa      	beq.n	800dea4 <_printf_i+0x12c>
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	079b      	lsls	r3, r3, #30
 800df52:	d413      	bmi.n	800df7c <_printf_i+0x204>
 800df54:	68e0      	ldr	r0, [r4, #12]
 800df56:	9b03      	ldr	r3, [sp, #12]
 800df58:	4298      	cmp	r0, r3
 800df5a:	bfb8      	it	lt
 800df5c:	4618      	movlt	r0, r3
 800df5e:	e7a3      	b.n	800dea8 <_printf_i+0x130>
 800df60:	2301      	movs	r3, #1
 800df62:	464a      	mov	r2, r9
 800df64:	4639      	mov	r1, r7
 800df66:	4630      	mov	r0, r6
 800df68:	47c0      	blx	r8
 800df6a:	3001      	adds	r0, #1
 800df6c:	d09a      	beq.n	800dea4 <_printf_i+0x12c>
 800df6e:	3501      	adds	r5, #1
 800df70:	68e3      	ldr	r3, [r4, #12]
 800df72:	9a03      	ldr	r2, [sp, #12]
 800df74:	1a9b      	subs	r3, r3, r2
 800df76:	42ab      	cmp	r3, r5
 800df78:	dcf2      	bgt.n	800df60 <_printf_i+0x1e8>
 800df7a:	e7eb      	b.n	800df54 <_printf_i+0x1dc>
 800df7c:	2500      	movs	r5, #0
 800df7e:	f104 0919 	add.w	r9, r4, #25
 800df82:	e7f5      	b.n	800df70 <_printf_i+0x1f8>
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1ac      	bne.n	800dee2 <_printf_i+0x16a>
 800df88:	7803      	ldrb	r3, [r0, #0]
 800df8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df92:	e76c      	b.n	800de6e <_printf_i+0xf6>
 800df94:	08012a84 	.word	0x08012a84
 800df98:	08012a95 	.word	0x08012a95

0800df9c <_scanf_float>:
 800df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	469a      	mov	sl, r3
 800dfa2:	688b      	ldr	r3, [r1, #8]
 800dfa4:	4616      	mov	r6, r2
 800dfa6:	1e5a      	subs	r2, r3, #1
 800dfa8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dfac:	b087      	sub	sp, #28
 800dfae:	bf83      	ittte	hi
 800dfb0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800dfb4:	189b      	addhi	r3, r3, r2
 800dfb6:	9301      	strhi	r3, [sp, #4]
 800dfb8:	2300      	movls	r3, #0
 800dfba:	bf86      	itte	hi
 800dfbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dfc0:	608b      	strhi	r3, [r1, #8]
 800dfc2:	9301      	strls	r3, [sp, #4]
 800dfc4:	680b      	ldr	r3, [r1, #0]
 800dfc6:	4688      	mov	r8, r1
 800dfc8:	f04f 0b00 	mov.w	fp, #0
 800dfcc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dfd0:	f848 3b1c 	str.w	r3, [r8], #28
 800dfd4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800dfd8:	4607      	mov	r7, r0
 800dfda:	460c      	mov	r4, r1
 800dfdc:	4645      	mov	r5, r8
 800dfde:	465a      	mov	r2, fp
 800dfe0:	46d9      	mov	r9, fp
 800dfe2:	f8cd b008 	str.w	fp, [sp, #8]
 800dfe6:	68a1      	ldr	r1, [r4, #8]
 800dfe8:	b181      	cbz	r1, 800e00c <_scanf_float+0x70>
 800dfea:	6833      	ldr	r3, [r6, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	2b49      	cmp	r3, #73	; 0x49
 800dff0:	d071      	beq.n	800e0d6 <_scanf_float+0x13a>
 800dff2:	d84d      	bhi.n	800e090 <_scanf_float+0xf4>
 800dff4:	2b39      	cmp	r3, #57	; 0x39
 800dff6:	d840      	bhi.n	800e07a <_scanf_float+0xde>
 800dff8:	2b31      	cmp	r3, #49	; 0x31
 800dffa:	f080 8088 	bcs.w	800e10e <_scanf_float+0x172>
 800dffe:	2b2d      	cmp	r3, #45	; 0x2d
 800e000:	f000 8090 	beq.w	800e124 <_scanf_float+0x188>
 800e004:	d815      	bhi.n	800e032 <_scanf_float+0x96>
 800e006:	2b2b      	cmp	r3, #43	; 0x2b
 800e008:	f000 808c 	beq.w	800e124 <_scanf_float+0x188>
 800e00c:	f1b9 0f00 	cmp.w	r9, #0
 800e010:	d003      	beq.n	800e01a <_scanf_float+0x7e>
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	3a01      	subs	r2, #1
 800e01c:	2a01      	cmp	r2, #1
 800e01e:	f200 80ea 	bhi.w	800e1f6 <_scanf_float+0x25a>
 800e022:	4545      	cmp	r5, r8
 800e024:	f200 80dc 	bhi.w	800e1e0 <_scanf_float+0x244>
 800e028:	2601      	movs	r6, #1
 800e02a:	4630      	mov	r0, r6
 800e02c:	b007      	add	sp, #28
 800e02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e032:	2b2e      	cmp	r3, #46	; 0x2e
 800e034:	f000 809f 	beq.w	800e176 <_scanf_float+0x1da>
 800e038:	2b30      	cmp	r3, #48	; 0x30
 800e03a:	d1e7      	bne.n	800e00c <_scanf_float+0x70>
 800e03c:	6820      	ldr	r0, [r4, #0]
 800e03e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e042:	d064      	beq.n	800e10e <_scanf_float+0x172>
 800e044:	9b01      	ldr	r3, [sp, #4]
 800e046:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e04a:	6020      	str	r0, [r4, #0]
 800e04c:	f109 0901 	add.w	r9, r9, #1
 800e050:	b11b      	cbz	r3, 800e05a <_scanf_float+0xbe>
 800e052:	3b01      	subs	r3, #1
 800e054:	3101      	adds	r1, #1
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	60a1      	str	r1, [r4, #8]
 800e05a:	68a3      	ldr	r3, [r4, #8]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	60a3      	str	r3, [r4, #8]
 800e060:	6923      	ldr	r3, [r4, #16]
 800e062:	3301      	adds	r3, #1
 800e064:	6123      	str	r3, [r4, #16]
 800e066:	6873      	ldr	r3, [r6, #4]
 800e068:	3b01      	subs	r3, #1
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	6073      	str	r3, [r6, #4]
 800e06e:	f340 80ac 	ble.w	800e1ca <_scanf_float+0x22e>
 800e072:	6833      	ldr	r3, [r6, #0]
 800e074:	3301      	adds	r3, #1
 800e076:	6033      	str	r3, [r6, #0]
 800e078:	e7b5      	b.n	800dfe6 <_scanf_float+0x4a>
 800e07a:	2b45      	cmp	r3, #69	; 0x45
 800e07c:	f000 8085 	beq.w	800e18a <_scanf_float+0x1ee>
 800e080:	2b46      	cmp	r3, #70	; 0x46
 800e082:	d06a      	beq.n	800e15a <_scanf_float+0x1be>
 800e084:	2b41      	cmp	r3, #65	; 0x41
 800e086:	d1c1      	bne.n	800e00c <_scanf_float+0x70>
 800e088:	2a01      	cmp	r2, #1
 800e08a:	d1bf      	bne.n	800e00c <_scanf_float+0x70>
 800e08c:	2202      	movs	r2, #2
 800e08e:	e046      	b.n	800e11e <_scanf_float+0x182>
 800e090:	2b65      	cmp	r3, #101	; 0x65
 800e092:	d07a      	beq.n	800e18a <_scanf_float+0x1ee>
 800e094:	d818      	bhi.n	800e0c8 <_scanf_float+0x12c>
 800e096:	2b54      	cmp	r3, #84	; 0x54
 800e098:	d066      	beq.n	800e168 <_scanf_float+0x1cc>
 800e09a:	d811      	bhi.n	800e0c0 <_scanf_float+0x124>
 800e09c:	2b4e      	cmp	r3, #78	; 0x4e
 800e09e:	d1b5      	bne.n	800e00c <_scanf_float+0x70>
 800e0a0:	2a00      	cmp	r2, #0
 800e0a2:	d146      	bne.n	800e132 <_scanf_float+0x196>
 800e0a4:	f1b9 0f00 	cmp.w	r9, #0
 800e0a8:	d145      	bne.n	800e136 <_scanf_float+0x19a>
 800e0aa:	6821      	ldr	r1, [r4, #0]
 800e0ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e0b0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e0b4:	d13f      	bne.n	800e136 <_scanf_float+0x19a>
 800e0b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e0ba:	6021      	str	r1, [r4, #0]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	e02e      	b.n	800e11e <_scanf_float+0x182>
 800e0c0:	2b59      	cmp	r3, #89	; 0x59
 800e0c2:	d01e      	beq.n	800e102 <_scanf_float+0x166>
 800e0c4:	2b61      	cmp	r3, #97	; 0x61
 800e0c6:	e7de      	b.n	800e086 <_scanf_float+0xea>
 800e0c8:	2b6e      	cmp	r3, #110	; 0x6e
 800e0ca:	d0e9      	beq.n	800e0a0 <_scanf_float+0x104>
 800e0cc:	d815      	bhi.n	800e0fa <_scanf_float+0x15e>
 800e0ce:	2b66      	cmp	r3, #102	; 0x66
 800e0d0:	d043      	beq.n	800e15a <_scanf_float+0x1be>
 800e0d2:	2b69      	cmp	r3, #105	; 0x69
 800e0d4:	d19a      	bne.n	800e00c <_scanf_float+0x70>
 800e0d6:	f1bb 0f00 	cmp.w	fp, #0
 800e0da:	d138      	bne.n	800e14e <_scanf_float+0x1b2>
 800e0dc:	f1b9 0f00 	cmp.w	r9, #0
 800e0e0:	d197      	bne.n	800e012 <_scanf_float+0x76>
 800e0e2:	6821      	ldr	r1, [r4, #0]
 800e0e4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e0e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e0ec:	d195      	bne.n	800e01a <_scanf_float+0x7e>
 800e0ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e0f2:	6021      	str	r1, [r4, #0]
 800e0f4:	f04f 0b01 	mov.w	fp, #1
 800e0f8:	e011      	b.n	800e11e <_scanf_float+0x182>
 800e0fa:	2b74      	cmp	r3, #116	; 0x74
 800e0fc:	d034      	beq.n	800e168 <_scanf_float+0x1cc>
 800e0fe:	2b79      	cmp	r3, #121	; 0x79
 800e100:	d184      	bne.n	800e00c <_scanf_float+0x70>
 800e102:	f1bb 0f07 	cmp.w	fp, #7
 800e106:	d181      	bne.n	800e00c <_scanf_float+0x70>
 800e108:	f04f 0b08 	mov.w	fp, #8
 800e10c:	e007      	b.n	800e11e <_scanf_float+0x182>
 800e10e:	eb12 0f0b 	cmn.w	r2, fp
 800e112:	f47f af7b 	bne.w	800e00c <_scanf_float+0x70>
 800e116:	6821      	ldr	r1, [r4, #0]
 800e118:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e11c:	6021      	str	r1, [r4, #0]
 800e11e:	702b      	strb	r3, [r5, #0]
 800e120:	3501      	adds	r5, #1
 800e122:	e79a      	b.n	800e05a <_scanf_float+0xbe>
 800e124:	6821      	ldr	r1, [r4, #0]
 800e126:	0608      	lsls	r0, r1, #24
 800e128:	f57f af70 	bpl.w	800e00c <_scanf_float+0x70>
 800e12c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e130:	e7f4      	b.n	800e11c <_scanf_float+0x180>
 800e132:	2a02      	cmp	r2, #2
 800e134:	d047      	beq.n	800e1c6 <_scanf_float+0x22a>
 800e136:	f1bb 0f01 	cmp.w	fp, #1
 800e13a:	d003      	beq.n	800e144 <_scanf_float+0x1a8>
 800e13c:	f1bb 0f04 	cmp.w	fp, #4
 800e140:	f47f af64 	bne.w	800e00c <_scanf_float+0x70>
 800e144:	f10b 0b01 	add.w	fp, fp, #1
 800e148:	fa5f fb8b 	uxtb.w	fp, fp
 800e14c:	e7e7      	b.n	800e11e <_scanf_float+0x182>
 800e14e:	f1bb 0f03 	cmp.w	fp, #3
 800e152:	d0f7      	beq.n	800e144 <_scanf_float+0x1a8>
 800e154:	f1bb 0f05 	cmp.w	fp, #5
 800e158:	e7f2      	b.n	800e140 <_scanf_float+0x1a4>
 800e15a:	f1bb 0f02 	cmp.w	fp, #2
 800e15e:	f47f af55 	bne.w	800e00c <_scanf_float+0x70>
 800e162:	f04f 0b03 	mov.w	fp, #3
 800e166:	e7da      	b.n	800e11e <_scanf_float+0x182>
 800e168:	f1bb 0f06 	cmp.w	fp, #6
 800e16c:	f47f af4e 	bne.w	800e00c <_scanf_float+0x70>
 800e170:	f04f 0b07 	mov.w	fp, #7
 800e174:	e7d3      	b.n	800e11e <_scanf_float+0x182>
 800e176:	6821      	ldr	r1, [r4, #0]
 800e178:	0588      	lsls	r0, r1, #22
 800e17a:	f57f af47 	bpl.w	800e00c <_scanf_float+0x70>
 800e17e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e182:	6021      	str	r1, [r4, #0]
 800e184:	f8cd 9008 	str.w	r9, [sp, #8]
 800e188:	e7c9      	b.n	800e11e <_scanf_float+0x182>
 800e18a:	6821      	ldr	r1, [r4, #0]
 800e18c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e190:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e194:	d006      	beq.n	800e1a4 <_scanf_float+0x208>
 800e196:	0548      	lsls	r0, r1, #21
 800e198:	f57f af38 	bpl.w	800e00c <_scanf_float+0x70>
 800e19c:	f1b9 0f00 	cmp.w	r9, #0
 800e1a0:	f43f af3b 	beq.w	800e01a <_scanf_float+0x7e>
 800e1a4:	0588      	lsls	r0, r1, #22
 800e1a6:	bf58      	it	pl
 800e1a8:	9802      	ldrpl	r0, [sp, #8]
 800e1aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e1ae:	bf58      	it	pl
 800e1b0:	eba9 0000 	subpl.w	r0, r9, r0
 800e1b4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e1b8:	bf58      	it	pl
 800e1ba:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e1be:	6021      	str	r1, [r4, #0]
 800e1c0:	f04f 0900 	mov.w	r9, #0
 800e1c4:	e7ab      	b.n	800e11e <_scanf_float+0x182>
 800e1c6:	2203      	movs	r2, #3
 800e1c8:	e7a9      	b.n	800e11e <_scanf_float+0x182>
 800e1ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e1ce:	9205      	str	r2, [sp, #20]
 800e1d0:	4631      	mov	r1, r6
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	4798      	blx	r3
 800e1d6:	9a05      	ldr	r2, [sp, #20]
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	f43f af04 	beq.w	800dfe6 <_scanf_float+0x4a>
 800e1de:	e715      	b.n	800e00c <_scanf_float+0x70>
 800e1e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e1e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	4798      	blx	r3
 800e1ee:	6923      	ldr	r3, [r4, #16]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	6123      	str	r3, [r4, #16]
 800e1f4:	e715      	b.n	800e022 <_scanf_float+0x86>
 800e1f6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e1fa:	2b06      	cmp	r3, #6
 800e1fc:	d80a      	bhi.n	800e214 <_scanf_float+0x278>
 800e1fe:	f1bb 0f02 	cmp.w	fp, #2
 800e202:	d968      	bls.n	800e2d6 <_scanf_float+0x33a>
 800e204:	f1ab 0b03 	sub.w	fp, fp, #3
 800e208:	fa5f fb8b 	uxtb.w	fp, fp
 800e20c:	eba5 0b0b 	sub.w	fp, r5, fp
 800e210:	455d      	cmp	r5, fp
 800e212:	d14b      	bne.n	800e2ac <_scanf_float+0x310>
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	05da      	lsls	r2, r3, #23
 800e218:	d51f      	bpl.n	800e25a <_scanf_float+0x2be>
 800e21a:	055b      	lsls	r3, r3, #21
 800e21c:	d468      	bmi.n	800e2f0 <_scanf_float+0x354>
 800e21e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e222:	6923      	ldr	r3, [r4, #16]
 800e224:	2965      	cmp	r1, #101	; 0x65
 800e226:	f103 33ff 	add.w	r3, r3, #4294967295
 800e22a:	f105 3bff 	add.w	fp, r5, #4294967295
 800e22e:	6123      	str	r3, [r4, #16]
 800e230:	d00d      	beq.n	800e24e <_scanf_float+0x2b2>
 800e232:	2945      	cmp	r1, #69	; 0x45
 800e234:	d00b      	beq.n	800e24e <_scanf_float+0x2b2>
 800e236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e23a:	4632      	mov	r2, r6
 800e23c:	4638      	mov	r0, r7
 800e23e:	4798      	blx	r3
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e246:	3b01      	subs	r3, #1
 800e248:	f1a5 0b02 	sub.w	fp, r5, #2
 800e24c:	6123      	str	r3, [r4, #16]
 800e24e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e252:	4632      	mov	r2, r6
 800e254:	4638      	mov	r0, r7
 800e256:	4798      	blx	r3
 800e258:	465d      	mov	r5, fp
 800e25a:	6826      	ldr	r6, [r4, #0]
 800e25c:	f016 0610 	ands.w	r6, r6, #16
 800e260:	d17a      	bne.n	800e358 <_scanf_float+0x3bc>
 800e262:	702e      	strb	r6, [r5, #0]
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e26a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e26e:	d142      	bne.n	800e2f6 <_scanf_float+0x35a>
 800e270:	9b02      	ldr	r3, [sp, #8]
 800e272:	eba9 0303 	sub.w	r3, r9, r3
 800e276:	425a      	negs	r2, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d149      	bne.n	800e310 <_scanf_float+0x374>
 800e27c:	2200      	movs	r2, #0
 800e27e:	4641      	mov	r1, r8
 800e280:	4638      	mov	r0, r7
 800e282:	f000 ffcd 	bl	800f220 <_strtod_r>
 800e286:	6825      	ldr	r5, [r4, #0]
 800e288:	f8da 3000 	ldr.w	r3, [sl]
 800e28c:	f015 0f02 	tst.w	r5, #2
 800e290:	f103 0204 	add.w	r2, r3, #4
 800e294:	ec59 8b10 	vmov	r8, r9, d0
 800e298:	f8ca 2000 	str.w	r2, [sl]
 800e29c:	d043      	beq.n	800e326 <_scanf_float+0x38a>
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	e9c3 8900 	strd	r8, r9, [r3]
 800e2a4:	68e3      	ldr	r3, [r4, #12]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	60e3      	str	r3, [r4, #12]
 800e2aa:	e6be      	b.n	800e02a <_scanf_float+0x8e>
 800e2ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	4798      	blx	r3
 800e2ba:	6923      	ldr	r3, [r4, #16]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	e7a6      	b.n	800e210 <_scanf_float+0x274>
 800e2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2c6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e2ca:	4632      	mov	r2, r6
 800e2cc:	4638      	mov	r0, r7
 800e2ce:	4798      	blx	r3
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	6123      	str	r3, [r4, #16]
 800e2d6:	4545      	cmp	r5, r8
 800e2d8:	d8f3      	bhi.n	800e2c2 <_scanf_float+0x326>
 800e2da:	e6a5      	b.n	800e028 <_scanf_float+0x8c>
 800e2dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e2e4:	4632      	mov	r2, r6
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	4798      	blx	r3
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	6123      	str	r3, [r4, #16]
 800e2f0:	4545      	cmp	r5, r8
 800e2f2:	d8f3      	bhi.n	800e2dc <_scanf_float+0x340>
 800e2f4:	e698      	b.n	800e028 <_scanf_float+0x8c>
 800e2f6:	9b03      	ldr	r3, [sp, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d0bf      	beq.n	800e27c <_scanf_float+0x2e0>
 800e2fc:	9904      	ldr	r1, [sp, #16]
 800e2fe:	230a      	movs	r3, #10
 800e300:	4632      	mov	r2, r6
 800e302:	3101      	adds	r1, #1
 800e304:	4638      	mov	r0, r7
 800e306:	f001 f817 	bl	800f338 <_strtol_r>
 800e30a:	9b03      	ldr	r3, [sp, #12]
 800e30c:	9d04      	ldr	r5, [sp, #16]
 800e30e:	1ac2      	subs	r2, r0, r3
 800e310:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e314:	429d      	cmp	r5, r3
 800e316:	bf28      	it	cs
 800e318:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e31c:	490f      	ldr	r1, [pc, #60]	; (800e35c <_scanf_float+0x3c0>)
 800e31e:	4628      	mov	r0, r5
 800e320:	f000 f8d4 	bl	800e4cc <siprintf>
 800e324:	e7aa      	b.n	800e27c <_scanf_float+0x2e0>
 800e326:	f015 0504 	ands.w	r5, r5, #4
 800e32a:	d1b8      	bne.n	800e29e <_scanf_float+0x302>
 800e32c:	681f      	ldr	r7, [r3, #0]
 800e32e:	ee10 2a10 	vmov	r2, s0
 800e332:	464b      	mov	r3, r9
 800e334:	ee10 0a10 	vmov	r0, s0
 800e338:	4649      	mov	r1, r9
 800e33a:	f7f2 fc0f 	bl	8000b5c <__aeabi_dcmpun>
 800e33e:	b128      	cbz	r0, 800e34c <_scanf_float+0x3b0>
 800e340:	4628      	mov	r0, r5
 800e342:	f000 f889 	bl	800e458 <nanf>
 800e346:	ed87 0a00 	vstr	s0, [r7]
 800e34a:	e7ab      	b.n	800e2a4 <_scanf_float+0x308>
 800e34c:	4640      	mov	r0, r8
 800e34e:	4649      	mov	r1, r9
 800e350:	f7f2 fc62 	bl	8000c18 <__aeabi_d2f>
 800e354:	6038      	str	r0, [r7, #0]
 800e356:	e7a5      	b.n	800e2a4 <_scanf_float+0x308>
 800e358:	2600      	movs	r6, #0
 800e35a:	e666      	b.n	800e02a <_scanf_float+0x8e>
 800e35c:	08012aa6 	.word	0x08012aa6

0800e360 <iprintf>:
 800e360:	b40f      	push	{r0, r1, r2, r3}
 800e362:	4b0a      	ldr	r3, [pc, #40]	; (800e38c <iprintf+0x2c>)
 800e364:	b513      	push	{r0, r1, r4, lr}
 800e366:	681c      	ldr	r4, [r3, #0]
 800e368:	b124      	cbz	r4, 800e374 <iprintf+0x14>
 800e36a:	69a3      	ldr	r3, [r4, #24]
 800e36c:	b913      	cbnz	r3, 800e374 <iprintf+0x14>
 800e36e:	4620      	mov	r0, r4
 800e370:	f002 f82a 	bl	80103c8 <__sinit>
 800e374:	ab05      	add	r3, sp, #20
 800e376:	9a04      	ldr	r2, [sp, #16]
 800e378:	68a1      	ldr	r1, [r4, #8]
 800e37a:	9301      	str	r3, [sp, #4]
 800e37c:	4620      	mov	r0, r4
 800e37e:	f003 fc6b 	bl	8011c58 <_vfiprintf_r>
 800e382:	b002      	add	sp, #8
 800e384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e388:	b004      	add	sp, #16
 800e38a:	4770      	bx	lr
 800e38c:	2000000c 	.word	0x2000000c

0800e390 <_puts_r>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	460e      	mov	r6, r1
 800e394:	4605      	mov	r5, r0
 800e396:	b118      	cbz	r0, 800e3a0 <_puts_r+0x10>
 800e398:	6983      	ldr	r3, [r0, #24]
 800e39a:	b90b      	cbnz	r3, 800e3a0 <_puts_r+0x10>
 800e39c:	f002 f814 	bl	80103c8 <__sinit>
 800e3a0:	69ab      	ldr	r3, [r5, #24]
 800e3a2:	68ac      	ldr	r4, [r5, #8]
 800e3a4:	b913      	cbnz	r3, 800e3ac <_puts_r+0x1c>
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	f002 f80e 	bl	80103c8 <__sinit>
 800e3ac:	4b23      	ldr	r3, [pc, #140]	; (800e43c <_puts_r+0xac>)
 800e3ae:	429c      	cmp	r4, r3
 800e3b0:	d117      	bne.n	800e3e2 <_puts_r+0x52>
 800e3b2:	686c      	ldr	r4, [r5, #4]
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	071b      	lsls	r3, r3, #28
 800e3b8:	d51d      	bpl.n	800e3f6 <_puts_r+0x66>
 800e3ba:	6923      	ldr	r3, [r4, #16]
 800e3bc:	b1db      	cbz	r3, 800e3f6 <_puts_r+0x66>
 800e3be:	3e01      	subs	r6, #1
 800e3c0:	68a3      	ldr	r3, [r4, #8]
 800e3c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	60a3      	str	r3, [r4, #8]
 800e3ca:	b9e9      	cbnz	r1, 800e408 <_puts_r+0x78>
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	da2e      	bge.n	800e42e <_puts_r+0x9e>
 800e3d0:	4622      	mov	r2, r4
 800e3d2:	210a      	movs	r1, #10
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	f000 ffe1 	bl	800f39c <__swbuf_r>
 800e3da:	3001      	adds	r0, #1
 800e3dc:	d011      	beq.n	800e402 <_puts_r+0x72>
 800e3de:	200a      	movs	r0, #10
 800e3e0:	e011      	b.n	800e406 <_puts_r+0x76>
 800e3e2:	4b17      	ldr	r3, [pc, #92]	; (800e440 <_puts_r+0xb0>)
 800e3e4:	429c      	cmp	r4, r3
 800e3e6:	d101      	bne.n	800e3ec <_puts_r+0x5c>
 800e3e8:	68ac      	ldr	r4, [r5, #8]
 800e3ea:	e7e3      	b.n	800e3b4 <_puts_r+0x24>
 800e3ec:	4b15      	ldr	r3, [pc, #84]	; (800e444 <_puts_r+0xb4>)
 800e3ee:	429c      	cmp	r4, r3
 800e3f0:	bf08      	it	eq
 800e3f2:	68ec      	ldreq	r4, [r5, #12]
 800e3f4:	e7de      	b.n	800e3b4 <_puts_r+0x24>
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	f001 f833 	bl	800f464 <__swsetup_r>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d0dd      	beq.n	800e3be <_puts_r+0x2e>
 800e402:	f04f 30ff 	mov.w	r0, #4294967295
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	2b00      	cmp	r3, #0
 800e40a:	da04      	bge.n	800e416 <_puts_r+0x86>
 800e40c:	69a2      	ldr	r2, [r4, #24]
 800e40e:	429a      	cmp	r2, r3
 800e410:	dc06      	bgt.n	800e420 <_puts_r+0x90>
 800e412:	290a      	cmp	r1, #10
 800e414:	d004      	beq.n	800e420 <_puts_r+0x90>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	6022      	str	r2, [r4, #0]
 800e41c:	7019      	strb	r1, [r3, #0]
 800e41e:	e7cf      	b.n	800e3c0 <_puts_r+0x30>
 800e420:	4622      	mov	r2, r4
 800e422:	4628      	mov	r0, r5
 800e424:	f000 ffba 	bl	800f39c <__swbuf_r>
 800e428:	3001      	adds	r0, #1
 800e42a:	d1c9      	bne.n	800e3c0 <_puts_r+0x30>
 800e42c:	e7e9      	b.n	800e402 <_puts_r+0x72>
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	200a      	movs	r0, #10
 800e432:	1c5a      	adds	r2, r3, #1
 800e434:	6022      	str	r2, [r4, #0]
 800e436:	7018      	strb	r0, [r3, #0]
 800e438:	e7e5      	b.n	800e406 <_puts_r+0x76>
 800e43a:	bf00      	nop
 800e43c:	08012b30 	.word	0x08012b30
 800e440:	08012b50 	.word	0x08012b50
 800e444:	08012b10 	.word	0x08012b10

0800e448 <puts>:
 800e448:	4b02      	ldr	r3, [pc, #8]	; (800e454 <puts+0xc>)
 800e44a:	4601      	mov	r1, r0
 800e44c:	6818      	ldr	r0, [r3, #0]
 800e44e:	f7ff bf9f 	b.w	800e390 <_puts_r>
 800e452:	bf00      	nop
 800e454:	2000000c 	.word	0x2000000c

0800e458 <nanf>:
 800e458:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e460 <nanf+0x8>
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	7fc00000 	.word	0x7fc00000

0800e464 <sniprintf>:
 800e464:	b40c      	push	{r2, r3}
 800e466:	b530      	push	{r4, r5, lr}
 800e468:	4b17      	ldr	r3, [pc, #92]	; (800e4c8 <sniprintf+0x64>)
 800e46a:	1e0c      	subs	r4, r1, #0
 800e46c:	b09d      	sub	sp, #116	; 0x74
 800e46e:	681d      	ldr	r5, [r3, #0]
 800e470:	da08      	bge.n	800e484 <sniprintf+0x20>
 800e472:	238b      	movs	r3, #139	; 0x8b
 800e474:	602b      	str	r3, [r5, #0]
 800e476:	f04f 30ff 	mov.w	r0, #4294967295
 800e47a:	b01d      	add	sp, #116	; 0x74
 800e47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e480:	b002      	add	sp, #8
 800e482:	4770      	bx	lr
 800e484:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e488:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e48c:	bf14      	ite	ne
 800e48e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e492:	4623      	moveq	r3, r4
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e49c:	9002      	str	r0, [sp, #8]
 800e49e:	9006      	str	r0, [sp, #24]
 800e4a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e4a6:	ab21      	add	r3, sp, #132	; 0x84
 800e4a8:	a902      	add	r1, sp, #8
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	f003 f907 	bl	80116c0 <_svfiprintf_r>
 800e4b2:	1c43      	adds	r3, r0, #1
 800e4b4:	bfbc      	itt	lt
 800e4b6:	238b      	movlt	r3, #139	; 0x8b
 800e4b8:	602b      	strlt	r3, [r5, #0]
 800e4ba:	2c00      	cmp	r4, #0
 800e4bc:	d0dd      	beq.n	800e47a <sniprintf+0x16>
 800e4be:	9b02      	ldr	r3, [sp, #8]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	701a      	strb	r2, [r3, #0]
 800e4c4:	e7d9      	b.n	800e47a <sniprintf+0x16>
 800e4c6:	bf00      	nop
 800e4c8:	2000000c 	.word	0x2000000c

0800e4cc <siprintf>:
 800e4cc:	b40e      	push	{r1, r2, r3}
 800e4ce:	b500      	push	{lr}
 800e4d0:	b09c      	sub	sp, #112	; 0x70
 800e4d2:	ab1d      	add	r3, sp, #116	; 0x74
 800e4d4:	9002      	str	r0, [sp, #8]
 800e4d6:	9006      	str	r0, [sp, #24]
 800e4d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e4dc:	4809      	ldr	r0, [pc, #36]	; (800e504 <siprintf+0x38>)
 800e4de:	9107      	str	r1, [sp, #28]
 800e4e0:	9104      	str	r1, [sp, #16]
 800e4e2:	4909      	ldr	r1, [pc, #36]	; (800e508 <siprintf+0x3c>)
 800e4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e8:	9105      	str	r1, [sp, #20]
 800e4ea:	6800      	ldr	r0, [r0, #0]
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	a902      	add	r1, sp, #8
 800e4f0:	f003 f8e6 	bl	80116c0 <_svfiprintf_r>
 800e4f4:	9b02      	ldr	r3, [sp, #8]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	b01c      	add	sp, #112	; 0x70
 800e4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e500:	b003      	add	sp, #12
 800e502:	4770      	bx	lr
 800e504:	2000000c 	.word	0x2000000c
 800e508:	ffff0208 	.word	0xffff0208

0800e50c <siscanf>:
 800e50c:	b40e      	push	{r1, r2, r3}
 800e50e:	b530      	push	{r4, r5, lr}
 800e510:	b09c      	sub	sp, #112	; 0x70
 800e512:	ac1f      	add	r4, sp, #124	; 0x7c
 800e514:	f44f 7201 	mov.w	r2, #516	; 0x204
 800e518:	f854 5b04 	ldr.w	r5, [r4], #4
 800e51c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e520:	9002      	str	r0, [sp, #8]
 800e522:	9006      	str	r0, [sp, #24]
 800e524:	f7f1 fe6c 	bl	8000200 <strlen>
 800e528:	4b0b      	ldr	r3, [pc, #44]	; (800e558 <siscanf+0x4c>)
 800e52a:	9003      	str	r0, [sp, #12]
 800e52c:	9007      	str	r0, [sp, #28]
 800e52e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e530:	480a      	ldr	r0, [pc, #40]	; (800e55c <siscanf+0x50>)
 800e532:	9401      	str	r4, [sp, #4]
 800e534:	2300      	movs	r3, #0
 800e536:	930f      	str	r3, [sp, #60]	; 0x3c
 800e538:	9314      	str	r3, [sp, #80]	; 0x50
 800e53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e53e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e542:	462a      	mov	r2, r5
 800e544:	4623      	mov	r3, r4
 800e546:	a902      	add	r1, sp, #8
 800e548:	6800      	ldr	r0, [r0, #0]
 800e54a:	f003 fa0b 	bl	8011964 <__ssvfiscanf_r>
 800e54e:	b01c      	add	sp, #112	; 0x70
 800e550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e554:	b003      	add	sp, #12
 800e556:	4770      	bx	lr
 800e558:	0800e583 	.word	0x0800e583
 800e55c:	2000000c 	.word	0x2000000c

0800e560 <__sread>:
 800e560:	b510      	push	{r4, lr}
 800e562:	460c      	mov	r4, r1
 800e564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e568:	f003 fde4 	bl	8012134 <_read_r>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	bfab      	itete	ge
 800e570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e572:	89a3      	ldrhlt	r3, [r4, #12]
 800e574:	181b      	addge	r3, r3, r0
 800e576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e57a:	bfac      	ite	ge
 800e57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e57e:	81a3      	strhlt	r3, [r4, #12]
 800e580:	bd10      	pop	{r4, pc}

0800e582 <__seofread>:
 800e582:	2000      	movs	r0, #0
 800e584:	4770      	bx	lr

0800e586 <__swrite>:
 800e586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e58a:	461f      	mov	r7, r3
 800e58c:	898b      	ldrh	r3, [r1, #12]
 800e58e:	05db      	lsls	r3, r3, #23
 800e590:	4605      	mov	r5, r0
 800e592:	460c      	mov	r4, r1
 800e594:	4616      	mov	r6, r2
 800e596:	d505      	bpl.n	800e5a4 <__swrite+0x1e>
 800e598:	2302      	movs	r3, #2
 800e59a:	2200      	movs	r2, #0
 800e59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a0:	f002 fae4 	bl	8010b6c <_lseek_r>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	4632      	mov	r2, r6
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ba:	f000 bf41 	b.w	800f440 <_write_r>

0800e5be <__sseek>:
 800e5be:	b510      	push	{r4, lr}
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c6:	f002 fad1 	bl	8010b6c <_lseek_r>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	bf15      	itete	ne
 800e5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5da:	81a3      	strheq	r3, [r4, #12]
 800e5dc:	bf18      	it	ne
 800e5de:	81a3      	strhne	r3, [r4, #12]
 800e5e0:	bd10      	pop	{r4, pc}

0800e5e2 <__sclose>:
 800e5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e6:	f000 bfab 	b.w	800f540 <_close_r>

0800e5ea <strcpy>:
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5f0:	f803 2b01 	strb.w	r2, [r3], #1
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	d1f9      	bne.n	800e5ec <strcpy+0x2>
 800e5f8:	4770      	bx	lr

0800e5fa <sulp>:
 800e5fa:	b570      	push	{r4, r5, r6, lr}
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	460d      	mov	r5, r1
 800e600:	ec45 4b10 	vmov	d0, r4, r5
 800e604:	4616      	mov	r6, r2
 800e606:	f002 fe17 	bl	8011238 <__ulp>
 800e60a:	ec51 0b10 	vmov	r0, r1, d0
 800e60e:	b17e      	cbz	r6, 800e630 <sulp+0x36>
 800e610:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e614:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dd09      	ble.n	800e630 <sulp+0x36>
 800e61c:	051b      	lsls	r3, r3, #20
 800e61e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e622:	2400      	movs	r4, #0
 800e624:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e628:	4622      	mov	r2, r4
 800e62a:	462b      	mov	r3, r5
 800e62c:	f7f1 fffc 	bl	8000628 <__aeabi_dmul>
 800e630:	bd70      	pop	{r4, r5, r6, pc}
 800e632:	0000      	movs	r0, r0
 800e634:	0000      	movs	r0, r0
	...

0800e638 <_strtod_l>:
 800e638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	461f      	mov	r7, r3
 800e63e:	b0a1      	sub	sp, #132	; 0x84
 800e640:	2300      	movs	r3, #0
 800e642:	4681      	mov	r9, r0
 800e644:	4638      	mov	r0, r7
 800e646:	460e      	mov	r6, r1
 800e648:	9217      	str	r2, [sp, #92]	; 0x5c
 800e64a:	931c      	str	r3, [sp, #112]	; 0x70
 800e64c:	f002 fa7e 	bl	8010b4c <__localeconv_l>
 800e650:	4680      	mov	r8, r0
 800e652:	6800      	ldr	r0, [r0, #0]
 800e654:	f7f1 fdd4 	bl	8000200 <strlen>
 800e658:	f04f 0a00 	mov.w	sl, #0
 800e65c:	4604      	mov	r4, r0
 800e65e:	f04f 0b00 	mov.w	fp, #0
 800e662:	961b      	str	r6, [sp, #108]	; 0x6c
 800e664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e666:	781a      	ldrb	r2, [r3, #0]
 800e668:	2a0d      	cmp	r2, #13
 800e66a:	d832      	bhi.n	800e6d2 <_strtod_l+0x9a>
 800e66c:	2a09      	cmp	r2, #9
 800e66e:	d236      	bcs.n	800e6de <_strtod_l+0xa6>
 800e670:	2a00      	cmp	r2, #0
 800e672:	d03e      	beq.n	800e6f2 <_strtod_l+0xba>
 800e674:	2300      	movs	r3, #0
 800e676:	930d      	str	r3, [sp, #52]	; 0x34
 800e678:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e67a:	782b      	ldrb	r3, [r5, #0]
 800e67c:	2b30      	cmp	r3, #48	; 0x30
 800e67e:	f040 80ac 	bne.w	800e7da <_strtod_l+0x1a2>
 800e682:	786b      	ldrb	r3, [r5, #1]
 800e684:	2b58      	cmp	r3, #88	; 0x58
 800e686:	d001      	beq.n	800e68c <_strtod_l+0x54>
 800e688:	2b78      	cmp	r3, #120	; 0x78
 800e68a:	d167      	bne.n	800e75c <_strtod_l+0x124>
 800e68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e68e:	9301      	str	r3, [sp, #4]
 800e690:	ab1c      	add	r3, sp, #112	; 0x70
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	9702      	str	r7, [sp, #8]
 800e696:	ab1d      	add	r3, sp, #116	; 0x74
 800e698:	4a88      	ldr	r2, [pc, #544]	; (800e8bc <_strtod_l+0x284>)
 800e69a:	a91b      	add	r1, sp, #108	; 0x6c
 800e69c:	4648      	mov	r0, r9
 800e69e:	f001 ff6c 	bl	801057a <__gethex>
 800e6a2:	f010 0407 	ands.w	r4, r0, #7
 800e6a6:	4606      	mov	r6, r0
 800e6a8:	d005      	beq.n	800e6b6 <_strtod_l+0x7e>
 800e6aa:	2c06      	cmp	r4, #6
 800e6ac:	d12b      	bne.n	800e706 <_strtod_l+0xce>
 800e6ae:	3501      	adds	r5, #1
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	951b      	str	r5, [sp, #108]	; 0x6c
 800e6b4:	930d      	str	r3, [sp, #52]	; 0x34
 800e6b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f040 859a 	bne.w	800f1f2 <_strtod_l+0xbba>
 800e6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6c0:	b1e3      	cbz	r3, 800e6fc <_strtod_l+0xc4>
 800e6c2:	4652      	mov	r2, sl
 800e6c4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e6c8:	ec43 2b10 	vmov	d0, r2, r3
 800e6cc:	b021      	add	sp, #132	; 0x84
 800e6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d2:	2a2b      	cmp	r2, #43	; 0x2b
 800e6d4:	d015      	beq.n	800e702 <_strtod_l+0xca>
 800e6d6:	2a2d      	cmp	r2, #45	; 0x2d
 800e6d8:	d004      	beq.n	800e6e4 <_strtod_l+0xac>
 800e6da:	2a20      	cmp	r2, #32
 800e6dc:	d1ca      	bne.n	800e674 <_strtod_l+0x3c>
 800e6de:	3301      	adds	r3, #1
 800e6e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e6e2:	e7bf      	b.n	800e664 <_strtod_l+0x2c>
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	920d      	str	r2, [sp, #52]	; 0x34
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800e6ec:	785b      	ldrb	r3, [r3, #1]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1c2      	bne.n	800e678 <_strtod_l+0x40>
 800e6f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6f4:	961b      	str	r6, [sp, #108]	; 0x6c
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f040 8579 	bne.w	800f1ee <_strtod_l+0xbb6>
 800e6fc:	4652      	mov	r2, sl
 800e6fe:	465b      	mov	r3, fp
 800e700:	e7e2      	b.n	800e6c8 <_strtod_l+0x90>
 800e702:	2200      	movs	r2, #0
 800e704:	e7ef      	b.n	800e6e6 <_strtod_l+0xae>
 800e706:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e708:	b13a      	cbz	r2, 800e71a <_strtod_l+0xe2>
 800e70a:	2135      	movs	r1, #53	; 0x35
 800e70c:	a81e      	add	r0, sp, #120	; 0x78
 800e70e:	f002 fe8b 	bl	8011428 <__copybits>
 800e712:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e714:	4648      	mov	r0, r9
 800e716:	f002 faf8 	bl	8010d0a <_Bfree>
 800e71a:	3c01      	subs	r4, #1
 800e71c:	2c04      	cmp	r4, #4
 800e71e:	d806      	bhi.n	800e72e <_strtod_l+0xf6>
 800e720:	e8df f004 	tbb	[pc, r4]
 800e724:	1714030a 	.word	0x1714030a
 800e728:	0a          	.byte	0x0a
 800e729:	00          	.byte	0x00
 800e72a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e72e:	0730      	lsls	r0, r6, #28
 800e730:	d5c1      	bpl.n	800e6b6 <_strtod_l+0x7e>
 800e732:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e736:	e7be      	b.n	800e6b6 <_strtod_l+0x7e>
 800e738:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e73c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e73e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e742:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e746:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e74a:	e7f0      	b.n	800e72e <_strtod_l+0xf6>
 800e74c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e8c0 <_strtod_l+0x288>
 800e750:	e7ed      	b.n	800e72e <_strtod_l+0xf6>
 800e752:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e756:	f04f 3aff 	mov.w	sl, #4294967295
 800e75a:	e7e8      	b.n	800e72e <_strtod_l+0xf6>
 800e75c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	921b      	str	r2, [sp, #108]	; 0x6c
 800e762:	785b      	ldrb	r3, [r3, #1]
 800e764:	2b30      	cmp	r3, #48	; 0x30
 800e766:	d0f9      	beq.n	800e75c <_strtod_l+0x124>
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0a4      	beq.n	800e6b6 <_strtod_l+0x7e>
 800e76c:	2301      	movs	r3, #1
 800e76e:	2500      	movs	r5, #0
 800e770:	9306      	str	r3, [sp, #24]
 800e772:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e774:	9308      	str	r3, [sp, #32]
 800e776:	9507      	str	r5, [sp, #28]
 800e778:	9505      	str	r5, [sp, #20]
 800e77a:	220a      	movs	r2, #10
 800e77c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e77e:	7807      	ldrb	r7, [r0, #0]
 800e780:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e784:	b2d9      	uxtb	r1, r3
 800e786:	2909      	cmp	r1, #9
 800e788:	d929      	bls.n	800e7de <_strtod_l+0x1a6>
 800e78a:	4622      	mov	r2, r4
 800e78c:	f8d8 1000 	ldr.w	r1, [r8]
 800e790:	f003 fd24 	bl	80121dc <strncmp>
 800e794:	2800      	cmp	r0, #0
 800e796:	d031      	beq.n	800e7fc <_strtod_l+0x1c4>
 800e798:	2000      	movs	r0, #0
 800e79a:	9c05      	ldr	r4, [sp, #20]
 800e79c:	9004      	str	r0, [sp, #16]
 800e79e:	463b      	mov	r3, r7
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	2b65      	cmp	r3, #101	; 0x65
 800e7a4:	d001      	beq.n	800e7aa <_strtod_l+0x172>
 800e7a6:	2b45      	cmp	r3, #69	; 0x45
 800e7a8:	d114      	bne.n	800e7d4 <_strtod_l+0x19c>
 800e7aa:	b924      	cbnz	r4, 800e7b6 <_strtod_l+0x17e>
 800e7ac:	b910      	cbnz	r0, 800e7b4 <_strtod_l+0x17c>
 800e7ae:	9b06      	ldr	r3, [sp, #24]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d09e      	beq.n	800e6f2 <_strtod_l+0xba>
 800e7b4:	2400      	movs	r4, #0
 800e7b6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e7b8:	1c73      	adds	r3, r6, #1
 800e7ba:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7bc:	7873      	ldrb	r3, [r6, #1]
 800e7be:	2b2b      	cmp	r3, #43	; 0x2b
 800e7c0:	d078      	beq.n	800e8b4 <_strtod_l+0x27c>
 800e7c2:	2b2d      	cmp	r3, #45	; 0x2d
 800e7c4:	d070      	beq.n	800e8a8 <_strtod_l+0x270>
 800e7c6:	f04f 0c00 	mov.w	ip, #0
 800e7ca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e7ce:	2f09      	cmp	r7, #9
 800e7d0:	d97c      	bls.n	800e8cc <_strtod_l+0x294>
 800e7d2:	961b      	str	r6, [sp, #108]	; 0x6c
 800e7d4:	f04f 0e00 	mov.w	lr, #0
 800e7d8:	e09a      	b.n	800e910 <_strtod_l+0x2d8>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e7c7      	b.n	800e76e <_strtod_l+0x136>
 800e7de:	9905      	ldr	r1, [sp, #20]
 800e7e0:	2908      	cmp	r1, #8
 800e7e2:	bfdd      	ittte	le
 800e7e4:	9907      	ldrle	r1, [sp, #28]
 800e7e6:	fb02 3301 	mlale	r3, r2, r1, r3
 800e7ea:	9307      	strle	r3, [sp, #28]
 800e7ec:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e7f0:	9b05      	ldr	r3, [sp, #20]
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	901b      	str	r0, [sp, #108]	; 0x6c
 800e7fa:	e7bf      	b.n	800e77c <_strtod_l+0x144>
 800e7fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7fe:	191a      	adds	r2, r3, r4
 800e800:	921b      	str	r2, [sp, #108]	; 0x6c
 800e802:	9a05      	ldr	r2, [sp, #20]
 800e804:	5d1b      	ldrb	r3, [r3, r4]
 800e806:	2a00      	cmp	r2, #0
 800e808:	d037      	beq.n	800e87a <_strtod_l+0x242>
 800e80a:	9c05      	ldr	r4, [sp, #20]
 800e80c:	4602      	mov	r2, r0
 800e80e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e812:	2909      	cmp	r1, #9
 800e814:	d913      	bls.n	800e83e <_strtod_l+0x206>
 800e816:	2101      	movs	r1, #1
 800e818:	9104      	str	r1, [sp, #16]
 800e81a:	e7c2      	b.n	800e7a2 <_strtod_l+0x16a>
 800e81c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	921b      	str	r2, [sp, #108]	; 0x6c
 800e822:	785b      	ldrb	r3, [r3, #1]
 800e824:	3001      	adds	r0, #1
 800e826:	2b30      	cmp	r3, #48	; 0x30
 800e828:	d0f8      	beq.n	800e81c <_strtod_l+0x1e4>
 800e82a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e82e:	2a08      	cmp	r2, #8
 800e830:	f200 84e4 	bhi.w	800f1fc <_strtod_l+0xbc4>
 800e834:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e836:	9208      	str	r2, [sp, #32]
 800e838:	4602      	mov	r2, r0
 800e83a:	2000      	movs	r0, #0
 800e83c:	4604      	mov	r4, r0
 800e83e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e842:	f100 0101 	add.w	r1, r0, #1
 800e846:	d012      	beq.n	800e86e <_strtod_l+0x236>
 800e848:	440a      	add	r2, r1
 800e84a:	eb00 0c04 	add.w	ip, r0, r4
 800e84e:	4621      	mov	r1, r4
 800e850:	270a      	movs	r7, #10
 800e852:	458c      	cmp	ip, r1
 800e854:	d113      	bne.n	800e87e <_strtod_l+0x246>
 800e856:	1821      	adds	r1, r4, r0
 800e858:	2908      	cmp	r1, #8
 800e85a:	f104 0401 	add.w	r4, r4, #1
 800e85e:	4404      	add	r4, r0
 800e860:	dc19      	bgt.n	800e896 <_strtod_l+0x25e>
 800e862:	9b07      	ldr	r3, [sp, #28]
 800e864:	210a      	movs	r1, #10
 800e866:	fb01 e303 	mla	r3, r1, r3, lr
 800e86a:	9307      	str	r3, [sp, #28]
 800e86c:	2100      	movs	r1, #0
 800e86e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e870:	1c58      	adds	r0, r3, #1
 800e872:	901b      	str	r0, [sp, #108]	; 0x6c
 800e874:	785b      	ldrb	r3, [r3, #1]
 800e876:	4608      	mov	r0, r1
 800e878:	e7c9      	b.n	800e80e <_strtod_l+0x1d6>
 800e87a:	9805      	ldr	r0, [sp, #20]
 800e87c:	e7d3      	b.n	800e826 <_strtod_l+0x1ee>
 800e87e:	2908      	cmp	r1, #8
 800e880:	f101 0101 	add.w	r1, r1, #1
 800e884:	dc03      	bgt.n	800e88e <_strtod_l+0x256>
 800e886:	9b07      	ldr	r3, [sp, #28]
 800e888:	437b      	muls	r3, r7
 800e88a:	9307      	str	r3, [sp, #28]
 800e88c:	e7e1      	b.n	800e852 <_strtod_l+0x21a>
 800e88e:	2910      	cmp	r1, #16
 800e890:	bfd8      	it	le
 800e892:	437d      	mulle	r5, r7
 800e894:	e7dd      	b.n	800e852 <_strtod_l+0x21a>
 800e896:	2c10      	cmp	r4, #16
 800e898:	bfdc      	itt	le
 800e89a:	210a      	movle	r1, #10
 800e89c:	fb01 e505 	mlale	r5, r1, r5, lr
 800e8a0:	e7e4      	b.n	800e86c <_strtod_l+0x234>
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	9304      	str	r3, [sp, #16]
 800e8a6:	e781      	b.n	800e7ac <_strtod_l+0x174>
 800e8a8:	f04f 0c01 	mov.w	ip, #1
 800e8ac:	1cb3      	adds	r3, r6, #2
 800e8ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8b0:	78b3      	ldrb	r3, [r6, #2]
 800e8b2:	e78a      	b.n	800e7ca <_strtod_l+0x192>
 800e8b4:	f04f 0c00 	mov.w	ip, #0
 800e8b8:	e7f8      	b.n	800e8ac <_strtod_l+0x274>
 800e8ba:	bf00      	nop
 800e8bc:	08012aac 	.word	0x08012aac
 800e8c0:	7ff00000 	.word	0x7ff00000
 800e8c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8c6:	1c5f      	adds	r7, r3, #1
 800e8c8:	971b      	str	r7, [sp, #108]	; 0x6c
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	2b30      	cmp	r3, #48	; 0x30
 800e8ce:	d0f9      	beq.n	800e8c4 <_strtod_l+0x28c>
 800e8d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e8d4:	2f08      	cmp	r7, #8
 800e8d6:	f63f af7d 	bhi.w	800e7d4 <_strtod_l+0x19c>
 800e8da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e8de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e8e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8e4:	1c5f      	adds	r7, r3, #1
 800e8e6:	971b      	str	r7, [sp, #108]	; 0x6c
 800e8e8:	785b      	ldrb	r3, [r3, #1]
 800e8ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e8ee:	f1b8 0f09 	cmp.w	r8, #9
 800e8f2:	d937      	bls.n	800e964 <_strtod_l+0x32c>
 800e8f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e8f6:	1a7f      	subs	r7, r7, r1
 800e8f8:	2f08      	cmp	r7, #8
 800e8fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e8fe:	dc37      	bgt.n	800e970 <_strtod_l+0x338>
 800e900:	45be      	cmp	lr, r7
 800e902:	bfa8      	it	ge
 800e904:	46be      	movge	lr, r7
 800e906:	f1bc 0f00 	cmp.w	ip, #0
 800e90a:	d001      	beq.n	800e910 <_strtod_l+0x2d8>
 800e90c:	f1ce 0e00 	rsb	lr, lr, #0
 800e910:	2c00      	cmp	r4, #0
 800e912:	d151      	bne.n	800e9b8 <_strtod_l+0x380>
 800e914:	2800      	cmp	r0, #0
 800e916:	f47f aece 	bne.w	800e6b6 <_strtod_l+0x7e>
 800e91a:	9a06      	ldr	r2, [sp, #24]
 800e91c:	2a00      	cmp	r2, #0
 800e91e:	f47f aeca 	bne.w	800e6b6 <_strtod_l+0x7e>
 800e922:	9a04      	ldr	r2, [sp, #16]
 800e924:	2a00      	cmp	r2, #0
 800e926:	f47f aee4 	bne.w	800e6f2 <_strtod_l+0xba>
 800e92a:	2b4e      	cmp	r3, #78	; 0x4e
 800e92c:	d027      	beq.n	800e97e <_strtod_l+0x346>
 800e92e:	dc21      	bgt.n	800e974 <_strtod_l+0x33c>
 800e930:	2b49      	cmp	r3, #73	; 0x49
 800e932:	f47f aede 	bne.w	800e6f2 <_strtod_l+0xba>
 800e936:	49a0      	ldr	r1, [pc, #640]	; (800ebb8 <_strtod_l+0x580>)
 800e938:	a81b      	add	r0, sp, #108	; 0x6c
 800e93a:	f002 f851 	bl	80109e0 <__match>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f43f aed7 	beq.w	800e6f2 <_strtod_l+0xba>
 800e944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e946:	499d      	ldr	r1, [pc, #628]	; (800ebbc <_strtod_l+0x584>)
 800e948:	3b01      	subs	r3, #1
 800e94a:	a81b      	add	r0, sp, #108	; 0x6c
 800e94c:	931b      	str	r3, [sp, #108]	; 0x6c
 800e94e:	f002 f847 	bl	80109e0 <__match>
 800e952:	b910      	cbnz	r0, 800e95a <_strtod_l+0x322>
 800e954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e956:	3301      	adds	r3, #1
 800e958:	931b      	str	r3, [sp, #108]	; 0x6c
 800e95a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ebd0 <_strtod_l+0x598>
 800e95e:	f04f 0a00 	mov.w	sl, #0
 800e962:	e6a8      	b.n	800e6b6 <_strtod_l+0x7e>
 800e964:	210a      	movs	r1, #10
 800e966:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e96a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e96e:	e7b8      	b.n	800e8e2 <_strtod_l+0x2aa>
 800e970:	46be      	mov	lr, r7
 800e972:	e7c8      	b.n	800e906 <_strtod_l+0x2ce>
 800e974:	2b69      	cmp	r3, #105	; 0x69
 800e976:	d0de      	beq.n	800e936 <_strtod_l+0x2fe>
 800e978:	2b6e      	cmp	r3, #110	; 0x6e
 800e97a:	f47f aeba 	bne.w	800e6f2 <_strtod_l+0xba>
 800e97e:	4990      	ldr	r1, [pc, #576]	; (800ebc0 <_strtod_l+0x588>)
 800e980:	a81b      	add	r0, sp, #108	; 0x6c
 800e982:	f002 f82d 	bl	80109e0 <__match>
 800e986:	2800      	cmp	r0, #0
 800e988:	f43f aeb3 	beq.w	800e6f2 <_strtod_l+0xba>
 800e98c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	2b28      	cmp	r3, #40	; 0x28
 800e992:	d10e      	bne.n	800e9b2 <_strtod_l+0x37a>
 800e994:	aa1e      	add	r2, sp, #120	; 0x78
 800e996:	498b      	ldr	r1, [pc, #556]	; (800ebc4 <_strtod_l+0x58c>)
 800e998:	a81b      	add	r0, sp, #108	; 0x6c
 800e99a:	f002 f835 	bl	8010a08 <__hexnan>
 800e99e:	2805      	cmp	r0, #5
 800e9a0:	d107      	bne.n	800e9b2 <_strtod_l+0x37a>
 800e9a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9a4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e9a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e9ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e9b0:	e681      	b.n	800e6b6 <_strtod_l+0x7e>
 800e9b2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ebd8 <_strtod_l+0x5a0>
 800e9b6:	e7d2      	b.n	800e95e <_strtod_l+0x326>
 800e9b8:	ebae 0302 	sub.w	r3, lr, r2
 800e9bc:	9306      	str	r3, [sp, #24]
 800e9be:	9b05      	ldr	r3, [sp, #20]
 800e9c0:	9807      	ldr	r0, [sp, #28]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	bf08      	it	eq
 800e9c6:	4623      	moveq	r3, r4
 800e9c8:	2c10      	cmp	r4, #16
 800e9ca:	9305      	str	r3, [sp, #20]
 800e9cc:	46a0      	mov	r8, r4
 800e9ce:	bfa8      	it	ge
 800e9d0:	f04f 0810 	movge.w	r8, #16
 800e9d4:	f7f1 fdae 	bl	8000534 <__aeabi_ui2d>
 800e9d8:	2c09      	cmp	r4, #9
 800e9da:	4682      	mov	sl, r0
 800e9dc:	468b      	mov	fp, r1
 800e9de:	dc13      	bgt.n	800ea08 <_strtod_l+0x3d0>
 800e9e0:	9b06      	ldr	r3, [sp, #24]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f43f ae67 	beq.w	800e6b6 <_strtod_l+0x7e>
 800e9e8:	9b06      	ldr	r3, [sp, #24]
 800e9ea:	dd7a      	ble.n	800eae2 <_strtod_l+0x4aa>
 800e9ec:	2b16      	cmp	r3, #22
 800e9ee:	dc61      	bgt.n	800eab4 <_strtod_l+0x47c>
 800e9f0:	4a75      	ldr	r2, [pc, #468]	; (800ebc8 <_strtod_l+0x590>)
 800e9f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e9f6:	e9de 0100 	ldrd	r0, r1, [lr]
 800e9fa:	4652      	mov	r2, sl
 800e9fc:	465b      	mov	r3, fp
 800e9fe:	f7f1 fe13 	bl	8000628 <__aeabi_dmul>
 800ea02:	4682      	mov	sl, r0
 800ea04:	468b      	mov	fp, r1
 800ea06:	e656      	b.n	800e6b6 <_strtod_l+0x7e>
 800ea08:	4b6f      	ldr	r3, [pc, #444]	; (800ebc8 <_strtod_l+0x590>)
 800ea0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ea0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ea12:	f7f1 fe09 	bl	8000628 <__aeabi_dmul>
 800ea16:	4606      	mov	r6, r0
 800ea18:	4628      	mov	r0, r5
 800ea1a:	460f      	mov	r7, r1
 800ea1c:	f7f1 fd8a 	bl	8000534 <__aeabi_ui2d>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	4630      	mov	r0, r6
 800ea26:	4639      	mov	r1, r7
 800ea28:	f7f1 fc48 	bl	80002bc <__adddf3>
 800ea2c:	2c0f      	cmp	r4, #15
 800ea2e:	4682      	mov	sl, r0
 800ea30:	468b      	mov	fp, r1
 800ea32:	ddd5      	ble.n	800e9e0 <_strtod_l+0x3a8>
 800ea34:	9b06      	ldr	r3, [sp, #24]
 800ea36:	eba4 0808 	sub.w	r8, r4, r8
 800ea3a:	4498      	add	r8, r3
 800ea3c:	f1b8 0f00 	cmp.w	r8, #0
 800ea40:	f340 8096 	ble.w	800eb70 <_strtod_l+0x538>
 800ea44:	f018 030f 	ands.w	r3, r8, #15
 800ea48:	d00a      	beq.n	800ea60 <_strtod_l+0x428>
 800ea4a:	495f      	ldr	r1, [pc, #380]	; (800ebc8 <_strtod_l+0x590>)
 800ea4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea50:	4652      	mov	r2, sl
 800ea52:	465b      	mov	r3, fp
 800ea54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea58:	f7f1 fde6 	bl	8000628 <__aeabi_dmul>
 800ea5c:	4682      	mov	sl, r0
 800ea5e:	468b      	mov	fp, r1
 800ea60:	f038 080f 	bics.w	r8, r8, #15
 800ea64:	d073      	beq.n	800eb4e <_strtod_l+0x516>
 800ea66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ea6a:	dd47      	ble.n	800eafc <_strtod_l+0x4c4>
 800ea6c:	2400      	movs	r4, #0
 800ea6e:	46a0      	mov	r8, r4
 800ea70:	9407      	str	r4, [sp, #28]
 800ea72:	9405      	str	r4, [sp, #20]
 800ea74:	2322      	movs	r3, #34	; 0x22
 800ea76:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ebd0 <_strtod_l+0x598>
 800ea7a:	f8c9 3000 	str.w	r3, [r9]
 800ea7e:	f04f 0a00 	mov.w	sl, #0
 800ea82:	9b07      	ldr	r3, [sp, #28]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f43f ae16 	beq.w	800e6b6 <_strtod_l+0x7e>
 800ea8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ea8c:	4648      	mov	r0, r9
 800ea8e:	f002 f93c 	bl	8010d0a <_Bfree>
 800ea92:	9905      	ldr	r1, [sp, #20]
 800ea94:	4648      	mov	r0, r9
 800ea96:	f002 f938 	bl	8010d0a <_Bfree>
 800ea9a:	4641      	mov	r1, r8
 800ea9c:	4648      	mov	r0, r9
 800ea9e:	f002 f934 	bl	8010d0a <_Bfree>
 800eaa2:	9907      	ldr	r1, [sp, #28]
 800eaa4:	4648      	mov	r0, r9
 800eaa6:	f002 f930 	bl	8010d0a <_Bfree>
 800eaaa:	4621      	mov	r1, r4
 800eaac:	4648      	mov	r0, r9
 800eaae:	f002 f92c 	bl	8010d0a <_Bfree>
 800eab2:	e600      	b.n	800e6b6 <_strtod_l+0x7e>
 800eab4:	9a06      	ldr	r2, [sp, #24]
 800eab6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800eaba:	4293      	cmp	r3, r2
 800eabc:	dbba      	blt.n	800ea34 <_strtod_l+0x3fc>
 800eabe:	4d42      	ldr	r5, [pc, #264]	; (800ebc8 <_strtod_l+0x590>)
 800eac0:	f1c4 040f 	rsb	r4, r4, #15
 800eac4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800eac8:	4652      	mov	r2, sl
 800eaca:	465b      	mov	r3, fp
 800eacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ead0:	f7f1 fdaa 	bl	8000628 <__aeabi_dmul>
 800ead4:	9b06      	ldr	r3, [sp, #24]
 800ead6:	1b1c      	subs	r4, r3, r4
 800ead8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800eadc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eae0:	e78d      	b.n	800e9fe <_strtod_l+0x3c6>
 800eae2:	f113 0f16 	cmn.w	r3, #22
 800eae6:	dba5      	blt.n	800ea34 <_strtod_l+0x3fc>
 800eae8:	4a37      	ldr	r2, [pc, #220]	; (800ebc8 <_strtod_l+0x590>)
 800eaea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800eaee:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eaf2:	4650      	mov	r0, sl
 800eaf4:	4659      	mov	r1, fp
 800eaf6:	f7f1 fec1 	bl	800087c <__aeabi_ddiv>
 800eafa:	e782      	b.n	800ea02 <_strtod_l+0x3ca>
 800eafc:	2300      	movs	r3, #0
 800eafe:	4e33      	ldr	r6, [pc, #204]	; (800ebcc <_strtod_l+0x594>)
 800eb00:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eb04:	4650      	mov	r0, sl
 800eb06:	4659      	mov	r1, fp
 800eb08:	461d      	mov	r5, r3
 800eb0a:	f1b8 0f01 	cmp.w	r8, #1
 800eb0e:	dc21      	bgt.n	800eb54 <_strtod_l+0x51c>
 800eb10:	b10b      	cbz	r3, 800eb16 <_strtod_l+0x4de>
 800eb12:	4682      	mov	sl, r0
 800eb14:	468b      	mov	fp, r1
 800eb16:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <_strtod_l+0x594>)
 800eb18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eb1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800eb20:	4652      	mov	r2, sl
 800eb22:	465b      	mov	r3, fp
 800eb24:	e9d5 0100 	ldrd	r0, r1, [r5]
 800eb28:	f7f1 fd7e 	bl	8000628 <__aeabi_dmul>
 800eb2c:	4b28      	ldr	r3, [pc, #160]	; (800ebd0 <_strtod_l+0x598>)
 800eb2e:	460a      	mov	r2, r1
 800eb30:	400b      	ands	r3, r1
 800eb32:	4928      	ldr	r1, [pc, #160]	; (800ebd4 <_strtod_l+0x59c>)
 800eb34:	428b      	cmp	r3, r1
 800eb36:	4682      	mov	sl, r0
 800eb38:	d898      	bhi.n	800ea6c <_strtod_l+0x434>
 800eb3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb3e:	428b      	cmp	r3, r1
 800eb40:	bf86      	itte	hi
 800eb42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ebdc <_strtod_l+0x5a4>
 800eb46:	f04f 3aff 	movhi.w	sl, #4294967295
 800eb4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eb4e:	2300      	movs	r3, #0
 800eb50:	9304      	str	r3, [sp, #16]
 800eb52:	e077      	b.n	800ec44 <_strtod_l+0x60c>
 800eb54:	f018 0f01 	tst.w	r8, #1
 800eb58:	d006      	beq.n	800eb68 <_strtod_l+0x530>
 800eb5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb62:	f7f1 fd61 	bl	8000628 <__aeabi_dmul>
 800eb66:	2301      	movs	r3, #1
 800eb68:	3501      	adds	r5, #1
 800eb6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb6e:	e7cc      	b.n	800eb0a <_strtod_l+0x4d2>
 800eb70:	d0ed      	beq.n	800eb4e <_strtod_l+0x516>
 800eb72:	f1c8 0800 	rsb	r8, r8, #0
 800eb76:	f018 020f 	ands.w	r2, r8, #15
 800eb7a:	d00a      	beq.n	800eb92 <_strtod_l+0x55a>
 800eb7c:	4b12      	ldr	r3, [pc, #72]	; (800ebc8 <_strtod_l+0x590>)
 800eb7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb82:	4650      	mov	r0, sl
 800eb84:	4659      	mov	r1, fp
 800eb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8a:	f7f1 fe77 	bl	800087c <__aeabi_ddiv>
 800eb8e:	4682      	mov	sl, r0
 800eb90:	468b      	mov	fp, r1
 800eb92:	ea5f 1828 	movs.w	r8, r8, asr #4
 800eb96:	d0da      	beq.n	800eb4e <_strtod_l+0x516>
 800eb98:	f1b8 0f1f 	cmp.w	r8, #31
 800eb9c:	dd20      	ble.n	800ebe0 <_strtod_l+0x5a8>
 800eb9e:	2400      	movs	r4, #0
 800eba0:	46a0      	mov	r8, r4
 800eba2:	9407      	str	r4, [sp, #28]
 800eba4:	9405      	str	r4, [sp, #20]
 800eba6:	2322      	movs	r3, #34	; 0x22
 800eba8:	f04f 0a00 	mov.w	sl, #0
 800ebac:	f04f 0b00 	mov.w	fp, #0
 800ebb0:	f8c9 3000 	str.w	r3, [r9]
 800ebb4:	e765      	b.n	800ea82 <_strtod_l+0x44a>
 800ebb6:	bf00      	nop
 800ebb8:	08012a79 	.word	0x08012a79
 800ebbc:	08012b03 	.word	0x08012b03
 800ebc0:	08012a81 	.word	0x08012a81
 800ebc4:	08012ac0 	.word	0x08012ac0
 800ebc8:	08012ba8 	.word	0x08012ba8
 800ebcc:	08012b80 	.word	0x08012b80
 800ebd0:	7ff00000 	.word	0x7ff00000
 800ebd4:	7ca00000 	.word	0x7ca00000
 800ebd8:	fff80000 	.word	0xfff80000
 800ebdc:	7fefffff 	.word	0x7fefffff
 800ebe0:	f018 0310 	ands.w	r3, r8, #16
 800ebe4:	bf18      	it	ne
 800ebe6:	236a      	movne	r3, #106	; 0x6a
 800ebe8:	4da0      	ldr	r5, [pc, #640]	; (800ee6c <_strtod_l+0x834>)
 800ebea:	9304      	str	r3, [sp, #16]
 800ebec:	4650      	mov	r0, sl
 800ebee:	4659      	mov	r1, fp
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f1b8 0f00 	cmp.w	r8, #0
 800ebf6:	f300 810a 	bgt.w	800ee0e <_strtod_l+0x7d6>
 800ebfa:	b10b      	cbz	r3, 800ec00 <_strtod_l+0x5c8>
 800ebfc:	4682      	mov	sl, r0
 800ebfe:	468b      	mov	fp, r1
 800ec00:	9b04      	ldr	r3, [sp, #16]
 800ec02:	b1bb      	cbz	r3, 800ec34 <_strtod_l+0x5fc>
 800ec04:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ec08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	4659      	mov	r1, fp
 800ec10:	dd10      	ble.n	800ec34 <_strtod_l+0x5fc>
 800ec12:	2b1f      	cmp	r3, #31
 800ec14:	f340 8107 	ble.w	800ee26 <_strtod_l+0x7ee>
 800ec18:	2b34      	cmp	r3, #52	; 0x34
 800ec1a:	bfde      	ittt	le
 800ec1c:	3b20      	suble	r3, #32
 800ec1e:	f04f 32ff 	movle.w	r2, #4294967295
 800ec22:	fa02 f303 	lslle.w	r3, r2, r3
 800ec26:	f04f 0a00 	mov.w	sl, #0
 800ec2a:	bfcc      	ite	gt
 800ec2c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ec30:	ea03 0b01 	andle.w	fp, r3, r1
 800ec34:	2200      	movs	r2, #0
 800ec36:	2300      	movs	r3, #0
 800ec38:	4650      	mov	r0, sl
 800ec3a:	4659      	mov	r1, fp
 800ec3c:	f7f1 ff5c 	bl	8000af8 <__aeabi_dcmpeq>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d1ac      	bne.n	800eb9e <_strtod_l+0x566>
 800ec44:	9b07      	ldr	r3, [sp, #28]
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	9a05      	ldr	r2, [sp, #20]
 800ec4a:	9908      	ldr	r1, [sp, #32]
 800ec4c:	4623      	mov	r3, r4
 800ec4e:	4648      	mov	r0, r9
 800ec50:	f002 f8ad 	bl	8010dae <__s2b>
 800ec54:	9007      	str	r0, [sp, #28]
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f43f af08 	beq.w	800ea6c <_strtod_l+0x434>
 800ec5c:	9a06      	ldr	r2, [sp, #24]
 800ec5e:	9b06      	ldr	r3, [sp, #24]
 800ec60:	2a00      	cmp	r2, #0
 800ec62:	f1c3 0300 	rsb	r3, r3, #0
 800ec66:	bfa8      	it	ge
 800ec68:	2300      	movge	r3, #0
 800ec6a:	930e      	str	r3, [sp, #56]	; 0x38
 800ec6c:	2400      	movs	r4, #0
 800ec6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ec72:	9316      	str	r3, [sp, #88]	; 0x58
 800ec74:	46a0      	mov	r8, r4
 800ec76:	9b07      	ldr	r3, [sp, #28]
 800ec78:	4648      	mov	r0, r9
 800ec7a:	6859      	ldr	r1, [r3, #4]
 800ec7c:	f002 f811 	bl	8010ca2 <_Balloc>
 800ec80:	9005      	str	r0, [sp, #20]
 800ec82:	2800      	cmp	r0, #0
 800ec84:	f43f aef6 	beq.w	800ea74 <_strtod_l+0x43c>
 800ec88:	9b07      	ldr	r3, [sp, #28]
 800ec8a:	691a      	ldr	r2, [r3, #16]
 800ec8c:	3202      	adds	r2, #2
 800ec8e:	f103 010c 	add.w	r1, r3, #12
 800ec92:	0092      	lsls	r2, r2, #2
 800ec94:	300c      	adds	r0, #12
 800ec96:	f001 fff9 	bl	8010c8c <memcpy>
 800ec9a:	aa1e      	add	r2, sp, #120	; 0x78
 800ec9c:	a91d      	add	r1, sp, #116	; 0x74
 800ec9e:	ec4b ab10 	vmov	d0, sl, fp
 800eca2:	4648      	mov	r0, r9
 800eca4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800eca8:	f002 fb3c 	bl	8011324 <__d2b>
 800ecac:	901c      	str	r0, [sp, #112]	; 0x70
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f43f aee0 	beq.w	800ea74 <_strtod_l+0x43c>
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	4648      	mov	r0, r9
 800ecb8:	f002 f905 	bl	8010ec6 <__i2b>
 800ecbc:	4680      	mov	r8, r0
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	f43f aed8 	beq.w	800ea74 <_strtod_l+0x43c>
 800ecc4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ecc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ecc8:	2e00      	cmp	r6, #0
 800ecca:	bfab      	itete	ge
 800eccc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ecce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ecd0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ecd2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ecd4:	bfac      	ite	ge
 800ecd6:	18f7      	addge	r7, r6, r3
 800ecd8:	1b9d      	sublt	r5, r3, r6
 800ecda:	9b04      	ldr	r3, [sp, #16]
 800ecdc:	1af6      	subs	r6, r6, r3
 800ecde:	4416      	add	r6, r2
 800ece0:	4b63      	ldr	r3, [pc, #396]	; (800ee70 <_strtod_l+0x838>)
 800ece2:	3e01      	subs	r6, #1
 800ece4:	429e      	cmp	r6, r3
 800ece6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ecea:	f280 80af 	bge.w	800ee4c <_strtod_l+0x814>
 800ecee:	1b9b      	subs	r3, r3, r6
 800ecf0:	2b1f      	cmp	r3, #31
 800ecf2:	eba2 0203 	sub.w	r2, r2, r3
 800ecf6:	f04f 0101 	mov.w	r1, #1
 800ecfa:	f300 809b 	bgt.w	800ee34 <_strtod_l+0x7fc>
 800ecfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ed02:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed04:	2300      	movs	r3, #0
 800ed06:	930a      	str	r3, [sp, #40]	; 0x28
 800ed08:	18be      	adds	r6, r7, r2
 800ed0a:	9b04      	ldr	r3, [sp, #16]
 800ed0c:	42b7      	cmp	r7, r6
 800ed0e:	4415      	add	r5, r2
 800ed10:	441d      	add	r5, r3
 800ed12:	463b      	mov	r3, r7
 800ed14:	bfa8      	it	ge
 800ed16:	4633      	movge	r3, r6
 800ed18:	42ab      	cmp	r3, r5
 800ed1a:	bfa8      	it	ge
 800ed1c:	462b      	movge	r3, r5
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bfc2      	ittt	gt
 800ed22:	1af6      	subgt	r6, r6, r3
 800ed24:	1aed      	subgt	r5, r5, r3
 800ed26:	1aff      	subgt	r7, r7, r3
 800ed28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed2a:	b1bb      	cbz	r3, 800ed5c <_strtod_l+0x724>
 800ed2c:	4641      	mov	r1, r8
 800ed2e:	461a      	mov	r2, r3
 800ed30:	4648      	mov	r0, r9
 800ed32:	f002 f967 	bl	8011004 <__pow5mult>
 800ed36:	4680      	mov	r8, r0
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	f43f ae9b 	beq.w	800ea74 <_strtod_l+0x43c>
 800ed3e:	4601      	mov	r1, r0
 800ed40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed42:	4648      	mov	r0, r9
 800ed44:	f002 f8c8 	bl	8010ed8 <__multiply>
 800ed48:	900c      	str	r0, [sp, #48]	; 0x30
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	f43f ae92 	beq.w	800ea74 <_strtod_l+0x43c>
 800ed50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed52:	4648      	mov	r0, r9
 800ed54:	f001 ffd9 	bl	8010d0a <_Bfree>
 800ed58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed5a:	931c      	str	r3, [sp, #112]	; 0x70
 800ed5c:	2e00      	cmp	r6, #0
 800ed5e:	dc7a      	bgt.n	800ee56 <_strtod_l+0x81e>
 800ed60:	9b06      	ldr	r3, [sp, #24]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	dd08      	ble.n	800ed78 <_strtod_l+0x740>
 800ed66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed68:	9905      	ldr	r1, [sp, #20]
 800ed6a:	4648      	mov	r0, r9
 800ed6c:	f002 f94a 	bl	8011004 <__pow5mult>
 800ed70:	9005      	str	r0, [sp, #20]
 800ed72:	2800      	cmp	r0, #0
 800ed74:	f43f ae7e 	beq.w	800ea74 <_strtod_l+0x43c>
 800ed78:	2d00      	cmp	r5, #0
 800ed7a:	dd08      	ble.n	800ed8e <_strtod_l+0x756>
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	9905      	ldr	r1, [sp, #20]
 800ed80:	4648      	mov	r0, r9
 800ed82:	f002 f98d 	bl	80110a0 <__lshift>
 800ed86:	9005      	str	r0, [sp, #20]
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f43f ae73 	beq.w	800ea74 <_strtod_l+0x43c>
 800ed8e:	2f00      	cmp	r7, #0
 800ed90:	dd08      	ble.n	800eda4 <_strtod_l+0x76c>
 800ed92:	4641      	mov	r1, r8
 800ed94:	463a      	mov	r2, r7
 800ed96:	4648      	mov	r0, r9
 800ed98:	f002 f982 	bl	80110a0 <__lshift>
 800ed9c:	4680      	mov	r8, r0
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	f43f ae68 	beq.w	800ea74 <_strtod_l+0x43c>
 800eda4:	9a05      	ldr	r2, [sp, #20]
 800eda6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eda8:	4648      	mov	r0, r9
 800edaa:	f002 f9e7 	bl	801117c <__mdiff>
 800edae:	4604      	mov	r4, r0
 800edb0:	2800      	cmp	r0, #0
 800edb2:	f43f ae5f 	beq.w	800ea74 <_strtod_l+0x43c>
 800edb6:	68c3      	ldr	r3, [r0, #12]
 800edb8:	930c      	str	r3, [sp, #48]	; 0x30
 800edba:	2300      	movs	r3, #0
 800edbc:	60c3      	str	r3, [r0, #12]
 800edbe:	4641      	mov	r1, r8
 800edc0:	f002 f9c2 	bl	8011148 <__mcmp>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	da55      	bge.n	800ee74 <_strtod_l+0x83c>
 800edc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edca:	b9e3      	cbnz	r3, 800ee06 <_strtod_l+0x7ce>
 800edcc:	f1ba 0f00 	cmp.w	sl, #0
 800edd0:	d119      	bne.n	800ee06 <_strtod_l+0x7ce>
 800edd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edd6:	b9b3      	cbnz	r3, 800ee06 <_strtod_l+0x7ce>
 800edd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eddc:	0d1b      	lsrs	r3, r3, #20
 800edde:	051b      	lsls	r3, r3, #20
 800ede0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ede4:	d90f      	bls.n	800ee06 <_strtod_l+0x7ce>
 800ede6:	6963      	ldr	r3, [r4, #20]
 800ede8:	b913      	cbnz	r3, 800edf0 <_strtod_l+0x7b8>
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	2b01      	cmp	r3, #1
 800edee:	dd0a      	ble.n	800ee06 <_strtod_l+0x7ce>
 800edf0:	4621      	mov	r1, r4
 800edf2:	2201      	movs	r2, #1
 800edf4:	4648      	mov	r0, r9
 800edf6:	f002 f953 	bl	80110a0 <__lshift>
 800edfa:	4641      	mov	r1, r8
 800edfc:	4604      	mov	r4, r0
 800edfe:	f002 f9a3 	bl	8011148 <__mcmp>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	dc67      	bgt.n	800eed6 <_strtod_l+0x89e>
 800ee06:	9b04      	ldr	r3, [sp, #16]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d171      	bne.n	800eef0 <_strtod_l+0x8b8>
 800ee0c:	e63d      	b.n	800ea8a <_strtod_l+0x452>
 800ee0e:	f018 0f01 	tst.w	r8, #1
 800ee12:	d004      	beq.n	800ee1e <_strtod_l+0x7e6>
 800ee14:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee18:	f7f1 fc06 	bl	8000628 <__aeabi_dmul>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ee22:	3508      	adds	r5, #8
 800ee24:	e6e5      	b.n	800ebf2 <_strtod_l+0x5ba>
 800ee26:	f04f 32ff 	mov.w	r2, #4294967295
 800ee2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2e:	ea03 0a0a 	and.w	sl, r3, sl
 800ee32:	e6ff      	b.n	800ec34 <_strtod_l+0x5fc>
 800ee34:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ee38:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ee3c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ee40:	36e2      	adds	r6, #226	; 0xe2
 800ee42:	fa01 f306 	lsl.w	r3, r1, r6
 800ee46:	930a      	str	r3, [sp, #40]	; 0x28
 800ee48:	910f      	str	r1, [sp, #60]	; 0x3c
 800ee4a:	e75d      	b.n	800ed08 <_strtod_l+0x6d0>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee50:	2301      	movs	r3, #1
 800ee52:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee54:	e758      	b.n	800ed08 <_strtod_l+0x6d0>
 800ee56:	4632      	mov	r2, r6
 800ee58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee5a:	4648      	mov	r0, r9
 800ee5c:	f002 f920 	bl	80110a0 <__lshift>
 800ee60:	901c      	str	r0, [sp, #112]	; 0x70
 800ee62:	2800      	cmp	r0, #0
 800ee64:	f47f af7c 	bne.w	800ed60 <_strtod_l+0x728>
 800ee68:	e604      	b.n	800ea74 <_strtod_l+0x43c>
 800ee6a:	bf00      	nop
 800ee6c:	08012ad8 	.word	0x08012ad8
 800ee70:	fffffc02 	.word	0xfffffc02
 800ee74:	465d      	mov	r5, fp
 800ee76:	f040 8086 	bne.w	800ef86 <_strtod_l+0x94e>
 800ee7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee80:	b32a      	cbz	r2, 800eece <_strtod_l+0x896>
 800ee82:	4aaf      	ldr	r2, [pc, #700]	; (800f140 <_strtod_l+0xb08>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d153      	bne.n	800ef30 <_strtod_l+0x8f8>
 800ee88:	9b04      	ldr	r3, [sp, #16]
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	b1d3      	cbz	r3, 800eec4 <_strtod_l+0x88c>
 800ee8e:	4aad      	ldr	r2, [pc, #692]	; (800f144 <_strtod_l+0xb0c>)
 800ee90:	402a      	ands	r2, r5
 800ee92:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ee96:	f04f 31ff 	mov.w	r1, #4294967295
 800ee9a:	d816      	bhi.n	800eeca <_strtod_l+0x892>
 800ee9c:	0d12      	lsrs	r2, r2, #20
 800ee9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eea2:	fa01 f303 	lsl.w	r3, r1, r3
 800eea6:	4298      	cmp	r0, r3
 800eea8:	d142      	bne.n	800ef30 <_strtod_l+0x8f8>
 800eeaa:	4ba7      	ldr	r3, [pc, #668]	; (800f148 <_strtod_l+0xb10>)
 800eeac:	429d      	cmp	r5, r3
 800eeae:	d102      	bne.n	800eeb6 <_strtod_l+0x87e>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	f43f addf 	beq.w	800ea74 <_strtod_l+0x43c>
 800eeb6:	4ba3      	ldr	r3, [pc, #652]	; (800f144 <_strtod_l+0xb0c>)
 800eeb8:	402b      	ands	r3, r5
 800eeba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eebe:	f04f 0a00 	mov.w	sl, #0
 800eec2:	e7a0      	b.n	800ee06 <_strtod_l+0x7ce>
 800eec4:	f04f 33ff 	mov.w	r3, #4294967295
 800eec8:	e7ed      	b.n	800eea6 <_strtod_l+0x86e>
 800eeca:	460b      	mov	r3, r1
 800eecc:	e7eb      	b.n	800eea6 <_strtod_l+0x86e>
 800eece:	bb7b      	cbnz	r3, 800ef30 <_strtod_l+0x8f8>
 800eed0:	f1ba 0f00 	cmp.w	sl, #0
 800eed4:	d12c      	bne.n	800ef30 <_strtod_l+0x8f8>
 800eed6:	9904      	ldr	r1, [sp, #16]
 800eed8:	4a9a      	ldr	r2, [pc, #616]	; (800f144 <_strtod_l+0xb0c>)
 800eeda:	465b      	mov	r3, fp
 800eedc:	b1f1      	cbz	r1, 800ef1c <_strtod_l+0x8e4>
 800eede:	ea02 010b 	and.w	r1, r2, fp
 800eee2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eee6:	dc19      	bgt.n	800ef1c <_strtod_l+0x8e4>
 800eee8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eeec:	f77f ae5b 	ble.w	800eba6 <_strtod_l+0x56e>
 800eef0:	4a96      	ldr	r2, [pc, #600]	; (800f14c <_strtod_l+0xb14>)
 800eef2:	2300      	movs	r3, #0
 800eef4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800eef8:	4650      	mov	r0, sl
 800eefa:	4659      	mov	r1, fp
 800eefc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ef00:	f7f1 fb92 	bl	8000628 <__aeabi_dmul>
 800ef04:	4682      	mov	sl, r0
 800ef06:	468b      	mov	fp, r1
 800ef08:	2900      	cmp	r1, #0
 800ef0a:	f47f adbe 	bne.w	800ea8a <_strtod_l+0x452>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	f47f adbb 	bne.w	800ea8a <_strtod_l+0x452>
 800ef14:	2322      	movs	r3, #34	; 0x22
 800ef16:	f8c9 3000 	str.w	r3, [r9]
 800ef1a:	e5b6      	b.n	800ea8a <_strtod_l+0x452>
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef22:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef26:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ef2e:	e76a      	b.n	800ee06 <_strtod_l+0x7ce>
 800ef30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef32:	b193      	cbz	r3, 800ef5a <_strtod_l+0x922>
 800ef34:	422b      	tst	r3, r5
 800ef36:	f43f af66 	beq.w	800ee06 <_strtod_l+0x7ce>
 800ef3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef3c:	9a04      	ldr	r2, [sp, #16]
 800ef3e:	4650      	mov	r0, sl
 800ef40:	4659      	mov	r1, fp
 800ef42:	b173      	cbz	r3, 800ef62 <_strtod_l+0x92a>
 800ef44:	f7ff fb59 	bl	800e5fa <sulp>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef50:	f7f1 f9b4 	bl	80002bc <__adddf3>
 800ef54:	4682      	mov	sl, r0
 800ef56:	468b      	mov	fp, r1
 800ef58:	e755      	b.n	800ee06 <_strtod_l+0x7ce>
 800ef5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef5c:	ea13 0f0a 	tst.w	r3, sl
 800ef60:	e7e9      	b.n	800ef36 <_strtod_l+0x8fe>
 800ef62:	f7ff fb4a 	bl	800e5fa <sulp>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef6e:	f7f1 f9a3 	bl	80002b8 <__aeabi_dsub>
 800ef72:	2200      	movs	r2, #0
 800ef74:	2300      	movs	r3, #0
 800ef76:	4682      	mov	sl, r0
 800ef78:	468b      	mov	fp, r1
 800ef7a:	f7f1 fdbd 	bl	8000af8 <__aeabi_dcmpeq>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	f47f ae11 	bne.w	800eba6 <_strtod_l+0x56e>
 800ef84:	e73f      	b.n	800ee06 <_strtod_l+0x7ce>
 800ef86:	4641      	mov	r1, r8
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f002 fa1a 	bl	80113c2 <__ratio>
 800ef8e:	ec57 6b10 	vmov	r6, r7, d0
 800ef92:	2200      	movs	r2, #0
 800ef94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef98:	ee10 0a10 	vmov	r0, s0
 800ef9c:	4639      	mov	r1, r7
 800ef9e:	f7f1 fdbf 	bl	8000b20 <__aeabi_dcmple>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d077      	beq.n	800f096 <_strtod_l+0xa5e>
 800efa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d04a      	beq.n	800f042 <_strtod_l+0xa0a>
 800efac:	4b68      	ldr	r3, [pc, #416]	; (800f150 <_strtod_l+0xb18>)
 800efae:	2200      	movs	r2, #0
 800efb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800efb4:	4f66      	ldr	r7, [pc, #408]	; (800f150 <_strtod_l+0xb18>)
 800efb6:	2600      	movs	r6, #0
 800efb8:	4b62      	ldr	r3, [pc, #392]	; (800f144 <_strtod_l+0xb0c>)
 800efba:	402b      	ands	r3, r5
 800efbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800efbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800efc0:	4b64      	ldr	r3, [pc, #400]	; (800f154 <_strtod_l+0xb1c>)
 800efc2:	429a      	cmp	r2, r3
 800efc4:	f040 80ce 	bne.w	800f164 <_strtod_l+0xb2c>
 800efc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800efcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800efd0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800efd4:	ec4b ab10 	vmov	d0, sl, fp
 800efd8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800efdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800efe0:	f002 f92a 	bl	8011238 <__ulp>
 800efe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800efe8:	ec53 2b10 	vmov	r2, r3, d0
 800efec:	f7f1 fb1c 	bl	8000628 <__aeabi_dmul>
 800eff0:	4652      	mov	r2, sl
 800eff2:	465b      	mov	r3, fp
 800eff4:	f7f1 f962 	bl	80002bc <__adddf3>
 800eff8:	460b      	mov	r3, r1
 800effa:	4952      	ldr	r1, [pc, #328]	; (800f144 <_strtod_l+0xb0c>)
 800effc:	4a56      	ldr	r2, [pc, #344]	; (800f158 <_strtod_l+0xb20>)
 800effe:	4019      	ands	r1, r3
 800f000:	4291      	cmp	r1, r2
 800f002:	4682      	mov	sl, r0
 800f004:	d95b      	bls.n	800f0be <_strtod_l+0xa86>
 800f006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f008:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d103      	bne.n	800f018 <_strtod_l+0x9e0>
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	3301      	adds	r3, #1
 800f014:	f43f ad2e 	beq.w	800ea74 <_strtod_l+0x43c>
 800f018:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f148 <_strtod_l+0xb10>
 800f01c:	f04f 3aff 	mov.w	sl, #4294967295
 800f020:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f022:	4648      	mov	r0, r9
 800f024:	f001 fe71 	bl	8010d0a <_Bfree>
 800f028:	9905      	ldr	r1, [sp, #20]
 800f02a:	4648      	mov	r0, r9
 800f02c:	f001 fe6d 	bl	8010d0a <_Bfree>
 800f030:	4641      	mov	r1, r8
 800f032:	4648      	mov	r0, r9
 800f034:	f001 fe69 	bl	8010d0a <_Bfree>
 800f038:	4621      	mov	r1, r4
 800f03a:	4648      	mov	r0, r9
 800f03c:	f001 fe65 	bl	8010d0a <_Bfree>
 800f040:	e619      	b.n	800ec76 <_strtod_l+0x63e>
 800f042:	f1ba 0f00 	cmp.w	sl, #0
 800f046:	d11a      	bne.n	800f07e <_strtod_l+0xa46>
 800f048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f04c:	b9eb      	cbnz	r3, 800f08a <_strtod_l+0xa52>
 800f04e:	2200      	movs	r2, #0
 800f050:	4b3f      	ldr	r3, [pc, #252]	; (800f150 <_strtod_l+0xb18>)
 800f052:	4630      	mov	r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 fd59 	bl	8000b0c <__aeabi_dcmplt>
 800f05a:	b9c8      	cbnz	r0, 800f090 <_strtod_l+0xa58>
 800f05c:	4630      	mov	r0, r6
 800f05e:	4639      	mov	r1, r7
 800f060:	2200      	movs	r2, #0
 800f062:	4b3e      	ldr	r3, [pc, #248]	; (800f15c <_strtod_l+0xb24>)
 800f064:	f7f1 fae0 	bl	8000628 <__aeabi_dmul>
 800f068:	4606      	mov	r6, r0
 800f06a:	460f      	mov	r7, r1
 800f06c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f070:	9618      	str	r6, [sp, #96]	; 0x60
 800f072:	9319      	str	r3, [sp, #100]	; 0x64
 800f074:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f078:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f07c:	e79c      	b.n	800efb8 <_strtod_l+0x980>
 800f07e:	f1ba 0f01 	cmp.w	sl, #1
 800f082:	d102      	bne.n	800f08a <_strtod_l+0xa52>
 800f084:	2d00      	cmp	r5, #0
 800f086:	f43f ad8e 	beq.w	800eba6 <_strtod_l+0x56e>
 800f08a:	2200      	movs	r2, #0
 800f08c:	4b34      	ldr	r3, [pc, #208]	; (800f160 <_strtod_l+0xb28>)
 800f08e:	e78f      	b.n	800efb0 <_strtod_l+0x978>
 800f090:	2600      	movs	r6, #0
 800f092:	4f32      	ldr	r7, [pc, #200]	; (800f15c <_strtod_l+0xb24>)
 800f094:	e7ea      	b.n	800f06c <_strtod_l+0xa34>
 800f096:	4b31      	ldr	r3, [pc, #196]	; (800f15c <_strtod_l+0xb24>)
 800f098:	4630      	mov	r0, r6
 800f09a:	4639      	mov	r1, r7
 800f09c:	2200      	movs	r2, #0
 800f09e:	f7f1 fac3 	bl	8000628 <__aeabi_dmul>
 800f0a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0a4:	4606      	mov	r6, r0
 800f0a6:	460f      	mov	r7, r1
 800f0a8:	b933      	cbnz	r3, 800f0b8 <_strtod_l+0xa80>
 800f0aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0ae:	9010      	str	r0, [sp, #64]	; 0x40
 800f0b0:	9311      	str	r3, [sp, #68]	; 0x44
 800f0b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f0b6:	e7df      	b.n	800f078 <_strtod_l+0xa40>
 800f0b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f0bc:	e7f9      	b.n	800f0b2 <_strtod_l+0xa7a>
 800f0be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f0c2:	9b04      	ldr	r3, [sp, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1ab      	bne.n	800f020 <_strtod_l+0x9e8>
 800f0c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0cc:	0d1b      	lsrs	r3, r3, #20
 800f0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0d0:	051b      	lsls	r3, r3, #20
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	465d      	mov	r5, fp
 800f0d6:	d1a3      	bne.n	800f020 <_strtod_l+0x9e8>
 800f0d8:	4639      	mov	r1, r7
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7f1 fd54 	bl	8000b88 <__aeabi_d2iz>
 800f0e0:	f7f1 fa38 	bl	8000554 <__aeabi_i2d>
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	4639      	mov	r1, r7
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	f7f1 f8e4 	bl	80002b8 <__aeabi_dsub>
 800f0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	460f      	mov	r7, r1
 800f0f6:	b933      	cbnz	r3, 800f106 <_strtod_l+0xace>
 800f0f8:	f1ba 0f00 	cmp.w	sl, #0
 800f0fc:	d103      	bne.n	800f106 <_strtod_l+0xace>
 800f0fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f102:	2d00      	cmp	r5, #0
 800f104:	d06d      	beq.n	800f1e2 <_strtod_l+0xbaa>
 800f106:	a30a      	add	r3, pc, #40	; (adr r3, 800f130 <_strtod_l+0xaf8>)
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	4630      	mov	r0, r6
 800f10e:	4639      	mov	r1, r7
 800f110:	f7f1 fcfc 	bl	8000b0c <__aeabi_dcmplt>
 800f114:	2800      	cmp	r0, #0
 800f116:	f47f acb8 	bne.w	800ea8a <_strtod_l+0x452>
 800f11a:	a307      	add	r3, pc, #28	; (adr r3, 800f138 <_strtod_l+0xb00>)
 800f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f120:	4630      	mov	r0, r6
 800f122:	4639      	mov	r1, r7
 800f124:	f7f1 fd10 	bl	8000b48 <__aeabi_dcmpgt>
 800f128:	2800      	cmp	r0, #0
 800f12a:	f43f af79 	beq.w	800f020 <_strtod_l+0x9e8>
 800f12e:	e4ac      	b.n	800ea8a <_strtod_l+0x452>
 800f130:	94a03595 	.word	0x94a03595
 800f134:	3fdfffff 	.word	0x3fdfffff
 800f138:	35afe535 	.word	0x35afe535
 800f13c:	3fe00000 	.word	0x3fe00000
 800f140:	000fffff 	.word	0x000fffff
 800f144:	7ff00000 	.word	0x7ff00000
 800f148:	7fefffff 	.word	0x7fefffff
 800f14c:	39500000 	.word	0x39500000
 800f150:	3ff00000 	.word	0x3ff00000
 800f154:	7fe00000 	.word	0x7fe00000
 800f158:	7c9fffff 	.word	0x7c9fffff
 800f15c:	3fe00000 	.word	0x3fe00000
 800f160:	bff00000 	.word	0xbff00000
 800f164:	9b04      	ldr	r3, [sp, #16]
 800f166:	b333      	cbz	r3, 800f1b6 <_strtod_l+0xb7e>
 800f168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f16a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f16e:	d822      	bhi.n	800f1b6 <_strtod_l+0xb7e>
 800f170:	a327      	add	r3, pc, #156	; (adr r3, 800f210 <_strtod_l+0xbd8>)
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	4630      	mov	r0, r6
 800f178:	4639      	mov	r1, r7
 800f17a:	f7f1 fcd1 	bl	8000b20 <__aeabi_dcmple>
 800f17e:	b1a0      	cbz	r0, 800f1aa <_strtod_l+0xb72>
 800f180:	4639      	mov	r1, r7
 800f182:	4630      	mov	r0, r6
 800f184:	f7f1 fd28 	bl	8000bd8 <__aeabi_d2uiz>
 800f188:	2800      	cmp	r0, #0
 800f18a:	bf08      	it	eq
 800f18c:	2001      	moveq	r0, #1
 800f18e:	f7f1 f9d1 	bl	8000534 <__aeabi_ui2d>
 800f192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f194:	4606      	mov	r6, r0
 800f196:	460f      	mov	r7, r1
 800f198:	bb03      	cbnz	r3, 800f1dc <_strtod_l+0xba4>
 800f19a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f19e:	9012      	str	r0, [sp, #72]	; 0x48
 800f1a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f1a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f1a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f1b2:	1a9b      	subs	r3, r3, r2
 800f1b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f1ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f1be:	f002 f83b 	bl	8011238 <__ulp>
 800f1c2:	4650      	mov	r0, sl
 800f1c4:	ec53 2b10 	vmov	r2, r3, d0
 800f1c8:	4659      	mov	r1, fp
 800f1ca:	f7f1 fa2d 	bl	8000628 <__aeabi_dmul>
 800f1ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1d2:	f7f1 f873 	bl	80002bc <__adddf3>
 800f1d6:	4682      	mov	sl, r0
 800f1d8:	468b      	mov	fp, r1
 800f1da:	e772      	b.n	800f0c2 <_strtod_l+0xa8a>
 800f1dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f1e0:	e7df      	b.n	800f1a2 <_strtod_l+0xb6a>
 800f1e2:	a30d      	add	r3, pc, #52	; (adr r3, 800f218 <_strtod_l+0xbe0>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	f7f1 fc90 	bl	8000b0c <__aeabi_dcmplt>
 800f1ec:	e79c      	b.n	800f128 <_strtod_l+0xaf0>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	930d      	str	r3, [sp, #52]	; 0x34
 800f1f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f1f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1f6:	6013      	str	r3, [r2, #0]
 800f1f8:	f7ff ba61 	b.w	800e6be <_strtod_l+0x86>
 800f1fc:	2b65      	cmp	r3, #101	; 0x65
 800f1fe:	f04f 0200 	mov.w	r2, #0
 800f202:	f43f ab4e 	beq.w	800e8a2 <_strtod_l+0x26a>
 800f206:	2101      	movs	r1, #1
 800f208:	4614      	mov	r4, r2
 800f20a:	9104      	str	r1, [sp, #16]
 800f20c:	f7ff bacb 	b.w	800e7a6 <_strtod_l+0x16e>
 800f210:	ffc00000 	.word	0xffc00000
 800f214:	41dfffff 	.word	0x41dfffff
 800f218:	94a03595 	.word	0x94a03595
 800f21c:	3fcfffff 	.word	0x3fcfffff

0800f220 <_strtod_r>:
 800f220:	4b05      	ldr	r3, [pc, #20]	; (800f238 <_strtod_r+0x18>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	b410      	push	{r4}
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	4c04      	ldr	r4, [pc, #16]	; (800f23c <_strtod_r+0x1c>)
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	bf08      	it	eq
 800f22e:	4623      	moveq	r3, r4
 800f230:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f234:	f7ff ba00 	b.w	800e638 <_strtod_l>
 800f238:	2000000c 	.word	0x2000000c
 800f23c:	20000070 	.word	0x20000070

0800f240 <_strtol_l.isra.0>:
 800f240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f244:	4680      	mov	r8, r0
 800f246:	4689      	mov	r9, r1
 800f248:	4692      	mov	sl, r2
 800f24a:	461e      	mov	r6, r3
 800f24c:	460f      	mov	r7, r1
 800f24e:	463d      	mov	r5, r7
 800f250:	9808      	ldr	r0, [sp, #32]
 800f252:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f256:	f001 fc67 	bl	8010b28 <__locale_ctype_ptr_l>
 800f25a:	4420      	add	r0, r4
 800f25c:	7843      	ldrb	r3, [r0, #1]
 800f25e:	f013 0308 	ands.w	r3, r3, #8
 800f262:	d132      	bne.n	800f2ca <_strtol_l.isra.0+0x8a>
 800f264:	2c2d      	cmp	r4, #45	; 0x2d
 800f266:	d132      	bne.n	800f2ce <_strtol_l.isra.0+0x8e>
 800f268:	787c      	ldrb	r4, [r7, #1]
 800f26a:	1cbd      	adds	r5, r7, #2
 800f26c:	2201      	movs	r2, #1
 800f26e:	2e00      	cmp	r6, #0
 800f270:	d05d      	beq.n	800f32e <_strtol_l.isra.0+0xee>
 800f272:	2e10      	cmp	r6, #16
 800f274:	d109      	bne.n	800f28a <_strtol_l.isra.0+0x4a>
 800f276:	2c30      	cmp	r4, #48	; 0x30
 800f278:	d107      	bne.n	800f28a <_strtol_l.isra.0+0x4a>
 800f27a:	782b      	ldrb	r3, [r5, #0]
 800f27c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f280:	2b58      	cmp	r3, #88	; 0x58
 800f282:	d14f      	bne.n	800f324 <_strtol_l.isra.0+0xe4>
 800f284:	786c      	ldrb	r4, [r5, #1]
 800f286:	2610      	movs	r6, #16
 800f288:	3502      	adds	r5, #2
 800f28a:	2a00      	cmp	r2, #0
 800f28c:	bf14      	ite	ne
 800f28e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f292:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f296:	2700      	movs	r7, #0
 800f298:	fbb1 fcf6 	udiv	ip, r1, r6
 800f29c:	4638      	mov	r0, r7
 800f29e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f2a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	d817      	bhi.n	800f2da <_strtol_l.isra.0+0x9a>
 800f2aa:	461c      	mov	r4, r3
 800f2ac:	42a6      	cmp	r6, r4
 800f2ae:	dd23      	ble.n	800f2f8 <_strtol_l.isra.0+0xb8>
 800f2b0:	1c7b      	adds	r3, r7, #1
 800f2b2:	d007      	beq.n	800f2c4 <_strtol_l.isra.0+0x84>
 800f2b4:	4584      	cmp	ip, r0
 800f2b6:	d31c      	bcc.n	800f2f2 <_strtol_l.isra.0+0xb2>
 800f2b8:	d101      	bne.n	800f2be <_strtol_l.isra.0+0x7e>
 800f2ba:	45a6      	cmp	lr, r4
 800f2bc:	db19      	blt.n	800f2f2 <_strtol_l.isra.0+0xb2>
 800f2be:	fb00 4006 	mla	r0, r0, r6, r4
 800f2c2:	2701      	movs	r7, #1
 800f2c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2c8:	e7eb      	b.n	800f2a2 <_strtol_l.isra.0+0x62>
 800f2ca:	462f      	mov	r7, r5
 800f2cc:	e7bf      	b.n	800f24e <_strtol_l.isra.0+0xe>
 800f2ce:	2c2b      	cmp	r4, #43	; 0x2b
 800f2d0:	bf04      	itt	eq
 800f2d2:	1cbd      	addeq	r5, r7, #2
 800f2d4:	787c      	ldrbeq	r4, [r7, #1]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	e7c9      	b.n	800f26e <_strtol_l.isra.0+0x2e>
 800f2da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f2de:	2b19      	cmp	r3, #25
 800f2e0:	d801      	bhi.n	800f2e6 <_strtol_l.isra.0+0xa6>
 800f2e2:	3c37      	subs	r4, #55	; 0x37
 800f2e4:	e7e2      	b.n	800f2ac <_strtol_l.isra.0+0x6c>
 800f2e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f2ea:	2b19      	cmp	r3, #25
 800f2ec:	d804      	bhi.n	800f2f8 <_strtol_l.isra.0+0xb8>
 800f2ee:	3c57      	subs	r4, #87	; 0x57
 800f2f0:	e7dc      	b.n	800f2ac <_strtol_l.isra.0+0x6c>
 800f2f2:	f04f 37ff 	mov.w	r7, #4294967295
 800f2f6:	e7e5      	b.n	800f2c4 <_strtol_l.isra.0+0x84>
 800f2f8:	1c7b      	adds	r3, r7, #1
 800f2fa:	d108      	bne.n	800f30e <_strtol_l.isra.0+0xce>
 800f2fc:	2322      	movs	r3, #34	; 0x22
 800f2fe:	f8c8 3000 	str.w	r3, [r8]
 800f302:	4608      	mov	r0, r1
 800f304:	f1ba 0f00 	cmp.w	sl, #0
 800f308:	d107      	bne.n	800f31a <_strtol_l.isra.0+0xda>
 800f30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f30e:	b102      	cbz	r2, 800f312 <_strtol_l.isra.0+0xd2>
 800f310:	4240      	negs	r0, r0
 800f312:	f1ba 0f00 	cmp.w	sl, #0
 800f316:	d0f8      	beq.n	800f30a <_strtol_l.isra.0+0xca>
 800f318:	b10f      	cbz	r7, 800f31e <_strtol_l.isra.0+0xde>
 800f31a:	f105 39ff 	add.w	r9, r5, #4294967295
 800f31e:	f8ca 9000 	str.w	r9, [sl]
 800f322:	e7f2      	b.n	800f30a <_strtol_l.isra.0+0xca>
 800f324:	2430      	movs	r4, #48	; 0x30
 800f326:	2e00      	cmp	r6, #0
 800f328:	d1af      	bne.n	800f28a <_strtol_l.isra.0+0x4a>
 800f32a:	2608      	movs	r6, #8
 800f32c:	e7ad      	b.n	800f28a <_strtol_l.isra.0+0x4a>
 800f32e:	2c30      	cmp	r4, #48	; 0x30
 800f330:	d0a3      	beq.n	800f27a <_strtol_l.isra.0+0x3a>
 800f332:	260a      	movs	r6, #10
 800f334:	e7a9      	b.n	800f28a <_strtol_l.isra.0+0x4a>
	...

0800f338 <_strtol_r>:
 800f338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f33a:	4c06      	ldr	r4, [pc, #24]	; (800f354 <_strtol_r+0x1c>)
 800f33c:	4d06      	ldr	r5, [pc, #24]	; (800f358 <_strtol_r+0x20>)
 800f33e:	6824      	ldr	r4, [r4, #0]
 800f340:	6a24      	ldr	r4, [r4, #32]
 800f342:	2c00      	cmp	r4, #0
 800f344:	bf08      	it	eq
 800f346:	462c      	moveq	r4, r5
 800f348:	9400      	str	r4, [sp, #0]
 800f34a:	f7ff ff79 	bl	800f240 <_strtol_l.isra.0>
 800f34e:	b003      	add	sp, #12
 800f350:	bd30      	pop	{r4, r5, pc}
 800f352:	bf00      	nop
 800f354:	2000000c 	.word	0x2000000c
 800f358:	20000070 	.word	0x20000070

0800f35c <_vsiprintf_r>:
 800f35c:	b500      	push	{lr}
 800f35e:	b09b      	sub	sp, #108	; 0x6c
 800f360:	9100      	str	r1, [sp, #0]
 800f362:	9104      	str	r1, [sp, #16]
 800f364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f368:	9105      	str	r1, [sp, #20]
 800f36a:	9102      	str	r1, [sp, #8]
 800f36c:	4905      	ldr	r1, [pc, #20]	; (800f384 <_vsiprintf_r+0x28>)
 800f36e:	9103      	str	r1, [sp, #12]
 800f370:	4669      	mov	r1, sp
 800f372:	f002 f9a5 	bl	80116c0 <_svfiprintf_r>
 800f376:	9b00      	ldr	r3, [sp, #0]
 800f378:	2200      	movs	r2, #0
 800f37a:	701a      	strb	r2, [r3, #0]
 800f37c:	b01b      	add	sp, #108	; 0x6c
 800f37e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f382:	bf00      	nop
 800f384:	ffff0208 	.word	0xffff0208

0800f388 <vsiprintf>:
 800f388:	4613      	mov	r3, r2
 800f38a:	460a      	mov	r2, r1
 800f38c:	4601      	mov	r1, r0
 800f38e:	4802      	ldr	r0, [pc, #8]	; (800f398 <vsiprintf+0x10>)
 800f390:	6800      	ldr	r0, [r0, #0]
 800f392:	f7ff bfe3 	b.w	800f35c <_vsiprintf_r>
 800f396:	bf00      	nop
 800f398:	2000000c 	.word	0x2000000c

0800f39c <__swbuf_r>:
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	460e      	mov	r6, r1
 800f3a0:	4614      	mov	r4, r2
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	b118      	cbz	r0, 800f3ae <__swbuf_r+0x12>
 800f3a6:	6983      	ldr	r3, [r0, #24]
 800f3a8:	b90b      	cbnz	r3, 800f3ae <__swbuf_r+0x12>
 800f3aa:	f001 f80d 	bl	80103c8 <__sinit>
 800f3ae:	4b21      	ldr	r3, [pc, #132]	; (800f434 <__swbuf_r+0x98>)
 800f3b0:	429c      	cmp	r4, r3
 800f3b2:	d12a      	bne.n	800f40a <__swbuf_r+0x6e>
 800f3b4:	686c      	ldr	r4, [r5, #4]
 800f3b6:	69a3      	ldr	r3, [r4, #24]
 800f3b8:	60a3      	str	r3, [r4, #8]
 800f3ba:	89a3      	ldrh	r3, [r4, #12]
 800f3bc:	071a      	lsls	r2, r3, #28
 800f3be:	d52e      	bpl.n	800f41e <__swbuf_r+0x82>
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	b363      	cbz	r3, 800f41e <__swbuf_r+0x82>
 800f3c4:	6923      	ldr	r3, [r4, #16]
 800f3c6:	6820      	ldr	r0, [r4, #0]
 800f3c8:	1ac0      	subs	r0, r0, r3
 800f3ca:	6963      	ldr	r3, [r4, #20]
 800f3cc:	b2f6      	uxtb	r6, r6
 800f3ce:	4283      	cmp	r3, r0
 800f3d0:	4637      	mov	r7, r6
 800f3d2:	dc04      	bgt.n	800f3de <__swbuf_r+0x42>
 800f3d4:	4621      	mov	r1, r4
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f000 ff8c 	bl	80102f4 <_fflush_r>
 800f3dc:	bb28      	cbnz	r0, 800f42a <__swbuf_r+0x8e>
 800f3de:	68a3      	ldr	r3, [r4, #8]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	60a3      	str	r3, [r4, #8]
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	6022      	str	r2, [r4, #0]
 800f3ea:	701e      	strb	r6, [r3, #0]
 800f3ec:	6963      	ldr	r3, [r4, #20]
 800f3ee:	3001      	adds	r0, #1
 800f3f0:	4283      	cmp	r3, r0
 800f3f2:	d004      	beq.n	800f3fe <__swbuf_r+0x62>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	07db      	lsls	r3, r3, #31
 800f3f8:	d519      	bpl.n	800f42e <__swbuf_r+0x92>
 800f3fa:	2e0a      	cmp	r6, #10
 800f3fc:	d117      	bne.n	800f42e <__swbuf_r+0x92>
 800f3fe:	4621      	mov	r1, r4
 800f400:	4628      	mov	r0, r5
 800f402:	f000 ff77 	bl	80102f4 <_fflush_r>
 800f406:	b190      	cbz	r0, 800f42e <__swbuf_r+0x92>
 800f408:	e00f      	b.n	800f42a <__swbuf_r+0x8e>
 800f40a:	4b0b      	ldr	r3, [pc, #44]	; (800f438 <__swbuf_r+0x9c>)
 800f40c:	429c      	cmp	r4, r3
 800f40e:	d101      	bne.n	800f414 <__swbuf_r+0x78>
 800f410:	68ac      	ldr	r4, [r5, #8]
 800f412:	e7d0      	b.n	800f3b6 <__swbuf_r+0x1a>
 800f414:	4b09      	ldr	r3, [pc, #36]	; (800f43c <__swbuf_r+0xa0>)
 800f416:	429c      	cmp	r4, r3
 800f418:	bf08      	it	eq
 800f41a:	68ec      	ldreq	r4, [r5, #12]
 800f41c:	e7cb      	b.n	800f3b6 <__swbuf_r+0x1a>
 800f41e:	4621      	mov	r1, r4
 800f420:	4628      	mov	r0, r5
 800f422:	f000 f81f 	bl	800f464 <__swsetup_r>
 800f426:	2800      	cmp	r0, #0
 800f428:	d0cc      	beq.n	800f3c4 <__swbuf_r+0x28>
 800f42a:	f04f 37ff 	mov.w	r7, #4294967295
 800f42e:	4638      	mov	r0, r7
 800f430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f432:	bf00      	nop
 800f434:	08012b30 	.word	0x08012b30
 800f438:	08012b50 	.word	0x08012b50
 800f43c:	08012b10 	.word	0x08012b10

0800f440 <_write_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4c07      	ldr	r4, [pc, #28]	; (800f460 <_write_r+0x20>)
 800f444:	4605      	mov	r5, r0
 800f446:	4608      	mov	r0, r1
 800f448:	4611      	mov	r1, r2
 800f44a:	2200      	movs	r2, #0
 800f44c:	6022      	str	r2, [r4, #0]
 800f44e:	461a      	mov	r2, r3
 800f450:	f7f1 ffe1 	bl	8001416 <_write>
 800f454:	1c43      	adds	r3, r0, #1
 800f456:	d102      	bne.n	800f45e <_write_r+0x1e>
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	b103      	cbz	r3, 800f45e <_write_r+0x1e>
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	bd38      	pop	{r3, r4, r5, pc}
 800f460:	20004d40 	.word	0x20004d40

0800f464 <__swsetup_r>:
 800f464:	4b32      	ldr	r3, [pc, #200]	; (800f530 <__swsetup_r+0xcc>)
 800f466:	b570      	push	{r4, r5, r6, lr}
 800f468:	681d      	ldr	r5, [r3, #0]
 800f46a:	4606      	mov	r6, r0
 800f46c:	460c      	mov	r4, r1
 800f46e:	b125      	cbz	r5, 800f47a <__swsetup_r+0x16>
 800f470:	69ab      	ldr	r3, [r5, #24]
 800f472:	b913      	cbnz	r3, 800f47a <__swsetup_r+0x16>
 800f474:	4628      	mov	r0, r5
 800f476:	f000 ffa7 	bl	80103c8 <__sinit>
 800f47a:	4b2e      	ldr	r3, [pc, #184]	; (800f534 <__swsetup_r+0xd0>)
 800f47c:	429c      	cmp	r4, r3
 800f47e:	d10f      	bne.n	800f4a0 <__swsetup_r+0x3c>
 800f480:	686c      	ldr	r4, [r5, #4]
 800f482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f486:	b29a      	uxth	r2, r3
 800f488:	0715      	lsls	r5, r2, #28
 800f48a:	d42c      	bmi.n	800f4e6 <__swsetup_r+0x82>
 800f48c:	06d0      	lsls	r0, r2, #27
 800f48e:	d411      	bmi.n	800f4b4 <__swsetup_r+0x50>
 800f490:	2209      	movs	r2, #9
 800f492:	6032      	str	r2, [r6, #0]
 800f494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	f04f 30ff 	mov.w	r0, #4294967295
 800f49e:	e03e      	b.n	800f51e <__swsetup_r+0xba>
 800f4a0:	4b25      	ldr	r3, [pc, #148]	; (800f538 <__swsetup_r+0xd4>)
 800f4a2:	429c      	cmp	r4, r3
 800f4a4:	d101      	bne.n	800f4aa <__swsetup_r+0x46>
 800f4a6:	68ac      	ldr	r4, [r5, #8]
 800f4a8:	e7eb      	b.n	800f482 <__swsetup_r+0x1e>
 800f4aa:	4b24      	ldr	r3, [pc, #144]	; (800f53c <__swsetup_r+0xd8>)
 800f4ac:	429c      	cmp	r4, r3
 800f4ae:	bf08      	it	eq
 800f4b0:	68ec      	ldreq	r4, [r5, #12]
 800f4b2:	e7e6      	b.n	800f482 <__swsetup_r+0x1e>
 800f4b4:	0751      	lsls	r1, r2, #29
 800f4b6:	d512      	bpl.n	800f4de <__swsetup_r+0x7a>
 800f4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4ba:	b141      	cbz	r1, 800f4ce <__swsetup_r+0x6a>
 800f4bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4c0:	4299      	cmp	r1, r3
 800f4c2:	d002      	beq.n	800f4ca <__swsetup_r+0x66>
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f001 fff9 	bl	80114bc <_free_r>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4d4:	81a3      	strh	r3, [r4, #12]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	6063      	str	r3, [r4, #4]
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	f043 0308 	orr.w	r3, r3, #8
 800f4e4:	81a3      	strh	r3, [r4, #12]
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	b94b      	cbnz	r3, 800f4fe <__swsetup_r+0x9a>
 800f4ea:	89a3      	ldrh	r3, [r4, #12]
 800f4ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4f4:	d003      	beq.n	800f4fe <__swsetup_r+0x9a>
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f001 fb6d 	bl	8010bd8 <__smakebuf_r>
 800f4fe:	89a2      	ldrh	r2, [r4, #12]
 800f500:	f012 0301 	ands.w	r3, r2, #1
 800f504:	d00c      	beq.n	800f520 <__swsetup_r+0xbc>
 800f506:	2300      	movs	r3, #0
 800f508:	60a3      	str	r3, [r4, #8]
 800f50a:	6963      	ldr	r3, [r4, #20]
 800f50c:	425b      	negs	r3, r3
 800f50e:	61a3      	str	r3, [r4, #24]
 800f510:	6923      	ldr	r3, [r4, #16]
 800f512:	b953      	cbnz	r3, 800f52a <__swsetup_r+0xc6>
 800f514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f518:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f51c:	d1ba      	bne.n	800f494 <__swsetup_r+0x30>
 800f51e:	bd70      	pop	{r4, r5, r6, pc}
 800f520:	0792      	lsls	r2, r2, #30
 800f522:	bf58      	it	pl
 800f524:	6963      	ldrpl	r3, [r4, #20]
 800f526:	60a3      	str	r3, [r4, #8]
 800f528:	e7f2      	b.n	800f510 <__swsetup_r+0xac>
 800f52a:	2000      	movs	r0, #0
 800f52c:	e7f7      	b.n	800f51e <__swsetup_r+0xba>
 800f52e:	bf00      	nop
 800f530:	2000000c 	.word	0x2000000c
 800f534:	08012b30 	.word	0x08012b30
 800f538:	08012b50 	.word	0x08012b50
 800f53c:	08012b10 	.word	0x08012b10

0800f540 <_close_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4c06      	ldr	r4, [pc, #24]	; (800f55c <_close_r+0x1c>)
 800f544:	2300      	movs	r3, #0
 800f546:	4605      	mov	r5, r0
 800f548:	4608      	mov	r0, r1
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	f7f3 fd03 	bl	8002f56 <_close>
 800f550:	1c43      	adds	r3, r0, #1
 800f552:	d102      	bne.n	800f55a <_close_r+0x1a>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	b103      	cbz	r3, 800f55a <_close_r+0x1a>
 800f558:	602b      	str	r3, [r5, #0]
 800f55a:	bd38      	pop	{r3, r4, r5, pc}
 800f55c:	20004d40 	.word	0x20004d40

0800f560 <quorem>:
 800f560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	6903      	ldr	r3, [r0, #16]
 800f566:	690c      	ldr	r4, [r1, #16]
 800f568:	42a3      	cmp	r3, r4
 800f56a:	4680      	mov	r8, r0
 800f56c:	f2c0 8082 	blt.w	800f674 <quorem+0x114>
 800f570:	3c01      	subs	r4, #1
 800f572:	f101 0714 	add.w	r7, r1, #20
 800f576:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f57a:	f100 0614 	add.w	r6, r0, #20
 800f57e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f582:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f586:	eb06 030c 	add.w	r3, r6, ip
 800f58a:	3501      	adds	r5, #1
 800f58c:	eb07 090c 	add.w	r9, r7, ip
 800f590:	9301      	str	r3, [sp, #4]
 800f592:	fbb0 f5f5 	udiv	r5, r0, r5
 800f596:	b395      	cbz	r5, 800f5fe <quorem+0x9e>
 800f598:	f04f 0a00 	mov.w	sl, #0
 800f59c:	4638      	mov	r0, r7
 800f59e:	46b6      	mov	lr, r6
 800f5a0:	46d3      	mov	fp, sl
 800f5a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800f5a6:	b293      	uxth	r3, r2
 800f5a8:	fb05 a303 	mla	r3, r5, r3, sl
 800f5ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	ebab 0303 	sub.w	r3, fp, r3
 800f5b6:	0c12      	lsrs	r2, r2, #16
 800f5b8:	f8de b000 	ldr.w	fp, [lr]
 800f5bc:	fb05 a202 	mla	r2, r5, r2, sl
 800f5c0:	fa13 f38b 	uxtah	r3, r3, fp
 800f5c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f5c8:	fa1f fb82 	uxth.w	fp, r2
 800f5cc:	f8de 2000 	ldr.w	r2, [lr]
 800f5d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f5d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5de:	4581      	cmp	r9, r0
 800f5e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f5e4:	f84e 3b04 	str.w	r3, [lr], #4
 800f5e8:	d2db      	bcs.n	800f5a2 <quorem+0x42>
 800f5ea:	f856 300c 	ldr.w	r3, [r6, ip]
 800f5ee:	b933      	cbnz	r3, 800f5fe <quorem+0x9e>
 800f5f0:	9b01      	ldr	r3, [sp, #4]
 800f5f2:	3b04      	subs	r3, #4
 800f5f4:	429e      	cmp	r6, r3
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	d330      	bcc.n	800f65c <quorem+0xfc>
 800f5fa:	f8c8 4010 	str.w	r4, [r8, #16]
 800f5fe:	4640      	mov	r0, r8
 800f600:	f001 fda2 	bl	8011148 <__mcmp>
 800f604:	2800      	cmp	r0, #0
 800f606:	db25      	blt.n	800f654 <quorem+0xf4>
 800f608:	3501      	adds	r5, #1
 800f60a:	4630      	mov	r0, r6
 800f60c:	f04f 0c00 	mov.w	ip, #0
 800f610:	f857 2b04 	ldr.w	r2, [r7], #4
 800f614:	f8d0 e000 	ldr.w	lr, [r0]
 800f618:	b293      	uxth	r3, r2
 800f61a:	ebac 0303 	sub.w	r3, ip, r3
 800f61e:	0c12      	lsrs	r2, r2, #16
 800f620:	fa13 f38e 	uxtah	r3, r3, lr
 800f624:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f632:	45b9      	cmp	r9, r7
 800f634:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f638:	f840 3b04 	str.w	r3, [r0], #4
 800f63c:	d2e8      	bcs.n	800f610 <quorem+0xb0>
 800f63e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f642:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f646:	b92a      	cbnz	r2, 800f654 <quorem+0xf4>
 800f648:	3b04      	subs	r3, #4
 800f64a:	429e      	cmp	r6, r3
 800f64c:	461a      	mov	r2, r3
 800f64e:	d30b      	bcc.n	800f668 <quorem+0x108>
 800f650:	f8c8 4010 	str.w	r4, [r8, #16]
 800f654:	4628      	mov	r0, r5
 800f656:	b003      	add	sp, #12
 800f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65c:	6812      	ldr	r2, [r2, #0]
 800f65e:	3b04      	subs	r3, #4
 800f660:	2a00      	cmp	r2, #0
 800f662:	d1ca      	bne.n	800f5fa <quorem+0x9a>
 800f664:	3c01      	subs	r4, #1
 800f666:	e7c5      	b.n	800f5f4 <quorem+0x94>
 800f668:	6812      	ldr	r2, [r2, #0]
 800f66a:	3b04      	subs	r3, #4
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	d1ef      	bne.n	800f650 <quorem+0xf0>
 800f670:	3c01      	subs	r4, #1
 800f672:	e7ea      	b.n	800f64a <quorem+0xea>
 800f674:	2000      	movs	r0, #0
 800f676:	e7ee      	b.n	800f656 <quorem+0xf6>

0800f678 <_dtoa_r>:
 800f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f67c:	ec57 6b10 	vmov	r6, r7, d0
 800f680:	b097      	sub	sp, #92	; 0x5c
 800f682:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f684:	9106      	str	r1, [sp, #24]
 800f686:	4604      	mov	r4, r0
 800f688:	920b      	str	r2, [sp, #44]	; 0x2c
 800f68a:	9312      	str	r3, [sp, #72]	; 0x48
 800f68c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f690:	e9cd 6700 	strd	r6, r7, [sp]
 800f694:	b93d      	cbnz	r5, 800f6a6 <_dtoa_r+0x2e>
 800f696:	2010      	movs	r0, #16
 800f698:	f001 fade 	bl	8010c58 <malloc>
 800f69c:	6260      	str	r0, [r4, #36]	; 0x24
 800f69e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f6a2:	6005      	str	r5, [r0, #0]
 800f6a4:	60c5      	str	r5, [r0, #12]
 800f6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a8:	6819      	ldr	r1, [r3, #0]
 800f6aa:	b151      	cbz	r1, 800f6c2 <_dtoa_r+0x4a>
 800f6ac:	685a      	ldr	r2, [r3, #4]
 800f6ae:	604a      	str	r2, [r1, #4]
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	4093      	lsls	r3, r2
 800f6b4:	608b      	str	r3, [r1, #8]
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f001 fb27 	bl	8010d0a <_Bfree>
 800f6bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	1e3b      	subs	r3, r7, #0
 800f6c4:	bfbb      	ittet	lt
 800f6c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f6ca:	9301      	strlt	r3, [sp, #4]
 800f6cc:	2300      	movge	r3, #0
 800f6ce:	2201      	movlt	r2, #1
 800f6d0:	bfac      	ite	ge
 800f6d2:	f8c8 3000 	strge.w	r3, [r8]
 800f6d6:	f8c8 2000 	strlt.w	r2, [r8]
 800f6da:	4baf      	ldr	r3, [pc, #700]	; (800f998 <_dtoa_r+0x320>)
 800f6dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f6e0:	ea33 0308 	bics.w	r3, r3, r8
 800f6e4:	d114      	bne.n	800f710 <_dtoa_r+0x98>
 800f6e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800f6ec:	6013      	str	r3, [r2, #0]
 800f6ee:	9b00      	ldr	r3, [sp, #0]
 800f6f0:	b923      	cbnz	r3, 800f6fc <_dtoa_r+0x84>
 800f6f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	f000 8542 	beq.w	8010180 <_dtoa_r+0xb08>
 800f6fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f9ac <_dtoa_r+0x334>
 800f702:	2b00      	cmp	r3, #0
 800f704:	f000 8544 	beq.w	8010190 <_dtoa_r+0xb18>
 800f708:	f10b 0303 	add.w	r3, fp, #3
 800f70c:	f000 bd3e 	b.w	801018c <_dtoa_r+0xb14>
 800f710:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f714:	2200      	movs	r2, #0
 800f716:	2300      	movs	r3, #0
 800f718:	4630      	mov	r0, r6
 800f71a:	4639      	mov	r1, r7
 800f71c:	f7f1 f9ec 	bl	8000af8 <__aeabi_dcmpeq>
 800f720:	4681      	mov	r9, r0
 800f722:	b168      	cbz	r0, 800f740 <_dtoa_r+0xc8>
 800f724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f726:	2301      	movs	r3, #1
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	f000 8524 	beq.w	801017a <_dtoa_r+0xb02>
 800f732:	4b9a      	ldr	r3, [pc, #616]	; (800f99c <_dtoa_r+0x324>)
 800f734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f736:	f103 3bff 	add.w	fp, r3, #4294967295
 800f73a:	6013      	str	r3, [r2, #0]
 800f73c:	f000 bd28 	b.w	8010190 <_dtoa_r+0xb18>
 800f740:	aa14      	add	r2, sp, #80	; 0x50
 800f742:	a915      	add	r1, sp, #84	; 0x54
 800f744:	ec47 6b10 	vmov	d0, r6, r7
 800f748:	4620      	mov	r0, r4
 800f74a:	f001 fdeb 	bl	8011324 <__d2b>
 800f74e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f752:	9004      	str	r0, [sp, #16]
 800f754:	2d00      	cmp	r5, #0
 800f756:	d07c      	beq.n	800f852 <_dtoa_r+0x1da>
 800f758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f75c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f760:	46b2      	mov	sl, r6
 800f762:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f76a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f76e:	2200      	movs	r2, #0
 800f770:	4b8b      	ldr	r3, [pc, #556]	; (800f9a0 <_dtoa_r+0x328>)
 800f772:	4650      	mov	r0, sl
 800f774:	4659      	mov	r1, fp
 800f776:	f7f0 fd9f 	bl	80002b8 <__aeabi_dsub>
 800f77a:	a381      	add	r3, pc, #516	; (adr r3, 800f980 <_dtoa_r+0x308>)
 800f77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f780:	f7f0 ff52 	bl	8000628 <__aeabi_dmul>
 800f784:	a380      	add	r3, pc, #512	; (adr r3, 800f988 <_dtoa_r+0x310>)
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	f7f0 fd97 	bl	80002bc <__adddf3>
 800f78e:	4606      	mov	r6, r0
 800f790:	4628      	mov	r0, r5
 800f792:	460f      	mov	r7, r1
 800f794:	f7f0 fede 	bl	8000554 <__aeabi_i2d>
 800f798:	a37d      	add	r3, pc, #500	; (adr r3, 800f990 <_dtoa_r+0x318>)
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f7f0 ff43 	bl	8000628 <__aeabi_dmul>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	4639      	mov	r1, r7
 800f7aa:	f7f0 fd87 	bl	80002bc <__adddf3>
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460f      	mov	r7, r1
 800f7b2:	f7f1 f9e9 	bl	8000b88 <__aeabi_d2iz>
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	4682      	mov	sl, r0
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	4630      	mov	r0, r6
 800f7be:	4639      	mov	r1, r7
 800f7c0:	f7f1 f9a4 	bl	8000b0c <__aeabi_dcmplt>
 800f7c4:	b148      	cbz	r0, 800f7da <_dtoa_r+0x162>
 800f7c6:	4650      	mov	r0, sl
 800f7c8:	f7f0 fec4 	bl	8000554 <__aeabi_i2d>
 800f7cc:	4632      	mov	r2, r6
 800f7ce:	463b      	mov	r3, r7
 800f7d0:	f7f1 f992 	bl	8000af8 <__aeabi_dcmpeq>
 800f7d4:	b908      	cbnz	r0, 800f7da <_dtoa_r+0x162>
 800f7d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7da:	f1ba 0f16 	cmp.w	sl, #22
 800f7de:	d859      	bhi.n	800f894 <_dtoa_r+0x21c>
 800f7e0:	4970      	ldr	r1, [pc, #448]	; (800f9a4 <_dtoa_r+0x32c>)
 800f7e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7ee:	f7f1 f9ab 	bl	8000b48 <__aeabi_dcmpgt>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d050      	beq.n	800f898 <_dtoa_r+0x220>
 800f7f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f800:	1b5d      	subs	r5, r3, r5
 800f802:	f1b5 0801 	subs.w	r8, r5, #1
 800f806:	bf49      	itett	mi
 800f808:	f1c5 0301 	rsbmi	r3, r5, #1
 800f80c:	2300      	movpl	r3, #0
 800f80e:	9305      	strmi	r3, [sp, #20]
 800f810:	f04f 0800 	movmi.w	r8, #0
 800f814:	bf58      	it	pl
 800f816:	9305      	strpl	r3, [sp, #20]
 800f818:	f1ba 0f00 	cmp.w	sl, #0
 800f81c:	db3e      	blt.n	800f89c <_dtoa_r+0x224>
 800f81e:	2300      	movs	r3, #0
 800f820:	44d0      	add	r8, sl
 800f822:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f826:	9307      	str	r3, [sp, #28]
 800f828:	9b06      	ldr	r3, [sp, #24]
 800f82a:	2b09      	cmp	r3, #9
 800f82c:	f200 8090 	bhi.w	800f950 <_dtoa_r+0x2d8>
 800f830:	2b05      	cmp	r3, #5
 800f832:	bfc4      	itt	gt
 800f834:	3b04      	subgt	r3, #4
 800f836:	9306      	strgt	r3, [sp, #24]
 800f838:	9b06      	ldr	r3, [sp, #24]
 800f83a:	f1a3 0302 	sub.w	r3, r3, #2
 800f83e:	bfcc      	ite	gt
 800f840:	2500      	movgt	r5, #0
 800f842:	2501      	movle	r5, #1
 800f844:	2b03      	cmp	r3, #3
 800f846:	f200 808f 	bhi.w	800f968 <_dtoa_r+0x2f0>
 800f84a:	e8df f003 	tbb	[pc, r3]
 800f84e:	7f7d      	.short	0x7f7d
 800f850:	7131      	.short	0x7131
 800f852:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f856:	441d      	add	r5, r3
 800f858:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f85c:	2820      	cmp	r0, #32
 800f85e:	dd13      	ble.n	800f888 <_dtoa_r+0x210>
 800f860:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f864:	9b00      	ldr	r3, [sp, #0]
 800f866:	fa08 f800 	lsl.w	r8, r8, r0
 800f86a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f86e:	fa23 f000 	lsr.w	r0, r3, r0
 800f872:	ea48 0000 	orr.w	r0, r8, r0
 800f876:	f7f0 fe5d 	bl	8000534 <__aeabi_ui2d>
 800f87a:	2301      	movs	r3, #1
 800f87c:	4682      	mov	sl, r0
 800f87e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f882:	3d01      	subs	r5, #1
 800f884:	9313      	str	r3, [sp, #76]	; 0x4c
 800f886:	e772      	b.n	800f76e <_dtoa_r+0xf6>
 800f888:	9b00      	ldr	r3, [sp, #0]
 800f88a:	f1c0 0020 	rsb	r0, r0, #32
 800f88e:	fa03 f000 	lsl.w	r0, r3, r0
 800f892:	e7f0      	b.n	800f876 <_dtoa_r+0x1fe>
 800f894:	2301      	movs	r3, #1
 800f896:	e7b1      	b.n	800f7fc <_dtoa_r+0x184>
 800f898:	900f      	str	r0, [sp, #60]	; 0x3c
 800f89a:	e7b0      	b.n	800f7fe <_dtoa_r+0x186>
 800f89c:	9b05      	ldr	r3, [sp, #20]
 800f89e:	eba3 030a 	sub.w	r3, r3, sl
 800f8a2:	9305      	str	r3, [sp, #20]
 800f8a4:	f1ca 0300 	rsb	r3, sl, #0
 800f8a8:	9307      	str	r3, [sp, #28]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	930e      	str	r3, [sp, #56]	; 0x38
 800f8ae:	e7bb      	b.n	800f828 <_dtoa_r+0x1b0>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	dd59      	ble.n	800f96e <_dtoa_r+0x2f6>
 800f8ba:	9302      	str	r3, [sp, #8]
 800f8bc:	4699      	mov	r9, r3
 800f8be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	6072      	str	r2, [r6, #4]
 800f8c4:	2204      	movs	r2, #4
 800f8c6:	f102 0014 	add.w	r0, r2, #20
 800f8ca:	4298      	cmp	r0, r3
 800f8cc:	6871      	ldr	r1, [r6, #4]
 800f8ce:	d953      	bls.n	800f978 <_dtoa_r+0x300>
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f001 f9e6 	bl	8010ca2 <_Balloc>
 800f8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d8:	6030      	str	r0, [r6, #0]
 800f8da:	f1b9 0f0e 	cmp.w	r9, #14
 800f8de:	f8d3 b000 	ldr.w	fp, [r3]
 800f8e2:	f200 80e6 	bhi.w	800fab2 <_dtoa_r+0x43a>
 800f8e6:	2d00      	cmp	r5, #0
 800f8e8:	f000 80e3 	beq.w	800fab2 <_dtoa_r+0x43a>
 800f8ec:	ed9d 7b00 	vldr	d7, [sp]
 800f8f0:	f1ba 0f00 	cmp.w	sl, #0
 800f8f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f8f8:	dd74      	ble.n	800f9e4 <_dtoa_r+0x36c>
 800f8fa:	4a2a      	ldr	r2, [pc, #168]	; (800f9a4 <_dtoa_r+0x32c>)
 800f8fc:	f00a 030f 	and.w	r3, sl, #15
 800f900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f904:	ed93 7b00 	vldr	d7, [r3]
 800f908:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f90c:	06f0      	lsls	r0, r6, #27
 800f90e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f912:	d565      	bpl.n	800f9e0 <_dtoa_r+0x368>
 800f914:	4b24      	ldr	r3, [pc, #144]	; (800f9a8 <_dtoa_r+0x330>)
 800f916:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f91a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f91e:	f7f0 ffad 	bl	800087c <__aeabi_ddiv>
 800f922:	e9cd 0100 	strd	r0, r1, [sp]
 800f926:	f006 060f 	and.w	r6, r6, #15
 800f92a:	2503      	movs	r5, #3
 800f92c:	4f1e      	ldr	r7, [pc, #120]	; (800f9a8 <_dtoa_r+0x330>)
 800f92e:	e04c      	b.n	800f9ca <_dtoa_r+0x352>
 800f930:	2301      	movs	r3, #1
 800f932:	930a      	str	r3, [sp, #40]	; 0x28
 800f934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f936:	4453      	add	r3, sl
 800f938:	f103 0901 	add.w	r9, r3, #1
 800f93c:	9302      	str	r3, [sp, #8]
 800f93e:	464b      	mov	r3, r9
 800f940:	2b01      	cmp	r3, #1
 800f942:	bfb8      	it	lt
 800f944:	2301      	movlt	r3, #1
 800f946:	e7ba      	b.n	800f8be <_dtoa_r+0x246>
 800f948:	2300      	movs	r3, #0
 800f94a:	e7b2      	b.n	800f8b2 <_dtoa_r+0x23a>
 800f94c:	2300      	movs	r3, #0
 800f94e:	e7f0      	b.n	800f932 <_dtoa_r+0x2ba>
 800f950:	2501      	movs	r5, #1
 800f952:	2300      	movs	r3, #0
 800f954:	9306      	str	r3, [sp, #24]
 800f956:	950a      	str	r5, [sp, #40]	; 0x28
 800f958:	f04f 33ff 	mov.w	r3, #4294967295
 800f95c:	9302      	str	r3, [sp, #8]
 800f95e:	4699      	mov	r9, r3
 800f960:	2200      	movs	r2, #0
 800f962:	2312      	movs	r3, #18
 800f964:	920b      	str	r2, [sp, #44]	; 0x2c
 800f966:	e7aa      	b.n	800f8be <_dtoa_r+0x246>
 800f968:	2301      	movs	r3, #1
 800f96a:	930a      	str	r3, [sp, #40]	; 0x28
 800f96c:	e7f4      	b.n	800f958 <_dtoa_r+0x2e0>
 800f96e:	2301      	movs	r3, #1
 800f970:	9302      	str	r3, [sp, #8]
 800f972:	4699      	mov	r9, r3
 800f974:	461a      	mov	r2, r3
 800f976:	e7f5      	b.n	800f964 <_dtoa_r+0x2ec>
 800f978:	3101      	adds	r1, #1
 800f97a:	6071      	str	r1, [r6, #4]
 800f97c:	0052      	lsls	r2, r2, #1
 800f97e:	e7a2      	b.n	800f8c6 <_dtoa_r+0x24e>
 800f980:	636f4361 	.word	0x636f4361
 800f984:	3fd287a7 	.word	0x3fd287a7
 800f988:	8b60c8b3 	.word	0x8b60c8b3
 800f98c:	3fc68a28 	.word	0x3fc68a28
 800f990:	509f79fb 	.word	0x509f79fb
 800f994:	3fd34413 	.word	0x3fd34413
 800f998:	7ff00000 	.word	0x7ff00000
 800f99c:	08012ca4 	.word	0x08012ca4
 800f9a0:	3ff80000 	.word	0x3ff80000
 800f9a4:	08012ba8 	.word	0x08012ba8
 800f9a8:	08012b80 	.word	0x08012b80
 800f9ac:	08012b09 	.word	0x08012b09
 800f9b0:	07f1      	lsls	r1, r6, #31
 800f9b2:	d508      	bpl.n	800f9c6 <_dtoa_r+0x34e>
 800f9b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9bc:	f7f0 fe34 	bl	8000628 <__aeabi_dmul>
 800f9c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9c4:	3501      	adds	r5, #1
 800f9c6:	1076      	asrs	r6, r6, #1
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	2e00      	cmp	r6, #0
 800f9cc:	d1f0      	bne.n	800f9b0 <_dtoa_r+0x338>
 800f9ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f9d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9d6:	f7f0 ff51 	bl	800087c <__aeabi_ddiv>
 800f9da:	e9cd 0100 	strd	r0, r1, [sp]
 800f9de:	e01a      	b.n	800fa16 <_dtoa_r+0x39e>
 800f9e0:	2502      	movs	r5, #2
 800f9e2:	e7a3      	b.n	800f92c <_dtoa_r+0x2b4>
 800f9e4:	f000 80a0 	beq.w	800fb28 <_dtoa_r+0x4b0>
 800f9e8:	f1ca 0600 	rsb	r6, sl, #0
 800f9ec:	4b9f      	ldr	r3, [pc, #636]	; (800fc6c <_dtoa_r+0x5f4>)
 800f9ee:	4fa0      	ldr	r7, [pc, #640]	; (800fc70 <_dtoa_r+0x5f8>)
 800f9f0:	f006 020f 	and.w	r2, r6, #15
 800f9f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fa00:	f7f0 fe12 	bl	8000628 <__aeabi_dmul>
 800fa04:	e9cd 0100 	strd	r0, r1, [sp]
 800fa08:	1136      	asrs	r6, r6, #4
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2502      	movs	r5, #2
 800fa0e:	2e00      	cmp	r6, #0
 800fa10:	d17f      	bne.n	800fb12 <_dtoa_r+0x49a>
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1e1      	bne.n	800f9da <_dtoa_r+0x362>
 800fa16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f000 8087 	beq.w	800fb2c <_dtoa_r+0x4b4>
 800fa1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa22:	2200      	movs	r2, #0
 800fa24:	4b93      	ldr	r3, [pc, #588]	; (800fc74 <_dtoa_r+0x5fc>)
 800fa26:	4630      	mov	r0, r6
 800fa28:	4639      	mov	r1, r7
 800fa2a:	f7f1 f86f 	bl	8000b0c <__aeabi_dcmplt>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d07c      	beq.n	800fb2c <_dtoa_r+0x4b4>
 800fa32:	f1b9 0f00 	cmp.w	r9, #0
 800fa36:	d079      	beq.n	800fb2c <_dtoa_r+0x4b4>
 800fa38:	9b02      	ldr	r3, [sp, #8]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	dd35      	ble.n	800faaa <_dtoa_r+0x432>
 800fa3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fa42:	9308      	str	r3, [sp, #32]
 800fa44:	4639      	mov	r1, r7
 800fa46:	2200      	movs	r2, #0
 800fa48:	4b8b      	ldr	r3, [pc, #556]	; (800fc78 <_dtoa_r+0x600>)
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7f0 fdec 	bl	8000628 <__aeabi_dmul>
 800fa50:	e9cd 0100 	strd	r0, r1, [sp]
 800fa54:	9f02      	ldr	r7, [sp, #8]
 800fa56:	3501      	adds	r5, #1
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f7f0 fd7b 	bl	8000554 <__aeabi_i2d>
 800fa5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa62:	f7f0 fde1 	bl	8000628 <__aeabi_dmul>
 800fa66:	2200      	movs	r2, #0
 800fa68:	4b84      	ldr	r3, [pc, #528]	; (800fc7c <_dtoa_r+0x604>)
 800fa6a:	f7f0 fc27 	bl	80002bc <__adddf3>
 800fa6e:	4605      	mov	r5, r0
 800fa70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fa74:	2f00      	cmp	r7, #0
 800fa76:	d15d      	bne.n	800fb34 <_dtoa_r+0x4bc>
 800fa78:	2200      	movs	r2, #0
 800fa7a:	4b81      	ldr	r3, [pc, #516]	; (800fc80 <_dtoa_r+0x608>)
 800fa7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa80:	f7f0 fc1a 	bl	80002b8 <__aeabi_dsub>
 800fa84:	462a      	mov	r2, r5
 800fa86:	4633      	mov	r3, r6
 800fa88:	e9cd 0100 	strd	r0, r1, [sp]
 800fa8c:	f7f1 f85c 	bl	8000b48 <__aeabi_dcmpgt>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	f040 8288 	bne.w	800ffa6 <_dtoa_r+0x92e>
 800fa96:	462a      	mov	r2, r5
 800fa98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fa9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faa0:	f7f1 f834 	bl	8000b0c <__aeabi_dcmplt>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	f040 827c 	bne.w	800ffa2 <_dtoa_r+0x92a>
 800faaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800faae:	e9cd 2300 	strd	r2, r3, [sp]
 800fab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	f2c0 8150 	blt.w	800fd5a <_dtoa_r+0x6e2>
 800faba:	f1ba 0f0e 	cmp.w	sl, #14
 800fabe:	f300 814c 	bgt.w	800fd5a <_dtoa_r+0x6e2>
 800fac2:	4b6a      	ldr	r3, [pc, #424]	; (800fc6c <_dtoa_r+0x5f4>)
 800fac4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fac8:	ed93 7b00 	vldr	d7, [r3]
 800facc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800face:	2b00      	cmp	r3, #0
 800fad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fad4:	f280 80d8 	bge.w	800fc88 <_dtoa_r+0x610>
 800fad8:	f1b9 0f00 	cmp.w	r9, #0
 800fadc:	f300 80d4 	bgt.w	800fc88 <_dtoa_r+0x610>
 800fae0:	f040 825e 	bne.w	800ffa0 <_dtoa_r+0x928>
 800fae4:	2200      	movs	r2, #0
 800fae6:	4b66      	ldr	r3, [pc, #408]	; (800fc80 <_dtoa_r+0x608>)
 800fae8:	ec51 0b17 	vmov	r0, r1, d7
 800faec:	f7f0 fd9c 	bl	8000628 <__aeabi_dmul>
 800faf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faf4:	f7f1 f81e 	bl	8000b34 <__aeabi_dcmpge>
 800faf8:	464f      	mov	r7, r9
 800fafa:	464e      	mov	r6, r9
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f040 8234 	bne.w	800ff6a <_dtoa_r+0x8f2>
 800fb02:	2331      	movs	r3, #49	; 0x31
 800fb04:	f10b 0501 	add.w	r5, fp, #1
 800fb08:	f88b 3000 	strb.w	r3, [fp]
 800fb0c:	f10a 0a01 	add.w	sl, sl, #1
 800fb10:	e22f      	b.n	800ff72 <_dtoa_r+0x8fa>
 800fb12:	07f2      	lsls	r2, r6, #31
 800fb14:	d505      	bpl.n	800fb22 <_dtoa_r+0x4aa>
 800fb16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb1a:	f7f0 fd85 	bl	8000628 <__aeabi_dmul>
 800fb1e:	3501      	adds	r5, #1
 800fb20:	2301      	movs	r3, #1
 800fb22:	1076      	asrs	r6, r6, #1
 800fb24:	3708      	adds	r7, #8
 800fb26:	e772      	b.n	800fa0e <_dtoa_r+0x396>
 800fb28:	2502      	movs	r5, #2
 800fb2a:	e774      	b.n	800fa16 <_dtoa_r+0x39e>
 800fb2c:	f8cd a020 	str.w	sl, [sp, #32]
 800fb30:	464f      	mov	r7, r9
 800fb32:	e791      	b.n	800fa58 <_dtoa_r+0x3e0>
 800fb34:	4b4d      	ldr	r3, [pc, #308]	; (800fc6c <_dtoa_r+0x5f4>)
 800fb36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d047      	beq.n	800fbd4 <_dtoa_r+0x55c>
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	2000      	movs	r0, #0
 800fb4a:	494e      	ldr	r1, [pc, #312]	; (800fc84 <_dtoa_r+0x60c>)
 800fb4c:	f7f0 fe96 	bl	800087c <__aeabi_ddiv>
 800fb50:	462a      	mov	r2, r5
 800fb52:	4633      	mov	r3, r6
 800fb54:	f7f0 fbb0 	bl	80002b8 <__aeabi_dsub>
 800fb58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fb5c:	465d      	mov	r5, fp
 800fb5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb62:	f7f1 f811 	bl	8000b88 <__aeabi_d2iz>
 800fb66:	4606      	mov	r6, r0
 800fb68:	f7f0 fcf4 	bl	8000554 <__aeabi_i2d>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb74:	f7f0 fba0 	bl	80002b8 <__aeabi_dsub>
 800fb78:	3630      	adds	r6, #48	; 0x30
 800fb7a:	f805 6b01 	strb.w	r6, [r5], #1
 800fb7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb82:	e9cd 0100 	strd	r0, r1, [sp]
 800fb86:	f7f0 ffc1 	bl	8000b0c <__aeabi_dcmplt>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d163      	bne.n	800fc56 <_dtoa_r+0x5de>
 800fb8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb92:	2000      	movs	r0, #0
 800fb94:	4937      	ldr	r1, [pc, #220]	; (800fc74 <_dtoa_r+0x5fc>)
 800fb96:	f7f0 fb8f 	bl	80002b8 <__aeabi_dsub>
 800fb9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb9e:	f7f0 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	f040 80b7 	bne.w	800fd16 <_dtoa_r+0x69e>
 800fba8:	eba5 030b 	sub.w	r3, r5, fp
 800fbac:	429f      	cmp	r7, r3
 800fbae:	f77f af7c 	ble.w	800faaa <_dtoa_r+0x432>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	4b30      	ldr	r3, [pc, #192]	; (800fc78 <_dtoa_r+0x600>)
 800fbb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fbba:	f7f0 fd35 	bl	8000628 <__aeabi_dmul>
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbc4:	4b2c      	ldr	r3, [pc, #176]	; (800fc78 <_dtoa_r+0x600>)
 800fbc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbca:	f7f0 fd2d 	bl	8000628 <__aeabi_dmul>
 800fbce:	e9cd 0100 	strd	r0, r1, [sp]
 800fbd2:	e7c4      	b.n	800fb5e <_dtoa_r+0x4e6>
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	4633      	mov	r3, r6
 800fbd8:	f7f0 fd26 	bl	8000628 <__aeabi_dmul>
 800fbdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbe0:	eb0b 0507 	add.w	r5, fp, r7
 800fbe4:	465e      	mov	r6, fp
 800fbe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbea:	f7f0 ffcd 	bl	8000b88 <__aeabi_d2iz>
 800fbee:	4607      	mov	r7, r0
 800fbf0:	f7f0 fcb0 	bl	8000554 <__aeabi_i2d>
 800fbf4:	3730      	adds	r7, #48	; 0x30
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbfe:	f7f0 fb5b 	bl	80002b8 <__aeabi_dsub>
 800fc02:	f806 7b01 	strb.w	r7, [r6], #1
 800fc06:	42ae      	cmp	r6, r5
 800fc08:	e9cd 0100 	strd	r0, r1, [sp]
 800fc0c:	f04f 0200 	mov.w	r2, #0
 800fc10:	d126      	bne.n	800fc60 <_dtoa_r+0x5e8>
 800fc12:	4b1c      	ldr	r3, [pc, #112]	; (800fc84 <_dtoa_r+0x60c>)
 800fc14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc18:	f7f0 fb50 	bl	80002bc <__adddf3>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	460b      	mov	r3, r1
 800fc20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc24:	f7f0 ff90 	bl	8000b48 <__aeabi_dcmpgt>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	d174      	bne.n	800fd16 <_dtoa_r+0x69e>
 800fc2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc30:	2000      	movs	r0, #0
 800fc32:	4914      	ldr	r1, [pc, #80]	; (800fc84 <_dtoa_r+0x60c>)
 800fc34:	f7f0 fb40 	bl	80002b8 <__aeabi_dsub>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc40:	f7f0 ff64 	bl	8000b0c <__aeabi_dcmplt>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	f43f af30 	beq.w	800faaa <_dtoa_r+0x432>
 800fc4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc4e:	2b30      	cmp	r3, #48	; 0x30
 800fc50:	f105 32ff 	add.w	r2, r5, #4294967295
 800fc54:	d002      	beq.n	800fc5c <_dtoa_r+0x5e4>
 800fc56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc5a:	e04a      	b.n	800fcf2 <_dtoa_r+0x67a>
 800fc5c:	4615      	mov	r5, r2
 800fc5e:	e7f4      	b.n	800fc4a <_dtoa_r+0x5d2>
 800fc60:	4b05      	ldr	r3, [pc, #20]	; (800fc78 <_dtoa_r+0x600>)
 800fc62:	f7f0 fce1 	bl	8000628 <__aeabi_dmul>
 800fc66:	e9cd 0100 	strd	r0, r1, [sp]
 800fc6a:	e7bc      	b.n	800fbe6 <_dtoa_r+0x56e>
 800fc6c:	08012ba8 	.word	0x08012ba8
 800fc70:	08012b80 	.word	0x08012b80
 800fc74:	3ff00000 	.word	0x3ff00000
 800fc78:	40240000 	.word	0x40240000
 800fc7c:	401c0000 	.word	0x401c0000
 800fc80:	40140000 	.word	0x40140000
 800fc84:	3fe00000 	.word	0x3fe00000
 800fc88:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc8c:	465d      	mov	r5, fp
 800fc8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc92:	4630      	mov	r0, r6
 800fc94:	4639      	mov	r1, r7
 800fc96:	f7f0 fdf1 	bl	800087c <__aeabi_ddiv>
 800fc9a:	f7f0 ff75 	bl	8000b88 <__aeabi_d2iz>
 800fc9e:	4680      	mov	r8, r0
 800fca0:	f7f0 fc58 	bl	8000554 <__aeabi_i2d>
 800fca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fca8:	f7f0 fcbe 	bl	8000628 <__aeabi_dmul>
 800fcac:	4602      	mov	r2, r0
 800fcae:	460b      	mov	r3, r1
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fcb8:	f7f0 fafe 	bl	80002b8 <__aeabi_dsub>
 800fcbc:	f805 6b01 	strb.w	r6, [r5], #1
 800fcc0:	eba5 060b 	sub.w	r6, r5, fp
 800fcc4:	45b1      	cmp	r9, r6
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	d139      	bne.n	800fd40 <_dtoa_r+0x6c8>
 800fccc:	f7f0 faf6 	bl	80002bc <__adddf3>
 800fcd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	f7f0 ff36 	bl	8000b48 <__aeabi_dcmpgt>
 800fcdc:	b9c8      	cbnz	r0, 800fd12 <_dtoa_r+0x69a>
 800fcde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fce2:	4630      	mov	r0, r6
 800fce4:	4639      	mov	r1, r7
 800fce6:	f7f0 ff07 	bl	8000af8 <__aeabi_dcmpeq>
 800fcea:	b110      	cbz	r0, 800fcf2 <_dtoa_r+0x67a>
 800fcec:	f018 0f01 	tst.w	r8, #1
 800fcf0:	d10f      	bne.n	800fd12 <_dtoa_r+0x69a>
 800fcf2:	9904      	ldr	r1, [sp, #16]
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f001 f808 	bl	8010d0a <_Bfree>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcfe:	702b      	strb	r3, [r5, #0]
 800fd00:	f10a 0301 	add.w	r3, sl, #1
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f000 8241 	beq.w	8010190 <_dtoa_r+0xb18>
 800fd0e:	601d      	str	r5, [r3, #0]
 800fd10:	e23e      	b.n	8010190 <_dtoa_r+0xb18>
 800fd12:	f8cd a020 	str.w	sl, [sp, #32]
 800fd16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd1a:	2a39      	cmp	r2, #57	; 0x39
 800fd1c:	f105 33ff 	add.w	r3, r5, #4294967295
 800fd20:	d108      	bne.n	800fd34 <_dtoa_r+0x6bc>
 800fd22:	459b      	cmp	fp, r3
 800fd24:	d10a      	bne.n	800fd3c <_dtoa_r+0x6c4>
 800fd26:	9b08      	ldr	r3, [sp, #32]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	9308      	str	r3, [sp, #32]
 800fd2c:	2330      	movs	r3, #48	; 0x30
 800fd2e:	f88b 3000 	strb.w	r3, [fp]
 800fd32:	465b      	mov	r3, fp
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	3201      	adds	r2, #1
 800fd38:	701a      	strb	r2, [r3, #0]
 800fd3a:	e78c      	b.n	800fc56 <_dtoa_r+0x5de>
 800fd3c:	461d      	mov	r5, r3
 800fd3e:	e7ea      	b.n	800fd16 <_dtoa_r+0x69e>
 800fd40:	2200      	movs	r2, #0
 800fd42:	4b9b      	ldr	r3, [pc, #620]	; (800ffb0 <_dtoa_r+0x938>)
 800fd44:	f7f0 fc70 	bl	8000628 <__aeabi_dmul>
 800fd48:	2200      	movs	r2, #0
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	460f      	mov	r7, r1
 800fd50:	f7f0 fed2 	bl	8000af8 <__aeabi_dcmpeq>
 800fd54:	2800      	cmp	r0, #0
 800fd56:	d09a      	beq.n	800fc8e <_dtoa_r+0x616>
 800fd58:	e7cb      	b.n	800fcf2 <_dtoa_r+0x67a>
 800fd5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd5c:	2a00      	cmp	r2, #0
 800fd5e:	f000 808b 	beq.w	800fe78 <_dtoa_r+0x800>
 800fd62:	9a06      	ldr	r2, [sp, #24]
 800fd64:	2a01      	cmp	r2, #1
 800fd66:	dc6e      	bgt.n	800fe46 <_dtoa_r+0x7ce>
 800fd68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	d067      	beq.n	800fe3e <_dtoa_r+0x7c6>
 800fd6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd72:	9f07      	ldr	r7, [sp, #28]
 800fd74:	9d05      	ldr	r5, [sp, #20]
 800fd76:	9a05      	ldr	r2, [sp, #20]
 800fd78:	2101      	movs	r1, #1
 800fd7a:	441a      	add	r2, r3
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	9205      	str	r2, [sp, #20]
 800fd80:	4498      	add	r8, r3
 800fd82:	f001 f8a0 	bl	8010ec6 <__i2b>
 800fd86:	4606      	mov	r6, r0
 800fd88:	2d00      	cmp	r5, #0
 800fd8a:	dd0c      	ble.n	800fda6 <_dtoa_r+0x72e>
 800fd8c:	f1b8 0f00 	cmp.w	r8, #0
 800fd90:	dd09      	ble.n	800fda6 <_dtoa_r+0x72e>
 800fd92:	4545      	cmp	r5, r8
 800fd94:	9a05      	ldr	r2, [sp, #20]
 800fd96:	462b      	mov	r3, r5
 800fd98:	bfa8      	it	ge
 800fd9a:	4643      	movge	r3, r8
 800fd9c:	1ad2      	subs	r2, r2, r3
 800fd9e:	9205      	str	r2, [sp, #20]
 800fda0:	1aed      	subs	r5, r5, r3
 800fda2:	eba8 0803 	sub.w	r8, r8, r3
 800fda6:	9b07      	ldr	r3, [sp, #28]
 800fda8:	b1eb      	cbz	r3, 800fde6 <_dtoa_r+0x76e>
 800fdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d067      	beq.n	800fe80 <_dtoa_r+0x808>
 800fdb0:	b18f      	cbz	r7, 800fdd6 <_dtoa_r+0x75e>
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	463a      	mov	r2, r7
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f001 f924 	bl	8011004 <__pow5mult>
 800fdbc:	9a04      	ldr	r2, [sp, #16]
 800fdbe:	4601      	mov	r1, r0
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f001 f888 	bl	8010ed8 <__multiply>
 800fdc8:	9904      	ldr	r1, [sp, #16]
 800fdca:	9008      	str	r0, [sp, #32]
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f000 ff9c 	bl	8010d0a <_Bfree>
 800fdd2:	9b08      	ldr	r3, [sp, #32]
 800fdd4:	9304      	str	r3, [sp, #16]
 800fdd6:	9b07      	ldr	r3, [sp, #28]
 800fdd8:	1bda      	subs	r2, r3, r7
 800fdda:	d004      	beq.n	800fde6 <_dtoa_r+0x76e>
 800fddc:	9904      	ldr	r1, [sp, #16]
 800fdde:	4620      	mov	r0, r4
 800fde0:	f001 f910 	bl	8011004 <__pow5mult>
 800fde4:	9004      	str	r0, [sp, #16]
 800fde6:	2101      	movs	r1, #1
 800fde8:	4620      	mov	r0, r4
 800fdea:	f001 f86c 	bl	8010ec6 <__i2b>
 800fdee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdf0:	4607      	mov	r7, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f000 81d0 	beq.w	8010198 <_dtoa_r+0xb20>
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f001 f901 	bl	8011004 <__pow5mult>
 800fe02:	9b06      	ldr	r3, [sp, #24]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	4607      	mov	r7, r0
 800fe08:	dc40      	bgt.n	800fe8c <_dtoa_r+0x814>
 800fe0a:	9b00      	ldr	r3, [sp, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d139      	bne.n	800fe84 <_dtoa_r+0x80c>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d136      	bne.n	800fe88 <_dtoa_r+0x810>
 800fe1a:	9b01      	ldr	r3, [sp, #4]
 800fe1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe20:	0d1b      	lsrs	r3, r3, #20
 800fe22:	051b      	lsls	r3, r3, #20
 800fe24:	b12b      	cbz	r3, 800fe32 <_dtoa_r+0x7ba>
 800fe26:	9b05      	ldr	r3, [sp, #20]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	9305      	str	r3, [sp, #20]
 800fe2c:	f108 0801 	add.w	r8, r8, #1
 800fe30:	2301      	movs	r3, #1
 800fe32:	9307      	str	r3, [sp, #28]
 800fe34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d12a      	bne.n	800fe90 <_dtoa_r+0x818>
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	e030      	b.n	800fea0 <_dtoa_r+0x828>
 800fe3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe44:	e795      	b.n	800fd72 <_dtoa_r+0x6fa>
 800fe46:	9b07      	ldr	r3, [sp, #28]
 800fe48:	f109 37ff 	add.w	r7, r9, #4294967295
 800fe4c:	42bb      	cmp	r3, r7
 800fe4e:	bfbf      	itttt	lt
 800fe50:	9b07      	ldrlt	r3, [sp, #28]
 800fe52:	9707      	strlt	r7, [sp, #28]
 800fe54:	1afa      	sublt	r2, r7, r3
 800fe56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fe58:	bfbb      	ittet	lt
 800fe5a:	189b      	addlt	r3, r3, r2
 800fe5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fe5e:	1bdf      	subge	r7, r3, r7
 800fe60:	2700      	movlt	r7, #0
 800fe62:	f1b9 0f00 	cmp.w	r9, #0
 800fe66:	bfb5      	itete	lt
 800fe68:	9b05      	ldrlt	r3, [sp, #20]
 800fe6a:	9d05      	ldrge	r5, [sp, #20]
 800fe6c:	eba3 0509 	sublt.w	r5, r3, r9
 800fe70:	464b      	movge	r3, r9
 800fe72:	bfb8      	it	lt
 800fe74:	2300      	movlt	r3, #0
 800fe76:	e77e      	b.n	800fd76 <_dtoa_r+0x6fe>
 800fe78:	9f07      	ldr	r7, [sp, #28]
 800fe7a:	9d05      	ldr	r5, [sp, #20]
 800fe7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fe7e:	e783      	b.n	800fd88 <_dtoa_r+0x710>
 800fe80:	9a07      	ldr	r2, [sp, #28]
 800fe82:	e7ab      	b.n	800fddc <_dtoa_r+0x764>
 800fe84:	2300      	movs	r3, #0
 800fe86:	e7d4      	b.n	800fe32 <_dtoa_r+0x7ba>
 800fe88:	9b00      	ldr	r3, [sp, #0]
 800fe8a:	e7d2      	b.n	800fe32 <_dtoa_r+0x7ba>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9307      	str	r3, [sp, #28]
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fe96:	6918      	ldr	r0, [r3, #16]
 800fe98:	f000 ffc7 	bl	8010e2a <__hi0bits>
 800fe9c:	f1c0 0020 	rsb	r0, r0, #32
 800fea0:	4440      	add	r0, r8
 800fea2:	f010 001f 	ands.w	r0, r0, #31
 800fea6:	d047      	beq.n	800ff38 <_dtoa_r+0x8c0>
 800fea8:	f1c0 0320 	rsb	r3, r0, #32
 800feac:	2b04      	cmp	r3, #4
 800feae:	dd3b      	ble.n	800ff28 <_dtoa_r+0x8b0>
 800feb0:	9b05      	ldr	r3, [sp, #20]
 800feb2:	f1c0 001c 	rsb	r0, r0, #28
 800feb6:	4403      	add	r3, r0
 800feb8:	9305      	str	r3, [sp, #20]
 800feba:	4405      	add	r5, r0
 800febc:	4480      	add	r8, r0
 800febe:	9b05      	ldr	r3, [sp, #20]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	dd05      	ble.n	800fed0 <_dtoa_r+0x858>
 800fec4:	461a      	mov	r2, r3
 800fec6:	9904      	ldr	r1, [sp, #16]
 800fec8:	4620      	mov	r0, r4
 800feca:	f001 f8e9 	bl	80110a0 <__lshift>
 800fece:	9004      	str	r0, [sp, #16]
 800fed0:	f1b8 0f00 	cmp.w	r8, #0
 800fed4:	dd05      	ble.n	800fee2 <_dtoa_r+0x86a>
 800fed6:	4639      	mov	r1, r7
 800fed8:	4642      	mov	r2, r8
 800feda:	4620      	mov	r0, r4
 800fedc:	f001 f8e0 	bl	80110a0 <__lshift>
 800fee0:	4607      	mov	r7, r0
 800fee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fee4:	b353      	cbz	r3, 800ff3c <_dtoa_r+0x8c4>
 800fee6:	4639      	mov	r1, r7
 800fee8:	9804      	ldr	r0, [sp, #16]
 800feea:	f001 f92d 	bl	8011148 <__mcmp>
 800feee:	2800      	cmp	r0, #0
 800fef0:	da24      	bge.n	800ff3c <_dtoa_r+0x8c4>
 800fef2:	2300      	movs	r3, #0
 800fef4:	220a      	movs	r2, #10
 800fef6:	9904      	ldr	r1, [sp, #16]
 800fef8:	4620      	mov	r0, r4
 800fefa:	f000 ff1d 	bl	8010d38 <__multadd>
 800fefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff00:	9004      	str	r0, [sp, #16]
 800ff02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 814d 	beq.w	80101a6 <_dtoa_r+0xb2e>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	4631      	mov	r1, r6
 800ff10:	220a      	movs	r2, #10
 800ff12:	4620      	mov	r0, r4
 800ff14:	f000 ff10 	bl	8010d38 <__multadd>
 800ff18:	9b02      	ldr	r3, [sp, #8]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	dc4f      	bgt.n	800ffc0 <_dtoa_r+0x948>
 800ff20:	9b06      	ldr	r3, [sp, #24]
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	dd4c      	ble.n	800ffc0 <_dtoa_r+0x948>
 800ff26:	e011      	b.n	800ff4c <_dtoa_r+0x8d4>
 800ff28:	d0c9      	beq.n	800febe <_dtoa_r+0x846>
 800ff2a:	9a05      	ldr	r2, [sp, #20]
 800ff2c:	331c      	adds	r3, #28
 800ff2e:	441a      	add	r2, r3
 800ff30:	9205      	str	r2, [sp, #20]
 800ff32:	441d      	add	r5, r3
 800ff34:	4498      	add	r8, r3
 800ff36:	e7c2      	b.n	800febe <_dtoa_r+0x846>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	e7f6      	b.n	800ff2a <_dtoa_r+0x8b2>
 800ff3c:	f1b9 0f00 	cmp.w	r9, #0
 800ff40:	dc38      	bgt.n	800ffb4 <_dtoa_r+0x93c>
 800ff42:	9b06      	ldr	r3, [sp, #24]
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	dd35      	ble.n	800ffb4 <_dtoa_r+0x93c>
 800ff48:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff4c:	9b02      	ldr	r3, [sp, #8]
 800ff4e:	b963      	cbnz	r3, 800ff6a <_dtoa_r+0x8f2>
 800ff50:	4639      	mov	r1, r7
 800ff52:	2205      	movs	r2, #5
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 feef 	bl	8010d38 <__multadd>
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	4607      	mov	r7, r0
 800ff5e:	9804      	ldr	r0, [sp, #16]
 800ff60:	f001 f8f2 	bl	8011148 <__mcmp>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	f73f adcc 	bgt.w	800fb02 <_dtoa_r+0x48a>
 800ff6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff6c:	465d      	mov	r5, fp
 800ff6e:	ea6f 0a03 	mvn.w	sl, r3
 800ff72:	f04f 0900 	mov.w	r9, #0
 800ff76:	4639      	mov	r1, r7
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fec6 	bl	8010d0a <_Bfree>
 800ff7e:	2e00      	cmp	r6, #0
 800ff80:	f43f aeb7 	beq.w	800fcf2 <_dtoa_r+0x67a>
 800ff84:	f1b9 0f00 	cmp.w	r9, #0
 800ff88:	d005      	beq.n	800ff96 <_dtoa_r+0x91e>
 800ff8a:	45b1      	cmp	r9, r6
 800ff8c:	d003      	beq.n	800ff96 <_dtoa_r+0x91e>
 800ff8e:	4649      	mov	r1, r9
 800ff90:	4620      	mov	r0, r4
 800ff92:	f000 feba 	bl	8010d0a <_Bfree>
 800ff96:	4631      	mov	r1, r6
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 feb6 	bl	8010d0a <_Bfree>
 800ff9e:	e6a8      	b.n	800fcf2 <_dtoa_r+0x67a>
 800ffa0:	2700      	movs	r7, #0
 800ffa2:	463e      	mov	r6, r7
 800ffa4:	e7e1      	b.n	800ff6a <_dtoa_r+0x8f2>
 800ffa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ffaa:	463e      	mov	r6, r7
 800ffac:	e5a9      	b.n	800fb02 <_dtoa_r+0x48a>
 800ffae:	bf00      	nop
 800ffb0:	40240000 	.word	0x40240000
 800ffb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 80fa 	beq.w	80101b4 <_dtoa_r+0xb3c>
 800ffc0:	2d00      	cmp	r5, #0
 800ffc2:	dd05      	ble.n	800ffd0 <_dtoa_r+0x958>
 800ffc4:	4631      	mov	r1, r6
 800ffc6:	462a      	mov	r2, r5
 800ffc8:	4620      	mov	r0, r4
 800ffca:	f001 f869 	bl	80110a0 <__lshift>
 800ffce:	4606      	mov	r6, r0
 800ffd0:	9b07      	ldr	r3, [sp, #28]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d04c      	beq.n	8010070 <_dtoa_r+0x9f8>
 800ffd6:	6871      	ldr	r1, [r6, #4]
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f000 fe62 	bl	8010ca2 <_Balloc>
 800ffde:	6932      	ldr	r2, [r6, #16]
 800ffe0:	3202      	adds	r2, #2
 800ffe2:	4605      	mov	r5, r0
 800ffe4:	0092      	lsls	r2, r2, #2
 800ffe6:	f106 010c 	add.w	r1, r6, #12
 800ffea:	300c      	adds	r0, #12
 800ffec:	f000 fe4e 	bl	8010c8c <memcpy>
 800fff0:	2201      	movs	r2, #1
 800fff2:	4629      	mov	r1, r5
 800fff4:	4620      	mov	r0, r4
 800fff6:	f001 f853 	bl	80110a0 <__lshift>
 800fffa:	9b00      	ldr	r3, [sp, #0]
 800fffc:	f8cd b014 	str.w	fp, [sp, #20]
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	46b1      	mov	r9, r6
 8010006:	9307      	str	r3, [sp, #28]
 8010008:	4606      	mov	r6, r0
 801000a:	4639      	mov	r1, r7
 801000c:	9804      	ldr	r0, [sp, #16]
 801000e:	f7ff faa7 	bl	800f560 <quorem>
 8010012:	4649      	mov	r1, r9
 8010014:	4605      	mov	r5, r0
 8010016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801001a:	9804      	ldr	r0, [sp, #16]
 801001c:	f001 f894 	bl	8011148 <__mcmp>
 8010020:	4632      	mov	r2, r6
 8010022:	9000      	str	r0, [sp, #0]
 8010024:	4639      	mov	r1, r7
 8010026:	4620      	mov	r0, r4
 8010028:	f001 f8a8 	bl	801117c <__mdiff>
 801002c:	68c3      	ldr	r3, [r0, #12]
 801002e:	4602      	mov	r2, r0
 8010030:	bb03      	cbnz	r3, 8010074 <_dtoa_r+0x9fc>
 8010032:	4601      	mov	r1, r0
 8010034:	9008      	str	r0, [sp, #32]
 8010036:	9804      	ldr	r0, [sp, #16]
 8010038:	f001 f886 	bl	8011148 <__mcmp>
 801003c:	9a08      	ldr	r2, [sp, #32]
 801003e:	4603      	mov	r3, r0
 8010040:	4611      	mov	r1, r2
 8010042:	4620      	mov	r0, r4
 8010044:	9308      	str	r3, [sp, #32]
 8010046:	f000 fe60 	bl	8010d0a <_Bfree>
 801004a:	9b08      	ldr	r3, [sp, #32]
 801004c:	b9a3      	cbnz	r3, 8010078 <_dtoa_r+0xa00>
 801004e:	9a06      	ldr	r2, [sp, #24]
 8010050:	b992      	cbnz	r2, 8010078 <_dtoa_r+0xa00>
 8010052:	9a07      	ldr	r2, [sp, #28]
 8010054:	b982      	cbnz	r2, 8010078 <_dtoa_r+0xa00>
 8010056:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801005a:	d029      	beq.n	80100b0 <_dtoa_r+0xa38>
 801005c:	9b00      	ldr	r3, [sp, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	dd01      	ble.n	8010066 <_dtoa_r+0x9ee>
 8010062:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010066:	9b05      	ldr	r3, [sp, #20]
 8010068:	1c5d      	adds	r5, r3, #1
 801006a:	f883 8000 	strb.w	r8, [r3]
 801006e:	e782      	b.n	800ff76 <_dtoa_r+0x8fe>
 8010070:	4630      	mov	r0, r6
 8010072:	e7c2      	b.n	800fffa <_dtoa_r+0x982>
 8010074:	2301      	movs	r3, #1
 8010076:	e7e3      	b.n	8010040 <_dtoa_r+0x9c8>
 8010078:	9a00      	ldr	r2, [sp, #0]
 801007a:	2a00      	cmp	r2, #0
 801007c:	db04      	blt.n	8010088 <_dtoa_r+0xa10>
 801007e:	d125      	bne.n	80100cc <_dtoa_r+0xa54>
 8010080:	9a06      	ldr	r2, [sp, #24]
 8010082:	bb1a      	cbnz	r2, 80100cc <_dtoa_r+0xa54>
 8010084:	9a07      	ldr	r2, [sp, #28]
 8010086:	bb0a      	cbnz	r2, 80100cc <_dtoa_r+0xa54>
 8010088:	2b00      	cmp	r3, #0
 801008a:	ddec      	ble.n	8010066 <_dtoa_r+0x9ee>
 801008c:	2201      	movs	r2, #1
 801008e:	9904      	ldr	r1, [sp, #16]
 8010090:	4620      	mov	r0, r4
 8010092:	f001 f805 	bl	80110a0 <__lshift>
 8010096:	4639      	mov	r1, r7
 8010098:	9004      	str	r0, [sp, #16]
 801009a:	f001 f855 	bl	8011148 <__mcmp>
 801009e:	2800      	cmp	r0, #0
 80100a0:	dc03      	bgt.n	80100aa <_dtoa_r+0xa32>
 80100a2:	d1e0      	bne.n	8010066 <_dtoa_r+0x9ee>
 80100a4:	f018 0f01 	tst.w	r8, #1
 80100a8:	d0dd      	beq.n	8010066 <_dtoa_r+0x9ee>
 80100aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80100ae:	d1d8      	bne.n	8010062 <_dtoa_r+0x9ea>
 80100b0:	9b05      	ldr	r3, [sp, #20]
 80100b2:	9a05      	ldr	r2, [sp, #20]
 80100b4:	1c5d      	adds	r5, r3, #1
 80100b6:	2339      	movs	r3, #57	; 0x39
 80100b8:	7013      	strb	r3, [r2, #0]
 80100ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100be:	2b39      	cmp	r3, #57	; 0x39
 80100c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80100c4:	d04f      	beq.n	8010166 <_dtoa_r+0xaee>
 80100c6:	3301      	adds	r3, #1
 80100c8:	7013      	strb	r3, [r2, #0]
 80100ca:	e754      	b.n	800ff76 <_dtoa_r+0x8fe>
 80100cc:	9a05      	ldr	r2, [sp, #20]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f102 0501 	add.w	r5, r2, #1
 80100d4:	dd06      	ble.n	80100e4 <_dtoa_r+0xa6c>
 80100d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80100da:	d0e9      	beq.n	80100b0 <_dtoa_r+0xa38>
 80100dc:	f108 0801 	add.w	r8, r8, #1
 80100e0:	9b05      	ldr	r3, [sp, #20]
 80100e2:	e7c2      	b.n	801006a <_dtoa_r+0x9f2>
 80100e4:	9a02      	ldr	r2, [sp, #8]
 80100e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80100ea:	eba5 030b 	sub.w	r3, r5, fp
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d021      	beq.n	8010136 <_dtoa_r+0xabe>
 80100f2:	2300      	movs	r3, #0
 80100f4:	220a      	movs	r2, #10
 80100f6:	9904      	ldr	r1, [sp, #16]
 80100f8:	4620      	mov	r0, r4
 80100fa:	f000 fe1d 	bl	8010d38 <__multadd>
 80100fe:	45b1      	cmp	r9, r6
 8010100:	9004      	str	r0, [sp, #16]
 8010102:	f04f 0300 	mov.w	r3, #0
 8010106:	f04f 020a 	mov.w	r2, #10
 801010a:	4649      	mov	r1, r9
 801010c:	4620      	mov	r0, r4
 801010e:	d105      	bne.n	801011c <_dtoa_r+0xaa4>
 8010110:	f000 fe12 	bl	8010d38 <__multadd>
 8010114:	4681      	mov	r9, r0
 8010116:	4606      	mov	r6, r0
 8010118:	9505      	str	r5, [sp, #20]
 801011a:	e776      	b.n	801000a <_dtoa_r+0x992>
 801011c:	f000 fe0c 	bl	8010d38 <__multadd>
 8010120:	4631      	mov	r1, r6
 8010122:	4681      	mov	r9, r0
 8010124:	2300      	movs	r3, #0
 8010126:	220a      	movs	r2, #10
 8010128:	4620      	mov	r0, r4
 801012a:	f000 fe05 	bl	8010d38 <__multadd>
 801012e:	4606      	mov	r6, r0
 8010130:	e7f2      	b.n	8010118 <_dtoa_r+0xaa0>
 8010132:	f04f 0900 	mov.w	r9, #0
 8010136:	2201      	movs	r2, #1
 8010138:	9904      	ldr	r1, [sp, #16]
 801013a:	4620      	mov	r0, r4
 801013c:	f000 ffb0 	bl	80110a0 <__lshift>
 8010140:	4639      	mov	r1, r7
 8010142:	9004      	str	r0, [sp, #16]
 8010144:	f001 f800 	bl	8011148 <__mcmp>
 8010148:	2800      	cmp	r0, #0
 801014a:	dcb6      	bgt.n	80100ba <_dtoa_r+0xa42>
 801014c:	d102      	bne.n	8010154 <_dtoa_r+0xadc>
 801014e:	f018 0f01 	tst.w	r8, #1
 8010152:	d1b2      	bne.n	80100ba <_dtoa_r+0xa42>
 8010154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010158:	2b30      	cmp	r3, #48	; 0x30
 801015a:	f105 32ff 	add.w	r2, r5, #4294967295
 801015e:	f47f af0a 	bne.w	800ff76 <_dtoa_r+0x8fe>
 8010162:	4615      	mov	r5, r2
 8010164:	e7f6      	b.n	8010154 <_dtoa_r+0xadc>
 8010166:	4593      	cmp	fp, r2
 8010168:	d105      	bne.n	8010176 <_dtoa_r+0xafe>
 801016a:	2331      	movs	r3, #49	; 0x31
 801016c:	f10a 0a01 	add.w	sl, sl, #1
 8010170:	f88b 3000 	strb.w	r3, [fp]
 8010174:	e6ff      	b.n	800ff76 <_dtoa_r+0x8fe>
 8010176:	4615      	mov	r5, r2
 8010178:	e79f      	b.n	80100ba <_dtoa_r+0xa42>
 801017a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80101e0 <_dtoa_r+0xb68>
 801017e:	e007      	b.n	8010190 <_dtoa_r+0xb18>
 8010180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010182:	f8df b060 	ldr.w	fp, [pc, #96]	; 80101e4 <_dtoa_r+0xb6c>
 8010186:	b11b      	cbz	r3, 8010190 <_dtoa_r+0xb18>
 8010188:	f10b 0308 	add.w	r3, fp, #8
 801018c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801018e:	6013      	str	r3, [r2, #0]
 8010190:	4658      	mov	r0, fp
 8010192:	b017      	add	sp, #92	; 0x5c
 8010194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010198:	9b06      	ldr	r3, [sp, #24]
 801019a:	2b01      	cmp	r3, #1
 801019c:	f77f ae35 	ble.w	800fe0a <_dtoa_r+0x792>
 80101a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101a2:	9307      	str	r3, [sp, #28]
 80101a4:	e649      	b.n	800fe3a <_dtoa_r+0x7c2>
 80101a6:	9b02      	ldr	r3, [sp, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	dc03      	bgt.n	80101b4 <_dtoa_r+0xb3c>
 80101ac:	9b06      	ldr	r3, [sp, #24]
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	f73f aecc 	bgt.w	800ff4c <_dtoa_r+0x8d4>
 80101b4:	465d      	mov	r5, fp
 80101b6:	4639      	mov	r1, r7
 80101b8:	9804      	ldr	r0, [sp, #16]
 80101ba:	f7ff f9d1 	bl	800f560 <quorem>
 80101be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80101c2:	f805 8b01 	strb.w	r8, [r5], #1
 80101c6:	9a02      	ldr	r2, [sp, #8]
 80101c8:	eba5 030b 	sub.w	r3, r5, fp
 80101cc:	429a      	cmp	r2, r3
 80101ce:	ddb0      	ble.n	8010132 <_dtoa_r+0xaba>
 80101d0:	2300      	movs	r3, #0
 80101d2:	220a      	movs	r2, #10
 80101d4:	9904      	ldr	r1, [sp, #16]
 80101d6:	4620      	mov	r0, r4
 80101d8:	f000 fdae 	bl	8010d38 <__multadd>
 80101dc:	9004      	str	r0, [sp, #16]
 80101de:	e7ea      	b.n	80101b6 <_dtoa_r+0xb3e>
 80101e0:	08012ca3 	.word	0x08012ca3
 80101e4:	08012b00 	.word	0x08012b00

080101e8 <__sflush_r>:
 80101e8:	898a      	ldrh	r2, [r1, #12]
 80101ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ee:	4605      	mov	r5, r0
 80101f0:	0710      	lsls	r0, r2, #28
 80101f2:	460c      	mov	r4, r1
 80101f4:	d458      	bmi.n	80102a8 <__sflush_r+0xc0>
 80101f6:	684b      	ldr	r3, [r1, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	dc05      	bgt.n	8010208 <__sflush_r+0x20>
 80101fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101fe:	2b00      	cmp	r3, #0
 8010200:	dc02      	bgt.n	8010208 <__sflush_r+0x20>
 8010202:	2000      	movs	r0, #0
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801020a:	2e00      	cmp	r6, #0
 801020c:	d0f9      	beq.n	8010202 <__sflush_r+0x1a>
 801020e:	2300      	movs	r3, #0
 8010210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010214:	682f      	ldr	r7, [r5, #0]
 8010216:	6a21      	ldr	r1, [r4, #32]
 8010218:	602b      	str	r3, [r5, #0]
 801021a:	d032      	beq.n	8010282 <__sflush_r+0x9a>
 801021c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801021e:	89a3      	ldrh	r3, [r4, #12]
 8010220:	075a      	lsls	r2, r3, #29
 8010222:	d505      	bpl.n	8010230 <__sflush_r+0x48>
 8010224:	6863      	ldr	r3, [r4, #4]
 8010226:	1ac0      	subs	r0, r0, r3
 8010228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801022a:	b10b      	cbz	r3, 8010230 <__sflush_r+0x48>
 801022c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801022e:	1ac0      	subs	r0, r0, r3
 8010230:	2300      	movs	r3, #0
 8010232:	4602      	mov	r2, r0
 8010234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010236:	6a21      	ldr	r1, [r4, #32]
 8010238:	4628      	mov	r0, r5
 801023a:	47b0      	blx	r6
 801023c:	1c43      	adds	r3, r0, #1
 801023e:	89a3      	ldrh	r3, [r4, #12]
 8010240:	d106      	bne.n	8010250 <__sflush_r+0x68>
 8010242:	6829      	ldr	r1, [r5, #0]
 8010244:	291d      	cmp	r1, #29
 8010246:	d848      	bhi.n	80102da <__sflush_r+0xf2>
 8010248:	4a29      	ldr	r2, [pc, #164]	; (80102f0 <__sflush_r+0x108>)
 801024a:	40ca      	lsrs	r2, r1
 801024c:	07d6      	lsls	r6, r2, #31
 801024e:	d544      	bpl.n	80102da <__sflush_r+0xf2>
 8010250:	2200      	movs	r2, #0
 8010252:	6062      	str	r2, [r4, #4]
 8010254:	04d9      	lsls	r1, r3, #19
 8010256:	6922      	ldr	r2, [r4, #16]
 8010258:	6022      	str	r2, [r4, #0]
 801025a:	d504      	bpl.n	8010266 <__sflush_r+0x7e>
 801025c:	1c42      	adds	r2, r0, #1
 801025e:	d101      	bne.n	8010264 <__sflush_r+0x7c>
 8010260:	682b      	ldr	r3, [r5, #0]
 8010262:	b903      	cbnz	r3, 8010266 <__sflush_r+0x7e>
 8010264:	6560      	str	r0, [r4, #84]	; 0x54
 8010266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010268:	602f      	str	r7, [r5, #0]
 801026a:	2900      	cmp	r1, #0
 801026c:	d0c9      	beq.n	8010202 <__sflush_r+0x1a>
 801026e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010272:	4299      	cmp	r1, r3
 8010274:	d002      	beq.n	801027c <__sflush_r+0x94>
 8010276:	4628      	mov	r0, r5
 8010278:	f001 f920 	bl	80114bc <_free_r>
 801027c:	2000      	movs	r0, #0
 801027e:	6360      	str	r0, [r4, #52]	; 0x34
 8010280:	e7c0      	b.n	8010204 <__sflush_r+0x1c>
 8010282:	2301      	movs	r3, #1
 8010284:	4628      	mov	r0, r5
 8010286:	47b0      	blx	r6
 8010288:	1c41      	adds	r1, r0, #1
 801028a:	d1c8      	bne.n	801021e <__sflush_r+0x36>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d0c5      	beq.n	801021e <__sflush_r+0x36>
 8010292:	2b1d      	cmp	r3, #29
 8010294:	d001      	beq.n	801029a <__sflush_r+0xb2>
 8010296:	2b16      	cmp	r3, #22
 8010298:	d101      	bne.n	801029e <__sflush_r+0xb6>
 801029a:	602f      	str	r7, [r5, #0]
 801029c:	e7b1      	b.n	8010202 <__sflush_r+0x1a>
 801029e:	89a3      	ldrh	r3, [r4, #12]
 80102a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102a4:	81a3      	strh	r3, [r4, #12]
 80102a6:	e7ad      	b.n	8010204 <__sflush_r+0x1c>
 80102a8:	690f      	ldr	r7, [r1, #16]
 80102aa:	2f00      	cmp	r7, #0
 80102ac:	d0a9      	beq.n	8010202 <__sflush_r+0x1a>
 80102ae:	0793      	lsls	r3, r2, #30
 80102b0:	680e      	ldr	r6, [r1, #0]
 80102b2:	bf08      	it	eq
 80102b4:	694b      	ldreq	r3, [r1, #20]
 80102b6:	600f      	str	r7, [r1, #0]
 80102b8:	bf18      	it	ne
 80102ba:	2300      	movne	r3, #0
 80102bc:	eba6 0807 	sub.w	r8, r6, r7
 80102c0:	608b      	str	r3, [r1, #8]
 80102c2:	f1b8 0f00 	cmp.w	r8, #0
 80102c6:	dd9c      	ble.n	8010202 <__sflush_r+0x1a>
 80102c8:	4643      	mov	r3, r8
 80102ca:	463a      	mov	r2, r7
 80102cc:	6a21      	ldr	r1, [r4, #32]
 80102ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102d0:	4628      	mov	r0, r5
 80102d2:	47b0      	blx	r6
 80102d4:	2800      	cmp	r0, #0
 80102d6:	dc06      	bgt.n	80102e6 <__sflush_r+0xfe>
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102de:	81a3      	strh	r3, [r4, #12]
 80102e0:	f04f 30ff 	mov.w	r0, #4294967295
 80102e4:	e78e      	b.n	8010204 <__sflush_r+0x1c>
 80102e6:	4407      	add	r7, r0
 80102e8:	eba8 0800 	sub.w	r8, r8, r0
 80102ec:	e7e9      	b.n	80102c2 <__sflush_r+0xda>
 80102ee:	bf00      	nop
 80102f0:	20400001 	.word	0x20400001

080102f4 <_fflush_r>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	690b      	ldr	r3, [r1, #16]
 80102f8:	4605      	mov	r5, r0
 80102fa:	460c      	mov	r4, r1
 80102fc:	b1db      	cbz	r3, 8010336 <_fflush_r+0x42>
 80102fe:	b118      	cbz	r0, 8010308 <_fflush_r+0x14>
 8010300:	6983      	ldr	r3, [r0, #24]
 8010302:	b90b      	cbnz	r3, 8010308 <_fflush_r+0x14>
 8010304:	f000 f860 	bl	80103c8 <__sinit>
 8010308:	4b0c      	ldr	r3, [pc, #48]	; (801033c <_fflush_r+0x48>)
 801030a:	429c      	cmp	r4, r3
 801030c:	d109      	bne.n	8010322 <_fflush_r+0x2e>
 801030e:	686c      	ldr	r4, [r5, #4]
 8010310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010314:	b17b      	cbz	r3, 8010336 <_fflush_r+0x42>
 8010316:	4621      	mov	r1, r4
 8010318:	4628      	mov	r0, r5
 801031a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801031e:	f7ff bf63 	b.w	80101e8 <__sflush_r>
 8010322:	4b07      	ldr	r3, [pc, #28]	; (8010340 <_fflush_r+0x4c>)
 8010324:	429c      	cmp	r4, r3
 8010326:	d101      	bne.n	801032c <_fflush_r+0x38>
 8010328:	68ac      	ldr	r4, [r5, #8]
 801032a:	e7f1      	b.n	8010310 <_fflush_r+0x1c>
 801032c:	4b05      	ldr	r3, [pc, #20]	; (8010344 <_fflush_r+0x50>)
 801032e:	429c      	cmp	r4, r3
 8010330:	bf08      	it	eq
 8010332:	68ec      	ldreq	r4, [r5, #12]
 8010334:	e7ec      	b.n	8010310 <_fflush_r+0x1c>
 8010336:	2000      	movs	r0, #0
 8010338:	bd38      	pop	{r3, r4, r5, pc}
 801033a:	bf00      	nop
 801033c:	08012b30 	.word	0x08012b30
 8010340:	08012b50 	.word	0x08012b50
 8010344:	08012b10 	.word	0x08012b10

08010348 <std>:
 8010348:	2300      	movs	r3, #0
 801034a:	b510      	push	{r4, lr}
 801034c:	4604      	mov	r4, r0
 801034e:	e9c0 3300 	strd	r3, r3, [r0]
 8010352:	6083      	str	r3, [r0, #8]
 8010354:	8181      	strh	r1, [r0, #12]
 8010356:	6643      	str	r3, [r0, #100]	; 0x64
 8010358:	81c2      	strh	r2, [r0, #14]
 801035a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801035e:	6183      	str	r3, [r0, #24]
 8010360:	4619      	mov	r1, r3
 8010362:	2208      	movs	r2, #8
 8010364:	305c      	adds	r0, #92	; 0x5c
 8010366:	f7fd f9b5 	bl	800d6d4 <memset>
 801036a:	4b05      	ldr	r3, [pc, #20]	; (8010380 <std+0x38>)
 801036c:	6263      	str	r3, [r4, #36]	; 0x24
 801036e:	4b05      	ldr	r3, [pc, #20]	; (8010384 <std+0x3c>)
 8010370:	62a3      	str	r3, [r4, #40]	; 0x28
 8010372:	4b05      	ldr	r3, [pc, #20]	; (8010388 <std+0x40>)
 8010374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010376:	4b05      	ldr	r3, [pc, #20]	; (801038c <std+0x44>)
 8010378:	6224      	str	r4, [r4, #32]
 801037a:	6323      	str	r3, [r4, #48]	; 0x30
 801037c:	bd10      	pop	{r4, pc}
 801037e:	bf00      	nop
 8010380:	0800e561 	.word	0x0800e561
 8010384:	0800e587 	.word	0x0800e587
 8010388:	0800e5bf 	.word	0x0800e5bf
 801038c:	0800e5e3 	.word	0x0800e5e3

08010390 <_cleanup_r>:
 8010390:	4901      	ldr	r1, [pc, #4]	; (8010398 <_cleanup_r+0x8>)
 8010392:	f000 b885 	b.w	80104a0 <_fwalk_reent>
 8010396:	bf00      	nop
 8010398:	080102f5 	.word	0x080102f5

0801039c <__sfmoreglue>:
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	1e4a      	subs	r2, r1, #1
 80103a0:	2568      	movs	r5, #104	; 0x68
 80103a2:	4355      	muls	r5, r2
 80103a4:	460e      	mov	r6, r1
 80103a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103aa:	f001 f8d5 	bl	8011558 <_malloc_r>
 80103ae:	4604      	mov	r4, r0
 80103b0:	b140      	cbz	r0, 80103c4 <__sfmoreglue+0x28>
 80103b2:	2100      	movs	r1, #0
 80103b4:	e9c0 1600 	strd	r1, r6, [r0]
 80103b8:	300c      	adds	r0, #12
 80103ba:	60a0      	str	r0, [r4, #8]
 80103bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103c0:	f7fd f988 	bl	800d6d4 <memset>
 80103c4:	4620      	mov	r0, r4
 80103c6:	bd70      	pop	{r4, r5, r6, pc}

080103c8 <__sinit>:
 80103c8:	6983      	ldr	r3, [r0, #24]
 80103ca:	b510      	push	{r4, lr}
 80103cc:	4604      	mov	r4, r0
 80103ce:	bb33      	cbnz	r3, 801041e <__sinit+0x56>
 80103d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80103d4:	6503      	str	r3, [r0, #80]	; 0x50
 80103d6:	4b12      	ldr	r3, [pc, #72]	; (8010420 <__sinit+0x58>)
 80103d8:	4a12      	ldr	r2, [pc, #72]	; (8010424 <__sinit+0x5c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	6282      	str	r2, [r0, #40]	; 0x28
 80103de:	4298      	cmp	r0, r3
 80103e0:	bf04      	itt	eq
 80103e2:	2301      	moveq	r3, #1
 80103e4:	6183      	streq	r3, [r0, #24]
 80103e6:	f000 f81f 	bl	8010428 <__sfp>
 80103ea:	6060      	str	r0, [r4, #4]
 80103ec:	4620      	mov	r0, r4
 80103ee:	f000 f81b 	bl	8010428 <__sfp>
 80103f2:	60a0      	str	r0, [r4, #8]
 80103f4:	4620      	mov	r0, r4
 80103f6:	f000 f817 	bl	8010428 <__sfp>
 80103fa:	2200      	movs	r2, #0
 80103fc:	60e0      	str	r0, [r4, #12]
 80103fe:	2104      	movs	r1, #4
 8010400:	6860      	ldr	r0, [r4, #4]
 8010402:	f7ff ffa1 	bl	8010348 <std>
 8010406:	2201      	movs	r2, #1
 8010408:	2109      	movs	r1, #9
 801040a:	68a0      	ldr	r0, [r4, #8]
 801040c:	f7ff ff9c 	bl	8010348 <std>
 8010410:	2202      	movs	r2, #2
 8010412:	2112      	movs	r1, #18
 8010414:	68e0      	ldr	r0, [r4, #12]
 8010416:	f7ff ff97 	bl	8010348 <std>
 801041a:	2301      	movs	r3, #1
 801041c:	61a3      	str	r3, [r4, #24]
 801041e:	bd10      	pop	{r4, pc}
 8010420:	08012a70 	.word	0x08012a70
 8010424:	08010391 	.word	0x08010391

08010428 <__sfp>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	4b1b      	ldr	r3, [pc, #108]	; (8010498 <__sfp+0x70>)
 801042c:	681e      	ldr	r6, [r3, #0]
 801042e:	69b3      	ldr	r3, [r6, #24]
 8010430:	4607      	mov	r7, r0
 8010432:	b913      	cbnz	r3, 801043a <__sfp+0x12>
 8010434:	4630      	mov	r0, r6
 8010436:	f7ff ffc7 	bl	80103c8 <__sinit>
 801043a:	3648      	adds	r6, #72	; 0x48
 801043c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010440:	3b01      	subs	r3, #1
 8010442:	d503      	bpl.n	801044c <__sfp+0x24>
 8010444:	6833      	ldr	r3, [r6, #0]
 8010446:	b133      	cbz	r3, 8010456 <__sfp+0x2e>
 8010448:	6836      	ldr	r6, [r6, #0]
 801044a:	e7f7      	b.n	801043c <__sfp+0x14>
 801044c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010450:	b16d      	cbz	r5, 801046e <__sfp+0x46>
 8010452:	3468      	adds	r4, #104	; 0x68
 8010454:	e7f4      	b.n	8010440 <__sfp+0x18>
 8010456:	2104      	movs	r1, #4
 8010458:	4638      	mov	r0, r7
 801045a:	f7ff ff9f 	bl	801039c <__sfmoreglue>
 801045e:	6030      	str	r0, [r6, #0]
 8010460:	2800      	cmp	r0, #0
 8010462:	d1f1      	bne.n	8010448 <__sfp+0x20>
 8010464:	230c      	movs	r3, #12
 8010466:	603b      	str	r3, [r7, #0]
 8010468:	4604      	mov	r4, r0
 801046a:	4620      	mov	r0, r4
 801046c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801046e:	4b0b      	ldr	r3, [pc, #44]	; (801049c <__sfp+0x74>)
 8010470:	6665      	str	r5, [r4, #100]	; 0x64
 8010472:	e9c4 5500 	strd	r5, r5, [r4]
 8010476:	60a5      	str	r5, [r4, #8]
 8010478:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801047c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010480:	2208      	movs	r2, #8
 8010482:	4629      	mov	r1, r5
 8010484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010488:	f7fd f924 	bl	800d6d4 <memset>
 801048c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010494:	e7e9      	b.n	801046a <__sfp+0x42>
 8010496:	bf00      	nop
 8010498:	08012a70 	.word	0x08012a70
 801049c:	ffff0001 	.word	0xffff0001

080104a0 <_fwalk_reent>:
 80104a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a4:	4680      	mov	r8, r0
 80104a6:	4689      	mov	r9, r1
 80104a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104ac:	2600      	movs	r6, #0
 80104ae:	b914      	cbnz	r4, 80104b6 <_fwalk_reent+0x16>
 80104b0:	4630      	mov	r0, r6
 80104b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80104ba:	3f01      	subs	r7, #1
 80104bc:	d501      	bpl.n	80104c2 <_fwalk_reent+0x22>
 80104be:	6824      	ldr	r4, [r4, #0]
 80104c0:	e7f5      	b.n	80104ae <_fwalk_reent+0xe>
 80104c2:	89ab      	ldrh	r3, [r5, #12]
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d907      	bls.n	80104d8 <_fwalk_reent+0x38>
 80104c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104cc:	3301      	adds	r3, #1
 80104ce:	d003      	beq.n	80104d8 <_fwalk_reent+0x38>
 80104d0:	4629      	mov	r1, r5
 80104d2:	4640      	mov	r0, r8
 80104d4:	47c8      	blx	r9
 80104d6:	4306      	orrs	r6, r0
 80104d8:	3568      	adds	r5, #104	; 0x68
 80104da:	e7ee      	b.n	80104ba <_fwalk_reent+0x1a>

080104dc <rshift>:
 80104dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104de:	6906      	ldr	r6, [r0, #16]
 80104e0:	114b      	asrs	r3, r1, #5
 80104e2:	429e      	cmp	r6, r3
 80104e4:	f100 0414 	add.w	r4, r0, #20
 80104e8:	dd30      	ble.n	801054c <rshift+0x70>
 80104ea:	f011 011f 	ands.w	r1, r1, #31
 80104ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80104f2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80104f6:	d108      	bne.n	801050a <rshift+0x2e>
 80104f8:	4621      	mov	r1, r4
 80104fa:	42b2      	cmp	r2, r6
 80104fc:	460b      	mov	r3, r1
 80104fe:	d211      	bcs.n	8010524 <rshift+0x48>
 8010500:	f852 3b04 	ldr.w	r3, [r2], #4
 8010504:	f841 3b04 	str.w	r3, [r1], #4
 8010508:	e7f7      	b.n	80104fa <rshift+0x1e>
 801050a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801050e:	f1c1 0c20 	rsb	ip, r1, #32
 8010512:	40cd      	lsrs	r5, r1
 8010514:	3204      	adds	r2, #4
 8010516:	4623      	mov	r3, r4
 8010518:	42b2      	cmp	r2, r6
 801051a:	4617      	mov	r7, r2
 801051c:	d30c      	bcc.n	8010538 <rshift+0x5c>
 801051e:	601d      	str	r5, [r3, #0]
 8010520:	b105      	cbz	r5, 8010524 <rshift+0x48>
 8010522:	3304      	adds	r3, #4
 8010524:	1b1a      	subs	r2, r3, r4
 8010526:	42a3      	cmp	r3, r4
 8010528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801052c:	bf08      	it	eq
 801052e:	2300      	moveq	r3, #0
 8010530:	6102      	str	r2, [r0, #16]
 8010532:	bf08      	it	eq
 8010534:	6143      	streq	r3, [r0, #20]
 8010536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010538:	683f      	ldr	r7, [r7, #0]
 801053a:	fa07 f70c 	lsl.w	r7, r7, ip
 801053e:	433d      	orrs	r5, r7
 8010540:	f843 5b04 	str.w	r5, [r3], #4
 8010544:	f852 5b04 	ldr.w	r5, [r2], #4
 8010548:	40cd      	lsrs	r5, r1
 801054a:	e7e5      	b.n	8010518 <rshift+0x3c>
 801054c:	4623      	mov	r3, r4
 801054e:	e7e9      	b.n	8010524 <rshift+0x48>

08010550 <__hexdig_fun>:
 8010550:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010554:	2b09      	cmp	r3, #9
 8010556:	d802      	bhi.n	801055e <__hexdig_fun+0xe>
 8010558:	3820      	subs	r0, #32
 801055a:	b2c0      	uxtb	r0, r0
 801055c:	4770      	bx	lr
 801055e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010562:	2b05      	cmp	r3, #5
 8010564:	d801      	bhi.n	801056a <__hexdig_fun+0x1a>
 8010566:	3847      	subs	r0, #71	; 0x47
 8010568:	e7f7      	b.n	801055a <__hexdig_fun+0xa>
 801056a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801056e:	2b05      	cmp	r3, #5
 8010570:	d801      	bhi.n	8010576 <__hexdig_fun+0x26>
 8010572:	3827      	subs	r0, #39	; 0x27
 8010574:	e7f1      	b.n	801055a <__hexdig_fun+0xa>
 8010576:	2000      	movs	r0, #0
 8010578:	4770      	bx	lr

0801057a <__gethex>:
 801057a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057e:	b08b      	sub	sp, #44	; 0x2c
 8010580:	468a      	mov	sl, r1
 8010582:	9002      	str	r0, [sp, #8]
 8010584:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010586:	9306      	str	r3, [sp, #24]
 8010588:	4690      	mov	r8, r2
 801058a:	f000 fadf 	bl	8010b4c <__localeconv_l>
 801058e:	6803      	ldr	r3, [r0, #0]
 8010590:	9303      	str	r3, [sp, #12]
 8010592:	4618      	mov	r0, r3
 8010594:	f7ef fe34 	bl	8000200 <strlen>
 8010598:	9b03      	ldr	r3, [sp, #12]
 801059a:	9001      	str	r0, [sp, #4]
 801059c:	4403      	add	r3, r0
 801059e:	f04f 0b00 	mov.w	fp, #0
 80105a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80105a6:	9307      	str	r3, [sp, #28]
 80105a8:	f8da 3000 	ldr.w	r3, [sl]
 80105ac:	3302      	adds	r3, #2
 80105ae:	461f      	mov	r7, r3
 80105b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80105b4:	2830      	cmp	r0, #48	; 0x30
 80105b6:	d06c      	beq.n	8010692 <__gethex+0x118>
 80105b8:	f7ff ffca 	bl	8010550 <__hexdig_fun>
 80105bc:	4604      	mov	r4, r0
 80105be:	2800      	cmp	r0, #0
 80105c0:	d16a      	bne.n	8010698 <__gethex+0x11e>
 80105c2:	9a01      	ldr	r2, [sp, #4]
 80105c4:	9903      	ldr	r1, [sp, #12]
 80105c6:	4638      	mov	r0, r7
 80105c8:	f001 fe08 	bl	80121dc <strncmp>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d166      	bne.n	801069e <__gethex+0x124>
 80105d0:	9b01      	ldr	r3, [sp, #4]
 80105d2:	5cf8      	ldrb	r0, [r7, r3]
 80105d4:	18fe      	adds	r6, r7, r3
 80105d6:	f7ff ffbb 	bl	8010550 <__hexdig_fun>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d062      	beq.n	80106a4 <__gethex+0x12a>
 80105de:	4633      	mov	r3, r6
 80105e0:	7818      	ldrb	r0, [r3, #0]
 80105e2:	2830      	cmp	r0, #48	; 0x30
 80105e4:	461f      	mov	r7, r3
 80105e6:	f103 0301 	add.w	r3, r3, #1
 80105ea:	d0f9      	beq.n	80105e0 <__gethex+0x66>
 80105ec:	f7ff ffb0 	bl	8010550 <__hexdig_fun>
 80105f0:	fab0 f580 	clz	r5, r0
 80105f4:	096d      	lsrs	r5, r5, #5
 80105f6:	4634      	mov	r4, r6
 80105f8:	f04f 0b01 	mov.w	fp, #1
 80105fc:	463a      	mov	r2, r7
 80105fe:	4616      	mov	r6, r2
 8010600:	3201      	adds	r2, #1
 8010602:	7830      	ldrb	r0, [r6, #0]
 8010604:	f7ff ffa4 	bl	8010550 <__hexdig_fun>
 8010608:	2800      	cmp	r0, #0
 801060a:	d1f8      	bne.n	80105fe <__gethex+0x84>
 801060c:	9a01      	ldr	r2, [sp, #4]
 801060e:	9903      	ldr	r1, [sp, #12]
 8010610:	4630      	mov	r0, r6
 8010612:	f001 fde3 	bl	80121dc <strncmp>
 8010616:	b950      	cbnz	r0, 801062e <__gethex+0xb4>
 8010618:	b954      	cbnz	r4, 8010630 <__gethex+0xb6>
 801061a:	9b01      	ldr	r3, [sp, #4]
 801061c:	18f4      	adds	r4, r6, r3
 801061e:	4622      	mov	r2, r4
 8010620:	4616      	mov	r6, r2
 8010622:	3201      	adds	r2, #1
 8010624:	7830      	ldrb	r0, [r6, #0]
 8010626:	f7ff ff93 	bl	8010550 <__hexdig_fun>
 801062a:	2800      	cmp	r0, #0
 801062c:	d1f8      	bne.n	8010620 <__gethex+0xa6>
 801062e:	b10c      	cbz	r4, 8010634 <__gethex+0xba>
 8010630:	1ba4      	subs	r4, r4, r6
 8010632:	00a4      	lsls	r4, r4, #2
 8010634:	7833      	ldrb	r3, [r6, #0]
 8010636:	2b50      	cmp	r3, #80	; 0x50
 8010638:	d001      	beq.n	801063e <__gethex+0xc4>
 801063a:	2b70      	cmp	r3, #112	; 0x70
 801063c:	d140      	bne.n	80106c0 <__gethex+0x146>
 801063e:	7873      	ldrb	r3, [r6, #1]
 8010640:	2b2b      	cmp	r3, #43	; 0x2b
 8010642:	d031      	beq.n	80106a8 <__gethex+0x12e>
 8010644:	2b2d      	cmp	r3, #45	; 0x2d
 8010646:	d033      	beq.n	80106b0 <__gethex+0x136>
 8010648:	1c71      	adds	r1, r6, #1
 801064a:	f04f 0900 	mov.w	r9, #0
 801064e:	7808      	ldrb	r0, [r1, #0]
 8010650:	f7ff ff7e 	bl	8010550 <__hexdig_fun>
 8010654:	1e43      	subs	r3, r0, #1
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b18      	cmp	r3, #24
 801065a:	d831      	bhi.n	80106c0 <__gethex+0x146>
 801065c:	f1a0 0210 	sub.w	r2, r0, #16
 8010660:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010664:	f7ff ff74 	bl	8010550 <__hexdig_fun>
 8010668:	1e43      	subs	r3, r0, #1
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b18      	cmp	r3, #24
 801066e:	d922      	bls.n	80106b6 <__gethex+0x13c>
 8010670:	f1b9 0f00 	cmp.w	r9, #0
 8010674:	d000      	beq.n	8010678 <__gethex+0xfe>
 8010676:	4252      	negs	r2, r2
 8010678:	4414      	add	r4, r2
 801067a:	f8ca 1000 	str.w	r1, [sl]
 801067e:	b30d      	cbz	r5, 80106c4 <__gethex+0x14a>
 8010680:	f1bb 0f00 	cmp.w	fp, #0
 8010684:	bf0c      	ite	eq
 8010686:	2706      	moveq	r7, #6
 8010688:	2700      	movne	r7, #0
 801068a:	4638      	mov	r0, r7
 801068c:	b00b      	add	sp, #44	; 0x2c
 801068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010692:	f10b 0b01 	add.w	fp, fp, #1
 8010696:	e78a      	b.n	80105ae <__gethex+0x34>
 8010698:	2500      	movs	r5, #0
 801069a:	462c      	mov	r4, r5
 801069c:	e7ae      	b.n	80105fc <__gethex+0x82>
 801069e:	463e      	mov	r6, r7
 80106a0:	2501      	movs	r5, #1
 80106a2:	e7c7      	b.n	8010634 <__gethex+0xba>
 80106a4:	4604      	mov	r4, r0
 80106a6:	e7fb      	b.n	80106a0 <__gethex+0x126>
 80106a8:	f04f 0900 	mov.w	r9, #0
 80106ac:	1cb1      	adds	r1, r6, #2
 80106ae:	e7ce      	b.n	801064e <__gethex+0xd4>
 80106b0:	f04f 0901 	mov.w	r9, #1
 80106b4:	e7fa      	b.n	80106ac <__gethex+0x132>
 80106b6:	230a      	movs	r3, #10
 80106b8:	fb03 0202 	mla	r2, r3, r2, r0
 80106bc:	3a10      	subs	r2, #16
 80106be:	e7cf      	b.n	8010660 <__gethex+0xe6>
 80106c0:	4631      	mov	r1, r6
 80106c2:	e7da      	b.n	801067a <__gethex+0x100>
 80106c4:	1bf3      	subs	r3, r6, r7
 80106c6:	3b01      	subs	r3, #1
 80106c8:	4629      	mov	r1, r5
 80106ca:	2b07      	cmp	r3, #7
 80106cc:	dc49      	bgt.n	8010762 <__gethex+0x1e8>
 80106ce:	9802      	ldr	r0, [sp, #8]
 80106d0:	f000 fae7 	bl	8010ca2 <_Balloc>
 80106d4:	9b01      	ldr	r3, [sp, #4]
 80106d6:	f100 0914 	add.w	r9, r0, #20
 80106da:	f04f 0b00 	mov.w	fp, #0
 80106de:	f1c3 0301 	rsb	r3, r3, #1
 80106e2:	4605      	mov	r5, r0
 80106e4:	f8cd 9010 	str.w	r9, [sp, #16]
 80106e8:	46da      	mov	sl, fp
 80106ea:	9308      	str	r3, [sp, #32]
 80106ec:	42b7      	cmp	r7, r6
 80106ee:	d33b      	bcc.n	8010768 <__gethex+0x1ee>
 80106f0:	9804      	ldr	r0, [sp, #16]
 80106f2:	f840 ab04 	str.w	sl, [r0], #4
 80106f6:	eba0 0009 	sub.w	r0, r0, r9
 80106fa:	1080      	asrs	r0, r0, #2
 80106fc:	6128      	str	r0, [r5, #16]
 80106fe:	0147      	lsls	r7, r0, #5
 8010700:	4650      	mov	r0, sl
 8010702:	f000 fb92 	bl	8010e2a <__hi0bits>
 8010706:	f8d8 6000 	ldr.w	r6, [r8]
 801070a:	1a3f      	subs	r7, r7, r0
 801070c:	42b7      	cmp	r7, r6
 801070e:	dd64      	ble.n	80107da <__gethex+0x260>
 8010710:	1bbf      	subs	r7, r7, r6
 8010712:	4639      	mov	r1, r7
 8010714:	4628      	mov	r0, r5
 8010716:	f000 fea1 	bl	801145c <__any_on>
 801071a:	4682      	mov	sl, r0
 801071c:	b178      	cbz	r0, 801073e <__gethex+0x1c4>
 801071e:	1e7b      	subs	r3, r7, #1
 8010720:	1159      	asrs	r1, r3, #5
 8010722:	f003 021f 	and.w	r2, r3, #31
 8010726:	f04f 0a01 	mov.w	sl, #1
 801072a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801072e:	fa0a f202 	lsl.w	r2, sl, r2
 8010732:	420a      	tst	r2, r1
 8010734:	d003      	beq.n	801073e <__gethex+0x1c4>
 8010736:	4553      	cmp	r3, sl
 8010738:	dc46      	bgt.n	80107c8 <__gethex+0x24e>
 801073a:	f04f 0a02 	mov.w	sl, #2
 801073e:	4639      	mov	r1, r7
 8010740:	4628      	mov	r0, r5
 8010742:	f7ff fecb 	bl	80104dc <rshift>
 8010746:	443c      	add	r4, r7
 8010748:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801074c:	42a3      	cmp	r3, r4
 801074e:	da52      	bge.n	80107f6 <__gethex+0x27c>
 8010750:	4629      	mov	r1, r5
 8010752:	9802      	ldr	r0, [sp, #8]
 8010754:	f000 fad9 	bl	8010d0a <_Bfree>
 8010758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801075a:	2300      	movs	r3, #0
 801075c:	6013      	str	r3, [r2, #0]
 801075e:	27a3      	movs	r7, #163	; 0xa3
 8010760:	e793      	b.n	801068a <__gethex+0x110>
 8010762:	3101      	adds	r1, #1
 8010764:	105b      	asrs	r3, r3, #1
 8010766:	e7b0      	b.n	80106ca <__gethex+0x150>
 8010768:	1e73      	subs	r3, r6, #1
 801076a:	9305      	str	r3, [sp, #20]
 801076c:	9a07      	ldr	r2, [sp, #28]
 801076e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010772:	4293      	cmp	r3, r2
 8010774:	d018      	beq.n	80107a8 <__gethex+0x22e>
 8010776:	f1bb 0f20 	cmp.w	fp, #32
 801077a:	d107      	bne.n	801078c <__gethex+0x212>
 801077c:	9b04      	ldr	r3, [sp, #16]
 801077e:	f8c3 a000 	str.w	sl, [r3]
 8010782:	3304      	adds	r3, #4
 8010784:	f04f 0a00 	mov.w	sl, #0
 8010788:	9304      	str	r3, [sp, #16]
 801078a:	46d3      	mov	fp, sl
 801078c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010790:	f7ff fede 	bl	8010550 <__hexdig_fun>
 8010794:	f000 000f 	and.w	r0, r0, #15
 8010798:	fa00 f00b 	lsl.w	r0, r0, fp
 801079c:	ea4a 0a00 	orr.w	sl, sl, r0
 80107a0:	f10b 0b04 	add.w	fp, fp, #4
 80107a4:	9b05      	ldr	r3, [sp, #20]
 80107a6:	e00d      	b.n	80107c4 <__gethex+0x24a>
 80107a8:	9b05      	ldr	r3, [sp, #20]
 80107aa:	9a08      	ldr	r2, [sp, #32]
 80107ac:	4413      	add	r3, r2
 80107ae:	42bb      	cmp	r3, r7
 80107b0:	d3e1      	bcc.n	8010776 <__gethex+0x1fc>
 80107b2:	4618      	mov	r0, r3
 80107b4:	9a01      	ldr	r2, [sp, #4]
 80107b6:	9903      	ldr	r1, [sp, #12]
 80107b8:	9309      	str	r3, [sp, #36]	; 0x24
 80107ba:	f001 fd0f 	bl	80121dc <strncmp>
 80107be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d1d8      	bne.n	8010776 <__gethex+0x1fc>
 80107c4:	461e      	mov	r6, r3
 80107c6:	e791      	b.n	80106ec <__gethex+0x172>
 80107c8:	1eb9      	subs	r1, r7, #2
 80107ca:	4628      	mov	r0, r5
 80107cc:	f000 fe46 	bl	801145c <__any_on>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d0b2      	beq.n	801073a <__gethex+0x1c0>
 80107d4:	f04f 0a03 	mov.w	sl, #3
 80107d8:	e7b1      	b.n	801073e <__gethex+0x1c4>
 80107da:	da09      	bge.n	80107f0 <__gethex+0x276>
 80107dc:	1bf7      	subs	r7, r6, r7
 80107de:	4629      	mov	r1, r5
 80107e0:	463a      	mov	r2, r7
 80107e2:	9802      	ldr	r0, [sp, #8]
 80107e4:	f000 fc5c 	bl	80110a0 <__lshift>
 80107e8:	1be4      	subs	r4, r4, r7
 80107ea:	4605      	mov	r5, r0
 80107ec:	f100 0914 	add.w	r9, r0, #20
 80107f0:	f04f 0a00 	mov.w	sl, #0
 80107f4:	e7a8      	b.n	8010748 <__gethex+0x1ce>
 80107f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80107fa:	42a0      	cmp	r0, r4
 80107fc:	dd6a      	ble.n	80108d4 <__gethex+0x35a>
 80107fe:	1b04      	subs	r4, r0, r4
 8010800:	42a6      	cmp	r6, r4
 8010802:	dc2e      	bgt.n	8010862 <__gethex+0x2e8>
 8010804:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010808:	2b02      	cmp	r3, #2
 801080a:	d022      	beq.n	8010852 <__gethex+0x2d8>
 801080c:	2b03      	cmp	r3, #3
 801080e:	d024      	beq.n	801085a <__gethex+0x2e0>
 8010810:	2b01      	cmp	r3, #1
 8010812:	d115      	bne.n	8010840 <__gethex+0x2c6>
 8010814:	42a6      	cmp	r6, r4
 8010816:	d113      	bne.n	8010840 <__gethex+0x2c6>
 8010818:	2e01      	cmp	r6, #1
 801081a:	dc0b      	bgt.n	8010834 <__gethex+0x2ba>
 801081c:	9a06      	ldr	r2, [sp, #24]
 801081e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010822:	6013      	str	r3, [r2, #0]
 8010824:	2301      	movs	r3, #1
 8010826:	612b      	str	r3, [r5, #16]
 8010828:	f8c9 3000 	str.w	r3, [r9]
 801082c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801082e:	2762      	movs	r7, #98	; 0x62
 8010830:	601d      	str	r5, [r3, #0]
 8010832:	e72a      	b.n	801068a <__gethex+0x110>
 8010834:	1e71      	subs	r1, r6, #1
 8010836:	4628      	mov	r0, r5
 8010838:	f000 fe10 	bl	801145c <__any_on>
 801083c:	2800      	cmp	r0, #0
 801083e:	d1ed      	bne.n	801081c <__gethex+0x2a2>
 8010840:	4629      	mov	r1, r5
 8010842:	9802      	ldr	r0, [sp, #8]
 8010844:	f000 fa61 	bl	8010d0a <_Bfree>
 8010848:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801084a:	2300      	movs	r3, #0
 801084c:	6013      	str	r3, [r2, #0]
 801084e:	2750      	movs	r7, #80	; 0x50
 8010850:	e71b      	b.n	801068a <__gethex+0x110>
 8010852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010854:	2b00      	cmp	r3, #0
 8010856:	d0e1      	beq.n	801081c <__gethex+0x2a2>
 8010858:	e7f2      	b.n	8010840 <__gethex+0x2c6>
 801085a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1dd      	bne.n	801081c <__gethex+0x2a2>
 8010860:	e7ee      	b.n	8010840 <__gethex+0x2c6>
 8010862:	1e67      	subs	r7, r4, #1
 8010864:	f1ba 0f00 	cmp.w	sl, #0
 8010868:	d131      	bne.n	80108ce <__gethex+0x354>
 801086a:	b127      	cbz	r7, 8010876 <__gethex+0x2fc>
 801086c:	4639      	mov	r1, r7
 801086e:	4628      	mov	r0, r5
 8010870:	f000 fdf4 	bl	801145c <__any_on>
 8010874:	4682      	mov	sl, r0
 8010876:	117a      	asrs	r2, r7, #5
 8010878:	2301      	movs	r3, #1
 801087a:	f007 071f 	and.w	r7, r7, #31
 801087e:	fa03 f707 	lsl.w	r7, r3, r7
 8010882:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010886:	4621      	mov	r1, r4
 8010888:	421f      	tst	r7, r3
 801088a:	4628      	mov	r0, r5
 801088c:	bf18      	it	ne
 801088e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010892:	1b36      	subs	r6, r6, r4
 8010894:	f7ff fe22 	bl	80104dc <rshift>
 8010898:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801089c:	2702      	movs	r7, #2
 801089e:	f1ba 0f00 	cmp.w	sl, #0
 80108a2:	d048      	beq.n	8010936 <__gethex+0x3bc>
 80108a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d015      	beq.n	80108d8 <__gethex+0x35e>
 80108ac:	2b03      	cmp	r3, #3
 80108ae:	d017      	beq.n	80108e0 <__gethex+0x366>
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d109      	bne.n	80108c8 <__gethex+0x34e>
 80108b4:	f01a 0f02 	tst.w	sl, #2
 80108b8:	d006      	beq.n	80108c8 <__gethex+0x34e>
 80108ba:	f8d9 3000 	ldr.w	r3, [r9]
 80108be:	ea4a 0a03 	orr.w	sl, sl, r3
 80108c2:	f01a 0f01 	tst.w	sl, #1
 80108c6:	d10e      	bne.n	80108e6 <__gethex+0x36c>
 80108c8:	f047 0710 	orr.w	r7, r7, #16
 80108cc:	e033      	b.n	8010936 <__gethex+0x3bc>
 80108ce:	f04f 0a01 	mov.w	sl, #1
 80108d2:	e7d0      	b.n	8010876 <__gethex+0x2fc>
 80108d4:	2701      	movs	r7, #1
 80108d6:	e7e2      	b.n	801089e <__gethex+0x324>
 80108d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108da:	f1c3 0301 	rsb	r3, r3, #1
 80108de:	9315      	str	r3, [sp, #84]	; 0x54
 80108e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d0f0      	beq.n	80108c8 <__gethex+0x34e>
 80108e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80108ea:	f105 0314 	add.w	r3, r5, #20
 80108ee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80108f2:	eb03 010a 	add.w	r1, r3, sl
 80108f6:	f04f 0c00 	mov.w	ip, #0
 80108fa:	4618      	mov	r0, r3
 80108fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010900:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010904:	d01c      	beq.n	8010940 <__gethex+0x3c6>
 8010906:	3201      	adds	r2, #1
 8010908:	6002      	str	r2, [r0, #0]
 801090a:	2f02      	cmp	r7, #2
 801090c:	f105 0314 	add.w	r3, r5, #20
 8010910:	d138      	bne.n	8010984 <__gethex+0x40a>
 8010912:	f8d8 2000 	ldr.w	r2, [r8]
 8010916:	3a01      	subs	r2, #1
 8010918:	42b2      	cmp	r2, r6
 801091a:	d10a      	bne.n	8010932 <__gethex+0x3b8>
 801091c:	1171      	asrs	r1, r6, #5
 801091e:	2201      	movs	r2, #1
 8010920:	f006 061f 	and.w	r6, r6, #31
 8010924:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010928:	fa02 f606 	lsl.w	r6, r2, r6
 801092c:	421e      	tst	r6, r3
 801092e:	bf18      	it	ne
 8010930:	4617      	movne	r7, r2
 8010932:	f047 0720 	orr.w	r7, r7, #32
 8010936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010938:	601d      	str	r5, [r3, #0]
 801093a:	9b06      	ldr	r3, [sp, #24]
 801093c:	601c      	str	r4, [r3, #0]
 801093e:	e6a4      	b.n	801068a <__gethex+0x110>
 8010940:	4299      	cmp	r1, r3
 8010942:	f843 cc04 	str.w	ip, [r3, #-4]
 8010946:	d8d8      	bhi.n	80108fa <__gethex+0x380>
 8010948:	68ab      	ldr	r3, [r5, #8]
 801094a:	4599      	cmp	r9, r3
 801094c:	db12      	blt.n	8010974 <__gethex+0x3fa>
 801094e:	6869      	ldr	r1, [r5, #4]
 8010950:	9802      	ldr	r0, [sp, #8]
 8010952:	3101      	adds	r1, #1
 8010954:	f000 f9a5 	bl	8010ca2 <_Balloc>
 8010958:	692a      	ldr	r2, [r5, #16]
 801095a:	3202      	adds	r2, #2
 801095c:	f105 010c 	add.w	r1, r5, #12
 8010960:	4683      	mov	fp, r0
 8010962:	0092      	lsls	r2, r2, #2
 8010964:	300c      	adds	r0, #12
 8010966:	f000 f991 	bl	8010c8c <memcpy>
 801096a:	4629      	mov	r1, r5
 801096c:	9802      	ldr	r0, [sp, #8]
 801096e:	f000 f9cc 	bl	8010d0a <_Bfree>
 8010972:	465d      	mov	r5, fp
 8010974:	692b      	ldr	r3, [r5, #16]
 8010976:	1c5a      	adds	r2, r3, #1
 8010978:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801097c:	612a      	str	r2, [r5, #16]
 801097e:	2201      	movs	r2, #1
 8010980:	615a      	str	r2, [r3, #20]
 8010982:	e7c2      	b.n	801090a <__gethex+0x390>
 8010984:	692a      	ldr	r2, [r5, #16]
 8010986:	454a      	cmp	r2, r9
 8010988:	dd0b      	ble.n	80109a2 <__gethex+0x428>
 801098a:	2101      	movs	r1, #1
 801098c:	4628      	mov	r0, r5
 801098e:	f7ff fda5 	bl	80104dc <rshift>
 8010992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010996:	3401      	adds	r4, #1
 8010998:	42a3      	cmp	r3, r4
 801099a:	f6ff aed9 	blt.w	8010750 <__gethex+0x1d6>
 801099e:	2701      	movs	r7, #1
 80109a0:	e7c7      	b.n	8010932 <__gethex+0x3b8>
 80109a2:	f016 061f 	ands.w	r6, r6, #31
 80109a6:	d0fa      	beq.n	801099e <__gethex+0x424>
 80109a8:	449a      	add	sl, r3
 80109aa:	f1c6 0620 	rsb	r6, r6, #32
 80109ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80109b2:	f000 fa3a 	bl	8010e2a <__hi0bits>
 80109b6:	42b0      	cmp	r0, r6
 80109b8:	dbe7      	blt.n	801098a <__gethex+0x410>
 80109ba:	e7f0      	b.n	801099e <__gethex+0x424>

080109bc <L_shift>:
 80109bc:	f1c2 0208 	rsb	r2, r2, #8
 80109c0:	0092      	lsls	r2, r2, #2
 80109c2:	b570      	push	{r4, r5, r6, lr}
 80109c4:	f1c2 0620 	rsb	r6, r2, #32
 80109c8:	6843      	ldr	r3, [r0, #4]
 80109ca:	6804      	ldr	r4, [r0, #0]
 80109cc:	fa03 f506 	lsl.w	r5, r3, r6
 80109d0:	432c      	orrs	r4, r5
 80109d2:	40d3      	lsrs	r3, r2
 80109d4:	6004      	str	r4, [r0, #0]
 80109d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80109da:	4288      	cmp	r0, r1
 80109dc:	d3f4      	bcc.n	80109c8 <L_shift+0xc>
 80109de:	bd70      	pop	{r4, r5, r6, pc}

080109e0 <__match>:
 80109e0:	b530      	push	{r4, r5, lr}
 80109e2:	6803      	ldr	r3, [r0, #0]
 80109e4:	3301      	adds	r3, #1
 80109e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109ea:	b914      	cbnz	r4, 80109f2 <__match+0x12>
 80109ec:	6003      	str	r3, [r0, #0]
 80109ee:	2001      	movs	r0, #1
 80109f0:	bd30      	pop	{r4, r5, pc}
 80109f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80109fa:	2d19      	cmp	r5, #25
 80109fc:	bf98      	it	ls
 80109fe:	3220      	addls	r2, #32
 8010a00:	42a2      	cmp	r2, r4
 8010a02:	d0f0      	beq.n	80109e6 <__match+0x6>
 8010a04:	2000      	movs	r0, #0
 8010a06:	e7f3      	b.n	80109f0 <__match+0x10>

08010a08 <__hexnan>:
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	680b      	ldr	r3, [r1, #0]
 8010a0e:	6801      	ldr	r1, [r0, #0]
 8010a10:	115f      	asrs	r7, r3, #5
 8010a12:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010a16:	f013 031f 	ands.w	r3, r3, #31
 8010a1a:	b087      	sub	sp, #28
 8010a1c:	bf18      	it	ne
 8010a1e:	3704      	addne	r7, #4
 8010a20:	2500      	movs	r5, #0
 8010a22:	1f3e      	subs	r6, r7, #4
 8010a24:	4682      	mov	sl, r0
 8010a26:	4690      	mov	r8, r2
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	f847 5c04 	str.w	r5, [r7, #-4]
 8010a2e:	46b1      	mov	r9, r6
 8010a30:	4634      	mov	r4, r6
 8010a32:	9502      	str	r5, [sp, #8]
 8010a34:	46ab      	mov	fp, r5
 8010a36:	784a      	ldrb	r2, [r1, #1]
 8010a38:	1c4b      	adds	r3, r1, #1
 8010a3a:	9303      	str	r3, [sp, #12]
 8010a3c:	b342      	cbz	r2, 8010a90 <__hexnan+0x88>
 8010a3e:	4610      	mov	r0, r2
 8010a40:	9105      	str	r1, [sp, #20]
 8010a42:	9204      	str	r2, [sp, #16]
 8010a44:	f7ff fd84 	bl	8010550 <__hexdig_fun>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	d143      	bne.n	8010ad4 <__hexnan+0xcc>
 8010a4c:	9a04      	ldr	r2, [sp, #16]
 8010a4e:	9905      	ldr	r1, [sp, #20]
 8010a50:	2a20      	cmp	r2, #32
 8010a52:	d818      	bhi.n	8010a86 <__hexnan+0x7e>
 8010a54:	9b02      	ldr	r3, [sp, #8]
 8010a56:	459b      	cmp	fp, r3
 8010a58:	dd13      	ble.n	8010a82 <__hexnan+0x7a>
 8010a5a:	454c      	cmp	r4, r9
 8010a5c:	d206      	bcs.n	8010a6c <__hexnan+0x64>
 8010a5e:	2d07      	cmp	r5, #7
 8010a60:	dc04      	bgt.n	8010a6c <__hexnan+0x64>
 8010a62:	462a      	mov	r2, r5
 8010a64:	4649      	mov	r1, r9
 8010a66:	4620      	mov	r0, r4
 8010a68:	f7ff ffa8 	bl	80109bc <L_shift>
 8010a6c:	4544      	cmp	r4, r8
 8010a6e:	d944      	bls.n	8010afa <__hexnan+0xf2>
 8010a70:	2300      	movs	r3, #0
 8010a72:	f1a4 0904 	sub.w	r9, r4, #4
 8010a76:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a7a:	f8cd b008 	str.w	fp, [sp, #8]
 8010a7e:	464c      	mov	r4, r9
 8010a80:	461d      	mov	r5, r3
 8010a82:	9903      	ldr	r1, [sp, #12]
 8010a84:	e7d7      	b.n	8010a36 <__hexnan+0x2e>
 8010a86:	2a29      	cmp	r2, #41	; 0x29
 8010a88:	d14a      	bne.n	8010b20 <__hexnan+0x118>
 8010a8a:	3102      	adds	r1, #2
 8010a8c:	f8ca 1000 	str.w	r1, [sl]
 8010a90:	f1bb 0f00 	cmp.w	fp, #0
 8010a94:	d044      	beq.n	8010b20 <__hexnan+0x118>
 8010a96:	454c      	cmp	r4, r9
 8010a98:	d206      	bcs.n	8010aa8 <__hexnan+0xa0>
 8010a9a:	2d07      	cmp	r5, #7
 8010a9c:	dc04      	bgt.n	8010aa8 <__hexnan+0xa0>
 8010a9e:	462a      	mov	r2, r5
 8010aa0:	4649      	mov	r1, r9
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	f7ff ff8a 	bl	80109bc <L_shift>
 8010aa8:	4544      	cmp	r4, r8
 8010aaa:	d928      	bls.n	8010afe <__hexnan+0xf6>
 8010aac:	4643      	mov	r3, r8
 8010aae:	f854 2b04 	ldr.w	r2, [r4], #4
 8010ab2:	f843 2b04 	str.w	r2, [r3], #4
 8010ab6:	42a6      	cmp	r6, r4
 8010ab8:	d2f9      	bcs.n	8010aae <__hexnan+0xa6>
 8010aba:	2200      	movs	r2, #0
 8010abc:	f843 2b04 	str.w	r2, [r3], #4
 8010ac0:	429e      	cmp	r6, r3
 8010ac2:	d2fb      	bcs.n	8010abc <__hexnan+0xb4>
 8010ac4:	6833      	ldr	r3, [r6, #0]
 8010ac6:	b91b      	cbnz	r3, 8010ad0 <__hexnan+0xc8>
 8010ac8:	4546      	cmp	r6, r8
 8010aca:	d127      	bne.n	8010b1c <__hexnan+0x114>
 8010acc:	2301      	movs	r3, #1
 8010ace:	6033      	str	r3, [r6, #0]
 8010ad0:	2005      	movs	r0, #5
 8010ad2:	e026      	b.n	8010b22 <__hexnan+0x11a>
 8010ad4:	3501      	adds	r5, #1
 8010ad6:	2d08      	cmp	r5, #8
 8010ad8:	f10b 0b01 	add.w	fp, fp, #1
 8010adc:	dd06      	ble.n	8010aec <__hexnan+0xe4>
 8010ade:	4544      	cmp	r4, r8
 8010ae0:	d9cf      	bls.n	8010a82 <__hexnan+0x7a>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ae8:	2501      	movs	r5, #1
 8010aea:	3c04      	subs	r4, #4
 8010aec:	6822      	ldr	r2, [r4, #0]
 8010aee:	f000 000f 	and.w	r0, r0, #15
 8010af2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010af6:	6020      	str	r0, [r4, #0]
 8010af8:	e7c3      	b.n	8010a82 <__hexnan+0x7a>
 8010afa:	2508      	movs	r5, #8
 8010afc:	e7c1      	b.n	8010a82 <__hexnan+0x7a>
 8010afe:	9b01      	ldr	r3, [sp, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d0df      	beq.n	8010ac4 <__hexnan+0xbc>
 8010b04:	f04f 32ff 	mov.w	r2, #4294967295
 8010b08:	f1c3 0320 	rsb	r3, r3, #32
 8010b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b10:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010b14:	401a      	ands	r2, r3
 8010b16:	f847 2c04 	str.w	r2, [r7, #-4]
 8010b1a:	e7d3      	b.n	8010ac4 <__hexnan+0xbc>
 8010b1c:	3e04      	subs	r6, #4
 8010b1e:	e7d1      	b.n	8010ac4 <__hexnan+0xbc>
 8010b20:	2004      	movs	r0, #4
 8010b22:	b007      	add	sp, #28
 8010b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b28 <__locale_ctype_ptr_l>:
 8010b28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010b2c:	4770      	bx	lr
	...

08010b30 <__locale_ctype_ptr>:
 8010b30:	4b04      	ldr	r3, [pc, #16]	; (8010b44 <__locale_ctype_ptr+0x14>)
 8010b32:	4a05      	ldr	r2, [pc, #20]	; (8010b48 <__locale_ctype_ptr+0x18>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	bf08      	it	eq
 8010b3c:	4613      	moveq	r3, r2
 8010b3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010b42:	4770      	bx	lr
 8010b44:	2000000c 	.word	0x2000000c
 8010b48:	20000070 	.word	0x20000070

08010b4c <__localeconv_l>:
 8010b4c:	30f0      	adds	r0, #240	; 0xf0
 8010b4e:	4770      	bx	lr

08010b50 <_localeconv_r>:
 8010b50:	4b04      	ldr	r3, [pc, #16]	; (8010b64 <_localeconv_r+0x14>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6a18      	ldr	r0, [r3, #32]
 8010b56:	4b04      	ldr	r3, [pc, #16]	; (8010b68 <_localeconv_r+0x18>)
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	bf08      	it	eq
 8010b5c:	4618      	moveq	r0, r3
 8010b5e:	30f0      	adds	r0, #240	; 0xf0
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	2000000c 	.word	0x2000000c
 8010b68:	20000070 	.word	0x20000070

08010b6c <_lseek_r>:
 8010b6c:	b538      	push	{r3, r4, r5, lr}
 8010b6e:	4c07      	ldr	r4, [pc, #28]	; (8010b8c <_lseek_r+0x20>)
 8010b70:	4605      	mov	r5, r0
 8010b72:	4608      	mov	r0, r1
 8010b74:	4611      	mov	r1, r2
 8010b76:	2200      	movs	r2, #0
 8010b78:	6022      	str	r2, [r4, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	f7f2 fa12 	bl	8002fa4 <_lseek>
 8010b80:	1c43      	adds	r3, r0, #1
 8010b82:	d102      	bne.n	8010b8a <_lseek_r+0x1e>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	b103      	cbz	r3, 8010b8a <_lseek_r+0x1e>
 8010b88:	602b      	str	r3, [r5, #0]
 8010b8a:	bd38      	pop	{r3, r4, r5, pc}
 8010b8c:	20004d40 	.word	0x20004d40

08010b90 <__swhatbuf_r>:
 8010b90:	b570      	push	{r4, r5, r6, lr}
 8010b92:	460e      	mov	r6, r1
 8010b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b98:	2900      	cmp	r1, #0
 8010b9a:	b096      	sub	sp, #88	; 0x58
 8010b9c:	4614      	mov	r4, r2
 8010b9e:	461d      	mov	r5, r3
 8010ba0:	da07      	bge.n	8010bb2 <__swhatbuf_r+0x22>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	602b      	str	r3, [r5, #0]
 8010ba6:	89b3      	ldrh	r3, [r6, #12]
 8010ba8:	061a      	lsls	r2, r3, #24
 8010baa:	d410      	bmi.n	8010bce <__swhatbuf_r+0x3e>
 8010bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bb0:	e00e      	b.n	8010bd0 <__swhatbuf_r+0x40>
 8010bb2:	466a      	mov	r2, sp
 8010bb4:	f001 fbf8 	bl	80123a8 <_fstat_r>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	dbf2      	blt.n	8010ba2 <__swhatbuf_r+0x12>
 8010bbc:	9a01      	ldr	r2, [sp, #4]
 8010bbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010bc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010bc6:	425a      	negs	r2, r3
 8010bc8:	415a      	adcs	r2, r3
 8010bca:	602a      	str	r2, [r5, #0]
 8010bcc:	e7ee      	b.n	8010bac <__swhatbuf_r+0x1c>
 8010bce:	2340      	movs	r3, #64	; 0x40
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	6023      	str	r3, [r4, #0]
 8010bd4:	b016      	add	sp, #88	; 0x58
 8010bd6:	bd70      	pop	{r4, r5, r6, pc}

08010bd8 <__smakebuf_r>:
 8010bd8:	898b      	ldrh	r3, [r1, #12]
 8010bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bdc:	079d      	lsls	r5, r3, #30
 8010bde:	4606      	mov	r6, r0
 8010be0:	460c      	mov	r4, r1
 8010be2:	d507      	bpl.n	8010bf4 <__smakebuf_r+0x1c>
 8010be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010be8:	6023      	str	r3, [r4, #0]
 8010bea:	6123      	str	r3, [r4, #16]
 8010bec:	2301      	movs	r3, #1
 8010bee:	6163      	str	r3, [r4, #20]
 8010bf0:	b002      	add	sp, #8
 8010bf2:	bd70      	pop	{r4, r5, r6, pc}
 8010bf4:	ab01      	add	r3, sp, #4
 8010bf6:	466a      	mov	r2, sp
 8010bf8:	f7ff ffca 	bl	8010b90 <__swhatbuf_r>
 8010bfc:	9900      	ldr	r1, [sp, #0]
 8010bfe:	4605      	mov	r5, r0
 8010c00:	4630      	mov	r0, r6
 8010c02:	f000 fca9 	bl	8011558 <_malloc_r>
 8010c06:	b948      	cbnz	r0, 8010c1c <__smakebuf_r+0x44>
 8010c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c0c:	059a      	lsls	r2, r3, #22
 8010c0e:	d4ef      	bmi.n	8010bf0 <__smakebuf_r+0x18>
 8010c10:	f023 0303 	bic.w	r3, r3, #3
 8010c14:	f043 0302 	orr.w	r3, r3, #2
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	e7e3      	b.n	8010be4 <__smakebuf_r+0xc>
 8010c1c:	4b0d      	ldr	r3, [pc, #52]	; (8010c54 <__smakebuf_r+0x7c>)
 8010c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c20:	89a3      	ldrh	r3, [r4, #12]
 8010c22:	6020      	str	r0, [r4, #0]
 8010c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c28:	81a3      	strh	r3, [r4, #12]
 8010c2a:	9b00      	ldr	r3, [sp, #0]
 8010c2c:	6163      	str	r3, [r4, #20]
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	6120      	str	r0, [r4, #16]
 8010c32:	b15b      	cbz	r3, 8010c4c <__smakebuf_r+0x74>
 8010c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c38:	4630      	mov	r0, r6
 8010c3a:	f001 fbc7 	bl	80123cc <_isatty_r>
 8010c3e:	b128      	cbz	r0, 8010c4c <__smakebuf_r+0x74>
 8010c40:	89a3      	ldrh	r3, [r4, #12]
 8010c42:	f023 0303 	bic.w	r3, r3, #3
 8010c46:	f043 0301 	orr.w	r3, r3, #1
 8010c4a:	81a3      	strh	r3, [r4, #12]
 8010c4c:	89a3      	ldrh	r3, [r4, #12]
 8010c4e:	431d      	orrs	r5, r3
 8010c50:	81a5      	strh	r5, [r4, #12]
 8010c52:	e7cd      	b.n	8010bf0 <__smakebuf_r+0x18>
 8010c54:	08010391 	.word	0x08010391

08010c58 <malloc>:
 8010c58:	4b02      	ldr	r3, [pc, #8]	; (8010c64 <malloc+0xc>)
 8010c5a:	4601      	mov	r1, r0
 8010c5c:	6818      	ldr	r0, [r3, #0]
 8010c5e:	f000 bc7b 	b.w	8011558 <_malloc_r>
 8010c62:	bf00      	nop
 8010c64:	2000000c 	.word	0x2000000c

08010c68 <__ascii_mbtowc>:
 8010c68:	b082      	sub	sp, #8
 8010c6a:	b901      	cbnz	r1, 8010c6e <__ascii_mbtowc+0x6>
 8010c6c:	a901      	add	r1, sp, #4
 8010c6e:	b142      	cbz	r2, 8010c82 <__ascii_mbtowc+0x1a>
 8010c70:	b14b      	cbz	r3, 8010c86 <__ascii_mbtowc+0x1e>
 8010c72:	7813      	ldrb	r3, [r2, #0]
 8010c74:	600b      	str	r3, [r1, #0]
 8010c76:	7812      	ldrb	r2, [r2, #0]
 8010c78:	1c10      	adds	r0, r2, #0
 8010c7a:	bf18      	it	ne
 8010c7c:	2001      	movne	r0, #1
 8010c7e:	b002      	add	sp, #8
 8010c80:	4770      	bx	lr
 8010c82:	4610      	mov	r0, r2
 8010c84:	e7fb      	b.n	8010c7e <__ascii_mbtowc+0x16>
 8010c86:	f06f 0001 	mvn.w	r0, #1
 8010c8a:	e7f8      	b.n	8010c7e <__ascii_mbtowc+0x16>

08010c8c <memcpy>:
 8010c8c:	b510      	push	{r4, lr}
 8010c8e:	1e43      	subs	r3, r0, #1
 8010c90:	440a      	add	r2, r1
 8010c92:	4291      	cmp	r1, r2
 8010c94:	d100      	bne.n	8010c98 <memcpy+0xc>
 8010c96:	bd10      	pop	{r4, pc}
 8010c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ca0:	e7f7      	b.n	8010c92 <memcpy+0x6>

08010ca2 <_Balloc>:
 8010ca2:	b570      	push	{r4, r5, r6, lr}
 8010ca4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	460e      	mov	r6, r1
 8010caa:	b93d      	cbnz	r5, 8010cbc <_Balloc+0x1a>
 8010cac:	2010      	movs	r0, #16
 8010cae:	f7ff ffd3 	bl	8010c58 <malloc>
 8010cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8010cb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010cb8:	6005      	str	r5, [r0, #0]
 8010cba:	60c5      	str	r5, [r0, #12]
 8010cbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010cbe:	68eb      	ldr	r3, [r5, #12]
 8010cc0:	b183      	cbz	r3, 8010ce4 <_Balloc+0x42>
 8010cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010cca:	b9b8      	cbnz	r0, 8010cfc <_Balloc+0x5a>
 8010ccc:	2101      	movs	r1, #1
 8010cce:	fa01 f506 	lsl.w	r5, r1, r6
 8010cd2:	1d6a      	adds	r2, r5, #5
 8010cd4:	0092      	lsls	r2, r2, #2
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f000 fbe1 	bl	801149e <_calloc_r>
 8010cdc:	b160      	cbz	r0, 8010cf8 <_Balloc+0x56>
 8010cde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010ce2:	e00e      	b.n	8010d02 <_Balloc+0x60>
 8010ce4:	2221      	movs	r2, #33	; 0x21
 8010ce6:	2104      	movs	r1, #4
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f000 fbd8 	bl	801149e <_calloc_r>
 8010cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cf0:	60e8      	str	r0, [r5, #12]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1e4      	bne.n	8010cc2 <_Balloc+0x20>
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	6802      	ldr	r2, [r0, #0]
 8010cfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010d02:	2300      	movs	r3, #0
 8010d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d08:	e7f7      	b.n	8010cfa <_Balloc+0x58>

08010d0a <_Bfree>:
 8010d0a:	b570      	push	{r4, r5, r6, lr}
 8010d0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010d0e:	4606      	mov	r6, r0
 8010d10:	460d      	mov	r5, r1
 8010d12:	b93c      	cbnz	r4, 8010d24 <_Bfree+0x1a>
 8010d14:	2010      	movs	r0, #16
 8010d16:	f7ff ff9f 	bl	8010c58 <malloc>
 8010d1a:	6270      	str	r0, [r6, #36]	; 0x24
 8010d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d20:	6004      	str	r4, [r0, #0]
 8010d22:	60c4      	str	r4, [r0, #12]
 8010d24:	b13d      	cbz	r5, 8010d36 <_Bfree+0x2c>
 8010d26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010d28:	686a      	ldr	r2, [r5, #4]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d30:	6029      	str	r1, [r5, #0]
 8010d32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010d36:	bd70      	pop	{r4, r5, r6, pc}

08010d38 <__multadd>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	690d      	ldr	r5, [r1, #16]
 8010d3e:	461f      	mov	r7, r3
 8010d40:	4606      	mov	r6, r0
 8010d42:	460c      	mov	r4, r1
 8010d44:	f101 0c14 	add.w	ip, r1, #20
 8010d48:	2300      	movs	r3, #0
 8010d4a:	f8dc 0000 	ldr.w	r0, [ip]
 8010d4e:	b281      	uxth	r1, r0
 8010d50:	fb02 7101 	mla	r1, r2, r1, r7
 8010d54:	0c0f      	lsrs	r7, r1, #16
 8010d56:	0c00      	lsrs	r0, r0, #16
 8010d58:	fb02 7000 	mla	r0, r2, r0, r7
 8010d5c:	b289      	uxth	r1, r1
 8010d5e:	3301      	adds	r3, #1
 8010d60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010d64:	429d      	cmp	r5, r3
 8010d66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8010d6e:	dcec      	bgt.n	8010d4a <__multadd+0x12>
 8010d70:	b1d7      	cbz	r7, 8010da8 <__multadd+0x70>
 8010d72:	68a3      	ldr	r3, [r4, #8]
 8010d74:	42ab      	cmp	r3, r5
 8010d76:	dc12      	bgt.n	8010d9e <__multadd+0x66>
 8010d78:	6861      	ldr	r1, [r4, #4]
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	3101      	adds	r1, #1
 8010d7e:	f7ff ff90 	bl	8010ca2 <_Balloc>
 8010d82:	6922      	ldr	r2, [r4, #16]
 8010d84:	3202      	adds	r2, #2
 8010d86:	f104 010c 	add.w	r1, r4, #12
 8010d8a:	4680      	mov	r8, r0
 8010d8c:	0092      	lsls	r2, r2, #2
 8010d8e:	300c      	adds	r0, #12
 8010d90:	f7ff ff7c 	bl	8010c8c <memcpy>
 8010d94:	4621      	mov	r1, r4
 8010d96:	4630      	mov	r0, r6
 8010d98:	f7ff ffb7 	bl	8010d0a <_Bfree>
 8010d9c:	4644      	mov	r4, r8
 8010d9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010da2:	3501      	adds	r5, #1
 8010da4:	615f      	str	r7, [r3, #20]
 8010da6:	6125      	str	r5, [r4, #16]
 8010da8:	4620      	mov	r0, r4
 8010daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dae <__s2b>:
 8010dae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010db2:	460c      	mov	r4, r1
 8010db4:	4615      	mov	r5, r2
 8010db6:	461f      	mov	r7, r3
 8010db8:	2209      	movs	r2, #9
 8010dba:	3308      	adds	r3, #8
 8010dbc:	4606      	mov	r6, r0
 8010dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	db20      	blt.n	8010e0c <__s2b+0x5e>
 8010dca:	4630      	mov	r0, r6
 8010dcc:	f7ff ff69 	bl	8010ca2 <_Balloc>
 8010dd0:	9b08      	ldr	r3, [sp, #32]
 8010dd2:	6143      	str	r3, [r0, #20]
 8010dd4:	2d09      	cmp	r5, #9
 8010dd6:	f04f 0301 	mov.w	r3, #1
 8010dda:	6103      	str	r3, [r0, #16]
 8010ddc:	dd19      	ble.n	8010e12 <__s2b+0x64>
 8010dde:	f104 0809 	add.w	r8, r4, #9
 8010de2:	46c1      	mov	r9, r8
 8010de4:	442c      	add	r4, r5
 8010de6:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010dea:	4601      	mov	r1, r0
 8010dec:	3b30      	subs	r3, #48	; 0x30
 8010dee:	220a      	movs	r2, #10
 8010df0:	4630      	mov	r0, r6
 8010df2:	f7ff ffa1 	bl	8010d38 <__multadd>
 8010df6:	45a1      	cmp	r9, r4
 8010df8:	d1f5      	bne.n	8010de6 <__s2b+0x38>
 8010dfa:	eb08 0405 	add.w	r4, r8, r5
 8010dfe:	3c08      	subs	r4, #8
 8010e00:	1b2d      	subs	r5, r5, r4
 8010e02:	1963      	adds	r3, r4, r5
 8010e04:	42bb      	cmp	r3, r7
 8010e06:	db07      	blt.n	8010e18 <__s2b+0x6a>
 8010e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0c:	0052      	lsls	r2, r2, #1
 8010e0e:	3101      	adds	r1, #1
 8010e10:	e7d9      	b.n	8010dc6 <__s2b+0x18>
 8010e12:	340a      	adds	r4, #10
 8010e14:	2509      	movs	r5, #9
 8010e16:	e7f3      	b.n	8010e00 <__s2b+0x52>
 8010e18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e1c:	4601      	mov	r1, r0
 8010e1e:	3b30      	subs	r3, #48	; 0x30
 8010e20:	220a      	movs	r2, #10
 8010e22:	4630      	mov	r0, r6
 8010e24:	f7ff ff88 	bl	8010d38 <__multadd>
 8010e28:	e7eb      	b.n	8010e02 <__s2b+0x54>

08010e2a <__hi0bits>:
 8010e2a:	0c02      	lsrs	r2, r0, #16
 8010e2c:	0412      	lsls	r2, r2, #16
 8010e2e:	4603      	mov	r3, r0
 8010e30:	b9b2      	cbnz	r2, 8010e60 <__hi0bits+0x36>
 8010e32:	0403      	lsls	r3, r0, #16
 8010e34:	2010      	movs	r0, #16
 8010e36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010e3a:	bf04      	itt	eq
 8010e3c:	021b      	lsleq	r3, r3, #8
 8010e3e:	3008      	addeq	r0, #8
 8010e40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010e44:	bf04      	itt	eq
 8010e46:	011b      	lsleq	r3, r3, #4
 8010e48:	3004      	addeq	r0, #4
 8010e4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010e4e:	bf04      	itt	eq
 8010e50:	009b      	lsleq	r3, r3, #2
 8010e52:	3002      	addeq	r0, #2
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	db06      	blt.n	8010e66 <__hi0bits+0x3c>
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	d503      	bpl.n	8010e64 <__hi0bits+0x3a>
 8010e5c:	3001      	adds	r0, #1
 8010e5e:	4770      	bx	lr
 8010e60:	2000      	movs	r0, #0
 8010e62:	e7e8      	b.n	8010e36 <__hi0bits+0xc>
 8010e64:	2020      	movs	r0, #32
 8010e66:	4770      	bx	lr

08010e68 <__lo0bits>:
 8010e68:	6803      	ldr	r3, [r0, #0]
 8010e6a:	f013 0207 	ands.w	r2, r3, #7
 8010e6e:	4601      	mov	r1, r0
 8010e70:	d00b      	beq.n	8010e8a <__lo0bits+0x22>
 8010e72:	07da      	lsls	r2, r3, #31
 8010e74:	d423      	bmi.n	8010ebe <__lo0bits+0x56>
 8010e76:	0798      	lsls	r0, r3, #30
 8010e78:	bf49      	itett	mi
 8010e7a:	085b      	lsrmi	r3, r3, #1
 8010e7c:	089b      	lsrpl	r3, r3, #2
 8010e7e:	2001      	movmi	r0, #1
 8010e80:	600b      	strmi	r3, [r1, #0]
 8010e82:	bf5c      	itt	pl
 8010e84:	600b      	strpl	r3, [r1, #0]
 8010e86:	2002      	movpl	r0, #2
 8010e88:	4770      	bx	lr
 8010e8a:	b298      	uxth	r0, r3
 8010e8c:	b9a8      	cbnz	r0, 8010eba <__lo0bits+0x52>
 8010e8e:	0c1b      	lsrs	r3, r3, #16
 8010e90:	2010      	movs	r0, #16
 8010e92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010e96:	bf04      	itt	eq
 8010e98:	0a1b      	lsreq	r3, r3, #8
 8010e9a:	3008      	addeq	r0, #8
 8010e9c:	071a      	lsls	r2, r3, #28
 8010e9e:	bf04      	itt	eq
 8010ea0:	091b      	lsreq	r3, r3, #4
 8010ea2:	3004      	addeq	r0, #4
 8010ea4:	079a      	lsls	r2, r3, #30
 8010ea6:	bf04      	itt	eq
 8010ea8:	089b      	lsreq	r3, r3, #2
 8010eaa:	3002      	addeq	r0, #2
 8010eac:	07da      	lsls	r2, r3, #31
 8010eae:	d402      	bmi.n	8010eb6 <__lo0bits+0x4e>
 8010eb0:	085b      	lsrs	r3, r3, #1
 8010eb2:	d006      	beq.n	8010ec2 <__lo0bits+0x5a>
 8010eb4:	3001      	adds	r0, #1
 8010eb6:	600b      	str	r3, [r1, #0]
 8010eb8:	4770      	bx	lr
 8010eba:	4610      	mov	r0, r2
 8010ebc:	e7e9      	b.n	8010e92 <__lo0bits+0x2a>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	4770      	bx	lr
 8010ec2:	2020      	movs	r0, #32
 8010ec4:	4770      	bx	lr

08010ec6 <__i2b>:
 8010ec6:	b510      	push	{r4, lr}
 8010ec8:	460c      	mov	r4, r1
 8010eca:	2101      	movs	r1, #1
 8010ecc:	f7ff fee9 	bl	8010ca2 <_Balloc>
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	6144      	str	r4, [r0, #20]
 8010ed4:	6102      	str	r2, [r0, #16]
 8010ed6:	bd10      	pop	{r4, pc}

08010ed8 <__multiply>:
 8010ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010edc:	4614      	mov	r4, r2
 8010ede:	690a      	ldr	r2, [r1, #16]
 8010ee0:	6923      	ldr	r3, [r4, #16]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	bfb8      	it	lt
 8010ee6:	460b      	movlt	r3, r1
 8010ee8:	4688      	mov	r8, r1
 8010eea:	bfbc      	itt	lt
 8010eec:	46a0      	movlt	r8, r4
 8010eee:	461c      	movlt	r4, r3
 8010ef0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ef4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010ef8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010efc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f00:	eb07 0609 	add.w	r6, r7, r9
 8010f04:	42b3      	cmp	r3, r6
 8010f06:	bfb8      	it	lt
 8010f08:	3101      	addlt	r1, #1
 8010f0a:	f7ff feca 	bl	8010ca2 <_Balloc>
 8010f0e:	f100 0514 	add.w	r5, r0, #20
 8010f12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010f16:	462b      	mov	r3, r5
 8010f18:	2200      	movs	r2, #0
 8010f1a:	4573      	cmp	r3, lr
 8010f1c:	d316      	bcc.n	8010f4c <__multiply+0x74>
 8010f1e:	f104 0214 	add.w	r2, r4, #20
 8010f22:	f108 0114 	add.w	r1, r8, #20
 8010f26:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010f2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	9b00      	ldr	r3, [sp, #0]
 8010f32:	9201      	str	r2, [sp, #4]
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d80c      	bhi.n	8010f52 <__multiply+0x7a>
 8010f38:	2e00      	cmp	r6, #0
 8010f3a:	dd03      	ble.n	8010f44 <__multiply+0x6c>
 8010f3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d05d      	beq.n	8011000 <__multiply+0x128>
 8010f44:	6106      	str	r6, [r0, #16]
 8010f46:	b003      	add	sp, #12
 8010f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4c:	f843 2b04 	str.w	r2, [r3], #4
 8010f50:	e7e3      	b.n	8010f1a <__multiply+0x42>
 8010f52:	f8b2 b000 	ldrh.w	fp, [r2]
 8010f56:	f1bb 0f00 	cmp.w	fp, #0
 8010f5a:	d023      	beq.n	8010fa4 <__multiply+0xcc>
 8010f5c:	4689      	mov	r9, r1
 8010f5e:	46ac      	mov	ip, r5
 8010f60:	f04f 0800 	mov.w	r8, #0
 8010f64:	f859 4b04 	ldr.w	r4, [r9], #4
 8010f68:	f8dc a000 	ldr.w	sl, [ip]
 8010f6c:	b2a3      	uxth	r3, r4
 8010f6e:	fa1f fa8a 	uxth.w	sl, sl
 8010f72:	fb0b a303 	mla	r3, fp, r3, sl
 8010f76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010f7a:	f8dc 4000 	ldr.w	r4, [ip]
 8010f7e:	4443      	add	r3, r8
 8010f80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010f84:	fb0b 840a 	mla	r4, fp, sl, r8
 8010f88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010f8c:	46e2      	mov	sl, ip
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f94:	454f      	cmp	r7, r9
 8010f96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010f9a:	f84a 3b04 	str.w	r3, [sl], #4
 8010f9e:	d82b      	bhi.n	8010ff8 <__multiply+0x120>
 8010fa0:	f8cc 8004 	str.w	r8, [ip, #4]
 8010fa4:	9b01      	ldr	r3, [sp, #4]
 8010fa6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010faa:	3204      	adds	r2, #4
 8010fac:	f1ba 0f00 	cmp.w	sl, #0
 8010fb0:	d020      	beq.n	8010ff4 <__multiply+0x11c>
 8010fb2:	682b      	ldr	r3, [r5, #0]
 8010fb4:	4689      	mov	r9, r1
 8010fb6:	46a8      	mov	r8, r5
 8010fb8:	f04f 0b00 	mov.w	fp, #0
 8010fbc:	f8b9 c000 	ldrh.w	ip, [r9]
 8010fc0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010fc4:	fb0a 440c 	mla	r4, sl, ip, r4
 8010fc8:	445c      	add	r4, fp
 8010fca:	46c4      	mov	ip, r8
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010fd2:	f84c 3b04 	str.w	r3, [ip], #4
 8010fd6:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fda:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010fde:	0c1b      	lsrs	r3, r3, #16
 8010fe0:	fb0a b303 	mla	r3, sl, r3, fp
 8010fe4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010fe8:	454f      	cmp	r7, r9
 8010fea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010fee:	d805      	bhi.n	8010ffc <__multiply+0x124>
 8010ff0:	f8c8 3004 	str.w	r3, [r8, #4]
 8010ff4:	3504      	adds	r5, #4
 8010ff6:	e79b      	b.n	8010f30 <__multiply+0x58>
 8010ff8:	46d4      	mov	ip, sl
 8010ffa:	e7b3      	b.n	8010f64 <__multiply+0x8c>
 8010ffc:	46e0      	mov	r8, ip
 8010ffe:	e7dd      	b.n	8010fbc <__multiply+0xe4>
 8011000:	3e01      	subs	r6, #1
 8011002:	e799      	b.n	8010f38 <__multiply+0x60>

08011004 <__pow5mult>:
 8011004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011008:	4615      	mov	r5, r2
 801100a:	f012 0203 	ands.w	r2, r2, #3
 801100e:	4606      	mov	r6, r0
 8011010:	460f      	mov	r7, r1
 8011012:	d007      	beq.n	8011024 <__pow5mult+0x20>
 8011014:	3a01      	subs	r2, #1
 8011016:	4c21      	ldr	r4, [pc, #132]	; (801109c <__pow5mult+0x98>)
 8011018:	2300      	movs	r3, #0
 801101a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801101e:	f7ff fe8b 	bl	8010d38 <__multadd>
 8011022:	4607      	mov	r7, r0
 8011024:	10ad      	asrs	r5, r5, #2
 8011026:	d035      	beq.n	8011094 <__pow5mult+0x90>
 8011028:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801102a:	b93c      	cbnz	r4, 801103c <__pow5mult+0x38>
 801102c:	2010      	movs	r0, #16
 801102e:	f7ff fe13 	bl	8010c58 <malloc>
 8011032:	6270      	str	r0, [r6, #36]	; 0x24
 8011034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011038:	6004      	str	r4, [r0, #0]
 801103a:	60c4      	str	r4, [r0, #12]
 801103c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011044:	b94c      	cbnz	r4, 801105a <__pow5mult+0x56>
 8011046:	f240 2171 	movw	r1, #625	; 0x271
 801104a:	4630      	mov	r0, r6
 801104c:	f7ff ff3b 	bl	8010ec6 <__i2b>
 8011050:	2300      	movs	r3, #0
 8011052:	f8c8 0008 	str.w	r0, [r8, #8]
 8011056:	4604      	mov	r4, r0
 8011058:	6003      	str	r3, [r0, #0]
 801105a:	f04f 0800 	mov.w	r8, #0
 801105e:	07eb      	lsls	r3, r5, #31
 8011060:	d50a      	bpl.n	8011078 <__pow5mult+0x74>
 8011062:	4639      	mov	r1, r7
 8011064:	4622      	mov	r2, r4
 8011066:	4630      	mov	r0, r6
 8011068:	f7ff ff36 	bl	8010ed8 <__multiply>
 801106c:	4639      	mov	r1, r7
 801106e:	4681      	mov	r9, r0
 8011070:	4630      	mov	r0, r6
 8011072:	f7ff fe4a 	bl	8010d0a <_Bfree>
 8011076:	464f      	mov	r7, r9
 8011078:	106d      	asrs	r5, r5, #1
 801107a:	d00b      	beq.n	8011094 <__pow5mult+0x90>
 801107c:	6820      	ldr	r0, [r4, #0]
 801107e:	b938      	cbnz	r0, 8011090 <__pow5mult+0x8c>
 8011080:	4622      	mov	r2, r4
 8011082:	4621      	mov	r1, r4
 8011084:	4630      	mov	r0, r6
 8011086:	f7ff ff27 	bl	8010ed8 <__multiply>
 801108a:	6020      	str	r0, [r4, #0]
 801108c:	f8c0 8000 	str.w	r8, [r0]
 8011090:	4604      	mov	r4, r0
 8011092:	e7e4      	b.n	801105e <__pow5mult+0x5a>
 8011094:	4638      	mov	r0, r7
 8011096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801109a:	bf00      	nop
 801109c:	08012c70 	.word	0x08012c70

080110a0 <__lshift>:
 80110a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a4:	460c      	mov	r4, r1
 80110a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	6849      	ldr	r1, [r1, #4]
 80110ae:	eb0a 0903 	add.w	r9, sl, r3
 80110b2:	68a3      	ldr	r3, [r4, #8]
 80110b4:	4607      	mov	r7, r0
 80110b6:	4616      	mov	r6, r2
 80110b8:	f109 0501 	add.w	r5, r9, #1
 80110bc:	42ab      	cmp	r3, r5
 80110be:	db32      	blt.n	8011126 <__lshift+0x86>
 80110c0:	4638      	mov	r0, r7
 80110c2:	f7ff fdee 	bl	8010ca2 <_Balloc>
 80110c6:	2300      	movs	r3, #0
 80110c8:	4680      	mov	r8, r0
 80110ca:	f100 0114 	add.w	r1, r0, #20
 80110ce:	461a      	mov	r2, r3
 80110d0:	4553      	cmp	r3, sl
 80110d2:	db2b      	blt.n	801112c <__lshift+0x8c>
 80110d4:	6920      	ldr	r0, [r4, #16]
 80110d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110da:	f104 0314 	add.w	r3, r4, #20
 80110de:	f016 021f 	ands.w	r2, r6, #31
 80110e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110ea:	d025      	beq.n	8011138 <__lshift+0x98>
 80110ec:	f1c2 0e20 	rsb	lr, r2, #32
 80110f0:	2000      	movs	r0, #0
 80110f2:	681e      	ldr	r6, [r3, #0]
 80110f4:	468a      	mov	sl, r1
 80110f6:	4096      	lsls	r6, r2
 80110f8:	4330      	orrs	r0, r6
 80110fa:	f84a 0b04 	str.w	r0, [sl], #4
 80110fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8011102:	459c      	cmp	ip, r3
 8011104:	fa20 f00e 	lsr.w	r0, r0, lr
 8011108:	d814      	bhi.n	8011134 <__lshift+0x94>
 801110a:	6048      	str	r0, [r1, #4]
 801110c:	b108      	cbz	r0, 8011112 <__lshift+0x72>
 801110e:	f109 0502 	add.w	r5, r9, #2
 8011112:	3d01      	subs	r5, #1
 8011114:	4638      	mov	r0, r7
 8011116:	f8c8 5010 	str.w	r5, [r8, #16]
 801111a:	4621      	mov	r1, r4
 801111c:	f7ff fdf5 	bl	8010d0a <_Bfree>
 8011120:	4640      	mov	r0, r8
 8011122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011126:	3101      	adds	r1, #1
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	e7c7      	b.n	80110bc <__lshift+0x1c>
 801112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011130:	3301      	adds	r3, #1
 8011132:	e7cd      	b.n	80110d0 <__lshift+0x30>
 8011134:	4651      	mov	r1, sl
 8011136:	e7dc      	b.n	80110f2 <__lshift+0x52>
 8011138:	3904      	subs	r1, #4
 801113a:	f853 2b04 	ldr.w	r2, [r3], #4
 801113e:	f841 2f04 	str.w	r2, [r1, #4]!
 8011142:	459c      	cmp	ip, r3
 8011144:	d8f9      	bhi.n	801113a <__lshift+0x9a>
 8011146:	e7e4      	b.n	8011112 <__lshift+0x72>

08011148 <__mcmp>:
 8011148:	6903      	ldr	r3, [r0, #16]
 801114a:	690a      	ldr	r2, [r1, #16]
 801114c:	1a9b      	subs	r3, r3, r2
 801114e:	b530      	push	{r4, r5, lr}
 8011150:	d10c      	bne.n	801116c <__mcmp+0x24>
 8011152:	0092      	lsls	r2, r2, #2
 8011154:	3014      	adds	r0, #20
 8011156:	3114      	adds	r1, #20
 8011158:	1884      	adds	r4, r0, r2
 801115a:	4411      	add	r1, r2
 801115c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011164:	4295      	cmp	r5, r2
 8011166:	d003      	beq.n	8011170 <__mcmp+0x28>
 8011168:	d305      	bcc.n	8011176 <__mcmp+0x2e>
 801116a:	2301      	movs	r3, #1
 801116c:	4618      	mov	r0, r3
 801116e:	bd30      	pop	{r4, r5, pc}
 8011170:	42a0      	cmp	r0, r4
 8011172:	d3f3      	bcc.n	801115c <__mcmp+0x14>
 8011174:	e7fa      	b.n	801116c <__mcmp+0x24>
 8011176:	f04f 33ff 	mov.w	r3, #4294967295
 801117a:	e7f7      	b.n	801116c <__mcmp+0x24>

0801117c <__mdiff>:
 801117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011180:	460d      	mov	r5, r1
 8011182:	4607      	mov	r7, r0
 8011184:	4611      	mov	r1, r2
 8011186:	4628      	mov	r0, r5
 8011188:	4614      	mov	r4, r2
 801118a:	f7ff ffdd 	bl	8011148 <__mcmp>
 801118e:	1e06      	subs	r6, r0, #0
 8011190:	d108      	bne.n	80111a4 <__mdiff+0x28>
 8011192:	4631      	mov	r1, r6
 8011194:	4638      	mov	r0, r7
 8011196:	f7ff fd84 	bl	8010ca2 <_Balloc>
 801119a:	2301      	movs	r3, #1
 801119c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80111a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a4:	bfa4      	itt	ge
 80111a6:	4623      	movge	r3, r4
 80111a8:	462c      	movge	r4, r5
 80111aa:	4638      	mov	r0, r7
 80111ac:	6861      	ldr	r1, [r4, #4]
 80111ae:	bfa6      	itte	ge
 80111b0:	461d      	movge	r5, r3
 80111b2:	2600      	movge	r6, #0
 80111b4:	2601      	movlt	r6, #1
 80111b6:	f7ff fd74 	bl	8010ca2 <_Balloc>
 80111ba:	692b      	ldr	r3, [r5, #16]
 80111bc:	60c6      	str	r6, [r0, #12]
 80111be:	6926      	ldr	r6, [r4, #16]
 80111c0:	f105 0914 	add.w	r9, r5, #20
 80111c4:	f104 0214 	add.w	r2, r4, #20
 80111c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80111cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80111d0:	f100 0514 	add.w	r5, r0, #20
 80111d4:	f04f 0e00 	mov.w	lr, #0
 80111d8:	f852 ab04 	ldr.w	sl, [r2], #4
 80111dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80111e0:	fa1e f18a 	uxtah	r1, lr, sl
 80111e4:	b2a3      	uxth	r3, r4
 80111e6:	1ac9      	subs	r1, r1, r3
 80111e8:	0c23      	lsrs	r3, r4, #16
 80111ea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80111ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80111f2:	b289      	uxth	r1, r1
 80111f4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80111f8:	45c8      	cmp	r8, r9
 80111fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80111fe:	4694      	mov	ip, r2
 8011200:	f845 3b04 	str.w	r3, [r5], #4
 8011204:	d8e8      	bhi.n	80111d8 <__mdiff+0x5c>
 8011206:	45bc      	cmp	ip, r7
 8011208:	d304      	bcc.n	8011214 <__mdiff+0x98>
 801120a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801120e:	b183      	cbz	r3, 8011232 <__mdiff+0xb6>
 8011210:	6106      	str	r6, [r0, #16]
 8011212:	e7c5      	b.n	80111a0 <__mdiff+0x24>
 8011214:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011218:	fa1e f381 	uxtah	r3, lr, r1
 801121c:	141a      	asrs	r2, r3, #16
 801121e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011222:	b29b      	uxth	r3, r3
 8011224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011228:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801122c:	f845 3b04 	str.w	r3, [r5], #4
 8011230:	e7e9      	b.n	8011206 <__mdiff+0x8a>
 8011232:	3e01      	subs	r6, #1
 8011234:	e7e9      	b.n	801120a <__mdiff+0x8e>
	...

08011238 <__ulp>:
 8011238:	4b12      	ldr	r3, [pc, #72]	; (8011284 <__ulp+0x4c>)
 801123a:	ee10 2a90 	vmov	r2, s1
 801123e:	401a      	ands	r2, r3
 8011240:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011244:	2b00      	cmp	r3, #0
 8011246:	dd04      	ble.n	8011252 <__ulp+0x1a>
 8011248:	2000      	movs	r0, #0
 801124a:	4619      	mov	r1, r3
 801124c:	ec41 0b10 	vmov	d0, r0, r1
 8011250:	4770      	bx	lr
 8011252:	425b      	negs	r3, r3
 8011254:	151b      	asrs	r3, r3, #20
 8011256:	2b13      	cmp	r3, #19
 8011258:	f04f 0000 	mov.w	r0, #0
 801125c:	f04f 0100 	mov.w	r1, #0
 8011260:	dc04      	bgt.n	801126c <__ulp+0x34>
 8011262:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011266:	fa42 f103 	asr.w	r1, r2, r3
 801126a:	e7ef      	b.n	801124c <__ulp+0x14>
 801126c:	3b14      	subs	r3, #20
 801126e:	2b1e      	cmp	r3, #30
 8011270:	f04f 0201 	mov.w	r2, #1
 8011274:	bfda      	itte	le
 8011276:	f1c3 031f 	rsble	r3, r3, #31
 801127a:	fa02 f303 	lslle.w	r3, r2, r3
 801127e:	4613      	movgt	r3, r2
 8011280:	4618      	mov	r0, r3
 8011282:	e7e3      	b.n	801124c <__ulp+0x14>
 8011284:	7ff00000 	.word	0x7ff00000

08011288 <__b2d>:
 8011288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128a:	6905      	ldr	r5, [r0, #16]
 801128c:	f100 0714 	add.w	r7, r0, #20
 8011290:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011294:	1f2e      	subs	r6, r5, #4
 8011296:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801129a:	4620      	mov	r0, r4
 801129c:	f7ff fdc5 	bl	8010e2a <__hi0bits>
 80112a0:	f1c0 0320 	rsb	r3, r0, #32
 80112a4:	280a      	cmp	r0, #10
 80112a6:	600b      	str	r3, [r1, #0]
 80112a8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011320 <__b2d+0x98>
 80112ac:	dc14      	bgt.n	80112d8 <__b2d+0x50>
 80112ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80112b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80112b6:	42b7      	cmp	r7, r6
 80112b8:	ea41 030c 	orr.w	r3, r1, ip
 80112bc:	bf34      	ite	cc
 80112be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112c2:	2100      	movcs	r1, #0
 80112c4:	3015      	adds	r0, #21
 80112c6:	fa04 f000 	lsl.w	r0, r4, r0
 80112ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80112ce:	ea40 0201 	orr.w	r2, r0, r1
 80112d2:	ec43 2b10 	vmov	d0, r2, r3
 80112d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112d8:	42b7      	cmp	r7, r6
 80112da:	bf3a      	itte	cc
 80112dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80112e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112e4:	2100      	movcs	r1, #0
 80112e6:	380b      	subs	r0, #11
 80112e8:	d015      	beq.n	8011316 <__b2d+0x8e>
 80112ea:	4084      	lsls	r4, r0
 80112ec:	f1c0 0520 	rsb	r5, r0, #32
 80112f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80112f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80112f8:	42be      	cmp	r6, r7
 80112fa:	fa21 fc05 	lsr.w	ip, r1, r5
 80112fe:	ea44 030c 	orr.w	r3, r4, ip
 8011302:	bf8c      	ite	hi
 8011304:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011308:	2400      	movls	r4, #0
 801130a:	fa01 f000 	lsl.w	r0, r1, r0
 801130e:	40ec      	lsrs	r4, r5
 8011310:	ea40 0204 	orr.w	r2, r0, r4
 8011314:	e7dd      	b.n	80112d2 <__b2d+0x4a>
 8011316:	ea44 030c 	orr.w	r3, r4, ip
 801131a:	460a      	mov	r2, r1
 801131c:	e7d9      	b.n	80112d2 <__b2d+0x4a>
 801131e:	bf00      	nop
 8011320:	3ff00000 	.word	0x3ff00000

08011324 <__d2b>:
 8011324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011328:	460e      	mov	r6, r1
 801132a:	2101      	movs	r1, #1
 801132c:	ec59 8b10 	vmov	r8, r9, d0
 8011330:	4615      	mov	r5, r2
 8011332:	f7ff fcb6 	bl	8010ca2 <_Balloc>
 8011336:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801133a:	4607      	mov	r7, r0
 801133c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011340:	bb34      	cbnz	r4, 8011390 <__d2b+0x6c>
 8011342:	9301      	str	r3, [sp, #4]
 8011344:	f1b8 0300 	subs.w	r3, r8, #0
 8011348:	d027      	beq.n	801139a <__d2b+0x76>
 801134a:	a802      	add	r0, sp, #8
 801134c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011350:	f7ff fd8a 	bl	8010e68 <__lo0bits>
 8011354:	9900      	ldr	r1, [sp, #0]
 8011356:	b1f0      	cbz	r0, 8011396 <__d2b+0x72>
 8011358:	9a01      	ldr	r2, [sp, #4]
 801135a:	f1c0 0320 	rsb	r3, r0, #32
 801135e:	fa02 f303 	lsl.w	r3, r2, r3
 8011362:	430b      	orrs	r3, r1
 8011364:	40c2      	lsrs	r2, r0
 8011366:	617b      	str	r3, [r7, #20]
 8011368:	9201      	str	r2, [sp, #4]
 801136a:	9b01      	ldr	r3, [sp, #4]
 801136c:	61bb      	str	r3, [r7, #24]
 801136e:	2b00      	cmp	r3, #0
 8011370:	bf14      	ite	ne
 8011372:	2102      	movne	r1, #2
 8011374:	2101      	moveq	r1, #1
 8011376:	6139      	str	r1, [r7, #16]
 8011378:	b1c4      	cbz	r4, 80113ac <__d2b+0x88>
 801137a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801137e:	4404      	add	r4, r0
 8011380:	6034      	str	r4, [r6, #0]
 8011382:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011386:	6028      	str	r0, [r5, #0]
 8011388:	4638      	mov	r0, r7
 801138a:	b003      	add	sp, #12
 801138c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011394:	e7d5      	b.n	8011342 <__d2b+0x1e>
 8011396:	6179      	str	r1, [r7, #20]
 8011398:	e7e7      	b.n	801136a <__d2b+0x46>
 801139a:	a801      	add	r0, sp, #4
 801139c:	f7ff fd64 	bl	8010e68 <__lo0bits>
 80113a0:	9b01      	ldr	r3, [sp, #4]
 80113a2:	617b      	str	r3, [r7, #20]
 80113a4:	2101      	movs	r1, #1
 80113a6:	6139      	str	r1, [r7, #16]
 80113a8:	3020      	adds	r0, #32
 80113aa:	e7e5      	b.n	8011378 <__d2b+0x54>
 80113ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80113b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113b4:	6030      	str	r0, [r6, #0]
 80113b6:	6918      	ldr	r0, [r3, #16]
 80113b8:	f7ff fd37 	bl	8010e2a <__hi0bits>
 80113bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80113c0:	e7e1      	b.n	8011386 <__d2b+0x62>

080113c2 <__ratio>:
 80113c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c6:	4688      	mov	r8, r1
 80113c8:	4669      	mov	r1, sp
 80113ca:	4681      	mov	r9, r0
 80113cc:	f7ff ff5c 	bl	8011288 <__b2d>
 80113d0:	a901      	add	r1, sp, #4
 80113d2:	4640      	mov	r0, r8
 80113d4:	ec57 6b10 	vmov	r6, r7, d0
 80113d8:	f7ff ff56 	bl	8011288 <__b2d>
 80113dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80113e4:	eba3 0c02 	sub.w	ip, r3, r2
 80113e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80113ec:	1a9b      	subs	r3, r3, r2
 80113ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80113f2:	ec5b ab10 	vmov	sl, fp, d0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	bfce      	itee	gt
 80113fa:	463a      	movgt	r2, r7
 80113fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011400:	465a      	movle	r2, fp
 8011402:	4659      	mov	r1, fp
 8011404:	463d      	mov	r5, r7
 8011406:	bfd4      	ite	le
 8011408:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801140c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011410:	4630      	mov	r0, r6
 8011412:	ee10 2a10 	vmov	r2, s0
 8011416:	460b      	mov	r3, r1
 8011418:	4629      	mov	r1, r5
 801141a:	f7ef fa2f 	bl	800087c <__aeabi_ddiv>
 801141e:	ec41 0b10 	vmov	d0, r0, r1
 8011422:	b003      	add	sp, #12
 8011424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011428 <__copybits>:
 8011428:	3901      	subs	r1, #1
 801142a:	b510      	push	{r4, lr}
 801142c:	1149      	asrs	r1, r1, #5
 801142e:	6914      	ldr	r4, [r2, #16]
 8011430:	3101      	adds	r1, #1
 8011432:	f102 0314 	add.w	r3, r2, #20
 8011436:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801143a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801143e:	42a3      	cmp	r3, r4
 8011440:	4602      	mov	r2, r0
 8011442:	d303      	bcc.n	801144c <__copybits+0x24>
 8011444:	2300      	movs	r3, #0
 8011446:	428a      	cmp	r2, r1
 8011448:	d305      	bcc.n	8011456 <__copybits+0x2e>
 801144a:	bd10      	pop	{r4, pc}
 801144c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011450:	f840 2b04 	str.w	r2, [r0], #4
 8011454:	e7f3      	b.n	801143e <__copybits+0x16>
 8011456:	f842 3b04 	str.w	r3, [r2], #4
 801145a:	e7f4      	b.n	8011446 <__copybits+0x1e>

0801145c <__any_on>:
 801145c:	f100 0214 	add.w	r2, r0, #20
 8011460:	6900      	ldr	r0, [r0, #16]
 8011462:	114b      	asrs	r3, r1, #5
 8011464:	4298      	cmp	r0, r3
 8011466:	b510      	push	{r4, lr}
 8011468:	db11      	blt.n	801148e <__any_on+0x32>
 801146a:	dd0a      	ble.n	8011482 <__any_on+0x26>
 801146c:	f011 011f 	ands.w	r1, r1, #31
 8011470:	d007      	beq.n	8011482 <__any_on+0x26>
 8011472:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011476:	fa24 f001 	lsr.w	r0, r4, r1
 801147a:	fa00 f101 	lsl.w	r1, r0, r1
 801147e:	428c      	cmp	r4, r1
 8011480:	d10b      	bne.n	801149a <__any_on+0x3e>
 8011482:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011486:	4293      	cmp	r3, r2
 8011488:	d803      	bhi.n	8011492 <__any_on+0x36>
 801148a:	2000      	movs	r0, #0
 801148c:	bd10      	pop	{r4, pc}
 801148e:	4603      	mov	r3, r0
 8011490:	e7f7      	b.n	8011482 <__any_on+0x26>
 8011492:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011496:	2900      	cmp	r1, #0
 8011498:	d0f5      	beq.n	8011486 <__any_on+0x2a>
 801149a:	2001      	movs	r0, #1
 801149c:	e7f6      	b.n	801148c <__any_on+0x30>

0801149e <_calloc_r>:
 801149e:	b538      	push	{r3, r4, r5, lr}
 80114a0:	fb02 f401 	mul.w	r4, r2, r1
 80114a4:	4621      	mov	r1, r4
 80114a6:	f000 f857 	bl	8011558 <_malloc_r>
 80114aa:	4605      	mov	r5, r0
 80114ac:	b118      	cbz	r0, 80114b6 <_calloc_r+0x18>
 80114ae:	4622      	mov	r2, r4
 80114b0:	2100      	movs	r1, #0
 80114b2:	f7fc f90f 	bl	800d6d4 <memset>
 80114b6:	4628      	mov	r0, r5
 80114b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080114bc <_free_r>:
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	4605      	mov	r5, r0
 80114c0:	2900      	cmp	r1, #0
 80114c2:	d045      	beq.n	8011550 <_free_r+0x94>
 80114c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114c8:	1f0c      	subs	r4, r1, #4
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	bfb8      	it	lt
 80114ce:	18e4      	addlt	r4, r4, r3
 80114d0:	f000 ffa5 	bl	801241e <__malloc_lock>
 80114d4:	4a1f      	ldr	r2, [pc, #124]	; (8011554 <_free_r+0x98>)
 80114d6:	6813      	ldr	r3, [r2, #0]
 80114d8:	4610      	mov	r0, r2
 80114da:	b933      	cbnz	r3, 80114ea <_free_r+0x2e>
 80114dc:	6063      	str	r3, [r4, #4]
 80114de:	6014      	str	r4, [r2, #0]
 80114e0:	4628      	mov	r0, r5
 80114e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114e6:	f000 bf9b 	b.w	8012420 <__malloc_unlock>
 80114ea:	42a3      	cmp	r3, r4
 80114ec:	d90c      	bls.n	8011508 <_free_r+0x4c>
 80114ee:	6821      	ldr	r1, [r4, #0]
 80114f0:	1862      	adds	r2, r4, r1
 80114f2:	4293      	cmp	r3, r2
 80114f4:	bf04      	itt	eq
 80114f6:	681a      	ldreq	r2, [r3, #0]
 80114f8:	685b      	ldreq	r3, [r3, #4]
 80114fa:	6063      	str	r3, [r4, #4]
 80114fc:	bf04      	itt	eq
 80114fe:	1852      	addeq	r2, r2, r1
 8011500:	6022      	streq	r2, [r4, #0]
 8011502:	6004      	str	r4, [r0, #0]
 8011504:	e7ec      	b.n	80114e0 <_free_r+0x24>
 8011506:	4613      	mov	r3, r2
 8011508:	685a      	ldr	r2, [r3, #4]
 801150a:	b10a      	cbz	r2, 8011510 <_free_r+0x54>
 801150c:	42a2      	cmp	r2, r4
 801150e:	d9fa      	bls.n	8011506 <_free_r+0x4a>
 8011510:	6819      	ldr	r1, [r3, #0]
 8011512:	1858      	adds	r0, r3, r1
 8011514:	42a0      	cmp	r0, r4
 8011516:	d10b      	bne.n	8011530 <_free_r+0x74>
 8011518:	6820      	ldr	r0, [r4, #0]
 801151a:	4401      	add	r1, r0
 801151c:	1858      	adds	r0, r3, r1
 801151e:	4282      	cmp	r2, r0
 8011520:	6019      	str	r1, [r3, #0]
 8011522:	d1dd      	bne.n	80114e0 <_free_r+0x24>
 8011524:	6810      	ldr	r0, [r2, #0]
 8011526:	6852      	ldr	r2, [r2, #4]
 8011528:	605a      	str	r2, [r3, #4]
 801152a:	4401      	add	r1, r0
 801152c:	6019      	str	r1, [r3, #0]
 801152e:	e7d7      	b.n	80114e0 <_free_r+0x24>
 8011530:	d902      	bls.n	8011538 <_free_r+0x7c>
 8011532:	230c      	movs	r3, #12
 8011534:	602b      	str	r3, [r5, #0]
 8011536:	e7d3      	b.n	80114e0 <_free_r+0x24>
 8011538:	6820      	ldr	r0, [r4, #0]
 801153a:	1821      	adds	r1, r4, r0
 801153c:	428a      	cmp	r2, r1
 801153e:	bf04      	itt	eq
 8011540:	6811      	ldreq	r1, [r2, #0]
 8011542:	6852      	ldreq	r2, [r2, #4]
 8011544:	6062      	str	r2, [r4, #4]
 8011546:	bf04      	itt	eq
 8011548:	1809      	addeq	r1, r1, r0
 801154a:	6021      	streq	r1, [r4, #0]
 801154c:	605c      	str	r4, [r3, #4]
 801154e:	e7c7      	b.n	80114e0 <_free_r+0x24>
 8011550:	bd38      	pop	{r3, r4, r5, pc}
 8011552:	bf00      	nop
 8011554:	20000470 	.word	0x20000470

08011558 <_malloc_r>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	1ccd      	adds	r5, r1, #3
 801155c:	f025 0503 	bic.w	r5, r5, #3
 8011560:	3508      	adds	r5, #8
 8011562:	2d0c      	cmp	r5, #12
 8011564:	bf38      	it	cc
 8011566:	250c      	movcc	r5, #12
 8011568:	2d00      	cmp	r5, #0
 801156a:	4606      	mov	r6, r0
 801156c:	db01      	blt.n	8011572 <_malloc_r+0x1a>
 801156e:	42a9      	cmp	r1, r5
 8011570:	d903      	bls.n	801157a <_malloc_r+0x22>
 8011572:	230c      	movs	r3, #12
 8011574:	6033      	str	r3, [r6, #0]
 8011576:	2000      	movs	r0, #0
 8011578:	bd70      	pop	{r4, r5, r6, pc}
 801157a:	f000 ff50 	bl	801241e <__malloc_lock>
 801157e:	4a21      	ldr	r2, [pc, #132]	; (8011604 <_malloc_r+0xac>)
 8011580:	6814      	ldr	r4, [r2, #0]
 8011582:	4621      	mov	r1, r4
 8011584:	b991      	cbnz	r1, 80115ac <_malloc_r+0x54>
 8011586:	4c20      	ldr	r4, [pc, #128]	; (8011608 <_malloc_r+0xb0>)
 8011588:	6823      	ldr	r3, [r4, #0]
 801158a:	b91b      	cbnz	r3, 8011594 <_malloc_r+0x3c>
 801158c:	4630      	mov	r0, r6
 801158e:	f000 fde3 	bl	8012158 <_sbrk_r>
 8011592:	6020      	str	r0, [r4, #0]
 8011594:	4629      	mov	r1, r5
 8011596:	4630      	mov	r0, r6
 8011598:	f000 fdde 	bl	8012158 <_sbrk_r>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d124      	bne.n	80115ea <_malloc_r+0x92>
 80115a0:	230c      	movs	r3, #12
 80115a2:	6033      	str	r3, [r6, #0]
 80115a4:	4630      	mov	r0, r6
 80115a6:	f000 ff3b 	bl	8012420 <__malloc_unlock>
 80115aa:	e7e4      	b.n	8011576 <_malloc_r+0x1e>
 80115ac:	680b      	ldr	r3, [r1, #0]
 80115ae:	1b5b      	subs	r3, r3, r5
 80115b0:	d418      	bmi.n	80115e4 <_malloc_r+0x8c>
 80115b2:	2b0b      	cmp	r3, #11
 80115b4:	d90f      	bls.n	80115d6 <_malloc_r+0x7e>
 80115b6:	600b      	str	r3, [r1, #0]
 80115b8:	50cd      	str	r5, [r1, r3]
 80115ba:	18cc      	adds	r4, r1, r3
 80115bc:	4630      	mov	r0, r6
 80115be:	f000 ff2f 	bl	8012420 <__malloc_unlock>
 80115c2:	f104 000b 	add.w	r0, r4, #11
 80115c6:	1d23      	adds	r3, r4, #4
 80115c8:	f020 0007 	bic.w	r0, r0, #7
 80115cc:	1ac3      	subs	r3, r0, r3
 80115ce:	d0d3      	beq.n	8011578 <_malloc_r+0x20>
 80115d0:	425a      	negs	r2, r3
 80115d2:	50e2      	str	r2, [r4, r3]
 80115d4:	e7d0      	b.n	8011578 <_malloc_r+0x20>
 80115d6:	428c      	cmp	r4, r1
 80115d8:	684b      	ldr	r3, [r1, #4]
 80115da:	bf16      	itet	ne
 80115dc:	6063      	strne	r3, [r4, #4]
 80115de:	6013      	streq	r3, [r2, #0]
 80115e0:	460c      	movne	r4, r1
 80115e2:	e7eb      	b.n	80115bc <_malloc_r+0x64>
 80115e4:	460c      	mov	r4, r1
 80115e6:	6849      	ldr	r1, [r1, #4]
 80115e8:	e7cc      	b.n	8011584 <_malloc_r+0x2c>
 80115ea:	1cc4      	adds	r4, r0, #3
 80115ec:	f024 0403 	bic.w	r4, r4, #3
 80115f0:	42a0      	cmp	r0, r4
 80115f2:	d005      	beq.n	8011600 <_malloc_r+0xa8>
 80115f4:	1a21      	subs	r1, r4, r0
 80115f6:	4630      	mov	r0, r6
 80115f8:	f000 fdae 	bl	8012158 <_sbrk_r>
 80115fc:	3001      	adds	r0, #1
 80115fe:	d0cf      	beq.n	80115a0 <_malloc_r+0x48>
 8011600:	6025      	str	r5, [r4, #0]
 8011602:	e7db      	b.n	80115bc <_malloc_r+0x64>
 8011604:	20000470 	.word	0x20000470
 8011608:	20000474 	.word	0x20000474

0801160c <__ssputs_r>:
 801160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011610:	688e      	ldr	r6, [r1, #8]
 8011612:	429e      	cmp	r6, r3
 8011614:	4682      	mov	sl, r0
 8011616:	460c      	mov	r4, r1
 8011618:	4690      	mov	r8, r2
 801161a:	4699      	mov	r9, r3
 801161c:	d837      	bhi.n	801168e <__ssputs_r+0x82>
 801161e:	898a      	ldrh	r2, [r1, #12]
 8011620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011624:	d031      	beq.n	801168a <__ssputs_r+0x7e>
 8011626:	6825      	ldr	r5, [r4, #0]
 8011628:	6909      	ldr	r1, [r1, #16]
 801162a:	1a6f      	subs	r7, r5, r1
 801162c:	6965      	ldr	r5, [r4, #20]
 801162e:	2302      	movs	r3, #2
 8011630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011634:	fb95 f5f3 	sdiv	r5, r5, r3
 8011638:	f109 0301 	add.w	r3, r9, #1
 801163c:	443b      	add	r3, r7
 801163e:	429d      	cmp	r5, r3
 8011640:	bf38      	it	cc
 8011642:	461d      	movcc	r5, r3
 8011644:	0553      	lsls	r3, r2, #21
 8011646:	d530      	bpl.n	80116aa <__ssputs_r+0x9e>
 8011648:	4629      	mov	r1, r5
 801164a:	f7ff ff85 	bl	8011558 <_malloc_r>
 801164e:	4606      	mov	r6, r0
 8011650:	b950      	cbnz	r0, 8011668 <__ssputs_r+0x5c>
 8011652:	230c      	movs	r3, #12
 8011654:	f8ca 3000 	str.w	r3, [sl]
 8011658:	89a3      	ldrh	r3, [r4, #12]
 801165a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801165e:	81a3      	strh	r3, [r4, #12]
 8011660:	f04f 30ff 	mov.w	r0, #4294967295
 8011664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011668:	463a      	mov	r2, r7
 801166a:	6921      	ldr	r1, [r4, #16]
 801166c:	f7ff fb0e 	bl	8010c8c <memcpy>
 8011670:	89a3      	ldrh	r3, [r4, #12]
 8011672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801167a:	81a3      	strh	r3, [r4, #12]
 801167c:	6126      	str	r6, [r4, #16]
 801167e:	6165      	str	r5, [r4, #20]
 8011680:	443e      	add	r6, r7
 8011682:	1bed      	subs	r5, r5, r7
 8011684:	6026      	str	r6, [r4, #0]
 8011686:	60a5      	str	r5, [r4, #8]
 8011688:	464e      	mov	r6, r9
 801168a:	454e      	cmp	r6, r9
 801168c:	d900      	bls.n	8011690 <__ssputs_r+0x84>
 801168e:	464e      	mov	r6, r9
 8011690:	4632      	mov	r2, r6
 8011692:	4641      	mov	r1, r8
 8011694:	6820      	ldr	r0, [r4, #0]
 8011696:	f000 fea9 	bl	80123ec <memmove>
 801169a:	68a3      	ldr	r3, [r4, #8]
 801169c:	1b9b      	subs	r3, r3, r6
 801169e:	60a3      	str	r3, [r4, #8]
 80116a0:	6823      	ldr	r3, [r4, #0]
 80116a2:	441e      	add	r6, r3
 80116a4:	6026      	str	r6, [r4, #0]
 80116a6:	2000      	movs	r0, #0
 80116a8:	e7dc      	b.n	8011664 <__ssputs_r+0x58>
 80116aa:	462a      	mov	r2, r5
 80116ac:	f000 feb9 	bl	8012422 <_realloc_r>
 80116b0:	4606      	mov	r6, r0
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d1e2      	bne.n	801167c <__ssputs_r+0x70>
 80116b6:	6921      	ldr	r1, [r4, #16]
 80116b8:	4650      	mov	r0, sl
 80116ba:	f7ff feff 	bl	80114bc <_free_r>
 80116be:	e7c8      	b.n	8011652 <__ssputs_r+0x46>

080116c0 <_svfiprintf_r>:
 80116c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	461d      	mov	r5, r3
 80116c6:	898b      	ldrh	r3, [r1, #12]
 80116c8:	061f      	lsls	r7, r3, #24
 80116ca:	b09d      	sub	sp, #116	; 0x74
 80116cc:	4680      	mov	r8, r0
 80116ce:	460c      	mov	r4, r1
 80116d0:	4616      	mov	r6, r2
 80116d2:	d50f      	bpl.n	80116f4 <_svfiprintf_r+0x34>
 80116d4:	690b      	ldr	r3, [r1, #16]
 80116d6:	b96b      	cbnz	r3, 80116f4 <_svfiprintf_r+0x34>
 80116d8:	2140      	movs	r1, #64	; 0x40
 80116da:	f7ff ff3d 	bl	8011558 <_malloc_r>
 80116de:	6020      	str	r0, [r4, #0]
 80116e0:	6120      	str	r0, [r4, #16]
 80116e2:	b928      	cbnz	r0, 80116f0 <_svfiprintf_r+0x30>
 80116e4:	230c      	movs	r3, #12
 80116e6:	f8c8 3000 	str.w	r3, [r8]
 80116ea:	f04f 30ff 	mov.w	r0, #4294967295
 80116ee:	e0c8      	b.n	8011882 <_svfiprintf_r+0x1c2>
 80116f0:	2340      	movs	r3, #64	; 0x40
 80116f2:	6163      	str	r3, [r4, #20]
 80116f4:	2300      	movs	r3, #0
 80116f6:	9309      	str	r3, [sp, #36]	; 0x24
 80116f8:	2320      	movs	r3, #32
 80116fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116fe:	2330      	movs	r3, #48	; 0x30
 8011700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011704:	9503      	str	r5, [sp, #12]
 8011706:	f04f 0b01 	mov.w	fp, #1
 801170a:	4637      	mov	r7, r6
 801170c:	463d      	mov	r5, r7
 801170e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011712:	b10b      	cbz	r3, 8011718 <_svfiprintf_r+0x58>
 8011714:	2b25      	cmp	r3, #37	; 0x25
 8011716:	d13e      	bne.n	8011796 <_svfiprintf_r+0xd6>
 8011718:	ebb7 0a06 	subs.w	sl, r7, r6
 801171c:	d00b      	beq.n	8011736 <_svfiprintf_r+0x76>
 801171e:	4653      	mov	r3, sl
 8011720:	4632      	mov	r2, r6
 8011722:	4621      	mov	r1, r4
 8011724:	4640      	mov	r0, r8
 8011726:	f7ff ff71 	bl	801160c <__ssputs_r>
 801172a:	3001      	adds	r0, #1
 801172c:	f000 80a4 	beq.w	8011878 <_svfiprintf_r+0x1b8>
 8011730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011732:	4453      	add	r3, sl
 8011734:	9309      	str	r3, [sp, #36]	; 0x24
 8011736:	783b      	ldrb	r3, [r7, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 809d 	beq.w	8011878 <_svfiprintf_r+0x1b8>
 801173e:	2300      	movs	r3, #0
 8011740:	f04f 32ff 	mov.w	r2, #4294967295
 8011744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011748:	9304      	str	r3, [sp, #16]
 801174a:	9307      	str	r3, [sp, #28]
 801174c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011750:	931a      	str	r3, [sp, #104]	; 0x68
 8011752:	462f      	mov	r7, r5
 8011754:	2205      	movs	r2, #5
 8011756:	f817 1b01 	ldrb.w	r1, [r7], #1
 801175a:	4850      	ldr	r0, [pc, #320]	; (801189c <_svfiprintf_r+0x1dc>)
 801175c:	f7ee fd58 	bl	8000210 <memchr>
 8011760:	9b04      	ldr	r3, [sp, #16]
 8011762:	b9d0      	cbnz	r0, 801179a <_svfiprintf_r+0xda>
 8011764:	06d9      	lsls	r1, r3, #27
 8011766:	bf44      	itt	mi
 8011768:	2220      	movmi	r2, #32
 801176a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801176e:	071a      	lsls	r2, r3, #28
 8011770:	bf44      	itt	mi
 8011772:	222b      	movmi	r2, #43	; 0x2b
 8011774:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011778:	782a      	ldrb	r2, [r5, #0]
 801177a:	2a2a      	cmp	r2, #42	; 0x2a
 801177c:	d015      	beq.n	80117aa <_svfiprintf_r+0xea>
 801177e:	9a07      	ldr	r2, [sp, #28]
 8011780:	462f      	mov	r7, r5
 8011782:	2000      	movs	r0, #0
 8011784:	250a      	movs	r5, #10
 8011786:	4639      	mov	r1, r7
 8011788:	f811 3b01 	ldrb.w	r3, [r1], #1
 801178c:	3b30      	subs	r3, #48	; 0x30
 801178e:	2b09      	cmp	r3, #9
 8011790:	d94d      	bls.n	801182e <_svfiprintf_r+0x16e>
 8011792:	b1b8      	cbz	r0, 80117c4 <_svfiprintf_r+0x104>
 8011794:	e00f      	b.n	80117b6 <_svfiprintf_r+0xf6>
 8011796:	462f      	mov	r7, r5
 8011798:	e7b8      	b.n	801170c <_svfiprintf_r+0x4c>
 801179a:	4a40      	ldr	r2, [pc, #256]	; (801189c <_svfiprintf_r+0x1dc>)
 801179c:	1a80      	subs	r0, r0, r2
 801179e:	fa0b f000 	lsl.w	r0, fp, r0
 80117a2:	4318      	orrs	r0, r3
 80117a4:	9004      	str	r0, [sp, #16]
 80117a6:	463d      	mov	r5, r7
 80117a8:	e7d3      	b.n	8011752 <_svfiprintf_r+0x92>
 80117aa:	9a03      	ldr	r2, [sp, #12]
 80117ac:	1d11      	adds	r1, r2, #4
 80117ae:	6812      	ldr	r2, [r2, #0]
 80117b0:	9103      	str	r1, [sp, #12]
 80117b2:	2a00      	cmp	r2, #0
 80117b4:	db01      	blt.n	80117ba <_svfiprintf_r+0xfa>
 80117b6:	9207      	str	r2, [sp, #28]
 80117b8:	e004      	b.n	80117c4 <_svfiprintf_r+0x104>
 80117ba:	4252      	negs	r2, r2
 80117bc:	f043 0302 	orr.w	r3, r3, #2
 80117c0:	9207      	str	r2, [sp, #28]
 80117c2:	9304      	str	r3, [sp, #16]
 80117c4:	783b      	ldrb	r3, [r7, #0]
 80117c6:	2b2e      	cmp	r3, #46	; 0x2e
 80117c8:	d10c      	bne.n	80117e4 <_svfiprintf_r+0x124>
 80117ca:	787b      	ldrb	r3, [r7, #1]
 80117cc:	2b2a      	cmp	r3, #42	; 0x2a
 80117ce:	d133      	bne.n	8011838 <_svfiprintf_r+0x178>
 80117d0:	9b03      	ldr	r3, [sp, #12]
 80117d2:	1d1a      	adds	r2, r3, #4
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	9203      	str	r2, [sp, #12]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	bfb8      	it	lt
 80117dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80117e0:	3702      	adds	r7, #2
 80117e2:	9305      	str	r3, [sp, #20]
 80117e4:	4d2e      	ldr	r5, [pc, #184]	; (80118a0 <_svfiprintf_r+0x1e0>)
 80117e6:	7839      	ldrb	r1, [r7, #0]
 80117e8:	2203      	movs	r2, #3
 80117ea:	4628      	mov	r0, r5
 80117ec:	f7ee fd10 	bl	8000210 <memchr>
 80117f0:	b138      	cbz	r0, 8011802 <_svfiprintf_r+0x142>
 80117f2:	2340      	movs	r3, #64	; 0x40
 80117f4:	1b40      	subs	r0, r0, r5
 80117f6:	fa03 f000 	lsl.w	r0, r3, r0
 80117fa:	9b04      	ldr	r3, [sp, #16]
 80117fc:	4303      	orrs	r3, r0
 80117fe:	3701      	adds	r7, #1
 8011800:	9304      	str	r3, [sp, #16]
 8011802:	7839      	ldrb	r1, [r7, #0]
 8011804:	4827      	ldr	r0, [pc, #156]	; (80118a4 <_svfiprintf_r+0x1e4>)
 8011806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801180a:	2206      	movs	r2, #6
 801180c:	1c7e      	adds	r6, r7, #1
 801180e:	f7ee fcff 	bl	8000210 <memchr>
 8011812:	2800      	cmp	r0, #0
 8011814:	d038      	beq.n	8011888 <_svfiprintf_r+0x1c8>
 8011816:	4b24      	ldr	r3, [pc, #144]	; (80118a8 <_svfiprintf_r+0x1e8>)
 8011818:	bb13      	cbnz	r3, 8011860 <_svfiprintf_r+0x1a0>
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	3307      	adds	r3, #7
 801181e:	f023 0307 	bic.w	r3, r3, #7
 8011822:	3308      	adds	r3, #8
 8011824:	9303      	str	r3, [sp, #12]
 8011826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011828:	444b      	add	r3, r9
 801182a:	9309      	str	r3, [sp, #36]	; 0x24
 801182c:	e76d      	b.n	801170a <_svfiprintf_r+0x4a>
 801182e:	fb05 3202 	mla	r2, r5, r2, r3
 8011832:	2001      	movs	r0, #1
 8011834:	460f      	mov	r7, r1
 8011836:	e7a6      	b.n	8011786 <_svfiprintf_r+0xc6>
 8011838:	2300      	movs	r3, #0
 801183a:	3701      	adds	r7, #1
 801183c:	9305      	str	r3, [sp, #20]
 801183e:	4619      	mov	r1, r3
 8011840:	250a      	movs	r5, #10
 8011842:	4638      	mov	r0, r7
 8011844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011848:	3a30      	subs	r2, #48	; 0x30
 801184a:	2a09      	cmp	r2, #9
 801184c:	d903      	bls.n	8011856 <_svfiprintf_r+0x196>
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0c8      	beq.n	80117e4 <_svfiprintf_r+0x124>
 8011852:	9105      	str	r1, [sp, #20]
 8011854:	e7c6      	b.n	80117e4 <_svfiprintf_r+0x124>
 8011856:	fb05 2101 	mla	r1, r5, r1, r2
 801185a:	2301      	movs	r3, #1
 801185c:	4607      	mov	r7, r0
 801185e:	e7f0      	b.n	8011842 <_svfiprintf_r+0x182>
 8011860:	ab03      	add	r3, sp, #12
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	4622      	mov	r2, r4
 8011866:	4b11      	ldr	r3, [pc, #68]	; (80118ac <_svfiprintf_r+0x1ec>)
 8011868:	a904      	add	r1, sp, #16
 801186a:	4640      	mov	r0, r8
 801186c:	f7fb ffce 	bl	800d80c <_printf_float>
 8011870:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011874:	4681      	mov	r9, r0
 8011876:	d1d6      	bne.n	8011826 <_svfiprintf_r+0x166>
 8011878:	89a3      	ldrh	r3, [r4, #12]
 801187a:	065b      	lsls	r3, r3, #25
 801187c:	f53f af35 	bmi.w	80116ea <_svfiprintf_r+0x2a>
 8011880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011882:	b01d      	add	sp, #116	; 0x74
 8011884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011888:	ab03      	add	r3, sp, #12
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	4622      	mov	r2, r4
 801188e:	4b07      	ldr	r3, [pc, #28]	; (80118ac <_svfiprintf_r+0x1ec>)
 8011890:	a904      	add	r1, sp, #16
 8011892:	4640      	mov	r0, r8
 8011894:	f7fc fa70 	bl	800dd78 <_printf_i>
 8011898:	e7ea      	b.n	8011870 <_svfiprintf_r+0x1b0>
 801189a:	bf00      	nop
 801189c:	08012c7c 	.word	0x08012c7c
 80118a0:	08012c82 	.word	0x08012c82
 80118a4:	08012c86 	.word	0x08012c86
 80118a8:	0800d80d 	.word	0x0800d80d
 80118ac:	0801160d 	.word	0x0801160d

080118b0 <_sungetc_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	1c4b      	adds	r3, r1, #1
 80118b4:	4614      	mov	r4, r2
 80118b6:	d103      	bne.n	80118c0 <_sungetc_r+0x10>
 80118b8:	f04f 35ff 	mov.w	r5, #4294967295
 80118bc:	4628      	mov	r0, r5
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	8993      	ldrh	r3, [r2, #12]
 80118c2:	f023 0320 	bic.w	r3, r3, #32
 80118c6:	8193      	strh	r3, [r2, #12]
 80118c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118ca:	6852      	ldr	r2, [r2, #4]
 80118cc:	b2cd      	uxtb	r5, r1
 80118ce:	b18b      	cbz	r3, 80118f4 <_sungetc_r+0x44>
 80118d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80118d2:	4293      	cmp	r3, r2
 80118d4:	dd08      	ble.n	80118e8 <_sungetc_r+0x38>
 80118d6:	6823      	ldr	r3, [r4, #0]
 80118d8:	1e5a      	subs	r2, r3, #1
 80118da:	6022      	str	r2, [r4, #0]
 80118dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80118e0:	6863      	ldr	r3, [r4, #4]
 80118e2:	3301      	adds	r3, #1
 80118e4:	6063      	str	r3, [r4, #4]
 80118e6:	e7e9      	b.n	80118bc <_sungetc_r+0xc>
 80118e8:	4621      	mov	r1, r4
 80118ea:	f000 fd15 	bl	8012318 <__submore>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d0f1      	beq.n	80118d6 <_sungetc_r+0x26>
 80118f2:	e7e1      	b.n	80118b8 <_sungetc_r+0x8>
 80118f4:	6921      	ldr	r1, [r4, #16]
 80118f6:	6823      	ldr	r3, [r4, #0]
 80118f8:	b151      	cbz	r1, 8011910 <_sungetc_r+0x60>
 80118fa:	4299      	cmp	r1, r3
 80118fc:	d208      	bcs.n	8011910 <_sungetc_r+0x60>
 80118fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011902:	42a9      	cmp	r1, r5
 8011904:	d104      	bne.n	8011910 <_sungetc_r+0x60>
 8011906:	3b01      	subs	r3, #1
 8011908:	3201      	adds	r2, #1
 801190a:	6023      	str	r3, [r4, #0]
 801190c:	6062      	str	r2, [r4, #4]
 801190e:	e7d5      	b.n	80118bc <_sungetc_r+0xc>
 8011910:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011918:	6363      	str	r3, [r4, #52]	; 0x34
 801191a:	2303      	movs	r3, #3
 801191c:	63a3      	str	r3, [r4, #56]	; 0x38
 801191e:	4623      	mov	r3, r4
 8011920:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011924:	6023      	str	r3, [r4, #0]
 8011926:	2301      	movs	r3, #1
 8011928:	e7dc      	b.n	80118e4 <_sungetc_r+0x34>

0801192a <__ssrefill_r>:
 801192a:	b510      	push	{r4, lr}
 801192c:	460c      	mov	r4, r1
 801192e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011930:	b169      	cbz	r1, 801194e <__ssrefill_r+0x24>
 8011932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011936:	4299      	cmp	r1, r3
 8011938:	d001      	beq.n	801193e <__ssrefill_r+0x14>
 801193a:	f7ff fdbf 	bl	80114bc <_free_r>
 801193e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011940:	6063      	str	r3, [r4, #4]
 8011942:	2000      	movs	r0, #0
 8011944:	6360      	str	r0, [r4, #52]	; 0x34
 8011946:	b113      	cbz	r3, 801194e <__ssrefill_r+0x24>
 8011948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801194a:	6023      	str	r3, [r4, #0]
 801194c:	bd10      	pop	{r4, pc}
 801194e:	6923      	ldr	r3, [r4, #16]
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	2300      	movs	r3, #0
 8011954:	6063      	str	r3, [r4, #4]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f043 0320 	orr.w	r3, r3, #32
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	f04f 30ff 	mov.w	r0, #4294967295
 8011962:	e7f3      	b.n	801194c <__ssrefill_r+0x22>

08011964 <__ssvfiscanf_r>:
 8011964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011968:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801196c:	460c      	mov	r4, r1
 801196e:	2100      	movs	r1, #0
 8011970:	9144      	str	r1, [sp, #272]	; 0x110
 8011972:	9145      	str	r1, [sp, #276]	; 0x114
 8011974:	499f      	ldr	r1, [pc, #636]	; (8011bf4 <__ssvfiscanf_r+0x290>)
 8011976:	91a0      	str	r1, [sp, #640]	; 0x280
 8011978:	f10d 0804 	add.w	r8, sp, #4
 801197c:	499e      	ldr	r1, [pc, #632]	; (8011bf8 <__ssvfiscanf_r+0x294>)
 801197e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8011bfc <__ssvfiscanf_r+0x298>
 8011982:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011986:	4606      	mov	r6, r0
 8011988:	4692      	mov	sl, r2
 801198a:	91a1      	str	r1, [sp, #644]	; 0x284
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	270a      	movs	r7, #10
 8011990:	f89a 3000 	ldrb.w	r3, [sl]
 8011994:	2b00      	cmp	r3, #0
 8011996:	f000 812a 	beq.w	8011bee <__ssvfiscanf_r+0x28a>
 801199a:	4655      	mov	r5, sl
 801199c:	f7ff f8c8 	bl	8010b30 <__locale_ctype_ptr>
 80119a0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80119a4:	4458      	add	r0, fp
 80119a6:	7843      	ldrb	r3, [r0, #1]
 80119a8:	f013 0308 	ands.w	r3, r3, #8
 80119ac:	d01c      	beq.n	80119e8 <__ssvfiscanf_r+0x84>
 80119ae:	6863      	ldr	r3, [r4, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dd12      	ble.n	80119da <__ssvfiscanf_r+0x76>
 80119b4:	f7ff f8bc 	bl	8010b30 <__locale_ctype_ptr>
 80119b8:	6823      	ldr	r3, [r4, #0]
 80119ba:	781a      	ldrb	r2, [r3, #0]
 80119bc:	4410      	add	r0, r2
 80119be:	7842      	ldrb	r2, [r0, #1]
 80119c0:	0712      	lsls	r2, r2, #28
 80119c2:	d401      	bmi.n	80119c8 <__ssvfiscanf_r+0x64>
 80119c4:	46aa      	mov	sl, r5
 80119c6:	e7e3      	b.n	8011990 <__ssvfiscanf_r+0x2c>
 80119c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80119ca:	3201      	adds	r2, #1
 80119cc:	9245      	str	r2, [sp, #276]	; 0x114
 80119ce:	6862      	ldr	r2, [r4, #4]
 80119d0:	3301      	adds	r3, #1
 80119d2:	3a01      	subs	r2, #1
 80119d4:	6062      	str	r2, [r4, #4]
 80119d6:	6023      	str	r3, [r4, #0]
 80119d8:	e7e9      	b.n	80119ae <__ssvfiscanf_r+0x4a>
 80119da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80119dc:	4621      	mov	r1, r4
 80119de:	4630      	mov	r0, r6
 80119e0:	4798      	blx	r3
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d0e6      	beq.n	80119b4 <__ssvfiscanf_r+0x50>
 80119e6:	e7ed      	b.n	80119c4 <__ssvfiscanf_r+0x60>
 80119e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80119ec:	f040 8082 	bne.w	8011af4 <__ssvfiscanf_r+0x190>
 80119f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80119f2:	9341      	str	r3, [sp, #260]	; 0x104
 80119f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80119f8:	2b2a      	cmp	r3, #42	; 0x2a
 80119fa:	d103      	bne.n	8011a04 <__ssvfiscanf_r+0xa0>
 80119fc:	2310      	movs	r3, #16
 80119fe:	9341      	str	r3, [sp, #260]	; 0x104
 8011a00:	f10a 0502 	add.w	r5, sl, #2
 8011a04:	46aa      	mov	sl, r5
 8011a06:	f815 1b01 	ldrb.w	r1, [r5], #1
 8011a0a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011a0e:	2a09      	cmp	r2, #9
 8011a10:	d922      	bls.n	8011a58 <__ssvfiscanf_r+0xf4>
 8011a12:	2203      	movs	r2, #3
 8011a14:	4879      	ldr	r0, [pc, #484]	; (8011bfc <__ssvfiscanf_r+0x298>)
 8011a16:	f7ee fbfb 	bl	8000210 <memchr>
 8011a1a:	b138      	cbz	r0, 8011a2c <__ssvfiscanf_r+0xc8>
 8011a1c:	eba0 0309 	sub.w	r3, r0, r9
 8011a20:	2001      	movs	r0, #1
 8011a22:	4098      	lsls	r0, r3
 8011a24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011a26:	4318      	orrs	r0, r3
 8011a28:	9041      	str	r0, [sp, #260]	; 0x104
 8011a2a:	46aa      	mov	sl, r5
 8011a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a30:	2b67      	cmp	r3, #103	; 0x67
 8011a32:	f10a 0501 	add.w	r5, sl, #1
 8011a36:	d82b      	bhi.n	8011a90 <__ssvfiscanf_r+0x12c>
 8011a38:	2b65      	cmp	r3, #101	; 0x65
 8011a3a:	f080 809f 	bcs.w	8011b7c <__ssvfiscanf_r+0x218>
 8011a3e:	2b47      	cmp	r3, #71	; 0x47
 8011a40:	d810      	bhi.n	8011a64 <__ssvfiscanf_r+0x100>
 8011a42:	2b45      	cmp	r3, #69	; 0x45
 8011a44:	f080 809a 	bcs.w	8011b7c <__ssvfiscanf_r+0x218>
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d06c      	beq.n	8011b26 <__ssvfiscanf_r+0x1c2>
 8011a4c:	2b25      	cmp	r3, #37	; 0x25
 8011a4e:	d051      	beq.n	8011af4 <__ssvfiscanf_r+0x190>
 8011a50:	2303      	movs	r3, #3
 8011a52:	9347      	str	r3, [sp, #284]	; 0x11c
 8011a54:	9742      	str	r7, [sp, #264]	; 0x108
 8011a56:	e027      	b.n	8011aa8 <__ssvfiscanf_r+0x144>
 8011a58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011a5a:	fb07 1303 	mla	r3, r7, r3, r1
 8011a5e:	3b30      	subs	r3, #48	; 0x30
 8011a60:	9343      	str	r3, [sp, #268]	; 0x10c
 8011a62:	e7cf      	b.n	8011a04 <__ssvfiscanf_r+0xa0>
 8011a64:	2b5b      	cmp	r3, #91	; 0x5b
 8011a66:	d06a      	beq.n	8011b3e <__ssvfiscanf_r+0x1da>
 8011a68:	d80c      	bhi.n	8011a84 <__ssvfiscanf_r+0x120>
 8011a6a:	2b58      	cmp	r3, #88	; 0x58
 8011a6c:	d1f0      	bne.n	8011a50 <__ssvfiscanf_r+0xec>
 8011a6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a74:	9241      	str	r2, [sp, #260]	; 0x104
 8011a76:	2210      	movs	r2, #16
 8011a78:	9242      	str	r2, [sp, #264]	; 0x108
 8011a7a:	2b6e      	cmp	r3, #110	; 0x6e
 8011a7c:	bf8c      	ite	hi
 8011a7e:	2304      	movhi	r3, #4
 8011a80:	2303      	movls	r3, #3
 8011a82:	e010      	b.n	8011aa6 <__ssvfiscanf_r+0x142>
 8011a84:	2b63      	cmp	r3, #99	; 0x63
 8011a86:	d065      	beq.n	8011b54 <__ssvfiscanf_r+0x1f0>
 8011a88:	2b64      	cmp	r3, #100	; 0x64
 8011a8a:	d1e1      	bne.n	8011a50 <__ssvfiscanf_r+0xec>
 8011a8c:	9742      	str	r7, [sp, #264]	; 0x108
 8011a8e:	e7f4      	b.n	8011a7a <__ssvfiscanf_r+0x116>
 8011a90:	2b70      	cmp	r3, #112	; 0x70
 8011a92:	d04b      	beq.n	8011b2c <__ssvfiscanf_r+0x1c8>
 8011a94:	d826      	bhi.n	8011ae4 <__ssvfiscanf_r+0x180>
 8011a96:	2b6e      	cmp	r3, #110	; 0x6e
 8011a98:	d062      	beq.n	8011b60 <__ssvfiscanf_r+0x1fc>
 8011a9a:	d84c      	bhi.n	8011b36 <__ssvfiscanf_r+0x1d2>
 8011a9c:	2b69      	cmp	r3, #105	; 0x69
 8011a9e:	d1d7      	bne.n	8011a50 <__ssvfiscanf_r+0xec>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	9342      	str	r3, [sp, #264]	; 0x108
 8011aa4:	2303      	movs	r3, #3
 8011aa6:	9347      	str	r3, [sp, #284]	; 0x11c
 8011aa8:	6863      	ldr	r3, [r4, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	dd68      	ble.n	8011b80 <__ssvfiscanf_r+0x21c>
 8011aae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011ab0:	0659      	lsls	r1, r3, #25
 8011ab2:	d407      	bmi.n	8011ac4 <__ssvfiscanf_r+0x160>
 8011ab4:	f7ff f83c 	bl	8010b30 <__locale_ctype_ptr>
 8011ab8:	6823      	ldr	r3, [r4, #0]
 8011aba:	781a      	ldrb	r2, [r3, #0]
 8011abc:	4410      	add	r0, r2
 8011abe:	7842      	ldrb	r2, [r0, #1]
 8011ac0:	0712      	lsls	r2, r2, #28
 8011ac2:	d464      	bmi.n	8011b8e <__ssvfiscanf_r+0x22a>
 8011ac4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011ac6:	2b02      	cmp	r3, #2
 8011ac8:	dc73      	bgt.n	8011bb2 <__ssvfiscanf_r+0x24e>
 8011aca:	466b      	mov	r3, sp
 8011acc:	4622      	mov	r2, r4
 8011ace:	a941      	add	r1, sp, #260	; 0x104
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f000 f9d7 	bl	8011e84 <_scanf_chars>
 8011ad6:	2801      	cmp	r0, #1
 8011ad8:	f000 8089 	beq.w	8011bee <__ssvfiscanf_r+0x28a>
 8011adc:	2802      	cmp	r0, #2
 8011ade:	f47f af71 	bne.w	80119c4 <__ssvfiscanf_r+0x60>
 8011ae2:	e01d      	b.n	8011b20 <__ssvfiscanf_r+0x1bc>
 8011ae4:	2b75      	cmp	r3, #117	; 0x75
 8011ae6:	d0d1      	beq.n	8011a8c <__ssvfiscanf_r+0x128>
 8011ae8:	2b78      	cmp	r3, #120	; 0x78
 8011aea:	d0c0      	beq.n	8011a6e <__ssvfiscanf_r+0x10a>
 8011aec:	2b73      	cmp	r3, #115	; 0x73
 8011aee:	d1af      	bne.n	8011a50 <__ssvfiscanf_r+0xec>
 8011af0:	2302      	movs	r3, #2
 8011af2:	e7d8      	b.n	8011aa6 <__ssvfiscanf_r+0x142>
 8011af4:	6863      	ldr	r3, [r4, #4]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	dd0c      	ble.n	8011b14 <__ssvfiscanf_r+0x1b0>
 8011afa:	6823      	ldr	r3, [r4, #0]
 8011afc:	781a      	ldrb	r2, [r3, #0]
 8011afe:	455a      	cmp	r2, fp
 8011b00:	d175      	bne.n	8011bee <__ssvfiscanf_r+0x28a>
 8011b02:	3301      	adds	r3, #1
 8011b04:	6862      	ldr	r2, [r4, #4]
 8011b06:	6023      	str	r3, [r4, #0]
 8011b08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011b0a:	3a01      	subs	r2, #1
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	6062      	str	r2, [r4, #4]
 8011b10:	9345      	str	r3, [sp, #276]	; 0x114
 8011b12:	e757      	b.n	80119c4 <__ssvfiscanf_r+0x60>
 8011b14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011b16:	4621      	mov	r1, r4
 8011b18:	4630      	mov	r0, r6
 8011b1a:	4798      	blx	r3
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	d0ec      	beq.n	8011afa <__ssvfiscanf_r+0x196>
 8011b20:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d159      	bne.n	8011bda <__ssvfiscanf_r+0x276>
 8011b26:	f04f 30ff 	mov.w	r0, #4294967295
 8011b2a:	e05c      	b.n	8011be6 <__ssvfiscanf_r+0x282>
 8011b2c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011b2e:	f042 0220 	orr.w	r2, r2, #32
 8011b32:	9241      	str	r2, [sp, #260]	; 0x104
 8011b34:	e79b      	b.n	8011a6e <__ssvfiscanf_r+0x10a>
 8011b36:	2308      	movs	r3, #8
 8011b38:	9342      	str	r3, [sp, #264]	; 0x108
 8011b3a:	2304      	movs	r3, #4
 8011b3c:	e7b3      	b.n	8011aa6 <__ssvfiscanf_r+0x142>
 8011b3e:	4629      	mov	r1, r5
 8011b40:	4640      	mov	r0, r8
 8011b42:	f000 fb19 	bl	8012178 <__sccl>
 8011b46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b4c:	9341      	str	r3, [sp, #260]	; 0x104
 8011b4e:	4605      	mov	r5, r0
 8011b50:	2301      	movs	r3, #1
 8011b52:	e7a8      	b.n	8011aa6 <__ssvfiscanf_r+0x142>
 8011b54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b5a:	9341      	str	r3, [sp, #260]	; 0x104
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e7a2      	b.n	8011aa6 <__ssvfiscanf_r+0x142>
 8011b60:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011b62:	06c3      	lsls	r3, r0, #27
 8011b64:	f53f af2e 	bmi.w	80119c4 <__ssvfiscanf_r+0x60>
 8011b68:	9b00      	ldr	r3, [sp, #0]
 8011b6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011b6c:	1d19      	adds	r1, r3, #4
 8011b6e:	9100      	str	r1, [sp, #0]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	07c0      	lsls	r0, r0, #31
 8011b74:	bf4c      	ite	mi
 8011b76:	801a      	strhmi	r2, [r3, #0]
 8011b78:	601a      	strpl	r2, [r3, #0]
 8011b7a:	e723      	b.n	80119c4 <__ssvfiscanf_r+0x60>
 8011b7c:	2305      	movs	r3, #5
 8011b7e:	e792      	b.n	8011aa6 <__ssvfiscanf_r+0x142>
 8011b80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011b82:	4621      	mov	r1, r4
 8011b84:	4630      	mov	r0, r6
 8011b86:	4798      	blx	r3
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d090      	beq.n	8011aae <__ssvfiscanf_r+0x14a>
 8011b8c:	e7c8      	b.n	8011b20 <__ssvfiscanf_r+0x1bc>
 8011b8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011b90:	3201      	adds	r2, #1
 8011b92:	9245      	str	r2, [sp, #276]	; 0x114
 8011b94:	6862      	ldr	r2, [r4, #4]
 8011b96:	3a01      	subs	r2, #1
 8011b98:	2a00      	cmp	r2, #0
 8011b9a:	6062      	str	r2, [r4, #4]
 8011b9c:	dd02      	ble.n	8011ba4 <__ssvfiscanf_r+0x240>
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	6023      	str	r3, [r4, #0]
 8011ba2:	e787      	b.n	8011ab4 <__ssvfiscanf_r+0x150>
 8011ba4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	4630      	mov	r0, r6
 8011baa:	4798      	blx	r3
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d081      	beq.n	8011ab4 <__ssvfiscanf_r+0x150>
 8011bb0:	e7b6      	b.n	8011b20 <__ssvfiscanf_r+0x1bc>
 8011bb2:	2b04      	cmp	r3, #4
 8011bb4:	dc06      	bgt.n	8011bc4 <__ssvfiscanf_r+0x260>
 8011bb6:	466b      	mov	r3, sp
 8011bb8:	4622      	mov	r2, r4
 8011bba:	a941      	add	r1, sp, #260	; 0x104
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	f000 f9c5 	bl	8011f4c <_scanf_i>
 8011bc2:	e788      	b.n	8011ad6 <__ssvfiscanf_r+0x172>
 8011bc4:	4b0e      	ldr	r3, [pc, #56]	; (8011c00 <__ssvfiscanf_r+0x29c>)
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	f43f aefc 	beq.w	80119c4 <__ssvfiscanf_r+0x60>
 8011bcc:	466b      	mov	r3, sp
 8011bce:	4622      	mov	r2, r4
 8011bd0:	a941      	add	r1, sp, #260	; 0x104
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	f7fc f9e2 	bl	800df9c <_scanf_float>
 8011bd8:	e77d      	b.n	8011ad6 <__ssvfiscanf_r+0x172>
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011be0:	bf18      	it	ne
 8011be2:	f04f 30ff 	movne.w	r0, #4294967295
 8011be6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011bf0:	e7f9      	b.n	8011be6 <__ssvfiscanf_r+0x282>
 8011bf2:	bf00      	nop
 8011bf4:	080118b1 	.word	0x080118b1
 8011bf8:	0801192b 	.word	0x0801192b
 8011bfc:	08012c82 	.word	0x08012c82
 8011c00:	0800df9d 	.word	0x0800df9d

08011c04 <__sfputc_r>:
 8011c04:	6893      	ldr	r3, [r2, #8]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	b410      	push	{r4}
 8011c0c:	6093      	str	r3, [r2, #8]
 8011c0e:	da08      	bge.n	8011c22 <__sfputc_r+0x1e>
 8011c10:	6994      	ldr	r4, [r2, #24]
 8011c12:	42a3      	cmp	r3, r4
 8011c14:	db01      	blt.n	8011c1a <__sfputc_r+0x16>
 8011c16:	290a      	cmp	r1, #10
 8011c18:	d103      	bne.n	8011c22 <__sfputc_r+0x1e>
 8011c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c1e:	f7fd bbbd 	b.w	800f39c <__swbuf_r>
 8011c22:	6813      	ldr	r3, [r2, #0]
 8011c24:	1c58      	adds	r0, r3, #1
 8011c26:	6010      	str	r0, [r2, #0]
 8011c28:	7019      	strb	r1, [r3, #0]
 8011c2a:	4608      	mov	r0, r1
 8011c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <__sfputs_r>:
 8011c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c34:	4606      	mov	r6, r0
 8011c36:	460f      	mov	r7, r1
 8011c38:	4614      	mov	r4, r2
 8011c3a:	18d5      	adds	r5, r2, r3
 8011c3c:	42ac      	cmp	r4, r5
 8011c3e:	d101      	bne.n	8011c44 <__sfputs_r+0x12>
 8011c40:	2000      	movs	r0, #0
 8011c42:	e007      	b.n	8011c54 <__sfputs_r+0x22>
 8011c44:	463a      	mov	r2, r7
 8011c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f7ff ffda 	bl	8011c04 <__sfputc_r>
 8011c50:	1c43      	adds	r3, r0, #1
 8011c52:	d1f3      	bne.n	8011c3c <__sfputs_r+0xa>
 8011c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c58 <_vfiprintf_r>:
 8011c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5c:	460c      	mov	r4, r1
 8011c5e:	b09d      	sub	sp, #116	; 0x74
 8011c60:	4617      	mov	r7, r2
 8011c62:	461d      	mov	r5, r3
 8011c64:	4606      	mov	r6, r0
 8011c66:	b118      	cbz	r0, 8011c70 <_vfiprintf_r+0x18>
 8011c68:	6983      	ldr	r3, [r0, #24]
 8011c6a:	b90b      	cbnz	r3, 8011c70 <_vfiprintf_r+0x18>
 8011c6c:	f7fe fbac 	bl	80103c8 <__sinit>
 8011c70:	4b7c      	ldr	r3, [pc, #496]	; (8011e64 <_vfiprintf_r+0x20c>)
 8011c72:	429c      	cmp	r4, r3
 8011c74:	d158      	bne.n	8011d28 <_vfiprintf_r+0xd0>
 8011c76:	6874      	ldr	r4, [r6, #4]
 8011c78:	89a3      	ldrh	r3, [r4, #12]
 8011c7a:	0718      	lsls	r0, r3, #28
 8011c7c:	d55e      	bpl.n	8011d3c <_vfiprintf_r+0xe4>
 8011c7e:	6923      	ldr	r3, [r4, #16]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d05b      	beq.n	8011d3c <_vfiprintf_r+0xe4>
 8011c84:	2300      	movs	r3, #0
 8011c86:	9309      	str	r3, [sp, #36]	; 0x24
 8011c88:	2320      	movs	r3, #32
 8011c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c8e:	2330      	movs	r3, #48	; 0x30
 8011c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c94:	9503      	str	r5, [sp, #12]
 8011c96:	f04f 0b01 	mov.w	fp, #1
 8011c9a:	46b8      	mov	r8, r7
 8011c9c:	4645      	mov	r5, r8
 8011c9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011ca2:	b10b      	cbz	r3, 8011ca8 <_vfiprintf_r+0x50>
 8011ca4:	2b25      	cmp	r3, #37	; 0x25
 8011ca6:	d154      	bne.n	8011d52 <_vfiprintf_r+0xfa>
 8011ca8:	ebb8 0a07 	subs.w	sl, r8, r7
 8011cac:	d00b      	beq.n	8011cc6 <_vfiprintf_r+0x6e>
 8011cae:	4653      	mov	r3, sl
 8011cb0:	463a      	mov	r2, r7
 8011cb2:	4621      	mov	r1, r4
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	f7ff ffbc 	bl	8011c32 <__sfputs_r>
 8011cba:	3001      	adds	r0, #1
 8011cbc:	f000 80c2 	beq.w	8011e44 <_vfiprintf_r+0x1ec>
 8011cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cc2:	4453      	add	r3, sl
 8011cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8011cc6:	f898 3000 	ldrb.w	r3, [r8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	f000 80ba 	beq.w	8011e44 <_vfiprintf_r+0x1ec>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cda:	9304      	str	r3, [sp, #16]
 8011cdc:	9307      	str	r3, [sp, #28]
 8011cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8011ce4:	46a8      	mov	r8, r5
 8011ce6:	2205      	movs	r2, #5
 8011ce8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011cec:	485e      	ldr	r0, [pc, #376]	; (8011e68 <_vfiprintf_r+0x210>)
 8011cee:	f7ee fa8f 	bl	8000210 <memchr>
 8011cf2:	9b04      	ldr	r3, [sp, #16]
 8011cf4:	bb78      	cbnz	r0, 8011d56 <_vfiprintf_r+0xfe>
 8011cf6:	06d9      	lsls	r1, r3, #27
 8011cf8:	bf44      	itt	mi
 8011cfa:	2220      	movmi	r2, #32
 8011cfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d00:	071a      	lsls	r2, r3, #28
 8011d02:	bf44      	itt	mi
 8011d04:	222b      	movmi	r2, #43	; 0x2b
 8011d06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d0a:	782a      	ldrb	r2, [r5, #0]
 8011d0c:	2a2a      	cmp	r2, #42	; 0x2a
 8011d0e:	d02a      	beq.n	8011d66 <_vfiprintf_r+0x10e>
 8011d10:	9a07      	ldr	r2, [sp, #28]
 8011d12:	46a8      	mov	r8, r5
 8011d14:	2000      	movs	r0, #0
 8011d16:	250a      	movs	r5, #10
 8011d18:	4641      	mov	r1, r8
 8011d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d1e:	3b30      	subs	r3, #48	; 0x30
 8011d20:	2b09      	cmp	r3, #9
 8011d22:	d969      	bls.n	8011df8 <_vfiprintf_r+0x1a0>
 8011d24:	b360      	cbz	r0, 8011d80 <_vfiprintf_r+0x128>
 8011d26:	e024      	b.n	8011d72 <_vfiprintf_r+0x11a>
 8011d28:	4b50      	ldr	r3, [pc, #320]	; (8011e6c <_vfiprintf_r+0x214>)
 8011d2a:	429c      	cmp	r4, r3
 8011d2c:	d101      	bne.n	8011d32 <_vfiprintf_r+0xda>
 8011d2e:	68b4      	ldr	r4, [r6, #8]
 8011d30:	e7a2      	b.n	8011c78 <_vfiprintf_r+0x20>
 8011d32:	4b4f      	ldr	r3, [pc, #316]	; (8011e70 <_vfiprintf_r+0x218>)
 8011d34:	429c      	cmp	r4, r3
 8011d36:	bf08      	it	eq
 8011d38:	68f4      	ldreq	r4, [r6, #12]
 8011d3a:	e79d      	b.n	8011c78 <_vfiprintf_r+0x20>
 8011d3c:	4621      	mov	r1, r4
 8011d3e:	4630      	mov	r0, r6
 8011d40:	f7fd fb90 	bl	800f464 <__swsetup_r>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d09d      	beq.n	8011c84 <_vfiprintf_r+0x2c>
 8011d48:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4c:	b01d      	add	sp, #116	; 0x74
 8011d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d52:	46a8      	mov	r8, r5
 8011d54:	e7a2      	b.n	8011c9c <_vfiprintf_r+0x44>
 8011d56:	4a44      	ldr	r2, [pc, #272]	; (8011e68 <_vfiprintf_r+0x210>)
 8011d58:	1a80      	subs	r0, r0, r2
 8011d5a:	fa0b f000 	lsl.w	r0, fp, r0
 8011d5e:	4318      	orrs	r0, r3
 8011d60:	9004      	str	r0, [sp, #16]
 8011d62:	4645      	mov	r5, r8
 8011d64:	e7be      	b.n	8011ce4 <_vfiprintf_r+0x8c>
 8011d66:	9a03      	ldr	r2, [sp, #12]
 8011d68:	1d11      	adds	r1, r2, #4
 8011d6a:	6812      	ldr	r2, [r2, #0]
 8011d6c:	9103      	str	r1, [sp, #12]
 8011d6e:	2a00      	cmp	r2, #0
 8011d70:	db01      	blt.n	8011d76 <_vfiprintf_r+0x11e>
 8011d72:	9207      	str	r2, [sp, #28]
 8011d74:	e004      	b.n	8011d80 <_vfiprintf_r+0x128>
 8011d76:	4252      	negs	r2, r2
 8011d78:	f043 0302 	orr.w	r3, r3, #2
 8011d7c:	9207      	str	r2, [sp, #28]
 8011d7e:	9304      	str	r3, [sp, #16]
 8011d80:	f898 3000 	ldrb.w	r3, [r8]
 8011d84:	2b2e      	cmp	r3, #46	; 0x2e
 8011d86:	d10e      	bne.n	8011da6 <_vfiprintf_r+0x14e>
 8011d88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8011d8e:	d138      	bne.n	8011e02 <_vfiprintf_r+0x1aa>
 8011d90:	9b03      	ldr	r3, [sp, #12]
 8011d92:	1d1a      	adds	r2, r3, #4
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	9203      	str	r2, [sp, #12]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	bfb8      	it	lt
 8011d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011da0:	f108 0802 	add.w	r8, r8, #2
 8011da4:	9305      	str	r3, [sp, #20]
 8011da6:	4d33      	ldr	r5, [pc, #204]	; (8011e74 <_vfiprintf_r+0x21c>)
 8011da8:	f898 1000 	ldrb.w	r1, [r8]
 8011dac:	2203      	movs	r2, #3
 8011dae:	4628      	mov	r0, r5
 8011db0:	f7ee fa2e 	bl	8000210 <memchr>
 8011db4:	b140      	cbz	r0, 8011dc8 <_vfiprintf_r+0x170>
 8011db6:	2340      	movs	r3, #64	; 0x40
 8011db8:	1b40      	subs	r0, r0, r5
 8011dba:	fa03 f000 	lsl.w	r0, r3, r0
 8011dbe:	9b04      	ldr	r3, [sp, #16]
 8011dc0:	4303      	orrs	r3, r0
 8011dc2:	f108 0801 	add.w	r8, r8, #1
 8011dc6:	9304      	str	r3, [sp, #16]
 8011dc8:	f898 1000 	ldrb.w	r1, [r8]
 8011dcc:	482a      	ldr	r0, [pc, #168]	; (8011e78 <_vfiprintf_r+0x220>)
 8011dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dd2:	2206      	movs	r2, #6
 8011dd4:	f108 0701 	add.w	r7, r8, #1
 8011dd8:	f7ee fa1a 	bl	8000210 <memchr>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d037      	beq.n	8011e50 <_vfiprintf_r+0x1f8>
 8011de0:	4b26      	ldr	r3, [pc, #152]	; (8011e7c <_vfiprintf_r+0x224>)
 8011de2:	bb1b      	cbnz	r3, 8011e2c <_vfiprintf_r+0x1d4>
 8011de4:	9b03      	ldr	r3, [sp, #12]
 8011de6:	3307      	adds	r3, #7
 8011de8:	f023 0307 	bic.w	r3, r3, #7
 8011dec:	3308      	adds	r3, #8
 8011dee:	9303      	str	r3, [sp, #12]
 8011df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df2:	444b      	add	r3, r9
 8011df4:	9309      	str	r3, [sp, #36]	; 0x24
 8011df6:	e750      	b.n	8011c9a <_vfiprintf_r+0x42>
 8011df8:	fb05 3202 	mla	r2, r5, r2, r3
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	4688      	mov	r8, r1
 8011e00:	e78a      	b.n	8011d18 <_vfiprintf_r+0xc0>
 8011e02:	2300      	movs	r3, #0
 8011e04:	f108 0801 	add.w	r8, r8, #1
 8011e08:	9305      	str	r3, [sp, #20]
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	250a      	movs	r5, #10
 8011e0e:	4640      	mov	r0, r8
 8011e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e14:	3a30      	subs	r2, #48	; 0x30
 8011e16:	2a09      	cmp	r2, #9
 8011e18:	d903      	bls.n	8011e22 <_vfiprintf_r+0x1ca>
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d0c3      	beq.n	8011da6 <_vfiprintf_r+0x14e>
 8011e1e:	9105      	str	r1, [sp, #20]
 8011e20:	e7c1      	b.n	8011da6 <_vfiprintf_r+0x14e>
 8011e22:	fb05 2101 	mla	r1, r5, r1, r2
 8011e26:	2301      	movs	r3, #1
 8011e28:	4680      	mov	r8, r0
 8011e2a:	e7f0      	b.n	8011e0e <_vfiprintf_r+0x1b6>
 8011e2c:	ab03      	add	r3, sp, #12
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	4622      	mov	r2, r4
 8011e32:	4b13      	ldr	r3, [pc, #76]	; (8011e80 <_vfiprintf_r+0x228>)
 8011e34:	a904      	add	r1, sp, #16
 8011e36:	4630      	mov	r0, r6
 8011e38:	f7fb fce8 	bl	800d80c <_printf_float>
 8011e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011e40:	4681      	mov	r9, r0
 8011e42:	d1d5      	bne.n	8011df0 <_vfiprintf_r+0x198>
 8011e44:	89a3      	ldrh	r3, [r4, #12]
 8011e46:	065b      	lsls	r3, r3, #25
 8011e48:	f53f af7e 	bmi.w	8011d48 <_vfiprintf_r+0xf0>
 8011e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e4e:	e77d      	b.n	8011d4c <_vfiprintf_r+0xf4>
 8011e50:	ab03      	add	r3, sp, #12
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	4622      	mov	r2, r4
 8011e56:	4b0a      	ldr	r3, [pc, #40]	; (8011e80 <_vfiprintf_r+0x228>)
 8011e58:	a904      	add	r1, sp, #16
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f7fb ff8c 	bl	800dd78 <_printf_i>
 8011e60:	e7ec      	b.n	8011e3c <_vfiprintf_r+0x1e4>
 8011e62:	bf00      	nop
 8011e64:	08012b30 	.word	0x08012b30
 8011e68:	08012c7c 	.word	0x08012c7c
 8011e6c:	08012b50 	.word	0x08012b50
 8011e70:	08012b10 	.word	0x08012b10
 8011e74:	08012c82 	.word	0x08012c82
 8011e78:	08012c86 	.word	0x08012c86
 8011e7c:	0800d80d 	.word	0x0800d80d
 8011e80:	08011c33 	.word	0x08011c33

08011e84 <_scanf_chars>:
 8011e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e88:	4615      	mov	r5, r2
 8011e8a:	688a      	ldr	r2, [r1, #8]
 8011e8c:	4680      	mov	r8, r0
 8011e8e:	460c      	mov	r4, r1
 8011e90:	b932      	cbnz	r2, 8011ea0 <_scanf_chars+0x1c>
 8011e92:	698a      	ldr	r2, [r1, #24]
 8011e94:	2a00      	cmp	r2, #0
 8011e96:	bf14      	ite	ne
 8011e98:	f04f 32ff 	movne.w	r2, #4294967295
 8011e9c:	2201      	moveq	r2, #1
 8011e9e:	608a      	str	r2, [r1, #8]
 8011ea0:	6822      	ldr	r2, [r4, #0]
 8011ea2:	06d1      	lsls	r1, r2, #27
 8011ea4:	bf5f      	itttt	pl
 8011ea6:	681a      	ldrpl	r2, [r3, #0]
 8011ea8:	1d11      	addpl	r1, r2, #4
 8011eaa:	6019      	strpl	r1, [r3, #0]
 8011eac:	6817      	ldrpl	r7, [r2, #0]
 8011eae:	2600      	movs	r6, #0
 8011eb0:	69a3      	ldr	r3, [r4, #24]
 8011eb2:	b1db      	cbz	r3, 8011eec <_scanf_chars+0x68>
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d107      	bne.n	8011ec8 <_scanf_chars+0x44>
 8011eb8:	682b      	ldr	r3, [r5, #0]
 8011eba:	6962      	ldr	r2, [r4, #20]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	5cd3      	ldrb	r3, [r2, r3]
 8011ec0:	b9a3      	cbnz	r3, 8011eec <_scanf_chars+0x68>
 8011ec2:	2e00      	cmp	r6, #0
 8011ec4:	d132      	bne.n	8011f2c <_scanf_chars+0xa8>
 8011ec6:	e006      	b.n	8011ed6 <_scanf_chars+0x52>
 8011ec8:	2b02      	cmp	r3, #2
 8011eca:	d007      	beq.n	8011edc <_scanf_chars+0x58>
 8011ecc:	2e00      	cmp	r6, #0
 8011ece:	d12d      	bne.n	8011f2c <_scanf_chars+0xa8>
 8011ed0:	69a3      	ldr	r3, [r4, #24]
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d12a      	bne.n	8011f2c <_scanf_chars+0xa8>
 8011ed6:	2001      	movs	r0, #1
 8011ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011edc:	f7fe fe28 	bl	8010b30 <__locale_ctype_ptr>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	4418      	add	r0, r3
 8011ee6:	7843      	ldrb	r3, [r0, #1]
 8011ee8:	071b      	lsls	r3, r3, #28
 8011eea:	d4ef      	bmi.n	8011ecc <_scanf_chars+0x48>
 8011eec:	6823      	ldr	r3, [r4, #0]
 8011eee:	06da      	lsls	r2, r3, #27
 8011ef0:	bf5e      	ittt	pl
 8011ef2:	682b      	ldrpl	r3, [r5, #0]
 8011ef4:	781b      	ldrbpl	r3, [r3, #0]
 8011ef6:	703b      	strbpl	r3, [r7, #0]
 8011ef8:	682a      	ldr	r2, [r5, #0]
 8011efa:	686b      	ldr	r3, [r5, #4]
 8011efc:	f102 0201 	add.w	r2, r2, #1
 8011f00:	602a      	str	r2, [r5, #0]
 8011f02:	68a2      	ldr	r2, [r4, #8]
 8011f04:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f08:	f102 32ff 	add.w	r2, r2, #4294967295
 8011f0c:	606b      	str	r3, [r5, #4]
 8011f0e:	f106 0601 	add.w	r6, r6, #1
 8011f12:	bf58      	it	pl
 8011f14:	3701      	addpl	r7, #1
 8011f16:	60a2      	str	r2, [r4, #8]
 8011f18:	b142      	cbz	r2, 8011f2c <_scanf_chars+0xa8>
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	dcc8      	bgt.n	8011eb0 <_scanf_chars+0x2c>
 8011f1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011f22:	4629      	mov	r1, r5
 8011f24:	4640      	mov	r0, r8
 8011f26:	4798      	blx	r3
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d0c1      	beq.n	8011eb0 <_scanf_chars+0x2c>
 8011f2c:	6823      	ldr	r3, [r4, #0]
 8011f2e:	f013 0310 	ands.w	r3, r3, #16
 8011f32:	d105      	bne.n	8011f40 <_scanf_chars+0xbc>
 8011f34:	68e2      	ldr	r2, [r4, #12]
 8011f36:	3201      	adds	r2, #1
 8011f38:	60e2      	str	r2, [r4, #12]
 8011f3a:	69a2      	ldr	r2, [r4, #24]
 8011f3c:	b102      	cbz	r2, 8011f40 <_scanf_chars+0xbc>
 8011f3e:	703b      	strb	r3, [r7, #0]
 8011f40:	6923      	ldr	r3, [r4, #16]
 8011f42:	441e      	add	r6, r3
 8011f44:	6126      	str	r6, [r4, #16]
 8011f46:	2000      	movs	r0, #0
 8011f48:	e7c6      	b.n	8011ed8 <_scanf_chars+0x54>
	...

08011f4c <_scanf_i>:
 8011f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f50:	469a      	mov	sl, r3
 8011f52:	4b74      	ldr	r3, [pc, #464]	; (8012124 <_scanf_i+0x1d8>)
 8011f54:	460c      	mov	r4, r1
 8011f56:	4683      	mov	fp, r0
 8011f58:	4616      	mov	r6, r2
 8011f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f5e:	b087      	sub	sp, #28
 8011f60:	ab03      	add	r3, sp, #12
 8011f62:	68a7      	ldr	r7, [r4, #8]
 8011f64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011f68:	4b6f      	ldr	r3, [pc, #444]	; (8012128 <_scanf_i+0x1dc>)
 8011f6a:	69a1      	ldr	r1, [r4, #24]
 8011f6c:	4a6f      	ldr	r2, [pc, #444]	; (801212c <_scanf_i+0x1e0>)
 8011f6e:	2903      	cmp	r1, #3
 8011f70:	bf08      	it	eq
 8011f72:	461a      	moveq	r2, r3
 8011f74:	1e7b      	subs	r3, r7, #1
 8011f76:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8011f7a:	bf84      	itt	hi
 8011f7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011f80:	60a3      	strhi	r3, [r4, #8]
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	9200      	str	r2, [sp, #0]
 8011f86:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011f8a:	bf88      	it	hi
 8011f8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011f90:	f104 091c 	add.w	r9, r4, #28
 8011f94:	6023      	str	r3, [r4, #0]
 8011f96:	bf8c      	ite	hi
 8011f98:	197f      	addhi	r7, r7, r5
 8011f9a:	2700      	movls	r7, #0
 8011f9c:	464b      	mov	r3, r9
 8011f9e:	f04f 0800 	mov.w	r8, #0
 8011fa2:	9301      	str	r3, [sp, #4]
 8011fa4:	6831      	ldr	r1, [r6, #0]
 8011fa6:	ab03      	add	r3, sp, #12
 8011fa8:	2202      	movs	r2, #2
 8011faa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011fae:	7809      	ldrb	r1, [r1, #0]
 8011fb0:	f7ee f92e 	bl	8000210 <memchr>
 8011fb4:	9b01      	ldr	r3, [sp, #4]
 8011fb6:	b330      	cbz	r0, 8012006 <_scanf_i+0xba>
 8011fb8:	f1b8 0f01 	cmp.w	r8, #1
 8011fbc:	d15a      	bne.n	8012074 <_scanf_i+0x128>
 8011fbe:	6862      	ldr	r2, [r4, #4]
 8011fc0:	b92a      	cbnz	r2, 8011fce <_scanf_i+0x82>
 8011fc2:	6822      	ldr	r2, [r4, #0]
 8011fc4:	2108      	movs	r1, #8
 8011fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011fca:	6061      	str	r1, [r4, #4]
 8011fcc:	6022      	str	r2, [r4, #0]
 8011fce:	6822      	ldr	r2, [r4, #0]
 8011fd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011fd4:	6022      	str	r2, [r4, #0]
 8011fd6:	68a2      	ldr	r2, [r4, #8]
 8011fd8:	1e51      	subs	r1, r2, #1
 8011fda:	60a1      	str	r1, [r4, #8]
 8011fdc:	b19a      	cbz	r2, 8012006 <_scanf_i+0xba>
 8011fde:	6832      	ldr	r2, [r6, #0]
 8011fe0:	1c51      	adds	r1, r2, #1
 8011fe2:	6031      	str	r1, [r6, #0]
 8011fe4:	7812      	ldrb	r2, [r2, #0]
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	1c5d      	adds	r5, r3, #1
 8011fea:	6873      	ldr	r3, [r6, #4]
 8011fec:	3b01      	subs	r3, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	6073      	str	r3, [r6, #4]
 8011ff2:	dc07      	bgt.n	8012004 <_scanf_i+0xb8>
 8011ff4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011ff8:	4631      	mov	r1, r6
 8011ffa:	4658      	mov	r0, fp
 8011ffc:	4798      	blx	r3
 8011ffe:	2800      	cmp	r0, #0
 8012000:	f040 8086 	bne.w	8012110 <_scanf_i+0x1c4>
 8012004:	462b      	mov	r3, r5
 8012006:	f108 0801 	add.w	r8, r8, #1
 801200a:	f1b8 0f03 	cmp.w	r8, #3
 801200e:	d1c8      	bne.n	8011fa2 <_scanf_i+0x56>
 8012010:	6862      	ldr	r2, [r4, #4]
 8012012:	b90a      	cbnz	r2, 8012018 <_scanf_i+0xcc>
 8012014:	220a      	movs	r2, #10
 8012016:	6062      	str	r2, [r4, #4]
 8012018:	6862      	ldr	r2, [r4, #4]
 801201a:	4945      	ldr	r1, [pc, #276]	; (8012130 <_scanf_i+0x1e4>)
 801201c:	6960      	ldr	r0, [r4, #20]
 801201e:	9301      	str	r3, [sp, #4]
 8012020:	1a89      	subs	r1, r1, r2
 8012022:	f000 f8a9 	bl	8012178 <__sccl>
 8012026:	9b01      	ldr	r3, [sp, #4]
 8012028:	f04f 0800 	mov.w	r8, #0
 801202c:	461d      	mov	r5, r3
 801202e:	68a3      	ldr	r3, [r4, #8]
 8012030:	6822      	ldr	r2, [r4, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d03a      	beq.n	80120ac <_scanf_i+0x160>
 8012036:	6831      	ldr	r1, [r6, #0]
 8012038:	6960      	ldr	r0, [r4, #20]
 801203a:	f891 c000 	ldrb.w	ip, [r1]
 801203e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012042:	2800      	cmp	r0, #0
 8012044:	d032      	beq.n	80120ac <_scanf_i+0x160>
 8012046:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801204a:	d121      	bne.n	8012090 <_scanf_i+0x144>
 801204c:	0510      	lsls	r0, r2, #20
 801204e:	d51f      	bpl.n	8012090 <_scanf_i+0x144>
 8012050:	f108 0801 	add.w	r8, r8, #1
 8012054:	b117      	cbz	r7, 801205c <_scanf_i+0x110>
 8012056:	3301      	adds	r3, #1
 8012058:	3f01      	subs	r7, #1
 801205a:	60a3      	str	r3, [r4, #8]
 801205c:	6873      	ldr	r3, [r6, #4]
 801205e:	3b01      	subs	r3, #1
 8012060:	2b00      	cmp	r3, #0
 8012062:	6073      	str	r3, [r6, #4]
 8012064:	dd1b      	ble.n	801209e <_scanf_i+0x152>
 8012066:	6833      	ldr	r3, [r6, #0]
 8012068:	3301      	adds	r3, #1
 801206a:	6033      	str	r3, [r6, #0]
 801206c:	68a3      	ldr	r3, [r4, #8]
 801206e:	3b01      	subs	r3, #1
 8012070:	60a3      	str	r3, [r4, #8]
 8012072:	e7dc      	b.n	801202e <_scanf_i+0xe2>
 8012074:	f1b8 0f02 	cmp.w	r8, #2
 8012078:	d1ad      	bne.n	8011fd6 <_scanf_i+0x8a>
 801207a:	6822      	ldr	r2, [r4, #0]
 801207c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012080:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012084:	d1bf      	bne.n	8012006 <_scanf_i+0xba>
 8012086:	2110      	movs	r1, #16
 8012088:	6061      	str	r1, [r4, #4]
 801208a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801208e:	e7a1      	b.n	8011fd4 <_scanf_i+0x88>
 8012090:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	780b      	ldrb	r3, [r1, #0]
 8012098:	702b      	strb	r3, [r5, #0]
 801209a:	3501      	adds	r5, #1
 801209c:	e7de      	b.n	801205c <_scanf_i+0x110>
 801209e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80120a2:	4631      	mov	r1, r6
 80120a4:	4658      	mov	r0, fp
 80120a6:	4798      	blx	r3
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d0df      	beq.n	801206c <_scanf_i+0x120>
 80120ac:	6823      	ldr	r3, [r4, #0]
 80120ae:	05d9      	lsls	r1, r3, #23
 80120b0:	d50c      	bpl.n	80120cc <_scanf_i+0x180>
 80120b2:	454d      	cmp	r5, r9
 80120b4:	d908      	bls.n	80120c8 <_scanf_i+0x17c>
 80120b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80120ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120be:	4632      	mov	r2, r6
 80120c0:	4658      	mov	r0, fp
 80120c2:	4798      	blx	r3
 80120c4:	1e6f      	subs	r7, r5, #1
 80120c6:	463d      	mov	r5, r7
 80120c8:	454d      	cmp	r5, r9
 80120ca:	d029      	beq.n	8012120 <_scanf_i+0x1d4>
 80120cc:	6822      	ldr	r2, [r4, #0]
 80120ce:	f012 0210 	ands.w	r2, r2, #16
 80120d2:	d113      	bne.n	80120fc <_scanf_i+0x1b0>
 80120d4:	702a      	strb	r2, [r5, #0]
 80120d6:	6863      	ldr	r3, [r4, #4]
 80120d8:	9e00      	ldr	r6, [sp, #0]
 80120da:	4649      	mov	r1, r9
 80120dc:	4658      	mov	r0, fp
 80120de:	47b0      	blx	r6
 80120e0:	f8da 3000 	ldr.w	r3, [sl]
 80120e4:	6821      	ldr	r1, [r4, #0]
 80120e6:	1d1a      	adds	r2, r3, #4
 80120e8:	f8ca 2000 	str.w	r2, [sl]
 80120ec:	f011 0f20 	tst.w	r1, #32
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	d010      	beq.n	8012116 <_scanf_i+0x1ca>
 80120f4:	6018      	str	r0, [r3, #0]
 80120f6:	68e3      	ldr	r3, [r4, #12]
 80120f8:	3301      	adds	r3, #1
 80120fa:	60e3      	str	r3, [r4, #12]
 80120fc:	eba5 0509 	sub.w	r5, r5, r9
 8012100:	44a8      	add	r8, r5
 8012102:	6925      	ldr	r5, [r4, #16]
 8012104:	4445      	add	r5, r8
 8012106:	6125      	str	r5, [r4, #16]
 8012108:	2000      	movs	r0, #0
 801210a:	b007      	add	sp, #28
 801210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012110:	f04f 0800 	mov.w	r8, #0
 8012114:	e7ca      	b.n	80120ac <_scanf_i+0x160>
 8012116:	07ca      	lsls	r2, r1, #31
 8012118:	bf4c      	ite	mi
 801211a:	8018      	strhmi	r0, [r3, #0]
 801211c:	6018      	strpl	r0, [r3, #0]
 801211e:	e7ea      	b.n	80120f6 <_scanf_i+0x1aa>
 8012120:	2001      	movs	r0, #1
 8012122:	e7f2      	b.n	801210a <_scanf_i+0x1be>
 8012124:	080125f0 	.word	0x080125f0
 8012128:	0800f339 	.word	0x0800f339
 801212c:	080122f5 	.word	0x080122f5
 8012130:	08012c9d 	.word	0x08012c9d

08012134 <_read_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	4c07      	ldr	r4, [pc, #28]	; (8012154 <_read_r+0x20>)
 8012138:	4605      	mov	r5, r0
 801213a:	4608      	mov	r0, r1
 801213c:	4611      	mov	r1, r2
 801213e:	2200      	movs	r2, #0
 8012140:	6022      	str	r2, [r4, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	f7f0 feea 	bl	8002f1c <_read>
 8012148:	1c43      	adds	r3, r0, #1
 801214a:	d102      	bne.n	8012152 <_read_r+0x1e>
 801214c:	6823      	ldr	r3, [r4, #0]
 801214e:	b103      	cbz	r3, 8012152 <_read_r+0x1e>
 8012150:	602b      	str	r3, [r5, #0]
 8012152:	bd38      	pop	{r3, r4, r5, pc}
 8012154:	20004d40 	.word	0x20004d40

08012158 <_sbrk_r>:
 8012158:	b538      	push	{r3, r4, r5, lr}
 801215a:	4c06      	ldr	r4, [pc, #24]	; (8012174 <_sbrk_r+0x1c>)
 801215c:	2300      	movs	r3, #0
 801215e:	4605      	mov	r5, r0
 8012160:	4608      	mov	r0, r1
 8012162:	6023      	str	r3, [r4, #0]
 8012164:	f7f0 ff2c 	bl	8002fc0 <_sbrk>
 8012168:	1c43      	adds	r3, r0, #1
 801216a:	d102      	bne.n	8012172 <_sbrk_r+0x1a>
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	b103      	cbz	r3, 8012172 <_sbrk_r+0x1a>
 8012170:	602b      	str	r3, [r5, #0]
 8012172:	bd38      	pop	{r3, r4, r5, pc}
 8012174:	20004d40 	.word	0x20004d40

08012178 <__sccl>:
 8012178:	b570      	push	{r4, r5, r6, lr}
 801217a:	780b      	ldrb	r3, [r1, #0]
 801217c:	2b5e      	cmp	r3, #94	; 0x5e
 801217e:	bf13      	iteet	ne
 8012180:	1c4a      	addne	r2, r1, #1
 8012182:	1c8a      	addeq	r2, r1, #2
 8012184:	784b      	ldrbeq	r3, [r1, #1]
 8012186:	2100      	movne	r1, #0
 8012188:	bf08      	it	eq
 801218a:	2101      	moveq	r1, #1
 801218c:	1e44      	subs	r4, r0, #1
 801218e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012192:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012196:	42ac      	cmp	r4, r5
 8012198:	d1fb      	bne.n	8012192 <__sccl+0x1a>
 801219a:	b913      	cbnz	r3, 80121a2 <__sccl+0x2a>
 801219c:	3a01      	subs	r2, #1
 801219e:	4610      	mov	r0, r2
 80121a0:	bd70      	pop	{r4, r5, r6, pc}
 80121a2:	f081 0401 	eor.w	r4, r1, #1
 80121a6:	54c4      	strb	r4, [r0, r3]
 80121a8:	1c51      	adds	r1, r2, #1
 80121aa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80121ae:	2d2d      	cmp	r5, #45	; 0x2d
 80121b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80121b4:	460a      	mov	r2, r1
 80121b6:	d006      	beq.n	80121c6 <__sccl+0x4e>
 80121b8:	2d5d      	cmp	r5, #93	; 0x5d
 80121ba:	d0f0      	beq.n	801219e <__sccl+0x26>
 80121bc:	b90d      	cbnz	r5, 80121c2 <__sccl+0x4a>
 80121be:	4632      	mov	r2, r6
 80121c0:	e7ed      	b.n	801219e <__sccl+0x26>
 80121c2:	462b      	mov	r3, r5
 80121c4:	e7ef      	b.n	80121a6 <__sccl+0x2e>
 80121c6:	780e      	ldrb	r6, [r1, #0]
 80121c8:	2e5d      	cmp	r6, #93	; 0x5d
 80121ca:	d0fa      	beq.n	80121c2 <__sccl+0x4a>
 80121cc:	42b3      	cmp	r3, r6
 80121ce:	dcf8      	bgt.n	80121c2 <__sccl+0x4a>
 80121d0:	3301      	adds	r3, #1
 80121d2:	429e      	cmp	r6, r3
 80121d4:	54c4      	strb	r4, [r0, r3]
 80121d6:	dcfb      	bgt.n	80121d0 <__sccl+0x58>
 80121d8:	3102      	adds	r1, #2
 80121da:	e7e6      	b.n	80121aa <__sccl+0x32>

080121dc <strncmp>:
 80121dc:	b510      	push	{r4, lr}
 80121de:	b16a      	cbz	r2, 80121fc <strncmp+0x20>
 80121e0:	3901      	subs	r1, #1
 80121e2:	1884      	adds	r4, r0, r2
 80121e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80121e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d103      	bne.n	80121f8 <strncmp+0x1c>
 80121f0:	42a0      	cmp	r0, r4
 80121f2:	d001      	beq.n	80121f8 <strncmp+0x1c>
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1f5      	bne.n	80121e4 <strncmp+0x8>
 80121f8:	1a98      	subs	r0, r3, r2
 80121fa:	bd10      	pop	{r4, pc}
 80121fc:	4610      	mov	r0, r2
 80121fe:	e7fc      	b.n	80121fa <strncmp+0x1e>

08012200 <_strtoul_l.isra.0>:
 8012200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012204:	4680      	mov	r8, r0
 8012206:	4689      	mov	r9, r1
 8012208:	4692      	mov	sl, r2
 801220a:	461e      	mov	r6, r3
 801220c:	460f      	mov	r7, r1
 801220e:	463d      	mov	r5, r7
 8012210:	9808      	ldr	r0, [sp, #32]
 8012212:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012216:	f7fe fc87 	bl	8010b28 <__locale_ctype_ptr_l>
 801221a:	4420      	add	r0, r4
 801221c:	7843      	ldrb	r3, [r0, #1]
 801221e:	f013 0308 	ands.w	r3, r3, #8
 8012222:	d130      	bne.n	8012286 <_strtoul_l.isra.0+0x86>
 8012224:	2c2d      	cmp	r4, #45	; 0x2d
 8012226:	d130      	bne.n	801228a <_strtoul_l.isra.0+0x8a>
 8012228:	787c      	ldrb	r4, [r7, #1]
 801222a:	1cbd      	adds	r5, r7, #2
 801222c:	2101      	movs	r1, #1
 801222e:	2e00      	cmp	r6, #0
 8012230:	d05c      	beq.n	80122ec <_strtoul_l.isra.0+0xec>
 8012232:	2e10      	cmp	r6, #16
 8012234:	d109      	bne.n	801224a <_strtoul_l.isra.0+0x4a>
 8012236:	2c30      	cmp	r4, #48	; 0x30
 8012238:	d107      	bne.n	801224a <_strtoul_l.isra.0+0x4a>
 801223a:	782b      	ldrb	r3, [r5, #0]
 801223c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012240:	2b58      	cmp	r3, #88	; 0x58
 8012242:	d14e      	bne.n	80122e2 <_strtoul_l.isra.0+0xe2>
 8012244:	786c      	ldrb	r4, [r5, #1]
 8012246:	2610      	movs	r6, #16
 8012248:	3502      	adds	r5, #2
 801224a:	f04f 32ff 	mov.w	r2, #4294967295
 801224e:	2300      	movs	r3, #0
 8012250:	fbb2 f2f6 	udiv	r2, r2, r6
 8012254:	fb06 fc02 	mul.w	ip, r6, r2
 8012258:	ea6f 0c0c 	mvn.w	ip, ip
 801225c:	4618      	mov	r0, r3
 801225e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012262:	2f09      	cmp	r7, #9
 8012264:	d817      	bhi.n	8012296 <_strtoul_l.isra.0+0x96>
 8012266:	463c      	mov	r4, r7
 8012268:	42a6      	cmp	r6, r4
 801226a:	dd23      	ble.n	80122b4 <_strtoul_l.isra.0+0xb4>
 801226c:	2b00      	cmp	r3, #0
 801226e:	db1e      	blt.n	80122ae <_strtoul_l.isra.0+0xae>
 8012270:	4282      	cmp	r2, r0
 8012272:	d31c      	bcc.n	80122ae <_strtoul_l.isra.0+0xae>
 8012274:	d101      	bne.n	801227a <_strtoul_l.isra.0+0x7a>
 8012276:	45a4      	cmp	ip, r4
 8012278:	db19      	blt.n	80122ae <_strtoul_l.isra.0+0xae>
 801227a:	fb00 4006 	mla	r0, r0, r6, r4
 801227e:	2301      	movs	r3, #1
 8012280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012284:	e7eb      	b.n	801225e <_strtoul_l.isra.0+0x5e>
 8012286:	462f      	mov	r7, r5
 8012288:	e7c1      	b.n	801220e <_strtoul_l.isra.0+0xe>
 801228a:	2c2b      	cmp	r4, #43	; 0x2b
 801228c:	bf04      	itt	eq
 801228e:	1cbd      	addeq	r5, r7, #2
 8012290:	787c      	ldrbeq	r4, [r7, #1]
 8012292:	4619      	mov	r1, r3
 8012294:	e7cb      	b.n	801222e <_strtoul_l.isra.0+0x2e>
 8012296:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801229a:	2f19      	cmp	r7, #25
 801229c:	d801      	bhi.n	80122a2 <_strtoul_l.isra.0+0xa2>
 801229e:	3c37      	subs	r4, #55	; 0x37
 80122a0:	e7e2      	b.n	8012268 <_strtoul_l.isra.0+0x68>
 80122a2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80122a6:	2f19      	cmp	r7, #25
 80122a8:	d804      	bhi.n	80122b4 <_strtoul_l.isra.0+0xb4>
 80122aa:	3c57      	subs	r4, #87	; 0x57
 80122ac:	e7dc      	b.n	8012268 <_strtoul_l.isra.0+0x68>
 80122ae:	f04f 33ff 	mov.w	r3, #4294967295
 80122b2:	e7e5      	b.n	8012280 <_strtoul_l.isra.0+0x80>
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	da09      	bge.n	80122cc <_strtoul_l.isra.0+0xcc>
 80122b8:	2322      	movs	r3, #34	; 0x22
 80122ba:	f8c8 3000 	str.w	r3, [r8]
 80122be:	f04f 30ff 	mov.w	r0, #4294967295
 80122c2:	f1ba 0f00 	cmp.w	sl, #0
 80122c6:	d107      	bne.n	80122d8 <_strtoul_l.isra.0+0xd8>
 80122c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122cc:	b101      	cbz	r1, 80122d0 <_strtoul_l.isra.0+0xd0>
 80122ce:	4240      	negs	r0, r0
 80122d0:	f1ba 0f00 	cmp.w	sl, #0
 80122d4:	d0f8      	beq.n	80122c8 <_strtoul_l.isra.0+0xc8>
 80122d6:	b10b      	cbz	r3, 80122dc <_strtoul_l.isra.0+0xdc>
 80122d8:	f105 39ff 	add.w	r9, r5, #4294967295
 80122dc:	f8ca 9000 	str.w	r9, [sl]
 80122e0:	e7f2      	b.n	80122c8 <_strtoul_l.isra.0+0xc8>
 80122e2:	2430      	movs	r4, #48	; 0x30
 80122e4:	2e00      	cmp	r6, #0
 80122e6:	d1b0      	bne.n	801224a <_strtoul_l.isra.0+0x4a>
 80122e8:	2608      	movs	r6, #8
 80122ea:	e7ae      	b.n	801224a <_strtoul_l.isra.0+0x4a>
 80122ec:	2c30      	cmp	r4, #48	; 0x30
 80122ee:	d0a4      	beq.n	801223a <_strtoul_l.isra.0+0x3a>
 80122f0:	260a      	movs	r6, #10
 80122f2:	e7aa      	b.n	801224a <_strtoul_l.isra.0+0x4a>

080122f4 <_strtoul_r>:
 80122f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122f6:	4c06      	ldr	r4, [pc, #24]	; (8012310 <_strtoul_r+0x1c>)
 80122f8:	4d06      	ldr	r5, [pc, #24]	; (8012314 <_strtoul_r+0x20>)
 80122fa:	6824      	ldr	r4, [r4, #0]
 80122fc:	6a24      	ldr	r4, [r4, #32]
 80122fe:	2c00      	cmp	r4, #0
 8012300:	bf08      	it	eq
 8012302:	462c      	moveq	r4, r5
 8012304:	9400      	str	r4, [sp, #0]
 8012306:	f7ff ff7b 	bl	8012200 <_strtoul_l.isra.0>
 801230a:	b003      	add	sp, #12
 801230c:	bd30      	pop	{r4, r5, pc}
 801230e:	bf00      	nop
 8012310:	2000000c 	.word	0x2000000c
 8012314:	20000070 	.word	0x20000070

08012318 <__submore>:
 8012318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801231c:	460c      	mov	r4, r1
 801231e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012324:	4299      	cmp	r1, r3
 8012326:	d11d      	bne.n	8012364 <__submore+0x4c>
 8012328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801232c:	f7ff f914 	bl	8011558 <_malloc_r>
 8012330:	b918      	cbnz	r0, 801233a <__submore+0x22>
 8012332:	f04f 30ff 	mov.w	r0, #4294967295
 8012336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801233a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801233e:	63a3      	str	r3, [r4, #56]	; 0x38
 8012340:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012344:	6360      	str	r0, [r4, #52]	; 0x34
 8012346:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801234a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801234e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012352:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012356:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801235a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801235e:	6020      	str	r0, [r4, #0]
 8012360:	2000      	movs	r0, #0
 8012362:	e7e8      	b.n	8012336 <__submore+0x1e>
 8012364:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012366:	0077      	lsls	r7, r6, #1
 8012368:	463a      	mov	r2, r7
 801236a:	f000 f85a 	bl	8012422 <_realloc_r>
 801236e:	4605      	mov	r5, r0
 8012370:	2800      	cmp	r0, #0
 8012372:	d0de      	beq.n	8012332 <__submore+0x1a>
 8012374:	eb00 0806 	add.w	r8, r0, r6
 8012378:	4601      	mov	r1, r0
 801237a:	4632      	mov	r2, r6
 801237c:	4640      	mov	r0, r8
 801237e:	f7fe fc85 	bl	8010c8c <memcpy>
 8012382:	f8c4 8000 	str.w	r8, [r4]
 8012386:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801238a:	e7e9      	b.n	8012360 <__submore+0x48>

0801238c <__ascii_wctomb>:
 801238c:	b149      	cbz	r1, 80123a2 <__ascii_wctomb+0x16>
 801238e:	2aff      	cmp	r2, #255	; 0xff
 8012390:	bf85      	ittet	hi
 8012392:	238a      	movhi	r3, #138	; 0x8a
 8012394:	6003      	strhi	r3, [r0, #0]
 8012396:	700a      	strbls	r2, [r1, #0]
 8012398:	f04f 30ff 	movhi.w	r0, #4294967295
 801239c:	bf98      	it	ls
 801239e:	2001      	movls	r0, #1
 80123a0:	4770      	bx	lr
 80123a2:	4608      	mov	r0, r1
 80123a4:	4770      	bx	lr
	...

080123a8 <_fstat_r>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	4c07      	ldr	r4, [pc, #28]	; (80123c8 <_fstat_r+0x20>)
 80123ac:	2300      	movs	r3, #0
 80123ae:	4605      	mov	r5, r0
 80123b0:	4608      	mov	r0, r1
 80123b2:	4611      	mov	r1, r2
 80123b4:	6023      	str	r3, [r4, #0]
 80123b6:	f7f0 fdda 	bl	8002f6e <_fstat>
 80123ba:	1c43      	adds	r3, r0, #1
 80123bc:	d102      	bne.n	80123c4 <_fstat_r+0x1c>
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	b103      	cbz	r3, 80123c4 <_fstat_r+0x1c>
 80123c2:	602b      	str	r3, [r5, #0]
 80123c4:	bd38      	pop	{r3, r4, r5, pc}
 80123c6:	bf00      	nop
 80123c8:	20004d40 	.word	0x20004d40

080123cc <_isatty_r>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	4c06      	ldr	r4, [pc, #24]	; (80123e8 <_isatty_r+0x1c>)
 80123d0:	2300      	movs	r3, #0
 80123d2:	4605      	mov	r5, r0
 80123d4:	4608      	mov	r0, r1
 80123d6:	6023      	str	r3, [r4, #0]
 80123d8:	f7f0 fdd9 	bl	8002f8e <_isatty>
 80123dc:	1c43      	adds	r3, r0, #1
 80123de:	d102      	bne.n	80123e6 <_isatty_r+0x1a>
 80123e0:	6823      	ldr	r3, [r4, #0]
 80123e2:	b103      	cbz	r3, 80123e6 <_isatty_r+0x1a>
 80123e4:	602b      	str	r3, [r5, #0]
 80123e6:	bd38      	pop	{r3, r4, r5, pc}
 80123e8:	20004d40 	.word	0x20004d40

080123ec <memmove>:
 80123ec:	4288      	cmp	r0, r1
 80123ee:	b510      	push	{r4, lr}
 80123f0:	eb01 0302 	add.w	r3, r1, r2
 80123f4:	d807      	bhi.n	8012406 <memmove+0x1a>
 80123f6:	1e42      	subs	r2, r0, #1
 80123f8:	4299      	cmp	r1, r3
 80123fa:	d00a      	beq.n	8012412 <memmove+0x26>
 80123fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012400:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012404:	e7f8      	b.n	80123f8 <memmove+0xc>
 8012406:	4283      	cmp	r3, r0
 8012408:	d9f5      	bls.n	80123f6 <memmove+0xa>
 801240a:	1881      	adds	r1, r0, r2
 801240c:	1ad2      	subs	r2, r2, r3
 801240e:	42d3      	cmn	r3, r2
 8012410:	d100      	bne.n	8012414 <memmove+0x28>
 8012412:	bd10      	pop	{r4, pc}
 8012414:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012418:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801241c:	e7f7      	b.n	801240e <memmove+0x22>

0801241e <__malloc_lock>:
 801241e:	4770      	bx	lr

08012420 <__malloc_unlock>:
 8012420:	4770      	bx	lr

08012422 <_realloc_r>:
 8012422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012424:	4607      	mov	r7, r0
 8012426:	4614      	mov	r4, r2
 8012428:	460e      	mov	r6, r1
 801242a:	b921      	cbnz	r1, 8012436 <_realloc_r+0x14>
 801242c:	4611      	mov	r1, r2
 801242e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012432:	f7ff b891 	b.w	8011558 <_malloc_r>
 8012436:	b922      	cbnz	r2, 8012442 <_realloc_r+0x20>
 8012438:	f7ff f840 	bl	80114bc <_free_r>
 801243c:	4625      	mov	r5, r4
 801243e:	4628      	mov	r0, r5
 8012440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012442:	f000 f814 	bl	801246e <_malloc_usable_size_r>
 8012446:	42a0      	cmp	r0, r4
 8012448:	d20f      	bcs.n	801246a <_realloc_r+0x48>
 801244a:	4621      	mov	r1, r4
 801244c:	4638      	mov	r0, r7
 801244e:	f7ff f883 	bl	8011558 <_malloc_r>
 8012452:	4605      	mov	r5, r0
 8012454:	2800      	cmp	r0, #0
 8012456:	d0f2      	beq.n	801243e <_realloc_r+0x1c>
 8012458:	4631      	mov	r1, r6
 801245a:	4622      	mov	r2, r4
 801245c:	f7fe fc16 	bl	8010c8c <memcpy>
 8012460:	4631      	mov	r1, r6
 8012462:	4638      	mov	r0, r7
 8012464:	f7ff f82a 	bl	80114bc <_free_r>
 8012468:	e7e9      	b.n	801243e <_realloc_r+0x1c>
 801246a:	4635      	mov	r5, r6
 801246c:	e7e7      	b.n	801243e <_realloc_r+0x1c>

0801246e <_malloc_usable_size_r>:
 801246e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012472:	1f18      	subs	r0, r3, #4
 8012474:	2b00      	cmp	r3, #0
 8012476:	bfbc      	itt	lt
 8012478:	580b      	ldrlt	r3, [r1, r0]
 801247a:	18c0      	addlt	r0, r0, r3
 801247c:	4770      	bx	lr
	...

08012480 <_init>:
 8012480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012482:	bf00      	nop
 8012484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012486:	bc08      	pop	{r3}
 8012488:	469e      	mov	lr, r3
 801248a:	4770      	bx	lr

0801248c <_fini>:
 801248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801248e:	bf00      	nop
 8012490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012492:	bc08      	pop	{r3}
 8012494:	469e      	mov	lr, r3
 8012496:	4770      	bx	lr
